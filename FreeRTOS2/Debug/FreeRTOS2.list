
FreeRTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007120  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007450  08007450  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08007450  08007450  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007450  08007450  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007450  08007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007454  08007454  00017454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001308  2000007c  080074d4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001384  080074d4  00021384  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193cf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b32  00000000  00000000  00039473  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  0003cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001528  00000000  00000000  0003e698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001db85  00000000  00000000  0003fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000144f8  00000000  00000000  0005d745  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3546  00000000  00000000  00071c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00115183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005910  00000000  00000000  00115200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080071c8 	.word	0x080071c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	080071c8 	.word	0x080071c8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <displayInit>:
 *  		• MAX_COLUMNS
 * @param	hi2c 	- pointer to the i2c handler
 * @retval	status 	- 0...OK, other...error
 */
uint8_t displayInit(I2C_HandleTypeDef *hi2c)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 800024c:	230f      	movs	r3, #15
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]

	_i2cHandler = hi2c;			// pointer for i2c handler is stored in library
 8000254:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <displayInit+0x80>)
 8000256:	687a      	ldr	r2, [r7, #4]
 8000258:	601a      	str	r2, [r3, #0]

	// create i2c data stream
    uint8_t TransmitData[6] = {SPECIAL_COMMAND,									// special command character
 800025a:	2108      	movs	r1, #8
 800025c:	187b      	adds	r3, r7, r1
 800025e:	22fe      	movs	r2, #254	; 0xfe
 8000260:	701a      	strb	r2, [r3, #0]
 8000262:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <displayInit+0x84>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2208      	movs	r2, #8
 8000268:	4313      	orrs	r3, r2
 800026a:	b2da      	uxtb	r2, r3
 800026c:	187b      	adds	r3, r7, r1
 800026e:	705a      	strb	r2, [r3, #1]
 8000270:	187b      	adds	r3, r7, r1
 8000272:	22fe      	movs	r2, #254	; 0xfe
 8000274:	709a      	strb	r2, [r3, #2]
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <displayInit+0x88>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2204      	movs	r2, #4
 800027c:	4313      	orrs	r3, r2
 800027e:	b2da      	uxtb	r2, r3
 8000280:	187b      	adds	r3, r7, r1
 8000282:	70da      	strb	r2, [r3, #3]
 8000284:	187b      	adds	r3, r7, r1
 8000286:	227c      	movs	r2, #124	; 0x7c
 8000288:	711a      	strb	r2, [r3, #4]
 800028a:	187b      	adds	r3, r7, r1
 800028c:	222d      	movs	r2, #45	; 0x2d
 800028e:	715a      	strb	r2, [r3, #5]
							   SETTING_COMMAND, 								// Put LCD into setting mode
							   CLEAR_COMMAND 									// clear display
    						   };

    // transmission of data stream
    if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, TransmitData, sizeof(TransmitData), 100) != HAL_OK)		// transmit data
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <displayInit+0x80>)
 8000292:	6818      	ldr	r0, [r3, #0]
 8000294:	187a      	adds	r2, r7, r1
 8000296:	2364      	movs	r3, #100	; 0x64
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2306      	movs	r3, #6
 800029c:	21e4      	movs	r1, #228	; 0xe4
 800029e:	f001 fea3 	bl	8001fe8 <HAL_I2C_Master_Transmit>
 80002a2:	1e03      	subs	r3, r0, #0
 80002a4:	d003      	beq.n	80002ae <displayInit+0x6a>
    	retval = LCD_ERROR;
 80002a6:	230f      	movs	r3, #15
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 80002ae:	2032      	movs	r0, #50	; 0x32
 80002b0:	f001 f988 	bl	80015c4 <HAL_Delay>

    return retval;
 80002b4:	230f      	movs	r3, #15
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	781b      	ldrb	r3, [r3, #0]
}
 80002ba:	0018      	movs	r0, r3
 80002bc:	46bd      	mov	sp, r7
 80002be:	b004      	add	sp, #16
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	20001048 	.word	0x20001048
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000001 	.word	0x20000001

080002d0 <displaySetCursor>:
 * @param	col 	- column number (0...19)
 * @param	row  	- row number (0...3)
 * @retval	status 	- 0...OK, other...error
 */
uint8_t displaySetCursor(uint8_t col, uint8_t row)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	0002      	movs	r2, r0
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	1dbb      	adds	r3, r7, #6
 80002de:	1c0a      	adds	r2, r1, #0
 80002e0:	701a      	strb	r2, [r3, #0]
  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80002e2:	210c      	movs	r1, #12
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	4a0c      	ldr	r2, [pc, #48]	; (8000318 <displaySetCursor+0x48>)
 80002e8:	6812      	ldr	r2, [r2, #0]
 80002ea:	601a      	str	r2, [r3, #0]
  //kepp variables in bounds
  //row = max(0, row);            //row cannot be less than 0
  //row = min(row, MAX_ROWS - 1); //row cannot be greater than max rows

  //send the command
  return displaySpecialCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002ec:	1dbb      	adds	r3, r7, #6
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	187a      	adds	r2, r7, r1
 80002f2:	5cd2      	ldrb	r2, [r2, r3]
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	18d3      	adds	r3, r2, r3
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	b25b      	sxtb	r3, r3
 80002fe:	2280      	movs	r2, #128	; 0x80
 8000300:	4252      	negs	r2, r2
 8000302:	4313      	orrs	r3, r2
 8000304:	b25b      	sxtb	r3, r3
 8000306:	b2db      	uxtb	r3, r3
 8000308:	0018      	movs	r0, r3
 800030a:	f000 f831 	bl	8000370 <displaySpecialCommand>
 800030e:	0003      	movs	r3, r0
}
 8000310:	0018      	movs	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	b004      	add	sp, #16
 8000316:	bd80      	pop	{r7, pc}
 8000318:	080071e0 	.word	0x080071e0

0800031c <displayWriteString>:
 * @param	size  	- length of the string to write
 * @retval	status 	- 0...OK, other...error
 *
 */
uint8_t displayWriteString(char *buffer)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b087      	sub	sp, #28
 8000320:	af02      	add	r7, sp, #8
 8000322:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 8000324:	230f      	movs	r3, #15
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]

	// transmission of data stream
	if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, buffer, strlen(buffer), 100) != HAL_OK)		// transmit data
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <displayWriteString+0x50>)
 800032e:	681c      	ldr	r4, [r3, #0]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	0018      	movs	r0, r3
 8000334:	f7ff fef2 	bl	800011c <strlen>
 8000338:	0003      	movs	r3, r0
 800033a:	b299      	uxth	r1, r3
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	000b      	movs	r3, r1
 8000344:	21e4      	movs	r1, #228	; 0xe4
 8000346:	0020      	movs	r0, r4
 8000348:	f001 fe4e 	bl	8001fe8 <HAL_I2C_Master_Transmit>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d003      	beq.n	8000358 <displayWriteString+0x3c>
	  retval = LCD_ERROR;
 8000350:	230f      	movs	r3, #15
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	2201      	movs	r2, #1
 8000356:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10); //This takes a bit longer
 8000358:	200a      	movs	r0, #10
 800035a:	f001 f933 	bl	80015c4 <HAL_Delay>

    return retval;
 800035e:	230f      	movs	r3, #15
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
}
 8000364:	0018      	movs	r0, r3
 8000366:	46bd      	mov	sp, r7
 8000368:	b005      	add	sp, #20
 800036a:	bd90      	pop	{r4, r7, pc}
 800036c:	20001048 	.word	0x20001048

08000370 <displaySpecialCommand>:
/**
 * @brief	Send a special command to the display.  Used by other functions.
 * @retval	status (0...OK, other...error)
 */
uint8_t displaySpecialCommand(uint8_t command)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af02      	add	r7, sp, #8
 8000376:	0002      	movs	r2, r0
 8000378:	1dfb      	adds	r3, r7, #7
 800037a:	701a      	strb	r2, [r3, #0]
	uint8_t retval = LCD_OK;
 800037c:	230f      	movs	r3, #15
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	2200      	movs	r2, #0
 8000382:	701a      	strb	r2, [r3, #0]
	uint8_t TransmitData[2] = {SPECIAL_COMMAND, command}; 												// create data stream
 8000384:	210c      	movs	r1, #12
 8000386:	187b      	adds	r3, r7, r1
 8000388:	22fe      	movs	r2, #254	; 0xfe
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	187b      	adds	r3, r7, r1
 800038e:	1dfa      	adds	r2, r7, #7
 8000390:	7812      	ldrb	r2, [r2, #0]
 8000392:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, TransmitData, sizeof(TransmitData), 100) != HAL_OK)		// transmit data
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <displaySpecialCommand+0x58>)
 8000396:	6818      	ldr	r0, [r3, #0]
 8000398:	187a      	adds	r2, r7, r1
 800039a:	2364      	movs	r3, #100	; 0x64
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2302      	movs	r3, #2
 80003a0:	21e4      	movs	r1, #228	; 0xe4
 80003a2:	f001 fe21 	bl	8001fe8 <HAL_I2C_Master_Transmit>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d003      	beq.n	80003b2 <displaySpecialCommand+0x42>
		retval = LCD_ERROR;
 80003aa:	230f      	movs	r3, #15
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	2201      	movs	r2, #1
 80003b0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50); //Wait a bit longer for special display commands
 80003b2:	2032      	movs	r0, #50	; 0x32
 80003b4:	f001 f906 	bl	80015c4 <HAL_Delay>
	return retval;
 80003b8:	230f      	movs	r3, #15
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	781b      	ldrb	r3, [r3, #0]
}
 80003be:	0018      	movs	r0, r3
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b004      	add	sp, #16
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	20001048 	.word	0x20001048

080003cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_DMA_Init+0x38>)
 80003d4:	695a      	ldr	r2, [r3, #20]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_DMA_Init+0x38>)
 80003d8:	2101      	movs	r1, #1
 80003da:	430a      	orrs	r2, r1
 80003dc:	615a      	str	r2, [r3, #20]
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_DMA_Init+0x38>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	2201      	movs	r2, #1
 80003e4:	4013      	ands	r3, r2
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2103      	movs	r1, #3
 80003ee:	200a      	movs	r0, #10
 80003f0:	f001 f992 	bl	8001718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003f4:	200a      	movs	r0, #10
 80003f6:	f001 f9a4 	bl	8001742 <HAL_NVIC_EnableIRQ>

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40021000 	.word	0x40021000

08000408 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	4a06      	ldr	r2, [pc, #24]	; (8000430 <vApplicationGetIdleTaskMemory+0x28>)
 8000418:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <vApplicationGetIdleTaskMemory+0x2c>)
 800041e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2280      	movs	r2, #128	; 0x80
 8000424:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b004      	add	sp, #16
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	200000a4 	.word	0x200000a4
 8000434:	200000f8 	.word	0x200000f8

08000438 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b08b      	sub	sp, #44	; 0x2c
 800043c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
	xTaskCreate(vTask1,		/* Pointer to the function that implements the task. */
 800043e:	4914      	ldr	r1, [pc, #80]	; (8000490 <MX_FREERTOS_Init+0x58>)
 8000440:	4814      	ldr	r0, [pc, #80]	; (8000494 <MX_FREERTOS_Init+0x5c>)
 8000442:	2300      	movs	r3, #0
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	2303      	movs	r3, #3
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2300      	movs	r3, #0
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	f004 fe05 	bl	800505c <xTaskCreate>
					NULL,		/* task parameter. */
					3,			/* task priority */
					NULL );		/* task handle. */

		/* Create the other task in exactly the same way. */
	xTaskCreate( vTask2, "Task 2", 128, NULL, 3, NULL );
 8000452:	4911      	ldr	r1, [pc, #68]	; (8000498 <MX_FREERTOS_Init+0x60>)
 8000454:	4811      	ldr	r0, [pc, #68]	; (800049c <MX_FREERTOS_Init+0x64>)
 8000456:	2300      	movs	r3, #0
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	2303      	movs	r3, #3
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2300      	movs	r3, #0
 8000460:	2280      	movs	r2, #128	; 0x80
 8000462:	f004 fdfb 	bl	800505c <xTaskCreate>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <MX_FREERTOS_Init+0x68>)
 800046a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800046c:	c313      	stmia	r3!, {r0, r1, r4}
 800046e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000470:	c313      	stmia	r3!, {r0, r1, r4}
 8000472:	6812      	ldr	r2, [r2, #0]
 8000474:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2100      	movs	r1, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f004 fca1 	bl	8004dc2 <osThreadCreate>
 8000480:	0002      	movs	r2, r0
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_FREERTOS_Init+0x6c>)
 8000484:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b009      	add	sp, #36	; 0x24
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	080071f8 	.word	0x080071f8
 8000494:	080004b9 	.word	0x080004b9
 8000498:	08007200 	.word	0x08007200
 800049c:	08000509 	.word	0x08000509
 80004a0:	08007214 	.word	0x08007214
 80004a4:	2000104c 	.word	0x2000104c

080004a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f004 fcd3 	bl	8004e5c <osDelay>
 80004b6:	e7fb      	b.n	80004b0 <StartDefaultTask+0x8>

080004b8 <vTask1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vTask1( void *pvParameters )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Receive_DMA(&huart3,mise_buffer,32)!=HAL_OK)
 80004c0:	490b      	ldr	r1, [pc, #44]	; (80004f0 <vTask1+0x38>)
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <vTask1+0x3c>)
 80004c4:	2220      	movs	r2, #32
 80004c6:	0018      	movs	r0, r3
 80004c8:	f003 fb50 	bl	8003b6c <HAL_UART_Receive_DMA>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d003      	beq.n	80004d8 <vTask1+0x20>
	{
		printf("fail\r\n");
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <vTask1+0x40>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f005 fdb0 	bl	8006038 <puts>
	}

	write_MISE("Passive");
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <vTask1+0x44>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 f976 	bl	80007cc <write_MISE>
	/* infinite loop. */
	for( ;; )
	{
		HAL_UART_Receive_IT(&huart4, co2_buffer, 12);
 80004e0:	4907      	ldr	r1, [pc, #28]	; (8000500 <vTask1+0x48>)
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <vTask1+0x4c>)
 80004e4:	220c      	movs	r2, #12
 80004e6:	0018      	movs	r0, r3
 80004e8:	f003 faf0 	bl	8003acc <HAL_UART_Receive_IT>
 80004ec:	e7f8      	b.n	80004e0 <vTask1+0x28>
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	20001050 	.word	0x20001050
 80004f4:	200011ac 	.word	0x200011ac
 80004f8:	08007230 	.word	0x08007230
 80004fc:	08007238 	.word	0x08007238
 8000500:	20001070 	.word	0x20001070
 8000504:	20001274 	.word	0x20001274

08000508 <vTask2>:
	}
}


void vTask2( void *pvParameters )
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	/* infinite loop. */
	for( ;; )
	{
		displayInit(&hi2c1);
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <vTask2+0x84>)
 8000512:	0018      	movs	r0, r3
 8000514:	f7ff fe96 	bl	8000244 <displayInit>
		if(!pir_status) {
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <vTask2+0x88>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d114      	bne.n	800054a <vTask2+0x42>
			displayWriteString("PM2.5 : ");
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <vTask2+0x8c>)
 8000522:	0018      	movs	r0, r3
 8000524:	f7ff fefa 	bl	800031c <displayWriteString>
			displayWriteString(s_pm2_5);
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <vTask2+0x90>)
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff fef6 	bl	800031c <displayWriteString>
			displaySetCursor(0, 1);
 8000530:	2101      	movs	r1, #1
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff fecc 	bl	80002d0 <displaySetCursor>
			displayWriteString("PM10  : ");
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <vTask2+0x94>)
 800053a:	0018      	movs	r0, r3
 800053c:	f7ff feee 	bl	800031c <displayWriteString>
			displayWriteString(s_pm10);
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <vTask2+0x98>)
 8000542:	0018      	movs	r0, r3
 8000544:	f7ff feea 	bl	800031c <displayWriteString>
 8000548:	e007      	b.n	800055a <vTask2+0x52>
		} else {
			displayWriteString("CO2 : ");
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <vTask2+0x9c>)
 800054c:	0018      	movs	r0, r3
 800054e:	f7ff fee5 	bl	800031c <displayWriteString>
			displayWriteString(co2_result_buffer);
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <vTask2+0xa0>)
 8000554:	0018      	movs	r0, r3
 8000556:	f7ff fee1 	bl	800031c <displayWriteString>
		}
		counter++;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <vTask2+0xa4>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <vTask2+0xa4>)
 8000564:	701a      	strb	r2, [r3, #0]
		if(counter >= 5) {
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <vTask2+0xa4>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b04      	cmp	r3, #4
 800056c:	d908      	bls.n	8000580 <vTask2+0x78>
			counter = 0;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <vTask2+0xa4>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
			pir_status = ~pir_status;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <vTask2+0x88>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	43db      	mvns	r3, r3
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <vTask2+0x88>)
 800057e:	701a      	strb	r2, [r3, #0]
		}
//		printf("TEST\r\n");
		HAL_Delay(1000);
 8000580:	23fa      	movs	r3, #250	; 0xfa
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	0018      	movs	r0, r3
 8000586:	f001 f81d 	bl	80015c4 <HAL_Delay>
		displayInit(&hi2c1);
 800058a:	e7c1      	b.n	8000510 <vTask2+0x8>
 800058c:	2000108c 	.word	0x2000108c
 8000590:	20000098 	.word	0x20000098
 8000594:	08007240 	.word	0x08007240
 8000598:	2000009c 	.word	0x2000009c
 800059c:	0800724c 	.word	0x0800724c
 80005a0:	200000a0 	.word	0x200000a0
 80005a4:	08007258 	.word	0x08007258
 80005a8:	20001080 	.word	0x20001080
 80005ac:	200000a3 	.word	0x200000a3

080005b0 <print_MISE>:
	}
}

void print_MISE(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 80005b6:	1dbb      	adds	r3, r7, #6
 80005b8:	2200      	movs	r2, #0
 80005ba:	801a      	strh	r2, [r3, #0]

	check_byte_receive=mise_buffer[30]<<8|mise_buffer[31];
 80005bc:	4b77      	ldr	r3, [pc, #476]	; (800079c <print_MISE+0x1ec>)
 80005be:	7f9b      	ldrb	r3, [r3, #30]
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	4b75      	ldr	r3, [pc, #468]	; (800079c <print_MISE+0x1ec>)
 80005c6:	7fdb      	ldrb	r3, [r3, #31]
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21a      	sxth	r2, r3
 80005ce:	1cbb      	adds	r3, r7, #2
 80005d0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<30;i++)
 80005d2:	1d7b      	adds	r3, r7, #5
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	e00e      	b.n	80005f8 <print_MISE+0x48>
	{
		check_byte_calculate+=mise_buffer[i];
 80005da:	1d7b      	adds	r3, r7, #5
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4a6f      	ldr	r2, [pc, #444]	; (800079c <print_MISE+0x1ec>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	b299      	uxth	r1, r3
 80005e4:	1dbb      	adds	r3, r7, #6
 80005e6:	1dba      	adds	r2, r7, #6
 80005e8:	8812      	ldrh	r2, [r2, #0]
 80005ea:	188a      	adds	r2, r1, r2
 80005ec:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<30;i++)
 80005ee:	1d7b      	adds	r3, r7, #5
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	1d7b      	adds	r3, r7, #5
 80005f4:	3201      	adds	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	1d7b      	adds	r3, r7, #5
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b1d      	cmp	r3, #29
 80005fe:	d9ec      	bls.n	80005da <print_MISE+0x2a>
	}

	if(check_byte_receive==check_byte_calculate)
 8000600:	1cba      	adds	r2, r7, #2
 8000602:	1dbb      	adds	r3, r7, #6
 8000604:	8812      	ldrh	r2, [r2, #0]
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d000      	beq.n	800060e <print_MISE+0x5e>
 800060c:	e0c1      	b.n	8000792 <print_MISE+0x1e2>
	{
		printf("PM1.0 : %d	",(combine_value=(mise_buffer[10]<<8)|mise_buffer[11]));
 800060e:	4b63      	ldr	r3, [pc, #396]	; (800079c <print_MISE+0x1ec>)
 8000610:	7a9b      	ldrb	r3, [r3, #10]
 8000612:	021b      	lsls	r3, r3, #8
 8000614:	b21a      	sxth	r2, r3
 8000616:	4b61      	ldr	r3, [pc, #388]	; (800079c <print_MISE+0x1ec>)
 8000618:	7adb      	ldrb	r3, [r3, #11]
 800061a:	b21b      	sxth	r3, r3
 800061c:	4313      	orrs	r3, r2
 800061e:	b21a      	sxth	r2, r3
 8000620:	003b      	movs	r3, r7
 8000622:	801a      	strh	r2, [r3, #0]
 8000624:	003b      	movs	r3, r7
 8000626:	881a      	ldrh	r2, [r3, #0]
 8000628:	4b5d      	ldr	r3, [pc, #372]	; (80007a0 <print_MISE+0x1f0>)
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f005 fc89 	bl	8005f44 <iprintf>
		printf("PM2.5 : %d	",(combine_value=(mise_buffer[12]<<8)|mise_buffer[13]));
 8000632:	4b5a      	ldr	r3, [pc, #360]	; (800079c <print_MISE+0x1ec>)
 8000634:	7b1b      	ldrb	r3, [r3, #12]
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	b21a      	sxth	r2, r3
 800063a:	4b58      	ldr	r3, [pc, #352]	; (800079c <print_MISE+0x1ec>)
 800063c:	7b5b      	ldrb	r3, [r3, #13]
 800063e:	b21b      	sxth	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b21a      	sxth	r2, r3
 8000644:	003b      	movs	r3, r7
 8000646:	801a      	strh	r2, [r3, #0]
 8000648:	003b      	movs	r3, r7
 800064a:	881a      	ldrh	r2, [r3, #0]
 800064c:	4b55      	ldr	r3, [pc, #340]	; (80007a4 <print_MISE+0x1f4>)
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f005 fc77 	bl	8005f44 <iprintf>
		printf("PM10 : %d	",(combine_value=(mise_buffer[14]<<8)|mise_buffer[15]));
 8000656:	4b51      	ldr	r3, [pc, #324]	; (800079c <print_MISE+0x1ec>)
 8000658:	7b9b      	ldrb	r3, [r3, #14]
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	b21a      	sxth	r2, r3
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <print_MISE+0x1ec>)
 8000660:	7bdb      	ldrb	r3, [r3, #15]
 8000662:	b21b      	sxth	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b21a      	sxth	r2, r3
 8000668:	003b      	movs	r3, r7
 800066a:	801a      	strh	r2, [r3, #0]
 800066c:	003b      	movs	r3, r7
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b4d      	ldr	r3, [pc, #308]	; (80007a8 <print_MISE+0x1f8>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f005 fc65 	bl	8005f44 <iprintf>
		printf("0.3um : %d	",(combine_value=(mise_buffer[16]<<8)|mise_buffer[17]));
 800067a:	4b48      	ldr	r3, [pc, #288]	; (800079c <print_MISE+0x1ec>)
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	4b46      	ldr	r3, [pc, #280]	; (800079c <print_MISE+0x1ec>)
 8000684:	7c5b      	ldrb	r3, [r3, #17]
 8000686:	b21b      	sxth	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b21a      	sxth	r2, r3
 800068c:	003b      	movs	r3, r7
 800068e:	801a      	strh	r2, [r3, #0]
 8000690:	003b      	movs	r3, r7
 8000692:	881a      	ldrh	r2, [r3, #0]
 8000694:	4b45      	ldr	r3, [pc, #276]	; (80007ac <print_MISE+0x1fc>)
 8000696:	0011      	movs	r1, r2
 8000698:	0018      	movs	r0, r3
 800069a:	f005 fc53 	bl	8005f44 <iprintf>
		printf("0.5um : %d	",(combine_value=(mise_buffer[18]<<8)|mise_buffer[19]));
 800069e:	4b3f      	ldr	r3, [pc, #252]	; (800079c <print_MISE+0x1ec>)
 80006a0:	7c9b      	ldrb	r3, [r3, #18]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	4b3d      	ldr	r3, [pc, #244]	; (800079c <print_MISE+0x1ec>)
 80006a8:	7cdb      	ldrb	r3, [r3, #19]
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	4313      	orrs	r3, r2
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	003b      	movs	r3, r7
 80006b2:	801a      	strh	r2, [r3, #0]
 80006b4:	003b      	movs	r3, r7
 80006b6:	881a      	ldrh	r2, [r3, #0]
 80006b8:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <print_MISE+0x200>)
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f005 fc41 	bl	8005f44 <iprintf>
		printf("1.0um : %d	",(combine_value=(mise_buffer[20]<<8)|mise_buffer[21]));
 80006c2:	4b36      	ldr	r3, [pc, #216]	; (800079c <print_MISE+0x1ec>)
 80006c4:	7d1b      	ldrb	r3, [r3, #20]
 80006c6:	021b      	lsls	r3, r3, #8
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	4b34      	ldr	r3, [pc, #208]	; (800079c <print_MISE+0x1ec>)
 80006cc:	7d5b      	ldrb	r3, [r3, #21]
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	801a      	strh	r2, [r3, #0]
 80006d8:	003b      	movs	r3, r7
 80006da:	881a      	ldrh	r2, [r3, #0]
 80006dc:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <print_MISE+0x204>)
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f005 fc2f 	bl	8005f44 <iprintf>
		printf("2.5um : %d	",(combine_value=(mise_buffer[22]<<8)|mise_buffer[23]));
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <print_MISE+0x1ec>)
 80006e8:	7d9b      	ldrb	r3, [r3, #22]
 80006ea:	021b      	lsls	r3, r3, #8
 80006ec:	b21a      	sxth	r2, r3
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <print_MISE+0x1ec>)
 80006f0:	7ddb      	ldrb	r3, [r3, #23]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	003b      	movs	r3, r7
 80006fa:	801a      	strh	r2, [r3, #0]
 80006fc:	003b      	movs	r3, r7
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <print_MISE+0x208>)
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f005 fc1d 	bl	8005f44 <iprintf>
		printf("5.0um : %d	",(combine_value=(mise_buffer[24]<<8)|mise_buffer[25]));
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <print_MISE+0x1ec>)
 800070c:	7e1b      	ldrb	r3, [r3, #24]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <print_MISE+0x1ec>)
 8000714:	7e5b      	ldrb	r3, [r3, #25]
 8000716:	b21b      	sxth	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	b21a      	sxth	r2, r3
 800071c:	003b      	movs	r3, r7
 800071e:	801a      	strh	r2, [r3, #0]
 8000720:	003b      	movs	r3, r7
 8000722:	881a      	ldrh	r2, [r3, #0]
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <print_MISE+0x20c>)
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f005 fc0b 	bl	8005f44 <iprintf>
		printf("10.0um : %d\r\n",(combine_value=(mise_buffer[26]<<8)|mise_buffer[27]));
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <print_MISE+0x1ec>)
 8000730:	7e9b      	ldrb	r3, [r3, #26]
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b21a      	sxth	r2, r3
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <print_MISE+0x1ec>)
 8000738:	7edb      	ldrb	r3, [r3, #27]
 800073a:	b21b      	sxth	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b21a      	sxth	r2, r3
 8000740:	003b      	movs	r3, r7
 8000742:	801a      	strh	r2, [r3, #0]
 8000744:	003b      	movs	r3, r7
 8000746:	881a      	ldrh	r2, [r3, #0]
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <print_MISE+0x210>)
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f005 fbf9 	bl	8005f44 <iprintf>
		pm2_5 = combine_value=((mise_buffer[12]<<8)|mise_buffer[13]);
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <print_MISE+0x1ec>)
 8000754:	7b1b      	ldrb	r3, [r3, #12]
 8000756:	021b      	lsls	r3, r3, #8
 8000758:	b21a      	sxth	r2, r3
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <print_MISE+0x1ec>)
 800075c:	7b5b      	ldrb	r3, [r3, #13]
 800075e:	b21b      	sxth	r3, r3
 8000760:	4313      	orrs	r3, r2
 8000762:	b21a      	sxth	r2, r3
 8000764:	003b      	movs	r3, r7
 8000766:	801a      	strh	r2, [r3, #0]
 8000768:	003b      	movs	r3, r7
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <print_MISE+0x214>)
 8000770:	701a      	strb	r2, [r3, #0]
		pm10 = combine_value=((mise_buffer[14]<<8)|mise_buffer[15]);
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <print_MISE+0x1ec>)
 8000774:	7b9b      	ldrb	r3, [r3, #14]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	b21a      	sxth	r2, r3
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <print_MISE+0x1ec>)
 800077c:	7bdb      	ldrb	r3, [r3, #15]
 800077e:	b21b      	sxth	r3, r3
 8000780:	4313      	orrs	r3, r2
 8000782:	b21a      	sxth	r2, r3
 8000784:	003b      	movs	r3, r7
 8000786:	801a      	strh	r2, [r3, #0]
 8000788:	003b      	movs	r3, r7
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <print_MISE+0x218>)
 8000790:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20001050 	.word	0x20001050
 80007a0:	08007260 	.word	0x08007260
 80007a4:	0800726c 	.word	0x0800726c
 80007a8:	08007278 	.word	0x08007278
 80007ac:	08007284 	.word	0x08007284
 80007b0:	08007290 	.word	0x08007290
 80007b4:	0800729c 	.word	0x0800729c
 80007b8:	080072a8 	.word	0x080072a8
 80007bc:	080072b4 	.word	0x080072b4
 80007c0:	080072c0 	.word	0x080072c0
 80007c4:	20000099 	.word	0x20000099
 80007c8:	2000009a 	.word	0x2000009a

080007cc <write_MISE>:

void write_MISE(char* cmd)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	uint16_t verify_byte=0;
 80007d4:	230e      	movs	r3, #14
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	2200      	movs	r2, #0
 80007da:	801a      	strh	r2, [r3, #0]

	printf("Enter the write_MISE\r\n");
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <write_MISE+0x1a0>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f005 fc2a 	bl	8006038 <puts>

	if(strcmp(cmd,"Read")==0)
 80007e4:	4a62      	ldr	r2, [pc, #392]	; (8000970 <write_MISE+0x1a4>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff fc8c 	bl	8000108 <strcmp>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d10d      	bne.n	8000810 <write_MISE+0x44>
	{
		mise_send_buffer[2]=0xe2;
 80007f4:	4b5f      	ldr	r3, [pc, #380]	; (8000974 <write_MISE+0x1a8>)
 80007f6:	22e2      	movs	r2, #226	; 0xe2
 80007f8:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <write_MISE+0x1a8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x00;
 8000800:	4b5c      	ldr	r3, [pc, #368]	; (8000974 <write_MISE+0x1a8>)
 8000802:	2200      	movs	r2, #0
 8000804:	711a      	strb	r2, [r3, #4]
		printf("if's Read\r\n");
 8000806:	4b5c      	ldr	r3, [pc, #368]	; (8000978 <write_MISE+0x1ac>)
 8000808:	0018      	movs	r0, r3
 800080a:	f005 fc15 	bl	8006038 <puts>
 800080e:	e056      	b.n	80008be <write_MISE+0xf2>
	}
	else if(strcmp(cmd,"Passive")==0)
 8000810:	4a5a      	ldr	r2, [pc, #360]	; (800097c <write_MISE+0x1b0>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff fc76 	bl	8000108 <strcmp>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d10d      	bne.n	800083c <write_MISE+0x70>
	{
		mise_send_buffer[2]=0xe1;
 8000820:	4b54      	ldr	r3, [pc, #336]	; (8000974 <write_MISE+0x1a8>)
 8000822:	22e1      	movs	r2, #225	; 0xe1
 8000824:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 8000826:	4b53      	ldr	r3, [pc, #332]	; (8000974 <write_MISE+0x1a8>)
 8000828:	2200      	movs	r2, #0
 800082a:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x00;
 800082c:	4b51      	ldr	r3, [pc, #324]	; (8000974 <write_MISE+0x1a8>)
 800082e:	2200      	movs	r2, #0
 8000830:	711a      	strb	r2, [r3, #4]
		printf("if's Passive\r\n");
 8000832:	4b53      	ldr	r3, [pc, #332]	; (8000980 <write_MISE+0x1b4>)
 8000834:	0018      	movs	r0, r3
 8000836:	f005 fbff 	bl	8006038 <puts>
 800083a:	e040      	b.n	80008be <write_MISE+0xf2>
	}
	else if(strcmp(cmd,"Active")==0)
 800083c:	4a51      	ldr	r2, [pc, #324]	; (8000984 <write_MISE+0x1b8>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff fc60 	bl	8000108 <strcmp>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d10d      	bne.n	8000868 <write_MISE+0x9c>
	{
		mise_send_buffer[2]=0xe1;
 800084c:	4b49      	ldr	r3, [pc, #292]	; (8000974 <write_MISE+0x1a8>)
 800084e:	22e1      	movs	r2, #225	; 0xe1
 8000850:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 8000852:	4b48      	ldr	r3, [pc, #288]	; (8000974 <write_MISE+0x1a8>)
 8000854:	2200      	movs	r2, #0
 8000856:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x01;
 8000858:	4b46      	ldr	r3, [pc, #280]	; (8000974 <write_MISE+0x1a8>)
 800085a:	2201      	movs	r2, #1
 800085c:	711a      	strb	r2, [r3, #4]
		printf("if's Active\r\n");
 800085e:	4b4a      	ldr	r3, [pc, #296]	; (8000988 <write_MISE+0x1bc>)
 8000860:	0018      	movs	r0, r3
 8000862:	f005 fbe9 	bl	8006038 <puts>
 8000866:	e02a      	b.n	80008be <write_MISE+0xf2>

	}
	else if(strcmp(cmd,"Sleep")==0)
 8000868:	4a48      	ldr	r2, [pc, #288]	; (800098c <write_MISE+0x1c0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff fc4a 	bl	8000108 <strcmp>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d10d      	bne.n	8000894 <write_MISE+0xc8>
	{
		mise_send_buffer[2]=0xe4;
 8000878:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <write_MISE+0x1a8>)
 800087a:	22e4      	movs	r2, #228	; 0xe4
 800087c:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 800087e:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <write_MISE+0x1a8>)
 8000880:	2200      	movs	r2, #0
 8000882:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x00;
 8000884:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <write_MISE+0x1a8>)
 8000886:	2200      	movs	r2, #0
 8000888:	711a      	strb	r2, [r3, #4]
		printf("if's Sleep\r\n");
 800088a:	4b41      	ldr	r3, [pc, #260]	; (8000990 <write_MISE+0x1c4>)
 800088c:	0018      	movs	r0, r3
 800088e:	f005 fbd3 	bl	8006038 <puts>
 8000892:	e014      	b.n	80008be <write_MISE+0xf2>
	}
	else if(strcmp(cmd,"WakeUp")==0)
 8000894:	4a3f      	ldr	r2, [pc, #252]	; (8000994 <write_MISE+0x1c8>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	0011      	movs	r1, r2
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff fc34 	bl	8000108 <strcmp>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d10c      	bne.n	80008be <write_MISE+0xf2>
	{
		mise_send_buffer[2]=0xe4;
 80008a4:	4b33      	ldr	r3, [pc, #204]	; (8000974 <write_MISE+0x1a8>)
 80008a6:	22e4      	movs	r2, #228	; 0xe4
 80008a8:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 80008aa:	4b32      	ldr	r3, [pc, #200]	; (8000974 <write_MISE+0x1a8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x01;
 80008b0:	4b30      	ldr	r3, [pc, #192]	; (8000974 <write_MISE+0x1a8>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	711a      	strb	r2, [r3, #4]
		printf("if's WakeUp\r\n");
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <write_MISE+0x1cc>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f005 fbbd 	bl	8006038 <puts>
	}
	for(uint8_t i=0;i<5;i++)
 80008be:	230d      	movs	r3, #13
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e010      	b.n	80008ea <write_MISE+0x11e>
	{
		verify_byte+=mise_send_buffer[i];
 80008c8:	200d      	movs	r0, #13
 80008ca:	183b      	adds	r3, r7, r0
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4a29      	ldr	r2, [pc, #164]	; (8000974 <write_MISE+0x1a8>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	b299      	uxth	r1, r3
 80008d4:	220e      	movs	r2, #14
 80008d6:	18bb      	adds	r3, r7, r2
 80008d8:	18ba      	adds	r2, r7, r2
 80008da:	8812      	ldrh	r2, [r2, #0]
 80008dc:	188a      	adds	r2, r1, r2
 80008de:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<5;i++)
 80008e0:	183b      	adds	r3, r7, r0
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	183b      	adds	r3, r7, r0
 80008e6:	3201      	adds	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	230d      	movs	r3, #13
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d9e9      	bls.n	80008c8 <write_MISE+0xfc>
	}
	mise_send_buffer[5]=verify_byte>>8;
 80008f4:	210e      	movs	r1, #14
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <write_MISE+0x1a8>)
 8000902:	715a      	strb	r2, [r3, #5]
	mise_send_buffer[6]=verify_byte;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <write_MISE+0x1a8>)
 800090c:	719a      	strb	r2, [r3, #6]

	while(HAL_UART_GetState(&huart3)!=HAL_UART_STATE_READY)
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <write_MISE+0x1d0>)
 8000912:	0018      	movs	r0, r3
 8000914:	f003 fb9d 	bl	8004052 <HAL_UART_GetState>
 8000918:	0003      	movs	r3, r0
 800091a:	2b20      	cmp	r3, #32
 800091c:	d1f8      	bne.n	8000910 <write_MISE+0x144>
	{
	}

	if(HAL_UART_Transmit_IT(&huart3,(uint8_t*)mise_send_buffer,7)!=HAL_OK)
 800091e:	4915      	ldr	r1, [pc, #84]	; (8000974 <write_MISE+0x1a8>)
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <write_MISE+0x1d0>)
 8000922:	2207      	movs	r2, #7
 8000924:	0018      	movs	r0, r3
 8000926:	f003 f863 	bl	80039f0 <HAL_UART_Transmit_IT>
	{

	}
	if(strcmp(cmd,"Read")==0)
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <write_MISE+0x1a4>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff fbe9 	bl	8000108 <strcmp>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d10d      	bne.n	8000956 <write_MISE+0x18a>
	{
		while(HAL_UART_GetState(&huart3)!=HAL_UART_STATE_READY)
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <write_MISE+0x1d0>)
 800093e:	0018      	movs	r0, r3
 8000940:	f003 fb87 	bl	8004052 <HAL_UART_GetState>
 8000944:	0003      	movs	r3, r0
 8000946:	2b20      	cmp	r3, #32
 8000948:	d1f8      	bne.n	800093c <write_MISE+0x170>
		{
		}
		if(HAL_UART_Receive_IT(&huart3,mise_send_buffer, 32)!=HAL_OK)
 800094a:	490a      	ldr	r1, [pc, #40]	; (8000974 <write_MISE+0x1a8>)
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <write_MISE+0x1d0>)
 800094e:	2220      	movs	r2, #32
 8000950:	0018      	movs	r0, r3
 8000952:	f003 f8bb 	bl	8003acc <HAL_UART_Receive_IT>
		{

		}
	}

	printf("%d\r\n", mise_send_buffer);
 8000956:	4a07      	ldr	r2, [pc, #28]	; (8000974 <write_MISE+0x1a8>)
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <write_MISE+0x1d4>)
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f005 faf1 	bl	8005f44 <iprintf>
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b004      	add	sp, #16
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	080072d0 	.word	0x080072d0
 8000970:	080072e8 	.word	0x080072e8
 8000974:	20000004 	.word	0x20000004
 8000978:	080072f0 	.word	0x080072f0
 800097c:	08007238 	.word	0x08007238
 8000980:	080072fc 	.word	0x080072fc
 8000984:	0800730c 	.word	0x0800730c
 8000988:	08007314 	.word	0x08007314
 800098c:	08007324 	.word	0x08007324
 8000990:	0800732c 	.word	0x0800732c
 8000994:	08007338 	.word	0x08007338
 8000998:	08007340 	.word	0x08007340
 800099c:	200011ac 	.word	0x200011ac
 80009a0:	08007350 	.word	0x08007350

080009a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1a      	ldr	r2, [pc, #104]	; (8000a1c <HAL_UART_RxCpltCallback+0x78>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d111      	bne.n	80009da <HAL_UART_RxCpltCallback+0x36>
		print_MISE();
 80009b6:	f7ff fdfb 	bl	80005b0 <print_MISE>
		sprintf(s_pm2_5, "%d", pm2_5);
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_UART_RxCpltCallback+0x7c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	001a      	movs	r2, r3
 80009c0:	4918      	ldr	r1, [pc, #96]	; (8000a24 <HAL_UART_RxCpltCallback+0x80>)
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_UART_RxCpltCallback+0x84>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f005 fb41 	bl	800604c <siprintf>
		sprintf(s_pm10, "%d", pm10);
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_RxCpltCallback+0x88>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	001a      	movs	r2, r3
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <HAL_UART_RxCpltCallback+0x80>)
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_UART_RxCpltCallback+0x8c>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f005 fb39 	bl	800604c <siprintf>
	}

	if(huart->Instance == USART4) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <HAL_UART_RxCpltCallback+0x90>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d117      	bne.n	8000a14 <HAL_UART_RxCpltCallback+0x70>
		for(int i=0; i<9; i++) {
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e00b      	b.n	8000a02 <HAL_UART_RxCpltCallback+0x5e>
			co2_result_buffer[i] = co2_buffer[i+1];
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <HAL_UART_RxCpltCallback+0x94>)
 80009f0:	5cd1      	ldrb	r1, [r2, r3]
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <HAL_UART_RxCpltCallback+0x98>)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	18d3      	adds	r3, r2, r3
 80009f8:	1c0a      	adds	r2, r1, #0
 80009fa:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<9; i++) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2b08      	cmp	r3, #8
 8000a06:	ddf0      	ble.n	80009ea <HAL_UART_RxCpltCallback+0x46>
		}
		printf("%s\r\n", co2_result_buffer);
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <HAL_UART_RxCpltCallback+0x98>)
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_UART_RxCpltCallback+0x9c>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f005 fa98 	bl	8005f44 <iprintf>
	}
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b004      	add	sp, #16
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40004800 	.word	0x40004800
 8000a20:	20000099 	.word	0x20000099
 8000a24:	08007358 	.word	0x08007358
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	2000009a 	.word	0x2000009a
 8000a30:	200000a0 	.word	0x200000a0
 8000a34:	40004c00 	.word	0x40004c00
 8000a38:	20001070 	.word	0x20001070
 8000a3c:	20001080 	.word	0x20001080
 8000a40:	0800735c 	.word	0x0800735c

08000a44 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
	{

	}
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b08b      	sub	sp, #44	; 0x2c
 8000a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	2414      	movs	r4, #20
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2314      	movs	r3, #20
 8000a62:	001a      	movs	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	f005 fa64 	bl	8005f32 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b3d      	ldr	r3, [pc, #244]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000a6c:	695a      	ldr	r2, [r3, #20]
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0309      	lsls	r1, r1, #12
 8000a74:	430a      	orrs	r2, r1
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000a7a:	695a      	ldr	r2, [r3, #20]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	031b      	lsls	r3, r3, #12
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a86:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000a88:	695a      	ldr	r2, [r3, #20]
 8000a8a:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	03c9      	lsls	r1, r1, #15
 8000a90:	430a      	orrs	r2, r1
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000a96:	695a      	ldr	r2, [r3, #20]
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	03db      	lsls	r3, r3, #15
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000aa4:	695a      	ldr	r2, [r3, #20]
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	0289      	lsls	r1, r1, #10
 8000aac:	430a      	orrs	r2, r1
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000ab2:	695a      	ldr	r2, [r3, #20]
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	029b      	lsls	r3, r3, #10
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000ac0:	695a      	ldr	r2, [r3, #20]
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	02c9      	lsls	r1, r1, #11
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <MX_GPIO_Init+0x10c>)
 8000ace:	695a      	ldr	r2, [r3, #20]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	02db      	lsls	r3, r3, #11
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(URLED2_GPIO_Port, URLED2_Pin, GPIO_PIN_RESET);
 8000ada:	2390      	movs	r3, #144	; 0x90
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f001 f9cc 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	0192      	lsls	r2, r2, #6
 8000aee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <MX_GPIO_Init+0x110>)
 8000af4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	4a1a      	ldr	r2, [pc, #104]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000b00:	0019      	movs	r1, r3
 8000b02:	0010      	movs	r0, r2
 8000b04:	f001 f844 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = URLED2_Pin;
 8000b08:	0021      	movs	r1, r4
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2201      	movs	r2, #1
 8000b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(URLED2_GPIO_Port, &GPIO_InitStruct);
 8000b22:	000c      	movs	r4, r1
 8000b24:	187a      	adds	r2, r7, r1
 8000b26:	2390      	movs	r3, #144	; 0x90
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 f82f 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 8000b32:	0021      	movs	r1, r4
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 8000b48:	187a      	adds	r2, r7, r1
 8000b4a:	2390      	movs	r3, #144	; 0x90
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 f81d 	bl	8001b90 <HAL_GPIO_Init>

}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b00b      	add	sp, #44	; 0x2c
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	40021000 	.word	0x40021000
 8000b64:	10210000 	.word	0x10210000
 8000b68:	48000800 	.word	0x48000800

08000b6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b72:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <MX_I2C1_Init+0x78>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <MX_I2C1_Init+0x7c>)
 8000b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f001 f987 	bl	8001ebc <HAL_I2C_Init>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bb2:	f000 f913 	bl	8000ddc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fc94 	bl	80024e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bc4:	f000 f90a 	bl	8000ddc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_I2C1_Init+0x74>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fcd7 	bl	8002580 <HAL_I2CEx_ConfigDigitalFilter>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bd6:	f000 f901 	bl	8000ddc <Error_Handler>
  }

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000108c 	.word	0x2000108c
 8000be4:	40005400 	.word	0x40005400
 8000be8:	2000090e 	.word	0x2000090e

08000bec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	2314      	movs	r3, #20
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	2314      	movs	r3, #20
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f005 f997 	bl	8005f32 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <HAL_I2C_MspInit+0x90>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d132      	bne.n	8000c74 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c10:	695a      	ldr	r2, [r3, #20]
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	02c9      	lsls	r1, r1, #11
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	615a      	str	r2, [r3, #20]
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c1e:	695a      	ldr	r2, [r3, #20]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	02db      	lsls	r3, r3, #11
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c2a:	2114      	movs	r1, #20
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	22c0      	movs	r2, #192	; 0xc0
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2212      	movs	r2, #18
 8000c38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2203      	movs	r2, #3
 8000c44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2201      	movs	r2, #1
 8000c4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_I2C_MspInit+0x98>)
 8000c50:	0019      	movs	r1, r3
 8000c52:	0010      	movs	r0, r2
 8000c54:	f000 ff9c 	bl	8001b90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c5a:	69da      	ldr	r2, [r3, #28]
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0389      	lsls	r1, r1, #14
 8000c62:	430a      	orrs	r2, r1
 8000c64:	61da      	str	r2, [r3, #28]
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_I2C_MspInit+0x94>)
 8000c68:	69da      	ldr	r2, [r3, #28]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	039b      	lsls	r3, r3, #14
 8000c6e:	4013      	ands	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b00a      	add	sp, #40	; 0x28
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000400 	.word	0x48000400

08000c88 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	while(HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 30000)) {
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <__io_putchar+0x24>)
 8000c94:	1d39      	adds	r1, r7, #4
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <__io_putchar+0x28>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f002 fdff 	bl	800389c <HAL_UART_Transmit>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d1f7      	bne.n	8000c92 <__io_putchar+0xa>

	}

	return ch;
 8000ca2:	687b      	ldr	r3, [r7, #4]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	00007530 	.word	0x00007530
 8000cb0:	200012f8 	.word	0x200012f8

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fc54 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f813 	bl	8000ce6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff fec8 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc4:	f7ff fb82 	bl	80003cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 fa58 	bl	800117c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ccc:	f7ff ff4e 	bl	8000b6c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000cd0:	f000 fa84 	bl	80011dc <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000cd4:	f000 f9f0 	bl	80010b8 <MX_TIM7_Init>
  MX_USART4_UART_Init();
 8000cd8:	f000 fab0 	bl	800123c <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000cdc:	f7ff fbac 	bl	8000438 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ce0:	f004 f867 	bl	8004db2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <main+0x30>

08000ce6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce6:	b590      	push	{r4, r7, lr}
 8000ce8:	b099      	sub	sp, #100	; 0x64
 8000cea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cec:	242c      	movs	r4, #44	; 0x2c
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	2334      	movs	r3, #52	; 0x34
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f005 f91b 	bl	8005f32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	231c      	movs	r3, #28
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	0018      	movs	r0, r3
 8000d02:	2310      	movs	r3, #16
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f005 f913 	bl	8005f32 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	003b      	movs	r3, r7
 8000d0e:	0018      	movs	r0, r3
 8000d10:	231c      	movs	r3, #28
 8000d12:	001a      	movs	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	f005 f90c 	bl	8005f32 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000d1a:	0021      	movs	r1, r4
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2222      	movs	r2, #34	; 0x22
 8000d20:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2201      	movs	r2, #1
 8000d26:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2210      	movs	r2, #16
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f001 fc6b 	bl	8002618 <HAL_RCC_OscConfig>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d46:	f000 f849 	bl	8000ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	211c      	movs	r1, #28
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2207      	movs	r2, #7
 8000d50:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2203      	movs	r2, #3
 8000d56:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2101      	movs	r1, #1
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f001 ffdb 	bl	8002d24 <HAL_RCC_ClockConfig>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d72:	f000 f833 	bl	8000ddc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000d76:	003b      	movs	r3, r7
 8000d78:	2222      	movs	r2, #34	; 0x22
 8000d7a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d7c:	003b      	movs	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d82:	003b      	movs	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d88:	003b      	movs	r3, r7
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 f96c 	bl	8003068 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d94:	f000 f822 	bl	8000ddc <Error_Handler>
  }
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b019      	add	sp, #100	; 0x64
 8000d9e:	bd90      	pop	{r4, r7, pc}

08000da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db2:	f000 fbeb 	bl	800158c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d103      	bne.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x28>
	  printf("TESTTTESTSETSETEST\r\n");
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f005 f938 	bl	8006038 <puts>
  }
  /* USER CODE END Callback 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40001000 	.word	0x40001000
 8000dd4:	40001400 	.word	0x40001400
 8000dd8:	08007364 	.word	0x08007364

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <Error_Handler+0x6>

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_MspInit+0x50>)
 8000dec:	699a      	ldr	r2, [r3, #24]
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_MspInit+0x50>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	430a      	orrs	r2, r1
 8000df4:	619a      	str	r2, [r3, #24]
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_MspInit+0x50>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_MspInit+0x50>)
 8000e04:	69da      	ldr	r2, [r3, #28]
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_MspInit+0x50>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	0549      	lsls	r1, r1, #21
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	61da      	str	r2, [r3, #28]
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_MspInit+0x50>)
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	055b      	lsls	r3, r3, #21
 8000e18:	4013      	ands	r3, r2
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000e1e:	2302      	movs	r3, #2
 8000e20:	425b      	negs	r3, r3
 8000e22:	2200      	movs	r2, #0
 8000e24:	2103      	movs	r1, #3
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 fc76 	bl	8001718 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	2011      	movs	r0, #17
 8000e50:	f000 fc62 	bl	8001718 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e54:	2011      	movs	r0, #17
 8000e56:	f000 fc74 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_InitTick+0xa4>)
 8000e5c:	69da      	ldr	r2, [r3, #28]
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <HAL_InitTick+0xa4>)
 8000e60:	2110      	movs	r1, #16
 8000e62:	430a      	orrs	r2, r1
 8000e64:	61da      	str	r2, [r3, #28]
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_InitTick+0xa4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e72:	230c      	movs	r3, #12
 8000e74:	18fa      	adds	r2, r7, r3
 8000e76:	2310      	movs	r3, #16
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f002 f8c9 	bl	8003014 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e82:	f002 f8b1 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 8000e86:	0003      	movs	r3, r0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	4914      	ldr	r1, [pc, #80]	; (8000ee0 <HAL_InitTick+0xa8>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff f94c 	bl	800012c <__udivsi3>
 8000e94:	0003      	movs	r3, r0
 8000e96:	3b01      	subs	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0xac>)
 8000e9c:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <HAL_InitTick+0xb0>)
 8000e9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_InitTick+0xac>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <HAL_InitTick+0xb4>)
 8000ea4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_InitTick+0xac>)
 8000ea8:	6a3a      	ldr	r2, [r7, #32]
 8000eaa:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_InitTick+0xac>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_InitTick+0xac>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_InitTick+0xac>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f002 f9d4 	bl	8003268 <HAL_TIM_Base_Init>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d105      	bne.n	8000ed0 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_InitTick+0xac>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f002 fa1e 	bl	8003308 <HAL_TIM_Base_Start_IT>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	e000      	b.n	8000ed2 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b00a      	add	sp, #40	; 0x28
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	000f4240 	.word	0x000f4240
 8000ee4:	200010d8 	.word	0x200010d8
 8000ee8:	40001000 	.word	0x40001000
 8000eec:	000003e7 	.word	0x000003e7

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 fd5a 	bl	80019bc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <DMA1_Channel2_3_IRQHandler+0x20>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 fd56 	bl	80019bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	20001230 	.word	0x20001230
 8000f1c:	20001168 	.word	0x20001168

08000f20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <TIM6_DAC_IRQHandler+0x14>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f002 fa40 	bl	80033ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	200010d8 	.word	0x200010d8

08000f38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <TIM7_IRQHandler+0x14>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f002 fa34 	bl	80033ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20001120 	.word	0x20001120

08000f50 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <USART3_4_IRQHandler+0x1c>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f002 fe58 	bl	8003c0c <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <USART3_4_IRQHandler+0x20>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f002 fe54 	bl	8003c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	200011ac 	.word	0x200011ac
 8000f70:	20001274 	.word	0x20001274

08000f74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f86:	e000      	b.n	8000f8a <_read+0x16>
 8000f88:	bf00      	nop
 8000f8a:	0001      	movs	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
	}

return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b006      	add	sp, #24
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff fe5d 	bl	8000c88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf1      	blt.n	8000fc0 <_write+0x12>
	}
	return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b006      	add	sp, #24
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:

int _close(int file)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return -1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	425b      	negs	r3, r3
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	0192      	lsls	r2, r2, #6
 800100a:	605a      	str	r2, [r3, #4]
	return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	0018      	movs	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}

08001016 <_isatty>:

int _isatty(int file)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	return 1;
 800101e:	2301      	movs	r3, #1
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	18d3      	adds	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f004 ff2c 	bl	8005ecc <__errno>
 8001074:	0003      	movs	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	2301      	movs	r3, #1
 800107c:	425b      	negs	r3, r3
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	18d2      	adds	r2, r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b006      	add	sp, #24
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20004000 	.word	0x20004000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	200002f8 	.word	0x200002f8
 80010a8:	20001388 	.word	0x20001388

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010be:	003b      	movs	r3, r7
 80010c0:	0018      	movs	r0, r3
 80010c2:	2308      	movs	r3, #8
 80010c4:	001a      	movs	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	f004 ff33 	bl	8005f32 <memset>

  htim7.Instance = TIM7;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_TIM7_Init+0x6c>)
 80010ce:	4a16      	ldr	r2, [pc, #88]	; (8001128 <MX_TIM7_Init+0x70>)
 80010d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 47;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_TIM7_Init+0x6c>)
 80010d4:	222f      	movs	r2, #47	; 0x2f
 80010d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_TIM7_Init+0x6c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_TIM7_Init+0x6c>)
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <MX_TIM7_Init+0x74>)
 80010e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_TIM7_Init+0x6c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_TIM7_Init+0x6c>)
 80010ec:	0018      	movs	r0, r3
 80010ee:	f002 f8bb 	bl	8003268 <HAL_TIM_Base_Init>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010f6:	f7ff fe71 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	003b      	movs	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	003b      	movs	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001106:	003a      	movs	r2, r7
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_TIM7_Init+0x6c>)
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f002 fb03 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8001116:	f7ff fe61 	bl	8000ddc <Error_Handler>
  }

}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	20001120 	.word	0x20001120
 8001128:	40001400 	.word	0x40001400
 800112c:	0000270f 	.word	0x0000270f

08001130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_TIM_Base_MspInit+0x44>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d113      	bne.n	800116a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_TIM_Base_MspInit+0x48>)
 8001144:	69da      	ldr	r2, [r3, #28]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_TIM_Base_MspInit+0x48>)
 8001148:	2120      	movs	r1, #32
 800114a:	430a      	orrs	r2, r1
 800114c:	61da      	str	r2, [r3, #28]
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_TIM_Base_MspInit+0x48>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	2220      	movs	r2, #32
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2103      	movs	r1, #3
 800115e:	2012      	movs	r0, #18
 8001160:	f000 fada 	bl	8001718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001164:	2012      	movs	r0, #18
 8001166:	f000 faec 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	40001400 	.word	0x40001400
 8001178:	40021000 	.word	0x40021000

0800117c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <MX_USART2_UART_Init+0x5c>)
 8001184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 8001188:	2296      	movs	r2, #150	; 0x96
 800118a:	0212      	lsls	r2, r2, #8
 800118c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011c0:	0018      	movs	r0, r3
 80011c2:	f002 fb17 	bl	80037f4 <HAL_UART_Init>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ca:	f7ff fe07 	bl	8000ddc <Error_Handler>
  }

}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200012f8 	.word	0x200012f8
 80011d8:	40004400 	.word	0x40004400

080011dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <MX_USART3_UART_Init+0x5c>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011e8:	2296      	movs	r2, #150	; 0x96
 80011ea:	0192      	lsls	r2, r2, #6
 80011ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART3_UART_Init+0x58>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART3_UART_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART3_UART_Init+0x58>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART3_UART_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART3_UART_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <MX_USART3_UART_Init+0x58>)
 8001220:	0018      	movs	r0, r3
 8001222:	f002 fae7 	bl	80037f4 <HAL_UART_Init>
 8001226:	1e03      	subs	r3, r0, #0
 8001228:	d001      	beq.n	800122e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800122a:	f7ff fdd7 	bl	8000ddc <Error_Handler>
  }

}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200011ac 	.word	0x200011ac
 8001238:	40004800 	.word	0x40004800

0800123c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  huart4.Instance = USART4;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_USART4_UART_Init+0x58>)
 8001242:	4a15      	ldr	r2, [pc, #84]	; (8001298 <MX_USART4_UART_Init+0x5c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART4_UART_Init+0x58>)
 8001248:	2296      	movs	r2, #150	; 0x96
 800124a:	0212      	lsls	r2, r2, #8
 800124c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART4_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_USART4_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART4_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART4_UART_Init+0x58>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART4_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART4_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART4_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART4_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <MX_USART4_UART_Init+0x58>)
 8001280:	0018      	movs	r0, r3
 8001282:	f002 fab7 	bl	80037f4 <HAL_UART_Init>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800128a:	f7ff fda7 	bl	8000ddc <Error_Handler>
  }

}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20001274 	.word	0x20001274
 8001298:	40004c00 	.word	0x40004c00

0800129c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	2324      	movs	r3, #36	; 0x24
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	0018      	movs	r0, r3
 80012aa:	2314      	movs	r3, #20
 80012ac:	001a      	movs	r2, r3
 80012ae:	2100      	movs	r1, #0
 80012b0:	f004 fe3f 	bl	8005f32 <memset>
  if(uartHandle->Instance==USART2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a8b      	ldr	r2, [pc, #556]	; (80014e8 <HAL_UART_MspInit+0x24c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d133      	bne.n	8001326 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	4b8b      	ldr	r3, [pc, #556]	; (80014ec <HAL_UART_MspInit+0x250>)
 80012c0:	69da      	ldr	r2, [r3, #28]
 80012c2:	4b8a      	ldr	r3, [pc, #552]	; (80014ec <HAL_UART_MspInit+0x250>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0289      	lsls	r1, r1, #10
 80012c8:	430a      	orrs	r2, r1
 80012ca:	61da      	str	r2, [r3, #28]
 80012cc:	4b87      	ldr	r3, [pc, #540]	; (80014ec <HAL_UART_MspInit+0x250>)
 80012ce:	69da      	ldr	r2, [r3, #28]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	029b      	lsls	r3, r3, #10
 80012d4:	4013      	ands	r3, r2
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b84      	ldr	r3, [pc, #528]	; (80014ec <HAL_UART_MspInit+0x250>)
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	4b83      	ldr	r3, [pc, #524]	; (80014ec <HAL_UART_MspInit+0x250>)
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	0289      	lsls	r1, r1, #10
 80012e4:	430a      	orrs	r2, r1
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	4b80      	ldr	r3, [pc, #512]	; (80014ec <HAL_UART_MspInit+0x250>)
 80012ea:	695a      	ldr	r2, [r3, #20]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	029b      	lsls	r3, r3, #10
 80012f0:	4013      	ands	r3, r2
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012f6:	2124      	movs	r1, #36	; 0x24
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	2202      	movs	r2, #2
 8001302:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	187b      	adds	r3, r7, r1
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	187b      	adds	r3, r7, r1
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001310:	187b      	adds	r3, r7, r1
 8001312:	2201      	movs	r2, #1
 8001314:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	187a      	adds	r2, r7, r1
 8001318:	2390      	movs	r3, #144	; 0x90
 800131a:	05db      	lsls	r3, r3, #23
 800131c:	0011      	movs	r1, r2
 800131e:	0018      	movs	r0, r3
 8001320:	f000 fc36 	bl	8001b90 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8001324:	e0db      	b.n	80014de <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a71      	ldr	r2, [pc, #452]	; (80014f0 <HAL_UART_MspInit+0x254>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d000      	beq.n	8001332 <HAL_UART_MspInit+0x96>
 8001330:	e095      	b.n	800145e <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001332:	4b6e      	ldr	r3, [pc, #440]	; (80014ec <HAL_UART_MspInit+0x250>)
 8001334:	69da      	ldr	r2, [r3, #28]
 8001336:	4b6d      	ldr	r3, [pc, #436]	; (80014ec <HAL_UART_MspInit+0x250>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	02c9      	lsls	r1, r1, #11
 800133c:	430a      	orrs	r2, r1
 800133e:	61da      	str	r2, [r3, #28]
 8001340:	4b6a      	ldr	r3, [pc, #424]	; (80014ec <HAL_UART_MspInit+0x250>)
 8001342:	69da      	ldr	r2, [r3, #28]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	02db      	lsls	r3, r3, #11
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	4b67      	ldr	r3, [pc, #412]	; (80014ec <HAL_UART_MspInit+0x250>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	4b66      	ldr	r3, [pc, #408]	; (80014ec <HAL_UART_MspInit+0x250>)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	02c9      	lsls	r1, r1, #11
 8001358:	430a      	orrs	r2, r1
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	4b63      	ldr	r3, [pc, #396]	; (80014ec <HAL_UART_MspInit+0x250>)
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	02db      	lsls	r3, r3, #11
 8001364:	4013      	ands	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800136a:	2124      	movs	r1, #36	; 0x24
 800136c:	187b      	adds	r3, r7, r1
 800136e:	22c0      	movs	r2, #192	; 0xc0
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2202      	movs	r2, #2
 8001378:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2203      	movs	r2, #3
 8001384:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2204      	movs	r2, #4
 800138a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	187b      	adds	r3, r7, r1
 800138e:	4a59      	ldr	r2, [pc, #356]	; (80014f4 <HAL_UART_MspInit+0x258>)
 8001390:	0019      	movs	r1, r3
 8001392:	0010      	movs	r0, r2
 8001394:	f000 fbfc 	bl	8001b90 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001398:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_UART_MspInit+0x260>)
 800139c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139e:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a4:	4b54      	ldr	r3, [pc, #336]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013aa:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b0:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b6:	4b50      	ldr	r3, [pc, #320]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013be:	2220      	movs	r2, #32
 80013c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f9ca 	bl	8001764 <HAL_DMA_Init>
 80013d0:	1e03      	subs	r3, r0, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 80013d4:	f7ff fd02 	bl	8000ddc <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 80013d8:	4b49      	ldr	r3, [pc, #292]	; (8001500 <HAL_UART_MspInit+0x264>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_UART_MspInit+0x264>)
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	04c9      	lsls	r1, r1, #19
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a43      	ldr	r2, [pc, #268]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013ea:	671a      	str	r2, [r3, #112]	; 0x70
 80013ec:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <HAL_UART_MspInit+0x25c>)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_UART_MspInit+0x268>)
 80013f4:	4a44      	ldr	r2, [pc, #272]	; (8001508 <HAL_UART_MspInit+0x26c>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f8:	4b42      	ldr	r3, [pc, #264]	; (8001504 <HAL_UART_MspInit+0x268>)
 80013fa:	2210      	movs	r2, #16
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_UART_MspInit+0x268>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <HAL_UART_MspInit+0x268>)
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140a:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <HAL_UART_MspInit+0x268>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <HAL_UART_MspInit+0x268>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_UART_MspInit+0x268>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_UART_MspInit+0x268>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_UART_MspInit+0x268>)
 8001424:	0018      	movs	r0, r3
 8001426:	f000 f99d 	bl	8001764 <HAL_DMA_Init>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d001      	beq.n	8001432 <HAL_UART_MspInit+0x196>
      Error_Handler();
 800142e:	f7ff fcd5 	bl	8000ddc <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <HAL_UART_MspInit+0x264>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_UART_MspInit+0x264>)
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	04c9      	lsls	r1, r1, #19
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a30      	ldr	r2, [pc, #192]	; (8001504 <HAL_UART_MspInit+0x268>)
 8001444:	66da      	str	r2, [r3, #108]	; 0x6c
 8001446:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <HAL_UART_MspInit+0x268>)
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2103      	movs	r1, #3
 8001450:	201d      	movs	r0, #29
 8001452:	f000 f961 	bl	8001718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001456:	201d      	movs	r0, #29
 8001458:	f000 f973 	bl	8001742 <HAL_NVIC_EnableIRQ>
}
 800145c:	e03f      	b.n	80014de <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <HAL_UART_MspInit+0x270>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d13a      	bne.n	80014de <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_UART_MspInit+0x250>)
 800146a:	69da      	ldr	r2, [r3, #28]
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_UART_MspInit+0x250>)
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	0309      	lsls	r1, r1, #12
 8001472:	430a      	orrs	r2, r1
 8001474:	61da      	str	r2, [r3, #28]
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_UART_MspInit+0x250>)
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	031b      	lsls	r3, r3, #12
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_UART_MspInit+0x250>)
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_UART_MspInit+0x250>)
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	0289      	lsls	r1, r1, #10
 800148e:	430a      	orrs	r2, r1
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_UART_MspInit+0x250>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	029b      	lsls	r3, r3, #10
 800149a:	4013      	ands	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014a0:	2124      	movs	r1, #36	; 0x24
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	2203      	movs	r2, #3
 80014a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	2202      	movs	r2, #2
 80014ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	2203      	movs	r2, #3
 80014b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2204      	movs	r2, #4
 80014be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	187a      	adds	r2, r7, r1
 80014c2:	2390      	movs	r3, #144	; 0x90
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 fb61 	bl	8001b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2103      	movs	r1, #3
 80014d2:	201d      	movs	r0, #29
 80014d4:	f000 f920 	bl	8001718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80014d8:	201d      	movs	r0, #29
 80014da:	f000 f932 	bl	8001742 <HAL_NVIC_EnableIRQ>
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b00e      	add	sp, #56	; 0x38
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40004400 	.word	0x40004400
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40004800 	.word	0x40004800
 80014f4:	48000400 	.word	0x48000400
 80014f8:	20001168 	.word	0x20001168
 80014fc:	40020030 	.word	0x40020030
 8001500:	40010000 	.word	0x40010000
 8001504:	20001230 	.word	0x20001230
 8001508:	4002001c 	.word	0x4002001c
 800150c:	40004c00 	.word	0x40004c00

08001510 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001512:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopForever+0x6>)
  ldr r1, =_edata
 8001516:	490e      	ldr	r1, [pc, #56]	; (8001550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <LoopForever+0xe>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800152c:	4c0b      	ldr	r4, [pc, #44]	; (800155c <LoopForever+0x16>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800153a:	f7ff fdb7 	bl	80010ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800153e:	f004 fccb 	bl	8005ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001542:	f7ff fbb7 	bl	8000cb4 <main>

08001546 <LoopForever>:

LoopForever:
    b LoopForever
 8001546:	e7fe      	b.n	8001546 <LoopForever>
  ldr   r0, =_estack
 8001548:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001554:	08007458 	.word	0x08007458
  ldr r2, =_sbss
 8001558:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800155c:	20001384 	.word	0x20001384

08001560 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC1_COMP_IRQHandler>
	...

08001564 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_Init+0x24>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_Init+0x24>)
 800156e:	2110      	movs	r1, #16
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fc5f 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157a:	f7ff fc33 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x1c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	001a      	movs	r2, r3
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x20>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	18d2      	adds	r2, r2, r3
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_IncTick+0x20>)
 800159e:	601a      	str	r2, [r3, #0]
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	20000010 	.word	0x20000010
 80015ac:	2000137c 	.word	0x2000137c

080015b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <HAL_GetTick+0x10>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	2000137c 	.word	0x2000137c

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff fff0 	bl	80015b0 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3301      	adds	r3, #1
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_Delay+0x40>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	001a      	movs	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	189b      	adds	r3, r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	f7ff ffe0 	bl	80015b0 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b004      	add	sp, #16
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000010 	.word	0x20000010

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	0002      	movs	r2, r0
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b7f      	cmp	r3, #127	; 0x7f
 800161a:	d809      	bhi.n	8001630 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	001a      	movs	r2, r3
 8001622:	231f      	movs	r3, #31
 8001624:	401a      	ands	r2, r3
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <__NVIC_EnableIRQ+0x30>)
 8001628:	2101      	movs	r1, #1
 800162a:	4091      	lsls	r1, r2
 800162c:	000a      	movs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
  }
}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	0002      	movs	r2, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b7f      	cmp	r3, #127	; 0x7f
 8001650:	d828      	bhi.n	80016a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001652:	4a2f      	ldr	r2, [pc, #188]	; (8001710 <__NVIC_SetPriority+0xd4>)
 8001654:	1dfb      	adds	r3, r7, #7
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b25b      	sxtb	r3, r3
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	33c0      	adds	r3, #192	; 0xc0
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	589b      	ldr	r3, [r3, r2]
 8001662:	1dfa      	adds	r2, r7, #7
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	0011      	movs	r1, r2
 8001668:	2203      	movs	r2, #3
 800166a:	400a      	ands	r2, r1
 800166c:	00d2      	lsls	r2, r2, #3
 800166e:	21ff      	movs	r1, #255	; 0xff
 8001670:	4091      	lsls	r1, r2
 8001672:	000a      	movs	r2, r1
 8001674:	43d2      	mvns	r2, r2
 8001676:	401a      	ands	r2, r3
 8001678:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	019b      	lsls	r3, r3, #6
 800167e:	22ff      	movs	r2, #255	; 0xff
 8001680:	401a      	ands	r2, r3
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	0018      	movs	r0, r3
 8001688:	2303      	movs	r3, #3
 800168a:	4003      	ands	r3, r0
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001690:	481f      	ldr	r0, [pc, #124]	; (8001710 <__NVIC_SetPriority+0xd4>)
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b25b      	sxtb	r3, r3
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	430a      	orrs	r2, r1
 800169c:	33c0      	adds	r3, #192	; 0xc0
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016a2:	e031      	b.n	8001708 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a4:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <__NVIC_SetPriority+0xd8>)
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	0019      	movs	r1, r3
 80016ac:	230f      	movs	r3, #15
 80016ae:	400b      	ands	r3, r1
 80016b0:	3b08      	subs	r3, #8
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3306      	adds	r3, #6
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	18d3      	adds	r3, r2, r3
 80016ba:	3304      	adds	r3, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	1dfa      	adds	r2, r7, #7
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	0011      	movs	r1, r2
 80016c4:	2203      	movs	r2, #3
 80016c6:	400a      	ands	r2, r1
 80016c8:	00d2      	lsls	r2, r2, #3
 80016ca:	21ff      	movs	r1, #255	; 0xff
 80016cc:	4091      	lsls	r1, r2
 80016ce:	000a      	movs	r2, r1
 80016d0:	43d2      	mvns	r2, r2
 80016d2:	401a      	ands	r2, r3
 80016d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	019b      	lsls	r3, r3, #6
 80016da:	22ff      	movs	r2, #255	; 0xff
 80016dc:	401a      	ands	r2, r3
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	0018      	movs	r0, r3
 80016e4:	2303      	movs	r3, #3
 80016e6:	4003      	ands	r3, r0
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <__NVIC_SetPriority+0xd8>)
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	001c      	movs	r4, r3
 80016f4:	230f      	movs	r3, #15
 80016f6:	4023      	ands	r3, r4
 80016f8:	3b08      	subs	r3, #8
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	430a      	orrs	r2, r1
 80016fe:	3306      	adds	r3, #6
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	18c3      	adds	r3, r0, r3
 8001704:	3304      	adds	r3, #4
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b003      	add	sp, #12
 800170e:	bd90      	pop	{r4, r7, pc}
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	210f      	movs	r1, #15
 8001724:	187b      	adds	r3, r7, r1
 8001726:	1c02      	adds	r2, r0, #0
 8001728:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	187b      	adds	r3, r7, r1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b25b      	sxtb	r3, r3
 8001732:	0011      	movs	r1, r2
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff ff81 	bl	800163c <__NVIC_SetPriority>
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	0002      	movs	r2, r0
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b25b      	sxtb	r3, r3
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff ff57 	bl	8001608 <__NVIC_EnableIRQ>
}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e036      	b.n	80017e8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2221      	movs	r2, #33	; 0x21
 800177e:	2102      	movs	r1, #2
 8001780:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_DMA_Init+0x8c>)
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800179a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 f9c4 	bl	8001b58 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2221      	movs	r2, #33	; 0x21
 80017da:	2101      	movs	r1, #1
 80017dc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2220      	movs	r2, #32
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}  
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b004      	add	sp, #16
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	ffffc00f 	.word	0xffffc00f

080017f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001802:	2317      	movs	r3, #23
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2220      	movs	r2, #32
 800180e:	5c9b      	ldrb	r3, [r3, r2]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_DMA_Start_IT+0x24>
 8001814:	2302      	movs	r3, #2
 8001816:	e04f      	b.n	80018b8 <HAL_DMA_Start_IT+0xc4>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2220      	movs	r2, #32
 800181c:	2101      	movs	r1, #1
 800181e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2221      	movs	r2, #33	; 0x21
 8001824:	5c9b      	ldrb	r3, [r3, r2]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d13a      	bne.n	80018a2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2221      	movs	r2, #33	; 0x21
 8001830:	2102      	movs	r1, #2
 8001832:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2101      	movs	r1, #1
 8001846:	438a      	bics	r2, r1
 8001848:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 f955 	bl	8001b00 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	210e      	movs	r1, #14
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e00f      	b.n	8001890 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	210a      	movs	r1, #10
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2104      	movs	r1, #4
 800188c:	438a      	bics	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2101      	movs	r1, #1
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e007      	b.n	80018b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2220      	movs	r2, #32
 80018a6:	2100      	movs	r1, #0
 80018a8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80018aa:	2317      	movs	r3, #23
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80018b2:	2317      	movs	r3, #23
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	781b      	ldrb	r3, [r3, #0]
} 
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b006      	add	sp, #24
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2221      	movs	r2, #33	; 0x21
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2204      	movs	r2, #4
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2220      	movs	r2, #32
 80018de:	2100      	movs	r1, #0
 80018e0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e020      	b.n	8001928 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	210e      	movs	r1, #14
 80018f2:	438a      	bics	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2101      	movs	r1, #1
 8001902:	438a      	bics	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190e:	2101      	movs	r1, #1
 8001910:	4091      	lsls	r1, r2
 8001912:	000a      	movs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2221      	movs	r2, #33	; 0x21
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2220      	movs	r2, #32
 8001922:	2100      	movs	r1, #0
 8001924:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	0018      	movs	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	b002      	add	sp, #8
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001938:	230f      	movs	r3, #15
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2221      	movs	r2, #33	; 0x21
 8001944:	5c9b      	ldrb	r3, [r3, r2]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d007      	beq.n	800195c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001952:	230f      	movs	r3, #15
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e028      	b.n	80019ae <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	210e      	movs	r1, #14
 8001968:	438a      	bics	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2101      	movs	r1, #1
 8001978:	438a      	bics	r2, r1
 800197a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	2101      	movs	r1, #1
 8001986:	4091      	lsls	r1, r2
 8001988:	000a      	movs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2221      	movs	r2, #33	; 0x21
 8001990:	2101      	movs	r1, #1
 8001992:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2220      	movs	r2, #32
 8001998:	2100      	movs	r1, #0
 800199a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	0010      	movs	r0, r2
 80019ac:	4798      	blx	r3
    } 
  }
  return status;
 80019ae:	230f      	movs	r3, #15
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	781b      	ldrb	r3, [r3, #0]
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b004      	add	sp, #16
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	2204      	movs	r2, #4
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	d024      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x72>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2204      	movs	r2, #4
 80019e8:	4013      	ands	r3, r2
 80019ea:	d020      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2220      	movs	r2, #32
 80019f4:	4013      	ands	r3, r2
 80019f6:	d107      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2104      	movs	r1, #4
 8001a04:	438a      	bics	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a10:	2104      	movs	r1, #4
 8001a12:	4091      	lsls	r1, r2
 8001a14:	000a      	movs	r2, r1
 8001a16:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d100      	bne.n	8001a22 <HAL_DMA_IRQHandler+0x66>
 8001a20:	e06a      	b.n	8001af8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	0010      	movs	r0, r2
 8001a2a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a2c:	e064      	b.n	8001af8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2202      	movs	r2, #2
 8001a34:	409a      	lsls	r2, r3
 8001a36:	0013      	movs	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d02b      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xda>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d027      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d10b      	bne.n	8001a6a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	210a      	movs	r1, #10
 8001a5e:	438a      	bics	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2221      	movs	r2, #33	; 0x21
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a72:	2102      	movs	r1, #2
 8001a74:	4091      	lsls	r1, r2
 8001a76:	000a      	movs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d036      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	0010      	movs	r0, r2
 8001a92:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a94:	e030      	b.n	8001af8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d028      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x13c>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d024      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	210e      	movs	r1, #14
 8001aba:	438a      	bics	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4091      	lsls	r1, r2
 8001aca:	000a      	movs	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2221      	movs	r2, #33	; 0x21
 8001ad8:	2101      	movs	r1, #1
 8001ada:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	0010      	movs	r0, r2
 8001af4:	4798      	blx	r3
    }
   }
}  
 8001af6:	e7ff      	b.n	8001af8 <HAL_DMA_IRQHandler+0x13c>
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	2101      	movs	r1, #1
 8001b18:	4091      	lsls	r1, r2
 8001b1a:	000a      	movs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d108      	bne.n	8001b40 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b3e:	e007      	b.n	8001b50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	60da      	str	r2, [r3, #12]
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b004      	add	sp, #16
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <DMA_CalcBaseAndBitshift+0x30>)
 8001b66:	4694      	mov	ip, r2
 8001b68:	4463      	add	r3, ip
 8001b6a:	2114      	movs	r1, #20
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7fe fadd 	bl	800012c <__udivsi3>
 8001b72:	0003      	movs	r3, r0
 8001b74:	009a      	lsls	r2, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <DMA_CalcBaseAndBitshift+0x34>)
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	bffdfff8 	.word	0xbffdfff8
 8001b8c:	40020000 	.word	0x40020000

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	e155      	b.n	8001e4c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4091      	lsls	r1, r2
 8001baa:	000a      	movs	r2, r1
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d100      	bne.n	8001bb8 <HAL_GPIO_Init+0x28>
 8001bb6:	e146      	b.n	8001e46 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_GPIO_Init+0x48>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bcc:	2b11      	cmp	r3, #17
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b12      	cmp	r3, #18
 8001bd6:	d130      	bne.n	8001c3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	43da      	mvns	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
 8001c14:	0013      	movs	r3, r2
 8001c16:	43da      	mvns	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	2201      	movs	r2, #1
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	2203      	movs	r2, #3
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0xea>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b12      	cmp	r3, #18
 8001c78:	d123      	bne.n	8001cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	58d3      	ldr	r3, [r2, r3]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	43da      	mvns	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2107      	movs	r1, #7
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	6939      	ldr	r1, [r7, #16]
 8001cc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	0013      	movs	r3, r2
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	055b      	lsls	r3, r3, #21
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d100      	bne.n	8001d04 <HAL_GPIO_Init+0x174>
 8001d02:	e0a0      	b.n	8001e46 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d04:	4b57      	ldr	r3, [pc, #348]	; (8001e64 <HAL_GPIO_Init+0x2d4>)
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	4b56      	ldr	r3, [pc, #344]	; (8001e64 <HAL_GPIO_Init+0x2d4>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	619a      	str	r2, [r3, #24]
 8001d10:	4b54      	ldr	r3, [pc, #336]	; (8001e64 <HAL_GPIO_Init+0x2d4>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_GPIO_Init+0x2d8>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	589b      	ldr	r3, [r3, r2]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	409a      	lsls	r2, r3
 8001d36:	0013      	movs	r3, r2
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	2390      	movs	r3, #144	; 0x90
 8001d44:	05db      	lsls	r3, r3, #23
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x1ee>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a47      	ldr	r2, [pc, #284]	; (8001e6c <HAL_GPIO_Init+0x2dc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x1ea>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a46      	ldr	r2, [pc, #280]	; (8001e70 <HAL_GPIO_Init+0x2e0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x1e6>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a45      	ldr	r2, [pc, #276]	; (8001e74 <HAL_GPIO_Init+0x2e4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x1e2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a44      	ldr	r2, [pc, #272]	; (8001e78 <HAL_GPIO_Init+0x2e8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x1de>
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	e008      	b.n	8001d80 <HAL_GPIO_Init+0x1f0>
 8001d6e:	2305      	movs	r3, #5
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x1f0>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x1f0>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x1f0>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x1f0>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	2103      	movs	r1, #3
 8001d84:	400a      	ands	r2, r1
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d90:	4935      	ldr	r1, [pc, #212]	; (8001e68 <HAL_GPIO_Init+0x2d8>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43da      	mvns	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	025b      	lsls	r3, r3, #9
 8001db6:	4013      	ands	r3, r2
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	4013      	ands	r3, r2
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	035b      	lsls	r3, r3, #13
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43da      	mvns	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	039b      	lsls	r3, r3, #14
 8001e34:	4013      	ands	r3, r2
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	40da      	lsrs	r2, r3
 8001e54:	1e13      	subs	r3, r2, #0
 8001e56:	d000      	beq.n	8001e5a <HAL_GPIO_Init+0x2ca>
 8001e58:	e6a2      	b.n	8001ba0 <HAL_GPIO_Init+0x10>
  } 
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b006      	add	sp, #24
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	48000400 	.word	0x48000400
 8001e70:	48000800 	.word	0x48000800
 8001e74:	48000c00 	.word	0x48000c00
 8001e78:	48001000 	.word	0x48001000
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	0008      	movs	r0, r1
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	1cbb      	adds	r3, r7, #2
 8001e8e:	1c02      	adds	r2, r0, #0
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	1c7b      	adds	r3, r7, #1
 8001e94:	1c0a      	adds	r2, r1, #0
 8001e96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e98:	1c7b      	adds	r3, r7, #1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea0:	1cbb      	adds	r3, r7, #2
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eaa:	1cbb      	adds	r3, r7, #2
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e082      	b.n	8001fd4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2241      	movs	r2, #65	; 0x41
 8001ed2:	5c9b      	ldrb	r3, [r3, r2]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2240      	movs	r2, #64	; 0x40
 8001ede:	2100      	movs	r1, #0
 8001ee0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe fe81 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2241      	movs	r2, #65	; 0x41
 8001eee:	2124      	movs	r1, #36	; 0x24
 8001ef0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	438a      	bics	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4934      	ldr	r1, [pc, #208]	; (8001fdc <HAL_I2C_Init+0x120>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4931      	ldr	r1, [pc, #196]	; (8001fe0 <HAL_I2C_Init+0x124>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	0209      	lsls	r1, r1, #8
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e007      	b.n	8001f4a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2184      	movs	r1, #132	; 0x84
 8001f44:	0209      	lsls	r1, r1, #8
 8001f46:	430a      	orrs	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d104      	bne.n	8001f5c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	491f      	ldr	r1, [pc, #124]	; (8001fe4 <HAL_I2C_Init+0x128>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	491a      	ldr	r1, [pc, #104]	; (8001fe0 <HAL_I2C_Init+0x124>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	0011      	movs	r1, r2
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	021a      	lsls	r2, r3, #8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69d9      	ldr	r1, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2241      	movs	r2, #65	; 0x41
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2242      	movs	r2, #66	; 0x42
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	f0ffffff 	.word	0xf0ffffff
 8001fe0:	ffff7fff 	.word	0xffff7fff
 8001fe4:	02008000 	.word	0x02008000

08001fe8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	0008      	movs	r0, r1
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	1c02      	adds	r2, r0, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	2308      	movs	r3, #8
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	1c0a      	adds	r2, r1, #0
 8002004:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2241      	movs	r2, #65	; 0x41
 800200a:	5c9b      	ldrb	r3, [r3, r2]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	d000      	beq.n	8002014 <HAL_I2C_Master_Transmit+0x2c>
 8002012:	e0e7      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2240      	movs	r2, #64	; 0x40
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_I2C_Master_Transmit+0x3a>
 800201e:	2302      	movs	r3, #2
 8002020:	e0e1      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1fe>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800202a:	f7ff fac1 	bl	80015b0 <HAL_GetTick>
 800202e:	0003      	movs	r3, r0
 8002030:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	0219      	lsls	r1, r3, #8
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2319      	movs	r3, #25
 800203e:	2201      	movs	r2, #1
 8002040:	f000 f8fc 	bl	800223c <I2C_WaitOnFlagUntilTimeout>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0cc      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2241      	movs	r2, #65	; 0x41
 8002050:	2121      	movs	r1, #33	; 0x21
 8002052:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2242      	movs	r2, #66	; 0x42
 8002058:	2110      	movs	r1, #16
 800205a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2208      	movs	r2, #8
 800206c:	18ba      	adds	r2, r7, r2
 800206e:	8812      	ldrh	r2, [r2, #0]
 8002070:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	2bff      	cmp	r3, #255	; 0xff
 8002080:	d911      	bls.n	80020a6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	22ff      	movs	r2, #255	; 0xff
 8002086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	b2da      	uxtb	r2, r3
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	045c      	lsls	r4, r3, #17
 8002092:	230a      	movs	r3, #10
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	8819      	ldrh	r1, [r3, #0]
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <HAL_I2C_Master_Transmit+0x208>)
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	0023      	movs	r3, r4
 80020a0:	f000 f9ec 	bl	800247c <I2C_TransferConfig>
 80020a4:	e075      	b.n	8002192 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	049c      	lsls	r4, r3, #18
 80020ba:	230a      	movs	r3, #10
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	8819      	ldrh	r1, [r3, #0]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <HAL_I2C_Master_Transmit+0x208>)
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	0023      	movs	r3, r4
 80020c8:	f000 f9d8 	bl	800247c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80020cc:	e061      	b.n	8002192 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 f8f0 	bl	80022ba <I2C_WaitOnTXISFlagUntilTimeout>
 80020da:	1e03      	subs	r3, r0, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e081      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03a      	beq.n	8002192 <HAL_I2C_Master_Transmit+0x1aa>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d136      	bne.n	8002192 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	0013      	movs	r3, r2
 800212e:	2200      	movs	r2, #0
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	f000 f883 	bl	800223c <I2C_WaitOnFlagUntilTimeout>
 8002136:	1e03      	subs	r3, r0, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e053      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	2bff      	cmp	r3, #255	; 0xff
 8002146:	d911      	bls.n	800216c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	22ff      	movs	r2, #255	; 0xff
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	b2da      	uxtb	r2, r3
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	045c      	lsls	r4, r3, #17
 8002158:	230a      	movs	r3, #10
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	8819      	ldrh	r1, [r3, #0]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	2300      	movs	r3, #0
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	0023      	movs	r3, r4
 8002166:	f000 f989 	bl	800247c <I2C_TransferConfig>
 800216a:	e012      	b.n	8002192 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	b2da      	uxtb	r2, r3
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	049c      	lsls	r4, r3, #18
 8002180:	230a      	movs	r3, #10
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	8819      	ldrh	r1, [r3, #0]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	2300      	movs	r3, #0
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	0023      	movs	r3, r4
 800218e:	f000 f975 	bl	800247c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d198      	bne.n	80020ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 f8c8 	bl	8002338 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021a8:	1e03      	subs	r3, r0, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e01a      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2220      	movs	r2, #32
 80021b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	490c      	ldr	r1, [pc, #48]	; (80021f4 <HAL_I2C_Master_Transmit+0x20c>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2241      	movs	r2, #65	; 0x41
 80021cc:	2120      	movs	r1, #32
 80021ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2242      	movs	r2, #66	; 0x42
 80021d4:	2100      	movs	r1, #0
 80021d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b007      	add	sp, #28
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	80002000 	.word	0x80002000
 80021f4:	fe00e800 	.word	0xfe00e800

080021f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	2b02      	cmp	r3, #2
 800220c:	d103      	bne.n	8002216 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2200      	movs	r2, #0
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2201      	movs	r2, #1
 800221e:	4013      	ands	r3, r2
 8002220:	2b01      	cmp	r3, #1
 8002222:	d007      	beq.n	8002234 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	430a      	orrs	r2, r1
 8002232:	619a      	str	r2, [r3, #24]
  }
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}

0800223c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	1dfb      	adds	r3, r7, #7
 800224a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800224c:	e021      	b.n	8002292 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	d01e      	beq.n	8002292 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7ff f9ac 	bl	80015b0 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d113      	bne.n	8002292 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	2220      	movs	r2, #32
 8002270:	431a      	orrs	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2241      	movs	r2, #65	; 0x41
 800227a:	2120      	movs	r1, #32
 800227c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2242      	movs	r2, #66	; 0x42
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2240      	movs	r2, #64	; 0x40
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00f      	b.n	80022b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	4013      	ands	r3, r2
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	425a      	negs	r2, r3
 80022a2:	4153      	adcs	r3, r2
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	001a      	movs	r2, r3
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d0ce      	beq.n	800224e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b004      	add	sp, #16
 80022b8:	bd80      	pop	{r7, pc}

080022ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022c6:	e02b      	b.n	8002320 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 f86e 	bl	80023b0 <I2C_IsAcknowledgeFailed>
 80022d4:	1e03      	subs	r3, r0, #0
 80022d6:	d001      	beq.n	80022dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e029      	b.n	8002330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	3301      	adds	r3, #1
 80022e0:	d01e      	beq.n	8002320 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7ff f965 	bl	80015b0 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d113      	bne.n	8002320 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	2220      	movs	r2, #32
 80022fe:	431a      	orrs	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2241      	movs	r2, #65	; 0x41
 8002308:	2120      	movs	r1, #32
 800230a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2242      	movs	r2, #66	; 0x42
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2240      	movs	r2, #64	; 0x40
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e007      	b.n	8002330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	2b02      	cmp	r3, #2
 800232c:	d1cc      	bne.n	80022c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b004      	add	sp, #16
 8002336:	bd80      	pop	{r7, pc}

08002338 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002344:	e028      	b.n	8002398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f82f 	bl	80023b0 <I2C_IsAcknowledgeFailed>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d001      	beq.n	800235a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e026      	b.n	80023a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235a:	f7ff f929 	bl	80015b0 <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	d302      	bcc.n	8002370 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d113      	bne.n	8002398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	2220      	movs	r2, #32
 8002376:	431a      	orrs	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2241      	movs	r2, #65	; 0x41
 8002380:	2120      	movs	r1, #32
 8002382:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2242      	movs	r2, #66	; 0x42
 8002388:	2100      	movs	r1, #0
 800238a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2240      	movs	r2, #64	; 0x40
 8002390:	2100      	movs	r1, #0
 8002392:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e007      	b.n	80023a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2220      	movs	r2, #32
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d1cf      	bne.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b004      	add	sp, #16
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2210      	movs	r2, #16
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d151      	bne.n	800246e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ca:	e021      	b.n	8002410 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3301      	adds	r3, #1
 80023d0:	d01e      	beq.n	8002410 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d2:	f7ff f8ed 	bl	80015b0 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d302      	bcc.n	80023e8 <I2C_IsAcknowledgeFailed+0x38>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d113      	bne.n	8002410 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	2220      	movs	r2, #32
 80023ee:	431a      	orrs	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2241      	movs	r2, #65	; 0x41
 80023f8:	2120      	movs	r1, #32
 80023fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2242      	movs	r2, #66	; 0x42
 8002400:	2100      	movs	r1, #0
 8002402:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2240      	movs	r2, #64	; 0x40
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e02f      	b.n	8002470 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2220      	movs	r2, #32
 8002418:	4013      	ands	r3, r2
 800241a:	2b20      	cmp	r3, #32
 800241c:	d1d6      	bne.n	80023cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2210      	movs	r2, #16
 8002424:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2220      	movs	r2, #32
 800242c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0018      	movs	r0, r3
 8002432:	f7ff fee1 	bl	80021f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	490d      	ldr	r1, [pc, #52]	; (8002478 <I2C_IsAcknowledgeFailed+0xc8>)
 8002442:	400a      	ands	r2, r1
 8002444:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	2204      	movs	r2, #4
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2241      	movs	r2, #65	; 0x41
 8002456:	2120      	movs	r1, #32
 8002458:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2242      	movs	r2, #66	; 0x42
 800245e:	2100      	movs	r1, #0
 8002460:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2240      	movs	r2, #64	; 0x40
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b004      	add	sp, #16
 8002476:	bd80      	pop	{r7, pc}
 8002478:	fe00e800 	.word	0xfe00e800

0800247c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	0008      	movs	r0, r1
 8002486:	0011      	movs	r1, r2
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	240a      	movs	r4, #10
 800248c:	193b      	adds	r3, r7, r4
 800248e:	1c02      	adds	r2, r0, #0
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	2009      	movs	r0, #9
 8002494:	183b      	adds	r3, r7, r0
 8002496:	1c0a      	adds	r2, r1, #0
 8002498:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	0d51      	lsrs	r1, r2, #21
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	00d2      	lsls	r2, r2, #3
 80024a8:	400a      	ands	r2, r1
 80024aa:	490e      	ldr	r1, [pc, #56]	; (80024e4 <I2C_TransferConfig+0x68>)
 80024ac:	430a      	orrs	r2, r1
 80024ae:	43d2      	mvns	r2, r2
 80024b0:	401a      	ands	r2, r3
 80024b2:	0011      	movs	r1, r2
 80024b4:	193b      	adds	r3, r7, r4
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	059b      	lsls	r3, r3, #22
 80024ba:	0d9a      	lsrs	r2, r3, #22
 80024bc:	183b      	adds	r3, r7, r0
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	0418      	lsls	r0, r3, #16
 80024c2:	23ff      	movs	r3, #255	; 0xff
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	4003      	ands	r3, r0
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b005      	add	sp, #20
 80024e0:	bd90      	pop	{r4, r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	03ff63ff 	.word	0x03ff63ff

080024e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2241      	movs	r2, #65	; 0x41
 80024f6:	5c9b      	ldrb	r3, [r3, r2]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d138      	bne.n	8002570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2240      	movs	r2, #64	; 0x40
 8002502:	5c9b      	ldrb	r3, [r3, r2]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002508:	2302      	movs	r3, #2
 800250a:	e032      	b.n	8002572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	2101      	movs	r1, #1
 8002512:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2241      	movs	r2, #65	; 0x41
 8002518:	2124      	movs	r1, #36	; 0x24
 800251a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2101      	movs	r1, #1
 8002528:	438a      	bics	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4911      	ldr	r1, [pc, #68]	; (800257c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002538:	400a      	ands	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2241      	movs	r2, #65	; 0x41
 8002560:	2120      	movs	r1, #32
 8002562:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
  }
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	ffffefff 	.word	0xffffefff

08002580 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2241      	movs	r2, #65	; 0x41
 800258e:	5c9b      	ldrb	r3, [r3, r2]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	d139      	bne.n	800260a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2240      	movs	r2, #64	; 0x40
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e033      	b.n	800260c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	2101      	movs	r1, #1
 80025aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2241      	movs	r2, #65	; 0x41
 80025b0:	2124      	movs	r1, #36	; 0x24
 80025b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2101      	movs	r1, #1
 80025c0:	438a      	bics	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2241      	movs	r2, #65	; 0x41
 80025fa:	2120      	movs	r1, #32
 80025fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2240      	movs	r2, #64	; 0x40
 8002602:	2100      	movs	r1, #0
 8002604:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
  }
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b004      	add	sp, #16
 8002612:	bd80      	pop	{r7, pc}
 8002614:	fffff0ff 	.word	0xfffff0ff

08002618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	f000 fb76 	bl	8002d18 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2201      	movs	r2, #1
 8002632:	4013      	ands	r3, r2
 8002634:	d100      	bne.n	8002638 <HAL_RCC_OscConfig+0x20>
 8002636:	e08e      	b.n	8002756 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002638:	4bc5      	ldr	r3, [pc, #788]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	220c      	movs	r2, #12
 800263e:	4013      	ands	r3, r2
 8002640:	2b04      	cmp	r3, #4
 8002642:	d00e      	beq.n	8002662 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002644:	4bc2      	ldr	r3, [pc, #776]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	220c      	movs	r2, #12
 800264a:	4013      	ands	r3, r2
 800264c:	2b08      	cmp	r3, #8
 800264e:	d117      	bne.n	8002680 <HAL_RCC_OscConfig+0x68>
 8002650:	4bbf      	ldr	r3, [pc, #764]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	23c0      	movs	r3, #192	; 0xc0
 8002656:	025b      	lsls	r3, r3, #9
 8002658:	401a      	ands	r2, r3
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	025b      	lsls	r3, r3, #9
 800265e:	429a      	cmp	r2, r3
 8002660:	d10e      	bne.n	8002680 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002662:	4bbb      	ldr	r3, [pc, #748]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	029b      	lsls	r3, r3, #10
 800266a:	4013      	ands	r3, r2
 800266c:	d100      	bne.n	8002670 <HAL_RCC_OscConfig+0x58>
 800266e:	e071      	b.n	8002754 <HAL_RCC_OscConfig+0x13c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d000      	beq.n	800267a <HAL_RCC_OscConfig+0x62>
 8002678:	e06c      	b.n	8002754 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	f000 fb4c 	bl	8002d18 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x80>
 8002688:	4bb1      	ldr	r3, [pc, #708]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4bb0      	ldr	r3, [pc, #704]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	0249      	lsls	r1, r1, #9
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e02f      	b.n	80026f8 <HAL_RCC_OscConfig+0xe0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10c      	bne.n	80026ba <HAL_RCC_OscConfig+0xa2>
 80026a0:	4bab      	ldr	r3, [pc, #684]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4baa      	ldr	r3, [pc, #680]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026a6:	49ab      	ldr	r1, [pc, #684]	; (8002954 <HAL_RCC_OscConfig+0x33c>)
 80026a8:	400a      	ands	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	4ba8      	ldr	r3, [pc, #672]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4ba7      	ldr	r3, [pc, #668]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026b2:	49a9      	ldr	r1, [pc, #676]	; (8002958 <HAL_RCC_OscConfig+0x340>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e01e      	b.n	80026f8 <HAL_RCC_OscConfig+0xe0>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d10e      	bne.n	80026e0 <HAL_RCC_OscConfig+0xc8>
 80026c2:	4ba3      	ldr	r3, [pc, #652]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4ba2      	ldr	r3, [pc, #648]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	02c9      	lsls	r1, r1, #11
 80026cc:	430a      	orrs	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	4b9f      	ldr	r3, [pc, #636]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	0249      	lsls	r1, r1, #9
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xe0>
 80026e0:	4b9b      	ldr	r3, [pc, #620]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b9a      	ldr	r3, [pc, #616]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026e6:	499b      	ldr	r1, [pc, #620]	; (8002954 <HAL_RCC_OscConfig+0x33c>)
 80026e8:	400a      	ands	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	4b98      	ldr	r3, [pc, #608]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b97      	ldr	r3, [pc, #604]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026f2:	4999      	ldr	r1, [pc, #612]	; (8002958 <HAL_RCC_OscConfig+0x340>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d014      	beq.n	800272a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe ff56 	bl	80015b0 <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270a:	f7fe ff51 	bl	80015b0 <HAL_GetTick>
 800270e:	0002      	movs	r2, r0
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b64      	cmp	r3, #100	; 0x64
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e2fd      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271c:	4b8c      	ldr	r3, [pc, #560]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	029b      	lsls	r3, r3, #10
 8002724:	4013      	ands	r3, r2
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0xf2>
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7fe ff41 	bl	80015b0 <HAL_GetTick>
 800272e:	0003      	movs	r3, r0
 8002730:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe ff3c 	bl	80015b0 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e2e8      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	4b82      	ldr	r3, [pc, #520]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	029b      	lsls	r3, r3, #10
 800274e:	4013      	ands	r3, r2
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x11c>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	4013      	ands	r3, r2
 800275e:	d100      	bne.n	8002762 <HAL_RCC_OscConfig+0x14a>
 8002760:	e06c      	b.n	800283c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002762:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	220c      	movs	r2, #12
 8002768:	4013      	ands	r3, r2
 800276a:	d00e      	beq.n	800278a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800276c:	4b78      	ldr	r3, [pc, #480]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	220c      	movs	r2, #12
 8002772:	4013      	ands	r3, r2
 8002774:	2b08      	cmp	r3, #8
 8002776:	d11f      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1a0>
 8002778:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	025b      	lsls	r3, r3, #9
 8002780:	401a      	ands	r2, r3
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	429a      	cmp	r2, r3
 8002788:	d116      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	4b71      	ldr	r3, [pc, #452]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2202      	movs	r2, #2
 8002790:	4013      	ands	r3, r2
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_OscConfig+0x188>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e2bb      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	22f8      	movs	r2, #248	; 0xf8
 80027a6:	4393      	bics	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00da      	lsls	r2, r3, #3
 80027b0:	4b67      	ldr	r3, [pc, #412]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	e041      	b.n	800283c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d024      	beq.n	800280a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b62      	ldr	r3, [pc, #392]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027c6:	2101      	movs	r1, #1
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fef0 	bl	80015b0 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe feeb 	bl	80015b0 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e297      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2202      	movs	r2, #2
 80027ee:	4013      	ands	r3, r2
 80027f0:	d0f1      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b57      	ldr	r3, [pc, #348]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	22f8      	movs	r2, #248	; 0xf8
 80027f8:	4393      	bics	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	00da      	lsls	r2, r3, #3
 8002802:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e018      	b.n	800283c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280a:	4b51      	ldr	r3, [pc, #324]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002810:	2101      	movs	r1, #1
 8002812:	438a      	bics	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe fecb 	bl	80015b0 <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002820:	f7fe fec6 	bl	80015b0 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e272      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2202      	movs	r2, #2
 8002838:	4013      	ands	r3, r2
 800283a:	d1f1      	bne.n	8002820 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	4013      	ands	r3, r2
 8002844:	d036      	beq.n	80028b4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d019      	beq.n	8002882 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b40      	ldr	r3, [pc, #256]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7fe fea9 	bl	80015b0 <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002864:	f7fe fea4 	bl	80015b0 <HAL_GetTick>
 8002868:	0002      	movs	r2, r0
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e250      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	d0f1      	beq.n	8002864 <HAL_RCC_OscConfig+0x24c>
 8002880:	e018      	b.n	80028b4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002882:	4b33      	ldr	r3, [pc, #204]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002886:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002888:	2101      	movs	r1, #1
 800288a:	438a      	bics	r2, r1
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7fe fe8f 	bl	80015b0 <HAL_GetTick>
 8002892:	0003      	movs	r3, r0
 8002894:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002898:	f7fe fe8a 	bl	80015b0 <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e236      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d1f1      	bne.n	8002898 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2204      	movs	r2, #4
 80028ba:	4013      	ands	r3, r2
 80028bc:	d100      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2a8>
 80028be:	e0b5      	b.n	8002a2c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c0:	231f      	movs	r3, #31
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	055b      	lsls	r3, r3, #21
 80028d0:	4013      	ands	r3, r2
 80028d2:	d111      	bne.n	80028f8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	0549      	lsls	r1, r1, #21
 80028de:	430a      	orrs	r2, r1
 80028e0:	61da      	str	r2, [r3, #28]
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	055b      	lsls	r3, r3, #21
 80028ea:	4013      	ands	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028f0:	231f      	movs	r3, #31
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_RCC_OscConfig+0x344>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4013      	ands	r3, r2
 8002902:	d11a      	bne.n	800293a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002904:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_RCC_OscConfig+0x344>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_RCC_OscConfig+0x344>)
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	0049      	lsls	r1, r1, #1
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7fe fe4d 	bl	80015b0 <HAL_GetTick>
 8002916:	0003      	movs	r3, r0
 8002918:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7fe fe48 	bl	80015b0 <HAL_GetTick>
 8002920:	0002      	movs	r2, r0
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1f4      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_OscConfig+0x344>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4013      	ands	r3, r2
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10e      	bne.n	8002960 <HAL_RCC_OscConfig+0x348>
 8002942:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002944:	6a1a      	ldr	r2, [r3, #32]
 8002946:	4b02      	ldr	r3, [pc, #8]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002948:	2101      	movs	r1, #1
 800294a:	430a      	orrs	r2, r1
 800294c:	621a      	str	r2, [r3, #32]
 800294e:	e035      	b.n	80029bc <HAL_RCC_OscConfig+0x3a4>
 8002950:	40021000 	.word	0x40021000
 8002954:	fffeffff 	.word	0xfffeffff
 8002958:	fffbffff 	.word	0xfffbffff
 800295c:	40007000 	.word	0x40007000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10c      	bne.n	8002982 <HAL_RCC_OscConfig+0x36a>
 8002968:	4bca      	ldr	r3, [pc, #808]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	4bc9      	ldr	r3, [pc, #804]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 800296e:	2101      	movs	r1, #1
 8002970:	438a      	bics	r2, r1
 8002972:	621a      	str	r2, [r3, #32]
 8002974:	4bc7      	ldr	r3, [pc, #796]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	4bc6      	ldr	r3, [pc, #792]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 800297a:	2104      	movs	r1, #4
 800297c:	438a      	bics	r2, r1
 800297e:	621a      	str	r2, [r3, #32]
 8002980:	e01c      	b.n	80029bc <HAL_RCC_OscConfig+0x3a4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b05      	cmp	r3, #5
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x38c>
 800298a:	4bc2      	ldr	r3, [pc, #776]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 800298c:	6a1a      	ldr	r2, [r3, #32]
 800298e:	4bc1      	ldr	r3, [pc, #772]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002990:	2104      	movs	r1, #4
 8002992:	430a      	orrs	r2, r1
 8002994:	621a      	str	r2, [r3, #32]
 8002996:	4bbf      	ldr	r3, [pc, #764]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002998:	6a1a      	ldr	r2, [r3, #32]
 800299a:	4bbe      	ldr	r3, [pc, #760]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 800299c:	2101      	movs	r1, #1
 800299e:	430a      	orrs	r2, r1
 80029a0:	621a      	str	r2, [r3, #32]
 80029a2:	e00b      	b.n	80029bc <HAL_RCC_OscConfig+0x3a4>
 80029a4:	4bbb      	ldr	r3, [pc, #748]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 80029a6:	6a1a      	ldr	r2, [r3, #32]
 80029a8:	4bba      	ldr	r3, [pc, #744]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	438a      	bics	r2, r1
 80029ae:	621a      	str	r2, [r3, #32]
 80029b0:	4bb8      	ldr	r3, [pc, #736]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 80029b2:	6a1a      	ldr	r2, [r3, #32]
 80029b4:	4bb7      	ldr	r3, [pc, #732]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 80029b6:	2104      	movs	r1, #4
 80029b8:	438a      	bics	r2, r1
 80029ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d014      	beq.n	80029ee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c4:	f7fe fdf4 	bl	80015b0 <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	e009      	b.n	80029e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fdef 	bl	80015b0 <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	4aaf      	ldr	r2, [pc, #700]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e19a      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e2:	4bac      	ldr	r3, [pc, #688]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	2202      	movs	r2, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x3b6>
 80029ec:	e013      	b.n	8002a16 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fddf 	bl	80015b0 <HAL_GetTick>
 80029f2:	0003      	movs	r3, r0
 80029f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f6:	e009      	b.n	8002a0c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fdda 	bl	80015b0 <HAL_GetTick>
 80029fc:	0002      	movs	r2, r0
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	4aa5      	ldr	r2, [pc, #660]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e185      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	4ba1      	ldr	r3, [pc, #644]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	2202      	movs	r2, #2
 8002a12:	4013      	ands	r3, r2
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a16:	231f      	movs	r3, #31
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4b9c      	ldr	r3, [pc, #624]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	4b9b      	ldr	r3, [pc, #620]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a26:	499d      	ldr	r1, [pc, #628]	; (8002c9c <HAL_RCC_OscConfig+0x684>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2210      	movs	r2, #16
 8002a32:	4013      	ands	r3, r2
 8002a34:	d063      	beq.n	8002afe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d12a      	bne.n	8002a94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a3e:	4b95      	ldr	r3, [pc, #596]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a42:	4b94      	ldr	r3, [pc, #592]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a44:	2104      	movs	r1, #4
 8002a46:	430a      	orrs	r2, r1
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a4a:	4b92      	ldr	r3, [pc, #584]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4e:	4b91      	ldr	r3, [pc, #580]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	430a      	orrs	r2, r1
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fdab 	bl	80015b0 <HAL_GetTick>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a60:	f7fe fda6 	bl	80015b0 <HAL_GetTick>
 8002a64:	0002      	movs	r2, r0
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e152      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a72:	4b88      	ldr	r3, [pc, #544]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d0f1      	beq.n	8002a60 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a7c:	4b85      	ldr	r3, [pc, #532]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	22f8      	movs	r2, #248	; 0xf8
 8002a82:	4393      	bics	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	00da      	lsls	r2, r3, #3
 8002a8c:	4b81      	ldr	r3, [pc, #516]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34
 8002a92:	e034      	b.n	8002afe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	3305      	adds	r3, #5
 8002a9a:	d111      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a9c:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa0:	4b7c      	ldr	r3, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002aa8:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	22f8      	movs	r2, #248	; 0xf8
 8002aae:	4393      	bics	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	00da      	lsls	r2, r3, #3
 8002ab8:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34
 8002abe:	e01e      	b.n	8002afe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ac0:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac4:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002acc:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad0:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fd6a 	bl	80015b0 <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ae2:	f7fe fd65 	bl	80015b0 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e111      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002af4:	4b67      	ldr	r3, [pc, #412]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af8:	2202      	movs	r2, #2
 8002afa:	4013      	ands	r3, r2
 8002afc:	d1f1      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2220      	movs	r2, #32
 8002b04:	4013      	ands	r3, r2
 8002b06:	d05c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b08:	4b62      	ldr	r3, [pc, #392]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	220c      	movs	r2, #12
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	d00e      	beq.n	8002b32 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b14:	4b5f      	ldr	r3, [pc, #380]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	220c      	movs	r2, #12
 8002b1a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d114      	bne.n	8002b4a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b20:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	23c0      	movs	r3, #192	; 0xc0
 8002b26:	025b      	lsls	r3, r3, #9
 8002b28:	401a      	ands	r2, r3
 8002b2a:	23c0      	movs	r3, #192	; 0xc0
 8002b2c:	025b      	lsls	r3, r3, #9
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d10b      	bne.n	8002b4a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b32:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	025b      	lsls	r3, r3, #9
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d040      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x5a8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d03c      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0e6      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b52:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b56:	4b4f      	ldr	r3, [pc, #316]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	0249      	lsls	r1, r1, #9
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fd26 	bl	80015b0 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b6a:	f7fe fd21 	bl	80015b0 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0cd      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b7c:	4b45      	ldr	r3, [pc, #276]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	025b      	lsls	r3, r3, #9
 8002b84:	4013      	ands	r3, r2
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x552>
 8002b88:	e01b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002b8a:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002b90:	4943      	ldr	r1, [pc, #268]	; (8002ca0 <HAL_RCC_OscConfig+0x688>)
 8002b92:	400a      	ands	r2, r1
 8002b94:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fd0b 	bl	80015b0 <HAL_GetTick>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba0:	f7fe fd06 	bl	80015b0 <HAL_GetTick>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0b2      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002bb2:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	025b      	lsls	r3, r3, #9
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x588>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002bc0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d100      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5b4>
 8002bca:	e0a4      	b.n	8002d16 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bcc:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	220c      	movs	r2, #12
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d100      	bne.n	8002bda <HAL_RCC_OscConfig+0x5c2>
 8002bd8:	e078      	b.n	8002ccc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d14c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002be8:	492e      	ldr	r1, [pc, #184]	; (8002ca4 <HAL_RCC_OscConfig+0x68c>)
 8002bea:	400a      	ands	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7fe fcdf 	bl	80015b0 <HAL_GetTick>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe fcda 	bl	80015b0 <HAL_GetTick>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e086      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	049b      	lsls	r3, r3, #18
 8002c12:	4013      	ands	r3, r2
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c16:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c26:	430a      	orrs	r2, r1
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <HAL_RCC_OscConfig+0x690>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	2180      	movs	r1, #128	; 0x80
 8002c4c:	0449      	lsls	r1, r1, #17
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fe fcad 	bl	80015b0 <HAL_GetTick>
 8002c56:	0003      	movs	r3, r0
 8002c58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe fca8 	bl	80015b0 <HAL_GetTick>
 8002c60:	0002      	movs	r2, r0
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e054      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	049b      	lsls	r3, r3, #18
 8002c76:	4013      	ands	r3, r2
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x644>
 8002c7a:	e04c      	b.n	8002d16 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_RCC_OscConfig+0x67c>)
 8002c82:	4908      	ldr	r1, [pc, #32]	; (8002ca4 <HAL_RCC_OscConfig+0x68c>)
 8002c84:	400a      	ands	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fc92 	bl	80015b0 <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c90:	e015      	b.n	8002cbe <HAL_RCC_OscConfig+0x6a6>
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	40021000 	.word	0x40021000
 8002c98:	00001388 	.word	0x00001388
 8002c9c:	efffffff 	.word	0xefffffff
 8002ca0:	fffeffff 	.word	0xfffeffff
 8002ca4:	feffffff 	.word	0xfeffffff
 8002ca8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fc80 	bl	80015b0 <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e02c      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_RCC_OscConfig+0x708>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	049b      	lsls	r3, r3, #18
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x694>
 8002cca:	e024      	b.n	8002d16 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e01f      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_OscConfig+0x708>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x708>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	23c0      	movs	r3, #192	; 0xc0
 8002ce8:	025b      	lsls	r3, r3, #9
 8002cea:	401a      	ands	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d10e      	bne.n	8002d12 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	23f0      	movs	r3, #240	; 0xf0
 8002d06:	039b      	lsls	r3, r3, #14
 8002d08:	401a      	ands	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b008      	add	sp, #32
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0bf      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <HAL_RCC_ClockConfig+0x19c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d911      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b5e      	ldr	r3, [pc, #376]	; (8002ec0 <HAL_RCC_ClockConfig+0x19c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	4b5b      	ldr	r3, [pc, #364]	; (8002ec0 <HAL_RCC_ClockConfig+0x19c>)
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_ClockConfig+0x19c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4013      	ands	r3, r2
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0a6      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	4013      	ands	r3, r2
 8002d72:	d015      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d006      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d7e:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d84:	21e0      	movs	r1, #224	; 0xe0
 8002d86:	00c9      	lsls	r1, r1, #3
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b4d      	ldr	r3, [pc, #308]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	22f0      	movs	r2, #240	; 0xf0
 8002d92:	4393      	bics	r3, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	d04c      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b44      	ldr	r3, [pc, #272]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d120      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07a      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dca:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	049b      	lsls	r3, r3, #18
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d114      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06e      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002de2:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	025b      	lsls	r3, r3, #9
 8002dea:	4013      	ands	r3, r2
 8002dec:	d108      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e062      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df2:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2202      	movs	r2, #2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e05b      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e00:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2203      	movs	r2, #3
 8002e06:	4393      	bics	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e14:	f7fe fbcc 	bl	80015b0 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1c:	e009      	b.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1e:	f7fe fbc7 	bl	80015b0 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <HAL_RCC_ClockConfig+0x1a4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e042      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	220c      	movs	r2, #12
 8002e38:	401a      	ands	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1ec      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_RCC_ClockConfig+0x19c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d211      	bcs.n	8002e76 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_ClockConfig+0x19c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	4393      	bics	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_RCC_ClockConfig+0x19c>)
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e64:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_RCC_ClockConfig+0x19c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e020      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <HAL_RCC_ClockConfig+0x1a8>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e94:	f000 f820 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8002e98:	0001      	movs	r1, r0
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <HAL_RCC_ClockConfig+0x1ac>)
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	000a      	movs	r2, r1
 8002eaa:	40da      	lsrs	r2, r3
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8002eae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fd ffc1 	bl	8000e38 <HAL_InitTick>
  
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b004      	add	sp, #16
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	00001388 	.word	0x00001388
 8002ecc:	fffff8ff 	.word	0xfffff8ff
 8002ed0:	080073a0 	.word	0x080073a0
 8002ed4:	2000000c 	.word	0x2000000c

08002ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b08f      	sub	sp, #60	; 0x3c
 8002edc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002ede:	2314      	movs	r3, #20
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	4a37      	ldr	r2, [pc, #220]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002ee4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ee6:	c313      	stmia	r3!, {r0, r1, r4}
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	4a35      	ldr	r2, [pc, #212]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xec>)
 8002ef0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ef2:	c313      	stmia	r3!, {r0, r1, r4}
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efc:	2300      	movs	r3, #0
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f00:	2300      	movs	r3, #0
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	220c      	movs	r2, #12
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d006      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0x52>
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d043      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xd0>
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d144      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f24:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f28:	e044      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	0c9b      	lsrs	r3, r3, #18
 8002f2e:	220f      	movs	r2, #15
 8002f30:	4013      	ands	r3, r2
 8002f32:	2214      	movs	r2, #20
 8002f34:	18ba      	adds	r2, r7, r2
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f3a:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	220f      	movs	r2, #15
 8002f40:	4013      	ands	r3, r2
 8002f42:	1d3a      	adds	r2, r7, #4
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4a:	23c0      	movs	r3, #192	; 0xc0
 8002f4c:	025b      	lsls	r3, r3, #9
 8002f4e:	401a      	ands	r2, r3
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	025b      	lsls	r3, r3, #9
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d109      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f5a:	481c      	ldr	r0, [pc, #112]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f5c:	f7fd f8e6 	bl	800012c <__udivsi3>
 8002f60:	0003      	movs	r3, r0
 8002f62:	001a      	movs	r2, r3
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	4353      	muls	r3, r2
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6a:	e01a      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6e:	23c0      	movs	r3, #192	; 0xc0
 8002f70:	025b      	lsls	r3, r3, #9
 8002f72:	401a      	ands	r2, r3
 8002f74:	23c0      	movs	r3, #192	; 0xc0
 8002f76:	025b      	lsls	r3, r3, #9
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d109      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f7e:	4814      	ldr	r0, [pc, #80]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f80:	f7fd f8d4 	bl	800012c <__udivsi3>
 8002f84:	0003      	movs	r3, r0
 8002f86:	001a      	movs	r2, r3
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	4353      	muls	r3, r2
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f92:	480e      	ldr	r0, [pc, #56]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f94:	f7fd f8ca 	bl	800012c <__udivsi3>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	4353      	muls	r3, r2
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fa6:	e005      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fac:	e002      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fb2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b00f      	add	sp, #60	; 0x3c
 8002fbc:	bd90      	pop	{r4, r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	08007378 	.word	0x08007378
 8002fc4:	08007388 	.word	0x08007388
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	007a1200 	.word	0x007a1200
 8002fd0:	02dc6c00 	.word	0x02dc6c00

08002fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b02      	ldr	r3, [pc, #8]	; (8002fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	2000000c 	.word	0x2000000c

08002fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002fec:	f7ff fff2 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff0:	0001      	movs	r1, r0
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ffe:	5cd3      	ldrb	r3, [r2, r3]
 8003000:	40d9      	lsrs	r1, r3
 8003002:	000b      	movs	r3, r1
}    
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40021000 	.word	0x40021000
 8003010:	080073b0 	.word	0x080073b0

08003014 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2207      	movs	r2, #7
 8003022:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_RCC_GetClockConfig+0x4c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	401a      	ands	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_GetClockConfig+0x4c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	22f0      	movs	r2, #240	; 0xf0
 8003036:	401a      	ands	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_RCC_GetClockConfig+0x4c>)
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	23e0      	movs	r3, #224	; 0xe0
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	401a      	ands	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_GetClockConfig+0x50>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	401a      	ands	r2, r3
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40021000 	.word	0x40021000
 8003064:	40022000 	.word	0x40022000

08003068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	025b      	lsls	r3, r3, #9
 8003080:	4013      	ands	r3, r2
 8003082:	d100      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003084:	e08f      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2317      	movs	r3, #23
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	055b      	lsls	r3, r3, #21
 8003096:	4013      	ands	r3, r2
 8003098:	d111      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b6c      	ldr	r3, [pc, #432]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	4b6b      	ldr	r3, [pc, #428]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	0549      	lsls	r1, r1, #21
 80030a4:	430a      	orrs	r2, r1
 80030a6:	61da      	str	r2, [r3, #28]
 80030a8:	4b68      	ldr	r3, [pc, #416]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	055b      	lsls	r3, r3, #21
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2317      	movs	r3, #23
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b64      	ldr	r3, [pc, #400]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4013      	ands	r3, r2
 80030c8:	d11a      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b61      	ldr	r3, [pc, #388]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b60      	ldr	r3, [pc, #384]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	0049      	lsls	r1, r1, #1
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d8:	f7fe fa6a 	bl	80015b0 <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	e008      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e2:	f7fe fa65 	bl	80015b0 <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b64      	cmp	r3, #100	; 0x64
 80030ee:	d901      	bls.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0a6      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4013      	ands	r3, r2
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003100:	4b52      	ldr	r3, [pc, #328]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003102:	6a1a      	ldr	r2, [r3, #32]
 8003104:	23c0      	movs	r3, #192	; 0xc0
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d034      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	23c0      	movs	r3, #192	; 0xc0
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4013      	ands	r3, r2
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	429a      	cmp	r2, r3
 8003120:	d02c      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a4b      	ldr	r2, [pc, #300]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003128:	4013      	ands	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800312c:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	0249      	lsls	r1, r1, #9
 8003136:	430a      	orrs	r2, r1
 8003138:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800313c:	6a1a      	ldr	r2, [r3, #32]
 800313e:	4b43      	ldr	r3, [pc, #268]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003140:	4945      	ldr	r1, [pc, #276]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003142:	400a      	ands	r2, r1
 8003144:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	4013      	ands	r3, r2
 8003152:	d013      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fe fa2c 	bl	80015b0 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	e009      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fe fa27 	bl	80015b0 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	4a3c      	ldr	r2, [pc, #240]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e067      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	2202      	movs	r2, #2
 8003178:	4013      	ands	r3, r2
 800317a:	d0f0      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800317c:	4b33      	ldr	r3, [pc, #204]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4a34      	ldr	r2, [pc, #208]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4b30      	ldr	r3, [pc, #192]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800318c:	430a      	orrs	r2, r1
 800318e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003190:	2317      	movs	r3, #23
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b2c      	ldr	r3, [pc, #176]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031a0:	492f      	ldr	r1, [pc, #188]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031a2:	400a      	ands	r2, r1
 80031a4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2201      	movs	r2, #1
 80031ac:	4013      	ands	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	2203      	movs	r2, #3
 80031b6:	4393      	bics	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	4b23      	ldr	r3, [pc, #140]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2202      	movs	r2, #2
 80031ca:	4013      	ands	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a24      	ldr	r2, [pc, #144]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031de:	430a      	orrs	r2, r1
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2220      	movs	r2, #32
 80031e8:	4013      	ands	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	2210      	movs	r2, #16
 80031f2:	4393      	bics	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	4b14      	ldr	r3, [pc, #80]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031fc:	430a      	orrs	r2, r1
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	029b      	lsls	r3, r3, #10
 8003208:	4013      	ands	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	4393      	bics	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800321c:	430a      	orrs	r2, r1
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4013      	ands	r3, r2
 800322a:	d009      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	2240      	movs	r2, #64	; 0x40
 8003232:	4393      	bics	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800323c:	430a      	orrs	r2, r1
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b006      	add	sp, #24
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
 8003254:	fffffcff 	.word	0xfffffcff
 8003258:	fffeffff 	.word	0xfffeffff
 800325c:	00001388 	.word	0x00001388
 8003260:	efffffff 	.word	0xefffffff
 8003264:	fffcffff 	.word	0xfffcffff

08003268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e042      	b.n	8003300 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	223d      	movs	r2, #61	; 0x3d
 800327e:	5c9b      	ldrb	r3, [r3, r2]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d107      	bne.n	8003296 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	223c      	movs	r2, #60	; 0x3c
 800328a:	2100      	movs	r1, #0
 800328c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f7fd ff4d 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223d      	movs	r2, #61	; 0x3d
 800329a:	2102      	movs	r1, #2
 800329c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	0019      	movs	r1, r3
 80032a8:	0010      	movs	r0, r2
 80032aa:	f000 f9b5 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2246      	movs	r2, #70	; 0x46
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	223e      	movs	r2, #62	; 0x3e
 80032ba:	2101      	movs	r1, #1
 80032bc:	5499      	strb	r1, [r3, r2]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	223f      	movs	r2, #63	; 0x3f
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2240      	movs	r2, #64	; 0x40
 80032ca:	2101      	movs	r1, #1
 80032cc:	5499      	strb	r1, [r3, r2]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2241      	movs	r2, #65	; 0x41
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2242      	movs	r2, #66	; 0x42
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2243      	movs	r2, #67	; 0x43
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2244      	movs	r2, #68	; 0x44
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2245      	movs	r2, #69	; 0x45
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	223d      	movs	r2, #61	; 0x3d
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	223d      	movs	r2, #61	; 0x3d
 8003314:	5c9b      	ldrb	r3, [r3, r2]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e03b      	b.n	8003398 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	223d      	movs	r2, #61	; 0x3d
 8003324:	2102      	movs	r1, #2
 8003326:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2101      	movs	r1, #1
 8003334:	430a      	orrs	r2, r1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_TIM_Base_Start_IT+0x98>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00f      	beq.n	8003362 <HAL_TIM_Base_Start_IT+0x5a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	05db      	lsls	r3, r3, #23
 800334a:	429a      	cmp	r2, r3
 800334c:	d009      	beq.n	8003362 <HAL_TIM_Base_Start_IT+0x5a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_TIM_Base_Start_IT+0x5a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d111      	bne.n	8003386 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2207      	movs	r2, #7
 800336a:	4013      	ands	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b06      	cmp	r3, #6
 8003372:	d010      	beq.n	8003396 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2101      	movs	r1, #1
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003384:	e007      	b.n	8003396 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b004      	add	sp, #16
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40012c00 	.word	0x40012c00
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40014000 	.word	0x40014000

080033ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2202      	movs	r2, #2
 80033bc:	4013      	ands	r3, r2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d124      	bne.n	800340c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2202      	movs	r2, #2
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d11d      	bne.n	800340c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2203      	movs	r2, #3
 80033d6:	4252      	negs	r2, r2
 80033d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2203      	movs	r2, #3
 80033e8:	4013      	ands	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 f8fa 	bl	80035e8 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e007      	b.n	8003406 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f8ed 	bl	80035d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 f8f9 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2204      	movs	r2, #4
 8003414:	4013      	ands	r3, r2
 8003416:	2b04      	cmp	r3, #4
 8003418:	d125      	bne.n	8003466 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2204      	movs	r2, #4
 8003422:	4013      	ands	r3, r2
 8003424:	2b04      	cmp	r3, #4
 8003426:	d11e      	bne.n	8003466 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2205      	movs	r2, #5
 800342e:	4252      	negs	r2, r2
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2202      	movs	r2, #2
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	23c0      	movs	r3, #192	; 0xc0
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4013      	ands	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0018      	movs	r0, r3
 800344a:	f000 f8cd 	bl	80035e8 <HAL_TIM_IC_CaptureCallback>
 800344e:	e007      	b.n	8003460 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0018      	movs	r0, r3
 8003454:	f000 f8c0 	bl	80035d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f000 f8cc 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2208      	movs	r2, #8
 800346e:	4013      	ands	r3, r2
 8003470:	2b08      	cmp	r3, #8
 8003472:	d124      	bne.n	80034be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2208      	movs	r2, #8
 800347c:	4013      	ands	r3, r2
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11d      	bne.n	80034be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2209      	movs	r2, #9
 8003488:	4252      	negs	r2, r2
 800348a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2204      	movs	r2, #4
 8003490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2203      	movs	r2, #3
 800349a:	4013      	ands	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 f8a1 	bl	80035e8 <HAL_TIM_IC_CaptureCallback>
 80034a6:	e007      	b.n	80034b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 f894 	bl	80035d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 f8a0 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2210      	movs	r2, #16
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d125      	bne.n	8003518 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2210      	movs	r2, #16
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d11e      	bne.n	8003518 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2211      	movs	r2, #17
 80034e0:	4252      	negs	r2, r2
 80034e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2208      	movs	r2, #8
 80034e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	23c0      	movs	r3, #192	; 0xc0
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4013      	ands	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 f874 	bl	80035e8 <HAL_TIM_IC_CaptureCallback>
 8003500:	e007      	b.n	8003512 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f000 f867 	bl	80035d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f873 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2201      	movs	r2, #1
 8003520:	4013      	ands	r3, r2
 8003522:	2b01      	cmp	r3, #1
 8003524:	d10f      	bne.n	8003546 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	4013      	ands	r3, r2
 8003530:	2b01      	cmp	r3, #1
 8003532:	d108      	bne.n	8003546 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2202      	movs	r2, #2
 800353a:	4252      	negs	r2, r2
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	0018      	movs	r0, r3
 8003542:	f7fd fc2d 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	4013      	ands	r3, r2
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d10f      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	4013      	ands	r3, r2
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d108      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2281      	movs	r2, #129	; 0x81
 8003568:	4252      	negs	r2, r2
 800356a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f938 	bl	80037e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	4013      	ands	r3, r2
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d10f      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2240      	movs	r2, #64	; 0x40
 800358a:	4013      	ands	r3, r2
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d108      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2241      	movs	r2, #65	; 0x41
 8003596:	4252      	negs	r2, r2
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0018      	movs	r0, r3
 800359e:	f000 f833 	bl	8003608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2220      	movs	r2, #32
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d10f      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d108      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2221      	movs	r2, #33	; 0x21
 80035c4:	4252      	negs	r2, r2
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 f902 	bl	80037d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b002      	add	sp, #8
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bd80      	pop	{r7, pc}

08003618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a34      	ldr	r2, [pc, #208]	; (80036fc <TIM_Base_SetConfig+0xe4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d008      	beq.n	8003642 <TIM_Base_SetConfig+0x2a>
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	05db      	lsls	r3, r3, #23
 8003636:	429a      	cmp	r2, r3
 8003638:	d003      	beq.n	8003642 <TIM_Base_SetConfig+0x2a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a30      	ldr	r2, [pc, #192]	; (8003700 <TIM_Base_SetConfig+0xe8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2270      	movs	r2, #112	; 0x70
 8003646:	4393      	bics	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a29      	ldr	r2, [pc, #164]	; (80036fc <TIM_Base_SetConfig+0xe4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d018      	beq.n	800368e <TIM_Base_SetConfig+0x76>
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	05db      	lsls	r3, r3, #23
 8003662:	429a      	cmp	r2, r3
 8003664:	d013      	beq.n	800368e <TIM_Base_SetConfig+0x76>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a25      	ldr	r2, [pc, #148]	; (8003700 <TIM_Base_SetConfig+0xe8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00f      	beq.n	800368e <TIM_Base_SetConfig+0x76>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a24      	ldr	r2, [pc, #144]	; (8003704 <TIM_Base_SetConfig+0xec>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00b      	beq.n	800368e <TIM_Base_SetConfig+0x76>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a23      	ldr	r2, [pc, #140]	; (8003708 <TIM_Base_SetConfig+0xf0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <TIM_Base_SetConfig+0x76>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <TIM_Base_SetConfig+0xf4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d003      	beq.n	800368e <TIM_Base_SetConfig+0x76>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a21      	ldr	r2, [pc, #132]	; (8003710 <TIM_Base_SetConfig+0xf8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d108      	bne.n	80036a0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a20      	ldr	r2, [pc, #128]	; (8003714 <TIM_Base_SetConfig+0xfc>)
 8003692:	4013      	ands	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	4393      	bics	r3, r2
 80036a6:	001a      	movs	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <TIM_Base_SetConfig+0xe4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_Base_SetConfig+0xce>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <TIM_Base_SetConfig+0xf0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_Base_SetConfig+0xce>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a0c      	ldr	r2, [pc, #48]	; (800370c <TIM_Base_SetConfig+0xf4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_Base_SetConfig+0xce>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <TIM_Base_SetConfig+0xf8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d103      	bne.n	80036ee <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	615a      	str	r2, [r3, #20]
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b004      	add	sp, #16
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40000400 	.word	0x40000400
 8003704:	40002000 	.word	0x40002000
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	fffffcff 	.word	0xfffffcff

08003718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223c      	movs	r2, #60	; 0x3c
 8003726:	5c9b      	ldrb	r3, [r3, r2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e047      	b.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	223c      	movs	r2, #60	; 0x3c
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	223d      	movs	r2, #61	; 0x3d
 800373c:	2102      	movs	r1, #2
 800373e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2270      	movs	r2, #112	; 0x70
 8003754:	4393      	bics	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00f      	beq.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	05db      	lsls	r3, r3, #23
 800377c:	429a      	cmp	r2, r3
 800377e:	d009      	beq.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a11      	ldr	r2, [pc, #68]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a10      	ldr	r2, [pc, #64]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10c      	bne.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	4393      	bics	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	223d      	movs	r2, #61	; 0x3d
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	223c      	movs	r2, #60	; 0x3c
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b004      	add	sp, #16
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40012c00 	.word	0x40012c00
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40014000 	.word	0x40014000

080037d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e044      	b.n	8003890 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2274      	movs	r2, #116	; 0x74
 8003812:	2100      	movs	r1, #0
 8003814:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f7fd fd3f 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2224      	movs	r2, #36	; 0x24
 8003822:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2101      	movs	r1, #1
 8003830:	438a      	bics	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 fc1c 	bl	8004074 <UART_SetConfig>
 800383c:	0003      	movs	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e024      	b.n	8003890 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f000 fd93 	bl	800437c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	490d      	ldr	r1, [pc, #52]	; (8003898 <HAL_UART_Init+0xa4>)
 8003862:	400a      	ands	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	212a      	movs	r1, #42	; 0x2a
 8003872:	438a      	bics	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2101      	movs	r1, #1
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 fe2b 	bl	80044e4 <UART_CheckIdleState>
 800388e:	0003      	movs	r3, r0
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b002      	add	sp, #8
 8003896:	bd80      	pop	{r7, pc}
 8003898:	ffffb7ff 	.word	0xffffb7ff

0800389c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	1dbb      	adds	r3, r7, #6
 80038aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d000      	beq.n	80038b6 <HAL_UART_Transmit+0x1a>
 80038b4:	e096      	b.n	80039e4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_UART_Transmit+0x28>
 80038bc:	1dbb      	adds	r3, r7, #6
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e08e      	b.n	80039e6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	015b      	lsls	r3, r3, #5
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d109      	bne.n	80038e8 <HAL_UART_Transmit+0x4c>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d105      	bne.n	80038e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2201      	movs	r2, #1
 80038e0:	4013      	ands	r3, r2
 80038e2:	d001      	beq.n	80038e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e07e      	b.n	80039e6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2274      	movs	r2, #116	; 0x74
 80038ec:	5c9b      	ldrb	r3, [r3, r2]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Transmit+0x5a>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e077      	b.n	80039e6 <HAL_UART_Transmit+0x14a>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2274      	movs	r2, #116	; 0x74
 80038fa:	2101      	movs	r1, #1
 80038fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	2100      	movs	r1, #0
 8003904:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2221      	movs	r2, #33	; 0x21
 800390a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390c:	f7fd fe50 	bl	80015b0 <HAL_GetTick>
 8003910:	0003      	movs	r3, r0
 8003912:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1dba      	adds	r2, r7, #6
 8003918:	2150      	movs	r1, #80	; 0x50
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1dba      	adds	r2, r7, #6
 8003922:	2152      	movs	r1, #82	; 0x52
 8003924:	8812      	ldrh	r2, [r2, #0]
 8003926:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	015b      	lsls	r3, r3, #5
 8003930:	429a      	cmp	r2, r3
 8003932:	d108      	bne.n	8003946 <HAL_UART_Transmit+0xaa>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d104      	bne.n	8003946 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	e003      	b.n	800394e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2274      	movs	r2, #116	; 0x74
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003956:	e02d      	b.n	80039b4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	0013      	movs	r3, r2
 8003962:	2200      	movs	r2, #0
 8003964:	2180      	movs	r1, #128	; 0x80
 8003966:	f000 fe07 	bl	8004578 <UART_WaitOnFlagUntilTimeout>
 800396a:	1e03      	subs	r3, r0, #0
 800396c:	d001      	beq.n	8003972 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e039      	b.n	80039e6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	05d2      	lsls	r2, r2, #23
 8003982:	0dd2      	lsrs	r2, r2, #23
 8003984:	b292      	uxth	r2, r2
 8003986:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	3302      	adds	r3, #2
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	e008      	b.n	80039a2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	b292      	uxth	r2, r2
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	3301      	adds	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2252      	movs	r2, #82	; 0x52
 80039a6:	5a9b      	ldrh	r3, [r3, r2]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b299      	uxth	r1, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2252      	movs	r2, #82	; 0x52
 80039b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2252      	movs	r2, #82	; 0x52
 80039b8:	5a9b      	ldrh	r3, [r3, r2]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1cb      	bne.n	8003958 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	0013      	movs	r3, r2
 80039ca:	2200      	movs	r2, #0
 80039cc:	2140      	movs	r1, #64	; 0x40
 80039ce:	f000 fdd3 	bl	8004578 <UART_WaitOnFlagUntilTimeout>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d001      	beq.n	80039da <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e005      	b.n	80039e6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b008      	add	sp, #32
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	1dbb      	adds	r3, r7, #6
 80039fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d159      	bne.n	8003aba <HAL_UART_Transmit_IT+0xca>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_UART_Transmit_IT+0x24>
 8003a0c:	1dbb      	adds	r3, r7, #6
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e051      	b.n	8003abc <HAL_UART_Transmit_IT+0xcc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	015b      	lsls	r3, r3, #5
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d109      	bne.n	8003a38 <HAL_UART_Transmit_IT+0x48>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	d001      	beq.n	8003a38 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e041      	b.n	8003abc <HAL_UART_Transmit_IT+0xcc>
      }
    }

    __HAL_LOCK(huart);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2274      	movs	r2, #116	; 0x74
 8003a3c:	5c9b      	ldrb	r3, [r3, r2]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Transmit_IT+0x56>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e03a      	b.n	8003abc <HAL_UART_Transmit_IT+0xcc>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2274      	movs	r2, #116	; 0x74
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1dba      	adds	r2, r7, #6
 8003a58:	2150      	movs	r1, #80	; 0x50
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1dba      	adds	r2, r7, #6
 8003a62:	2152      	movs	r1, #82	; 0x52
 8003a64:	8812      	ldrh	r2, [r2, #0]
 8003a66:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2280      	movs	r2, #128	; 0x80
 8003a72:	2100      	movs	r1, #0
 8003a74:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2221      	movs	r2, #33	; 0x21
 8003a7a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	015b      	lsls	r3, r3, #5
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d107      	bne.n	8003a98 <HAL_UART_Transmit_IT+0xa8>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <HAL_UART_Transmit_IT+0xa8>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a0c      	ldr	r2, [pc, #48]	; (8003ac4 <HAL_UART_Transmit_IT+0xd4>)
 8003a94:	669a      	str	r2, [r3, #104]	; 0x68
 8003a96:	e002      	b.n	8003a9e <HAL_UART_Transmit_IT+0xae>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <HAL_UART_Transmit_IT+0xd8>)
 8003a9c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2274      	movs	r2, #116	; 0x74
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e000      	b.n	8003abc <HAL_UART_Transmit_IT+0xcc>
  }
  else
  {
    return HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
  }
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	08004aed 	.word	0x08004aed
 8003ac8:	08004a7d 	.word	0x08004a7d

08003acc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	1dbb      	adds	r3, r7, #6
 8003ad8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d13f      	bne.n	8003b62 <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_UART_Receive_IT+0x24>
 8003ae8:	1dbb      	adds	r3, r7, #6
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e037      	b.n	8003b64 <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	015b      	lsls	r3, r3, #5
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d109      	bne.n	8003b14 <HAL_UART_Receive_IT+0x48>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d001      	beq.n	8003b14 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e027      	b.n	8003b64 <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2274      	movs	r2, #116	; 0x74
 8003b18:	5c9b      	ldrb	r3, [r3, r2]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Receive_IT+0x56>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e020      	b.n	8003b64 <HAL_UART_Receive_IT+0x98>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2274      	movs	r2, #116	; 0x74
 8003b26:	2101      	movs	r1, #1
 8003b28:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d008      	beq.n	8003b50 <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	04c9      	lsls	r1, r1, #19
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003b50:	1dbb      	adds	r3, r7, #6
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f000 fd8b 	bl	8004674 <UART_Start_Receive_IT>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	e000      	b.n	8003b64 <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
  }
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b004      	add	sp, #16
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	1dbb      	adds	r3, r7, #6
 8003b78:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d13f      	bne.n	8003c02 <HAL_UART_Receive_DMA+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_UART_Receive_DMA+0x24>
 8003b88:	1dbb      	adds	r3, r7, #6
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e037      	b.n	8003c04 <HAL_UART_Receive_DMA+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	015b      	lsls	r3, r3, #5
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d109      	bne.n	8003bb4 <HAL_UART_Receive_DMA+0x48>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2201      	movs	r2, #1
 8003bac:	4013      	ands	r3, r2
 8003bae:	d001      	beq.n	8003bb4 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e027      	b.n	8003c04 <HAL_UART_Receive_DMA+0x98>
      }
    }

    __HAL_LOCK(huart);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2274      	movs	r2, #116	; 0x74
 8003bb8:	5c9b      	ldrb	r3, [r3, r2]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Receive_DMA+0x56>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e020      	b.n	8003c04 <HAL_UART_Receive_DMA+0x98>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2274      	movs	r2, #116	; 0x74
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d008      	beq.n	8003bf0 <HAL_UART_Receive_DMA+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	04c9      	lsls	r1, r1, #19
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003bf0:	1dbb      	adds	r3, r7, #6
 8003bf2:	881a      	ldrh	r2, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 fdc9 	bl	8004790 <UART_Start_Receive_DMA>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	e000      	b.n	8003c04 <HAL_UART_Receive_DMA+0x98>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b004      	add	sp, #16
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4ab5      	ldr	r2, [pc, #724]	; (8003f04 <HAL_UART_IRQHandler+0x2f8>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d112      	bne.n	8003c60 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2220      	movs	r2, #32
 8003c46:	4013      	ands	r3, r2
 8003c48:	d00a      	beq.n	8003c60 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d100      	bne.n	8003c54 <HAL_UART_IRQHandler+0x48>
 8003c52:	e1d4      	b.n	8003ffe <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	0010      	movs	r0, r2
 8003c5c:	4798      	blx	r3
      }
      return;
 8003c5e:	e1ce      	b.n	8003ffe <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d100      	bne.n	8003c68 <HAL_UART_IRQHandler+0x5c>
 8003c66:	e0d9      	b.n	8003e1c <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d104      	bne.n	8003c7a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	4aa5      	ldr	r2, [pc, #660]	; (8003f08 <HAL_UART_IRQHandler+0x2fc>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	d100      	bne.n	8003c7a <HAL_UART_IRQHandler+0x6e>
 8003c78:	e0d0      	b.n	8003e1c <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d010      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x98>
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2201      	movs	r2, #1
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2280      	movs	r2, #128	; 0x80
 8003c98:	589b      	ldr	r3, [r3, r2]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d00f      	beq.n	8003ccc <HAL_UART_IRQHandler+0xc0>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	589b      	ldr	r3, [r3, r2]
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2204      	movs	r2, #4
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d00f      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xe8>
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	589b      	ldr	r3, [r3, r2]
 8003cea:	2202      	movs	r2, #2
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2208      	movs	r2, #8
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	4013      	ands	r3, r2
 8003d02:	d103      	bne.n	8003d0c <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2201      	movs	r2, #1
 8003d08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d0a:	d00b      	beq.n	8003d24 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2208      	movs	r2, #8
 8003d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2280      	movs	r2, #128	; 0x80
 8003d18:	589b      	ldr	r3, [r3, r2]
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d011      	beq.n	8003d52 <HAL_UART_IRQHandler+0x146>
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	04db      	lsls	r3, r3, #19
 8003d34:	4013      	ands	r3, r2
 8003d36:	d00c      	beq.n	8003d52 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	0112      	lsls	r2, r2, #4
 8003d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	589b      	ldr	r3, [r3, r2]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	589b      	ldr	r3, [r3, r2]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d100      	bne.n	8003d5e <HAL_UART_IRQHandler+0x152>
 8003d5c:	e151      	b.n	8004002 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2220      	movs	r2, #32
 8003d62:	4013      	ands	r3, r2
 8003d64:	d00c      	beq.n	8003d80 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d008      	beq.n	8003d80 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	0010      	movs	r0, r2
 8003d7e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	589b      	ldr	r3, [r3, r2]
 8003d86:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2240      	movs	r2, #64	; 0x40
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d003      	beq.n	8003d9e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2228      	movs	r2, #40	; 0x28
 8003d9a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d9c:	d033      	beq.n	8003e06 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 fd77 	bl	8004894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2240      	movs	r2, #64	; 0x40
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d123      	bne.n	8003dfc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2140      	movs	r1, #64	; 0x40
 8003dc0:	438a      	bics	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a4e      	ldr	r2, [pc, #312]	; (8003f0c <HAL_UART_IRQHandler+0x300>)
 8003dd2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7fd fda9 	bl	8001930 <HAL_DMA_Abort_IT>
 8003dde:	1e03      	subs	r3, r0, #0
 8003de0:	d01a      	beq.n	8003e18 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	0018      	movs	r0, r3
 8003dee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e012      	b.n	8003e18 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 f919 	bl	800402c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfa:	e00d      	b.n	8003e18 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 f914 	bl	800402c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e008      	b.n	8003e18 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f000 f90f 	bl	800402c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2280      	movs	r2, #128	; 0x80
 8003e12:	2100      	movs	r1, #0
 8003e14:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003e16:	e0f4      	b.n	8004002 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	46c0      	nop			; (mov r8, r8)
    return;
 8003e1a:	e0f2      	b.n	8004002 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d000      	beq.n	8003e26 <HAL_UART_IRQHandler+0x21a>
 8003e24:	e0b7      	b.n	8003f96 <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	2210      	movs	r2, #16
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d100      	bne.n	8003e30 <HAL_UART_IRQHandler+0x224>
 8003e2e:	e0b2      	b.n	8003f96 <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2210      	movs	r2, #16
 8003e34:	4013      	ands	r3, r2
 8003e36:	d100      	bne.n	8003e3a <HAL_UART_IRQHandler+0x22e>
 8003e38:	e0ad      	b.n	8003f96 <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2210      	movs	r2, #16
 8003e40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2240      	movs	r2, #64	; 0x40
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d161      	bne.n	8003f14 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	2108      	movs	r1, #8
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d100      	bne.n	8003e68 <HAL_UART_IRQHandler+0x25c>
 8003e66:	e0ce      	b.n	8004006 <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2258      	movs	r2, #88	; 0x58
 8003e6c:	5a9b      	ldrh	r3, [r3, r2]
 8003e6e:	2208      	movs	r2, #8
 8003e70:	18ba      	adds	r2, r7, r2
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d300      	bcc.n	8003e7a <HAL_UART_IRQHandler+0x26e>
 8003e78:	e0c5      	b.n	8004006 <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	18ba      	adds	r2, r7, r2
 8003e80:	215a      	movs	r1, #90	; 0x5a
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d02a      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	491d      	ldr	r1, [pc, #116]	; (8003f10 <HAL_UART_IRQHandler+0x304>)
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	438a      	bics	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2140      	movs	r1, #64	; 0x40
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2110      	movs	r1, #16
 8003ed8:	438a      	bics	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7fd fced 	bl	80018c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2258      	movs	r2, #88	; 0x58
 8003eea:	5a9a      	ldrh	r2, [r3, r2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	215a      	movs	r1, #90	; 0x5a
 8003ef0:	5a5b      	ldrh	r3, [r3, r1]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	0011      	movs	r1, r2
 8003efc:	0018      	movs	r0, r3
 8003efe:	f000 f89d 	bl	800403c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f02:	e080      	b.n	8004006 <HAL_UART_IRQHandler+0x3fa>
 8003f04:	0000080f 	.word	0x0000080f
 8003f08:	04000120 	.word	0x04000120
 8003f0c:	08004a4f 	.word	0x08004a4f
 8003f10:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2258      	movs	r2, #88	; 0x58
 8003f18:	5a99      	ldrh	r1, [r3, r2]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	225a      	movs	r2, #90	; 0x5a
 8003f1e:	5a9b      	ldrh	r3, [r3, r2]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	230a      	movs	r3, #10
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	1a8a      	subs	r2, r1, r2
 8003f28:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	225a      	movs	r2, #90	; 0x5a
 8003f2e:	5a9b      	ldrh	r3, [r3, r2]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d100      	bne.n	8003f38 <HAL_UART_IRQHandler+0x32c>
 8003f36:	e068      	b.n	800400a <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 8003f38:	230a      	movs	r3, #10
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d063      	beq.n	800400a <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4932      	ldr	r1, [pc, #200]	; (8004018 <HAL_UART_IRQHandler+0x40c>)
 8003f4e:	400a      	ands	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	438a      	bics	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2110      	movs	r1, #16
 8003f80:	438a      	bics	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f84:	230a      	movs	r3, #10
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	881a      	ldrh	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0011      	movs	r1, r2
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 f854 	bl	800403c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f94:	e039      	b.n	800400a <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	035b      	lsls	r3, r3, #13
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_UART_IRQHandler+0x3b2>
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	03db      	lsls	r3, r3, #15
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2280      	movs	r2, #128	; 0x80
 8003fb0:	0352      	lsls	r2, r2, #13
 8003fb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 feda 	bl	8004d70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fbc:	e028      	b.n	8004010 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	2280      	movs	r2, #128	; 0x80
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d00d      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01b      	beq.n	800400e <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	0010      	movs	r0, r2
 8003fde:	4798      	blx	r3
    }
    return;
 8003fe0:	e015      	b.n	800400e <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2240      	movs	r2, #64	; 0x40
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d012      	beq.n	8004010 <HAL_UART_IRQHandler+0x404>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2240      	movs	r2, #64	; 0x40
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 fdb5 	bl	8004b64 <UART_EndTransmit_IT>
    return;
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	e008      	b.n	8004010 <HAL_UART_IRQHandler+0x404>
      return;
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	e006      	b.n	8004010 <HAL_UART_IRQHandler+0x404>
    return;
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	e004      	b.n	8004010 <HAL_UART_IRQHandler+0x404>
      return;
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	e002      	b.n	8004010 <HAL_UART_IRQHandler+0x404>
      return;
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	e000      	b.n	8004010 <HAL_UART_IRQHandler+0x404>
    return;
 800400e:	46c0      	nop			; (mov r8, r8)
  }

}
 8004010:	46bd      	mov	sp, r7
 8004012:	b008      	add	sp, #32
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	fffffedf 	.word	0xfffffedf

0800401c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b002      	add	sp, #8
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b002      	add	sp, #8
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	000a      	movs	r2, r1
 8004046:	1cbb      	adds	r3, r7, #2
 8004048:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004064:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b004      	add	sp, #16
 8004072:	bd80      	pop	{r7, pc}

08004074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800407c:	231e      	movs	r3, #30
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4aac      	ldr	r2, [pc, #688]	; (8004354 <UART_SetConfig+0x2e0>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	0019      	movs	r1, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	4aa7      	ldr	r2, [pc, #668]	; (8004358 <UART_SetConfig+0x2e4>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	0019      	movs	r1, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a9e      	ldr	r2, [pc, #632]	; (800435c <UART_SetConfig+0x2e8>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a9a      	ldr	r2, [pc, #616]	; (8004360 <UART_SetConfig+0x2ec>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d125      	bne.n	8004146 <UART_SetConfig+0xd2>
 80040fa:	4b9a      	ldr	r3, [pc, #616]	; (8004364 <UART_SetConfig+0x2f0>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	2203      	movs	r2, #3
 8004100:	4013      	ands	r3, r2
 8004102:	2b01      	cmp	r3, #1
 8004104:	d00f      	beq.n	8004126 <UART_SetConfig+0xb2>
 8004106:	d304      	bcc.n	8004112 <UART_SetConfig+0x9e>
 8004108:	2b02      	cmp	r3, #2
 800410a:	d011      	beq.n	8004130 <UART_SetConfig+0xbc>
 800410c:	2b03      	cmp	r3, #3
 800410e:	d005      	beq.n	800411c <UART_SetConfig+0xa8>
 8004110:	e013      	b.n	800413a <UART_SetConfig+0xc6>
 8004112:	231f      	movs	r3, #31
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e064      	b.n	80041e6 <UART_SetConfig+0x172>
 800411c:	231f      	movs	r3, #31
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2202      	movs	r2, #2
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e05f      	b.n	80041e6 <UART_SetConfig+0x172>
 8004126:	231f      	movs	r3, #31
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	2204      	movs	r2, #4
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e05a      	b.n	80041e6 <UART_SetConfig+0x172>
 8004130:	231f      	movs	r3, #31
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	2208      	movs	r2, #8
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e055      	b.n	80041e6 <UART_SetConfig+0x172>
 800413a:	231f      	movs	r3, #31
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2210      	movs	r2, #16
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	e04f      	b.n	80041e6 <UART_SetConfig+0x172>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a87      	ldr	r2, [pc, #540]	; (8004368 <UART_SetConfig+0x2f4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d132      	bne.n	80041b6 <UART_SetConfig+0x142>
 8004150:	4b84      	ldr	r3, [pc, #528]	; (8004364 <UART_SetConfig+0x2f0>)
 8004152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004154:	23c0      	movs	r3, #192	; 0xc0
 8004156:	029b      	lsls	r3, r3, #10
 8004158:	4013      	ands	r3, r2
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	0252      	lsls	r2, r2, #9
 800415e:	4293      	cmp	r3, r2
 8004160:	d019      	beq.n	8004196 <UART_SetConfig+0x122>
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	0252      	lsls	r2, r2, #9
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <UART_SetConfig+0xfc>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <UART_SetConfig+0x10e>
 800416e:	e01c      	b.n	80041aa <UART_SetConfig+0x136>
 8004170:	2280      	movs	r2, #128	; 0x80
 8004172:	0292      	lsls	r2, r2, #10
 8004174:	4293      	cmp	r3, r2
 8004176:	d013      	beq.n	80041a0 <UART_SetConfig+0x12c>
 8004178:	22c0      	movs	r2, #192	; 0xc0
 800417a:	0292      	lsls	r2, r2, #10
 800417c:	4293      	cmp	r3, r2
 800417e:	d005      	beq.n	800418c <UART_SetConfig+0x118>
 8004180:	e013      	b.n	80041aa <UART_SetConfig+0x136>
 8004182:	231f      	movs	r3, #31
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	e02c      	b.n	80041e6 <UART_SetConfig+0x172>
 800418c:	231f      	movs	r3, #31
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	2202      	movs	r2, #2
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e027      	b.n	80041e6 <UART_SetConfig+0x172>
 8004196:	231f      	movs	r3, #31
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	2204      	movs	r2, #4
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e022      	b.n	80041e6 <UART_SetConfig+0x172>
 80041a0:	231f      	movs	r3, #31
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2208      	movs	r2, #8
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e01d      	b.n	80041e6 <UART_SetConfig+0x172>
 80041aa:	231f      	movs	r3, #31
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2210      	movs	r2, #16
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	e017      	b.n	80041e6 <UART_SetConfig+0x172>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a6c      	ldr	r2, [pc, #432]	; (800436c <UART_SetConfig+0x2f8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d104      	bne.n	80041ca <UART_SetConfig+0x156>
 80041c0:	231f      	movs	r3, #31
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	e00d      	b.n	80041e6 <UART_SetConfig+0x172>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a68      	ldr	r2, [pc, #416]	; (8004370 <UART_SetConfig+0x2fc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d104      	bne.n	80041de <UART_SetConfig+0x16a>
 80041d4:	231f      	movs	r3, #31
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e003      	b.n	80041e6 <UART_SetConfig+0x172>
 80041de:	231f      	movs	r3, #31
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	2210      	movs	r2, #16
 80041e4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d15c      	bne.n	80042ac <UART_SetConfig+0x238>
  {
    switch (clocksource)
 80041f2:	231f      	movs	r3, #31
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d00d      	beq.n	8004218 <UART_SetConfig+0x1a4>
 80041fc:	dc02      	bgt.n	8004204 <UART_SetConfig+0x190>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <UART_SetConfig+0x19a>
 8004202:	e015      	b.n	8004230 <UART_SetConfig+0x1bc>
 8004204:	2b04      	cmp	r3, #4
 8004206:	d00a      	beq.n	800421e <UART_SetConfig+0x1aa>
 8004208:	2b08      	cmp	r3, #8
 800420a:	d00d      	beq.n	8004228 <UART_SetConfig+0x1b4>
 800420c:	e010      	b.n	8004230 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420e:	f7fe feeb 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 8004212:	0003      	movs	r3, r0
 8004214:	61bb      	str	r3, [r7, #24]
        break;
 8004216:	e012      	b.n	800423e <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004218:	4b56      	ldr	r3, [pc, #344]	; (8004374 <UART_SetConfig+0x300>)
 800421a:	61bb      	str	r3, [r7, #24]
        break;
 800421c:	e00f      	b.n	800423e <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421e:	f7fe fe5b 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8004222:	0003      	movs	r3, r0
 8004224:	61bb      	str	r3, [r7, #24]
        break;
 8004226:	e00a      	b.n	800423e <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	61bb      	str	r3, [r7, #24]
        break;
 800422e:	e006      	b.n	800423e <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004234:	231e      	movs	r3, #30
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
        break;
 800423c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d100      	bne.n	8004246 <UART_SetConfig+0x1d2>
 8004244:	e079      	b.n	800433a <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	005a      	lsls	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	18d2      	adds	r2, r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	0019      	movs	r1, r3
 8004258:	0010      	movs	r0, r2
 800425a:	f7fb ff67 	bl	800012c <__udivsi3>
 800425e:	0003      	movs	r3, r0
 8004260:	b29b      	uxth	r3, r3
 8004262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b0f      	cmp	r3, #15
 8004268:	d91b      	bls.n	80042a2 <UART_SetConfig+0x22e>
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4a42      	ldr	r2, [pc, #264]	; (8004378 <UART_SetConfig+0x304>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d817      	bhi.n	80042a2 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	b29a      	uxth	r2, r3
 8004276:	200e      	movs	r0, #14
 8004278:	183b      	adds	r3, r7, r0
 800427a:	210f      	movs	r1, #15
 800427c:	438a      	bics	r2, r1
 800427e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	b29b      	uxth	r3, r3
 8004286:	2207      	movs	r2, #7
 8004288:	4013      	ands	r3, r2
 800428a:	b299      	uxth	r1, r3
 800428c:	183b      	adds	r3, r7, r0
 800428e:	183a      	adds	r2, r7, r0
 8004290:	8812      	ldrh	r2, [r2, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	183a      	adds	r2, r7, r0
 800429c:	8812      	ldrh	r2, [r2, #0]
 800429e:	60da      	str	r2, [r3, #12]
 80042a0:	e04b      	b.n	800433a <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 80042a2:	231e      	movs	r3, #30
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e046      	b.n	800433a <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042ac:	231f      	movs	r3, #31
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d00d      	beq.n	80042d2 <UART_SetConfig+0x25e>
 80042b6:	dc02      	bgt.n	80042be <UART_SetConfig+0x24a>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <UART_SetConfig+0x254>
 80042bc:	e015      	b.n	80042ea <UART_SetConfig+0x276>
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00a      	beq.n	80042d8 <UART_SetConfig+0x264>
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d00d      	beq.n	80042e2 <UART_SetConfig+0x26e>
 80042c6:	e010      	b.n	80042ea <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7fe fe8e 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 80042cc:	0003      	movs	r3, r0
 80042ce:	61bb      	str	r3, [r7, #24]
        break;
 80042d0:	e012      	b.n	80042f8 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d2:	4b28      	ldr	r3, [pc, #160]	; (8004374 <UART_SetConfig+0x300>)
 80042d4:	61bb      	str	r3, [r7, #24]
        break;
 80042d6:	e00f      	b.n	80042f8 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d8:	f7fe fdfe 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 80042dc:	0003      	movs	r3, r0
 80042de:	61bb      	str	r3, [r7, #24]
        break;
 80042e0:	e00a      	b.n	80042f8 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	61bb      	str	r3, [r7, #24]
        break;
 80042e8:	e006      	b.n	80042f8 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ee:	231e      	movs	r3, #30
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	2201      	movs	r2, #1
 80042f4:	701a      	strb	r2, [r3, #0]
        break;
 80042f6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01d      	beq.n	800433a <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	085a      	lsrs	r2, r3, #1
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	18d2      	adds	r2, r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	0019      	movs	r1, r3
 800430e:	0010      	movs	r0, r2
 8004310:	f7fb ff0c 	bl	800012c <__udivsi3>
 8004314:	0003      	movs	r3, r0
 8004316:	b29b      	uxth	r3, r3
 8004318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b0f      	cmp	r3, #15
 800431e:	d908      	bls.n	8004332 <UART_SetConfig+0x2be>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <UART_SetConfig+0x304>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d804      	bhi.n	8004332 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e003      	b.n	800433a <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8004332:	231e      	movs	r3, #30
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004346:	231e      	movs	r3, #30
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	781b      	ldrb	r3, [r3, #0]
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	b008      	add	sp, #32
 8004352:	bd80      	pop	{r7, pc}
 8004354:	efff69f3 	.word	0xefff69f3
 8004358:	ffffcfff 	.word	0xffffcfff
 800435c:	fffff4ff 	.word	0xfffff4ff
 8004360:	40013800 	.word	0x40013800
 8004364:	40021000 	.word	0x40021000
 8004368:	40004400 	.word	0x40004400
 800436c:	40004800 	.word	0x40004800
 8004370:	40004c00 	.word	0x40004c00
 8004374:	007a1200 	.word	0x007a1200
 8004378:	0000ffff 	.word	0x0000ffff

0800437c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2201      	movs	r2, #1
 800438a:	4013      	ands	r3, r2
 800438c:	d00b      	beq.n	80043a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a4a      	ldr	r2, [pc, #296]	; (80044c0 <UART_AdvFeatureConfig+0x144>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	2202      	movs	r2, #2
 80043ac:	4013      	ands	r3, r2
 80043ae:	d00b      	beq.n	80043c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4a43      	ldr	r2, [pc, #268]	; (80044c4 <UART_AdvFeatureConfig+0x148>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	0019      	movs	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	2204      	movs	r2, #4
 80043ce:	4013      	ands	r3, r2
 80043d0:	d00b      	beq.n	80043ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4a3b      	ldr	r2, [pc, #236]	; (80044c8 <UART_AdvFeatureConfig+0x14c>)
 80043da:	4013      	ands	r3, r2
 80043dc:	0019      	movs	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2208      	movs	r2, #8
 80043f0:	4013      	ands	r3, r2
 80043f2:	d00b      	beq.n	800440c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4a34      	ldr	r2, [pc, #208]	; (80044cc <UART_AdvFeatureConfig+0x150>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	0019      	movs	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2210      	movs	r2, #16
 8004412:	4013      	ands	r3, r2
 8004414:	d00b      	beq.n	800442e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a2c      	ldr	r2, [pc, #176]	; (80044d0 <UART_AdvFeatureConfig+0x154>)
 800441e:	4013      	ands	r3, r2
 8004420:	0019      	movs	r1, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2220      	movs	r2, #32
 8004434:	4013      	ands	r3, r2
 8004436:	d00b      	beq.n	8004450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	4a25      	ldr	r2, [pc, #148]	; (80044d4 <UART_AdvFeatureConfig+0x158>)
 8004440:	4013      	ands	r3, r2
 8004442:	0019      	movs	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	2240      	movs	r2, #64	; 0x40
 8004456:	4013      	ands	r3, r2
 8004458:	d01d      	beq.n	8004496 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <UART_AdvFeatureConfig+0x15c>)
 8004462:	4013      	ands	r3, r2
 8004464:	0019      	movs	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	035b      	lsls	r3, r3, #13
 800447a:	429a      	cmp	r2, r3
 800447c:	d10b      	bne.n	8004496 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <UART_AdvFeatureConfig+0x160>)
 8004486:	4013      	ands	r3, r2
 8004488:	0019      	movs	r1, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	2280      	movs	r2, #128	; 0x80
 800449c:	4013      	ands	r3, r2
 800449e:	d00b      	beq.n	80044b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <UART_AdvFeatureConfig+0x164>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	0019      	movs	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	fffdffff 	.word	0xfffdffff
 80044c4:	fffeffff 	.word	0xfffeffff
 80044c8:	fffbffff 	.word	0xfffbffff
 80044cc:	ffff7fff 	.word	0xffff7fff
 80044d0:	ffffefff 	.word	0xffffefff
 80044d4:	ffffdfff 	.word	0xffffdfff
 80044d8:	ffefffff 	.word	0xffefffff
 80044dc:	ff9fffff 	.word	0xff9fffff
 80044e0:	fff7ffff 	.word	0xfff7ffff

080044e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	2100      	movs	r1, #0
 80044f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f4:	f7fd f85c 	bl	80015b0 <HAL_GetTick>
 80044f8:	0003      	movs	r3, r0
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2208      	movs	r2, #8
 8004504:	4013      	ands	r3, r2
 8004506:	2b08      	cmp	r3, #8
 8004508:	d10d      	bne.n	8004526 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	0399      	lsls	r1, r3, #14
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4b18      	ldr	r3, [pc, #96]	; (8004574 <UART_CheckIdleState+0x90>)
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	0013      	movs	r3, r2
 8004518:	2200      	movs	r2, #0
 800451a:	f000 f82d 	bl	8004578 <UART_WaitOnFlagUntilTimeout>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d001      	beq.n	8004526 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e022      	b.n	800456c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2204      	movs	r2, #4
 800452e:	4013      	ands	r3, r2
 8004530:	2b04      	cmp	r3, #4
 8004532:	d10d      	bne.n	8004550 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	03d9      	lsls	r1, r3, #15
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <UART_CheckIdleState+0x90>)
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	0013      	movs	r3, r2
 8004542:	2200      	movs	r2, #0
 8004544:	f000 f818 	bl	8004578 <UART_WaitOnFlagUntilTimeout>
 8004548:	1e03      	subs	r3, r0, #0
 800454a:	d001      	beq.n	8004550 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e00d      	b.n	800456c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2274      	movs	r2, #116	; 0x74
 8004566:	2100      	movs	r1, #0
 8004568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	0018      	movs	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	b004      	add	sp, #16
 8004572:	bd80      	pop	{r7, pc}
 8004574:	01ffffff 	.word	0x01ffffff

08004578 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	1dfb      	adds	r3, r7, #7
 8004586:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004588:	e05e      	b.n	8004648 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	3301      	adds	r3, #1
 800458e:	d05b      	beq.n	8004648 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004590:	f7fd f80e 	bl	80015b0 <HAL_GetTick>
 8004594:	0002      	movs	r2, r0
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	429a      	cmp	r2, r3
 800459e:	d302      	bcc.n	80045a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d11b      	bne.n	80045de <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	492f      	ldr	r1, [pc, #188]	; (8004670 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80045b2:	400a      	ands	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	438a      	bics	r2, r1
 80045c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2274      	movs	r2, #116	; 0x74
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e044      	b.n	8004668 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2204      	movs	r2, #4
 80045e6:	4013      	ands	r3, r2
 80045e8:	d02e      	beq.n	8004648 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	401a      	ands	r2, r3
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d124      	bne.n	8004648 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2280      	movs	r2, #128	; 0x80
 8004604:	0112      	lsls	r2, r2, #4
 8004606:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4917      	ldr	r1, [pc, #92]	; (8004670 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004614:	400a      	ands	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2101      	movs	r1, #1
 8004624:	438a      	bics	r2, r1
 8004626:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2280      	movs	r2, #128	; 0x80
 8004638:	2120      	movs	r1, #32
 800463a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2274      	movs	r2, #116	; 0x74
 8004640:	2100      	movs	r1, #0
 8004642:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e00f      	b.n	8004668 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4013      	ands	r3, r2
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	425a      	negs	r2, r3
 8004658:	4153      	adcs	r3, r2
 800465a:	b2db      	uxtb	r3, r3
 800465c:	001a      	movs	r2, r3
 800465e:	1dfb      	adds	r3, r7, #7
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d091      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b004      	add	sp, #16
 800466e:	bd80      	pop	{r7, pc}
 8004670:	fffffe5f 	.word	0xfffffe5f

08004674 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	1dbb      	adds	r3, r7, #6
 8004680:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1dba      	adds	r2, r7, #6
 800468c:	2158      	movs	r1, #88	; 0x58
 800468e:	8812      	ldrh	r2, [r2, #0]
 8004690:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1dba      	adds	r2, r7, #6
 8004696:	215a      	movs	r1, #90	; 0x5a
 8004698:	8812      	ldrh	r2, [r2, #0]
 800469a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	015b      	lsls	r3, r3, #5
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d10d      	bne.n	80046ca <UART_Start_Receive_IT+0x56>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d104      	bne.n	80046c0 <UART_Start_Receive_IT+0x4c>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	225c      	movs	r2, #92	; 0x5c
 80046ba:	4932      	ldr	r1, [pc, #200]	; (8004784 <UART_Start_Receive_IT+0x110>)
 80046bc:	5299      	strh	r1, [r3, r2]
 80046be:	e02e      	b.n	800471e <UART_Start_Receive_IT+0xaa>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	225c      	movs	r2, #92	; 0x5c
 80046c4:	21ff      	movs	r1, #255	; 0xff
 80046c6:	5299      	strh	r1, [r3, r2]
 80046c8:	e029      	b.n	800471e <UART_Start_Receive_IT+0xaa>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <UART_Start_Receive_IT+0x7a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <UART_Start_Receive_IT+0x70>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	225c      	movs	r2, #92	; 0x5c
 80046de:	21ff      	movs	r1, #255	; 0xff
 80046e0:	5299      	strh	r1, [r3, r2]
 80046e2:	e01c      	b.n	800471e <UART_Start_Receive_IT+0xaa>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	225c      	movs	r2, #92	; 0x5c
 80046e8:	217f      	movs	r1, #127	; 0x7f
 80046ea:	5299      	strh	r1, [r3, r2]
 80046ec:	e017      	b.n	800471e <UART_Start_Receive_IT+0xaa>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	055b      	lsls	r3, r3, #21
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10d      	bne.n	8004716 <UART_Start_Receive_IT+0xa2>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <UART_Start_Receive_IT+0x98>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	225c      	movs	r2, #92	; 0x5c
 8004706:	217f      	movs	r1, #127	; 0x7f
 8004708:	5299      	strh	r1, [r3, r2]
 800470a:	e008      	b.n	800471e <UART_Start_Receive_IT+0xaa>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	225c      	movs	r2, #92	; 0x5c
 8004710:	213f      	movs	r1, #63	; 0x3f
 8004712:	5299      	strh	r1, [r3, r2]
 8004714:	e003      	b.n	800471e <UART_Start_Receive_IT+0xaa>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	225c      	movs	r2, #92	; 0x5c
 800471a:	2100      	movs	r1, #0
 800471c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2280      	movs	r2, #128	; 0x80
 8004722:	2100      	movs	r1, #0
 8004724:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2222      	movs	r2, #34	; 0x22
 800472a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2101      	movs	r1, #1
 8004738:	430a      	orrs	r2, r1
 800473a:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	015b      	lsls	r3, r3, #5
 8004744:	429a      	cmp	r2, r3
 8004746:	d107      	bne.n	8004758 <UART_Start_Receive_IT+0xe4>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a0d      	ldr	r2, [pc, #52]	; (8004788 <UART_Start_Receive_IT+0x114>)
 8004754:	665a      	str	r2, [r3, #100]	; 0x64
 8004756:	e002      	b.n	800475e <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a0c      	ldr	r2, [pc, #48]	; (800478c <UART_Start_Receive_IT+0x118>)
 800475c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2274      	movs	r2, #116	; 0x74
 8004762:	2100      	movs	r1, #0
 8004764:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2190      	movs	r1, #144	; 0x90
 8004772:	0049      	lsls	r1, r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b004      	add	sp, #16
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	000001ff 	.word	0x000001ff
 8004788:	08004c85 	.word	0x08004c85
 800478c:	08004b99 	.word	0x08004b99

08004790 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	1dbb      	adds	r3, r7, #6
 800479c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1dba      	adds	r2, r7, #6
 80047a8:	2158      	movs	r1, #88	; 0x58
 80047aa:	8812      	ldrh	r2, [r2, #0]
 80047ac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	2100      	movs	r1, #0
 80047b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2222      	movs	r2, #34	; 0x22
 80047ba:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d02b      	beq.n	800481c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	4a25      	ldr	r2, [pc, #148]	; (8004860 <UART_Start_Receive_DMA+0xd0>)
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	4a24      	ldr	r2, [pc, #144]	; (8004864 <UART_Start_Receive_DMA+0xd4>)
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a23      	ldr	r2, [pc, #140]	; (8004868 <UART_Start_Receive_DMA+0xd8>)
 80047da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e0:	2200      	movs	r2, #0
 80047e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3324      	adds	r3, #36	; 0x24
 80047ee:	0019      	movs	r1, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	001a      	movs	r2, r3
 80047f6:	1dbb      	adds	r3, r7, #6
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	f7fc fffb 	bl	80017f4 <HAL_DMA_Start_IT>
 80047fe:	1e03      	subs	r3, r0, #0
 8004800:	d00c      	beq.n	800481c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2280      	movs	r2, #128	; 0x80
 8004806:	2110      	movs	r1, #16
 8004808:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2274      	movs	r2, #116	; 0x74
 800480e:	2100      	movs	r1, #0
 8004810:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e01d      	b.n	8004858 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2274      	movs	r2, #116	; 0x74
 8004820:	2100      	movs	r1, #0
 8004822:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2180      	movs	r1, #128	; 0x80
 8004830:	0049      	lsls	r1, r1, #1
 8004832:	430a      	orrs	r2, r1
 8004834:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2101      	movs	r1, #1
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2140      	movs	r1, #64	; 0x40
 8004852:	430a      	orrs	r2, r1
 8004854:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b004      	add	sp, #16
 800485e:	bd80      	pop	{r7, pc}
 8004860:	080048f5 	.word	0x080048f5
 8004864:	08004991 	.word	0x08004991
 8004868:	080049cd 	.word	0x080049cd

0800486c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	21c0      	movs	r1, #192	; 0xc0
 8004880:	438a      	bics	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	679a      	str	r2, [r3, #120]	; 0x78
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b002      	add	sp, #8
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4912      	ldr	r1, [pc, #72]	; (80048f0 <UART_EndRxTransfer+0x5c>)
 80048a8:	400a      	ands	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2101      	movs	r1, #1
 80048b8:	438a      	bics	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2110      	movs	r1, #16
 80048d0:	438a      	bics	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b002      	add	sp, #8
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	fffffedf 	.word	0xfffffedf

080048f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b20      	cmp	r3, #32
 8004908:	d02a      	beq.n	8004960 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	225a      	movs	r2, #90	; 0x5a
 800490e:	2100      	movs	r1, #0
 8004910:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	491b      	ldr	r1, [pc, #108]	; (800498c <UART_DMAReceiveCplt+0x98>)
 800491e:	400a      	ands	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2101      	movs	r1, #1
 800492e:	438a      	bics	r2, r1
 8004930:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2140      	movs	r1, #64	; 0x40
 800493e:	438a      	bics	r2, r1
 8004940:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2110      	movs	r1, #16
 800495c:	438a      	bics	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004964:	2b01      	cmp	r3, #1
 8004966:	d108      	bne.n	800497a <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2258      	movs	r2, #88	; 0x58
 800496c:	5a9a      	ldrh	r2, [r3, r2]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f7ff fb62 	bl	800403c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004978:	e003      	b.n	8004982 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	0018      	movs	r0, r3
 800497e:	f7fc f811 	bl	80009a4 <HAL_UART_RxCpltCallback>
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	46bd      	mov	sp, r7
 8004986:	b004      	add	sp, #16
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	fffffeff 	.word	0xfffffeff

08004990 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10a      	bne.n	80049bc <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2258      	movs	r2, #88	; 0x58
 80049aa:	5a9b      	ldrh	r3, [r3, r2]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	0011      	movs	r1, r2
 80049b4:	0018      	movs	r0, r3
 80049b6:	f7ff fb41 	bl	800403c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049ba:	e003      	b.n	80049c4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	0018      	movs	r0, r3
 80049c0:	f7ff fb2c 	bl	800401c <HAL_UART_RxHalfCpltCallback>
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b004      	add	sp, #16
 80049ca:	bd80      	pop	{r7, pc}

080049cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2280      	movs	r2, #128	; 0x80
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d10a      	bne.n	8004a0a <UART_DMAError+0x3e>
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b21      	cmp	r3, #33	; 0x21
 80049f8:	d107      	bne.n	8004a0a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2252      	movs	r2, #82	; 0x52
 80049fe:	2100      	movs	r1, #0
 8004a00:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7ff ff31 	bl	800486c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2240      	movs	r2, #64	; 0x40
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b40      	cmp	r3, #64	; 0x40
 8004a16:	d10a      	bne.n	8004a2e <UART_DMAError+0x62>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b22      	cmp	r3, #34	; 0x22
 8004a1c:	d107      	bne.n	8004a2e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	225a      	movs	r2, #90	; 0x5a
 8004a22:	2100      	movs	r1, #0
 8004a24:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7ff ff33 	bl	8004894 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	589b      	ldr	r3, [r3, r2]
 8004a34:	2210      	movs	r2, #16
 8004a36:	431a      	orrs	r2, r3
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7ff faf3 	bl	800402c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b006      	add	sp, #24
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	225a      	movs	r2, #90	; 0x5a
 8004a60:	2100      	movs	r1, #0
 8004a62:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2252      	movs	r2, #82	; 0x52
 8004a68:	2100      	movs	r1, #0
 8004a6a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f7ff fadc 	bl	800402c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b004      	add	sp, #16
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a88:	2b21      	cmp	r3, #33	; 0x21
 8004a8a:	d12b      	bne.n	8004ae4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2252      	movs	r2, #82	; 0x52
 8004a90:	5a9b      	ldrh	r3, [r3, r2]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d110      	bne.n	8004aba <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	438a      	bics	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2140      	movs	r1, #64	; 0x40
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ab8:	e014      	b.n	8004ae4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	781a      	ldrb	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2252      	movs	r2, #82	; 0x52
 8004ad6:	5a9b      	ldrh	r3, [r3, r2]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b299      	uxth	r1, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2252      	movs	r2, #82	; 0x52
 8004ae2:	5299      	strh	r1, [r3, r2]
}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b002      	add	sp, #8
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af8:	2b21      	cmp	r3, #33	; 0x21
 8004afa:	d12f      	bne.n	8004b5c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2252      	movs	r2, #82	; 0x52
 8004b00:	5a9b      	ldrh	r3, [r3, r2]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d110      	bne.n	8004b2a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	438a      	bics	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2140      	movs	r1, #64	; 0x40
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004b28:	e018      	b.n	8004b5c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	881a      	ldrh	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	05d2      	lsls	r2, r2, #23
 8004b3a:	0dd2      	lsrs	r2, r2, #23
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b44:	1c9a      	adds	r2, r3, #2
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2252      	movs	r2, #82	; 0x52
 8004b4e:	5a9b      	ldrh	r3, [r3, r2]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b299      	uxth	r1, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2252      	movs	r2, #82	; 0x52
 8004b5a:	5299      	strh	r1, [r3, r2]
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b004      	add	sp, #16
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2140      	movs	r1, #64	; 0x40
 8004b78:	438a      	bics	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fb ff5a 	bl	8000a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ba0:	230e      	movs	r3, #14
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	215c      	movs	r1, #92	; 0x5c
 8004ba8:	5a52      	ldrh	r2, [r2, r1]
 8004baa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb0:	2b22      	cmp	r3, #34	; 0x22
 8004bb2:	d158      	bne.n	8004c66 <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	210c      	movs	r1, #12
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004bbe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bc0:	187b      	adds	r3, r7, r1
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	230e      	movs	r3, #14
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b2d9      	uxtb	r1, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	400a      	ands	r2, r1
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	225a      	movs	r2, #90	; 0x5a
 8004be6:	5a9b      	ldrh	r3, [r3, r2]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b299      	uxth	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	225a      	movs	r2, #90	; 0x5a
 8004bf2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	225a      	movs	r2, #90	; 0x5a
 8004bf8:	5a9b      	ldrh	r3, [r3, r2]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d13a      	bne.n	8004c76 <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	491d      	ldr	r1, [pc, #116]	; (8004c80 <UART_RxISR_8BIT+0xe8>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	438a      	bics	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d110      	bne.n	8004c56 <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2110      	movs	r1, #16
 8004c40:	438a      	bics	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2258      	movs	r2, #88	; 0x58
 8004c48:	5a9a      	ldrh	r2, [r3, r2]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0011      	movs	r1, r2
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7ff f9f4 	bl	800403c <HAL_UARTEx_RxEventCallback>
 8004c54:	e003      	b.n	8004c5e <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7fb fea3 	bl	80009a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c64:	e007      	b.n	8004c76 <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699a      	ldr	r2, [r3, #24]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2108      	movs	r1, #8
 8004c72:	430a      	orrs	r2, r1
 8004c74:	619a      	str	r2, [r3, #24]
}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b004      	add	sp, #16
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	fffffedf 	.word	0xfffffedf

08004c84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c8c:	230e      	movs	r3, #14
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	215c      	movs	r1, #92	; 0x5c
 8004c94:	5a52      	ldrh	r2, [r2, r1]
 8004c96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9c:	2b22      	cmp	r3, #34	; 0x22
 8004c9e:	d158      	bne.n	8004d52 <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	210c      	movs	r1, #12
 8004ca6:	187b      	adds	r3, r7, r1
 8004ca8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004caa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004cb2:	187b      	adds	r3, r7, r1
 8004cb4:	220e      	movs	r2, #14
 8004cb6:	18ba      	adds	r2, r7, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	8812      	ldrh	r2, [r2, #0]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	1c9a      	adds	r2, r3, #2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	225a      	movs	r2, #90	; 0x5a
 8004cd2:	5a9b      	ldrh	r3, [r3, r2]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b299      	uxth	r1, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	225a      	movs	r2, #90	; 0x5a
 8004cde:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	225a      	movs	r2, #90	; 0x5a
 8004ce4:	5a9b      	ldrh	r3, [r3, r2]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d13a      	bne.n	8004d62 <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	491d      	ldr	r1, [pc, #116]	; (8004d6c <UART_RxISR_16BIT+0xe8>)
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2101      	movs	r1, #1
 8004d08:	438a      	bics	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d110      	bne.n	8004d42 <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2258      	movs	r2, #88	; 0x58
 8004d34:	5a9a      	ldrh	r2, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	0011      	movs	r1, r2
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7ff f97e 	bl	800403c <HAL_UARTEx_RxEventCallback>
 8004d40:	e003      	b.n	8004d4a <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f7fb fe2d 	bl	80009a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d50:	e007      	b.n	8004d62 <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699a      	ldr	r2, [r3, #24]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2108      	movs	r1, #8
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	619a      	str	r2, [r3, #24]
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	fffffedf 	.word	0xfffffedf

08004d70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b002      	add	sp, #8
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	0002      	movs	r2, r0
 8004d88:	1dbb      	adds	r3, r7, #6
 8004d8a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d90:	1dbb      	adds	r3, r7, #6
 8004d92:	2200      	movs	r2, #0
 8004d94:	5e9b      	ldrsh	r3, [r3, r2]
 8004d96:	2b84      	cmp	r3, #132	; 0x84
 8004d98:	d006      	beq.n	8004da8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004d9a:	1dbb      	adds	r3, r7, #6
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	5e9a      	ldrsh	r2, [r3, r2]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	18d3      	adds	r3, r2, r3
 8004da4:	3303      	adds	r3, #3
 8004da6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004da8:	68fb      	ldr	r3, [r7, #12]
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b004      	add	sp, #16
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004db6:	f000 faa1 	bl	80052fc <vTaskStartScheduler>
  
  return osOK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc4:	b089      	sub	sp, #36	; 0x24
 8004dc6:	af04      	add	r7, sp, #16
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <osThreadCreate+0x54>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01c      	beq.n	8004e16 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685c      	ldr	r4, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681d      	ldr	r5, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691e      	ldr	r6, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2208      	movs	r2, #8
 8004dec:	5e9b      	ldrsh	r3, [r3, r2]
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7ff ffc6 	bl	8004d80 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695a      	ldr	r2, [r3, #20]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	9302      	str	r3, [sp, #8]
 8004e00:	9201      	str	r2, [sp, #4]
 8004e02:	9000      	str	r0, [sp, #0]
 8004e04:	000b      	movs	r3, r1
 8004e06:	0032      	movs	r2, r6
 8004e08:	0029      	movs	r1, r5
 8004e0a:	0020      	movs	r0, r4
 8004e0c:	f000 f8e3 	bl	8004fd6 <xTaskCreateStatic>
 8004e10:	0003      	movs	r3, r0
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e01d      	b.n	8004e52 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685c      	ldr	r4, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e22:	b29e      	uxth	r6, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2208      	movs	r2, #8
 8004e28:	5e9b      	ldrsh	r3, [r3, r2]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f7ff ffa8 	bl	8004d80 <makeFreeRtosPriority>
 8004e30:	0001      	movs	r1, r0
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	230c      	movs	r3, #12
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	9100      	str	r1, [sp, #0]
 8004e3c:	0013      	movs	r3, r2
 8004e3e:	0032      	movs	r2, r6
 8004e40:	0029      	movs	r1, r5
 8004e42:	0020      	movs	r0, r4
 8004e44:	f000 f90a 	bl	800505c <xTaskCreate>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d001      	beq.n	8004e52 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e000      	b.n	8004e54 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	0018      	movs	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b005      	add	sp, #20
 8004e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e5c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <osDelay+0x16>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	e000      	b.n	8004e74 <osDelay+0x18>
 8004e72:	2301      	movs	r3, #1
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 fa1b 	bl	80052b0 <vTaskDelay>
  
  return osOK;
 8004e7a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b004      	add	sp, #16
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	001a      	movs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	4252      	negs	r2, r2
 8004e9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	001a      	movs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b002      	add	sp, #8
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]
}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b004      	add	sp, #16
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	d103      	bne.n	8004f38 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e00c      	b.n	8004f52 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e002      	b.n	8004f46 <vListInsert+0x2c>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d2f6      	bcs.n	8004f40 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b004      	add	sp, #16
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6892      	ldr	r2, [r2, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6852      	ldr	r2, [r2, #4]
 8004fa6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d103      	bne.n	8004fba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	1e5a      	subs	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
}
 8004fce:	0018      	movs	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	b004      	add	sp, #16
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fd6:	b590      	push	{r4, r7, lr}
 8004fd8:	b08d      	sub	sp, #52	; 0x34
 8004fda:	af04      	add	r7, sp, #16
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <xTaskCreateStatic+0x18>
 8004fea:	b672      	cpsid	i
 8004fec:	e7fe      	b.n	8004fec <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <xTaskCreateStatic+0x22>
 8004ff4:	b672      	cpsid	i
 8004ff6:	e7fe      	b.n	8004ff6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ff8:	2354      	movs	r3, #84	; 0x54
 8004ffa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2b54      	cmp	r3, #84	; 0x54
 8005000:	d001      	beq.n	8005006 <xTaskCreateStatic+0x30>
 8005002:	b672      	cpsid	i
 8005004:	e7fe      	b.n	8005004 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	2b00      	cmp	r3, #0
 800500a:	d020      	beq.n	800504e <xTaskCreateStatic+0x78>
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01d      	beq.n	800504e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800501a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	2251      	movs	r2, #81	; 0x51
 8005020:	2102      	movs	r1, #2
 8005022:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005024:	683c      	ldr	r4, [r7, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	2300      	movs	r3, #0
 800502e:	9303      	str	r3, [sp, #12]
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	9302      	str	r3, [sp, #8]
 8005034:	2318      	movs	r3, #24
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	0023      	movs	r3, r4
 8005040:	f000 f858 	bl	80050f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 f8ce 	bl	80051e8 <prvAddNewTaskToReadyList>
 800504c:	e001      	b.n	8005052 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005052:	69bb      	ldr	r3, [r7, #24]
	}
 8005054:	0018      	movs	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	b009      	add	sp, #36	; 0x24
 800505a:	bd90      	pop	{r4, r7, pc}

0800505c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b08d      	sub	sp, #52	; 0x34
 8005060:	af04      	add	r7, sp, #16
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	1dbb      	adds	r3, r7, #6
 800506a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506c:	1dbb      	adds	r3, r7, #6
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	0018      	movs	r0, r3
 8005074:	f000 fd84 	bl	8005b80 <pvPortMalloc>
 8005078:	0003      	movs	r3, r0
 800507a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d010      	beq.n	80050a4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005082:	2054      	movs	r0, #84	; 0x54
 8005084:	f000 fd7c 	bl	8005b80 <pvPortMalloc>
 8005088:	0003      	movs	r3, r0
 800508a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
 8005098:	e006      	b.n	80050a8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	0018      	movs	r0, r3
 800509e:	f000 fe15 	bl	8005ccc <vPortFree>
 80050a2:	e001      	b.n	80050a8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01a      	beq.n	80050e4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2251      	movs	r2, #81	; 0x51
 80050b2:	2100      	movs	r1, #0
 80050b4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050b6:	1dbb      	adds	r3, r7, #6
 80050b8:	881a      	ldrh	r2, [r3, #0]
 80050ba:	683c      	ldr	r4, [r7, #0]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	2300      	movs	r3, #0
 80050c2:	9303      	str	r3, [sp, #12]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	9302      	str	r3, [sp, #8]
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	0023      	movs	r3, r4
 80050d2:	f000 f80f 	bl	80050f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 f885 	bl	80051e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050de:	2301      	movs	r3, #1
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	e002      	b.n	80050ea <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050e4:	2301      	movs	r3, #1
 80050e6:	425b      	negs	r3, r3
 80050e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050ea:	69bb      	ldr	r3, [r7, #24]
	}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b009      	add	sp, #36	; 0x24
 80050f2:	bd90      	pop	{r4, r7, pc}

080050f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4936      	ldr	r1, [pc, #216]	; (80051e4 <prvInitialiseNewTask+0xf0>)
 800510a:	468c      	mov	ip, r1
 800510c:	4463      	add	r3, ip
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	18d3      	adds	r3, r2, r3
 8005112:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2207      	movs	r2, #7
 8005118:	4393      	bics	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2207      	movs	r2, #7
 8005120:	4013      	ands	r3, r2
 8005122:	d001      	beq.n	8005128 <prvInitialiseNewTask+0x34>
 8005124:	b672      	cpsid	i
 8005126:	e7fe      	b.n	8005126 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e013      	b.n	8005156 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	18d3      	adds	r3, r2, r3
 8005134:	7818      	ldrb	r0, [r3, #0]
 8005136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005138:	2134      	movs	r1, #52	; 0x34
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	18d3      	adds	r3, r2, r3
 800513e:	185b      	adds	r3, r3, r1
 8005140:	1c02      	adds	r2, r0, #0
 8005142:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	18d3      	adds	r3, r2, r3
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d006      	beq.n	800515e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3301      	adds	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b0f      	cmp	r3, #15
 800515a:	d9e8      	bls.n	800512e <prvInitialiseNewTask+0x3a>
 800515c:	e000      	b.n	8005160 <prvInitialiseNewTask+0x6c>
		{
			break;
 800515e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	2243      	movs	r2, #67	; 0x43
 8005164:	2100      	movs	r1, #0
 8005166:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b06      	cmp	r3, #6
 800516c:	d901      	bls.n	8005172 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800516e:	2306      	movs	r3, #6
 8005170:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	6a3a      	ldr	r2, [r7, #32]
 8005176:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	6a3a      	ldr	r2, [r7, #32]
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	2200      	movs	r2, #0
 8005182:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	3304      	adds	r3, #4
 8005188:	0018      	movs	r0, r3
 800518a:	f7ff fe99 	bl	8004ec0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	3318      	adds	r3, #24
 8005192:	0018      	movs	r0, r3
 8005194:	f7ff fe94 	bl	8004ec0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2207      	movs	r2, #7
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	2200      	movs	r2, #0
 80051b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	2250      	movs	r2, #80	; 0x50
 80051b8:	2100      	movs	r1, #0
 80051ba:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	68f9      	ldr	r1, [r7, #12]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 fba8 	bl	8005918 <pxPortInitialiseStack>
 80051c8:	0002      	movs	r2, r0
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	b006      	add	sp, #24
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	3fffffff 	.word	0x3fffffff

080051e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051f0:	f000 fc2e 	bl	8005a50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051f4:	4b28      	ldr	r3, [pc, #160]	; (8005298 <prvAddNewTaskToReadyList+0xb0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	4b27      	ldr	r3, [pc, #156]	; (8005298 <prvAddNewTaskToReadyList+0xb0>)
 80051fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80051fe:	4b27      	ldr	r3, [pc, #156]	; (800529c <prvAddNewTaskToReadyList+0xb4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005206:	4b25      	ldr	r3, [pc, #148]	; (800529c <prvAddNewTaskToReadyList+0xb4>)
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800520c:	4b22      	ldr	r3, [pc, #136]	; (8005298 <prvAddNewTaskToReadyList+0xb0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d110      	bne.n	8005236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005214:	f000 fa6e 	bl	80056f4 <prvInitialiseTaskLists>
 8005218:	e00d      	b.n	8005236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800521a:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <prvAddNewTaskToReadyList+0xb8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005222:	4b1e      	ldr	r3, [pc, #120]	; (800529c <prvAddNewTaskToReadyList+0xb4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	429a      	cmp	r2, r3
 800522e:	d802      	bhi.n	8005236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005230:	4b1a      	ldr	r3, [pc, #104]	; (800529c <prvAddNewTaskToReadyList+0xb4>)
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005236:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <prvAddNewTaskToReadyList+0xbc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <prvAddNewTaskToReadyList+0xbc>)
 800523e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <prvAddNewTaskToReadyList+0xc0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d903      	bls.n	8005254 <prvAddNewTaskToReadyList+0x6c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <prvAddNewTaskToReadyList+0xc0>)
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005258:	0013      	movs	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	189b      	adds	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4a12      	ldr	r2, [pc, #72]	; (80052ac <prvAddNewTaskToReadyList+0xc4>)
 8005262:	189a      	adds	r2, r3, r2
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	0019      	movs	r1, r3
 800526a:	0010      	movs	r0, r2
 800526c:	f7ff fe33 	bl	8004ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005270:	f000 fc00 	bl	8005a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005274:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <prvAddNewTaskToReadyList+0xb8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800527c:	4b07      	ldr	r3, [pc, #28]	; (800529c <prvAddNewTaskToReadyList+0xb4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	429a      	cmp	r2, r3
 8005288:	d201      	bcs.n	800528e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800528a:	f000 fbd1 	bl	8005a30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	b002      	add	sp, #8
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	200003fc 	.word	0x200003fc
 800529c:	200002fc 	.word	0x200002fc
 80052a0:	20000408 	.word	0x20000408
 80052a4:	20000418 	.word	0x20000418
 80052a8:	20000404 	.word	0x20000404
 80052ac:	20000300 	.word	0x20000300

080052b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <vTaskDelay+0x48>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <vTaskDelay+0x1e>
 80052ca:	b672      	cpsid	i
 80052cc:	e7fe      	b.n	80052cc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80052ce:	f000 f863 	bl	8005398 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2100      	movs	r1, #0
 80052d6:	0018      	movs	r0, r3
 80052d8:	f000 faca 	bl	8005870 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052dc:	f000 f868 	bl	80053b0 <xTaskResumeAll>
 80052e0:	0003      	movs	r3, r0
 80052e2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80052ea:	f000 fba1 	bl	8005a30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b004      	add	sp, #16
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	20000424 	.word	0x20000424

080052fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052fc:	b590      	push	{r4, r7, lr}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800530a:	003a      	movs	r2, r7
 800530c:	1d39      	adds	r1, r7, #4
 800530e:	2308      	movs	r3, #8
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	0018      	movs	r0, r3
 8005314:	f7fb f878 	bl	8000408 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005318:	683c      	ldr	r4, [r7, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	4918      	ldr	r1, [pc, #96]	; (8005380 <vTaskStartScheduler+0x84>)
 8005320:	4818      	ldr	r0, [pc, #96]	; (8005384 <vTaskStartScheduler+0x88>)
 8005322:	9202      	str	r2, [sp, #8]
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	2300      	movs	r3, #0
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	2300      	movs	r3, #0
 800532c:	0022      	movs	r2, r4
 800532e:	f7ff fe52 	bl	8004fd6 <xTaskCreateStatic>
 8005332:	0002      	movs	r2, r0
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <vTaskStartScheduler+0x8c>)
 8005336:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005338:	4b13      	ldr	r3, [pc, #76]	; (8005388 <vTaskStartScheduler+0x8c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005340:	2301      	movs	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e001      	b.n	800534a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d10d      	bne.n	800536c <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005350:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005352:	4b0e      	ldr	r3, [pc, #56]	; (800538c <vTaskStartScheduler+0x90>)
 8005354:	2201      	movs	r2, #1
 8005356:	4252      	negs	r2, r2
 8005358:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800535a:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <vTaskStartScheduler+0x94>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <vTaskStartScheduler+0x98>)
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005366:	f000 fb3f 	bl	80059e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800536a:	e004      	b.n	8005376 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	d101      	bne.n	8005376 <vTaskStartScheduler+0x7a>
 8005372:	b672      	cpsid	i
 8005374:	e7fe      	b.n	8005374 <vTaskStartScheduler+0x78>
}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	46bd      	mov	sp, r7
 800537a:	b005      	add	sp, #20
 800537c:	bd90      	pop	{r4, r7, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	08007398 	.word	0x08007398
 8005384:	080056d5 	.word	0x080056d5
 8005388:	20000420 	.word	0x20000420
 800538c:	2000041c 	.word	0x2000041c
 8005390:	20000408 	.word	0x20000408
 8005394:	20000400 	.word	0x20000400

08005398 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <vTaskSuspendAll+0x14>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	4b02      	ldr	r3, [pc, #8]	; (80053ac <vTaskSuspendAll+0x14>)
 80053a4:	601a      	str	r2, [r3, #0]
}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000424 	.word	0x20000424

080053b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053be:	4b3a      	ldr	r3, [pc, #232]	; (80054a8 <xTaskResumeAll+0xf8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <xTaskResumeAll+0x1a>
 80053c6:	b672      	cpsid	i
 80053c8:	e7fe      	b.n	80053c8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053ca:	f000 fb41 	bl	8005a50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053ce:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <xTaskResumeAll+0xf8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	1e5a      	subs	r2, r3, #1
 80053d4:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <xTaskResumeAll+0xf8>)
 80053d6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d8:	4b33      	ldr	r3, [pc, #204]	; (80054a8 <xTaskResumeAll+0xf8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d15b      	bne.n	8005498 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053e0:	4b32      	ldr	r3, [pc, #200]	; (80054ac <xTaskResumeAll+0xfc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d057      	beq.n	8005498 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053e8:	e02f      	b.n	800544a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053ea:	4b31      	ldr	r3, [pc, #196]	; (80054b0 <xTaskResumeAll+0x100>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3318      	adds	r3, #24
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7ff fdc5 	bl	8004f86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3304      	adds	r3, #4
 8005400:	0018      	movs	r0, r3
 8005402:	f7ff fdc0 	bl	8004f86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <xTaskResumeAll+0x104>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d903      	bls.n	800541a <xTaskResumeAll+0x6a>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005416:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <xTaskResumeAll+0x104>)
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541e:	0013      	movs	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	189b      	adds	r3, r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4a24      	ldr	r2, [pc, #144]	; (80054b8 <xTaskResumeAll+0x108>)
 8005428:	189a      	adds	r2, r3, r2
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3304      	adds	r3, #4
 800542e:	0019      	movs	r1, r3
 8005430:	0010      	movs	r0, r2
 8005432:	f7ff fd50 	bl	8004ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543a:	4b20      	ldr	r3, [pc, #128]	; (80054bc <xTaskResumeAll+0x10c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005444:	4b1e      	ldr	r3, [pc, #120]	; (80054c0 <xTaskResumeAll+0x110>)
 8005446:	2201      	movs	r2, #1
 8005448:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800544a:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <xTaskResumeAll+0x100>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1cb      	bne.n	80053ea <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005458:	f000 f9e6 	bl	8005828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800545c:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <xTaskResumeAll+0x114>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00f      	beq.n	8005488 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005468:	f000 f82e 	bl	80054c8 <xTaskIncrementTick>
 800546c:	1e03      	subs	r3, r0, #0
 800546e:	d002      	beq.n	8005476 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005470:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <xTaskResumeAll+0x110>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3b01      	subs	r3, #1
 800547a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f2      	bne.n	8005468 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005482:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <xTaskResumeAll+0x114>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005488:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <xTaskResumeAll+0x110>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005494:	f000 facc 	bl	8005a30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005498:	f000 faec 	bl	8005a74 <vPortExitCritical>

	return xAlreadyYielded;
 800549c:	68bb      	ldr	r3, [r7, #8]
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b004      	add	sp, #16
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	20000424 	.word	0x20000424
 80054ac:	200003fc 	.word	0x200003fc
 80054b0:	200003bc 	.word	0x200003bc
 80054b4:	20000404 	.word	0x20000404
 80054b8:	20000300 	.word	0x20000300
 80054bc:	200002fc 	.word	0x200002fc
 80054c0:	20000410 	.word	0x20000410
 80054c4:	2000040c 	.word	0x2000040c

080054c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054d2:	4b4c      	ldr	r3, [pc, #304]	; (8005604 <xTaskIncrementTick+0x13c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d000      	beq.n	80054dc <xTaskIncrementTick+0x14>
 80054da:	e083      	b.n	80055e4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054dc:	4b4a      	ldr	r3, [pc, #296]	; (8005608 <xTaskIncrementTick+0x140>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054e4:	4b48      	ldr	r3, [pc, #288]	; (8005608 <xTaskIncrementTick+0x140>)
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d117      	bne.n	8005520 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80054f0:	4b46      	ldr	r3, [pc, #280]	; (800560c <xTaskIncrementTick+0x144>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <xTaskIncrementTick+0x36>
 80054fa:	b672      	cpsid	i
 80054fc:	e7fe      	b.n	80054fc <xTaskIncrementTick+0x34>
 80054fe:	4b43      	ldr	r3, [pc, #268]	; (800560c <xTaskIncrementTick+0x144>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	4b42      	ldr	r3, [pc, #264]	; (8005610 <xTaskIncrementTick+0x148>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b40      	ldr	r3, [pc, #256]	; (800560c <xTaskIncrementTick+0x144>)
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	4b40      	ldr	r3, [pc, #256]	; (8005610 <xTaskIncrementTick+0x148>)
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	4b40      	ldr	r3, [pc, #256]	; (8005614 <xTaskIncrementTick+0x14c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	4b3e      	ldr	r3, [pc, #248]	; (8005614 <xTaskIncrementTick+0x14c>)
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f000 f984 	bl	8005828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005520:	4b3d      	ldr	r3, [pc, #244]	; (8005618 <xTaskIncrementTick+0x150>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	429a      	cmp	r2, r3
 8005528:	d34e      	bcc.n	80055c8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552a:	4b38      	ldr	r3, [pc, #224]	; (800560c <xTaskIncrementTick+0x144>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <xTaskIncrementTick+0x70>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <xTaskIncrementTick+0x72>
 8005538:	2300      	movs	r3, #0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d004      	beq.n	8005548 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800553e:	4b36      	ldr	r3, [pc, #216]	; (8005618 <xTaskIncrementTick+0x150>)
 8005540:	2201      	movs	r2, #1
 8005542:	4252      	negs	r2, r2
 8005544:	601a      	str	r2, [r3, #0]
					break;
 8005546:	e03f      	b.n	80055c8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005548:	4b30      	ldr	r3, [pc, #192]	; (800560c <xTaskIncrementTick+0x144>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d203      	bcs.n	8005568 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005560:	4b2d      	ldr	r3, [pc, #180]	; (8005618 <xTaskIncrementTick+0x150>)
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	601a      	str	r2, [r3, #0]
						break;
 8005566:	e02f      	b.n	80055c8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	3304      	adds	r3, #4
 800556c:	0018      	movs	r0, r3
 800556e:	f7ff fd0a 	bl	8004f86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	3318      	adds	r3, #24
 800557e:	0018      	movs	r0, r3
 8005580:	f7ff fd01 	bl	8004f86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <xTaskIncrementTick+0x154>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d903      	bls.n	8005598 <xTaskIncrementTick+0xd0>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	4b21      	ldr	r3, [pc, #132]	; (800561c <xTaskIncrementTick+0x154>)
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	0013      	movs	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	189b      	adds	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4a1e      	ldr	r2, [pc, #120]	; (8005620 <xTaskIncrementTick+0x158>)
 80055a6:	189a      	adds	r2, r3, r2
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	3304      	adds	r3, #4
 80055ac:	0019      	movs	r1, r3
 80055ae:	0010      	movs	r0, r2
 80055b0:	f7ff fc91 	bl	8004ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b8:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <xTaskIncrementTick+0x15c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	429a      	cmp	r2, r3
 80055c0:	d3b3      	bcc.n	800552a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c6:	e7b0      	b.n	800552a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055c8:	4b16      	ldr	r3, [pc, #88]	; (8005624 <xTaskIncrementTick+0x15c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ce:	4914      	ldr	r1, [pc, #80]	; (8005620 <xTaskIncrementTick+0x158>)
 80055d0:	0013      	movs	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	189b      	adds	r3, r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	585b      	ldr	r3, [r3, r1]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d907      	bls.n	80055ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80055de:	2301      	movs	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e004      	b.n	80055ee <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055e4:	4b10      	ldr	r3, [pc, #64]	; (8005628 <xTaskIncrementTick+0x160>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <xTaskIncrementTick+0x160>)
 80055ec:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055ee:	4b0f      	ldr	r3, [pc, #60]	; (800562c <xTaskIncrementTick+0x164>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055fa:	697b      	ldr	r3, [r7, #20]
}
 80055fc:	0018      	movs	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	b006      	add	sp, #24
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000424 	.word	0x20000424
 8005608:	20000400 	.word	0x20000400
 800560c:	200003b4 	.word	0x200003b4
 8005610:	200003b8 	.word	0x200003b8
 8005614:	20000414 	.word	0x20000414
 8005618:	2000041c 	.word	0x2000041c
 800561c:	20000404 	.word	0x20000404
 8005620:	20000300 	.word	0x20000300
 8005624:	200002fc 	.word	0x200002fc
 8005628:	2000040c 	.word	0x2000040c
 800562c:	20000410 	.word	0x20000410

08005630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005636:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <vTaskSwitchContext+0x90>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800563e:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <vTaskSwitchContext+0x94>)
 8005640:	2201      	movs	r2, #1
 8005642:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005644:	e037      	b.n	80056b6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8005646:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <vTaskSwitchContext+0x94>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800564c:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <vTaskSwitchContext+0x98>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	e007      	b.n	8005664 <vTaskSwitchContext+0x34>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <vTaskSwitchContext+0x2e>
 800565a:	b672      	cpsid	i
 800565c:	e7fe      	b.n	800565c <vTaskSwitchContext+0x2c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3b01      	subs	r3, #1
 8005662:	607b      	str	r3, [r7, #4]
 8005664:	4919      	ldr	r1, [pc, #100]	; (80056cc <vTaskSwitchContext+0x9c>)
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	0013      	movs	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	189b      	adds	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	585b      	ldr	r3, [r3, r1]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0ee      	beq.n	8005654 <vTaskSwitchContext+0x24>
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	0013      	movs	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	189b      	adds	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4a12      	ldr	r2, [pc, #72]	; (80056cc <vTaskSwitchContext+0x9c>)
 8005682:	189b      	adds	r3, r3, r2
 8005684:	603b      	str	r3, [r7, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	605a      	str	r2, [r3, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	429a      	cmp	r2, r3
 800569a:	d104      	bne.n	80056a6 <vTaskSwitchContext+0x76>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <vTaskSwitchContext+0xa0>)
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <vTaskSwitchContext+0x98>)
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b002      	add	sp, #8
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	20000424 	.word	0x20000424
 80056c4:	20000410 	.word	0x20000410
 80056c8:	20000404 	.word	0x20000404
 80056cc:	20000300 	.word	0x20000300
 80056d0:	200002fc 	.word	0x200002fc

080056d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056dc:	f000 f84e 	bl	800577c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <prvIdleTask+0x1c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d9f9      	bls.n	80056dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80056e8:	f000 f9a2 	bl	8005a30 <vPortYield>
		prvCheckTasksWaitingTermination();
 80056ec:	e7f6      	b.n	80056dc <prvIdleTask+0x8>
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	20000300 	.word	0x20000300

080056f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056fa:	2300      	movs	r3, #0
 80056fc:	607b      	str	r3, [r7, #4]
 80056fe:	e00c      	b.n	800571a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	0013      	movs	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	189b      	adds	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4a14      	ldr	r2, [pc, #80]	; (800575c <prvInitialiseTaskLists+0x68>)
 800570c:	189b      	adds	r3, r3, r2
 800570e:	0018      	movs	r0, r3
 8005710:	f7ff fbb8 	bl	8004e84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3301      	adds	r3, #1
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b06      	cmp	r3, #6
 800571e:	d9ef      	bls.n	8005700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005720:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <prvInitialiseTaskLists+0x6c>)
 8005722:	0018      	movs	r0, r3
 8005724:	f7ff fbae 	bl	8004e84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005728:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <prvInitialiseTaskLists+0x70>)
 800572a:	0018      	movs	r0, r3
 800572c:	f7ff fbaa 	bl	8004e84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005730:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <prvInitialiseTaskLists+0x74>)
 8005732:	0018      	movs	r0, r3
 8005734:	f7ff fba6 	bl	8004e84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <prvInitialiseTaskLists+0x78>)
 800573a:	0018      	movs	r0, r3
 800573c:	f7ff fba2 	bl	8004e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <prvInitialiseTaskLists+0x7c>)
 8005742:	0018      	movs	r0, r3
 8005744:	f7ff fb9e 	bl	8004e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <prvInitialiseTaskLists+0x80>)
 800574a:	4a05      	ldr	r2, [pc, #20]	; (8005760 <prvInitialiseTaskLists+0x6c>)
 800574c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <prvInitialiseTaskLists+0x84>)
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <prvInitialiseTaskLists+0x70>)
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b002      	add	sp, #8
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000300 	.word	0x20000300
 8005760:	2000038c 	.word	0x2000038c
 8005764:	200003a0 	.word	0x200003a0
 8005768:	200003bc 	.word	0x200003bc
 800576c:	200003d0 	.word	0x200003d0
 8005770:	200003e8 	.word	0x200003e8
 8005774:	200003b4 	.word	0x200003b4
 8005778:	200003b8 	.word	0x200003b8

0800577c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005782:	e01a      	b.n	80057ba <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005784:	f000 f964 	bl	8005a50 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005788:	4b10      	ldr	r3, [pc, #64]	; (80057cc <prvCheckTasksWaitingTermination+0x50>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	0018      	movs	r0, r3
 8005796:	f7ff fbf6 	bl	8004f86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800579a:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <prvCheckTasksWaitingTermination+0x54>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	1e5a      	subs	r2, r3, #1
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <prvCheckTasksWaitingTermination+0x54>)
 80057a2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <prvCheckTasksWaitingTermination+0x58>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	1e5a      	subs	r2, r3, #1
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <prvCheckTasksWaitingTermination+0x58>)
 80057ac:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80057ae:	f000 f961 	bl	8005a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f000 f80f 	bl	80057d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <prvCheckTasksWaitingTermination+0x58>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e0      	bne.n	8005784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b002      	add	sp, #8
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	200003d0 	.word	0x200003d0
 80057d0:	200003fc 	.word	0x200003fc
 80057d4:	200003e4 	.word	0x200003e4

080057d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2251      	movs	r2, #81	; 0x51
 80057e4:	5c9b      	ldrb	r3, [r3, r2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	0018      	movs	r0, r3
 80057f0:	f000 fa6c 	bl	8005ccc <vPortFree>
				vPortFree( pxTCB );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	0018      	movs	r0, r3
 80057f8:	f000 fa68 	bl	8005ccc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057fc:	e010      	b.n	8005820 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2251      	movs	r2, #81	; 0x51
 8005802:	5c9b      	ldrb	r3, [r3, r2]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d104      	bne.n	8005812 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 fa5e 	bl	8005ccc <vPortFree>
	}
 8005810:	e006      	b.n	8005820 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2251      	movs	r2, #81	; 0x51
 8005816:	5c9b      	ldrb	r3, [r3, r2]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d001      	beq.n	8005820 <prvDeleteTCB+0x48>
 800581c:	b672      	cpsid	i
 800581e:	e7fe      	b.n	800581e <prvDeleteTCB+0x46>
	}
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	46bd      	mov	sp, r7
 8005824:	b002      	add	sp, #8
 8005826:	bd80      	pop	{r7, pc}

08005828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582e:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <prvResetNextTaskUnblockTime+0x40>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <prvResetNextTaskUnblockTime+0x14>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <prvResetNextTaskUnblockTime+0x16>
 800583c:	2300      	movs	r3, #0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <prvResetNextTaskUnblockTime+0x44>)
 8005844:	2201      	movs	r2, #1
 8005846:	4252      	negs	r2, r2
 8005848:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800584a:	e008      	b.n	800585e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <prvResetNextTaskUnblockTime+0x40>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	4b04      	ldr	r3, [pc, #16]	; (800586c <prvResetNextTaskUnblockTime+0x44>)
 800585c:	601a      	str	r2, [r3, #0]
}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	46bd      	mov	sp, r7
 8005862:	b002      	add	sp, #8
 8005864:	bd80      	pop	{r7, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	200003b4 	.word	0x200003b4
 800586c:	2000041c 	.word	0x2000041c

08005870 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800587a:	4b21      	ldr	r3, [pc, #132]	; (8005900 <prvAddCurrentTaskToDelayedList+0x90>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005880:	4b20      	ldr	r3, [pc, #128]	; (8005904 <prvAddCurrentTaskToDelayedList+0x94>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3304      	adds	r3, #4
 8005886:	0018      	movs	r0, r3
 8005888:	f7ff fb7d 	bl	8004f86 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3301      	adds	r3, #1
 8005890:	d10b      	bne.n	80058aa <prvAddCurrentTaskToDelayedList+0x3a>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <prvAddCurrentTaskToDelayedList+0x94>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	1d1a      	adds	r2, r3, #4
 800589e:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <prvAddCurrentTaskToDelayedList+0x98>)
 80058a0:	0011      	movs	r1, r2
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7ff fb17 	bl	8004ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058a8:	e026      	b.n	80058f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	18d3      	adds	r3, r2, r3
 80058b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058b2:	4b14      	ldr	r3, [pc, #80]	; (8005904 <prvAddCurrentTaskToDelayedList+0x94>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d209      	bcs.n	80058d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c2:	4b12      	ldr	r3, [pc, #72]	; (800590c <prvAddCurrentTaskToDelayedList+0x9c>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <prvAddCurrentTaskToDelayedList+0x94>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3304      	adds	r3, #4
 80058cc:	0019      	movs	r1, r3
 80058ce:	0010      	movs	r0, r2
 80058d0:	f7ff fb23 	bl	8004f1a <vListInsert>
}
 80058d4:	e010      	b.n	80058f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d6:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <prvAddCurrentTaskToDelayedList+0xa0>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <prvAddCurrentTaskToDelayedList+0x94>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3304      	adds	r3, #4
 80058e0:	0019      	movs	r1, r3
 80058e2:	0010      	movs	r0, r2
 80058e4:	f7ff fb19 	bl	8004f1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d202      	bcs.n	80058f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	601a      	str	r2, [r3, #0]
}
 80058f8:	46c0      	nop			; (mov r8, r8)
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b004      	add	sp, #16
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20000400 	.word	0x20000400
 8005904:	200002fc 	.word	0x200002fc
 8005908:	200003e8 	.word	0x200003e8
 800590c:	200003b8 	.word	0x200003b8
 8005910:	200003b4 	.word	0x200003b4
 8005914:	2000041c 	.word	0x2000041c

08005918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3b04      	subs	r3, #4
 8005928:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2280      	movs	r2, #128	; 0x80
 800592e:	0452      	lsls	r2, r2, #17
 8005930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3b04      	subs	r3, #4
 8005936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3b04      	subs	r3, #4
 8005942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005944:	4a08      	ldr	r2, [pc, #32]	; (8005968 <pxPortInitialiseStack+0x50>)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b14      	subs	r3, #20
 800594e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3b20      	subs	r3, #32
 800595a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b004      	add	sp, #16
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	0800596d 	.word	0x0800596d

0800596c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005972:	2300      	movs	r3, #0
 8005974:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005976:	4b07      	ldr	r3, [pc, #28]	; (8005994 <prvTaskExitError+0x28>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	d001      	beq.n	8005982 <prvTaskExitError+0x16>
 800597e:	b672      	cpsid	i
 8005980:	e7fe      	b.n	8005980 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005982:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0fc      	beq.n	8005986 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000014 	.word	0x20000014

08005998 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80059b0:	4a0b      	ldr	r2, [pc, #44]	; (80059e0 <pxCurrentTCBConst2>)
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	3020      	adds	r0, #32
 80059b8:	f380 8809 	msr	PSP, r0
 80059bc:	2002      	movs	r0, #2
 80059be:	f380 8814 	msr	CONTROL, r0
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80059c8:	46ae      	mov	lr, r5
 80059ca:	bc08      	pop	{r3}
 80059cc:	bc04      	pop	{r2}
 80059ce:	b662      	cpsie	i
 80059d0:	4718      	bx	r3
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	46c0      	nop			; (mov r8, r8)
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46c0      	nop			; (mov r8, r8)

080059e0 <pxCurrentTCBConst2>:
 80059e0:	200002fc 	.word	0x200002fc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46c0      	nop			; (mov r8, r8)

080059e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80059ec:	4b0e      	ldr	r3, [pc, #56]	; (8005a28 <xPortStartScheduler+0x40>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <xPortStartScheduler+0x40>)
 80059f2:	21ff      	movs	r1, #255	; 0xff
 80059f4:	0409      	lsls	r1, r1, #16
 80059f6:	430a      	orrs	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <xPortStartScheduler+0x40>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <xPortStartScheduler+0x40>)
 8005a00:	21ff      	movs	r1, #255	; 0xff
 8005a02:	0609      	lsls	r1, r1, #24
 8005a04:	430a      	orrs	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005a08:	f000 f898 	bl	8005b3c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <xPortStartScheduler+0x44>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005a12:	f7ff ffcd 	bl	80059b0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a16:	f7ff fe0b 	bl	8005630 <vTaskSwitchContext>
	prvTaskExitError();
 8005a1a:	f7ff ffa7 	bl	800596c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	0018      	movs	r0, r3
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	e000ed20 	.word	0xe000ed20
 8005a2c:	20000014 	.word	0x20000014

08005a30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005a34:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <vPortYield+0x1c>)
 8005a36:	2280      	movs	r2, #128	; 0x80
 8005a38:	0552      	lsls	r2, r2, #21
 8005a3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005a3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005a40:	f3bf 8f6f 	isb	sy
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005a54:	b672      	cpsid	i
    uxCriticalNesting++;
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <vPortEnterCritical+0x20>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <vPortEnterCritical+0x20>)
 8005a5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005a60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005a64:	f3bf 8f6f 	isb	sy
}
 8005a68:	46c0      	nop			; (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	20000014 	.word	0x20000014

08005a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <vPortExitCritical+0x2c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <vPortExitCritical+0x10>
 8005a80:	b672      	cpsid	i
 8005a82:	e7fe      	b.n	8005a82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <vPortExitCritical+0x2c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	1e5a      	subs	r2, r3, #1
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <vPortExitCritical+0x2c>)
 8005a8c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005a8e:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <vPortExitCritical+0x2c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d100      	bne.n	8005a98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005a96:	b662      	cpsie	i
    }
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	20000014 	.word	0x20000014

08005aa4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005aa4:	f3ef 8010 	mrs	r0, PRIMASK
 8005aa8:	b672      	cpsid	i
 8005aaa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005aac:	46c0      	nop			; (mov r8, r8)
 8005aae:	0018      	movs	r0, r3

08005ab0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005ab0:	f380 8810 	msr	PRIMASK, r0
 8005ab4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005ab6:	46c0      	nop			; (mov r8, r8)
	...

08005ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ac0:	f3ef 8009 	mrs	r0, PSP
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <pxCurrentTCBConst>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	3820      	subs	r0, #32
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005ace:	4644      	mov	r4, r8
 8005ad0:	464d      	mov	r5, r9
 8005ad2:	4656      	mov	r6, sl
 8005ad4:	465f      	mov	r7, fp
 8005ad6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005ad8:	b508      	push	{r3, lr}
 8005ada:	b672      	cpsid	i
 8005adc:	f7ff fda8 	bl	8005630 <vTaskSwitchContext>
 8005ae0:	b662      	cpsie	i
 8005ae2:	bc0c      	pop	{r2, r3}
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	6808      	ldr	r0, [r1, #0]
 8005ae8:	3010      	adds	r0, #16
 8005aea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005aec:	46a0      	mov	r8, r4
 8005aee:	46a9      	mov	r9, r5
 8005af0:	46b2      	mov	sl, r6
 8005af2:	46bb      	mov	fp, r7
 8005af4:	f380 8809 	msr	PSP, r0
 8005af8:	3820      	subs	r0, #32
 8005afa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005afc:	4718      	bx	r3
 8005afe:	46c0      	nop			; (mov r8, r8)

08005b00 <pxCurrentTCBConst>:
 8005b00:	200002fc 	.word	0x200002fc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	46c0      	nop			; (mov r8, r8)

08005b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b0e:	f7ff ffc9 	bl	8005aa4 <ulSetInterruptMaskFromISR>
 8005b12:	0003      	movs	r3, r0
 8005b14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b16:	f7ff fcd7 	bl	80054c8 <xTaskIncrementTick>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d003      	beq.n	8005b26 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005b1e:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <SysTick_Handler+0x30>)
 8005b20:	2280      	movs	r2, #128	; 0x80
 8005b22:	0552      	lsls	r2, r2, #21
 8005b24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7ff ffc1 	bl	8005ab0 <vClearInterruptMaskFromISR>
}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	46bd      	mov	sp, r7
 8005b32:	b002      	add	sp, #8
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <prvSetupTimerInterrupt+0x34>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <prvSetupTimerInterrupt+0x38>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <prvSetupTimerInterrupt+0x3c>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	23fa      	movs	r3, #250	; 0xfa
 8005b52:	0099      	lsls	r1, r3, #2
 8005b54:	0010      	movs	r0, r2
 8005b56:	f7fa fae9 	bl	800012c <__udivsi3>
 8005b5a:	0003      	movs	r3, r0
 8005b5c:	001a      	movs	r2, r3
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <prvSetupTimerInterrupt+0x40>)
 8005b60:	3a01      	subs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005b64:	4b02      	ldr	r3, [pc, #8]	; (8005b70 <prvSetupTimerInterrupt+0x34>)
 8005b66:	2207      	movs	r2, #7
 8005b68:	601a      	str	r2, [r3, #0]
}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	e000e010 	.word	0xe000e010
 8005b74:	e000e018 	.word	0xe000e018
 8005b78:	2000000c 	.word	0x2000000c
 8005b7c:	e000e014 	.word	0xe000e014

08005b80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005b8c:	f7ff fc04 	bl	8005398 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b90:	4b49      	ldr	r3, [pc, #292]	; (8005cb8 <pvPortMalloc+0x138>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b98:	f000 f8e0 	bl	8005d5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b9c:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <pvPortMalloc+0x13c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d000      	beq.n	8005ba8 <pvPortMalloc+0x28>
 8005ba6:	e079      	b.n	8005c9c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d012      	beq.n	8005bd4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005bae:	2208      	movs	r2, #8
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	189b      	adds	r3, r3, r2
 8005bb4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2207      	movs	r2, #7
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d00a      	beq.n	8005bd4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	4393      	bics	r3, r2
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2207      	movs	r2, #7
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d001      	beq.n	8005bd4 <pvPortMalloc+0x54>
 8005bd0:	b672      	cpsid	i
 8005bd2:	e7fe      	b.n	8005bd2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d060      	beq.n	8005c9c <pvPortMalloc+0x11c>
 8005bda:	4b39      	ldr	r3, [pc, #228]	; (8005cc0 <pvPortMalloc+0x140>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d85b      	bhi.n	8005c9c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005be4:	4b37      	ldr	r3, [pc, #220]	; (8005cc4 <pvPortMalloc+0x144>)
 8005be6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005be8:	4b36      	ldr	r3, [pc, #216]	; (8005cc4 <pvPortMalloc+0x144>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bee:	e004      	b.n	8005bfa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d903      	bls.n	8005c0c <pvPortMalloc+0x8c>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f1      	bne.n	8005bf0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c0c:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <pvPortMalloc+0x138>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d042      	beq.n	8005c9c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	189b      	adds	r3, r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	1ad2      	subs	r2, r2, r3
 8005c30:	2308      	movs	r3, #8
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d916      	bls.n	8005c66 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	18d3      	adds	r3, r2, r3
 8005c3e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2207      	movs	r2, #7
 8005c44:	4013      	ands	r3, r2
 8005c46:	d001      	beq.n	8005c4c <pvPortMalloc+0xcc>
 8005c48:	b672      	cpsid	i
 8005c4a:	e7fe      	b.n	8005c4a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f000 f8db 	bl	8005e1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c66:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <pvPortMalloc+0x140>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <pvPortMalloc+0x140>)
 8005c72:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c74:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <pvPortMalloc+0x140>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <pvPortMalloc+0x148>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d203      	bcs.n	8005c88 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c80:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <pvPortMalloc+0x140>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	4b10      	ldr	r3, [pc, #64]	; (8005cc8 <pvPortMalloc+0x148>)
 8005c86:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <pvPortMalloc+0x13c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c9c:	f7ff fb88 	bl	80053b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2207      	movs	r2, #7
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d001      	beq.n	8005cac <pvPortMalloc+0x12c>
 8005ca8:	b672      	cpsid	i
 8005caa:	e7fe      	b.n	8005caa <pvPortMalloc+0x12a>
	return pvReturn;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	0018      	movs	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b006      	add	sp, #24
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	20001030 	.word	0x20001030
 8005cbc:	2000103c 	.word	0x2000103c
 8005cc0:	20001034 	.word	0x20001034
 8005cc4:	20001028 	.word	0x20001028
 8005cc8:	20001038 	.word	0x20001038

08005ccc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d035      	beq.n	8005d4a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cde:	2308      	movs	r3, #8
 8005ce0:	425b      	negs	r3, r3
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	18d3      	adds	r3, r2, r3
 8005ce6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <vPortFree+0x88>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d101      	bne.n	8005cfc <vPortFree+0x30>
 8005cf8:	b672      	cpsid	i
 8005cfa:	e7fe      	b.n	8005cfa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <vPortFree+0x3c>
 8005d04:	b672      	cpsid	i
 8005d06:	e7fe      	b.n	8005d06 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <vPortFree+0x88>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4013      	ands	r3, r2
 8005d12:	d01a      	beq.n	8005d4a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d116      	bne.n	8005d4a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <vPortFree+0x88>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	43db      	mvns	r3, r3
 8005d26:	401a      	ands	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d2c:	f7ff fb34 	bl	8005398 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <vPortFree+0x8c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	18d2      	adds	r2, r2, r3
 8005d3a:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <vPortFree+0x8c>)
 8005d3c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 f86b 	bl	8005e1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d46:	f7ff fb33 	bl	80053b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b004      	add	sp, #16
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	2000103c 	.word	0x2000103c
 8005d58:	20001034 	.word	0x20001034

08005d5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d62:	23c0      	movs	r3, #192	; 0xc0
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d68:	4b26      	ldr	r3, [pc, #152]	; (8005e04 <prvHeapInit+0xa8>)
 8005d6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2207      	movs	r2, #7
 8005d70:	4013      	ands	r3, r2
 8005d72:	d00c      	beq.n	8005d8e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3307      	adds	r3, #7
 8005d78:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	4393      	bics	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	4b1e      	ldr	r3, [pc, #120]	; (8005e04 <prvHeapInit+0xa8>)
 8005d8a:	18d3      	adds	r3, r2, r3
 8005d8c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <prvHeapInit+0xac>)
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <prvHeapInit+0xac>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	18d3      	adds	r3, r2, r3
 8005da4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005da6:	2208      	movs	r2, #8
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2207      	movs	r2, #7
 8005db2:	4393      	bics	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <prvHeapInit+0xb0>)
 8005dba:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005dbc:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <prvHeapInit+0xb0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <prvHeapInit+0xb0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	1ad2      	subs	r2, r2, r3
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005dda:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <prvHeapInit+0xb0>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <prvHeapInit+0xb4>)
 8005de8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <prvHeapInit+0xb8>)
 8005df0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <prvHeapInit+0xbc>)
 8005df4:	2280      	movs	r2, #128	; 0x80
 8005df6:	0612      	lsls	r2, r2, #24
 8005df8:	601a      	str	r2, [r3, #0]
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b004      	add	sp, #16
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	20000428 	.word	0x20000428
 8005e08:	20001028 	.word	0x20001028
 8005e0c:	20001030 	.word	0x20001030
 8005e10:	20001038 	.word	0x20001038
 8005e14:	20001034 	.word	0x20001034
 8005e18:	2000103c 	.word	0x2000103c

08005e1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e24:	4b27      	ldr	r3, [pc, #156]	; (8005ec4 <prvInsertBlockIntoFreeList+0xa8>)
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	e002      	b.n	8005e30 <prvInsertBlockIntoFreeList+0x14>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d8f7      	bhi.n	8005e2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	18d3      	adds	r3, r2, r3
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d108      	bne.n	8005e5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	18d2      	adds	r2, r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	18d2      	adds	r2, r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d118      	bne.n	8005ea4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <prvInsertBlockIntoFreeList+0xac>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d00d      	beq.n	8005e9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	18d2      	adds	r2, r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e008      	b.n	8005eac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <prvInsertBlockIntoFreeList+0xac>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e003      	b.n	8005eac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d002      	beq.n	8005eba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b004      	add	sp, #16
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	20001028 	.word	0x20001028
 8005ec8:	20001030 	.word	0x20001030

08005ecc <__errno>:
 8005ecc:	4b01      	ldr	r3, [pc, #4]	; (8005ed4 <__errno+0x8>)
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	4770      	bx	lr
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	20000018 	.word	0x20000018

08005ed8 <__libc_init_array>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	2600      	movs	r6, #0
 8005edc:	4d0c      	ldr	r5, [pc, #48]	; (8005f10 <__libc_init_array+0x38>)
 8005ede:	4c0d      	ldr	r4, [pc, #52]	; (8005f14 <__libc_init_array+0x3c>)
 8005ee0:	1b64      	subs	r4, r4, r5
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	42a6      	cmp	r6, r4
 8005ee6:	d109      	bne.n	8005efc <__libc_init_array+0x24>
 8005ee8:	2600      	movs	r6, #0
 8005eea:	f001 f96d 	bl	80071c8 <_init>
 8005eee:	4d0a      	ldr	r5, [pc, #40]	; (8005f18 <__libc_init_array+0x40>)
 8005ef0:	4c0a      	ldr	r4, [pc, #40]	; (8005f1c <__libc_init_array+0x44>)
 8005ef2:	1b64      	subs	r4, r4, r5
 8005ef4:	10a4      	asrs	r4, r4, #2
 8005ef6:	42a6      	cmp	r6, r4
 8005ef8:	d105      	bne.n	8005f06 <__libc_init_array+0x2e>
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	00b3      	lsls	r3, r6, #2
 8005efe:	58eb      	ldr	r3, [r5, r3]
 8005f00:	4798      	blx	r3
 8005f02:	3601      	adds	r6, #1
 8005f04:	e7ee      	b.n	8005ee4 <__libc_init_array+0xc>
 8005f06:	00b3      	lsls	r3, r6, #2
 8005f08:	58eb      	ldr	r3, [r5, r3]
 8005f0a:	4798      	blx	r3
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	e7f2      	b.n	8005ef6 <__libc_init_array+0x1e>
 8005f10:	08007450 	.word	0x08007450
 8005f14:	08007450 	.word	0x08007450
 8005f18:	08007450 	.word	0x08007450
 8005f1c:	08007454 	.word	0x08007454

08005f20 <memcpy>:
 8005f20:	2300      	movs	r3, #0
 8005f22:	b510      	push	{r4, lr}
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d100      	bne.n	8005f2a <memcpy+0xa>
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	5ccc      	ldrb	r4, [r1, r3]
 8005f2c:	54c4      	strb	r4, [r0, r3]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	e7f8      	b.n	8005f24 <memcpy+0x4>

08005f32 <memset>:
 8005f32:	0003      	movs	r3, r0
 8005f34:	1812      	adds	r2, r2, r0
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d100      	bne.n	8005f3c <memset+0xa>
 8005f3a:	4770      	bx	lr
 8005f3c:	7019      	strb	r1, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	e7f9      	b.n	8005f36 <memset+0x4>
	...

08005f44 <iprintf>:
 8005f44:	b40f      	push	{r0, r1, r2, r3}
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <iprintf+0x30>)
 8005f48:	b513      	push	{r0, r1, r4, lr}
 8005f4a:	681c      	ldr	r4, [r3, #0]
 8005f4c:	2c00      	cmp	r4, #0
 8005f4e:	d005      	beq.n	8005f5c <iprintf+0x18>
 8005f50:	69a3      	ldr	r3, [r4, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <iprintf+0x18>
 8005f56:	0020      	movs	r0, r4
 8005f58:	f000 fa5c 	bl	8006414 <__sinit>
 8005f5c:	ab05      	add	r3, sp, #20
 8005f5e:	9a04      	ldr	r2, [sp, #16]
 8005f60:	68a1      	ldr	r1, [r4, #8]
 8005f62:	0020      	movs	r0, r4
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	f000 fd85 	bl	8006a74 <_vfiprintf_r>
 8005f6a:	bc16      	pop	{r1, r2, r4}
 8005f6c:	bc08      	pop	{r3}
 8005f6e:	b004      	add	sp, #16
 8005f70:	4718      	bx	r3
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	20000018 	.word	0x20000018

08005f78 <_puts_r>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	0005      	movs	r5, r0
 8005f7c:	000e      	movs	r6, r1
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d004      	beq.n	8005f8c <_puts_r+0x14>
 8005f82:	6983      	ldr	r3, [r0, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <_puts_r+0x14>
 8005f88:	f000 fa44 	bl	8006414 <__sinit>
 8005f8c:	69ab      	ldr	r3, [r5, #24]
 8005f8e:	68ac      	ldr	r4, [r5, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <_puts_r+0x22>
 8005f94:	0028      	movs	r0, r5
 8005f96:	f000 fa3d 	bl	8006414 <__sinit>
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <_puts_r+0xb4>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	d10f      	bne.n	8005fc0 <_puts_r+0x48>
 8005fa0:	686c      	ldr	r4, [r5, #4]
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	071b      	lsls	r3, r3, #28
 8005fa6:	d502      	bpl.n	8005fae <_puts_r+0x36>
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d11f      	bne.n	8005fee <_puts_r+0x76>
 8005fae:	0021      	movs	r1, r4
 8005fb0:	0028      	movs	r0, r5
 8005fb2:	f000 f8c1 	bl	8006138 <__swsetup_r>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d019      	beq.n	8005fee <_puts_r+0x76>
 8005fba:	2001      	movs	r0, #1
 8005fbc:	4240      	negs	r0, r0
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <_puts_r+0xb8>)
 8005fc2:	429c      	cmp	r4, r3
 8005fc4:	d101      	bne.n	8005fca <_puts_r+0x52>
 8005fc6:	68ac      	ldr	r4, [r5, #8]
 8005fc8:	e7eb      	b.n	8005fa2 <_puts_r+0x2a>
 8005fca:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <_puts_r+0xbc>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d1e8      	bne.n	8005fa2 <_puts_r+0x2a>
 8005fd0:	68ec      	ldr	r4, [r5, #12]
 8005fd2:	e7e6      	b.n	8005fa2 <_puts_r+0x2a>
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	60a3      	str	r3, [r4, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	da04      	bge.n	8005fe6 <_puts_r+0x6e>
 8005fdc:	69a2      	ldr	r2, [r4, #24]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	dc16      	bgt.n	8006010 <_puts_r+0x98>
 8005fe2:	290a      	cmp	r1, #10
 8005fe4:	d014      	beq.n	8006010 <_puts_r+0x98>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	7019      	strb	r1, [r3, #0]
 8005fee:	68a3      	ldr	r3, [r4, #8]
 8005ff0:	7831      	ldrb	r1, [r6, #0]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	d1ed      	bne.n	8005fd4 <_puts_r+0x5c>
 8005ff8:	60a3      	str	r3, [r4, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	da0f      	bge.n	800601e <_puts_r+0xa6>
 8005ffe:	0022      	movs	r2, r4
 8006000:	310a      	adds	r1, #10
 8006002:	0028      	movs	r0, r5
 8006004:	f000 f842 	bl	800608c <__swbuf_r>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d0d6      	beq.n	8005fba <_puts_r+0x42>
 800600c:	200a      	movs	r0, #10
 800600e:	e7d6      	b.n	8005fbe <_puts_r+0x46>
 8006010:	0022      	movs	r2, r4
 8006012:	0028      	movs	r0, r5
 8006014:	f000 f83a 	bl	800608c <__swbuf_r>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d1e8      	bne.n	8005fee <_puts_r+0x76>
 800601c:	e7cd      	b.n	8005fba <_puts_r+0x42>
 800601e:	200a      	movs	r0, #10
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	6022      	str	r2, [r4, #0]
 8006026:	7018      	strb	r0, [r3, #0]
 8006028:	e7c9      	b.n	8005fbe <_puts_r+0x46>
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	080073dc 	.word	0x080073dc
 8006030:	080073fc 	.word	0x080073fc
 8006034:	080073bc 	.word	0x080073bc

08006038 <puts>:
 8006038:	b510      	push	{r4, lr}
 800603a:	4b03      	ldr	r3, [pc, #12]	; (8006048 <puts+0x10>)
 800603c:	0001      	movs	r1, r0
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	f7ff ff9a 	bl	8005f78 <_puts_r>
 8006044:	bd10      	pop	{r4, pc}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	20000018 	.word	0x20000018

0800604c <siprintf>:
 800604c:	b40e      	push	{r1, r2, r3}
 800604e:	b500      	push	{lr}
 8006050:	490b      	ldr	r1, [pc, #44]	; (8006080 <siprintf+0x34>)
 8006052:	b09c      	sub	sp, #112	; 0x70
 8006054:	ab1d      	add	r3, sp, #116	; 0x74
 8006056:	9002      	str	r0, [sp, #8]
 8006058:	9006      	str	r0, [sp, #24]
 800605a:	9107      	str	r1, [sp, #28]
 800605c:	9104      	str	r1, [sp, #16]
 800605e:	4809      	ldr	r0, [pc, #36]	; (8006084 <siprintf+0x38>)
 8006060:	4909      	ldr	r1, [pc, #36]	; (8006088 <siprintf+0x3c>)
 8006062:	cb04      	ldmia	r3!, {r2}
 8006064:	9105      	str	r1, [sp, #20]
 8006066:	6800      	ldr	r0, [r0, #0]
 8006068:	a902      	add	r1, sp, #8
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	f000 fbdc 	bl	8006828 <_svfiprintf_r>
 8006070:	2300      	movs	r3, #0
 8006072:	9a02      	ldr	r2, [sp, #8]
 8006074:	7013      	strb	r3, [r2, #0]
 8006076:	b01c      	add	sp, #112	; 0x70
 8006078:	bc08      	pop	{r3}
 800607a:	b003      	add	sp, #12
 800607c:	4718      	bx	r3
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	7fffffff 	.word	0x7fffffff
 8006084:	20000018 	.word	0x20000018
 8006088:	ffff0208 	.word	0xffff0208

0800608c <__swbuf_r>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	0005      	movs	r5, r0
 8006090:	000e      	movs	r6, r1
 8006092:	0014      	movs	r4, r2
 8006094:	2800      	cmp	r0, #0
 8006096:	d004      	beq.n	80060a2 <__swbuf_r+0x16>
 8006098:	6983      	ldr	r3, [r0, #24]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <__swbuf_r+0x16>
 800609e:	f000 f9b9 	bl	8006414 <__sinit>
 80060a2:	4b22      	ldr	r3, [pc, #136]	; (800612c <__swbuf_r+0xa0>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	d12d      	bne.n	8006104 <__swbuf_r+0x78>
 80060a8:	686c      	ldr	r4, [r5, #4]
 80060aa:	69a3      	ldr	r3, [r4, #24]
 80060ac:	60a3      	str	r3, [r4, #8]
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	071b      	lsls	r3, r3, #28
 80060b2:	d531      	bpl.n	8006118 <__swbuf_r+0x8c>
 80060b4:	6923      	ldr	r3, [r4, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d02e      	beq.n	8006118 <__swbuf_r+0x8c>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	6922      	ldr	r2, [r4, #16]
 80060be:	b2f7      	uxtb	r7, r6
 80060c0:	1a98      	subs	r0, r3, r2
 80060c2:	6963      	ldr	r3, [r4, #20]
 80060c4:	b2f6      	uxtb	r6, r6
 80060c6:	4283      	cmp	r3, r0
 80060c8:	dc05      	bgt.n	80060d6 <__swbuf_r+0x4a>
 80060ca:	0021      	movs	r1, r4
 80060cc:	0028      	movs	r0, r5
 80060ce:	f000 f933 	bl	8006338 <_fflush_r>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d126      	bne.n	8006124 <__swbuf_r+0x98>
 80060d6:	68a3      	ldr	r3, [r4, #8]
 80060d8:	3001      	adds	r0, #1
 80060da:	3b01      	subs	r3, #1
 80060dc:	60a3      	str	r3, [r4, #8]
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	6022      	str	r2, [r4, #0]
 80060e4:	701f      	strb	r7, [r3, #0]
 80060e6:	6963      	ldr	r3, [r4, #20]
 80060e8:	4283      	cmp	r3, r0
 80060ea:	d004      	beq.n	80060f6 <__swbuf_r+0x6a>
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	07db      	lsls	r3, r3, #31
 80060f0:	d51a      	bpl.n	8006128 <__swbuf_r+0x9c>
 80060f2:	2e0a      	cmp	r6, #10
 80060f4:	d118      	bne.n	8006128 <__swbuf_r+0x9c>
 80060f6:	0021      	movs	r1, r4
 80060f8:	0028      	movs	r0, r5
 80060fa:	f000 f91d 	bl	8006338 <_fflush_r>
 80060fe:	2800      	cmp	r0, #0
 8006100:	d012      	beq.n	8006128 <__swbuf_r+0x9c>
 8006102:	e00f      	b.n	8006124 <__swbuf_r+0x98>
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <__swbuf_r+0xa4>)
 8006106:	429c      	cmp	r4, r3
 8006108:	d101      	bne.n	800610e <__swbuf_r+0x82>
 800610a:	68ac      	ldr	r4, [r5, #8]
 800610c:	e7cd      	b.n	80060aa <__swbuf_r+0x1e>
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <__swbuf_r+0xa8>)
 8006110:	429c      	cmp	r4, r3
 8006112:	d1ca      	bne.n	80060aa <__swbuf_r+0x1e>
 8006114:	68ec      	ldr	r4, [r5, #12]
 8006116:	e7c8      	b.n	80060aa <__swbuf_r+0x1e>
 8006118:	0021      	movs	r1, r4
 800611a:	0028      	movs	r0, r5
 800611c:	f000 f80c 	bl	8006138 <__swsetup_r>
 8006120:	2800      	cmp	r0, #0
 8006122:	d0ca      	beq.n	80060ba <__swbuf_r+0x2e>
 8006124:	2601      	movs	r6, #1
 8006126:	4276      	negs	r6, r6
 8006128:	0030      	movs	r0, r6
 800612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612c:	080073dc 	.word	0x080073dc
 8006130:	080073fc 	.word	0x080073fc
 8006134:	080073bc 	.word	0x080073bc

08006138 <__swsetup_r>:
 8006138:	4b36      	ldr	r3, [pc, #216]	; (8006214 <__swsetup_r+0xdc>)
 800613a:	b570      	push	{r4, r5, r6, lr}
 800613c:	681d      	ldr	r5, [r3, #0]
 800613e:	0006      	movs	r6, r0
 8006140:	000c      	movs	r4, r1
 8006142:	2d00      	cmp	r5, #0
 8006144:	d005      	beq.n	8006152 <__swsetup_r+0x1a>
 8006146:	69ab      	ldr	r3, [r5, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <__swsetup_r+0x1a>
 800614c:	0028      	movs	r0, r5
 800614e:	f000 f961 	bl	8006414 <__sinit>
 8006152:	4b31      	ldr	r3, [pc, #196]	; (8006218 <__swsetup_r+0xe0>)
 8006154:	429c      	cmp	r4, r3
 8006156:	d10f      	bne.n	8006178 <__swsetup_r+0x40>
 8006158:	686c      	ldr	r4, [r5, #4]
 800615a:	230c      	movs	r3, #12
 800615c:	5ee2      	ldrsh	r2, [r4, r3]
 800615e:	b293      	uxth	r3, r2
 8006160:	0719      	lsls	r1, r3, #28
 8006162:	d42d      	bmi.n	80061c0 <__swsetup_r+0x88>
 8006164:	06d9      	lsls	r1, r3, #27
 8006166:	d411      	bmi.n	800618c <__swsetup_r+0x54>
 8006168:	2309      	movs	r3, #9
 800616a:	2001      	movs	r0, #1
 800616c:	6033      	str	r3, [r6, #0]
 800616e:	3337      	adds	r3, #55	; 0x37
 8006170:	4313      	orrs	r3, r2
 8006172:	81a3      	strh	r3, [r4, #12]
 8006174:	4240      	negs	r0, r0
 8006176:	bd70      	pop	{r4, r5, r6, pc}
 8006178:	4b28      	ldr	r3, [pc, #160]	; (800621c <__swsetup_r+0xe4>)
 800617a:	429c      	cmp	r4, r3
 800617c:	d101      	bne.n	8006182 <__swsetup_r+0x4a>
 800617e:	68ac      	ldr	r4, [r5, #8]
 8006180:	e7eb      	b.n	800615a <__swsetup_r+0x22>
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <__swsetup_r+0xe8>)
 8006184:	429c      	cmp	r4, r3
 8006186:	d1e8      	bne.n	800615a <__swsetup_r+0x22>
 8006188:	68ec      	ldr	r4, [r5, #12]
 800618a:	e7e6      	b.n	800615a <__swsetup_r+0x22>
 800618c:	075b      	lsls	r3, r3, #29
 800618e:	d513      	bpl.n	80061b8 <__swsetup_r+0x80>
 8006190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006192:	2900      	cmp	r1, #0
 8006194:	d008      	beq.n	80061a8 <__swsetup_r+0x70>
 8006196:	0023      	movs	r3, r4
 8006198:	3344      	adds	r3, #68	; 0x44
 800619a:	4299      	cmp	r1, r3
 800619c:	d002      	beq.n	80061a4 <__swsetup_r+0x6c>
 800619e:	0030      	movs	r0, r6
 80061a0:	f000 fa38 	bl	8006614 <_free_r>
 80061a4:	2300      	movs	r3, #0
 80061a6:	6363      	str	r3, [r4, #52]	; 0x34
 80061a8:	2224      	movs	r2, #36	; 0x24
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	4393      	bics	r3, r2
 80061ae:	81a3      	strh	r3, [r4, #12]
 80061b0:	2300      	movs	r3, #0
 80061b2:	6063      	str	r3, [r4, #4]
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	2308      	movs	r3, #8
 80061ba:	89a2      	ldrh	r2, [r4, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	81a3      	strh	r3, [r4, #12]
 80061c0:	6923      	ldr	r3, [r4, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <__swsetup_r+0xa6>
 80061c6:	21a0      	movs	r1, #160	; 0xa0
 80061c8:	2280      	movs	r2, #128	; 0x80
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	0089      	lsls	r1, r1, #2
 80061ce:	0092      	lsls	r2, r2, #2
 80061d0:	400b      	ands	r3, r1
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <__swsetup_r+0xa6>
 80061d6:	0021      	movs	r1, r4
 80061d8:	0030      	movs	r0, r6
 80061da:	f000 f9d7 	bl	800658c <__smakebuf_r>
 80061de:	2301      	movs	r3, #1
 80061e0:	89a2      	ldrh	r2, [r4, #12]
 80061e2:	4013      	ands	r3, r2
 80061e4:	d011      	beq.n	800620a <__swsetup_r+0xd2>
 80061e6:	2300      	movs	r3, #0
 80061e8:	60a3      	str	r3, [r4, #8]
 80061ea:	6963      	ldr	r3, [r4, #20]
 80061ec:	425b      	negs	r3, r3
 80061ee:	61a3      	str	r3, [r4, #24]
 80061f0:	2000      	movs	r0, #0
 80061f2:	6923      	ldr	r3, [r4, #16]
 80061f4:	4283      	cmp	r3, r0
 80061f6:	d1be      	bne.n	8006176 <__swsetup_r+0x3e>
 80061f8:	230c      	movs	r3, #12
 80061fa:	5ee2      	ldrsh	r2, [r4, r3]
 80061fc:	0613      	lsls	r3, r2, #24
 80061fe:	d5ba      	bpl.n	8006176 <__swsetup_r+0x3e>
 8006200:	2340      	movs	r3, #64	; 0x40
 8006202:	4313      	orrs	r3, r2
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	3801      	subs	r0, #1
 8006208:	e7b5      	b.n	8006176 <__swsetup_r+0x3e>
 800620a:	0792      	lsls	r2, r2, #30
 800620c:	d400      	bmi.n	8006210 <__swsetup_r+0xd8>
 800620e:	6963      	ldr	r3, [r4, #20]
 8006210:	60a3      	str	r3, [r4, #8]
 8006212:	e7ed      	b.n	80061f0 <__swsetup_r+0xb8>
 8006214:	20000018 	.word	0x20000018
 8006218:	080073dc 	.word	0x080073dc
 800621c:	080073fc 	.word	0x080073fc
 8006220:	080073bc 	.word	0x080073bc

08006224 <__sflush_r>:
 8006224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006226:	898a      	ldrh	r2, [r1, #12]
 8006228:	0005      	movs	r5, r0
 800622a:	000c      	movs	r4, r1
 800622c:	0713      	lsls	r3, r2, #28
 800622e:	d460      	bmi.n	80062f2 <__sflush_r+0xce>
 8006230:	684b      	ldr	r3, [r1, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	dc04      	bgt.n	8006240 <__sflush_r+0x1c>
 8006236:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	dc01      	bgt.n	8006240 <__sflush_r+0x1c>
 800623c:	2000      	movs	r0, #0
 800623e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006240:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006242:	2f00      	cmp	r7, #0
 8006244:	d0fa      	beq.n	800623c <__sflush_r+0x18>
 8006246:	2300      	movs	r3, #0
 8006248:	682e      	ldr	r6, [r5, #0]
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	2380      	movs	r3, #128	; 0x80
 800624e:	015b      	lsls	r3, r3, #5
 8006250:	6a21      	ldr	r1, [r4, #32]
 8006252:	401a      	ands	r2, r3
 8006254:	d034      	beq.n	80062c0 <__sflush_r+0x9c>
 8006256:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	075b      	lsls	r3, r3, #29
 800625c:	d506      	bpl.n	800626c <__sflush_r+0x48>
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	1ac0      	subs	r0, r0, r3
 8006262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <__sflush_r+0x48>
 8006268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800626a:	1ac0      	subs	r0, r0, r3
 800626c:	0002      	movs	r2, r0
 800626e:	6a21      	ldr	r1, [r4, #32]
 8006270:	2300      	movs	r3, #0
 8006272:	0028      	movs	r0, r5
 8006274:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006276:	47b8      	blx	r7
 8006278:	89a1      	ldrh	r1, [r4, #12]
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	d106      	bne.n	800628c <__sflush_r+0x68>
 800627e:	682b      	ldr	r3, [r5, #0]
 8006280:	2b1d      	cmp	r3, #29
 8006282:	d830      	bhi.n	80062e6 <__sflush_r+0xc2>
 8006284:	4a2b      	ldr	r2, [pc, #172]	; (8006334 <__sflush_r+0x110>)
 8006286:	40da      	lsrs	r2, r3
 8006288:	07d3      	lsls	r3, r2, #31
 800628a:	d52c      	bpl.n	80062e6 <__sflush_r+0xc2>
 800628c:	2300      	movs	r3, #0
 800628e:	6063      	str	r3, [r4, #4]
 8006290:	6923      	ldr	r3, [r4, #16]
 8006292:	6023      	str	r3, [r4, #0]
 8006294:	04cb      	lsls	r3, r1, #19
 8006296:	d505      	bpl.n	80062a4 <__sflush_r+0x80>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <__sflush_r+0x7e>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d100      	bne.n	80062a4 <__sflush_r+0x80>
 80062a2:	6560      	str	r0, [r4, #84]	; 0x54
 80062a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062a6:	602e      	str	r6, [r5, #0]
 80062a8:	2900      	cmp	r1, #0
 80062aa:	d0c7      	beq.n	800623c <__sflush_r+0x18>
 80062ac:	0023      	movs	r3, r4
 80062ae:	3344      	adds	r3, #68	; 0x44
 80062b0:	4299      	cmp	r1, r3
 80062b2:	d002      	beq.n	80062ba <__sflush_r+0x96>
 80062b4:	0028      	movs	r0, r5
 80062b6:	f000 f9ad 	bl	8006614 <_free_r>
 80062ba:	2000      	movs	r0, #0
 80062bc:	6360      	str	r0, [r4, #52]	; 0x34
 80062be:	e7be      	b.n	800623e <__sflush_r+0x1a>
 80062c0:	2301      	movs	r3, #1
 80062c2:	0028      	movs	r0, r5
 80062c4:	47b8      	blx	r7
 80062c6:	1c43      	adds	r3, r0, #1
 80062c8:	d1c6      	bne.n	8006258 <__sflush_r+0x34>
 80062ca:	682b      	ldr	r3, [r5, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0c3      	beq.n	8006258 <__sflush_r+0x34>
 80062d0:	2b1d      	cmp	r3, #29
 80062d2:	d001      	beq.n	80062d8 <__sflush_r+0xb4>
 80062d4:	2b16      	cmp	r3, #22
 80062d6:	d101      	bne.n	80062dc <__sflush_r+0xb8>
 80062d8:	602e      	str	r6, [r5, #0]
 80062da:	e7af      	b.n	800623c <__sflush_r+0x18>
 80062dc:	2340      	movs	r3, #64	; 0x40
 80062de:	89a2      	ldrh	r2, [r4, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	e7ab      	b.n	800623e <__sflush_r+0x1a>
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	430b      	orrs	r3, r1
 80062ea:	2001      	movs	r0, #1
 80062ec:	81a3      	strh	r3, [r4, #12]
 80062ee:	4240      	negs	r0, r0
 80062f0:	e7a5      	b.n	800623e <__sflush_r+0x1a>
 80062f2:	690f      	ldr	r7, [r1, #16]
 80062f4:	2f00      	cmp	r7, #0
 80062f6:	d0a1      	beq.n	800623c <__sflush_r+0x18>
 80062f8:	680b      	ldr	r3, [r1, #0]
 80062fa:	600f      	str	r7, [r1, #0]
 80062fc:	1bdb      	subs	r3, r3, r7
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	2300      	movs	r3, #0
 8006302:	0792      	lsls	r2, r2, #30
 8006304:	d100      	bne.n	8006308 <__sflush_r+0xe4>
 8006306:	694b      	ldr	r3, [r1, #20]
 8006308:	60a3      	str	r3, [r4, #8]
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	dc00      	bgt.n	8006312 <__sflush_r+0xee>
 8006310:	e794      	b.n	800623c <__sflush_r+0x18>
 8006312:	9b01      	ldr	r3, [sp, #4]
 8006314:	003a      	movs	r2, r7
 8006316:	6a21      	ldr	r1, [r4, #32]
 8006318:	0028      	movs	r0, r5
 800631a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800631c:	47b0      	blx	r6
 800631e:	2800      	cmp	r0, #0
 8006320:	dc03      	bgt.n	800632a <__sflush_r+0x106>
 8006322:	2340      	movs	r3, #64	; 0x40
 8006324:	89a2      	ldrh	r2, [r4, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	e7df      	b.n	80062ea <__sflush_r+0xc6>
 800632a:	9b01      	ldr	r3, [sp, #4]
 800632c:	183f      	adds	r7, r7, r0
 800632e:	1a1b      	subs	r3, r3, r0
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	e7ea      	b.n	800630a <__sflush_r+0xe6>
 8006334:	20400001 	.word	0x20400001

08006338 <_fflush_r>:
 8006338:	690b      	ldr	r3, [r1, #16]
 800633a:	b570      	push	{r4, r5, r6, lr}
 800633c:	0005      	movs	r5, r0
 800633e:	000c      	movs	r4, r1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <_fflush_r+0x10>
 8006344:	2000      	movs	r0, #0
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	2800      	cmp	r0, #0
 800634a:	d004      	beq.n	8006356 <_fflush_r+0x1e>
 800634c:	6983      	ldr	r3, [r0, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <_fflush_r+0x1e>
 8006352:	f000 f85f 	bl	8006414 <__sinit>
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <_fflush_r+0x4c>)
 8006358:	429c      	cmp	r4, r3
 800635a:	d109      	bne.n	8006370 <_fflush_r+0x38>
 800635c:	686c      	ldr	r4, [r5, #4]
 800635e:	220c      	movs	r2, #12
 8006360:	5ea3      	ldrsh	r3, [r4, r2]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0ee      	beq.n	8006344 <_fflush_r+0xc>
 8006366:	0021      	movs	r1, r4
 8006368:	0028      	movs	r0, r5
 800636a:	f7ff ff5b 	bl	8006224 <__sflush_r>
 800636e:	e7ea      	b.n	8006346 <_fflush_r+0xe>
 8006370:	4b05      	ldr	r3, [pc, #20]	; (8006388 <_fflush_r+0x50>)
 8006372:	429c      	cmp	r4, r3
 8006374:	d101      	bne.n	800637a <_fflush_r+0x42>
 8006376:	68ac      	ldr	r4, [r5, #8]
 8006378:	e7f1      	b.n	800635e <_fflush_r+0x26>
 800637a:	4b04      	ldr	r3, [pc, #16]	; (800638c <_fflush_r+0x54>)
 800637c:	429c      	cmp	r4, r3
 800637e:	d1ee      	bne.n	800635e <_fflush_r+0x26>
 8006380:	68ec      	ldr	r4, [r5, #12]
 8006382:	e7ec      	b.n	800635e <_fflush_r+0x26>
 8006384:	080073dc 	.word	0x080073dc
 8006388:	080073fc 	.word	0x080073fc
 800638c:	080073bc 	.word	0x080073bc

08006390 <std>:
 8006390:	2300      	movs	r3, #0
 8006392:	b510      	push	{r4, lr}
 8006394:	0004      	movs	r4, r0
 8006396:	6003      	str	r3, [r0, #0]
 8006398:	6043      	str	r3, [r0, #4]
 800639a:	6083      	str	r3, [r0, #8]
 800639c:	8181      	strh	r1, [r0, #12]
 800639e:	6643      	str	r3, [r0, #100]	; 0x64
 80063a0:	81c2      	strh	r2, [r0, #14]
 80063a2:	6103      	str	r3, [r0, #16]
 80063a4:	6143      	str	r3, [r0, #20]
 80063a6:	6183      	str	r3, [r0, #24]
 80063a8:	0019      	movs	r1, r3
 80063aa:	2208      	movs	r2, #8
 80063ac:	305c      	adds	r0, #92	; 0x5c
 80063ae:	f7ff fdc0 	bl	8005f32 <memset>
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <std+0x38>)
 80063b4:	6224      	str	r4, [r4, #32]
 80063b6:	6263      	str	r3, [r4, #36]	; 0x24
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <std+0x3c>)
 80063ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80063bc:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <std+0x40>)
 80063be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <std+0x44>)
 80063c2:	6323      	str	r3, [r4, #48]	; 0x30
 80063c4:	bd10      	pop	{r4, pc}
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	08006fb1 	.word	0x08006fb1
 80063cc:	08006fd9 	.word	0x08006fd9
 80063d0:	08007011 	.word	0x08007011
 80063d4:	0800703d 	.word	0x0800703d

080063d8 <_cleanup_r>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	4902      	ldr	r1, [pc, #8]	; (80063e4 <_cleanup_r+0xc>)
 80063dc:	f000 f88c 	bl	80064f8 <_fwalk_reent>
 80063e0:	bd10      	pop	{r4, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	08006339 	.word	0x08006339

080063e8 <__sfmoreglue>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	2568      	movs	r5, #104	; 0x68
 80063ec:	1e4a      	subs	r2, r1, #1
 80063ee:	4355      	muls	r5, r2
 80063f0:	000e      	movs	r6, r1
 80063f2:	0029      	movs	r1, r5
 80063f4:	3174      	adds	r1, #116	; 0x74
 80063f6:	f000 f957 	bl	80066a8 <_malloc_r>
 80063fa:	1e04      	subs	r4, r0, #0
 80063fc:	d008      	beq.n	8006410 <__sfmoreglue+0x28>
 80063fe:	2100      	movs	r1, #0
 8006400:	002a      	movs	r2, r5
 8006402:	6001      	str	r1, [r0, #0]
 8006404:	6046      	str	r6, [r0, #4]
 8006406:	300c      	adds	r0, #12
 8006408:	60a0      	str	r0, [r4, #8]
 800640a:	3268      	adds	r2, #104	; 0x68
 800640c:	f7ff fd91 	bl	8005f32 <memset>
 8006410:	0020      	movs	r0, r4
 8006412:	bd70      	pop	{r4, r5, r6, pc}

08006414 <__sinit>:
 8006414:	6983      	ldr	r3, [r0, #24]
 8006416:	b513      	push	{r0, r1, r4, lr}
 8006418:	0004      	movs	r4, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d128      	bne.n	8006470 <__sinit+0x5c>
 800641e:	6483      	str	r3, [r0, #72]	; 0x48
 8006420:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006422:	6503      	str	r3, [r0, #80]	; 0x50
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <__sinit+0x60>)
 8006426:	4a14      	ldr	r2, [pc, #80]	; (8006478 <__sinit+0x64>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6282      	str	r2, [r0, #40]	; 0x28
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	4298      	cmp	r0, r3
 8006430:	d101      	bne.n	8006436 <__sinit+0x22>
 8006432:	2301      	movs	r3, #1
 8006434:	6183      	str	r3, [r0, #24]
 8006436:	0020      	movs	r0, r4
 8006438:	f000 f820 	bl	800647c <__sfp>
 800643c:	6060      	str	r0, [r4, #4]
 800643e:	0020      	movs	r0, r4
 8006440:	f000 f81c 	bl	800647c <__sfp>
 8006444:	60a0      	str	r0, [r4, #8]
 8006446:	0020      	movs	r0, r4
 8006448:	f000 f818 	bl	800647c <__sfp>
 800644c:	2200      	movs	r2, #0
 800644e:	60e0      	str	r0, [r4, #12]
 8006450:	2104      	movs	r1, #4
 8006452:	6860      	ldr	r0, [r4, #4]
 8006454:	f7ff ff9c 	bl	8006390 <std>
 8006458:	2201      	movs	r2, #1
 800645a:	2109      	movs	r1, #9
 800645c:	68a0      	ldr	r0, [r4, #8]
 800645e:	f7ff ff97 	bl	8006390 <std>
 8006462:	2202      	movs	r2, #2
 8006464:	2112      	movs	r1, #18
 8006466:	68e0      	ldr	r0, [r4, #12]
 8006468:	f7ff ff92 	bl	8006390 <std>
 800646c:	2301      	movs	r3, #1
 800646e:	61a3      	str	r3, [r4, #24]
 8006470:	bd13      	pop	{r0, r1, r4, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	080073b8 	.word	0x080073b8
 8006478:	080063d9 	.word	0x080063d9

0800647c <__sfp>:
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647e:	4b1c      	ldr	r3, [pc, #112]	; (80064f0 <__sfp+0x74>)
 8006480:	0007      	movs	r7, r0
 8006482:	681e      	ldr	r6, [r3, #0]
 8006484:	69b3      	ldr	r3, [r6, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d102      	bne.n	8006490 <__sfp+0x14>
 800648a:	0030      	movs	r0, r6
 800648c:	f7ff ffc2 	bl	8006414 <__sinit>
 8006490:	3648      	adds	r6, #72	; 0x48
 8006492:	68b4      	ldr	r4, [r6, #8]
 8006494:	6873      	ldr	r3, [r6, #4]
 8006496:	3b01      	subs	r3, #1
 8006498:	d504      	bpl.n	80064a4 <__sfp+0x28>
 800649a:	6833      	ldr	r3, [r6, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <__sfp+0x34>
 80064a0:	6836      	ldr	r6, [r6, #0]
 80064a2:	e7f6      	b.n	8006492 <__sfp+0x16>
 80064a4:	220c      	movs	r2, #12
 80064a6:	5ea5      	ldrsh	r5, [r4, r2]
 80064a8:	2d00      	cmp	r5, #0
 80064aa:	d00d      	beq.n	80064c8 <__sfp+0x4c>
 80064ac:	3468      	adds	r4, #104	; 0x68
 80064ae:	e7f2      	b.n	8006496 <__sfp+0x1a>
 80064b0:	2104      	movs	r1, #4
 80064b2:	0038      	movs	r0, r7
 80064b4:	f7ff ff98 	bl	80063e8 <__sfmoreglue>
 80064b8:	6030      	str	r0, [r6, #0]
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d1f0      	bne.n	80064a0 <__sfp+0x24>
 80064be:	230c      	movs	r3, #12
 80064c0:	0004      	movs	r4, r0
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	0020      	movs	r0, r4
 80064c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c8:	0020      	movs	r0, r4
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <__sfp+0x78>)
 80064cc:	6665      	str	r5, [r4, #100]	; 0x64
 80064ce:	6025      	str	r5, [r4, #0]
 80064d0:	6065      	str	r5, [r4, #4]
 80064d2:	60a5      	str	r5, [r4, #8]
 80064d4:	60e3      	str	r3, [r4, #12]
 80064d6:	6125      	str	r5, [r4, #16]
 80064d8:	6165      	str	r5, [r4, #20]
 80064da:	61a5      	str	r5, [r4, #24]
 80064dc:	2208      	movs	r2, #8
 80064de:	0029      	movs	r1, r5
 80064e0:	305c      	adds	r0, #92	; 0x5c
 80064e2:	f7ff fd26 	bl	8005f32 <memset>
 80064e6:	6365      	str	r5, [r4, #52]	; 0x34
 80064e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80064ea:	64a5      	str	r5, [r4, #72]	; 0x48
 80064ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 80064ee:	e7e9      	b.n	80064c4 <__sfp+0x48>
 80064f0:	080073b8 	.word	0x080073b8
 80064f4:	ffff0001 	.word	0xffff0001

080064f8 <_fwalk_reent>:
 80064f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064fa:	0004      	movs	r4, r0
 80064fc:	0007      	movs	r7, r0
 80064fe:	2600      	movs	r6, #0
 8006500:	9101      	str	r1, [sp, #4]
 8006502:	3448      	adds	r4, #72	; 0x48
 8006504:	2c00      	cmp	r4, #0
 8006506:	d101      	bne.n	800650c <_fwalk_reent+0x14>
 8006508:	0030      	movs	r0, r6
 800650a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	68a5      	ldr	r5, [r4, #8]
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	9b00      	ldr	r3, [sp, #0]
 8006514:	3b01      	subs	r3, #1
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	d501      	bpl.n	800651e <_fwalk_reent+0x26>
 800651a:	6824      	ldr	r4, [r4, #0]
 800651c:	e7f2      	b.n	8006504 <_fwalk_reent+0xc>
 800651e:	89ab      	ldrh	r3, [r5, #12]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d908      	bls.n	8006536 <_fwalk_reent+0x3e>
 8006524:	220e      	movs	r2, #14
 8006526:	5eab      	ldrsh	r3, [r5, r2]
 8006528:	3301      	adds	r3, #1
 800652a:	d004      	beq.n	8006536 <_fwalk_reent+0x3e>
 800652c:	0029      	movs	r1, r5
 800652e:	0038      	movs	r0, r7
 8006530:	9b01      	ldr	r3, [sp, #4]
 8006532:	4798      	blx	r3
 8006534:	4306      	orrs	r6, r0
 8006536:	3568      	adds	r5, #104	; 0x68
 8006538:	e7eb      	b.n	8006512 <_fwalk_reent+0x1a>
	...

0800653c <__swhatbuf_r>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	000e      	movs	r6, r1
 8006540:	001d      	movs	r5, r3
 8006542:	230e      	movs	r3, #14
 8006544:	5ec9      	ldrsh	r1, [r1, r3]
 8006546:	b096      	sub	sp, #88	; 0x58
 8006548:	0014      	movs	r4, r2
 800654a:	2900      	cmp	r1, #0
 800654c:	da07      	bge.n	800655e <__swhatbuf_r+0x22>
 800654e:	2300      	movs	r3, #0
 8006550:	602b      	str	r3, [r5, #0]
 8006552:	89b3      	ldrh	r3, [r6, #12]
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	d411      	bmi.n	800657c <__swhatbuf_r+0x40>
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	e00f      	b.n	800657e <__swhatbuf_r+0x42>
 800655e:	466a      	mov	r2, sp
 8006560:	f000 fd98 	bl	8007094 <_fstat_r>
 8006564:	2800      	cmp	r0, #0
 8006566:	dbf2      	blt.n	800654e <__swhatbuf_r+0x12>
 8006568:	22f0      	movs	r2, #240	; 0xf0
 800656a:	9b01      	ldr	r3, [sp, #4]
 800656c:	0212      	lsls	r2, r2, #8
 800656e:	4013      	ands	r3, r2
 8006570:	4a05      	ldr	r2, [pc, #20]	; (8006588 <__swhatbuf_r+0x4c>)
 8006572:	189b      	adds	r3, r3, r2
 8006574:	425a      	negs	r2, r3
 8006576:	4153      	adcs	r3, r2
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	e7ed      	b.n	8006558 <__swhatbuf_r+0x1c>
 800657c:	2340      	movs	r3, #64	; 0x40
 800657e:	2000      	movs	r0, #0
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	b016      	add	sp, #88	; 0x58
 8006584:	bd70      	pop	{r4, r5, r6, pc}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	ffffe000 	.word	0xffffe000

0800658c <__smakebuf_r>:
 800658c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800658e:	2602      	movs	r6, #2
 8006590:	898b      	ldrh	r3, [r1, #12]
 8006592:	0005      	movs	r5, r0
 8006594:	000c      	movs	r4, r1
 8006596:	4233      	tst	r3, r6
 8006598:	d006      	beq.n	80065a8 <__smakebuf_r+0x1c>
 800659a:	0023      	movs	r3, r4
 800659c:	3347      	adds	r3, #71	; 0x47
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	6123      	str	r3, [r4, #16]
 80065a2:	2301      	movs	r3, #1
 80065a4:	6163      	str	r3, [r4, #20]
 80065a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80065a8:	ab01      	add	r3, sp, #4
 80065aa:	466a      	mov	r2, sp
 80065ac:	f7ff ffc6 	bl	800653c <__swhatbuf_r>
 80065b0:	9900      	ldr	r1, [sp, #0]
 80065b2:	0007      	movs	r7, r0
 80065b4:	0028      	movs	r0, r5
 80065b6:	f000 f877 	bl	80066a8 <_malloc_r>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d108      	bne.n	80065d0 <__smakebuf_r+0x44>
 80065be:	220c      	movs	r2, #12
 80065c0:	5ea3      	ldrsh	r3, [r4, r2]
 80065c2:	059a      	lsls	r2, r3, #22
 80065c4:	d4ef      	bmi.n	80065a6 <__smakebuf_r+0x1a>
 80065c6:	2203      	movs	r2, #3
 80065c8:	4393      	bics	r3, r2
 80065ca:	431e      	orrs	r6, r3
 80065cc:	81a6      	strh	r6, [r4, #12]
 80065ce:	e7e4      	b.n	800659a <__smakebuf_r+0xe>
 80065d0:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <__smakebuf_r+0x84>)
 80065d2:	62ab      	str	r3, [r5, #40]	; 0x28
 80065d4:	2380      	movs	r3, #128	; 0x80
 80065d6:	89a2      	ldrh	r2, [r4, #12]
 80065d8:	6020      	str	r0, [r4, #0]
 80065da:	4313      	orrs	r3, r2
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	6120      	str	r0, [r4, #16]
 80065e2:	6163      	str	r3, [r4, #20]
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <__smakebuf_r+0x7a>
 80065ea:	230e      	movs	r3, #14
 80065ec:	5ee1      	ldrsh	r1, [r4, r3]
 80065ee:	0028      	movs	r0, r5
 80065f0:	f000 fd62 	bl	80070b8 <_isatty_r>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d006      	beq.n	8006606 <__smakebuf_r+0x7a>
 80065f8:	2203      	movs	r2, #3
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	4393      	bics	r3, r2
 80065fe:	001a      	movs	r2, r3
 8006600:	2301      	movs	r3, #1
 8006602:	4313      	orrs	r3, r2
 8006604:	81a3      	strh	r3, [r4, #12]
 8006606:	89a0      	ldrh	r0, [r4, #12]
 8006608:	4338      	orrs	r0, r7
 800660a:	81a0      	strh	r0, [r4, #12]
 800660c:	e7cb      	b.n	80065a6 <__smakebuf_r+0x1a>
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	080063d9 	.word	0x080063d9

08006614 <_free_r>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	0005      	movs	r5, r0
 8006618:	2900      	cmp	r1, #0
 800661a:	d010      	beq.n	800663e <_free_r+0x2a>
 800661c:	1f0c      	subs	r4, r1, #4
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	da00      	bge.n	8006626 <_free_r+0x12>
 8006624:	18e4      	adds	r4, r4, r3
 8006626:	0028      	movs	r0, r5
 8006628:	f000 fd8a 	bl	8007140 <__malloc_lock>
 800662c:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <_free_r+0x90>)
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <_free_r+0x2c>
 8006634:	6063      	str	r3, [r4, #4]
 8006636:	6014      	str	r4, [r2, #0]
 8006638:	0028      	movs	r0, r5
 800663a:	f000 fd82 	bl	8007142 <__malloc_unlock>
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	42a3      	cmp	r3, r4
 8006642:	d909      	bls.n	8006658 <_free_r+0x44>
 8006644:	6821      	ldr	r1, [r4, #0]
 8006646:	1860      	adds	r0, r4, r1
 8006648:	4283      	cmp	r3, r0
 800664a:	d1f3      	bne.n	8006634 <_free_r+0x20>
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	1841      	adds	r1, r0, r1
 8006652:	6021      	str	r1, [r4, #0]
 8006654:	e7ee      	b.n	8006634 <_free_r+0x20>
 8006656:	0013      	movs	r3, r2
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	2a00      	cmp	r2, #0
 800665c:	d001      	beq.n	8006662 <_free_r+0x4e>
 800665e:	42a2      	cmp	r2, r4
 8006660:	d9f9      	bls.n	8006656 <_free_r+0x42>
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	1858      	adds	r0, r3, r1
 8006666:	42a0      	cmp	r0, r4
 8006668:	d10b      	bne.n	8006682 <_free_r+0x6e>
 800666a:	6820      	ldr	r0, [r4, #0]
 800666c:	1809      	adds	r1, r1, r0
 800666e:	1858      	adds	r0, r3, r1
 8006670:	6019      	str	r1, [r3, #0]
 8006672:	4282      	cmp	r2, r0
 8006674:	d1e0      	bne.n	8006638 <_free_r+0x24>
 8006676:	6810      	ldr	r0, [r2, #0]
 8006678:	6852      	ldr	r2, [r2, #4]
 800667a:	1841      	adds	r1, r0, r1
 800667c:	6019      	str	r1, [r3, #0]
 800667e:	605a      	str	r2, [r3, #4]
 8006680:	e7da      	b.n	8006638 <_free_r+0x24>
 8006682:	42a0      	cmp	r0, r4
 8006684:	d902      	bls.n	800668c <_free_r+0x78>
 8006686:	230c      	movs	r3, #12
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	e7d5      	b.n	8006638 <_free_r+0x24>
 800668c:	6821      	ldr	r1, [r4, #0]
 800668e:	1860      	adds	r0, r4, r1
 8006690:	4282      	cmp	r2, r0
 8006692:	d103      	bne.n	800669c <_free_r+0x88>
 8006694:	6810      	ldr	r0, [r2, #0]
 8006696:	6852      	ldr	r2, [r2, #4]
 8006698:	1841      	adds	r1, r0, r1
 800669a:	6021      	str	r1, [r4, #0]
 800669c:	6062      	str	r2, [r4, #4]
 800669e:	605c      	str	r4, [r3, #4]
 80066a0:	e7ca      	b.n	8006638 <_free_r+0x24>
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	20001040 	.word	0x20001040

080066a8 <_malloc_r>:
 80066a8:	2303      	movs	r3, #3
 80066aa:	b570      	push	{r4, r5, r6, lr}
 80066ac:	1ccd      	adds	r5, r1, #3
 80066ae:	439d      	bics	r5, r3
 80066b0:	3508      	adds	r5, #8
 80066b2:	0006      	movs	r6, r0
 80066b4:	2d0c      	cmp	r5, #12
 80066b6:	d21e      	bcs.n	80066f6 <_malloc_r+0x4e>
 80066b8:	250c      	movs	r5, #12
 80066ba:	42a9      	cmp	r1, r5
 80066bc:	d81d      	bhi.n	80066fa <_malloc_r+0x52>
 80066be:	0030      	movs	r0, r6
 80066c0:	f000 fd3e 	bl	8007140 <__malloc_lock>
 80066c4:	4a25      	ldr	r2, [pc, #148]	; (800675c <_malloc_r+0xb4>)
 80066c6:	6814      	ldr	r4, [r2, #0]
 80066c8:	0021      	movs	r1, r4
 80066ca:	2900      	cmp	r1, #0
 80066cc:	d119      	bne.n	8006702 <_malloc_r+0x5a>
 80066ce:	4c24      	ldr	r4, [pc, #144]	; (8006760 <_malloc_r+0xb8>)
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <_malloc_r+0x36>
 80066d6:	0030      	movs	r0, r6
 80066d8:	f000 fc58 	bl	8006f8c <_sbrk_r>
 80066dc:	6020      	str	r0, [r4, #0]
 80066de:	0029      	movs	r1, r5
 80066e0:	0030      	movs	r0, r6
 80066e2:	f000 fc53 	bl	8006f8c <_sbrk_r>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	d12b      	bne.n	8006742 <_malloc_r+0x9a>
 80066ea:	230c      	movs	r3, #12
 80066ec:	0030      	movs	r0, r6
 80066ee:	6033      	str	r3, [r6, #0]
 80066f0:	f000 fd27 	bl	8007142 <__malloc_unlock>
 80066f4:	e003      	b.n	80066fe <_malloc_r+0x56>
 80066f6:	2d00      	cmp	r5, #0
 80066f8:	dadf      	bge.n	80066ba <_malloc_r+0x12>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	2000      	movs	r0, #0
 8006700:	bd70      	pop	{r4, r5, r6, pc}
 8006702:	680b      	ldr	r3, [r1, #0]
 8006704:	1b5b      	subs	r3, r3, r5
 8006706:	d419      	bmi.n	800673c <_malloc_r+0x94>
 8006708:	2b0b      	cmp	r3, #11
 800670a:	d903      	bls.n	8006714 <_malloc_r+0x6c>
 800670c:	600b      	str	r3, [r1, #0]
 800670e:	18cc      	adds	r4, r1, r3
 8006710:	6025      	str	r5, [r4, #0]
 8006712:	e003      	b.n	800671c <_malloc_r+0x74>
 8006714:	684b      	ldr	r3, [r1, #4]
 8006716:	428c      	cmp	r4, r1
 8006718:	d10d      	bne.n	8006736 <_malloc_r+0x8e>
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	0030      	movs	r0, r6
 800671e:	f000 fd10 	bl	8007142 <__malloc_unlock>
 8006722:	0020      	movs	r0, r4
 8006724:	2207      	movs	r2, #7
 8006726:	300b      	adds	r0, #11
 8006728:	1d23      	adds	r3, r4, #4
 800672a:	4390      	bics	r0, r2
 800672c:	1ac3      	subs	r3, r0, r3
 800672e:	d0e7      	beq.n	8006700 <_malloc_r+0x58>
 8006730:	425a      	negs	r2, r3
 8006732:	50e2      	str	r2, [r4, r3]
 8006734:	e7e4      	b.n	8006700 <_malloc_r+0x58>
 8006736:	6063      	str	r3, [r4, #4]
 8006738:	000c      	movs	r4, r1
 800673a:	e7ef      	b.n	800671c <_malloc_r+0x74>
 800673c:	000c      	movs	r4, r1
 800673e:	6849      	ldr	r1, [r1, #4]
 8006740:	e7c3      	b.n	80066ca <_malloc_r+0x22>
 8006742:	2303      	movs	r3, #3
 8006744:	1cc4      	adds	r4, r0, #3
 8006746:	439c      	bics	r4, r3
 8006748:	42a0      	cmp	r0, r4
 800674a:	d0e1      	beq.n	8006710 <_malloc_r+0x68>
 800674c:	1a21      	subs	r1, r4, r0
 800674e:	0030      	movs	r0, r6
 8006750:	f000 fc1c 	bl	8006f8c <_sbrk_r>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d1db      	bne.n	8006710 <_malloc_r+0x68>
 8006758:	e7c7      	b.n	80066ea <_malloc_r+0x42>
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	20001040 	.word	0x20001040
 8006760:	20001044 	.word	0x20001044

08006764 <__ssputs_r>:
 8006764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006766:	688e      	ldr	r6, [r1, #8]
 8006768:	b085      	sub	sp, #20
 800676a:	0007      	movs	r7, r0
 800676c:	000c      	movs	r4, r1
 800676e:	9203      	str	r2, [sp, #12]
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	429e      	cmp	r6, r3
 8006774:	d83c      	bhi.n	80067f0 <__ssputs_r+0x8c>
 8006776:	2390      	movs	r3, #144	; 0x90
 8006778:	898a      	ldrh	r2, [r1, #12]
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	421a      	tst	r2, r3
 800677e:	d034      	beq.n	80067ea <__ssputs_r+0x86>
 8006780:	2503      	movs	r5, #3
 8006782:	6909      	ldr	r1, [r1, #16]
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	1a5b      	subs	r3, r3, r1
 8006788:	9302      	str	r3, [sp, #8]
 800678a:	6963      	ldr	r3, [r4, #20]
 800678c:	9802      	ldr	r0, [sp, #8]
 800678e:	435d      	muls	r5, r3
 8006790:	0feb      	lsrs	r3, r5, #31
 8006792:	195d      	adds	r5, r3, r5
 8006794:	9b01      	ldr	r3, [sp, #4]
 8006796:	106d      	asrs	r5, r5, #1
 8006798:	3301      	adds	r3, #1
 800679a:	181b      	adds	r3, r3, r0
 800679c:	42ab      	cmp	r3, r5
 800679e:	d900      	bls.n	80067a2 <__ssputs_r+0x3e>
 80067a0:	001d      	movs	r5, r3
 80067a2:	0553      	lsls	r3, r2, #21
 80067a4:	d532      	bpl.n	800680c <__ssputs_r+0xa8>
 80067a6:	0029      	movs	r1, r5
 80067a8:	0038      	movs	r0, r7
 80067aa:	f7ff ff7d 	bl	80066a8 <_malloc_r>
 80067ae:	1e06      	subs	r6, r0, #0
 80067b0:	d109      	bne.n	80067c6 <__ssputs_r+0x62>
 80067b2:	230c      	movs	r3, #12
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	2340      	movs	r3, #64	; 0x40
 80067b8:	2001      	movs	r0, #1
 80067ba:	89a2      	ldrh	r2, [r4, #12]
 80067bc:	4240      	negs	r0, r0
 80067be:	4313      	orrs	r3, r2
 80067c0:	81a3      	strh	r3, [r4, #12]
 80067c2:	b005      	add	sp, #20
 80067c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c6:	9a02      	ldr	r2, [sp, #8]
 80067c8:	6921      	ldr	r1, [r4, #16]
 80067ca:	f7ff fba9 	bl	8005f20 <memcpy>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	4a14      	ldr	r2, [pc, #80]	; (8006824 <__ssputs_r+0xc0>)
 80067d2:	401a      	ands	r2, r3
 80067d4:	2380      	movs	r3, #128	; 0x80
 80067d6:	4313      	orrs	r3, r2
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	9b02      	ldr	r3, [sp, #8]
 80067dc:	6126      	str	r6, [r4, #16]
 80067de:	18f6      	adds	r6, r6, r3
 80067e0:	6026      	str	r6, [r4, #0]
 80067e2:	6165      	str	r5, [r4, #20]
 80067e4:	9e01      	ldr	r6, [sp, #4]
 80067e6:	1aed      	subs	r5, r5, r3
 80067e8:	60a5      	str	r5, [r4, #8]
 80067ea:	9b01      	ldr	r3, [sp, #4]
 80067ec:	429e      	cmp	r6, r3
 80067ee:	d900      	bls.n	80067f2 <__ssputs_r+0x8e>
 80067f0:	9e01      	ldr	r6, [sp, #4]
 80067f2:	0032      	movs	r2, r6
 80067f4:	9903      	ldr	r1, [sp, #12]
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	f000 fc8f 	bl	800711a <memmove>
 80067fc:	68a3      	ldr	r3, [r4, #8]
 80067fe:	2000      	movs	r0, #0
 8006800:	1b9b      	subs	r3, r3, r6
 8006802:	60a3      	str	r3, [r4, #8]
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	199e      	adds	r6, r3, r6
 8006808:	6026      	str	r6, [r4, #0]
 800680a:	e7da      	b.n	80067c2 <__ssputs_r+0x5e>
 800680c:	002a      	movs	r2, r5
 800680e:	0038      	movs	r0, r7
 8006810:	f000 fc98 	bl	8007144 <_realloc_r>
 8006814:	1e06      	subs	r6, r0, #0
 8006816:	d1e0      	bne.n	80067da <__ssputs_r+0x76>
 8006818:	6921      	ldr	r1, [r4, #16]
 800681a:	0038      	movs	r0, r7
 800681c:	f7ff fefa 	bl	8006614 <_free_r>
 8006820:	e7c7      	b.n	80067b2 <__ssputs_r+0x4e>
 8006822:	46c0      	nop			; (mov r8, r8)
 8006824:	fffffb7f 	.word	0xfffffb7f

08006828 <_svfiprintf_r>:
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	b0a1      	sub	sp, #132	; 0x84
 800682c:	9003      	str	r0, [sp, #12]
 800682e:	001d      	movs	r5, r3
 8006830:	898b      	ldrh	r3, [r1, #12]
 8006832:	000f      	movs	r7, r1
 8006834:	0016      	movs	r6, r2
 8006836:	061b      	lsls	r3, r3, #24
 8006838:	d511      	bpl.n	800685e <_svfiprintf_r+0x36>
 800683a:	690b      	ldr	r3, [r1, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10e      	bne.n	800685e <_svfiprintf_r+0x36>
 8006840:	2140      	movs	r1, #64	; 0x40
 8006842:	f7ff ff31 	bl	80066a8 <_malloc_r>
 8006846:	6038      	str	r0, [r7, #0]
 8006848:	6138      	str	r0, [r7, #16]
 800684a:	2800      	cmp	r0, #0
 800684c:	d105      	bne.n	800685a <_svfiprintf_r+0x32>
 800684e:	230c      	movs	r3, #12
 8006850:	9a03      	ldr	r2, [sp, #12]
 8006852:	3801      	subs	r0, #1
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	b021      	add	sp, #132	; 0x84
 8006858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685a:	2340      	movs	r3, #64	; 0x40
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	2300      	movs	r3, #0
 8006860:	ac08      	add	r4, sp, #32
 8006862:	6163      	str	r3, [r4, #20]
 8006864:	3320      	adds	r3, #32
 8006866:	7663      	strb	r3, [r4, #25]
 8006868:	3310      	adds	r3, #16
 800686a:	76a3      	strb	r3, [r4, #26]
 800686c:	9507      	str	r5, [sp, #28]
 800686e:	0035      	movs	r5, r6
 8006870:	782b      	ldrb	r3, [r5, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <_svfiprintf_r+0x52>
 8006876:	2b25      	cmp	r3, #37	; 0x25
 8006878:	d146      	bne.n	8006908 <_svfiprintf_r+0xe0>
 800687a:	1bab      	subs	r3, r5, r6
 800687c:	9305      	str	r3, [sp, #20]
 800687e:	d00c      	beq.n	800689a <_svfiprintf_r+0x72>
 8006880:	0032      	movs	r2, r6
 8006882:	0039      	movs	r1, r7
 8006884:	9803      	ldr	r0, [sp, #12]
 8006886:	f7ff ff6d 	bl	8006764 <__ssputs_r>
 800688a:	1c43      	adds	r3, r0, #1
 800688c:	d100      	bne.n	8006890 <_svfiprintf_r+0x68>
 800688e:	e0ae      	b.n	80069ee <_svfiprintf_r+0x1c6>
 8006890:	6962      	ldr	r2, [r4, #20]
 8006892:	9b05      	ldr	r3, [sp, #20]
 8006894:	4694      	mov	ip, r2
 8006896:	4463      	add	r3, ip
 8006898:	6163      	str	r3, [r4, #20]
 800689a:	782b      	ldrb	r3, [r5, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d100      	bne.n	80068a2 <_svfiprintf_r+0x7a>
 80068a0:	e0a5      	b.n	80069ee <_svfiprintf_r+0x1c6>
 80068a2:	2201      	movs	r2, #1
 80068a4:	2300      	movs	r3, #0
 80068a6:	4252      	negs	r2, r2
 80068a8:	6062      	str	r2, [r4, #4]
 80068aa:	a904      	add	r1, sp, #16
 80068ac:	3254      	adds	r2, #84	; 0x54
 80068ae:	1852      	adds	r2, r2, r1
 80068b0:	1c6e      	adds	r6, r5, #1
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	60e3      	str	r3, [r4, #12]
 80068b6:	60a3      	str	r3, [r4, #8]
 80068b8:	7013      	strb	r3, [r2, #0]
 80068ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80068bc:	7831      	ldrb	r1, [r6, #0]
 80068be:	2205      	movs	r2, #5
 80068c0:	4853      	ldr	r0, [pc, #332]	; (8006a10 <_svfiprintf_r+0x1e8>)
 80068c2:	f000 fc1f 	bl	8007104 <memchr>
 80068c6:	1c75      	adds	r5, r6, #1
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d11f      	bne.n	800690c <_svfiprintf_r+0xe4>
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	06d3      	lsls	r3, r2, #27
 80068d0:	d504      	bpl.n	80068dc <_svfiprintf_r+0xb4>
 80068d2:	2353      	movs	r3, #83	; 0x53
 80068d4:	a904      	add	r1, sp, #16
 80068d6:	185b      	adds	r3, r3, r1
 80068d8:	2120      	movs	r1, #32
 80068da:	7019      	strb	r1, [r3, #0]
 80068dc:	0713      	lsls	r3, r2, #28
 80068de:	d504      	bpl.n	80068ea <_svfiprintf_r+0xc2>
 80068e0:	2353      	movs	r3, #83	; 0x53
 80068e2:	a904      	add	r1, sp, #16
 80068e4:	185b      	adds	r3, r3, r1
 80068e6:	212b      	movs	r1, #43	; 0x2b
 80068e8:	7019      	strb	r1, [r3, #0]
 80068ea:	7833      	ldrb	r3, [r6, #0]
 80068ec:	2b2a      	cmp	r3, #42	; 0x2a
 80068ee:	d016      	beq.n	800691e <_svfiprintf_r+0xf6>
 80068f0:	0035      	movs	r5, r6
 80068f2:	2100      	movs	r1, #0
 80068f4:	200a      	movs	r0, #10
 80068f6:	68e3      	ldr	r3, [r4, #12]
 80068f8:	782a      	ldrb	r2, [r5, #0]
 80068fa:	1c6e      	adds	r6, r5, #1
 80068fc:	3a30      	subs	r2, #48	; 0x30
 80068fe:	2a09      	cmp	r2, #9
 8006900:	d94e      	bls.n	80069a0 <_svfiprintf_r+0x178>
 8006902:	2900      	cmp	r1, #0
 8006904:	d018      	beq.n	8006938 <_svfiprintf_r+0x110>
 8006906:	e010      	b.n	800692a <_svfiprintf_r+0x102>
 8006908:	3501      	adds	r5, #1
 800690a:	e7b1      	b.n	8006870 <_svfiprintf_r+0x48>
 800690c:	4b40      	ldr	r3, [pc, #256]	; (8006a10 <_svfiprintf_r+0x1e8>)
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	1ac0      	subs	r0, r0, r3
 8006912:	2301      	movs	r3, #1
 8006914:	4083      	lsls	r3, r0
 8006916:	4313      	orrs	r3, r2
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	002e      	movs	r6, r5
 800691c:	e7ce      	b.n	80068bc <_svfiprintf_r+0x94>
 800691e:	9b07      	ldr	r3, [sp, #28]
 8006920:	1d19      	adds	r1, r3, #4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	9107      	str	r1, [sp, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	db01      	blt.n	800692e <_svfiprintf_r+0x106>
 800692a:	930b      	str	r3, [sp, #44]	; 0x2c
 800692c:	e004      	b.n	8006938 <_svfiprintf_r+0x110>
 800692e:	425b      	negs	r3, r3
 8006930:	60e3      	str	r3, [r4, #12]
 8006932:	2302      	movs	r3, #2
 8006934:	4313      	orrs	r3, r2
 8006936:	6023      	str	r3, [r4, #0]
 8006938:	782b      	ldrb	r3, [r5, #0]
 800693a:	2b2e      	cmp	r3, #46	; 0x2e
 800693c:	d10a      	bne.n	8006954 <_svfiprintf_r+0x12c>
 800693e:	786b      	ldrb	r3, [r5, #1]
 8006940:	2b2a      	cmp	r3, #42	; 0x2a
 8006942:	d135      	bne.n	80069b0 <_svfiprintf_r+0x188>
 8006944:	9b07      	ldr	r3, [sp, #28]
 8006946:	3502      	adds	r5, #2
 8006948:	1d1a      	adds	r2, r3, #4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	9207      	str	r2, [sp, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	db2b      	blt.n	80069aa <_svfiprintf_r+0x182>
 8006952:	9309      	str	r3, [sp, #36]	; 0x24
 8006954:	4e2f      	ldr	r6, [pc, #188]	; (8006a14 <_svfiprintf_r+0x1ec>)
 8006956:	7829      	ldrb	r1, [r5, #0]
 8006958:	2203      	movs	r2, #3
 800695a:	0030      	movs	r0, r6
 800695c:	f000 fbd2 	bl	8007104 <memchr>
 8006960:	2800      	cmp	r0, #0
 8006962:	d006      	beq.n	8006972 <_svfiprintf_r+0x14a>
 8006964:	2340      	movs	r3, #64	; 0x40
 8006966:	1b80      	subs	r0, r0, r6
 8006968:	4083      	lsls	r3, r0
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	3501      	adds	r5, #1
 800696e:	4313      	orrs	r3, r2
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	7829      	ldrb	r1, [r5, #0]
 8006974:	2206      	movs	r2, #6
 8006976:	4828      	ldr	r0, [pc, #160]	; (8006a18 <_svfiprintf_r+0x1f0>)
 8006978:	1c6e      	adds	r6, r5, #1
 800697a:	7621      	strb	r1, [r4, #24]
 800697c:	f000 fbc2 	bl	8007104 <memchr>
 8006980:	2800      	cmp	r0, #0
 8006982:	d03c      	beq.n	80069fe <_svfiprintf_r+0x1d6>
 8006984:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <_svfiprintf_r+0x1f4>)
 8006986:	2b00      	cmp	r3, #0
 8006988:	d125      	bne.n	80069d6 <_svfiprintf_r+0x1ae>
 800698a:	2207      	movs	r2, #7
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	3307      	adds	r3, #7
 8006990:	4393      	bics	r3, r2
 8006992:	3308      	adds	r3, #8
 8006994:	9307      	str	r3, [sp, #28]
 8006996:	6963      	ldr	r3, [r4, #20]
 8006998:	9a04      	ldr	r2, [sp, #16]
 800699a:	189b      	adds	r3, r3, r2
 800699c:	6163      	str	r3, [r4, #20]
 800699e:	e766      	b.n	800686e <_svfiprintf_r+0x46>
 80069a0:	4343      	muls	r3, r0
 80069a2:	2101      	movs	r1, #1
 80069a4:	189b      	adds	r3, r3, r2
 80069a6:	0035      	movs	r5, r6
 80069a8:	e7a6      	b.n	80068f8 <_svfiprintf_r+0xd0>
 80069aa:	2301      	movs	r3, #1
 80069ac:	425b      	negs	r3, r3
 80069ae:	e7d0      	b.n	8006952 <_svfiprintf_r+0x12a>
 80069b0:	2300      	movs	r3, #0
 80069b2:	200a      	movs	r0, #10
 80069b4:	001a      	movs	r2, r3
 80069b6:	3501      	adds	r5, #1
 80069b8:	6063      	str	r3, [r4, #4]
 80069ba:	7829      	ldrb	r1, [r5, #0]
 80069bc:	1c6e      	adds	r6, r5, #1
 80069be:	3930      	subs	r1, #48	; 0x30
 80069c0:	2909      	cmp	r1, #9
 80069c2:	d903      	bls.n	80069cc <_svfiprintf_r+0x1a4>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0c5      	beq.n	8006954 <_svfiprintf_r+0x12c>
 80069c8:	9209      	str	r2, [sp, #36]	; 0x24
 80069ca:	e7c3      	b.n	8006954 <_svfiprintf_r+0x12c>
 80069cc:	4342      	muls	r2, r0
 80069ce:	2301      	movs	r3, #1
 80069d0:	1852      	adds	r2, r2, r1
 80069d2:	0035      	movs	r5, r6
 80069d4:	e7f1      	b.n	80069ba <_svfiprintf_r+0x192>
 80069d6:	ab07      	add	r3, sp, #28
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	003a      	movs	r2, r7
 80069dc:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <_svfiprintf_r+0x1f8>)
 80069de:	0021      	movs	r1, r4
 80069e0:	9803      	ldr	r0, [sp, #12]
 80069e2:	e000      	b.n	80069e6 <_svfiprintf_r+0x1be>
 80069e4:	bf00      	nop
 80069e6:	9004      	str	r0, [sp, #16]
 80069e8:	9b04      	ldr	r3, [sp, #16]
 80069ea:	3301      	adds	r3, #1
 80069ec:	d1d3      	bne.n	8006996 <_svfiprintf_r+0x16e>
 80069ee:	89bb      	ldrh	r3, [r7, #12]
 80069f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80069f2:	065b      	lsls	r3, r3, #25
 80069f4:	d400      	bmi.n	80069f8 <_svfiprintf_r+0x1d0>
 80069f6:	e72e      	b.n	8006856 <_svfiprintf_r+0x2e>
 80069f8:	2001      	movs	r0, #1
 80069fa:	4240      	negs	r0, r0
 80069fc:	e72b      	b.n	8006856 <_svfiprintf_r+0x2e>
 80069fe:	ab07      	add	r3, sp, #28
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	003a      	movs	r2, r7
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <_svfiprintf_r+0x1f8>)
 8006a06:	0021      	movs	r1, r4
 8006a08:	9803      	ldr	r0, [sp, #12]
 8006a0a:	f000 f9b7 	bl	8006d7c <_printf_i>
 8006a0e:	e7ea      	b.n	80069e6 <_svfiprintf_r+0x1be>
 8006a10:	0800741c 	.word	0x0800741c
 8006a14:	08007422 	.word	0x08007422
 8006a18:	08007426 	.word	0x08007426
 8006a1c:	00000000 	.word	0x00000000
 8006a20:	08006765 	.word	0x08006765

08006a24 <__sfputc_r>:
 8006a24:	6893      	ldr	r3, [r2, #8]
 8006a26:	b510      	push	{r4, lr}
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	6093      	str	r3, [r2, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	da04      	bge.n	8006a3a <__sfputc_r+0x16>
 8006a30:	6994      	ldr	r4, [r2, #24]
 8006a32:	42a3      	cmp	r3, r4
 8006a34:	db07      	blt.n	8006a46 <__sfputc_r+0x22>
 8006a36:	290a      	cmp	r1, #10
 8006a38:	d005      	beq.n	8006a46 <__sfputc_r+0x22>
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	1c58      	adds	r0, r3, #1
 8006a3e:	6010      	str	r0, [r2, #0]
 8006a40:	7019      	strb	r1, [r3, #0]
 8006a42:	0008      	movs	r0, r1
 8006a44:	bd10      	pop	{r4, pc}
 8006a46:	f7ff fb21 	bl	800608c <__swbuf_r>
 8006a4a:	0001      	movs	r1, r0
 8006a4c:	e7f9      	b.n	8006a42 <__sfputc_r+0x1e>

08006a4e <__sfputs_r>:
 8006a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a50:	0006      	movs	r6, r0
 8006a52:	000f      	movs	r7, r1
 8006a54:	0014      	movs	r4, r2
 8006a56:	18d5      	adds	r5, r2, r3
 8006a58:	42ac      	cmp	r4, r5
 8006a5a:	d101      	bne.n	8006a60 <__sfputs_r+0x12>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e007      	b.n	8006a70 <__sfputs_r+0x22>
 8006a60:	7821      	ldrb	r1, [r4, #0]
 8006a62:	003a      	movs	r2, r7
 8006a64:	0030      	movs	r0, r6
 8006a66:	f7ff ffdd 	bl	8006a24 <__sfputc_r>
 8006a6a:	3401      	adds	r4, #1
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d1f3      	bne.n	8006a58 <__sfputs_r+0xa>
 8006a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a74 <_vfiprintf_r>:
 8006a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a76:	b0a1      	sub	sp, #132	; 0x84
 8006a78:	9003      	str	r0, [sp, #12]
 8006a7a:	000f      	movs	r7, r1
 8006a7c:	0016      	movs	r6, r2
 8006a7e:	001d      	movs	r5, r3
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d005      	beq.n	8006a90 <_vfiprintf_r+0x1c>
 8006a84:	6983      	ldr	r3, [r0, #24]
 8006a86:	9305      	str	r3, [sp, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <_vfiprintf_r+0x1c>
 8006a8c:	f7ff fcc2 	bl	8006414 <__sinit>
 8006a90:	4b7b      	ldr	r3, [pc, #492]	; (8006c80 <_vfiprintf_r+0x20c>)
 8006a92:	429f      	cmp	r7, r3
 8006a94:	d15c      	bne.n	8006b50 <_vfiprintf_r+0xdc>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	685f      	ldr	r7, [r3, #4]
 8006a9a:	89bb      	ldrh	r3, [r7, #12]
 8006a9c:	071b      	lsls	r3, r3, #28
 8006a9e:	d563      	bpl.n	8006b68 <_vfiprintf_r+0xf4>
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d060      	beq.n	8006b68 <_vfiprintf_r+0xf4>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	ac08      	add	r4, sp, #32
 8006aaa:	6163      	str	r3, [r4, #20]
 8006aac:	3320      	adds	r3, #32
 8006aae:	7663      	strb	r3, [r4, #25]
 8006ab0:	3310      	adds	r3, #16
 8006ab2:	76a3      	strb	r3, [r4, #26]
 8006ab4:	9507      	str	r5, [sp, #28]
 8006ab6:	0035      	movs	r5, r6
 8006ab8:	782b      	ldrb	r3, [r5, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <_vfiprintf_r+0x4e>
 8006abe:	2b25      	cmp	r3, #37	; 0x25
 8006ac0:	d15c      	bne.n	8006b7c <_vfiprintf_r+0x108>
 8006ac2:	1bab      	subs	r3, r5, r6
 8006ac4:	9305      	str	r3, [sp, #20]
 8006ac6:	d00c      	beq.n	8006ae2 <_vfiprintf_r+0x6e>
 8006ac8:	0032      	movs	r2, r6
 8006aca:	0039      	movs	r1, r7
 8006acc:	9803      	ldr	r0, [sp, #12]
 8006ace:	f7ff ffbe 	bl	8006a4e <__sfputs_r>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d100      	bne.n	8006ad8 <_vfiprintf_r+0x64>
 8006ad6:	e0c4      	b.n	8006c62 <_vfiprintf_r+0x1ee>
 8006ad8:	6962      	ldr	r2, [r4, #20]
 8006ada:	9b05      	ldr	r3, [sp, #20]
 8006adc:	4694      	mov	ip, r2
 8006ade:	4463      	add	r3, ip
 8006ae0:	6163      	str	r3, [r4, #20]
 8006ae2:	782b      	ldrb	r3, [r5, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d100      	bne.n	8006aea <_vfiprintf_r+0x76>
 8006ae8:	e0bb      	b.n	8006c62 <_vfiprintf_r+0x1ee>
 8006aea:	2201      	movs	r2, #1
 8006aec:	2300      	movs	r3, #0
 8006aee:	4252      	negs	r2, r2
 8006af0:	6062      	str	r2, [r4, #4]
 8006af2:	a904      	add	r1, sp, #16
 8006af4:	3254      	adds	r2, #84	; 0x54
 8006af6:	1852      	adds	r2, r2, r1
 8006af8:	1c6e      	adds	r6, r5, #1
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	60e3      	str	r3, [r4, #12]
 8006afe:	60a3      	str	r3, [r4, #8]
 8006b00:	7013      	strb	r3, [r2, #0]
 8006b02:	65a3      	str	r3, [r4, #88]	; 0x58
 8006b04:	7831      	ldrb	r1, [r6, #0]
 8006b06:	2205      	movs	r2, #5
 8006b08:	485e      	ldr	r0, [pc, #376]	; (8006c84 <_vfiprintf_r+0x210>)
 8006b0a:	f000 fafb 	bl	8007104 <memchr>
 8006b0e:	1c75      	adds	r5, r6, #1
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d135      	bne.n	8006b80 <_vfiprintf_r+0x10c>
 8006b14:	6822      	ldr	r2, [r4, #0]
 8006b16:	06d3      	lsls	r3, r2, #27
 8006b18:	d504      	bpl.n	8006b24 <_vfiprintf_r+0xb0>
 8006b1a:	2353      	movs	r3, #83	; 0x53
 8006b1c:	a904      	add	r1, sp, #16
 8006b1e:	185b      	adds	r3, r3, r1
 8006b20:	2120      	movs	r1, #32
 8006b22:	7019      	strb	r1, [r3, #0]
 8006b24:	0713      	lsls	r3, r2, #28
 8006b26:	d504      	bpl.n	8006b32 <_vfiprintf_r+0xbe>
 8006b28:	2353      	movs	r3, #83	; 0x53
 8006b2a:	a904      	add	r1, sp, #16
 8006b2c:	185b      	adds	r3, r3, r1
 8006b2e:	212b      	movs	r1, #43	; 0x2b
 8006b30:	7019      	strb	r1, [r3, #0]
 8006b32:	7833      	ldrb	r3, [r6, #0]
 8006b34:	2b2a      	cmp	r3, #42	; 0x2a
 8006b36:	d02c      	beq.n	8006b92 <_vfiprintf_r+0x11e>
 8006b38:	0035      	movs	r5, r6
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	200a      	movs	r0, #10
 8006b3e:	68e3      	ldr	r3, [r4, #12]
 8006b40:	782a      	ldrb	r2, [r5, #0]
 8006b42:	1c6e      	adds	r6, r5, #1
 8006b44:	3a30      	subs	r2, #48	; 0x30
 8006b46:	2a09      	cmp	r2, #9
 8006b48:	d964      	bls.n	8006c14 <_vfiprintf_r+0x1a0>
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	d02e      	beq.n	8006bac <_vfiprintf_r+0x138>
 8006b4e:	e026      	b.n	8006b9e <_vfiprintf_r+0x12a>
 8006b50:	4b4d      	ldr	r3, [pc, #308]	; (8006c88 <_vfiprintf_r+0x214>)
 8006b52:	429f      	cmp	r7, r3
 8006b54:	d102      	bne.n	8006b5c <_vfiprintf_r+0xe8>
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	689f      	ldr	r7, [r3, #8]
 8006b5a:	e79e      	b.n	8006a9a <_vfiprintf_r+0x26>
 8006b5c:	4b4b      	ldr	r3, [pc, #300]	; (8006c8c <_vfiprintf_r+0x218>)
 8006b5e:	429f      	cmp	r7, r3
 8006b60:	d19b      	bne.n	8006a9a <_vfiprintf_r+0x26>
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	68df      	ldr	r7, [r3, #12]
 8006b66:	e798      	b.n	8006a9a <_vfiprintf_r+0x26>
 8006b68:	0039      	movs	r1, r7
 8006b6a:	9803      	ldr	r0, [sp, #12]
 8006b6c:	f7ff fae4 	bl	8006138 <__swsetup_r>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d098      	beq.n	8006aa6 <_vfiprintf_r+0x32>
 8006b74:	2001      	movs	r0, #1
 8006b76:	4240      	negs	r0, r0
 8006b78:	b021      	add	sp, #132	; 0x84
 8006b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	e79b      	b.n	8006ab8 <_vfiprintf_r+0x44>
 8006b80:	4b40      	ldr	r3, [pc, #256]	; (8006c84 <_vfiprintf_r+0x210>)
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	1ac0      	subs	r0, r0, r3
 8006b86:	2301      	movs	r3, #1
 8006b88:	4083      	lsls	r3, r0
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	002e      	movs	r6, r5
 8006b90:	e7b8      	b.n	8006b04 <_vfiprintf_r+0x90>
 8006b92:	9b07      	ldr	r3, [sp, #28]
 8006b94:	1d19      	adds	r1, r3, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	9107      	str	r1, [sp, #28]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	db01      	blt.n	8006ba2 <_vfiprintf_r+0x12e>
 8006b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ba0:	e004      	b.n	8006bac <_vfiprintf_r+0x138>
 8006ba2:	425b      	negs	r3, r3
 8006ba4:	60e3      	str	r3, [r4, #12]
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	782b      	ldrb	r3, [r5, #0]
 8006bae:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb0:	d10a      	bne.n	8006bc8 <_vfiprintf_r+0x154>
 8006bb2:	786b      	ldrb	r3, [r5, #1]
 8006bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb6:	d135      	bne.n	8006c24 <_vfiprintf_r+0x1b0>
 8006bb8:	9b07      	ldr	r3, [sp, #28]
 8006bba:	3502      	adds	r5, #2
 8006bbc:	1d1a      	adds	r2, r3, #4
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	9207      	str	r2, [sp, #28]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	db2b      	blt.n	8006c1e <_vfiprintf_r+0x1aa>
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	4e31      	ldr	r6, [pc, #196]	; (8006c90 <_vfiprintf_r+0x21c>)
 8006bca:	7829      	ldrb	r1, [r5, #0]
 8006bcc:	2203      	movs	r2, #3
 8006bce:	0030      	movs	r0, r6
 8006bd0:	f000 fa98 	bl	8007104 <memchr>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d006      	beq.n	8006be6 <_vfiprintf_r+0x172>
 8006bd8:	2340      	movs	r3, #64	; 0x40
 8006bda:	1b80      	subs	r0, r0, r6
 8006bdc:	4083      	lsls	r3, r0
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	3501      	adds	r5, #1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	7829      	ldrb	r1, [r5, #0]
 8006be8:	2206      	movs	r2, #6
 8006bea:	482a      	ldr	r0, [pc, #168]	; (8006c94 <_vfiprintf_r+0x220>)
 8006bec:	1c6e      	adds	r6, r5, #1
 8006bee:	7621      	strb	r1, [r4, #24]
 8006bf0:	f000 fa88 	bl	8007104 <memchr>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d03a      	beq.n	8006c6e <_vfiprintf_r+0x1fa>
 8006bf8:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <_vfiprintf_r+0x224>)
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d125      	bne.n	8006c4a <_vfiprintf_r+0x1d6>
 8006bfe:	2207      	movs	r2, #7
 8006c00:	9b07      	ldr	r3, [sp, #28]
 8006c02:	3307      	adds	r3, #7
 8006c04:	4393      	bics	r3, r2
 8006c06:	3308      	adds	r3, #8
 8006c08:	9307      	str	r3, [sp, #28]
 8006c0a:	6963      	ldr	r3, [r4, #20]
 8006c0c:	9a04      	ldr	r2, [sp, #16]
 8006c0e:	189b      	adds	r3, r3, r2
 8006c10:	6163      	str	r3, [r4, #20]
 8006c12:	e750      	b.n	8006ab6 <_vfiprintf_r+0x42>
 8006c14:	4343      	muls	r3, r0
 8006c16:	2101      	movs	r1, #1
 8006c18:	189b      	adds	r3, r3, r2
 8006c1a:	0035      	movs	r5, r6
 8006c1c:	e790      	b.n	8006b40 <_vfiprintf_r+0xcc>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	425b      	negs	r3, r3
 8006c22:	e7d0      	b.n	8006bc6 <_vfiprintf_r+0x152>
 8006c24:	2300      	movs	r3, #0
 8006c26:	200a      	movs	r0, #10
 8006c28:	001a      	movs	r2, r3
 8006c2a:	3501      	adds	r5, #1
 8006c2c:	6063      	str	r3, [r4, #4]
 8006c2e:	7829      	ldrb	r1, [r5, #0]
 8006c30:	1c6e      	adds	r6, r5, #1
 8006c32:	3930      	subs	r1, #48	; 0x30
 8006c34:	2909      	cmp	r1, #9
 8006c36:	d903      	bls.n	8006c40 <_vfiprintf_r+0x1cc>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0c5      	beq.n	8006bc8 <_vfiprintf_r+0x154>
 8006c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c3e:	e7c3      	b.n	8006bc8 <_vfiprintf_r+0x154>
 8006c40:	4342      	muls	r2, r0
 8006c42:	2301      	movs	r3, #1
 8006c44:	1852      	adds	r2, r2, r1
 8006c46:	0035      	movs	r5, r6
 8006c48:	e7f1      	b.n	8006c2e <_vfiprintf_r+0x1ba>
 8006c4a:	ab07      	add	r3, sp, #28
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	003a      	movs	r2, r7
 8006c50:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <_vfiprintf_r+0x228>)
 8006c52:	0021      	movs	r1, r4
 8006c54:	9803      	ldr	r0, [sp, #12]
 8006c56:	e000      	b.n	8006c5a <_vfiprintf_r+0x1e6>
 8006c58:	bf00      	nop
 8006c5a:	9004      	str	r0, [sp, #16]
 8006c5c:	9b04      	ldr	r3, [sp, #16]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	d1d3      	bne.n	8006c0a <_vfiprintf_r+0x196>
 8006c62:	89bb      	ldrh	r3, [r7, #12]
 8006c64:	065b      	lsls	r3, r3, #25
 8006c66:	d500      	bpl.n	8006c6a <_vfiprintf_r+0x1f6>
 8006c68:	e784      	b.n	8006b74 <_vfiprintf_r+0x100>
 8006c6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006c6c:	e784      	b.n	8006b78 <_vfiprintf_r+0x104>
 8006c6e:	ab07      	add	r3, sp, #28
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	003a      	movs	r2, r7
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <_vfiprintf_r+0x228>)
 8006c76:	0021      	movs	r1, r4
 8006c78:	9803      	ldr	r0, [sp, #12]
 8006c7a:	f000 f87f 	bl	8006d7c <_printf_i>
 8006c7e:	e7ec      	b.n	8006c5a <_vfiprintf_r+0x1e6>
 8006c80:	080073dc 	.word	0x080073dc
 8006c84:	0800741c 	.word	0x0800741c
 8006c88:	080073fc 	.word	0x080073fc
 8006c8c:	080073bc 	.word	0x080073bc
 8006c90:	08007422 	.word	0x08007422
 8006c94:	08007426 	.word	0x08007426
 8006c98:	00000000 	.word	0x00000000
 8006c9c:	08006a4f 	.word	0x08006a4f

08006ca0 <_printf_common>:
 8006ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ca2:	0015      	movs	r5, r2
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	688a      	ldr	r2, [r1, #8]
 8006ca8:	690b      	ldr	r3, [r1, #16]
 8006caa:	9000      	str	r0, [sp, #0]
 8006cac:	000c      	movs	r4, r1
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	da00      	bge.n	8006cb4 <_printf_common+0x14>
 8006cb2:	0013      	movs	r3, r2
 8006cb4:	0022      	movs	r2, r4
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	3243      	adds	r2, #67	; 0x43
 8006cba:	7812      	ldrb	r2, [r2, #0]
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	d001      	beq.n	8006cc4 <_printf_common+0x24>
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	069b      	lsls	r3, r3, #26
 8006cc8:	d502      	bpl.n	8006cd0 <_printf_common+0x30>
 8006cca:	682b      	ldr	r3, [r5, #0]
 8006ccc:	3302      	adds	r3, #2
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	2706      	movs	r7, #6
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	401f      	ands	r7, r3
 8006cd6:	d027      	beq.n	8006d28 <_printf_common+0x88>
 8006cd8:	0023      	movs	r3, r4
 8006cda:	3343      	adds	r3, #67	; 0x43
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	1e5a      	subs	r2, r3, #1
 8006ce0:	4193      	sbcs	r3, r2
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	0692      	lsls	r2, r2, #26
 8006ce6:	d430      	bmi.n	8006d4a <_printf_common+0xaa>
 8006ce8:	0022      	movs	r2, r4
 8006cea:	9901      	ldr	r1, [sp, #4]
 8006cec:	3243      	adds	r2, #67	; 0x43
 8006cee:	9800      	ldr	r0, [sp, #0]
 8006cf0:	9e08      	ldr	r6, [sp, #32]
 8006cf2:	47b0      	blx	r6
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d025      	beq.n	8006d44 <_printf_common+0xa4>
 8006cf8:	2306      	movs	r3, #6
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	682a      	ldr	r2, [r5, #0]
 8006cfe:	68e1      	ldr	r1, [r4, #12]
 8006d00:	4003      	ands	r3, r0
 8006d02:	2500      	movs	r5, #0
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d103      	bne.n	8006d10 <_printf_common+0x70>
 8006d08:	1a8d      	subs	r5, r1, r2
 8006d0a:	43eb      	mvns	r3, r5
 8006d0c:	17db      	asrs	r3, r3, #31
 8006d0e:	401d      	ands	r5, r3
 8006d10:	68a3      	ldr	r3, [r4, #8]
 8006d12:	6922      	ldr	r2, [r4, #16]
 8006d14:	4293      	cmp	r3, r2
 8006d16:	dd01      	ble.n	8006d1c <_printf_common+0x7c>
 8006d18:	1a9b      	subs	r3, r3, r2
 8006d1a:	18ed      	adds	r5, r5, r3
 8006d1c:	2700      	movs	r7, #0
 8006d1e:	42bd      	cmp	r5, r7
 8006d20:	d120      	bne.n	8006d64 <_printf_common+0xc4>
 8006d22:	2000      	movs	r0, #0
 8006d24:	e010      	b.n	8006d48 <_printf_common+0xa8>
 8006d26:	3701      	adds	r7, #1
 8006d28:	68e3      	ldr	r3, [r4, #12]
 8006d2a:	682a      	ldr	r2, [r5, #0]
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	42bb      	cmp	r3, r7
 8006d30:	ddd2      	ble.n	8006cd8 <_printf_common+0x38>
 8006d32:	0022      	movs	r2, r4
 8006d34:	2301      	movs	r3, #1
 8006d36:	3219      	adds	r2, #25
 8006d38:	9901      	ldr	r1, [sp, #4]
 8006d3a:	9800      	ldr	r0, [sp, #0]
 8006d3c:	9e08      	ldr	r6, [sp, #32]
 8006d3e:	47b0      	blx	r6
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d1f0      	bne.n	8006d26 <_printf_common+0x86>
 8006d44:	2001      	movs	r0, #1
 8006d46:	4240      	negs	r0, r0
 8006d48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d4a:	2030      	movs	r0, #48	; 0x30
 8006d4c:	18e1      	adds	r1, r4, r3
 8006d4e:	3143      	adds	r1, #67	; 0x43
 8006d50:	7008      	strb	r0, [r1, #0]
 8006d52:	0021      	movs	r1, r4
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	3145      	adds	r1, #69	; 0x45
 8006d58:	7809      	ldrb	r1, [r1, #0]
 8006d5a:	18a2      	adds	r2, r4, r2
 8006d5c:	3243      	adds	r2, #67	; 0x43
 8006d5e:	3302      	adds	r3, #2
 8006d60:	7011      	strb	r1, [r2, #0]
 8006d62:	e7c1      	b.n	8006ce8 <_printf_common+0x48>
 8006d64:	0022      	movs	r2, r4
 8006d66:	2301      	movs	r3, #1
 8006d68:	321a      	adds	r2, #26
 8006d6a:	9901      	ldr	r1, [sp, #4]
 8006d6c:	9800      	ldr	r0, [sp, #0]
 8006d6e:	9e08      	ldr	r6, [sp, #32]
 8006d70:	47b0      	blx	r6
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	d0e6      	beq.n	8006d44 <_printf_common+0xa4>
 8006d76:	3701      	adds	r7, #1
 8006d78:	e7d1      	b.n	8006d1e <_printf_common+0x7e>
	...

08006d7c <_printf_i>:
 8006d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d7e:	b089      	sub	sp, #36	; 0x24
 8006d80:	9204      	str	r2, [sp, #16]
 8006d82:	000a      	movs	r2, r1
 8006d84:	3243      	adds	r2, #67	; 0x43
 8006d86:	9305      	str	r3, [sp, #20]
 8006d88:	9003      	str	r0, [sp, #12]
 8006d8a:	9202      	str	r2, [sp, #8]
 8006d8c:	7e0a      	ldrb	r2, [r1, #24]
 8006d8e:	000c      	movs	r4, r1
 8006d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d92:	2a6e      	cmp	r2, #110	; 0x6e
 8006d94:	d100      	bne.n	8006d98 <_printf_i+0x1c>
 8006d96:	e086      	b.n	8006ea6 <_printf_i+0x12a>
 8006d98:	d81f      	bhi.n	8006dda <_printf_i+0x5e>
 8006d9a:	2a63      	cmp	r2, #99	; 0x63
 8006d9c:	d033      	beq.n	8006e06 <_printf_i+0x8a>
 8006d9e:	d808      	bhi.n	8006db2 <_printf_i+0x36>
 8006da0:	2a00      	cmp	r2, #0
 8006da2:	d100      	bne.n	8006da6 <_printf_i+0x2a>
 8006da4:	e08c      	b.n	8006ec0 <_printf_i+0x144>
 8006da6:	2a58      	cmp	r2, #88	; 0x58
 8006da8:	d04d      	beq.n	8006e46 <_printf_i+0xca>
 8006daa:	0025      	movs	r5, r4
 8006dac:	3542      	adds	r5, #66	; 0x42
 8006dae:	702a      	strb	r2, [r5, #0]
 8006db0:	e030      	b.n	8006e14 <_printf_i+0x98>
 8006db2:	2a64      	cmp	r2, #100	; 0x64
 8006db4:	d001      	beq.n	8006dba <_printf_i+0x3e>
 8006db6:	2a69      	cmp	r2, #105	; 0x69
 8006db8:	d1f7      	bne.n	8006daa <_printf_i+0x2e>
 8006dba:	6819      	ldr	r1, [r3, #0]
 8006dbc:	6825      	ldr	r5, [r4, #0]
 8006dbe:	1d0a      	adds	r2, r1, #4
 8006dc0:	0628      	lsls	r0, r5, #24
 8006dc2:	d529      	bpl.n	8006e18 <_printf_i+0x9c>
 8006dc4:	6808      	ldr	r0, [r1, #0]
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	da03      	bge.n	8006dd4 <_printf_i+0x58>
 8006dcc:	232d      	movs	r3, #45	; 0x2d
 8006dce:	9a02      	ldr	r2, [sp, #8]
 8006dd0:	4240      	negs	r0, r0
 8006dd2:	7013      	strb	r3, [r2, #0]
 8006dd4:	4e6b      	ldr	r6, [pc, #428]	; (8006f84 <_printf_i+0x208>)
 8006dd6:	270a      	movs	r7, #10
 8006dd8:	e04f      	b.n	8006e7a <_printf_i+0xfe>
 8006dda:	2a73      	cmp	r2, #115	; 0x73
 8006ddc:	d074      	beq.n	8006ec8 <_printf_i+0x14c>
 8006dde:	d808      	bhi.n	8006df2 <_printf_i+0x76>
 8006de0:	2a6f      	cmp	r2, #111	; 0x6f
 8006de2:	d01f      	beq.n	8006e24 <_printf_i+0xa8>
 8006de4:	2a70      	cmp	r2, #112	; 0x70
 8006de6:	d1e0      	bne.n	8006daa <_printf_i+0x2e>
 8006de8:	2220      	movs	r2, #32
 8006dea:	6809      	ldr	r1, [r1, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	6022      	str	r2, [r4, #0]
 8006df0:	e003      	b.n	8006dfa <_printf_i+0x7e>
 8006df2:	2a75      	cmp	r2, #117	; 0x75
 8006df4:	d016      	beq.n	8006e24 <_printf_i+0xa8>
 8006df6:	2a78      	cmp	r2, #120	; 0x78
 8006df8:	d1d7      	bne.n	8006daa <_printf_i+0x2e>
 8006dfa:	0022      	movs	r2, r4
 8006dfc:	2178      	movs	r1, #120	; 0x78
 8006dfe:	3245      	adds	r2, #69	; 0x45
 8006e00:	7011      	strb	r1, [r2, #0]
 8006e02:	4e61      	ldr	r6, [pc, #388]	; (8006f88 <_printf_i+0x20c>)
 8006e04:	e022      	b.n	8006e4c <_printf_i+0xd0>
 8006e06:	0025      	movs	r5, r4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	3542      	adds	r5, #66	; 0x42
 8006e0c:	1d11      	adds	r1, r2, #4
 8006e0e:	6019      	str	r1, [r3, #0]
 8006e10:	6813      	ldr	r3, [r2, #0]
 8006e12:	702b      	strb	r3, [r5, #0]
 8006e14:	2301      	movs	r3, #1
 8006e16:	e065      	b.n	8006ee4 <_printf_i+0x168>
 8006e18:	6808      	ldr	r0, [r1, #0]
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	0669      	lsls	r1, r5, #25
 8006e1e:	d5d3      	bpl.n	8006dc8 <_printf_i+0x4c>
 8006e20:	b200      	sxth	r0, r0
 8006e22:	e7d1      	b.n	8006dc8 <_printf_i+0x4c>
 8006e24:	6819      	ldr	r1, [r3, #0]
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	1d08      	adds	r0, r1, #4
 8006e2a:	6018      	str	r0, [r3, #0]
 8006e2c:	6808      	ldr	r0, [r1, #0]
 8006e2e:	062e      	lsls	r6, r5, #24
 8006e30:	d505      	bpl.n	8006e3e <_printf_i+0xc2>
 8006e32:	4e54      	ldr	r6, [pc, #336]	; (8006f84 <_printf_i+0x208>)
 8006e34:	2708      	movs	r7, #8
 8006e36:	2a6f      	cmp	r2, #111	; 0x6f
 8006e38:	d01b      	beq.n	8006e72 <_printf_i+0xf6>
 8006e3a:	270a      	movs	r7, #10
 8006e3c:	e019      	b.n	8006e72 <_printf_i+0xf6>
 8006e3e:	066d      	lsls	r5, r5, #25
 8006e40:	d5f7      	bpl.n	8006e32 <_printf_i+0xb6>
 8006e42:	b280      	uxth	r0, r0
 8006e44:	e7f5      	b.n	8006e32 <_printf_i+0xb6>
 8006e46:	3145      	adds	r1, #69	; 0x45
 8006e48:	4e4e      	ldr	r6, [pc, #312]	; (8006f84 <_printf_i+0x208>)
 8006e4a:	700a      	strb	r2, [r1, #0]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	1d01      	adds	r1, r0, #4
 8006e52:	6800      	ldr	r0, [r0, #0]
 8006e54:	6019      	str	r1, [r3, #0]
 8006e56:	0615      	lsls	r5, r2, #24
 8006e58:	d521      	bpl.n	8006e9e <_printf_i+0x122>
 8006e5a:	07d3      	lsls	r3, r2, #31
 8006e5c:	d502      	bpl.n	8006e64 <_printf_i+0xe8>
 8006e5e:	2320      	movs	r3, #32
 8006e60:	431a      	orrs	r2, r3
 8006e62:	6022      	str	r2, [r4, #0]
 8006e64:	2710      	movs	r7, #16
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d103      	bne.n	8006e72 <_printf_i+0xf6>
 8006e6a:	2320      	movs	r3, #32
 8006e6c:	6822      	ldr	r2, [r4, #0]
 8006e6e:	439a      	bics	r2, r3
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	0023      	movs	r3, r4
 8006e74:	2200      	movs	r2, #0
 8006e76:	3343      	adds	r3, #67	; 0x43
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	60a3      	str	r3, [r4, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	db58      	blt.n	8006f34 <_printf_i+0x1b8>
 8006e82:	2204      	movs	r2, #4
 8006e84:	6821      	ldr	r1, [r4, #0]
 8006e86:	4391      	bics	r1, r2
 8006e88:	6021      	str	r1, [r4, #0]
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d154      	bne.n	8006f38 <_printf_i+0x1bc>
 8006e8e:	9d02      	ldr	r5, [sp, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d05a      	beq.n	8006f4a <_printf_i+0x1ce>
 8006e94:	0025      	movs	r5, r4
 8006e96:	7833      	ldrb	r3, [r6, #0]
 8006e98:	3542      	adds	r5, #66	; 0x42
 8006e9a:	702b      	strb	r3, [r5, #0]
 8006e9c:	e055      	b.n	8006f4a <_printf_i+0x1ce>
 8006e9e:	0655      	lsls	r5, r2, #25
 8006ea0:	d5db      	bpl.n	8006e5a <_printf_i+0xde>
 8006ea2:	b280      	uxth	r0, r0
 8006ea4:	e7d9      	b.n	8006e5a <_printf_i+0xde>
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	680d      	ldr	r5, [r1, #0]
 8006eaa:	1d10      	adds	r0, r2, #4
 8006eac:	6949      	ldr	r1, [r1, #20]
 8006eae:	6018      	str	r0, [r3, #0]
 8006eb0:	6813      	ldr	r3, [r2, #0]
 8006eb2:	062e      	lsls	r6, r5, #24
 8006eb4:	d501      	bpl.n	8006eba <_printf_i+0x13e>
 8006eb6:	6019      	str	r1, [r3, #0]
 8006eb8:	e002      	b.n	8006ec0 <_printf_i+0x144>
 8006eba:	066d      	lsls	r5, r5, #25
 8006ebc:	d5fb      	bpl.n	8006eb6 <_printf_i+0x13a>
 8006ebe:	8019      	strh	r1, [r3, #0]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	9d02      	ldr	r5, [sp, #8]
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	e04f      	b.n	8006f68 <_printf_i+0x1ec>
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	1d11      	adds	r1, r2, #4
 8006ecc:	6019      	str	r1, [r3, #0]
 8006ece:	6815      	ldr	r5, [r2, #0]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	6862      	ldr	r2, [r4, #4]
 8006ed4:	0028      	movs	r0, r5
 8006ed6:	f000 f915 	bl	8007104 <memchr>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d001      	beq.n	8006ee2 <_printf_i+0x166>
 8006ede:	1b40      	subs	r0, r0, r5
 8006ee0:	6060      	str	r0, [r4, #4]
 8006ee2:	6863      	ldr	r3, [r4, #4]
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9a02      	ldr	r2, [sp, #8]
 8006eea:	7013      	strb	r3, [r2, #0]
 8006eec:	e03c      	b.n	8006f68 <_printf_i+0x1ec>
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	002a      	movs	r2, r5
 8006ef2:	9904      	ldr	r1, [sp, #16]
 8006ef4:	9803      	ldr	r0, [sp, #12]
 8006ef6:	9d05      	ldr	r5, [sp, #20]
 8006ef8:	47a8      	blx	r5
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	d03e      	beq.n	8006f7c <_printf_i+0x200>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	079b      	lsls	r3, r3, #30
 8006f02:	d415      	bmi.n	8006f30 <_printf_i+0x1b4>
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	68e0      	ldr	r0, [r4, #12]
 8006f08:	4298      	cmp	r0, r3
 8006f0a:	da39      	bge.n	8006f80 <_printf_i+0x204>
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	e037      	b.n	8006f80 <_printf_i+0x204>
 8006f10:	0022      	movs	r2, r4
 8006f12:	2301      	movs	r3, #1
 8006f14:	3219      	adds	r2, #25
 8006f16:	9904      	ldr	r1, [sp, #16]
 8006f18:	9803      	ldr	r0, [sp, #12]
 8006f1a:	9e05      	ldr	r6, [sp, #20]
 8006f1c:	47b0      	blx	r6
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	d02c      	beq.n	8006f7c <_printf_i+0x200>
 8006f22:	3501      	adds	r5, #1
 8006f24:	68e3      	ldr	r3, [r4, #12]
 8006f26:	9a07      	ldr	r2, [sp, #28]
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	42ab      	cmp	r3, r5
 8006f2c:	dcf0      	bgt.n	8006f10 <_printf_i+0x194>
 8006f2e:	e7e9      	b.n	8006f04 <_printf_i+0x188>
 8006f30:	2500      	movs	r5, #0
 8006f32:	e7f7      	b.n	8006f24 <_printf_i+0x1a8>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d0ad      	beq.n	8006e94 <_printf_i+0x118>
 8006f38:	9d02      	ldr	r5, [sp, #8]
 8006f3a:	0039      	movs	r1, r7
 8006f3c:	f7f9 f97c 	bl	8000238 <__aeabi_uidivmod>
 8006f40:	5c73      	ldrb	r3, [r6, r1]
 8006f42:	3d01      	subs	r5, #1
 8006f44:	702b      	strb	r3, [r5, #0]
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d1f7      	bne.n	8006f3a <_printf_i+0x1be>
 8006f4a:	2f08      	cmp	r7, #8
 8006f4c:	d109      	bne.n	8006f62 <_printf_i+0x1e6>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	07db      	lsls	r3, r3, #31
 8006f52:	d506      	bpl.n	8006f62 <_printf_i+0x1e6>
 8006f54:	6863      	ldr	r3, [r4, #4]
 8006f56:	6922      	ldr	r2, [r4, #16]
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	dc02      	bgt.n	8006f62 <_printf_i+0x1e6>
 8006f5c:	2330      	movs	r3, #48	; 0x30
 8006f5e:	3d01      	subs	r5, #1
 8006f60:	702b      	strb	r3, [r5, #0]
 8006f62:	9b02      	ldr	r3, [sp, #8]
 8006f64:	1b5b      	subs	r3, r3, r5
 8006f66:	6123      	str	r3, [r4, #16]
 8006f68:	9b05      	ldr	r3, [sp, #20]
 8006f6a:	aa07      	add	r2, sp, #28
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	0021      	movs	r1, r4
 8006f70:	9b04      	ldr	r3, [sp, #16]
 8006f72:	9803      	ldr	r0, [sp, #12]
 8006f74:	f7ff fe94 	bl	8006ca0 <_printf_common>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d1b8      	bne.n	8006eee <_printf_i+0x172>
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	4240      	negs	r0, r0
 8006f80:	b009      	add	sp, #36	; 0x24
 8006f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f84:	0800742d 	.word	0x0800742d
 8006f88:	0800743e 	.word	0x0800743e

08006f8c <_sbrk_r>:
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	b570      	push	{r4, r5, r6, lr}
 8006f90:	4c06      	ldr	r4, [pc, #24]	; (8006fac <_sbrk_r+0x20>)
 8006f92:	0005      	movs	r5, r0
 8006f94:	0008      	movs	r0, r1
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	f7fa f852 	bl	8001040 <_sbrk>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d103      	bne.n	8006fa8 <_sbrk_r+0x1c>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d000      	beq.n	8006fa8 <_sbrk_r+0x1c>
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	20001380 	.word	0x20001380

08006fb0 <__sread>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	000c      	movs	r4, r1
 8006fb4:	250e      	movs	r5, #14
 8006fb6:	5f49      	ldrsh	r1, [r1, r5]
 8006fb8:	f000 f8ea 	bl	8007190 <_read_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	db03      	blt.n	8006fc8 <__sread+0x18>
 8006fc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006fc2:	181b      	adds	r3, r3, r0
 8006fc4:	6563      	str	r3, [r4, #84]	; 0x54
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	4a02      	ldr	r2, [pc, #8]	; (8006fd4 <__sread+0x24>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	81a3      	strh	r3, [r4, #12]
 8006fd0:	e7f9      	b.n	8006fc6 <__sread+0x16>
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	ffffefff 	.word	0xffffefff

08006fd8 <__swrite>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	001f      	movs	r7, r3
 8006fdc:	898b      	ldrh	r3, [r1, #12]
 8006fde:	0005      	movs	r5, r0
 8006fe0:	000c      	movs	r4, r1
 8006fe2:	0016      	movs	r6, r2
 8006fe4:	05db      	lsls	r3, r3, #23
 8006fe6:	d505      	bpl.n	8006ff4 <__swrite+0x1c>
 8006fe8:	230e      	movs	r3, #14
 8006fea:	5ec9      	ldrsh	r1, [r1, r3]
 8006fec:	2200      	movs	r2, #0
 8006fee:	2302      	movs	r3, #2
 8006ff0:	f000 f874 	bl	80070dc <_lseek_r>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	4a05      	ldr	r2, [pc, #20]	; (800700c <__swrite+0x34>)
 8006ff8:	0028      	movs	r0, r5
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	0032      	movs	r2, r6
 8007000:	230e      	movs	r3, #14
 8007002:	5ee1      	ldrsh	r1, [r4, r3]
 8007004:	003b      	movs	r3, r7
 8007006:	f000 f81f 	bl	8007048 <_write_r>
 800700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800700c:	ffffefff 	.word	0xffffefff

08007010 <__sseek>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	000c      	movs	r4, r1
 8007014:	250e      	movs	r5, #14
 8007016:	5f49      	ldrsh	r1, [r1, r5]
 8007018:	f000 f860 	bl	80070dc <_lseek_r>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	1c42      	adds	r2, r0, #1
 8007020:	d103      	bne.n	800702a <__sseek+0x1a>
 8007022:	4a05      	ldr	r2, [pc, #20]	; (8007038 <__sseek+0x28>)
 8007024:	4013      	ands	r3, r2
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	bd70      	pop	{r4, r5, r6, pc}
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	0152      	lsls	r2, r2, #5
 800702e:	4313      	orrs	r3, r2
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	6560      	str	r0, [r4, #84]	; 0x54
 8007034:	e7f8      	b.n	8007028 <__sseek+0x18>
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	ffffefff 	.word	0xffffefff

0800703c <__sclose>:
 800703c:	b510      	push	{r4, lr}
 800703e:	230e      	movs	r3, #14
 8007040:	5ec9      	ldrsh	r1, [r1, r3]
 8007042:	f000 f815 	bl	8007070 <_close_r>
 8007046:	bd10      	pop	{r4, pc}

08007048 <_write_r>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	0005      	movs	r5, r0
 800704c:	0008      	movs	r0, r1
 800704e:	0011      	movs	r1, r2
 8007050:	2200      	movs	r2, #0
 8007052:	4c06      	ldr	r4, [pc, #24]	; (800706c <_write_r+0x24>)
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	001a      	movs	r2, r3
 8007058:	f7f9 ffa9 	bl	8000fae <_write>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d103      	bne.n	8007068 <_write_r+0x20>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d000      	beq.n	8007068 <_write_r+0x20>
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	bd70      	pop	{r4, r5, r6, pc}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	20001380 	.word	0x20001380

08007070 <_close_r>:
 8007070:	2300      	movs	r3, #0
 8007072:	b570      	push	{r4, r5, r6, lr}
 8007074:	4c06      	ldr	r4, [pc, #24]	; (8007090 <_close_r+0x20>)
 8007076:	0005      	movs	r5, r0
 8007078:	0008      	movs	r0, r1
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	f7f9 ffb3 	bl	8000fe6 <_close>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d103      	bne.n	800708c <_close_r+0x1c>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d000      	beq.n	800708c <_close_r+0x1c>
 800708a:	602b      	str	r3, [r5, #0]
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	20001380 	.word	0x20001380

08007094 <_fstat_r>:
 8007094:	2300      	movs	r3, #0
 8007096:	b570      	push	{r4, r5, r6, lr}
 8007098:	4c06      	ldr	r4, [pc, #24]	; (80070b4 <_fstat_r+0x20>)
 800709a:	0005      	movs	r5, r0
 800709c:	0008      	movs	r0, r1
 800709e:	0011      	movs	r1, r2
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	f7f9 ffaa 	bl	8000ffa <_fstat>
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	d103      	bne.n	80070b2 <_fstat_r+0x1e>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d000      	beq.n	80070b2 <_fstat_r+0x1e>
 80070b0:	602b      	str	r3, [r5, #0]
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	20001380 	.word	0x20001380

080070b8 <_isatty_r>:
 80070b8:	2300      	movs	r3, #0
 80070ba:	b570      	push	{r4, r5, r6, lr}
 80070bc:	4c06      	ldr	r4, [pc, #24]	; (80070d8 <_isatty_r+0x20>)
 80070be:	0005      	movs	r5, r0
 80070c0:	0008      	movs	r0, r1
 80070c2:	6023      	str	r3, [r4, #0]
 80070c4:	f7f9 ffa7 	bl	8001016 <_isatty>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d103      	bne.n	80070d4 <_isatty_r+0x1c>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d000      	beq.n	80070d4 <_isatty_r+0x1c>
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	bd70      	pop	{r4, r5, r6, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	20001380 	.word	0x20001380

080070dc <_lseek_r>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	0005      	movs	r5, r0
 80070e0:	0008      	movs	r0, r1
 80070e2:	0011      	movs	r1, r2
 80070e4:	2200      	movs	r2, #0
 80070e6:	4c06      	ldr	r4, [pc, #24]	; (8007100 <_lseek_r+0x24>)
 80070e8:	6022      	str	r2, [r4, #0]
 80070ea:	001a      	movs	r2, r3
 80070ec:	f7f9 ff9c 	bl	8001028 <_lseek>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d103      	bne.n	80070fc <_lseek_r+0x20>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d000      	beq.n	80070fc <_lseek_r+0x20>
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	20001380 	.word	0x20001380

08007104 <memchr>:
 8007104:	b2c9      	uxtb	r1, r1
 8007106:	1882      	adds	r2, r0, r2
 8007108:	4290      	cmp	r0, r2
 800710a:	d101      	bne.n	8007110 <memchr+0xc>
 800710c:	2000      	movs	r0, #0
 800710e:	4770      	bx	lr
 8007110:	7803      	ldrb	r3, [r0, #0]
 8007112:	428b      	cmp	r3, r1
 8007114:	d0fb      	beq.n	800710e <memchr+0xa>
 8007116:	3001      	adds	r0, #1
 8007118:	e7f6      	b.n	8007108 <memchr+0x4>

0800711a <memmove>:
 800711a:	b510      	push	{r4, lr}
 800711c:	4288      	cmp	r0, r1
 800711e:	d902      	bls.n	8007126 <memmove+0xc>
 8007120:	188b      	adds	r3, r1, r2
 8007122:	4298      	cmp	r0, r3
 8007124:	d303      	bcc.n	800712e <memmove+0x14>
 8007126:	2300      	movs	r3, #0
 8007128:	e007      	b.n	800713a <memmove+0x20>
 800712a:	5c8b      	ldrb	r3, [r1, r2]
 800712c:	5483      	strb	r3, [r0, r2]
 800712e:	3a01      	subs	r2, #1
 8007130:	d2fb      	bcs.n	800712a <memmove+0x10>
 8007132:	bd10      	pop	{r4, pc}
 8007134:	5ccc      	ldrb	r4, [r1, r3]
 8007136:	54c4      	strb	r4, [r0, r3]
 8007138:	3301      	adds	r3, #1
 800713a:	429a      	cmp	r2, r3
 800713c:	d1fa      	bne.n	8007134 <memmove+0x1a>
 800713e:	e7f8      	b.n	8007132 <memmove+0x18>

08007140 <__malloc_lock>:
 8007140:	4770      	bx	lr

08007142 <__malloc_unlock>:
 8007142:	4770      	bx	lr

08007144 <_realloc_r>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	0007      	movs	r7, r0
 8007148:	000d      	movs	r5, r1
 800714a:	0016      	movs	r6, r2
 800714c:	2900      	cmp	r1, #0
 800714e:	d105      	bne.n	800715c <_realloc_r+0x18>
 8007150:	0011      	movs	r1, r2
 8007152:	f7ff faa9 	bl	80066a8 <_malloc_r>
 8007156:	0004      	movs	r4, r0
 8007158:	0020      	movs	r0, r4
 800715a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800715c:	2a00      	cmp	r2, #0
 800715e:	d103      	bne.n	8007168 <_realloc_r+0x24>
 8007160:	f7ff fa58 	bl	8006614 <_free_r>
 8007164:	0034      	movs	r4, r6
 8007166:	e7f7      	b.n	8007158 <_realloc_r+0x14>
 8007168:	f000 f826 	bl	80071b8 <_malloc_usable_size_r>
 800716c:	002c      	movs	r4, r5
 800716e:	42b0      	cmp	r0, r6
 8007170:	d2f2      	bcs.n	8007158 <_realloc_r+0x14>
 8007172:	0031      	movs	r1, r6
 8007174:	0038      	movs	r0, r7
 8007176:	f7ff fa97 	bl	80066a8 <_malloc_r>
 800717a:	1e04      	subs	r4, r0, #0
 800717c:	d0ec      	beq.n	8007158 <_realloc_r+0x14>
 800717e:	0029      	movs	r1, r5
 8007180:	0032      	movs	r2, r6
 8007182:	f7fe fecd 	bl	8005f20 <memcpy>
 8007186:	0029      	movs	r1, r5
 8007188:	0038      	movs	r0, r7
 800718a:	f7ff fa43 	bl	8006614 <_free_r>
 800718e:	e7e3      	b.n	8007158 <_realloc_r+0x14>

08007190 <_read_r>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	0005      	movs	r5, r0
 8007194:	0008      	movs	r0, r1
 8007196:	0011      	movs	r1, r2
 8007198:	2200      	movs	r2, #0
 800719a:	4c06      	ldr	r4, [pc, #24]	; (80071b4 <_read_r+0x24>)
 800719c:	6022      	str	r2, [r4, #0]
 800719e:	001a      	movs	r2, r3
 80071a0:	f7f9 fee8 	bl	8000f74 <_read>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d103      	bne.n	80071b0 <_read_r+0x20>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d000      	beq.n	80071b0 <_read_r+0x20>
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	bd70      	pop	{r4, r5, r6, pc}
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20001380 	.word	0x20001380

080071b8 <_malloc_usable_size_r>:
 80071b8:	1f0b      	subs	r3, r1, #4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	1f18      	subs	r0, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da01      	bge.n	80071c6 <_malloc_usable_size_r+0xe>
 80071c2:	580b      	ldr	r3, [r1, r0]
 80071c4:	18c0      	adds	r0, r0, r3
 80071c6:	4770      	bx	lr

080071c8 <_init>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ce:	bc08      	pop	{r3}
 80071d0:	469e      	mov	lr, r3
 80071d2:	4770      	bx	lr

080071d4 <_fini>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071da:	bc08      	pop	{r3}
 80071dc:	469e      	mov	lr, r3
 80071de:	4770      	bx	lr
