
FreeRTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e90  08005e90  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005e90  08005e90  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e90  08005e90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012fc  20000074  08005f0c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001370  08005f0c  00021370  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193b8  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b18  00000000  00000000  00039454  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  0003cf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001528  00000000  00000000  0003e660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001db85  00000000  00000000  0003fb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000144e8  00000000  00000000  0005d70d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3546  00000000  00000000  00071bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011513b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005634  00000000  00000000  001151b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c80 	.word	0x08005c80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08005c80 	.word	0x08005c80

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <displayInit>:
 *  		â€¢ MAX_COLUMNS
 * @param	hi2c 	- pointer to the i2c handler
 * @retval	status 	- 0...OK, other...error
 */
uint8_t displayInit(I2C_HandleTypeDef *hi2c)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af02      	add	r7, sp, #8
 8000236:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 8000238:	230f      	movs	r3, #15
 800023a:	18fb      	adds	r3, r7, r3
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]

	_i2cHandler = hi2c;			// pointer for i2c handler is stored in library
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <displayInit+0x80>)
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]

	// create i2c data stream
    uint8_t TransmitData[6] = {SPECIAL_COMMAND,									// special command character
 8000246:	2108      	movs	r1, #8
 8000248:	187b      	adds	r3, r7, r1
 800024a:	22fe      	movs	r2, #254	; 0xfe
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	4b19      	ldr	r3, [pc, #100]	; (80002b4 <displayInit+0x84>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2208      	movs	r2, #8
 8000254:	4313      	orrs	r3, r2
 8000256:	b2da      	uxtb	r2, r3
 8000258:	187b      	adds	r3, r7, r1
 800025a:	705a      	strb	r2, [r3, #1]
 800025c:	187b      	adds	r3, r7, r1
 800025e:	22fe      	movs	r2, #254	; 0xfe
 8000260:	709a      	strb	r2, [r3, #2]
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <displayInit+0x88>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2204      	movs	r2, #4
 8000268:	4313      	orrs	r3, r2
 800026a:	b2da      	uxtb	r2, r3
 800026c:	187b      	adds	r3, r7, r1
 800026e:	70da      	strb	r2, [r3, #3]
 8000270:	187b      	adds	r3, r7, r1
 8000272:	227c      	movs	r2, #124	; 0x7c
 8000274:	711a      	strb	r2, [r3, #4]
 8000276:	187b      	adds	r3, r7, r1
 8000278:	222d      	movs	r2, #45	; 0x2d
 800027a:	715a      	strb	r2, [r3, #5]
							   SETTING_COMMAND, 								// Put LCD into setting mode
							   CLEAR_COMMAND 									// clear display
    						   };

    // transmission of data stream
    if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, TransmitData, sizeof(TransmitData), 100) != HAL_OK)		// transmit data
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <displayInit+0x80>)
 800027e:	6818      	ldr	r0, [r3, #0]
 8000280:	187a      	adds	r2, r7, r1
 8000282:	2364      	movs	r3, #100	; 0x64
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2306      	movs	r3, #6
 8000288:	21e4      	movs	r1, #228	; 0xe4
 800028a:	f001 fb25 	bl	80018d8 <HAL_I2C_Master_Transmit>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d003      	beq.n	800029a <displayInit+0x6a>
    	retval = LCD_ERROR;
 8000292:	230f      	movs	r3, #15
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 800029a:	2032      	movs	r0, #50	; 0x32
 800029c:	f000 fe9c 	bl	8000fd8 <HAL_Delay>

    return retval;
 80002a0:	230f      	movs	r3, #15
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	781b      	ldrb	r3, [r3, #0]
}
 80002a6:	0018      	movs	r0, r3
 80002a8:	46bd      	mov	sp, r7
 80002aa:	b004      	add	sp, #16
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	20001034 	.word	0x20001034
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000001 	.word	0x20000001

080002bc <displayWriteString>:
 * @param	size  	- length of the string to write
 * @retval	status 	- 0...OK, other...error
 *
 */
uint8_t displayWriteString(char *buffer)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b087      	sub	sp, #28
 80002c0:	af02      	add	r7, sp, #8
 80002c2:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 80002c4:	230f      	movs	r3, #15
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]

	// transmission of data stream
	if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, buffer, strlen(buffer), 100) != HAL_OK)		// transmit data
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <displayWriteString+0x50>)
 80002ce:	681c      	ldr	r4, [r3, #0]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	0018      	movs	r0, r3
 80002d4:	f7ff ff18 	bl	8000108 <strlen>
 80002d8:	0003      	movs	r3, r0
 80002da:	b299      	uxth	r1, r3
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	2364      	movs	r3, #100	; 0x64
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	000b      	movs	r3, r1
 80002e4:	21e4      	movs	r1, #228	; 0xe4
 80002e6:	0020      	movs	r0, r4
 80002e8:	f001 faf6 	bl	80018d8 <HAL_I2C_Master_Transmit>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d003      	beq.n	80002f8 <displayWriteString+0x3c>
	  retval = LCD_ERROR;
 80002f0:	230f      	movs	r3, #15
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10); //This takes a bit longer
 80002f8:	200a      	movs	r0, #10
 80002fa:	f000 fe6d 	bl	8000fd8 <HAL_Delay>

    return retval;
 80002fe:	230f      	movs	r3, #15
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	781b      	ldrb	r3, [r3, #0]
}
 8000304:	0018      	movs	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	b005      	add	sp, #20
 800030a:	bd90      	pop	{r4, r7, pc}
 800030c:	20001034 	.word	0x20001034

08000310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <MX_DMA_Init+0x38>)
 8000318:	695a      	ldr	r2, [r3, #20]
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <MX_DMA_Init+0x38>)
 800031c:	2101      	movs	r1, #1
 800031e:	430a      	orrs	r2, r1
 8000320:	615a      	str	r2, [r3, #20]
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <MX_DMA_Init+0x38>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	2201      	movs	r2, #1
 8000328:	4013      	ands	r3, r2
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 800032e:	2200      	movs	r2, #0
 8000330:	2103      	movs	r1, #3
 8000332:	200a      	movs	r0, #10
 8000334:	f000 fefa 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000338:	200a      	movs	r0, #10
 800033a:	f000 ff0c 	bl	8001156 <HAL_NVIC_EnableIRQ>

}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	40021000 	.word	0x40021000

0800034c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	4a06      	ldr	r2, [pc, #24]	; (8000374 <vApplicationGetIdleTaskMemory+0x28>)
 800035c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	4a05      	ldr	r2, [pc, #20]	; (8000378 <vApplicationGetIdleTaskMemory+0x2c>)
 8000362:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b004      	add	sp, #16
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	20000090 	.word	0x20000090
 8000378:	200000e4 	.word	0x200000e4

0800037c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800037c:	b590      	push	{r4, r7, lr}
 800037e:	b08b      	sub	sp, #44	; 0x2c
 8000380:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
	xTaskCreate(vTask1,		/* Pointer to the function that implements the task. */
 8000382:	4914      	ldr	r1, [pc, #80]	; (80003d4 <MX_FREERTOS_Init+0x58>)
 8000384:	4814      	ldr	r0, [pc, #80]	; (80003d8 <MX_FREERTOS_Init+0x5c>)
 8000386:	2300      	movs	r3, #0
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2303      	movs	r3, #3
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	2300      	movs	r3, #0
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	f004 f863 	bl	800445c <xTaskCreate>
					NULL,		/* task parameter. */
					3,			/* task priority */
					NULL );		/* task handle. */

		/* Create the other task in exactly the same way. */
	xTaskCreate( vTask2, "Task 2", 128, NULL, 3, NULL );
 8000396:	4911      	ldr	r1, [pc, #68]	; (80003dc <MX_FREERTOS_Init+0x60>)
 8000398:	4811      	ldr	r0, [pc, #68]	; (80003e0 <MX_FREERTOS_Init+0x64>)
 800039a:	2300      	movs	r3, #0
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	2303      	movs	r3, #3
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2300      	movs	r3, #0
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	f004 f859 	bl	800445c <xTaskCreate>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <MX_FREERTOS_Init+0x68>)
 80003ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003b0:	c313      	stmia	r3!, {r0, r1, r4}
 80003b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003b4:	c313      	stmia	r3!, {r0, r1, r4}
 80003b6:	6812      	ldr	r2, [r2, #0]
 80003b8:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2100      	movs	r1, #0
 80003be:	0018      	movs	r0, r3
 80003c0:	f003 feff 	bl	80041c2 <osThreadCreate>
 80003c4:	0002      	movs	r2, r0
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_FREERTOS_Init+0x6c>)
 80003c8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b009      	add	sp, #36	; 0x24
 80003d0:	bd90      	pop	{r4, r7, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	08005c98 	.word	0x08005c98
 80003d8:	080003fd 	.word	0x080003fd
 80003dc:	08005ca0 	.word	0x08005ca0
 80003e0:	0800041d 	.word	0x0800041d
 80003e4:	08005cb4 	.word	0x08005cb4
 80003e8:	20001038 	.word	0x20001038

080003ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f003 ff31 	bl	800425c <osDelay>
 80003fa:	e7fb      	b.n	80003f4 <StartDefaultTask+0x8>

080003fc <vTask1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vTask1( void *pvParameters )
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
//
//	write_MISE("Passive");
	/* infinite loop. */
	for( ;; )
	{
		HAL_UART_Receive_IT(&huart4, co2_buffer, 12);
 8000404:	4903      	ldr	r1, [pc, #12]	; (8000414 <vTask1+0x18>)
 8000406:	4b04      	ldr	r3, [pc, #16]	; (8000418 <vTask1+0x1c>)
 8000408:	220c      	movs	r2, #12
 800040a:	0018      	movs	r0, r3
 800040c:	f002 ff67 	bl	80032de <HAL_UART_Receive_IT>
 8000410:	e7f8      	b.n	8000404 <vTask1+0x8>
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	2000105c 	.word	0x2000105c
 8000418:	20001260 	.word	0x20001260

0800041c <vTask2>:
	}
}


void vTask2( void *pvParameters )
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	/* infinite loop. */
	for( ;; )
	{
		displayInit(&hi2c1);
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <vTask2+0x24>)
 8000426:	0018      	movs	r0, r3
 8000428:	f7ff ff02 	bl	8000230 <displayInit>
//		if(counter >= 5) {
//			counter = 0;
//			pir_status = ~pir_status;
//		}
////		printf("TEST\r\n");
		displayWriteString("TEST");
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <vTask2+0x28>)
 800042e:	0018      	movs	r0, r3
 8000430:	f7ff ff44 	bl	80002bc <displayWriteString>
		HAL_Delay(1000);
 8000434:	23fa      	movs	r3, #250	; 0xfa
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	0018      	movs	r0, r3
 800043a:	f000 fdcd 	bl	8000fd8 <HAL_Delay>
		displayInit(&hi2c1);
 800043e:	e7f1      	b.n	8000424 <vTask2+0x8>
 8000440:	20001078 	.word	0x20001078
 8000444:	08005cd0 	.word	0x08005cd0

08000448 <HAL_UART_RxCpltCallback>:
	}

	printf("%d\r\n", mise_send_buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
//			co2_result_buffer[i] = co2_buffer[i+1];
//		}
//		printf("%s\r\n", co2_result_buffer);
//
//	}
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b002      	add	sp, #8
 8000456:	bd80      	pop	{r7, pc}

08000458 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
	{

	}
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b002      	add	sp, #8
 8000466:	bd80      	pop	{r7, pc}

08000468 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b08b      	sub	sp, #44	; 0x2c
 800046c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	2414      	movs	r4, #20
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	2314      	movs	r3, #20
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f004 ff51 	bl	8005320 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <MX_GPIO_Init+0x10c>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <MX_GPIO_Init+0x10c>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0309      	lsls	r1, r1, #12
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b39      	ldr	r3, [pc, #228]	; (8000574 <MX_GPIO_Init+0x10c>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	031b      	lsls	r3, r3, #12
 8000494:	4013      	ands	r3, r2
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800049a:	4b36      	ldr	r3, [pc, #216]	; (8000574 <MX_GPIO_Init+0x10c>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b35      	ldr	r3, [pc, #212]	; (8000574 <MX_GPIO_Init+0x10c>)
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	03c9      	lsls	r1, r1, #15
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b32      	ldr	r3, [pc, #200]	; (8000574 <MX_GPIO_Init+0x10c>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	03db      	lsls	r3, r3, #15
 80004b0:	4013      	ands	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b2f      	ldr	r3, [pc, #188]	; (8000574 <MX_GPIO_Init+0x10c>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <MX_GPIO_Init+0x10c>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0289      	lsls	r1, r1, #10
 80004c0:	430a      	orrs	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <MX_GPIO_Init+0x10c>)
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	029b      	lsls	r3, r3, #10
 80004cc:	4013      	ands	r3, r2
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b28      	ldr	r3, [pc, #160]	; (8000574 <MX_GPIO_Init+0x10c>)
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	4b27      	ldr	r3, [pc, #156]	; (8000574 <MX_GPIO_Init+0x10c>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	02c9      	lsls	r1, r1, #11
 80004dc:	430a      	orrs	r2, r1
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b24      	ldr	r3, [pc, #144]	; (8000574 <MX_GPIO_Init+0x10c>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	02db      	lsls	r3, r3, #11
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(URLED2_GPIO_Port, URLED2_Pin, GPIO_PIN_RESET);
 80004ee:	2390      	movs	r3, #144	; 0x90
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	2200      	movs	r2, #0
 80004f4:	2120      	movs	r1, #32
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 f93a 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	0192      	lsls	r2, r2, #6
 8000502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	4a1c      	ldr	r2, [pc, #112]	; (8000578 <MX_GPIO_Init+0x110>)
 8000508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000510:	193b      	adds	r3, r7, r4
 8000512:	4a1a      	ldr	r2, [pc, #104]	; (800057c <MX_GPIO_Init+0x114>)
 8000514:	0019      	movs	r1, r3
 8000516:	0010      	movs	r0, r2
 8000518:	f000 ffb2 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = URLED2_Pin;
 800051c:	0021      	movs	r1, r4
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2220      	movs	r2, #32
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2201      	movs	r2, #1
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(URLED2_GPIO_Port, &GPIO_InitStruct);
 8000536:	000c      	movs	r4, r1
 8000538:	187a      	adds	r2, r7, r1
 800053a:	2390      	movs	r3, #144	; 0x90
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f000 ff9d 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 8000546:	0021      	movs	r1, r4
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	0092      	lsls	r2, r2, #2
 800054e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 800055c:	187a      	adds	r2, r7, r1
 800055e:	2390      	movs	r3, #144	; 0x90
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	0011      	movs	r1, r2
 8000564:	0018      	movs	r0, r3
 8000566:	f000 ff8b 	bl	8001480 <HAL_GPIO_Init>

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b00b      	add	sp, #44	; 0x2c
 8000570:	bd90      	pop	{r4, r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000
 8000578:	10210000 	.word	0x10210000
 800057c:	48000800 	.word	0x48000800

08000580 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <MX_I2C1_Init+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_I2C1_Init+0x74>)
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <MX_I2C1_Init+0x7c>)
 800058e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 f8f5 	bl	80017ac <HAL_I2C_Init>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005c6:	f000 f913 	bl	80007f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fc02 	bl	8001dd8 <HAL_I2CEx_ConfigAnalogFilter>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005d8:	f000 f90a 	bl	80007f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005de:	2100      	movs	r1, #0
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fc45 	bl	8001e70 <HAL_I2CEx_ConfigDigitalFilter>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ea:	f000 f901 	bl	80007f0 <Error_Handler>
  }

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20001078 	.word	0x20001078
 80005f8:	40005400 	.word	0x40005400
 80005fc:	2000090e 	.word	0x2000090e

08000600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	2314      	movs	r3, #20
 800060a:	18fb      	adds	r3, r7, r3
 800060c:	0018      	movs	r0, r3
 800060e:	2314      	movs	r3, #20
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f004 fe84 	bl	8005320 <memset>
  if(i2cHandle->Instance==I2C1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <HAL_I2C_MspInit+0x90>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d132      	bne.n	8000688 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <HAL_I2C_MspInit+0x94>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <HAL_I2C_MspInit+0x94>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	02c9      	lsls	r1, r1, #11
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <HAL_I2C_MspInit+0x94>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	02db      	lsls	r3, r3, #11
 8000638:	4013      	ands	r3, r2
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800063e:	2114      	movs	r1, #20
 8000640:	187b      	adds	r3, r7, r1
 8000642:	22c0      	movs	r2, #192	; 0xc0
 8000644:	0092      	lsls	r2, r2, #2
 8000646:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2212      	movs	r2, #18
 800064c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2201      	movs	r2, #1
 8000652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2203      	movs	r2, #3
 8000658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2201      	movs	r2, #1
 800065e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	187b      	adds	r3, r7, r1
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <HAL_I2C_MspInit+0x98>)
 8000664:	0019      	movs	r1, r3
 8000666:	0010      	movs	r0, r2
 8000668:	f000 ff0a 	bl	8001480 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_I2C_MspInit+0x94>)
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_I2C_MspInit+0x94>)
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	0389      	lsls	r1, r1, #14
 8000676:	430a      	orrs	r2, r1
 8000678:	61da      	str	r2, [r3, #28]
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_I2C_MspInit+0x94>)
 800067c:	69da      	ldr	r2, [r3, #28]
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	039b      	lsls	r3, r3, #14
 8000682:	4013      	ands	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b00a      	add	sp, #40	; 0x28
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40005400 	.word	0x40005400
 8000694:	40021000 	.word	0x40021000
 8000698:	48000400 	.word	0x48000400

0800069c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	while(HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 30000)) {
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <__io_putchar+0x24>)
 80006a8:	1d39      	adds	r1, r7, #4
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <__io_putchar+0x28>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	f002 fd6d 	bl	800318c <HAL_UART_Transmit>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d1f7      	bne.n	80006a6 <__io_putchar+0xa>

	}

	return ch;
 80006b6:	687b      	ldr	r3, [r7, #4]
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	00007530 	.word	0x00007530
 80006c4:	200012e4 	.word	0x200012e4

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fc54 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f813 	bl	80006fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f7ff fec8 	bl	8000468 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d8:	f7ff fe1a 	bl	8000310 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006dc:	f000 fa58 	bl	8000b90 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006e0:	f7ff ff4e 	bl	8000580 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80006e4:	f000 fa84 	bl	8000bf0 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80006e8:	f000 f9f0 	bl	8000acc <MX_TIM7_Init>
  MX_USART4_UART_Init();
 80006ec:	f000 fab0 	bl	8000c50 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006f0:	f7ff fe44 	bl	800037c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006f4:	f003 fd5d 	bl	80041b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0x30>

080006fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fa:	b590      	push	{r4, r7, lr}
 80006fc:	b099      	sub	sp, #100	; 0x64
 80006fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000700:	242c      	movs	r4, #44	; 0x2c
 8000702:	193b      	adds	r3, r7, r4
 8000704:	0018      	movs	r0, r3
 8000706:	2334      	movs	r3, #52	; 0x34
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f004 fe08 	bl	8005320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	231c      	movs	r3, #28
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	0018      	movs	r0, r3
 8000716:	2310      	movs	r3, #16
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f004 fe00 	bl	8005320 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	003b      	movs	r3, r7
 8000722:	0018      	movs	r0, r3
 8000724:	231c      	movs	r3, #28
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f004 fdf9 	bl	8005320 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800072e:	0021      	movs	r1, r4
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2222      	movs	r2, #34	; 0x22
 8000734:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2201      	movs	r2, #1
 8000740:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2210      	movs	r2, #16
 8000746:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	187b      	adds	r3, r7, r1
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fbd9 	bl	8001f08 <HAL_RCC_OscConfig>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x64>
  {
    Error_Handler();
 800075a:	f000 f849 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	211c      	movs	r1, #28
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2207      	movs	r2, #7
 8000764:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2203      	movs	r2, #3
 800076a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2101      	movs	r1, #1
 800077c:	0018      	movs	r0, r3
 800077e:	f001 ff49 	bl	8002614 <HAL_RCC_ClockConfig>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000786:	f000 f833 	bl	80007f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800078a:	003b      	movs	r3, r7
 800078c:	2222      	movs	r2, #34	; 0x22
 800078e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000790:	003b      	movs	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000796:	003b      	movs	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079c:	003b      	movs	r3, r7
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 f8da 	bl	8002958 <HAL_RCCEx_PeriphCLKConfig>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007a8:	f000 f822 	bl	80007f0 <Error_Handler>
  }
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b019      	add	sp, #100	; 0x64
 80007b2:	bd90      	pop	{r4, r7, pc}

080007b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c6:	f000 fbeb 	bl	8000fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d103      	bne.n	80007dc <HAL_TIM_PeriodElapsedCallback+0x28>
	  printf("TESTTTESTSETSETEST\r\n");
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f004 fe0a 	bl	80053f0 <puts>
  }
  /* USER CODE END Callback 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40001000 	.word	0x40001000
 80007e8:	40001400 	.word	0x40001400
 80007ec:	08005dd8 	.word	0x08005dd8

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <Error_Handler+0x6>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_MspInit+0x50>)
 8000800:	699a      	ldr	r2, [r3, #24]
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_MspInit+0x50>)
 8000804:	2101      	movs	r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	619a      	str	r2, [r3, #24]
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x50>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_MspInit+0x50>)
 8000818:	69da      	ldr	r2, [r3, #28]
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_MspInit+0x50>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0549      	lsls	r1, r1, #21
 8000820:	430a      	orrs	r2, r1
 8000822:	61da      	str	r2, [r3, #28]
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x50>)
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	055b      	lsls	r3, r3, #21
 800082c:	4013      	ands	r3, r2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000832:	2302      	movs	r3, #2
 8000834:	425b      	negs	r3, r3
 8000836:	2200      	movs	r2, #0
 8000838:	2103      	movs	r1, #3
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fc76 	bl	800112c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	0019      	movs	r1, r3
 8000862:	2011      	movs	r0, #17
 8000864:	f000 fc62 	bl	800112c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000868:	2011      	movs	r0, #17
 800086a:	f000 fc74 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <HAL_InitTick+0xa4>)
 8000870:	69da      	ldr	r2, [r3, #28]
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <HAL_InitTick+0xa4>)
 8000874:	2110      	movs	r1, #16
 8000876:	430a      	orrs	r2, r1
 8000878:	61da      	str	r2, [r3, #28]
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <HAL_InitTick+0xa4>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	2210      	movs	r2, #16
 8000880:	4013      	ands	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000886:	230c      	movs	r3, #12
 8000888:	18fa      	adds	r2, r7, r3
 800088a:	2310      	movs	r3, #16
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f002 f837 	bl	8002904 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000896:	f002 f81f 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 800089a:	0003      	movs	r3, r0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	4914      	ldr	r1, [pc, #80]	; (80008f4 <HAL_InitTick+0xa8>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff fc38 	bl	8000118 <__udivsi3>
 80008a8:	0003      	movs	r3, r0
 80008aa:	3b01      	subs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0xac>)
 80008b0:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_InitTick+0xb0>)
 80008b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_InitTick+0xac>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <HAL_InitTick+0xb4>)
 80008b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_InitTick+0xac>)
 80008bc:	6a3a      	ldr	r2, [r7, #32]
 80008be:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_InitTick+0xac>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_InitTick+0xac>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_InitTick+0xac>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 f942 	bl	8002b58 <HAL_TIM_Base_Init>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d105      	bne.n	80008e4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <HAL_InitTick+0xac>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 f98c 	bl	8002bf8 <HAL_TIM_Base_Start_IT>
 80008e0:	0003      	movs	r3, r0
 80008e2:	e000      	b.n	80008e6 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
}
 80008e6:	0018      	movs	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b00a      	add	sp, #40	; 0x28
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40021000 	.word	0x40021000
 80008f4:	000f4240 	.word	0x000f4240
 80008f8:	200010c4 	.word	0x200010c4
 80008fc:	40001000 	.word	0x40001000
 8000900:	000003e7 	.word	0x000003e7

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fcf4 	bl	8001304 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <DMA1_Channel2_3_IRQHandler+0x20>)
 800091e:	0018      	movs	r0, r3
 8000920:	f000 fcf0 	bl	8001304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000121c 	.word	0x2000121c
 8000930:	20001154 	.word	0x20001154

08000934 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <TIM6_DAC_IRQHandler+0x14>)
 800093a:	0018      	movs	r0, r3
 800093c:	f002 f9ae 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	200010c4 	.word	0x200010c4

0800094c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <TIM7_IRQHandler+0x14>)
 8000952:	0018      	movs	r0, r3
 8000954:	f002 f9a2 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	2000110c 	.word	0x2000110c

08000964 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <USART3_4_IRQHandler+0x1c>)
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fd08 	bl	8003380 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <USART3_4_IRQHandler+0x20>)
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fd04 	bl	8003380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20001198 	.word	0x20001198
 8000984:	20001260 	.word	0x20001260

08000988 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	e00a      	b.n	80009b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800099a:	e000      	b.n	800099e <_read+0x16>
 800099c:	bf00      	nop
 800099e:	0001      	movs	r1, r0
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	60ba      	str	r2, [r7, #8]
 80009a6:	b2ca      	uxtb	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbf0      	blt.n	800099a <_read+0x12>
	}

return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b006      	add	sp, #24
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e009      	b.n	80009e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff fe5d 	bl	800069c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf1      	blt.n	80009d4 <_write+0x12>
	}
	return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b006      	add	sp, #24
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_close>:

int _close(int file)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	return -1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	425b      	negs	r3, r3
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	0192      	lsls	r2, r2, #6
 8000a1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_isatty>:

int _isatty(int file)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	return 1;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f004 fc22 	bl	80052cc <__errno>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	425b      	negs	r3, r3
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	18d2      	adds	r2, r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b006      	add	sp, #24
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20004000 	.word	0x20004000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	200002e4 	.word	0x200002e4
 8000abc:	20001370 	.word	0x20001370

08000ac0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	003b      	movs	r3, r7
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	001a      	movs	r2, r3
 8000ada:	2100      	movs	r1, #0
 8000adc:	f004 fc20 	bl	8005320 <memset>

  htim7.Instance = TIM7;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_TIM7_Init+0x6c>)
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <MX_TIM7_Init+0x70>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 47;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_TIM7_Init+0x6c>)
 8000ae8:	222f      	movs	r2, #47	; 0x2f
 8000aea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_TIM7_Init+0x6c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_TIM7_Init+0x6c>)
 8000af4:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_TIM7_Init+0x74>)
 8000af6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_TIM7_Init+0x6c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_TIM7_Init+0x6c>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f002 f829 	bl	8002b58 <HAL_TIM_Base_Init>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000b0a:	f7ff fe71 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	003b      	movs	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b1a:	003a      	movs	r2, r7
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_TIM7_Init+0x6c>)
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f002 fa71 	bl	8003008 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000b2a:	f7ff fe61 	bl	80007f0 <Error_Handler>
  }

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	2000110c 	.word	0x2000110c
 8000b3c:	40001400 	.word	0x40001400
 8000b40:	0000270f 	.word	0x0000270f

08000b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_TIM_Base_MspInit+0x44>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d113      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_TIM_Base_MspInit+0x48>)
 8000b58:	69da      	ldr	r2, [r3, #28]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_TIM_Base_MspInit+0x48>)
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	61da      	str	r2, [r3, #28]
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_TIM_Base_MspInit+0x48>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	2220      	movs	r2, #32
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2103      	movs	r1, #3
 8000b72:	2012      	movs	r0, #18
 8000b74:	f000 fada 	bl	800112c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b78:	2012      	movs	r0, #18
 8000b7a:	f000 faec 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40001400 	.word	0x40001400
 8000b8c:	40021000 	.word	0x40021000

08000b90 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <MX_USART2_UART_Init+0x5c>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2296      	movs	r2, #150	; 0x96
 8000b9e:	0212      	lsls	r2, r2, #8
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fa85 	bl	80030e4 <HAL_UART_Init>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bde:	f7ff fe07 	bl	80007f0 <Error_Handler>
  }

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200012e4 	.word	0x200012e4
 8000bec:	40004400 	.word	0x40004400

08000bf0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <MX_USART3_UART_Init+0x5c>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000bfc:	2296      	movs	r2, #150	; 0x96
 8000bfe:	0192      	lsls	r2, r2, #6
 8000c00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <MX_USART3_UART_Init+0x58>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f002 fa55 	bl	80030e4 <HAL_UART_Init>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c3e:	f7ff fdd7 	bl	80007f0 <Error_Handler>
  }

}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20001198 	.word	0x20001198
 8000c4c:	40004800 	.word	0x40004800

08000c50 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  huart4.Instance = USART4;
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <MX_USART4_UART_Init+0x5c>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c5c:	2296      	movs	r2, #150	; 0x96
 8000c5e:	0212      	lsls	r2, r2, #8
 8000c60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <MX_USART4_UART_Init+0x58>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 fa25 	bl	80030e4 <HAL_UART_Init>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8000c9e:	f7ff fda7 	bl	80007f0 <Error_Handler>
  }

}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20001260 	.word	0x20001260
 8000cac:	40004c00 	.word	0x40004c00

08000cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	; 0x38
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	2324      	movs	r3, #36	; 0x24
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2314      	movs	r3, #20
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f004 fb2c 	bl	8005320 <memset>
  if(uartHandle->Instance==USART2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a8b      	ldr	r2, [pc, #556]	; (8000efc <HAL_UART_MspInit+0x24c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d133      	bne.n	8000d3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd2:	4b8b      	ldr	r3, [pc, #556]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000cd4:	69da      	ldr	r2, [r3, #28]
 8000cd6:	4b8a      	ldr	r3, [pc, #552]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	0289      	lsls	r1, r1, #10
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	61da      	str	r2, [r3, #28]
 8000ce0:	4b87      	ldr	r3, [pc, #540]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000ce2:	69da      	ldr	r2, [r3, #28]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	4013      	ands	r3, r2
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b84      	ldr	r3, [pc, #528]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000cf0:	695a      	ldr	r2, [r3, #20]
 8000cf2:	4b83      	ldr	r3, [pc, #524]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	0289      	lsls	r1, r1, #10
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	4b80      	ldr	r3, [pc, #512]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000cfe:	695a      	ldr	r2, [r3, #20]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	4013      	ands	r3, r2
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d0a:	2124      	movs	r1, #36	; 0x24
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2202      	movs	r2, #2
 8000d16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2201      	movs	r2, #1
 8000d28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	187a      	adds	r2, r7, r1
 8000d2c:	2390      	movs	r3, #144	; 0x90
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fba4 	bl	8001480 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8000d38:	e0db      	b.n	8000ef2 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a71      	ldr	r2, [pc, #452]	; (8000f04 <HAL_UART_MspInit+0x254>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d000      	beq.n	8000d46 <HAL_UART_MspInit+0x96>
 8000d44:	e095      	b.n	8000e72 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d46:	4b6e      	ldr	r3, [pc, #440]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000d48:	69da      	ldr	r2, [r3, #28]
 8000d4a:	4b6d      	ldr	r3, [pc, #436]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	02c9      	lsls	r1, r1, #11
 8000d50:	430a      	orrs	r2, r1
 8000d52:	61da      	str	r2, [r3, #28]
 8000d54:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000d56:	69da      	ldr	r2, [r3, #28]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	02db      	lsls	r3, r3, #11
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000d64:	695a      	ldr	r2, [r3, #20]
 8000d66:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	02c9      	lsls	r1, r1, #11
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	4b63      	ldr	r3, [pc, #396]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	02db      	lsls	r3, r3, #11
 8000d78:	4013      	ands	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d7e:	2124      	movs	r1, #36	; 0x24
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	22c0      	movs	r2, #192	; 0xc0
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2203      	movs	r2, #3
 8000d98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	4a59      	ldr	r2, [pc, #356]	; (8000f08 <HAL_UART_MspInit+0x258>)
 8000da4:	0019      	movs	r1, r3
 8000da6:	0010      	movs	r0, r2
 8000da8:	f000 fb6a 	bl	8001480 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000dac:	4b57      	ldr	r3, [pc, #348]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000dae:	4a58      	ldr	r2, [pc, #352]	; (8000f10 <HAL_UART_MspInit+0x260>)
 8000db0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db2:	4b56      	ldr	r3, [pc, #344]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db8:	4b54      	ldr	r3, [pc, #336]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dbe:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc4:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dca:	4b50      	ldr	r3, [pc, #320]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd6:	4b4d      	ldr	r3, [pc, #308]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ddc:	4b4b      	ldr	r3, [pc, #300]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f9ca 	bl	8001178 <HAL_DMA_Init>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8000de8:	f7ff fd02 	bl	80007f0 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000dec:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <HAL_UART_MspInit+0x264>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <HAL_UART_MspInit+0x264>)
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	04c9      	lsls	r1, r1, #19
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a43      	ldr	r2, [pc, #268]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000dfe:	671a      	str	r2, [r3, #112]	; 0x70
 8000e00:	4b42      	ldr	r3, [pc, #264]	; (8000f0c <HAL_UART_MspInit+0x25c>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000e06:	4b44      	ldr	r3, [pc, #272]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e08:	4a44      	ldr	r2, [pc, #272]	; (8000f1c <HAL_UART_MspInit+0x26c>)
 8000e0a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e0c:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e0e:	2210      	movs	r2, #16
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e12:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e18:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e1e:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f000 f99d 	bl	8001178 <HAL_DMA_Init>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000e42:	f7ff fcd5 	bl	80007f0 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_UART_MspInit+0x264>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <HAL_UART_MspInit+0x264>)
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	04c9      	lsls	r1, r1, #19
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a30      	ldr	r2, [pc, #192]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e58:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_UART_MspInit+0x268>)
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2103      	movs	r1, #3
 8000e64:	201d      	movs	r0, #29
 8000e66:	f000 f961 	bl	800112c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000e6a:	201d      	movs	r0, #29
 8000e6c:	f000 f973 	bl	8001156 <HAL_NVIC_EnableIRQ>
}
 8000e70:	e03f      	b.n	8000ef2 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a2a      	ldr	r2, [pc, #168]	; (8000f20 <HAL_UART_MspInit+0x270>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d13a      	bne.n	8000ef2 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000e7e:	69da      	ldr	r2, [r3, #28]
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0309      	lsls	r1, r1, #12
 8000e86:	430a      	orrs	r2, r1
 8000e88:	61da      	str	r2, [r3, #28]
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000e8c:	69da      	ldr	r2, [r3, #28]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	031b      	lsls	r3, r3, #12
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000e9a:	695a      	ldr	r2, [r3, #20]
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	0289      	lsls	r1, r1, #10
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_UART_MspInit+0x250>)
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	029b      	lsls	r3, r3, #10
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb4:	2124      	movs	r1, #36	; 0x24
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	187a      	adds	r2, r7, r1
 8000ed6:	2390      	movs	r3, #144	; 0x90
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 facf 	bl	8001480 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2103      	movs	r1, #3
 8000ee6:	201d      	movs	r0, #29
 8000ee8:	f000 f920 	bl	800112c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000eec:	201d      	movs	r0, #29
 8000eee:	f000 f932 	bl	8001156 <HAL_NVIC_EnableIRQ>
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b00e      	add	sp, #56	; 0x38
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	40004400 	.word	0x40004400
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40004800 	.word	0x40004800
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	20001154 	.word	0x20001154
 8000f10:	40020030 	.word	0x40020030
 8000f14:	40010000 	.word	0x40010000
 8000f18:	2000121c 	.word	0x2000121c
 8000f1c:	4002001c 	.word	0x4002001c
 8000f20:	40004c00 	.word	0x40004c00

08000f24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f4e:	f7ff fdb7 	bl	8000ac0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f52:	f004 f9c1 	bl	80052d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f56:	f7ff fbb7 	bl	80006c8 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   r0, =_estack
 8000f5c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f68:	08005e98 	.word	0x08005e98
  ldr r2, =_sbss
 8000f6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f70:	20001370 	.word	0x20001370

08000f74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_COMP_IRQHandler>
	...

08000f78 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_Init+0x24>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_Init+0x24>)
 8000f82:	2110      	movs	r1, #16
 8000f84:	430a      	orrs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff fc5f 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8e:	f7ff fc33 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	001a      	movs	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	18d2      	adds	r2, r2, r3
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20001368 	.word	0x20001368

08000fc4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b02      	ldr	r3, [pc, #8]	; (8000fd4 <HAL_GetTick+0x10>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	20001368 	.word	0x20001368

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff fff0 	bl	8000fc4 <HAL_GetTick>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_Delay+0x40>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	189b      	adds	r3, r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	f7ff ffe0 	bl	8000fc4 <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b004      	add	sp, #16
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000008 	.word	0x20000008

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	0002      	movs	r2, r0
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b7f      	cmp	r3, #127	; 0x7f
 800102e:	d809      	bhi.n	8001044 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	001a      	movs	r2, r3
 8001036:	231f      	movs	r3, #31
 8001038:	401a      	ands	r2, r3
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_EnableIRQ+0x30>)
 800103c:	2101      	movs	r1, #1
 800103e:	4091      	lsls	r1, r2
 8001040:	000a      	movs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
  }
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	0002      	movs	r2, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b7f      	cmp	r3, #127	; 0x7f
 8001064:	d828      	bhi.n	80010b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001066:	4a2f      	ldr	r2, [pc, #188]	; (8001124 <__NVIC_SetPriority+0xd4>)
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b25b      	sxtb	r3, r3
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	33c0      	adds	r3, #192	; 0xc0
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	589b      	ldr	r3, [r3, r2]
 8001076:	1dfa      	adds	r2, r7, #7
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	0011      	movs	r1, r2
 800107c:	2203      	movs	r2, #3
 800107e:	400a      	ands	r2, r1
 8001080:	00d2      	lsls	r2, r2, #3
 8001082:	21ff      	movs	r1, #255	; 0xff
 8001084:	4091      	lsls	r1, r2
 8001086:	000a      	movs	r2, r1
 8001088:	43d2      	mvns	r2, r2
 800108a:	401a      	ands	r2, r3
 800108c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	401a      	ands	r2, r3
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	0018      	movs	r0, r3
 800109c:	2303      	movs	r3, #3
 800109e:	4003      	ands	r3, r0
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a4:	481f      	ldr	r0, [pc, #124]	; (8001124 <__NVIC_SetPriority+0xd4>)
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	430a      	orrs	r2, r1
 80010b0:	33c0      	adds	r3, #192	; 0xc0
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010b6:	e031      	b.n	800111c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <__NVIC_SetPriority+0xd8>)
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	0019      	movs	r1, r3
 80010c0:	230f      	movs	r3, #15
 80010c2:	400b      	ands	r3, r1
 80010c4:	3b08      	subs	r3, #8
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3306      	adds	r3, #6
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	18d3      	adds	r3, r2, r3
 80010ce:	3304      	adds	r3, #4
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1dfa      	adds	r2, r7, #7
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	0011      	movs	r1, r2
 80010d8:	2203      	movs	r2, #3
 80010da:	400a      	ands	r2, r1
 80010dc:	00d2      	lsls	r2, r2, #3
 80010de:	21ff      	movs	r1, #255	; 0xff
 80010e0:	4091      	lsls	r1, r2
 80010e2:	000a      	movs	r2, r1
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	401a      	ands	r2, r3
 80010e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	22ff      	movs	r2, #255	; 0xff
 80010f0:	401a      	ands	r2, r3
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0018      	movs	r0, r3
 80010f8:	2303      	movs	r3, #3
 80010fa:	4003      	ands	r3, r0
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <__NVIC_SetPriority+0xd8>)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	001c      	movs	r4, r3
 8001108:	230f      	movs	r3, #15
 800110a:	4023      	ands	r3, r4
 800110c:	3b08      	subs	r3, #8
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	430a      	orrs	r2, r1
 8001112:	3306      	adds	r3, #6
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	18c3      	adds	r3, r0, r3
 8001118:	3304      	adds	r3, #4
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b003      	add	sp, #12
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	210f      	movs	r1, #15
 8001138:	187b      	adds	r3, r7, r1
 800113a:	1c02      	adds	r2, r0, #0
 800113c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	187b      	adds	r3, r7, r1
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b25b      	sxtb	r3, r3
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff ff81 	bl	8001050 <__NVIC_SetPriority>
}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	0002      	movs	r2, r0
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b25b      	sxtb	r3, r3
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ff57 	bl	800101c <__NVIC_EnableIRQ>
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b002      	add	sp, #8
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e036      	b.n	80011fc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2221      	movs	r2, #33	; 0x21
 8001192:	2102      	movs	r1, #2
 8001194:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_DMA_Init+0x8c>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 f932 	bl	8001448 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2221      	movs	r2, #33	; 0x21
 80011ee:	2101      	movs	r1, #1
 80011f0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2220      	movs	r2, #32
 80011f6:	2100      	movs	r1, #0
 80011f8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}  
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}
 8001204:	ffffc00f 	.word	0xffffc00f

08001208 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2221      	movs	r2, #33	; 0x21
 8001214:	5c9b      	ldrb	r3, [r3, r2]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d008      	beq.n	800122e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2204      	movs	r2, #4
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2220      	movs	r2, #32
 8001226:	2100      	movs	r1, #0
 8001228:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e020      	b.n	8001270 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	210e      	movs	r1, #14
 800123a:	438a      	bics	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	438a      	bics	r2, r1
 800124c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001256:	2101      	movs	r1, #1
 8001258:	4091      	lsls	r1, r2
 800125a:	000a      	movs	r2, r1
 800125c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2221      	movs	r2, #33	; 0x21
 8001262:	2101      	movs	r1, #1
 8001264:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	2100      	movs	r1, #0
 800126c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001280:	230f      	movs	r3, #15
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2221      	movs	r2, #33	; 0x21
 800128c:	5c9b      	ldrb	r3, [r3, r2]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d007      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2204      	movs	r2, #4
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800129a:	230f      	movs	r3, #15
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e028      	b.n	80012f6 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	210e      	movs	r1, #14
 80012b0:	438a      	bics	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2101      	movs	r1, #1
 80012c0:	438a      	bics	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012cc:	2101      	movs	r1, #1
 80012ce:	4091      	lsls	r1, r2
 80012d0:	000a      	movs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2221      	movs	r2, #33	; 0x21
 80012d8:	2101      	movs	r1, #1
 80012da:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2220      	movs	r2, #32
 80012e0:	2100      	movs	r1, #0
 80012e2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	0010      	movs	r0, r2
 80012f4:	4798      	blx	r3
    } 
  }
  return status;
 80012f6:	230f      	movs	r3, #15
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	781b      	ldrb	r3, [r3, #0]
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b004      	add	sp, #16
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	2204      	movs	r2, #4
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	d024      	beq.n	8001376 <HAL_DMA_IRQHandler+0x72>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2204      	movs	r2, #4
 8001330:	4013      	ands	r3, r2
 8001332:	d020      	beq.n	8001376 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2220      	movs	r2, #32
 800133c:	4013      	ands	r3, r2
 800133e:	d107      	bne.n	8001350 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2104      	movs	r1, #4
 800134c:	438a      	bics	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001358:	2104      	movs	r1, #4
 800135a:	4091      	lsls	r1, r2
 800135c:	000a      	movs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2b00      	cmp	r3, #0
 8001366:	d100      	bne.n	800136a <HAL_DMA_IRQHandler+0x66>
 8001368:	e06a      	b.n	8001440 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	0010      	movs	r0, r2
 8001372:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001374:	e064      	b.n	8001440 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2202      	movs	r2, #2
 800137c:	409a      	lsls	r2, r3
 800137e:	0013      	movs	r3, r2
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4013      	ands	r3, r2
 8001384:	d02b      	beq.n	80013de <HAL_DMA_IRQHandler+0xda>
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2202      	movs	r2, #2
 800138a:	4013      	ands	r3, r2
 800138c:	d027      	beq.n	80013de <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2220      	movs	r2, #32
 8001396:	4013      	ands	r3, r2
 8001398:	d10b      	bne.n	80013b2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	210a      	movs	r1, #10
 80013a6:	438a      	bics	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2221      	movs	r2, #33	; 0x21
 80013ae:	2101      	movs	r1, #1
 80013b0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	2102      	movs	r1, #2
 80013bc:	4091      	lsls	r1, r2
 80013be:	000a      	movs	r2, r1
 80013c0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2220      	movs	r2, #32
 80013c6:	2100      	movs	r1, #0
 80013c8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d036      	beq.n	8001440 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	0010      	movs	r0, r2
 80013da:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80013dc:	e030      	b.n	8001440 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	2208      	movs	r2, #8
 80013e4:	409a      	lsls	r2, r3
 80013e6:	0013      	movs	r3, r2
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	4013      	ands	r3, r2
 80013ec:	d028      	beq.n	8001440 <HAL_DMA_IRQHandler+0x13c>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2208      	movs	r2, #8
 80013f2:	4013      	ands	r3, r2
 80013f4:	d024      	beq.n	8001440 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	210e      	movs	r1, #14
 8001402:	438a      	bics	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140e:	2101      	movs	r1, #1
 8001410:	4091      	lsls	r1, r2
 8001412:	000a      	movs	r2, r1
 8001414:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2221      	movs	r2, #33	; 0x21
 8001420:	2101      	movs	r1, #1
 8001422:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2220      	movs	r2, #32
 8001428:	2100      	movs	r1, #0
 800142a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	0010      	movs	r0, r2
 800143c:	4798      	blx	r3
    }
   }
}  
 800143e:	e7ff      	b.n	8001440 <HAL_DMA_IRQHandler+0x13c>
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b004      	add	sp, #16
 8001446:	bd80      	pop	{r7, pc}

08001448 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a08      	ldr	r2, [pc, #32]	; (8001478 <DMA_CalcBaseAndBitshift+0x30>)
 8001456:	4694      	mov	ip, r2
 8001458:	4463      	add	r3, ip
 800145a:	2114      	movs	r1, #20
 800145c:	0018      	movs	r0, r3
 800145e:	f7fe fe5b 	bl	8000118 <__udivsi3>
 8001462:	0003      	movs	r3, r0
 8001464:	009a      	lsls	r2, r3, #2
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a03      	ldr	r2, [pc, #12]	; (800147c <DMA_CalcBaseAndBitshift+0x34>)
 800146e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}
 8001478:	bffdfff8 	.word	0xbffdfff8
 800147c:	40020000 	.word	0x40020000

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148e:	e155      	b.n	800173c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4091      	lsls	r1, r2
 800149a:	000a      	movs	r2, r1
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d100      	bne.n	80014a8 <HAL_GPIO_Init+0x28>
 80014a6:	e146      	b.n	8001736 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d00b      	beq.n	80014c8 <HAL_GPIO_Init+0x48>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d007      	beq.n	80014c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014bc:	2b11      	cmp	r3, #17
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	409a      	lsls	r2, r3
 80014d6:	0013      	movs	r3, r2
 80014d8:	43da      	mvns	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	409a      	lsls	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	2201      	movs	r2, #1
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0xea>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b12      	cmp	r3, #18
 8001568:	d123      	bne.n	80015b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	58d3      	ldr	r3, [r2, r3]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2207      	movs	r2, #7
 800157c:	4013      	ands	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	43da      	mvns	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2107      	movs	r1, #7
 8001596:	400b      	ands	r3, r1
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	409a      	lsls	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	6939      	ldr	r1, [r7, #16]
 80015b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	43da      	mvns	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	401a      	ands	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	055b      	lsls	r3, r3, #21
 80015ee:	4013      	ands	r3, r2
 80015f0:	d100      	bne.n	80015f4 <HAL_GPIO_Init+0x174>
 80015f2:	e0a0      	b.n	8001736 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f4:	4b57      	ldr	r3, [pc, #348]	; (8001754 <HAL_GPIO_Init+0x2d4>)
 80015f6:	699a      	ldr	r2, [r3, #24]
 80015f8:	4b56      	ldr	r3, [pc, #344]	; (8001754 <HAL_GPIO_Init+0x2d4>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	430a      	orrs	r2, r1
 80015fe:	619a      	str	r2, [r3, #24]
 8001600:	4b54      	ldr	r3, [pc, #336]	; (8001754 <HAL_GPIO_Init+0x2d4>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800160c:	4a52      	ldr	r2, [pc, #328]	; (8001758 <HAL_GPIO_Init+0x2d8>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	589b      	ldr	r3, [r3, r2]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2203      	movs	r2, #3
 800161e:	4013      	ands	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	409a      	lsls	r2, r3
 8001626:	0013      	movs	r3, r2
 8001628:	43da      	mvns	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	2390      	movs	r3, #144	; 0x90
 8001634:	05db      	lsls	r3, r3, #23
 8001636:	429a      	cmp	r2, r3
 8001638:	d019      	beq.n	800166e <HAL_GPIO_Init+0x1ee>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a47      	ldr	r2, [pc, #284]	; (800175c <HAL_GPIO_Init+0x2dc>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0x1ea>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a46      	ldr	r2, [pc, #280]	; (8001760 <HAL_GPIO_Init+0x2e0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00d      	beq.n	8001666 <HAL_GPIO_Init+0x1e6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a45      	ldr	r2, [pc, #276]	; (8001764 <HAL_GPIO_Init+0x2e4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x1e2>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a44      	ldr	r2, [pc, #272]	; (8001768 <HAL_GPIO_Init+0x2e8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_GPIO_Init+0x1de>
 800165a:	2304      	movs	r3, #4
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x1f0>
 800165e:	2305      	movs	r3, #5
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x1f0>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x1f0>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x1f0>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x1f0>
 800166e:	2300      	movs	r3, #0
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	2103      	movs	r1, #3
 8001674:	400a      	ands	r2, r1
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x2d8>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800168e:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_GPIO_Init+0x2ec>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	43da      	mvns	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	025b      	lsls	r3, r3, #9
 80016a6:	4013      	ands	r3, r2
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_GPIO_Init+0x2ec>)
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_GPIO_Init+0x2ec>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43da      	mvns	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	029b      	lsls	r3, r3, #10
 80016d0:	4013      	ands	r3, r2
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_GPIO_Init+0x2ec>)
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_GPIO_Init+0x2ec>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	035b      	lsls	r3, r3, #13
 80016fa:	4013      	ands	r3, r2
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_GPIO_Init+0x2ec>)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_GPIO_Init+0x2ec>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43da      	mvns	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	039b      	lsls	r3, r3, #14
 8001724:	4013      	ands	r3, r2
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_GPIO_Init+0x2ec>)
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	40da      	lsrs	r2, r3
 8001744:	1e13      	subs	r3, r2, #0
 8001746:	d000      	beq.n	800174a <HAL_GPIO_Init+0x2ca>
 8001748:	e6a2      	b.n	8001490 <HAL_GPIO_Init+0x10>
  } 
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b006      	add	sp, #24
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	40021000 	.word	0x40021000
 8001758:	40010000 	.word	0x40010000
 800175c:	48000400 	.word	0x48000400
 8001760:	48000800 	.word	0x48000800
 8001764:	48000c00 	.word	0x48000c00
 8001768:	48001000 	.word	0x48001000
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	0008      	movs	r0, r1
 800177a:	0011      	movs	r1, r2
 800177c:	1cbb      	adds	r3, r7, #2
 800177e:	1c02      	adds	r2, r0, #0
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	1c7b      	adds	r3, r7, #1
 8001784:	1c0a      	adds	r2, r1, #0
 8001786:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001788:	1c7b      	adds	r3, r7, #1
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001790:	1cbb      	adds	r3, r7, #2
 8001792:	881a      	ldrh	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800179a:	1cbb      	adds	r3, r7, #2
 800179c:	881a      	ldrh	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e082      	b.n	80018c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2241      	movs	r2, #65	; 0x41
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d107      	bne.n	80017da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2240      	movs	r2, #64	; 0x40
 80017ce:	2100      	movs	r1, #0
 80017d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7fe ff13 	bl	8000600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2241      	movs	r2, #65	; 0x41
 80017de:	2124      	movs	r1, #36	; 0x24
 80017e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	438a      	bics	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4934      	ldr	r1, [pc, #208]	; (80018cc <HAL_I2C_Init+0x120>)
 80017fc:	400a      	ands	r2, r1
 80017fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4931      	ldr	r1, [pc, #196]	; (80018d0 <HAL_I2C_Init+0x124>)
 800180c:	400a      	ands	r2, r1
 800180e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d108      	bne.n	800182a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	0209      	lsls	r1, r1, #8
 8001824:	430a      	orrs	r2, r1
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	e007      	b.n	800183a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2184      	movs	r1, #132	; 0x84
 8001834:	0209      	lsls	r1, r1, #8
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d104      	bne.n	800184c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	491f      	ldr	r1, [pc, #124]	; (80018d4 <HAL_I2C_Init+0x128>)
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	491a      	ldr	r1, [pc, #104]	; (80018d0 <HAL_I2C_Init+0x124>)
 8001868:	400a      	ands	r2, r1
 800186a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	431a      	orrs	r2, r3
 8001876:	0011      	movs	r1, r2
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	021a      	lsls	r2, r3, #8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69d9      	ldr	r1, [r3, #28]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2241      	movs	r2, #65	; 0x41
 80018b0:	2120      	movs	r1, #32
 80018b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2242      	movs	r2, #66	; 0x42
 80018be:	2100      	movs	r1, #0
 80018c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b002      	add	sp, #8
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	f0ffffff 	.word	0xf0ffffff
 80018d0:	ffff7fff 	.word	0xffff7fff
 80018d4:	02008000 	.word	0x02008000

080018d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	0008      	movs	r0, r1
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	0019      	movs	r1, r3
 80018e6:	230a      	movs	r3, #10
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	1c02      	adds	r2, r0, #0
 80018ec:	801a      	strh	r2, [r3, #0]
 80018ee:	2308      	movs	r3, #8
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	1c0a      	adds	r2, r1, #0
 80018f4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2241      	movs	r2, #65	; 0x41
 80018fa:	5c9b      	ldrb	r3, [r3, r2]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b20      	cmp	r3, #32
 8001900:	d000      	beq.n	8001904 <HAL_I2C_Master_Transmit+0x2c>
 8001902:	e0e7      	b.n	8001ad4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	5c9b      	ldrb	r3, [r3, r2]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_I2C_Master_Transmit+0x3a>
 800190e:	2302      	movs	r3, #2
 8001910:	e0e1      	b.n	8001ad6 <HAL_I2C_Master_Transmit+0x1fe>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2240      	movs	r2, #64	; 0x40
 8001916:	2101      	movs	r1, #1
 8001918:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800191a:	f7ff fb53 	bl	8000fc4 <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	0219      	lsls	r1, r3, #8
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2319      	movs	r3, #25
 800192e:	2201      	movs	r2, #1
 8001930:	f000 f8fc 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001934:	1e03      	subs	r3, r0, #0
 8001936:	d001      	beq.n	800193c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0cc      	b.n	8001ad6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2241      	movs	r2, #65	; 0x41
 8001940:	2121      	movs	r1, #33	; 0x21
 8001942:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2242      	movs	r2, #66	; 0x42
 8001948:	2110      	movs	r1, #16
 800194a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2208      	movs	r2, #8
 800195c:	18ba      	adds	r2, r7, r2
 800195e:	8812      	ldrh	r2, [r2, #0]
 8001960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d911      	bls.n	8001996 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	22ff      	movs	r2, #255	; 0xff
 8001976:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197c:	b2da      	uxtb	r2, r3
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	045c      	lsls	r4, r3, #17
 8001982:	230a      	movs	r3, #10
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	8819      	ldrh	r1, [r3, #0]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <HAL_I2C_Master_Transmit+0x208>)
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	0023      	movs	r3, r4
 8001990:	f000 f9ec 	bl	8001d6c <I2C_TransferConfig>
 8001994:	e075      	b.n	8001a82 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	049c      	lsls	r4, r3, #18
 80019aa:	230a      	movs	r3, #10
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	8819      	ldrh	r1, [r3, #0]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <HAL_I2C_Master_Transmit+0x208>)
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	0023      	movs	r3, r4
 80019b8:	f000 f9d8 	bl	8001d6c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80019bc:	e061      	b.n	8001a82 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f8f0 	bl	8001baa <I2C_WaitOnTXISFlagUntilTimeout>
 80019ca:	1e03      	subs	r3, r0, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e081      	b.n	8001ad6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d03a      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0x1aa>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d136      	bne.n	8001a82 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	f000 f883 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e053      	b.n	8001ad6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2bff      	cmp	r3, #255	; 0xff
 8001a36:	d911      	bls.n	8001a5c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	22ff      	movs	r2, #255	; 0xff
 8001a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	045c      	lsls	r4, r3, #17
 8001a48:	230a      	movs	r3, #10
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	8819      	ldrh	r1, [r3, #0]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	0023      	movs	r3, r4
 8001a56:	f000 f989 	bl	8001d6c <I2C_TransferConfig>
 8001a5a:	e012      	b.n	8001a82 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	049c      	lsls	r4, r3, #18
 8001a70:	230a      	movs	r3, #10
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	8819      	ldrh	r1, [r3, #0]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	0023      	movs	r3, r4
 8001a7e:	f000 f975 	bl	8001d6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d198      	bne.n	80019be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 f8c8 	bl	8001c28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a98:	1e03      	subs	r3, r0, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e01a      	b.n	8001ad6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <HAL_I2C_Master_Transmit+0x20c>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2241      	movs	r2, #65	; 0x41
 8001abc:	2120      	movs	r1, #32
 8001abe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2242      	movs	r2, #66	; 0x42
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	2100      	movs	r1, #0
 8001ace:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e000      	b.n	8001ad6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001ad4:	2302      	movs	r3, #2
  }
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b007      	add	sp, #28
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	80002000 	.word	0x80002000
 8001ae4:	fe00e800 	.word	0xfe00e800

08001ae8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2202      	movs	r2, #2
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d103      	bne.n	8001b06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d007      	beq.n	8001b24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2101      	movs	r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	619a      	str	r2, [r3, #24]
  }
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b002      	add	sp, #8
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3c:	e021      	b.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	d01e      	beq.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b44:	f7ff fa3e 	bl	8000fc4 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d302      	bcc.n	8001b5a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d113      	bne.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	2220      	movs	r2, #32
 8001b60:	431a      	orrs	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2241      	movs	r2, #65	; 0x41
 8001b6a:	2120      	movs	r1, #32
 8001b6c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2242      	movs	r2, #66	; 0x42
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	425a      	negs	r2, r3
 8001b92:	4153      	adcs	r3, r2
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	001a      	movs	r2, r3
 8001b98:	1dfb      	adds	r3, r7, #7
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d0ce      	beq.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b004      	add	sp, #16
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bb6:	e02b      	b.n	8001c10 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f000 f86e 	bl	8001ca0 <I2C_IsAcknowledgeFailed>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d001      	beq.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e029      	b.n	8001c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	d01e      	beq.n	8001c10 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd2:	f7ff f9f7 	bl	8000fc4 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d302      	bcc.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d113      	bne.n	8001c10 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	2220      	movs	r2, #32
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2241      	movs	r2, #65	; 0x41
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2242      	movs	r2, #66	; 0x42
 8001c00:	2100      	movs	r1, #0
 8001c02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e007      	b.n	8001c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d1cc      	bne.n	8001bb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b004      	add	sp, #16
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c34:	e028      	b.n	8001c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 f82f 	bl	8001ca0 <I2C_IsAcknowledgeFailed>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e026      	b.n	8001c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4a:	f7ff f9bb 	bl	8000fc4 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d302      	bcc.n	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d113      	bne.n	8001c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	2220      	movs	r2, #32
 8001c66:	431a      	orrs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2241      	movs	r2, #65	; 0x41
 8001c70:	2120      	movs	r1, #32
 8001c72:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2242      	movs	r2, #66	; 0x42
 8001c78:	2100      	movs	r1, #0
 8001c7a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2240      	movs	r2, #64	; 0x40
 8001c80:	2100      	movs	r1, #0
 8001c82:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e007      	b.n	8001c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d1cf      	bne.n	8001c36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b004      	add	sp, #16
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d151      	bne.n	8001d5e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cba:	e021      	b.n	8001d00 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	d01e      	beq.n	8001d00 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc2:	f7ff f97f 	bl	8000fc4 <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d302      	bcc.n	8001cd8 <I2C_IsAcknowledgeFailed+0x38>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d113      	bne.n	8001d00 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	2220      	movs	r2, #32
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2241      	movs	r2, #65	; 0x41
 8001ce8:	2120      	movs	r1, #32
 8001cea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2242      	movs	r2, #66	; 0x42
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e02f      	b.n	8001d60 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2220      	movs	r2, #32
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	d1d6      	bne.n	8001cbc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2210      	movs	r2, #16
 8001d14:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff fee1 	bl	8001ae8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	490d      	ldr	r1, [pc, #52]	; (8001d68 <I2C_IsAcknowledgeFailed+0xc8>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2241      	movs	r2, #65	; 0x41
 8001d46:	2120      	movs	r1, #32
 8001d48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2242      	movs	r2, #66	; 0x42
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2240      	movs	r2, #64	; 0x40
 8001d56:	2100      	movs	r1, #0
 8001d58:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b004      	add	sp, #16
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	fe00e800 	.word	0xfe00e800

08001d6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	0008      	movs	r0, r1
 8001d76:	0011      	movs	r1, r2
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	240a      	movs	r4, #10
 8001d7c:	193b      	adds	r3, r7, r4
 8001d7e:	1c02      	adds	r2, r0, #0
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	2009      	movs	r0, #9
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	1c0a      	adds	r2, r1, #0
 8001d88:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	0d51      	lsrs	r1, r2, #21
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	00d2      	lsls	r2, r2, #3
 8001d98:	400a      	ands	r2, r1
 8001d9a:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <I2C_TransferConfig+0x68>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	43d2      	mvns	r2, r2
 8001da0:	401a      	ands	r2, r3
 8001da2:	0011      	movs	r1, r2
 8001da4:	193b      	adds	r3, r7, r4
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	059b      	lsls	r3, r3, #22
 8001daa:	0d9a      	lsrs	r2, r3, #22
 8001dac:	183b      	adds	r3, r7, r0
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	0418      	lsls	r0, r3, #16
 8001db2:	23ff      	movs	r3, #255	; 0xff
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	4003      	ands	r3, r0
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b005      	add	sp, #20
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	03ff63ff 	.word	0x03ff63ff

08001dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2241      	movs	r2, #65	; 0x41
 8001de6:	5c9b      	ldrb	r3, [r3, r2]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d138      	bne.n	8001e60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	5c9b      	ldrb	r3, [r3, r2]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e032      	b.n	8001e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2240      	movs	r2, #64	; 0x40
 8001e00:	2101      	movs	r1, #1
 8001e02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2241      	movs	r2, #65	; 0x41
 8001e08:	2124      	movs	r1, #36	; 0x24
 8001e0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2101      	movs	r1, #1
 8001e18:	438a      	bics	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4911      	ldr	r1, [pc, #68]	; (8001e6c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6819      	ldr	r1, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2101      	movs	r1, #1
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2241      	movs	r2, #65	; 0x41
 8001e50:	2120      	movs	r1, #32
 8001e52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	2100      	movs	r1, #0
 8001e5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e000      	b.n	8001e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
  }
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	ffffefff 	.word	0xffffefff

08001e70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2241      	movs	r2, #65	; 0x41
 8001e7e:	5c9b      	ldrb	r3, [r3, r2]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d139      	bne.n	8001efa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	5c9b      	ldrb	r3, [r3, r2]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e033      	b.n	8001efc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	2101      	movs	r1, #1
 8001e9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2241      	movs	r2, #65	; 0x41
 8001ea0:	2124      	movs	r1, #36	; 0x24
 8001ea2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	438a      	bics	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2241      	movs	r2, #65	; 0x41
 8001eea:	2120      	movs	r1, #32
 8001eec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001efa:	2302      	movs	r3, #2
  }
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b004      	add	sp, #16
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	fffff0ff 	.word	0xfffff0ff

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f000 fb76 	bl	8002608 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	d100      	bne.n	8001f28 <HAL_RCC_OscConfig+0x20>
 8001f26:	e08e      	b.n	8002046 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f28:	4bc5      	ldr	r3, [pc, #788]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	220c      	movs	r2, #12
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d00e      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f34:	4bc2      	ldr	r3, [pc, #776]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	220c      	movs	r2, #12
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d117      	bne.n	8001f70 <HAL_RCC_OscConfig+0x68>
 8001f40:	4bbf      	ldr	r3, [pc, #764]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	23c0      	movs	r3, #192	; 0xc0
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	401a      	ands	r2, r3
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	025b      	lsls	r3, r3, #9
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d10e      	bne.n	8001f70 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f52:	4bbb      	ldr	r3, [pc, #748]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d100      	bne.n	8001f60 <HAL_RCC_OscConfig+0x58>
 8001f5e:	e071      	b.n	8002044 <HAL_RCC_OscConfig+0x13c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d000      	beq.n	8001f6a <HAL_RCC_OscConfig+0x62>
 8001f68:	e06c      	b.n	8002044 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f000 fb4c 	bl	8002608 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x80>
 8001f78:	4bb1      	ldr	r3, [pc, #708]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4bb0      	ldr	r3, [pc, #704]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	0249      	lsls	r1, r1, #9
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e02f      	b.n	8001fe8 <HAL_RCC_OscConfig+0xe0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_OscConfig+0xa2>
 8001f90:	4bab      	ldr	r3, [pc, #684]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4baa      	ldr	r3, [pc, #680]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001f96:	49ab      	ldr	r1, [pc, #684]	; (8002244 <HAL_RCC_OscConfig+0x33c>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	4ba8      	ldr	r3, [pc, #672]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4ba7      	ldr	r3, [pc, #668]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001fa2:	49a9      	ldr	r1, [pc, #676]	; (8002248 <HAL_RCC_OscConfig+0x340>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e01e      	b.n	8001fe8 <HAL_RCC_OscConfig+0xe0>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xc8>
 8001fb2:	4ba3      	ldr	r3, [pc, #652]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4ba2      	ldr	r3, [pc, #648]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	02c9      	lsls	r1, r1, #11
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	4b9f      	ldr	r3, [pc, #636]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b9e      	ldr	r3, [pc, #632]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	0249      	lsls	r1, r1, #9
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xe0>
 8001fd0:	4b9b      	ldr	r3, [pc, #620]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b9a      	ldr	r3, [pc, #616]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001fd6:	499b      	ldr	r1, [pc, #620]	; (8002244 <HAL_RCC_OscConfig+0x33c>)
 8001fd8:	400a      	ands	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	4b98      	ldr	r3, [pc, #608]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b97      	ldr	r3, [pc, #604]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8001fe2:	4999      	ldr	r1, [pc, #612]	; (8002248 <HAL_RCC_OscConfig+0x340>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d014      	beq.n	800201a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ffe8 	bl	8000fc4 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ffa:	f7fe ffe3 	bl	8000fc4 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b64      	cmp	r3, #100	; 0x64
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e2fd      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200c:	4b8c      	ldr	r3, [pc, #560]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0xf2>
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe ffd3 	bl	8000fc4 <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe ffce 	bl	8000fc4 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e2e8      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	029b      	lsls	r3, r3, #10
 800203e:	4013      	ands	r3, r2
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x11c>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2202      	movs	r2, #2
 800204c:	4013      	ands	r3, r2
 800204e:	d100      	bne.n	8002052 <HAL_RCC_OscConfig+0x14a>
 8002050:	e06c      	b.n	800212c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002052:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	220c      	movs	r2, #12
 8002058:	4013      	ands	r3, r2
 800205a:	d00e      	beq.n	800207a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800205c:	4b78      	ldr	r3, [pc, #480]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	220c      	movs	r2, #12
 8002062:	4013      	ands	r3, r2
 8002064:	2b08      	cmp	r3, #8
 8002066:	d11f      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1a0>
 8002068:	4b75      	ldr	r3, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	23c0      	movs	r3, #192	; 0xc0
 800206e:	025b      	lsls	r3, r3, #9
 8002070:	401a      	ands	r2, r3
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	429a      	cmp	r2, r3
 8002078:	d116      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	4b71      	ldr	r3, [pc, #452]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2202      	movs	r2, #2
 8002080:	4013      	ands	r3, r2
 8002082:	d005      	beq.n	8002090 <HAL_RCC_OscConfig+0x188>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d001      	beq.n	8002090 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e2bb      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b6b      	ldr	r3, [pc, #428]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	22f8      	movs	r2, #248	; 0xf8
 8002096:	4393      	bics	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00da      	lsls	r2, r3, #3
 80020a0:	4b67      	ldr	r3, [pc, #412]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	e041      	b.n	800212c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d024      	beq.n	80020fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b0:	4b63      	ldr	r3, [pc, #396]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80020b6:	2101      	movs	r1, #1
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe ff82 	bl	8000fc4 <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c6:	f7fe ff7d 	bl	8000fc4 <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e297      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2202      	movs	r2, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	d0f1      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b57      	ldr	r3, [pc, #348]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	22f8      	movs	r2, #248	; 0xf8
 80020e8:	4393      	bics	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	00da      	lsls	r2, r3, #3
 80020f2:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e018      	b.n	800212c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002100:	2101      	movs	r1, #1
 8002102:	438a      	bics	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe ff5d 	bl	8000fc4 <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002110:	f7fe ff58 	bl	8000fc4 <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e272      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d1f1      	bne.n	8002110 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2208      	movs	r2, #8
 8002132:	4013      	ands	r3, r2
 8002134:	d036      	beq.n	80021a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d019      	beq.n	8002172 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002142:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002144:	2101      	movs	r1, #1
 8002146:	430a      	orrs	r2, r1
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7fe ff3b 	bl	8000fc4 <HAL_GetTick>
 800214e:	0003      	movs	r3, r0
 8002150:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7fe ff36 	bl	8000fc4 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e250      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	2202      	movs	r2, #2
 800216c:	4013      	ands	r3, r2
 800216e:	d0f1      	beq.n	8002154 <HAL_RCC_OscConfig+0x24c>
 8002170:	e018      	b.n	80021a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002172:	4b33      	ldr	r3, [pc, #204]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002176:	4b32      	ldr	r3, [pc, #200]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002178:	2101      	movs	r1, #1
 800217a:	438a      	bics	r2, r1
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe ff21 	bl	8000fc4 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe ff1c 	bl	8000fc4 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e236      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	2202      	movs	r2, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	d1f1      	bne.n	8002188 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2204      	movs	r2, #4
 80021aa:	4013      	ands	r3, r2
 80021ac:	d100      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2a8>
 80021ae:	e0b5      	b.n	800231c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b0:	231f      	movs	r3, #31
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	055b      	lsls	r3, r3, #21
 80021c0:	4013      	ands	r3, r2
 80021c2:	d111      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	0549      	lsls	r1, r1, #21
 80021ce:	430a      	orrs	r2, r1
 80021d0:	61da      	str	r2, [r3, #28]
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	055b      	lsls	r3, r3, #21
 80021da:	4013      	ands	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021e0:	231f      	movs	r3, #31
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_RCC_OscConfig+0x344>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4013      	ands	r3, r2
 80021f2:	d11a      	bne.n	800222a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_RCC_OscConfig+0x344>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_RCC_OscConfig+0x344>)
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0049      	lsls	r1, r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7fe fedf 	bl	8000fc4 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220c:	f7fe feda 	bl	8000fc4 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1f4      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_OscConfig+0x344>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10e      	bne.n	8002250 <HAL_RCC_OscConfig+0x348>
 8002232:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002234:	6a1a      	ldr	r2, [r3, #32]
 8002236:	4b02      	ldr	r3, [pc, #8]	; (8002240 <HAL_RCC_OscConfig+0x338>)
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	621a      	str	r2, [r3, #32]
 800223e:	e035      	b.n	80022ac <HAL_RCC_OscConfig+0x3a4>
 8002240:	40021000 	.word	0x40021000
 8002244:	fffeffff 	.word	0xfffeffff
 8002248:	fffbffff 	.word	0xfffbffff
 800224c:	40007000 	.word	0x40007000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10c      	bne.n	8002272 <HAL_RCC_OscConfig+0x36a>
 8002258:	4bca      	ldr	r3, [pc, #808]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	4bc9      	ldr	r3, [pc, #804]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800225e:	2101      	movs	r1, #1
 8002260:	438a      	bics	r2, r1
 8002262:	621a      	str	r2, [r3, #32]
 8002264:	4bc7      	ldr	r3, [pc, #796]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	4bc6      	ldr	r3, [pc, #792]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800226a:	2104      	movs	r1, #4
 800226c:	438a      	bics	r2, r1
 800226e:	621a      	str	r2, [r3, #32]
 8002270:	e01c      	b.n	80022ac <HAL_RCC_OscConfig+0x3a4>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b05      	cmp	r3, #5
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x38c>
 800227a:	4bc2      	ldr	r3, [pc, #776]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800227c:	6a1a      	ldr	r2, [r3, #32]
 800227e:	4bc1      	ldr	r3, [pc, #772]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002280:	2104      	movs	r1, #4
 8002282:	430a      	orrs	r2, r1
 8002284:	621a      	str	r2, [r3, #32]
 8002286:	4bbf      	ldr	r3, [pc, #764]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	4bbe      	ldr	r3, [pc, #760]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800228c:	2101      	movs	r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	621a      	str	r2, [r3, #32]
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0x3a4>
 8002294:	4bbb      	ldr	r3, [pc, #748]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002296:	6a1a      	ldr	r2, [r3, #32]
 8002298:	4bba      	ldr	r3, [pc, #744]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800229a:	2101      	movs	r1, #1
 800229c:	438a      	bics	r2, r1
 800229e:	621a      	str	r2, [r3, #32]
 80022a0:	4bb8      	ldr	r3, [pc, #736]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	4bb7      	ldr	r3, [pc, #732]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80022a6:	2104      	movs	r1, #4
 80022a8:	438a      	bics	r2, r1
 80022aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d014      	beq.n	80022de <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7fe fe86 	bl	8000fc4 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	e009      	b.n	80022d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe fe81 	bl	8000fc4 <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	4aaf      	ldr	r2, [pc, #700]	; (8002588 <HAL_RCC_OscConfig+0x680>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e19a      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d2:	4bac      	ldr	r3, [pc, #688]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	2202      	movs	r2, #2
 80022d8:	4013      	ands	r3, r2
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x3b6>
 80022dc:	e013      	b.n	8002306 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe fe71 	bl	8000fc4 <HAL_GetTick>
 80022e2:	0003      	movs	r3, r0
 80022e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e6:	e009      	b.n	80022fc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f7fe fe6c 	bl	8000fc4 <HAL_GetTick>
 80022ec:	0002      	movs	r2, r0
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	4aa5      	ldr	r2, [pc, #660]	; (8002588 <HAL_RCC_OscConfig+0x680>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e185      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	4ba1      	ldr	r3, [pc, #644]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	2202      	movs	r2, #2
 8002302:	4013      	ands	r3, r2
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002306:	231f      	movs	r3, #31
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002310:	4b9c      	ldr	r3, [pc, #624]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	4b9b      	ldr	r3, [pc, #620]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002316:	499d      	ldr	r1, [pc, #628]	; (800258c <HAL_RCC_OscConfig+0x684>)
 8002318:	400a      	ands	r2, r1
 800231a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2210      	movs	r2, #16
 8002322:	4013      	ands	r3, r2
 8002324:	d063      	beq.n	80023ee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d12a      	bne.n	8002384 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800232e:	4b95      	ldr	r3, [pc, #596]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002332:	4b94      	ldr	r3, [pc, #592]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002334:	2104      	movs	r1, #4
 8002336:	430a      	orrs	r2, r1
 8002338:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800233a:	4b92      	ldr	r3, [pc, #584]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800233c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233e:	4b91      	ldr	r3, [pc, #580]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002340:	2101      	movs	r1, #1
 8002342:	430a      	orrs	r2, r1
 8002344:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fe fe3d 	bl	8000fc4 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002350:	f7fe fe38 	bl	8000fc4 <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e152      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	2202      	movs	r2, #2
 8002368:	4013      	ands	r3, r2
 800236a:	d0f1      	beq.n	8002350 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800236c:	4b85      	ldr	r3, [pc, #532]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	22f8      	movs	r2, #248	; 0xf8
 8002372:	4393      	bics	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	00da      	lsls	r2, r3, #3
 800237c:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800237e:	430a      	orrs	r2, r1
 8002380:	635a      	str	r2, [r3, #52]	; 0x34
 8002382:	e034      	b.n	80023ee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	3305      	adds	r3, #5
 800238a:	d111      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800238c:	4b7d      	ldr	r3, [pc, #500]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800238e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002390:	4b7c      	ldr	r3, [pc, #496]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002392:	2104      	movs	r1, #4
 8002394:	438a      	bics	r2, r1
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002398:	4b7a      	ldr	r3, [pc, #488]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	22f8      	movs	r2, #248	; 0xf8
 800239e:	4393      	bics	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	00da      	lsls	r2, r3, #3
 80023a8:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34
 80023ae:	e01e      	b.n	80023ee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023b0:	4b74      	ldr	r3, [pc, #464]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80023b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b4:	4b73      	ldr	r3, [pc, #460]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80023b6:	2104      	movs	r1, #4
 80023b8:	430a      	orrs	r2, r1
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023bc:	4b71      	ldr	r3, [pc, #452]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80023be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c0:	4b70      	ldr	r3, [pc, #448]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	438a      	bics	r2, r1
 80023c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7fe fdfc 	bl	8000fc4 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023d2:	f7fe fdf7 	bl	8000fc4 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e111      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023e4:	4b67      	ldr	r3, [pc, #412]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	2202      	movs	r2, #2
 80023ea:	4013      	ands	r3, r2
 80023ec:	d1f1      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2220      	movs	r2, #32
 80023f4:	4013      	ands	r3, r2
 80023f6:	d05c      	beq.n	80024b2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80023f8:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	220c      	movs	r2, #12
 80023fe:	4013      	ands	r3, r2
 8002400:	2b0c      	cmp	r3, #12
 8002402:	d00e      	beq.n	8002422 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002404:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	220c      	movs	r2, #12
 800240a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800240c:	2b08      	cmp	r3, #8
 800240e:	d114      	bne.n	800243a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002410:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	23c0      	movs	r3, #192	; 0xc0
 8002416:	025b      	lsls	r3, r3, #9
 8002418:	401a      	ands	r2, r3
 800241a:	23c0      	movs	r3, #192	; 0xc0
 800241c:	025b      	lsls	r3, r3, #9
 800241e:	429a      	cmp	r2, r3
 8002420:	d10b      	bne.n	800243a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002422:	4b58      	ldr	r3, [pc, #352]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	025b      	lsls	r3, r3, #9
 800242a:	4013      	ands	r3, r2
 800242c:	d040      	beq.n	80024b0 <HAL_RCC_OscConfig+0x5a8>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d03c      	beq.n	80024b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0e6      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01b      	beq.n	800247a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002442:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002446:	4b4f      	ldr	r3, [pc, #316]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	0249      	lsls	r1, r1, #9
 800244c:	430a      	orrs	r2, r1
 800244e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fdb8 	bl	8000fc4 <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800245a:	f7fe fdb3 	bl	8000fc4 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0cd      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800246c:	4b45      	ldr	r3, [pc, #276]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800246e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	025b      	lsls	r3, r3, #9
 8002474:	4013      	ands	r3, r2
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x552>
 8002478:	e01b      	b.n	80024b2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800247c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002480:	4943      	ldr	r1, [pc, #268]	; (8002590 <HAL_RCC_OscConfig+0x688>)
 8002482:	400a      	ands	r2, r1
 8002484:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe fd9d 	bl	8000fc4 <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002490:	f7fe fd98 	bl	8000fc4 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e0b2      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80024a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	025b      	lsls	r3, r3, #9
 80024aa:	4013      	ands	r3, r2
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x588>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80024b0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d100      	bne.n	80024bc <HAL_RCC_OscConfig+0x5b4>
 80024ba:	e0a4      	b.n	8002606 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	220c      	movs	r2, #12
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d100      	bne.n	80024ca <HAL_RCC_OscConfig+0x5c2>
 80024c8:	e078      	b.n	80025bc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d14c      	bne.n	800256c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80024d8:	492e      	ldr	r1, [pc, #184]	; (8002594 <HAL_RCC_OscConfig+0x68c>)
 80024da:	400a      	ands	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fd71 	bl	8000fc4 <HAL_GetTick>
 80024e2:	0003      	movs	r3, r0
 80024e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fd6c 	bl	8000fc4 <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e086      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	049b      	lsls	r3, r3, #18
 8002502:	4013      	ands	r3, r2
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	220f      	movs	r2, #15
 800250c:	4393      	bics	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002516:	430a      	orrs	r2, r1
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a1e      	ldr	r2, [pc, #120]	; (8002598 <HAL_RCC_OscConfig+0x690>)
 8002520:	4013      	ands	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	431a      	orrs	r2, r3
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002530:	430a      	orrs	r2, r1
 8002532:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800253a:	2180      	movs	r1, #128	; 0x80
 800253c:	0449      	lsls	r1, r1, #17
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fd3f 	bl	8000fc4 <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fd3a 	bl	8000fc4 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e054      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	049b      	lsls	r3, r3, #18
 8002566:	4013      	ands	r3, r2
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x644>
 800256a:	e04c      	b.n	8002606 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_RCC_OscConfig+0x67c>)
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <HAL_RCC_OscConfig+0x68c>)
 8002574:	400a      	ands	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fd24 	bl	8000fc4 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x6a6>
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	40021000 	.word	0x40021000
 8002588:	00001388 	.word	0x00001388
 800258c:	efffffff 	.word	0xefffffff
 8002590:	fffeffff 	.word	0xfffeffff
 8002594:	feffffff 	.word	0xfeffffff
 8002598:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fd12 	bl	8000fc4 <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e02c      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <HAL_RCC_OscConfig+0x708>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	049b      	lsls	r3, r3, #18
 80025b6:	4013      	ands	r3, r2
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x694>
 80025ba:	e024      	b.n	8002606 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e01f      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_RCC_OscConfig+0x708>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_RCC_OscConfig+0x708>)
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	23c0      	movs	r3, #192	; 0xc0
 80025d8:	025b      	lsls	r3, r3, #9
 80025da:	401a      	ands	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d10e      	bne.n	8002602 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	220f      	movs	r2, #15
 80025e8:	401a      	ands	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	23f0      	movs	r3, #240	; 0xf0
 80025f6:	039b      	lsls	r3, r3, #14
 80025f8:	401a      	ands	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b008      	add	sp, #32
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0bf      	b.n	80027a8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <HAL_RCC_ClockConfig+0x19c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2201      	movs	r2, #1
 800262e:	4013      	ands	r3, r2
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d911      	bls.n	800265a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b5e      	ldr	r3, [pc, #376]	; (80027b0 <HAL_RCC_ClockConfig+0x19c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4393      	bics	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <HAL_RCC_ClockConfig+0x19c>)
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x19c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2201      	movs	r2, #1
 800264e:	4013      	ands	r3, r2
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0a6      	b.n	80027a8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2202      	movs	r2, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d015      	beq.n	8002690 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2204      	movs	r2, #4
 800266a:	4013      	ands	r3, r2
 800266c:	d006      	beq.n	800267c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800266e:	4b51      	ldr	r3, [pc, #324]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 8002674:	21e0      	movs	r1, #224	; 0xe0
 8002676:	00c9      	lsls	r1, r1, #3
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	22f0      	movs	r2, #240	; 0xf0
 8002682:	4393      	bics	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 800268c:	430a      	orrs	r2, r1
 800268e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	4013      	ands	r3, r2
 8002698:	d04c      	beq.n	8002734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	4013      	ands	r3, r2
 80026ac:	d120      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07a      	b.n	80027a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	049b      	lsls	r3, r3, #18
 80026c2:	4013      	ands	r3, r2
 80026c4:	d114      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06e      	b.n	80027a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80026d2:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 80026d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	025b      	lsls	r3, r3, #9
 80026da:	4013      	ands	r3, r2
 80026dc:	d108      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e062      	b.n	80027a8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e2:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2202      	movs	r2, #2
 80026e8:	4013      	ands	r3, r2
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e05b      	b.n	80027a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2203      	movs	r2, #3
 80026f6:	4393      	bics	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002704:	f7fe fc5e 	bl	8000fc4 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270c:	e009      	b.n	8002722 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270e:	f7fe fc59 	bl	8000fc4 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <HAL_RCC_ClockConfig+0x1a4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e042      	b.n	80027a8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	220c      	movs	r2, #12
 8002728:	401a      	ands	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	d1ec      	bne.n	800270e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_RCC_ClockConfig+0x19c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	4013      	ands	r3, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d211      	bcs.n	8002766 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_ClockConfig+0x19c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2201      	movs	r2, #1
 8002748:	4393      	bics	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_RCC_ClockConfig+0x19c>)
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x19c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d001      	beq.n	8002766 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e020      	b.n	80027a8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2204      	movs	r2, #4
 800276c:	4013      	ands	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_RCC_ClockConfig+0x1a8>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 8002780:	430a      	orrs	r2, r1
 8002782:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002784:	f000 f820 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002788:	0001      	movs	r1, r0
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x1a0>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	220f      	movs	r2, #15
 8002792:	4013      	ands	r3, r2
 8002794:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x1ac>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	000a      	movs	r2, r1
 800279a:	40da      	lsrs	r2, r3
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1b0>)
 800279e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe f853 	bl	800084c <HAL_InitTick>
  
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	00001388 	.word	0x00001388
 80027bc:	fffff8ff 	.word	0xfffff8ff
 80027c0:	08005e14 	.word	0x08005e14
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b08f      	sub	sp, #60	; 0x3c
 80027cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80027ce:	2314      	movs	r3, #20
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	4a37      	ldr	r2, [pc, #220]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xe8>)
 80027d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027d6:	c313      	stmia	r3!, {r0, r1, r4}
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xec>)
 80027e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027e2:	c313      	stmia	r3!, {r0, r1, r4}
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ec:	2300      	movs	r3, #0
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f0:	2300      	movs	r3, #0
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80027fc:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	220c      	movs	r2, #12
 8002806:	4013      	ands	r3, r2
 8002808:	2b08      	cmp	r3, #8
 800280a:	d006      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x52>
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d043      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0xd0>
 8002810:	2b04      	cmp	r3, #4
 8002812:	d144      	bne.n	800289e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002814:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002818:	e044      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	0c9b      	lsrs	r3, r3, #18
 800281e:	220f      	movs	r2, #15
 8002820:	4013      	ands	r3, r2
 8002822:	2214      	movs	r2, #20
 8002824:	18ba      	adds	r2, r7, r2
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800282a:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	220f      	movs	r2, #15
 8002830:	4013      	ands	r3, r2
 8002832:	1d3a      	adds	r2, r7, #4
 8002834:	5cd3      	ldrb	r3, [r2, r3]
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283a:	23c0      	movs	r3, #192	; 0xc0
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	401a      	ands	r2, r3
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	025b      	lsls	r3, r3, #9
 8002844:	429a      	cmp	r2, r3
 8002846:	d109      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284a:	481c      	ldr	r0, [pc, #112]	; (80028bc <HAL_RCC_GetSysClockFreq+0xf4>)
 800284c:	f7fd fc64 	bl	8000118 <__udivsi3>
 8002850:	0003      	movs	r3, r0
 8002852:	001a      	movs	r2, r3
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	4353      	muls	r3, r2
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
 800285a:	e01a      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800285c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800285e:	23c0      	movs	r3, #192	; 0xc0
 8002860:	025b      	lsls	r3, r3, #9
 8002862:	401a      	ands	r2, r3
 8002864:	23c0      	movs	r3, #192	; 0xc0
 8002866:	025b      	lsls	r3, r3, #9
 8002868:	429a      	cmp	r2, r3
 800286a:	d109      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800286c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800286e:	4814      	ldr	r0, [pc, #80]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002870:	f7fd fc52 	bl	8000118 <__udivsi3>
 8002874:	0003      	movs	r3, r0
 8002876:	001a      	movs	r2, r3
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	4353      	muls	r3, r2
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
 800287e:	e008      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002882:	480e      	ldr	r0, [pc, #56]	; (80028bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002884:	f7fd fc48 	bl	8000118 <__udivsi3>
 8002888:	0003      	movs	r3, r0
 800288a:	001a      	movs	r2, r3
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	4353      	muls	r3, r2
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002896:	e005      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800289c:	e002      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_RCC_GetSysClockFreq+0xf4>)
 80028a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b00f      	add	sp, #60	; 0x3c
 80028ac:	bd90      	pop	{r4, r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	08005dec 	.word	0x08005dec
 80028b4:	08005dfc 	.word	0x08005dfc
 80028b8:	40021000 	.word	0x40021000
 80028bc:	007a1200 	.word	0x007a1200
 80028c0:	02dc6c00 	.word	0x02dc6c00

080028c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c8:	4b02      	ldr	r3, [pc, #8]	; (80028d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80028dc:	f7ff fff2 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 80028e0:	0001      	movs	r1, r0
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	2207      	movs	r2, #7
 80028ea:	4013      	ands	r3, r2
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ee:	5cd3      	ldrb	r3, [r2, r3]
 80028f0:	40d9      	lsrs	r1, r3
 80028f2:	000b      	movs	r3, r1
}    
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	40021000 	.word	0x40021000
 8002900:	08005e24 	.word	0x08005e24

08002904 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_RCC_GetClockConfig+0x4c>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2203      	movs	r2, #3
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_GetClockConfig+0x4c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	22f0      	movs	r2, #240	; 0xf0
 8002926:	401a      	ands	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_RCC_GetClockConfig+0x4c>)
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	23e0      	movs	r3, #224	; 0xe0
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	401a      	ands	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_GetClockConfig+0x50>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2201      	movs	r2, #1
 8002940:	401a      	ands	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40021000 	.word	0x40021000
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	025b      	lsls	r3, r3, #9
 8002970:	4013      	ands	r3, r2
 8002972:	d100      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002974:	e08f      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2317      	movs	r3, #23
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b6f      	ldr	r3, [pc, #444]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	055b      	lsls	r3, r3, #21
 8002986:	4013      	ands	r3, r2
 8002988:	d111      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4b6c      	ldr	r3, [pc, #432]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	4b6b      	ldr	r3, [pc, #428]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0549      	lsls	r1, r1, #21
 8002994:	430a      	orrs	r2, r1
 8002996:	61da      	str	r2, [r3, #28]
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	055b      	lsls	r3, r3, #21
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2317      	movs	r3, #23
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	4b64      	ldr	r3, [pc, #400]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	d11a      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ba:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4b60      	ldr	r3, [pc, #384]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	0049      	lsls	r1, r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c8:	f7fe fafc 	bl	8000fc4 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	e008      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d2:	f7fe faf7 	bl	8000fc4 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	; 0x64
 80029de:	d901      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e0a6      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	4b56      	ldr	r3, [pc, #344]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029f0:	4b52      	ldr	r3, [pc, #328]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	23c0      	movs	r3, #192	; 0xc0
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d034      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	23c0      	movs	r3, #192	; 0xc0
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d02c      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a12:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a1c:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	4b46      	ldr	r3, [pc, #280]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	0249      	lsls	r1, r1, #9
 8002a26:	430a      	orrs	r2, r1
 8002a28:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a2a:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a2c:	6a1a      	ldr	r2, [r3, #32]
 8002a2e:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a30:	4945      	ldr	r1, [pc, #276]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4013      	ands	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fabe 	bl	8000fc4 <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4c:	e009      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fab9 	bl	8000fc4 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	4a3c      	ldr	r2, [pc, #240]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e067      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a34      	ldr	r2, [pc, #208]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a80:	2317      	movs	r3, #23
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a90:	492f      	ldr	r1, [pc, #188]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a92:	400a      	ands	r2, r1
 8002a94:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa0:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4393      	bics	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	4013      	ands	r3, r2
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	4393      	bics	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	029b      	lsls	r3, r3, #10
 8002af8:	4013      	ands	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	4393      	bics	r3, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	2240      	movs	r2, #64	; 0x40
 8002b22:	4393      	bics	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b006      	add	sp, #24
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	fffffcff 	.word	0xfffffcff
 8002b48:	fffeffff 	.word	0xfffeffff
 8002b4c:	00001388 	.word	0x00001388
 8002b50:	efffffff 	.word	0xefffffff
 8002b54:	fffcffff 	.word	0xfffcffff

08002b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e042      	b.n	8002bf0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	223d      	movs	r2, #61	; 0x3d
 8002b6e:	5c9b      	ldrb	r3, [r3, r2]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223c      	movs	r2, #60	; 0x3c
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7fd ffdf 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	223d      	movs	r2, #61	; 0x3d
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3304      	adds	r3, #4
 8002b96:	0019      	movs	r1, r3
 8002b98:	0010      	movs	r0, r2
 8002b9a:	f000 f9b5 	bl	8002f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2246      	movs	r2, #70	; 0x46
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	223e      	movs	r2, #62	; 0x3e
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	223f      	movs	r2, #63	; 0x3f
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2240      	movs	r2, #64	; 0x40
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2241      	movs	r2, #65	; 0x41
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2242      	movs	r2, #66	; 0x42
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2243      	movs	r2, #67	; 0x43
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2244      	movs	r2, #68	; 0x44
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2245      	movs	r2, #69	; 0x45
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	223d      	movs	r2, #61	; 0x3d
 8002bea:	2101      	movs	r1, #1
 8002bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	223d      	movs	r2, #61	; 0x3d
 8002c04:	5c9b      	ldrb	r3, [r3, r2]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d001      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e03b      	b.n	8002c88 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	223d      	movs	r2, #61	; 0x3d
 8002c14:	2102      	movs	r1, #2
 8002c16:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2101      	movs	r1, #1
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <HAL_TIM_Base_Start_IT+0x98>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00f      	beq.n	8002c52 <HAL_TIM_Base_Start_IT+0x5a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d009      	beq.n	8002c52 <HAL_TIM_Base_Start_IT+0x5a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_TIM_Base_Start_IT+0x5a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d111      	bne.n	8002c76 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2207      	movs	r2, #7
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d010      	beq.n	8002c86 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2101      	movs	r1, #1
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c74:	e007      	b.n	8002c86 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2101      	movs	r1, #1
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40014000 	.word	0x40014000

08002c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2202      	movs	r2, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d124      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d11d      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	4252      	negs	r2, r2
 8002cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 f8fa 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e007      	b.n	8002cf6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f8ed 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f000 f8f9 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2204      	movs	r2, #4
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d125      	bne.n	8002d56 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2204      	movs	r2, #4
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d11e      	bne.n	8002d56 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2205      	movs	r2, #5
 8002d1e:	4252      	negs	r2, r2
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f8cd 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002d3e:	e007      	b.n	8002d50 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f8c0 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 f8cc 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d124      	bne.n	8002dae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11d      	bne.n	8002dae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2209      	movs	r2, #9
 8002d78:	4252      	negs	r2, r2
 8002d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2204      	movs	r2, #4
 8002d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f8a1 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002d96:	e007      	b.n	8002da8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 f894 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 f8a0 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2210      	movs	r2, #16
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d125      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d11e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2211      	movs	r2, #17
 8002dd0:	4252      	negs	r2, r2
 8002dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	23c0      	movs	r3, #192	; 0xc0
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d004      	beq.n	8002df2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f874 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e007      	b.n	8002e02 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 f867 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 f873 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d10f      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d108      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4252      	negs	r2, r2
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7fd fcbf 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d10f      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b80      	cmp	r3, #128	; 0x80
 8002e50:	d108      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2281      	movs	r2, #129	; 0x81
 8002e58:	4252      	negs	r2, r2
 8002e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 f938 	bl	80030d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d10f      	bne.n	8002e92 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2240      	movs	r2, #64	; 0x40
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d108      	bne.n	8002e92 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2241      	movs	r2, #65	; 0x41
 8002e86:	4252      	negs	r2, r2
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f833 	bl	8002ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d10f      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d108      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2221      	movs	r2, #33	; 0x21
 8002eb4:	4252      	negs	r2, r2
 8002eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 f902 	bl	80030c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a34      	ldr	r2, [pc, #208]	; (8002fec <TIM_Base_SetConfig+0xe4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d008      	beq.n	8002f32 <TIM_Base_SetConfig+0x2a>
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d003      	beq.n	8002f32 <TIM_Base_SetConfig+0x2a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a30      	ldr	r2, [pc, #192]	; (8002ff0 <TIM_Base_SetConfig+0xe8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2270      	movs	r2, #112	; 0x70
 8002f36:	4393      	bics	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a29      	ldr	r2, [pc, #164]	; (8002fec <TIM_Base_SetConfig+0xe4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d018      	beq.n	8002f7e <TIM_Base_SetConfig+0x76>
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d013      	beq.n	8002f7e <TIM_Base_SetConfig+0x76>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <TIM_Base_SetConfig+0xe8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00f      	beq.n	8002f7e <TIM_Base_SetConfig+0x76>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a24      	ldr	r2, [pc, #144]	; (8002ff4 <TIM_Base_SetConfig+0xec>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00b      	beq.n	8002f7e <TIM_Base_SetConfig+0x76>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <TIM_Base_SetConfig+0xf0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <TIM_Base_SetConfig+0x76>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <TIM_Base_SetConfig+0xf4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d003      	beq.n	8002f7e <TIM_Base_SetConfig+0x76>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a21      	ldr	r2, [pc, #132]	; (8003000 <TIM_Base_SetConfig+0xf8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d108      	bne.n	8002f90 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a20      	ldr	r2, [pc, #128]	; (8003004 <TIM_Base_SetConfig+0xfc>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	4393      	bics	r3, r2
 8002f96:	001a      	movs	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <TIM_Base_SetConfig+0xe4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <TIM_Base_SetConfig+0xce>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <TIM_Base_SetConfig+0xf0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_Base_SetConfig+0xce>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <TIM_Base_SetConfig+0xf4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_Base_SetConfig+0xce>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <TIM_Base_SetConfig+0xf8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d103      	bne.n	8002fde <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	615a      	str	r2, [r3, #20]
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40002000 	.word	0x40002000
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	40014400 	.word	0x40014400
 8003000:	40014800 	.word	0x40014800
 8003004:	fffffcff 	.word	0xfffffcff

08003008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	223c      	movs	r2, #60	; 0x3c
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800301c:	2302      	movs	r3, #2
 800301e:	e047      	b.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	223c      	movs	r2, #60	; 0x3c
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	223d      	movs	r2, #61	; 0x3d
 800302c:	2102      	movs	r1, #2
 800302e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2270      	movs	r2, #112	; 0x70
 8003044:	4393      	bics	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00f      	beq.n	8003084 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	05db      	lsls	r3, r3, #23
 800306c:	429a      	cmp	r2, r3
 800306e:	d009      	beq.n	8003084 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a11      	ldr	r2, [pc, #68]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d10c      	bne.n	800309e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2280      	movs	r2, #128	; 0x80
 8003088:	4393      	bics	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	4313      	orrs	r3, r2
 8003094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	223d      	movs	r2, #61	; 0x3d
 80030a2:	2101      	movs	r1, #1
 80030a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	223c      	movs	r2, #60	; 0x3c
 80030aa:	2100      	movs	r1, #0
 80030ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b004      	add	sp, #16
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40014000 	.word	0x40014000

080030c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e044      	b.n	8003180 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2274      	movs	r2, #116	; 0x74
 8003102:	2100      	movs	r1, #0
 8003104:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f7fd fdd1 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2224      	movs	r2, #36	; 0x24
 8003112:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2101      	movs	r1, #1
 8003120:	438a      	bics	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0018      	movs	r0, r3
 8003128:	f000 fb46 	bl	80037b8 <UART_SetConfig>
 800312c:	0003      	movs	r3, r0
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e024      	b.n	8003180 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	0018      	movs	r0, r3
 8003142:	f000 fcbd 	bl	8003ac0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	490d      	ldr	r1, [pc, #52]	; (8003188 <HAL_UART_Init+0xa4>)
 8003152:	400a      	ands	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	212a      	movs	r1, #42	; 0x2a
 8003162:	438a      	bics	r2, r1
 8003164:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2101      	movs	r1, #1
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 fd55 	bl	8003c28 <UART_CheckIdleState>
 800317e:	0003      	movs	r3, r0
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b002      	add	sp, #8
 8003186:	bd80      	pop	{r7, pc}
 8003188:	ffffb7ff 	.word	0xffffb7ff

0800318c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	1dbb      	adds	r3, r7, #6
 800319a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d000      	beq.n	80031a6 <HAL_UART_Transmit+0x1a>
 80031a4:	e096      	b.n	80032d4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_UART_Transmit+0x28>
 80031ac:	1dbb      	adds	r3, r7, #6
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e08e      	b.n	80032d6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	015b      	lsls	r3, r3, #5
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d109      	bne.n	80031d8 <HAL_UART_Transmit+0x4c>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2201      	movs	r2, #1
 80031d0:	4013      	ands	r3, r2
 80031d2:	d001      	beq.n	80031d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e07e      	b.n	80032d6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2274      	movs	r2, #116	; 0x74
 80031dc:	5c9b      	ldrb	r3, [r3, r2]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Transmit+0x5a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e077      	b.n	80032d6 <HAL_UART_Transmit+0x14a>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2274      	movs	r2, #116	; 0x74
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	2100      	movs	r1, #0
 80031f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2221      	movs	r2, #33	; 0x21
 80031fa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031fc:	f7fd fee2 	bl	8000fc4 <HAL_GetTick>
 8003200:	0003      	movs	r3, r0
 8003202:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1dba      	adds	r2, r7, #6
 8003208:	2150      	movs	r1, #80	; 0x50
 800320a:	8812      	ldrh	r2, [r2, #0]
 800320c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1dba      	adds	r2, r7, #6
 8003212:	2152      	movs	r1, #82	; 0x52
 8003214:	8812      	ldrh	r2, [r2, #0]
 8003216:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	015b      	lsls	r3, r3, #5
 8003220:	429a      	cmp	r2, r3
 8003222:	d108      	bne.n	8003236 <HAL_UART_Transmit+0xaa>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e003      	b.n	800323e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2274      	movs	r2, #116	; 0x74
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003246:	e02d      	b.n	80032a4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	0013      	movs	r3, r2
 8003252:	2200      	movs	r2, #0
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	f000 fd31 	bl	8003cbc <UART_WaitOnFlagUntilTimeout>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d001      	beq.n	8003262 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e039      	b.n	80032d6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	881a      	ldrh	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	05d2      	lsls	r2, r2, #23
 8003272:	0dd2      	lsrs	r2, r2, #23
 8003274:	b292      	uxth	r2, r2
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	3302      	adds	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e008      	b.n	8003292 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b292      	uxth	r2, r2
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	3301      	adds	r3, #1
 8003290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2252      	movs	r2, #82	; 0x52
 8003296:	5a9b      	ldrh	r3, [r3, r2]
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b299      	uxth	r1, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2252      	movs	r2, #82	; 0x52
 80032a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2252      	movs	r2, #82	; 0x52
 80032a8:	5a9b      	ldrh	r3, [r3, r2]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1cb      	bne.n	8003248 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	0013      	movs	r3, r2
 80032ba:	2200      	movs	r2, #0
 80032bc:	2140      	movs	r1, #64	; 0x40
 80032be:	f000 fcfd 	bl	8003cbc <UART_WaitOnFlagUntilTimeout>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d001      	beq.n	80032ca <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e005      	b.n	80032d6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80032d4:	2302      	movs	r3, #2
  }
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b008      	add	sp, #32
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	1dbb      	adds	r3, r7, #6
 80032ea:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d13f      	bne.n	8003374 <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_UART_Receive_IT+0x24>
 80032fa:	1dbb      	adds	r3, r7, #6
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e037      	b.n	8003376 <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	015b      	lsls	r3, r3, #5
 800330e:	429a      	cmp	r2, r3
 8003310:	d109      	bne.n	8003326 <HAL_UART_Receive_IT+0x48>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	d001      	beq.n	8003326 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e027      	b.n	8003376 <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2274      	movs	r2, #116	; 0x74
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_UART_Receive_IT+0x56>
 8003330:	2302      	movs	r3, #2
 8003332:	e020      	b.n	8003376 <HAL_UART_Receive_IT+0x98>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2274      	movs	r2, #116	; 0x74
 8003338:	2101      	movs	r1, #1
 800333a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	4013      	ands	r3, r2
 800334e:	d008      	beq.n	8003362 <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	04c9      	lsls	r1, r1, #19
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003362:	1dbb      	adds	r3, r7, #6
 8003364:	881a      	ldrh	r2, [r3, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	0018      	movs	r0, r3
 800336c:	f000 fd24 	bl	8003db8 <UART_Start_Receive_IT>
 8003370:	0003      	movs	r3, r0
 8003372:	e000      	b.n	8003376 <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b004      	add	sp, #16
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4ab5      	ldr	r2, [pc, #724]	; (8003678 <HAL_UART_IRQHandler+0x2f8>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d112      	bne.n	80033d4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2220      	movs	r2, #32
 80033b2:	4013      	ands	r3, r2
 80033b4:	d00e      	beq.n	80033d4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2220      	movs	r2, #32
 80033ba:	4013      	ands	r3, r2
 80033bc:	d00a      	beq.n	80033d4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d100      	bne.n	80033c8 <HAL_UART_IRQHandler+0x48>
 80033c6:	e1d4      	b.n	8003772 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	0010      	movs	r0, r2
 80033d0:	4798      	blx	r3
      }
      return;
 80033d2:	e1ce      	b.n	8003772 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d100      	bne.n	80033dc <HAL_UART_IRQHandler+0x5c>
 80033da:	e0d9      	b.n	8003590 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2201      	movs	r2, #1
 80033e0:	4013      	ands	r3, r2
 80033e2:	d104      	bne.n	80033ee <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	4aa5      	ldr	r2, [pc, #660]	; (800367c <HAL_UART_IRQHandler+0x2fc>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	d100      	bne.n	80033ee <HAL_UART_IRQHandler+0x6e>
 80033ec:	e0d0      	b.n	8003590 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2201      	movs	r2, #1
 80033f2:	4013      	ands	r3, r2
 80033f4:	d010      	beq.n	8003418 <HAL_UART_IRQHandler+0x98>
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	d00b      	beq.n	8003418 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	589b      	ldr	r3, [r3, r2]
 800340e:	2201      	movs	r2, #1
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2202      	movs	r2, #2
 800341c:	4013      	ands	r3, r2
 800341e:	d00f      	beq.n	8003440 <HAL_UART_IRQHandler+0xc0>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2201      	movs	r2, #1
 8003424:	4013      	ands	r3, r2
 8003426:	d00b      	beq.n	8003440 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2202      	movs	r2, #2
 800342e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	589b      	ldr	r3, [r3, r2]
 8003436:	2204      	movs	r2, #4
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2204      	movs	r2, #4
 8003444:	4013      	ands	r3, r2
 8003446:	d00f      	beq.n	8003468 <HAL_UART_IRQHandler+0xe8>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
 800344e:	d00b      	beq.n	8003468 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2204      	movs	r2, #4
 8003456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	589b      	ldr	r3, [r3, r2]
 800345e:	2202      	movs	r2, #2
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2208      	movs	r2, #8
 800346c:	4013      	ands	r3, r2
 800346e:	d013      	beq.n	8003498 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2220      	movs	r2, #32
 8003474:	4013      	ands	r3, r2
 8003476:	d103      	bne.n	8003480 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2201      	movs	r2, #1
 800347c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800347e:	d00b      	beq.n	8003498 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2208      	movs	r2, #8
 8003486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	589b      	ldr	r3, [r3, r2]
 800348e:	2208      	movs	r2, #8
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4013      	ands	r3, r2
 80034a0:	d011      	beq.n	80034c6 <HAL_UART_IRQHandler+0x146>
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	04db      	lsls	r3, r3, #19
 80034a8:	4013      	ands	r3, r2
 80034aa:	d00c      	beq.n	80034c6 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	589b      	ldr	r3, [r3, r2]
 80034bc:	2220      	movs	r2, #32
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	589b      	ldr	r3, [r3, r2]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d100      	bne.n	80034d2 <HAL_UART_IRQHandler+0x152>
 80034d0:	e151      	b.n	8003776 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	2220      	movs	r2, #32
 80034d6:	4013      	ands	r3, r2
 80034d8:	d00c      	beq.n	80034f4 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2220      	movs	r2, #32
 80034de:	4013      	ands	r3, r2
 80034e0:	d008      	beq.n	80034f4 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	0010      	movs	r0, r2
 80034f2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	589b      	ldr	r3, [r3, r2]
 80034fa:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2240      	movs	r2, #64	; 0x40
 8003504:	4013      	ands	r3, r2
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d003      	beq.n	8003512 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2228      	movs	r2, #40	; 0x28
 800350e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003510:	d033      	beq.n	800357a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 fcdd 	bl	8003ed4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2240      	movs	r2, #64	; 0x40
 8003522:	4013      	ands	r3, r2
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d123      	bne.n	8003570 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2140      	movs	r1, #64	; 0x40
 8003534:	438a      	bics	r2, r1
 8003536:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a4e      	ldr	r2, [pc, #312]	; (8003680 <HAL_UART_IRQHandler+0x300>)
 8003546:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	0018      	movs	r0, r3
 800354e:	f7fd fe93 	bl	8001278 <HAL_DMA_Abort_IT>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d01a      	beq.n	800358c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	0018      	movs	r0, r3
 8003562:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	e012      	b.n	800358c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 f911 	bl	8003790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356e:	e00d      	b.n	800358c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f90c 	bl	8003790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	e008      	b.n	800358c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0018      	movs	r0, r3
 800357e:	f000 f907 	bl	8003790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	2100      	movs	r1, #0
 8003588:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800358a:	e0f4      	b.n	8003776 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358c:	46c0      	nop			; (mov r8, r8)
    return;
 800358e:	e0f2      	b.n	8003776 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	2b01      	cmp	r3, #1
 8003596:	d000      	beq.n	800359a <HAL_UART_IRQHandler+0x21a>
 8003598:	e0b7      	b.n	800370a <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2210      	movs	r2, #16
 800359e:	4013      	ands	r3, r2
 80035a0:	d100      	bne.n	80035a4 <HAL_UART_IRQHandler+0x224>
 80035a2:	e0b2      	b.n	800370a <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2210      	movs	r2, #16
 80035a8:	4013      	ands	r3, r2
 80035aa:	d100      	bne.n	80035ae <HAL_UART_IRQHandler+0x22e>
 80035ac:	e0ad      	b.n	800370a <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2210      	movs	r2, #16
 80035b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2240      	movs	r2, #64	; 0x40
 80035be:	4013      	ands	r3, r2
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d161      	bne.n	8003688 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	2108      	movs	r1, #8
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d100      	bne.n	80035dc <HAL_UART_IRQHandler+0x25c>
 80035da:	e0ce      	b.n	800377a <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2258      	movs	r2, #88	; 0x58
 80035e0:	5a9b      	ldrh	r3, [r3, r2]
 80035e2:	2208      	movs	r2, #8
 80035e4:	18ba      	adds	r2, r7, r2
 80035e6:	8812      	ldrh	r2, [r2, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d300      	bcc.n	80035ee <HAL_UART_IRQHandler+0x26e>
 80035ec:	e0c5      	b.n	800377a <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2208      	movs	r2, #8
 80035f2:	18ba      	adds	r2, r7, r2
 80035f4:	215a      	movs	r1, #90	; 0x5a
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b20      	cmp	r3, #32
 8003602:	d02a      	beq.n	800365a <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	491d      	ldr	r1, [pc, #116]	; (8003684 <HAL_UART_IRQHandler+0x304>)
 8003610:	400a      	ands	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2101      	movs	r1, #1
 8003620:	438a      	bics	r2, r1
 8003622:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2140      	movs	r1, #64	; 0x40
 8003630:	438a      	bics	r2, r1
 8003632:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2110      	movs	r1, #16
 800364c:	438a      	bics	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	0018      	movs	r0, r3
 8003656:	f7fd fdd7 	bl	8001208 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2258      	movs	r2, #88	; 0x58
 800365e:	5a9a      	ldrh	r2, [r3, r2]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	215a      	movs	r1, #90	; 0x5a
 8003664:	5a5b      	ldrh	r3, [r3, r1]
 8003666:	b29b      	uxth	r3, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0011      	movs	r1, r2
 8003670:	0018      	movs	r0, r3
 8003672:	f000 f895 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003676:	e080      	b.n	800377a <HAL_UART_IRQHandler+0x3fa>
 8003678:	0000080f 	.word	0x0000080f
 800367c:	04000120 	.word	0x04000120
 8003680:	08003f35 	.word	0x08003f35
 8003684:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2258      	movs	r2, #88	; 0x58
 800368c:	5a99      	ldrh	r1, [r3, r2]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	225a      	movs	r2, #90	; 0x5a
 8003692:	5a9b      	ldrh	r3, [r3, r2]
 8003694:	b29a      	uxth	r2, r3
 8003696:	230a      	movs	r3, #10
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	1a8a      	subs	r2, r1, r2
 800369c:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	225a      	movs	r2, #90	; 0x5a
 80036a2:	5a9b      	ldrh	r3, [r3, r2]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d100      	bne.n	80036ac <HAL_UART_IRQHandler+0x32c>
 80036aa:	e068      	b.n	800377e <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 80036ac:	230a      	movs	r3, #10
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d063      	beq.n	800377e <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4932      	ldr	r1, [pc, #200]	; (800378c <HAL_UART_IRQHandler+0x40c>)
 80036c2:	400a      	ands	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	438a      	bics	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2110      	movs	r1, #16
 80036f4:	438a      	bics	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036f8:	230a      	movs	r3, #10
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	0011      	movs	r1, r2
 8003702:	0018      	movs	r0, r3
 8003704:	f000 f84c 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003708:	e039      	b.n	800377e <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	035b      	lsls	r3, r3, #13
 8003710:	4013      	ands	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_UART_IRQHandler+0x3b2>
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	03db      	lsls	r3, r3, #15
 800371a:	4013      	ands	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	0352      	lsls	r2, r2, #13
 8003726:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	0018      	movs	r0, r3
 800372c:	f000 fd20 	bl	8004170 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003730:	e028      	b.n	8003784 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	4013      	ands	r3, r2
 8003738:	d00d      	beq.n	8003756 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	4013      	ands	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01b      	beq.n	8003782 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	0010      	movs	r0, r2
 8003752:	4798      	blx	r3
    }
    return;
 8003754:	e015      	b.n	8003782 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	4013      	ands	r3, r2
 800375c:	d012      	beq.n	8003784 <HAL_UART_IRQHandler+0x404>
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2240      	movs	r2, #64	; 0x40
 8003762:	4013      	ands	r3, r2
 8003764:	d00e      	beq.n	8003784 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 fbfa 	bl	8003f62 <UART_EndTransmit_IT>
    return;
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	e008      	b.n	8003784 <HAL_UART_IRQHandler+0x404>
      return;
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	e006      	b.n	8003784 <HAL_UART_IRQHandler+0x404>
    return;
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	e004      	b.n	8003784 <HAL_UART_IRQHandler+0x404>
      return;
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	e002      	b.n	8003784 <HAL_UART_IRQHandler+0x404>
      return;
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	e000      	b.n	8003784 <HAL_UART_IRQHandler+0x404>
    return;
 8003782:	46c0      	nop			; (mov r8, r8)
  }

}
 8003784:	46bd      	mov	sp, r7
 8003786:	b008      	add	sp, #32
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	fffffedf 	.word	0xfffffedf

08003790 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b002      	add	sp, #8
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	000a      	movs	r2, r1
 80037aa:	1cbb      	adds	r3, r7, #2
 80037ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c0:	231e      	movs	r3, #30
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4aac      	ldr	r2, [pc, #688]	; (8003a98 <UART_SetConfig+0x2e0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	0019      	movs	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4aa7      	ldr	r2, [pc, #668]	; (8003a9c <UART_SetConfig+0x2e4>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a9e      	ldr	r2, [pc, #632]	; (8003aa0 <UART_SetConfig+0x2e8>)
 8003826:	4013      	ands	r3, r2
 8003828:	0019      	movs	r1, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a9a      	ldr	r2, [pc, #616]	; (8003aa4 <UART_SetConfig+0x2ec>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d125      	bne.n	800388a <UART_SetConfig+0xd2>
 800383e:	4b9a      	ldr	r3, [pc, #616]	; (8003aa8 <UART_SetConfig+0x2f0>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	2203      	movs	r2, #3
 8003844:	4013      	ands	r3, r2
 8003846:	2b01      	cmp	r3, #1
 8003848:	d00f      	beq.n	800386a <UART_SetConfig+0xb2>
 800384a:	d304      	bcc.n	8003856 <UART_SetConfig+0x9e>
 800384c:	2b02      	cmp	r3, #2
 800384e:	d011      	beq.n	8003874 <UART_SetConfig+0xbc>
 8003850:	2b03      	cmp	r3, #3
 8003852:	d005      	beq.n	8003860 <UART_SetConfig+0xa8>
 8003854:	e013      	b.n	800387e <UART_SetConfig+0xc6>
 8003856:	231f      	movs	r3, #31
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e064      	b.n	800392a <UART_SetConfig+0x172>
 8003860:	231f      	movs	r3, #31
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2202      	movs	r2, #2
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e05f      	b.n	800392a <UART_SetConfig+0x172>
 800386a:	231f      	movs	r3, #31
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2204      	movs	r2, #4
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e05a      	b.n	800392a <UART_SetConfig+0x172>
 8003874:	231f      	movs	r3, #31
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	2208      	movs	r2, #8
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	e055      	b.n	800392a <UART_SetConfig+0x172>
 800387e:	231f      	movs	r3, #31
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2210      	movs	r2, #16
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	e04f      	b.n	800392a <UART_SetConfig+0x172>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a87      	ldr	r2, [pc, #540]	; (8003aac <UART_SetConfig+0x2f4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d132      	bne.n	80038fa <UART_SetConfig+0x142>
 8003894:	4b84      	ldr	r3, [pc, #528]	; (8003aa8 <UART_SetConfig+0x2f0>)
 8003896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003898:	23c0      	movs	r3, #192	; 0xc0
 800389a:	029b      	lsls	r3, r3, #10
 800389c:	4013      	ands	r3, r2
 800389e:	2280      	movs	r2, #128	; 0x80
 80038a0:	0252      	lsls	r2, r2, #9
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d019      	beq.n	80038da <UART_SetConfig+0x122>
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	0252      	lsls	r2, r2, #9
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d802      	bhi.n	80038b4 <UART_SetConfig+0xfc>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <UART_SetConfig+0x10e>
 80038b2:	e01c      	b.n	80038ee <UART_SetConfig+0x136>
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	0292      	lsls	r2, r2, #10
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <UART_SetConfig+0x12c>
 80038bc:	22c0      	movs	r2, #192	; 0xc0
 80038be:	0292      	lsls	r2, r2, #10
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d005      	beq.n	80038d0 <UART_SetConfig+0x118>
 80038c4:	e013      	b.n	80038ee <UART_SetConfig+0x136>
 80038c6:	231f      	movs	r3, #31
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	e02c      	b.n	800392a <UART_SetConfig+0x172>
 80038d0:	231f      	movs	r3, #31
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2202      	movs	r2, #2
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e027      	b.n	800392a <UART_SetConfig+0x172>
 80038da:	231f      	movs	r3, #31
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	2204      	movs	r2, #4
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e022      	b.n	800392a <UART_SetConfig+0x172>
 80038e4:	231f      	movs	r3, #31
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2208      	movs	r2, #8
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e01d      	b.n	800392a <UART_SetConfig+0x172>
 80038ee:	231f      	movs	r3, #31
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	2210      	movs	r2, #16
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	e017      	b.n	800392a <UART_SetConfig+0x172>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a6c      	ldr	r2, [pc, #432]	; (8003ab0 <UART_SetConfig+0x2f8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d104      	bne.n	800390e <UART_SetConfig+0x156>
 8003904:	231f      	movs	r3, #31
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e00d      	b.n	800392a <UART_SetConfig+0x172>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a68      	ldr	r2, [pc, #416]	; (8003ab4 <UART_SetConfig+0x2fc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d104      	bne.n	8003922 <UART_SetConfig+0x16a>
 8003918:	231f      	movs	r3, #31
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e003      	b.n	800392a <UART_SetConfig+0x172>
 8003922:	231f      	movs	r3, #31
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	2210      	movs	r2, #16
 8003928:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69da      	ldr	r2, [r3, #28]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	429a      	cmp	r2, r3
 8003934:	d15c      	bne.n	80039f0 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8003936:	231f      	movs	r3, #31
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d00d      	beq.n	800395c <UART_SetConfig+0x1a4>
 8003940:	dc02      	bgt.n	8003948 <UART_SetConfig+0x190>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <UART_SetConfig+0x19a>
 8003946:	e015      	b.n	8003974 <UART_SetConfig+0x1bc>
 8003948:	2b04      	cmp	r3, #4
 800394a:	d00a      	beq.n	8003962 <UART_SetConfig+0x1aa>
 800394c:	2b08      	cmp	r3, #8
 800394e:	d00d      	beq.n	800396c <UART_SetConfig+0x1b4>
 8003950:	e010      	b.n	8003974 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003952:	f7fe ffc1 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8003956:	0003      	movs	r3, r0
 8003958:	61bb      	str	r3, [r7, #24]
        break;
 800395a:	e012      	b.n	8003982 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800395c:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <UART_SetConfig+0x300>)
 800395e:	61bb      	str	r3, [r7, #24]
        break;
 8003960:	e00f      	b.n	8003982 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003962:	f7fe ff31 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8003966:	0003      	movs	r3, r0
 8003968:	61bb      	str	r3, [r7, #24]
        break;
 800396a:	e00a      	b.n	8003982 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	61bb      	str	r3, [r7, #24]
        break;
 8003972:	e006      	b.n	8003982 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003978:	231e      	movs	r3, #30
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
        break;
 8003980:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d100      	bne.n	800398a <UART_SetConfig+0x1d2>
 8003988:	e079      	b.n	8003a7e <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	005a      	lsls	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	18d2      	adds	r2, r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0019      	movs	r1, r3
 800399c:	0010      	movs	r0, r2
 800399e:	f7fc fbbb 	bl	8000118 <__udivsi3>
 80039a2:	0003      	movs	r3, r0
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b0f      	cmp	r3, #15
 80039ac:	d91b      	bls.n	80039e6 <UART_SetConfig+0x22e>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4a42      	ldr	r2, [pc, #264]	; (8003abc <UART_SetConfig+0x304>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d817      	bhi.n	80039e6 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	200e      	movs	r0, #14
 80039bc:	183b      	adds	r3, r7, r0
 80039be:	210f      	movs	r1, #15
 80039c0:	438a      	bics	r2, r1
 80039c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2207      	movs	r2, #7
 80039cc:	4013      	ands	r3, r2
 80039ce:	b299      	uxth	r1, r3
 80039d0:	183b      	adds	r3, r7, r0
 80039d2:	183a      	adds	r2, r7, r0
 80039d4:	8812      	ldrh	r2, [r2, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	183a      	adds	r2, r7, r0
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	e04b      	b.n	8003a7e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 80039e6:	231e      	movs	r3, #30
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e046      	b.n	8003a7e <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039f0:	231f      	movs	r3, #31
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d00d      	beq.n	8003a16 <UART_SetConfig+0x25e>
 80039fa:	dc02      	bgt.n	8003a02 <UART_SetConfig+0x24a>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <UART_SetConfig+0x254>
 8003a00:	e015      	b.n	8003a2e <UART_SetConfig+0x276>
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d00a      	beq.n	8003a1c <UART_SetConfig+0x264>
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d00d      	beq.n	8003a26 <UART_SetConfig+0x26e>
 8003a0a:	e010      	b.n	8003a2e <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7fe ff64 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8003a10:	0003      	movs	r3, r0
 8003a12:	61bb      	str	r3, [r7, #24]
        break;
 8003a14:	e012      	b.n	8003a3c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <UART_SetConfig+0x300>)
 8003a18:	61bb      	str	r3, [r7, #24]
        break;
 8003a1a:	e00f      	b.n	8003a3c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1c:	f7fe fed4 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8003a20:	0003      	movs	r3, r0
 8003a22:	61bb      	str	r3, [r7, #24]
        break;
 8003a24:	e00a      	b.n	8003a3c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	61bb      	str	r3, [r7, #24]
        break;
 8003a2c:	e006      	b.n	8003a3c <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a32:	231e      	movs	r3, #30
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
        break;
 8003a3a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01d      	beq.n	8003a7e <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	085a      	lsrs	r2, r3, #1
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	18d2      	adds	r2, r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	0019      	movs	r1, r3
 8003a52:	0010      	movs	r0, r2
 8003a54:	f7fc fb60 	bl	8000118 <__udivsi3>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d908      	bls.n	8003a76 <UART_SetConfig+0x2be>
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4a15      	ldr	r2, [pc, #84]	; (8003abc <UART_SetConfig+0x304>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d804      	bhi.n	8003a76 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	e003      	b.n	8003a7e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8003a76:	231e      	movs	r3, #30
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a8a:	231e      	movs	r3, #30
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	781b      	ldrb	r3, [r3, #0]
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b008      	add	sp, #32
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	efff69f3 	.word	0xefff69f3
 8003a9c:	ffffcfff 	.word	0xffffcfff
 8003aa0:	fffff4ff 	.word	0xfffff4ff
 8003aa4:	40013800 	.word	0x40013800
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40004400 	.word	0x40004400
 8003ab0:	40004800 	.word	0x40004800
 8003ab4:	40004c00 	.word	0x40004c00
 8003ab8:	007a1200 	.word	0x007a1200
 8003abc:	0000ffff 	.word	0x0000ffff

08003ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	2201      	movs	r2, #1
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a4a      	ldr	r2, [pc, #296]	; (8003c04 <UART_AdvFeatureConfig+0x144>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	0019      	movs	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	2202      	movs	r2, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	d00b      	beq.n	8003b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a43      	ldr	r2, [pc, #268]	; (8003c08 <UART_AdvFeatureConfig+0x148>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	0019      	movs	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	2204      	movs	r2, #4
 8003b12:	4013      	ands	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a3b      	ldr	r2, [pc, #236]	; (8003c0c <UART_AdvFeatureConfig+0x14c>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2208      	movs	r2, #8
 8003b34:	4013      	ands	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a34      	ldr	r2, [pc, #208]	; (8003c10 <UART_AdvFeatureConfig+0x150>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2210      	movs	r2, #16
 8003b56:	4013      	ands	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <UART_AdvFeatureConfig+0x154>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	2220      	movs	r2, #32
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d00b      	beq.n	8003b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <UART_AdvFeatureConfig+0x158>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2240      	movs	r2, #64	; 0x40
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d01d      	beq.n	8003bda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <UART_AdvFeatureConfig+0x15c>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	0019      	movs	r1, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	035b      	lsls	r3, r3, #13
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10b      	bne.n	8003bda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <UART_AdvFeatureConfig+0x160>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	4013      	ands	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4a0e      	ldr	r2, [pc, #56]	; (8003c24 <UART_AdvFeatureConfig+0x164>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	fffdffff 	.word	0xfffdffff
 8003c08:	fffeffff 	.word	0xfffeffff
 8003c0c:	fffbffff 	.word	0xfffbffff
 8003c10:	ffff7fff 	.word	0xffff7fff
 8003c14:	ffffefff 	.word	0xffffefff
 8003c18:	ffffdfff 	.word	0xffffdfff
 8003c1c:	ffefffff 	.word	0xffefffff
 8003c20:	ff9fffff 	.word	0xff9fffff
 8003c24:	fff7ffff 	.word	0xfff7ffff

08003c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	2100      	movs	r1, #0
 8003c36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c38:	f7fd f9c4 	bl	8000fc4 <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2208      	movs	r2, #8
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d10d      	bne.n	8003c6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	0399      	lsls	r1, r3, #14
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <UART_CheckIdleState+0x90>)
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	0013      	movs	r3, r2
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f000 f82d 	bl	8003cbc <UART_WaitOnFlagUntilTimeout>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d001      	beq.n	8003c6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e022      	b.n	8003cb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2204      	movs	r2, #4
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d10d      	bne.n	8003c94 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	03d9      	lsls	r1, r3, #15
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <UART_CheckIdleState+0x90>)
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	0013      	movs	r3, r2
 8003c86:	2200      	movs	r2, #0
 8003c88:	f000 f818 	bl	8003cbc <UART_WaitOnFlagUntilTimeout>
 8003c8c:	1e03      	subs	r3, r0, #0
 8003c8e:	d001      	beq.n	8003c94 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e00d      	b.n	8003cb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2274      	movs	r2, #116	; 0x74
 8003caa:	2100      	movs	r1, #0
 8003cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b004      	add	sp, #16
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	01ffffff 	.word	0x01ffffff

08003cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	1dfb      	adds	r3, r7, #7
 8003cca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ccc:	e05e      	b.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	d05b      	beq.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fd f976 	bl	8000fc4 <HAL_GetTick>
 8003cd8:	0002      	movs	r2, r0
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d11b      	bne.n	8003d22 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	492f      	ldr	r1, [pc, #188]	; (8003db4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	438a      	bics	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2274      	movs	r2, #116	; 0x74
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e044      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d02e      	beq.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	401a      	ands	r2, r3
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d124      	bne.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	0112      	lsls	r2, r2, #4
 8003d4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4917      	ldr	r1, [pc, #92]	; (8003db4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003d58:	400a      	ands	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2101      	movs	r1, #1
 8003d68:	438a      	bics	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	2120      	movs	r1, #32
 8003d7e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2274      	movs	r2, #116	; 0x74
 8003d84:	2100      	movs	r1, #0
 8003d86:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e00f      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	425a      	negs	r2, r3
 8003d9c:	4153      	adcs	r3, r2
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	001a      	movs	r2, r3
 8003da2:	1dfb      	adds	r3, r7, #7
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d091      	beq.n	8003cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b004      	add	sp, #16
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	fffffe5f 	.word	0xfffffe5f

08003db8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	1dbb      	adds	r3, r7, #6
 8003dc4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1dba      	adds	r2, r7, #6
 8003dd0:	2158      	movs	r1, #88	; 0x58
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1dba      	adds	r2, r7, #6
 8003dda:	215a      	movs	r1, #90	; 0x5a
 8003ddc:	8812      	ldrh	r2, [r2, #0]
 8003dde:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	015b      	lsls	r3, r3, #5
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10d      	bne.n	8003e0e <UART_Start_Receive_IT+0x56>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <UART_Start_Receive_IT+0x4c>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	225c      	movs	r2, #92	; 0x5c
 8003dfe:	4932      	ldr	r1, [pc, #200]	; (8003ec8 <UART_Start_Receive_IT+0x110>)
 8003e00:	5299      	strh	r1, [r3, r2]
 8003e02:	e02e      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	225c      	movs	r2, #92	; 0x5c
 8003e08:	21ff      	movs	r1, #255	; 0xff
 8003e0a:	5299      	strh	r1, [r3, r2]
 8003e0c:	e029      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <UART_Start_Receive_IT+0x7a>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <UART_Start_Receive_IT+0x70>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	225c      	movs	r2, #92	; 0x5c
 8003e22:	21ff      	movs	r1, #255	; 0xff
 8003e24:	5299      	strh	r1, [r3, r2]
 8003e26:	e01c      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	225c      	movs	r2, #92	; 0x5c
 8003e2c:	217f      	movs	r1, #127	; 0x7f
 8003e2e:	5299      	strh	r1, [r3, r2]
 8003e30:	e017      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	055b      	lsls	r3, r3, #21
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d10d      	bne.n	8003e5a <UART_Start_Receive_IT+0xa2>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <UART_Start_Receive_IT+0x98>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	225c      	movs	r2, #92	; 0x5c
 8003e4a:	217f      	movs	r1, #127	; 0x7f
 8003e4c:	5299      	strh	r1, [r3, r2]
 8003e4e:	e008      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	225c      	movs	r2, #92	; 0x5c
 8003e54:	213f      	movs	r1, #63	; 0x3f
 8003e56:	5299      	strh	r1, [r3, r2]
 8003e58:	e003      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	225c      	movs	r2, #92	; 0x5c
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2280      	movs	r2, #128	; 0x80
 8003e66:	2100      	movs	r1, #0
 8003e68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2222      	movs	r2, #34	; 0x22
 8003e6e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	015b      	lsls	r3, r3, #5
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d107      	bne.n	8003e9c <UART_Start_Receive_IT+0xe4>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <UART_Start_Receive_IT+0x114>)
 8003e98:	665a      	str	r2, [r3, #100]	; 0x64
 8003e9a:	e002      	b.n	8003ea2 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <UART_Start_Receive_IT+0x118>)
 8003ea0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2274      	movs	r2, #116	; 0x74
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2190      	movs	r1, #144	; 0x90
 8003eb6:	0049      	lsls	r1, r1, #1
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b004      	add	sp, #16
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	000001ff 	.word	0x000001ff
 8003ecc:	08004085 	.word	0x08004085
 8003ed0:	08003f99 	.word	0x08003f99

08003ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4912      	ldr	r1, [pc, #72]	; (8003f30 <UART_EndRxTransfer+0x5c>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	438a      	bics	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2110      	movs	r1, #16
 8003f10:	438a      	bics	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b002      	add	sp, #8
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	fffffedf 	.word	0xfffffedf

08003f34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	225a      	movs	r2, #90	; 0x5a
 8003f46:	2100      	movs	r1, #0
 8003f48:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2252      	movs	r2, #82	; 0x52
 8003f4e:	2100      	movs	r1, #0
 8003f50:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff fc1b 	bl	8003790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	438a      	bics	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fc fa65 	bl	8000458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b002      	add	sp, #8
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fa0:	230e      	movs	r3, #14
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	215c      	movs	r1, #92	; 0x5c
 8003fa8:	5a52      	ldrh	r2, [r2, r1]
 8003faa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb0:	2b22      	cmp	r3, #34	; 0x22
 8003fb2:	d158      	bne.n	8004066 <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	210c      	movs	r1, #12
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003fbe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	230e      	movs	r3, #14
 8003fc8:	18fb      	adds	r3, r7, r3
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b2d9      	uxtb	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	225a      	movs	r2, #90	; 0x5a
 8003fe6:	5a9b      	ldrh	r3, [r3, r2]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b299      	uxth	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	225a      	movs	r2, #90	; 0x5a
 8003ff2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	225a      	movs	r2, #90	; 0x5a
 8003ff8:	5a9b      	ldrh	r3, [r3, r2]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d13a      	bne.n	8004076 <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	491d      	ldr	r1, [pc, #116]	; (8004080 <UART_RxISR_8BIT+0xe8>)
 800400c:	400a      	ands	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2101      	movs	r1, #1
 800401c:	438a      	bics	r2, r1
 800401e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004030:	2b01      	cmp	r3, #1
 8004032:	d110      	bne.n	8004056 <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2110      	movs	r1, #16
 8004040:	438a      	bics	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2258      	movs	r2, #88	; 0x58
 8004048:	5a9a      	ldrh	r2, [r3, r2]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0011      	movs	r1, r2
 800404e:	0018      	movs	r0, r3
 8004050:	f7ff fba6 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
 8004054:	e003      	b.n	800405e <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f7fc f9f5 	bl	8000448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004064:	e007      	b.n	8004076 <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2108      	movs	r1, #8
 8004072:	430a      	orrs	r2, r1
 8004074:	619a      	str	r2, [r3, #24]
}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b004      	add	sp, #16
 800407c:	bd80      	pop	{r7, pc}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	fffffedf 	.word	0xfffffedf

08004084 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800408c:	230e      	movs	r3, #14
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	215c      	movs	r1, #92	; 0x5c
 8004094:	5a52      	ldrh	r2, [r2, r1]
 8004096:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800409c:	2b22      	cmp	r3, #34	; 0x22
 800409e:	d158      	bne.n	8004152 <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	210c      	movs	r1, #12
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80040aa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	220e      	movs	r2, #14
 80040b6:	18ba      	adds	r2, r7, r2
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	8812      	ldrh	r2, [r2, #0]
 80040bc:	4013      	ands	r3, r2
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	1c9a      	adds	r2, r3, #2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	225a      	movs	r2, #90	; 0x5a
 80040d2:	5a9b      	ldrh	r3, [r3, r2]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b299      	uxth	r1, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	225a      	movs	r2, #90	; 0x5a
 80040de:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	225a      	movs	r2, #90	; 0x5a
 80040e4:	5a9b      	ldrh	r3, [r3, r2]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d13a      	bne.n	8004162 <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	491d      	ldr	r1, [pc, #116]	; (800416c <UART_RxISR_16BIT+0xe8>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2101      	movs	r1, #1
 8004108:	438a      	bics	r2, r1
 800410a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	2b01      	cmp	r3, #1
 800411e:	d110      	bne.n	8004142 <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2110      	movs	r1, #16
 800412c:	438a      	bics	r2, r1
 800412e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2258      	movs	r2, #88	; 0x58
 8004134:	5a9a      	ldrh	r2, [r3, r2]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	0011      	movs	r1, r2
 800413a:	0018      	movs	r0, r3
 800413c:	f7ff fb30 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
 8004140:	e003      	b.n	800414a <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0018      	movs	r0, r3
 8004146:	f7fc f97f 	bl	8000448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004150:	e007      	b.n	8004162 <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2108      	movs	r1, #8
 800415e:	430a      	orrs	r2, r1
 8004160:	619a      	str	r2, [r3, #24]
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b004      	add	sp, #16
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	fffffedf 	.word	0xfffffedf

08004170 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	b002      	add	sp, #8
 800417e:	bd80      	pop	{r7, pc}

08004180 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	0002      	movs	r2, r0
 8004188:	1dbb      	adds	r3, r7, #6
 800418a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004190:	1dbb      	adds	r3, r7, #6
 8004192:	2200      	movs	r2, #0
 8004194:	5e9b      	ldrsh	r3, [r3, r2]
 8004196:	2b84      	cmp	r3, #132	; 0x84
 8004198:	d006      	beq.n	80041a8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800419a:	1dbb      	adds	r3, r7, #6
 800419c:	2200      	movs	r2, #0
 800419e:	5e9a      	ldrsh	r2, [r3, r2]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	18d3      	adds	r3, r2, r3
 80041a4:	3303      	adds	r3, #3
 80041a6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b004      	add	sp, #16
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041b6:	f000 faa1 	bl	80046fc <vTaskStartScheduler>
  
  return osOK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c4:	b089      	sub	sp, #36	; 0x24
 80041c6:	af04      	add	r7, sp, #16
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <osThreadCreate+0x54>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01c      	beq.n	8004216 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685c      	ldr	r4, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681d      	ldr	r5, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691e      	ldr	r6, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2208      	movs	r2, #8
 80041ec:	5e9b      	ldrsh	r3, [r3, r2]
 80041ee:	0018      	movs	r0, r3
 80041f0:	f7ff ffc6 	bl	8004180 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	9302      	str	r3, [sp, #8]
 8004200:	9201      	str	r2, [sp, #4]
 8004202:	9000      	str	r0, [sp, #0]
 8004204:	000b      	movs	r3, r1
 8004206:	0032      	movs	r2, r6
 8004208:	0029      	movs	r1, r5
 800420a:	0020      	movs	r0, r4
 800420c:	f000 f8e3 	bl	80043d6 <xTaskCreateStatic>
 8004210:	0003      	movs	r3, r0
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e01d      	b.n	8004252 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685c      	ldr	r4, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004222:	b29e      	uxth	r6, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2208      	movs	r2, #8
 8004228:	5e9b      	ldrsh	r3, [r3, r2]
 800422a:	0018      	movs	r0, r3
 800422c:	f7ff ffa8 	bl	8004180 <makeFreeRtosPriority>
 8004230:	0001      	movs	r1, r0
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	230c      	movs	r3, #12
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	9100      	str	r1, [sp, #0]
 800423c:	0013      	movs	r3, r2
 800423e:	0032      	movs	r2, r6
 8004240:	0029      	movs	r1, r5
 8004242:	0020      	movs	r0, r4
 8004244:	f000 f90a 	bl	800445c <xTaskCreate>
 8004248:	0003      	movs	r3, r0
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	e000      	b.n	8004254 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004252:	68fb      	ldr	r3, [r7, #12]
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b005      	add	sp, #20
 800425a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800425c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <osDelay+0x16>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	e000      	b.n	8004274 <osDelay+0x18>
 8004272:	2301      	movs	r3, #1
 8004274:	0018      	movs	r0, r3
 8004276:	f000 fa1b 	bl	80046b0 <vTaskDelay>
  
  return osOK;
 800427a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	b004      	add	sp, #16
 8004282:	bd80      	pop	{r7, pc}

08004284 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3308      	adds	r3, #8
 8004290:	001a      	movs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	4252      	negs	r2, r2
 800429c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3308      	adds	r3, #8
 80042a2:	001a      	movs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3308      	adds	r3, #8
 80042ac:	001a      	movs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}

080042c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b002      	add	sp, #8
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b004      	add	sp, #16
 8004318:	bd80      	pop	{r7, pc}

0800431a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	3301      	adds	r3, #1
 800432e:	d103      	bne.n	8004338 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	e00c      	b.n	8004352 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3308      	adds	r3, #8
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e002      	b.n	8004346 <vListInsert+0x2c>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d2f6      	bcs.n	8004340 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b004      	add	sp, #16
 8004384:	bd80      	pop	{r7, pc}

08004386 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6892      	ldr	r2, [r2, #8]
 800439c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6852      	ldr	r2, [r2, #4]
 80043a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d103      	bne.n	80043ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b004      	add	sp, #16
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043d6:	b590      	push	{r4, r7, lr}
 80043d8:	b08d      	sub	sp, #52	; 0x34
 80043da:	af04      	add	r7, sp, #16
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <xTaskCreateStatic+0x18>
 80043ea:	b672      	cpsid	i
 80043ec:	e7fe      	b.n	80043ec <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <xTaskCreateStatic+0x22>
 80043f4:	b672      	cpsid	i
 80043f6:	e7fe      	b.n	80043f6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043f8:	2354      	movs	r3, #84	; 0x54
 80043fa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2b54      	cmp	r3, #84	; 0x54
 8004400:	d001      	beq.n	8004406 <xTaskCreateStatic+0x30>
 8004402:	b672      	cpsid	i
 8004404:	e7fe      	b.n	8004404 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <xTaskCreateStatic+0x78>
 800440c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01d      	beq.n	800444e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800441a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2251      	movs	r2, #81	; 0x51
 8004420:	2102      	movs	r1, #2
 8004422:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004424:	683c      	ldr	r4, [r7, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	2300      	movs	r3, #0
 800442e:	9303      	str	r3, [sp, #12]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	9302      	str	r3, [sp, #8]
 8004434:	2318      	movs	r3, #24
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	0023      	movs	r3, r4
 8004440:	f000 f858 	bl	80044f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	0018      	movs	r0, r3
 8004448:	f000 f8ce 	bl	80045e8 <prvAddNewTaskToReadyList>
 800444c:	e001      	b.n	8004452 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004452:	69bb      	ldr	r3, [r7, #24]
	}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	b009      	add	sp, #36	; 0x24
 800445a:	bd90      	pop	{r4, r7, pc}

0800445c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b08d      	sub	sp, #52	; 0x34
 8004460:	af04      	add	r7, sp, #16
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	1dbb      	adds	r3, r7, #6
 800446a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800446c:	1dbb      	adds	r3, r7, #6
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	0018      	movs	r0, r3
 8004474:	f000 fd84 	bl	8004f80 <pvPortMalloc>
 8004478:	0003      	movs	r3, r0
 800447a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004482:	2054      	movs	r0, #84	; 0x54
 8004484:	f000 fd7c 	bl	8004f80 <pvPortMalloc>
 8004488:	0003      	movs	r3, r0
 800448a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
 8004498:	e006      	b.n	80044a8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	0018      	movs	r0, r3
 800449e:	f000 fe15 	bl	80050cc <vPortFree>
 80044a2:	e001      	b.n	80044a8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01a      	beq.n	80044e4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	2251      	movs	r2, #81	; 0x51
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044b6:	1dbb      	adds	r3, r7, #6
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	683c      	ldr	r4, [r7, #0]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	2300      	movs	r3, #0
 80044c2:	9303      	str	r3, [sp, #12]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	9302      	str	r3, [sp, #8]
 80044c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	0023      	movs	r3, r4
 80044d2:	f000 f80f 	bl	80044f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 f885 	bl	80045e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044de:	2301      	movs	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	e002      	b.n	80044ea <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044e4:	2301      	movs	r3, #1
 80044e6:	425b      	negs	r3, r3
 80044e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044ea:	69bb      	ldr	r3, [r7, #24]
	}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b009      	add	sp, #36	; 0x24
 80044f2:	bd90      	pop	{r4, r7, pc}

080044f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4936      	ldr	r1, [pc, #216]	; (80045e4 <prvInitialiseNewTask+0xf0>)
 800450a:	468c      	mov	ip, r1
 800450c:	4463      	add	r3, ip
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	18d3      	adds	r3, r2, r3
 8004512:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2207      	movs	r2, #7
 8004518:	4393      	bics	r3, r2
 800451a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2207      	movs	r2, #7
 8004520:	4013      	ands	r3, r2
 8004522:	d001      	beq.n	8004528 <prvInitialiseNewTask+0x34>
 8004524:	b672      	cpsid	i
 8004526:	e7fe      	b.n	8004526 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e013      	b.n	8004556 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	18d3      	adds	r3, r2, r3
 8004534:	7818      	ldrb	r0, [r3, #0]
 8004536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004538:	2134      	movs	r1, #52	; 0x34
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	18d3      	adds	r3, r2, r3
 800453e:	185b      	adds	r3, r3, r1
 8004540:	1c02      	adds	r2, r0, #0
 8004542:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	18d3      	adds	r3, r2, r3
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	3301      	adds	r3, #1
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b0f      	cmp	r3, #15
 800455a:	d9e8      	bls.n	800452e <prvInitialiseNewTask+0x3a>
 800455c:	e000      	b.n	8004560 <prvInitialiseNewTask+0x6c>
		{
			break;
 800455e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	2243      	movs	r2, #67	; 0x43
 8004564:	2100      	movs	r1, #0
 8004566:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b06      	cmp	r3, #6
 800456c:	d901      	bls.n	8004572 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800456e:	2306      	movs	r3, #6
 8004570:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	6a3a      	ldr	r2, [r7, #32]
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	2200      	movs	r2, #0
 8004582:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	3304      	adds	r3, #4
 8004588:	0018      	movs	r0, r3
 800458a:	f7ff fe99 	bl	80042c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	3318      	adds	r3, #24
 8004592:	0018      	movs	r0, r3
 8004594:	f7ff fe94 	bl	80042c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800459c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	2207      	movs	r2, #7
 80045a2:	1ad2      	subs	r2, r2, r3
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	2200      	movs	r2, #0
 80045b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	2250      	movs	r2, #80	; 0x50
 80045b8:	2100      	movs	r1, #0
 80045ba:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	68f9      	ldr	r1, [r7, #12]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 fba8 	bl	8004d18 <pxPortInitialiseStack>
 80045c8:	0002      	movs	r2, r0
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b006      	add	sp, #24
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	3fffffff 	.word	0x3fffffff

080045e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045f0:	f000 fc2e 	bl	8004e50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045f4:	4b28      	ldr	r3, [pc, #160]	; (8004698 <prvAddNewTaskToReadyList+0xb0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	4b27      	ldr	r3, [pc, #156]	; (8004698 <prvAddNewTaskToReadyList+0xb0>)
 80045fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80045fe:	4b27      	ldr	r3, [pc, #156]	; (800469c <prvAddNewTaskToReadyList+0xb4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004606:	4b25      	ldr	r3, [pc, #148]	; (800469c <prvAddNewTaskToReadyList+0xb4>)
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800460c:	4b22      	ldr	r3, [pc, #136]	; (8004698 <prvAddNewTaskToReadyList+0xb0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d110      	bne.n	8004636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004614:	f000 fa6e 	bl	8004af4 <prvInitialiseTaskLists>
 8004618:	e00d      	b.n	8004636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <prvAddNewTaskToReadyList+0xb8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004622:	4b1e      	ldr	r3, [pc, #120]	; (800469c <prvAddNewTaskToReadyList+0xb4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	429a      	cmp	r2, r3
 800462e:	d802      	bhi.n	8004636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <prvAddNewTaskToReadyList+0xb4>)
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <prvAddNewTaskToReadyList+0xbc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <prvAddNewTaskToReadyList+0xbc>)
 800463e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4b18      	ldr	r3, [pc, #96]	; (80046a8 <prvAddNewTaskToReadyList+0xc0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d903      	bls.n	8004654 <prvAddNewTaskToReadyList+0x6c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <prvAddNewTaskToReadyList+0xc0>)
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	0013      	movs	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	189b      	adds	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a12      	ldr	r2, [pc, #72]	; (80046ac <prvAddNewTaskToReadyList+0xc4>)
 8004662:	189a      	adds	r2, r3, r2
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	0019      	movs	r1, r3
 800466a:	0010      	movs	r0, r2
 800466c:	f7ff fe33 	bl	80042d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004670:	f000 fc00 	bl	8004e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <prvAddNewTaskToReadyList+0xb8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <prvAddNewTaskToReadyList+0xb4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	429a      	cmp	r2, r3
 8004688:	d201      	bcs.n	800468e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800468a:	f000 fbd1 	bl	8004e30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	200003e8 	.word	0x200003e8
 800469c:	200002e8 	.word	0x200002e8
 80046a0:	200003f4 	.word	0x200003f4
 80046a4:	20000404 	.word	0x20000404
 80046a8:	200003f0 	.word	0x200003f0
 80046ac:	200002ec 	.word	0x200002ec

080046b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d010      	beq.n	80046e4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <vTaskDelay+0x48>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <vTaskDelay+0x1e>
 80046ca:	b672      	cpsid	i
 80046cc:	e7fe      	b.n	80046cc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80046ce:	f000 f863 	bl	8004798 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2100      	movs	r1, #0
 80046d6:	0018      	movs	r0, r3
 80046d8:	f000 faca 	bl	8004c70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046dc:	f000 f868 	bl	80047b0 <xTaskResumeAll>
 80046e0:	0003      	movs	r3, r0
 80046e2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80046ea:	f000 fba1 	bl	8004e30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b004      	add	sp, #16
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	20000410 	.word	0x20000410

080046fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800470a:	003a      	movs	r2, r7
 800470c:	1d39      	adds	r1, r7, #4
 800470e:	2308      	movs	r3, #8
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	0018      	movs	r0, r3
 8004714:	f7fb fe1a 	bl	800034c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004718:	683c      	ldr	r4, [r7, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	4918      	ldr	r1, [pc, #96]	; (8004780 <vTaskStartScheduler+0x84>)
 8004720:	4818      	ldr	r0, [pc, #96]	; (8004784 <vTaskStartScheduler+0x88>)
 8004722:	9202      	str	r2, [sp, #8]
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	2300      	movs	r3, #0
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	2300      	movs	r3, #0
 800472c:	0022      	movs	r2, r4
 800472e:	f7ff fe52 	bl	80043d6 <xTaskCreateStatic>
 8004732:	0002      	movs	r2, r0
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <vTaskStartScheduler+0x8c>)
 8004736:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <vTaskStartScheduler+0x8c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004740:	2301      	movs	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	e001      	b.n	800474a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d10d      	bne.n	800476c <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004750:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <vTaskStartScheduler+0x90>)
 8004754:	2201      	movs	r2, #1
 8004756:	4252      	negs	r2, r2
 8004758:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <vTaskStartScheduler+0x94>)
 800475c:	2201      	movs	r2, #1
 800475e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <vTaskStartScheduler+0x98>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004766:	f000 fb3f 	bl	8004de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800476a:	e004      	b.n	8004776 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	d101      	bne.n	8004776 <vTaskStartScheduler+0x7a>
 8004772:	b672      	cpsid	i
 8004774:	e7fe      	b.n	8004774 <vTaskStartScheduler+0x78>
}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	b005      	add	sp, #20
 800477c:	bd90      	pop	{r4, r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	08005e0c 	.word	0x08005e0c
 8004784:	08004ad5 	.word	0x08004ad5
 8004788:	2000040c 	.word	0x2000040c
 800478c:	20000408 	.word	0x20000408
 8004790:	200003f4 	.word	0x200003f4
 8004794:	200003ec 	.word	0x200003ec

08004798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800479c:	4b03      	ldr	r3, [pc, #12]	; (80047ac <vTaskSuspendAll+0x14>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	4b02      	ldr	r3, [pc, #8]	; (80047ac <vTaskSuspendAll+0x14>)
 80047a4:	601a      	str	r2, [r3, #0]
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000410 	.word	0x20000410

080047b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047be:	4b3a      	ldr	r3, [pc, #232]	; (80048a8 <xTaskResumeAll+0xf8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <xTaskResumeAll+0x1a>
 80047c6:	b672      	cpsid	i
 80047c8:	e7fe      	b.n	80047c8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ca:	f000 fb41 	bl	8004e50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047ce:	4b36      	ldr	r3, [pc, #216]	; (80048a8 <xTaskResumeAll+0xf8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	1e5a      	subs	r2, r3, #1
 80047d4:	4b34      	ldr	r3, [pc, #208]	; (80048a8 <xTaskResumeAll+0xf8>)
 80047d6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d8:	4b33      	ldr	r3, [pc, #204]	; (80048a8 <xTaskResumeAll+0xf8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d15b      	bne.n	8004898 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047e0:	4b32      	ldr	r3, [pc, #200]	; (80048ac <xTaskResumeAll+0xfc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d057      	beq.n	8004898 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e8:	e02f      	b.n	800484a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80047ea:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <xTaskResumeAll+0x100>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3318      	adds	r3, #24
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7ff fdc5 	bl	8004386 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3304      	adds	r3, #4
 8004800:	0018      	movs	r0, r3
 8004802:	f7ff fdc0 	bl	8004386 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480a:	4b2a      	ldr	r3, [pc, #168]	; (80048b4 <xTaskResumeAll+0x104>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d903      	bls.n	800481a <xTaskResumeAll+0x6a>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004816:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <xTaskResumeAll+0x104>)
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	0013      	movs	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	189b      	adds	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <xTaskResumeAll+0x108>)
 8004828:	189a      	adds	r2, r3, r2
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3304      	adds	r3, #4
 800482e:	0019      	movs	r1, r3
 8004830:	0010      	movs	r0, r2
 8004832:	f7ff fd50 	bl	80042d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483a:	4b20      	ldr	r3, [pc, #128]	; (80048bc <xTaskResumeAll+0x10c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	429a      	cmp	r2, r3
 8004842:	d302      	bcc.n	800484a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004844:	4b1e      	ldr	r3, [pc, #120]	; (80048c0 <xTaskResumeAll+0x110>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800484a:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <xTaskResumeAll+0x100>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1cb      	bne.n	80047ea <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004858:	f000 f9e6 	bl	8004c28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800485c:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <xTaskResumeAll+0x114>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00f      	beq.n	8004888 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004868:	f000 f82e 	bl	80048c8 <xTaskIncrementTick>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d002      	beq.n	8004876 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004870:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <xTaskResumeAll+0x110>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3b01      	subs	r3, #1
 800487a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f2      	bne.n	8004868 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <xTaskResumeAll+0x114>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004888:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <xTaskResumeAll+0x110>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004894:	f000 facc 	bl	8004e30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004898:	f000 faec 	bl	8004e74 <vPortExitCritical>

	return xAlreadyYielded;
 800489c:	68bb      	ldr	r3, [r7, #8]
}
 800489e:	0018      	movs	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b004      	add	sp, #16
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	20000410 	.word	0x20000410
 80048ac:	200003e8 	.word	0x200003e8
 80048b0:	200003a8 	.word	0x200003a8
 80048b4:	200003f0 	.word	0x200003f0
 80048b8:	200002ec 	.word	0x200002ec
 80048bc:	200002e8 	.word	0x200002e8
 80048c0:	200003fc 	.word	0x200003fc
 80048c4:	200003f8 	.word	0x200003f8

080048c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048d2:	4b4c      	ldr	r3, [pc, #304]	; (8004a04 <xTaskIncrementTick+0x13c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d000      	beq.n	80048dc <xTaskIncrementTick+0x14>
 80048da:	e083      	b.n	80049e4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048dc:	4b4a      	ldr	r3, [pc, #296]	; (8004a08 <xTaskIncrementTick+0x140>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048e4:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <xTaskIncrementTick+0x140>)
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d117      	bne.n	8004920 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80048f0:	4b46      	ldr	r3, [pc, #280]	; (8004a0c <xTaskIncrementTick+0x144>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <xTaskIncrementTick+0x36>
 80048fa:	b672      	cpsid	i
 80048fc:	e7fe      	b.n	80048fc <xTaskIncrementTick+0x34>
 80048fe:	4b43      	ldr	r3, [pc, #268]	; (8004a0c <xTaskIncrementTick+0x144>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	4b42      	ldr	r3, [pc, #264]	; (8004a10 <xTaskIncrementTick+0x148>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b40      	ldr	r3, [pc, #256]	; (8004a0c <xTaskIncrementTick+0x144>)
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	4b40      	ldr	r3, [pc, #256]	; (8004a10 <xTaskIncrementTick+0x148>)
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <xTaskIncrementTick+0x14c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	4b3e      	ldr	r3, [pc, #248]	; (8004a14 <xTaskIncrementTick+0x14c>)
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f000 f984 	bl	8004c28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004920:	4b3d      	ldr	r3, [pc, #244]	; (8004a18 <xTaskIncrementTick+0x150>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	d34e      	bcc.n	80049c8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800492a:	4b38      	ldr	r3, [pc, #224]	; (8004a0c <xTaskIncrementTick+0x144>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <xTaskIncrementTick+0x70>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <xTaskIncrementTick+0x72>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493e:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <xTaskIncrementTick+0x150>)
 8004940:	2201      	movs	r2, #1
 8004942:	4252      	negs	r2, r2
 8004944:	601a      	str	r2, [r3, #0]
					break;
 8004946:	e03f      	b.n	80049c8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004948:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <xTaskIncrementTick+0x144>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d203      	bcs.n	8004968 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004960:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <xTaskIncrementTick+0x150>)
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
						break;
 8004966:	e02f      	b.n	80049c8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	3304      	adds	r3, #4
 800496c:	0018      	movs	r0, r3
 800496e:	f7ff fd0a 	bl	8004386 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3318      	adds	r3, #24
 800497e:	0018      	movs	r0, r3
 8004980:	f7ff fd01 	bl	8004386 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <xTaskIncrementTick+0x154>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d903      	bls.n	8004998 <xTaskIncrementTick+0xd0>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004994:	4b21      	ldr	r3, [pc, #132]	; (8004a1c <xTaskIncrementTick+0x154>)
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499c:	0013      	movs	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	189b      	adds	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4a1e      	ldr	r2, [pc, #120]	; (8004a20 <xTaskIncrementTick+0x158>)
 80049a6:	189a      	adds	r2, r3, r2
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	3304      	adds	r3, #4
 80049ac:	0019      	movs	r1, r3
 80049ae:	0010      	movs	r0, r2
 80049b0:	f7ff fc91 	bl	80042d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <xTaskIncrementTick+0x15c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	429a      	cmp	r2, r3
 80049c0:	d3b3      	bcc.n	800492a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80049c2:	2301      	movs	r3, #1
 80049c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049c6:	e7b0      	b.n	800492a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049c8:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <xTaskIncrementTick+0x15c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	4914      	ldr	r1, [pc, #80]	; (8004a20 <xTaskIncrementTick+0x158>)
 80049d0:	0013      	movs	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	189b      	adds	r3, r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	585b      	ldr	r3, [r3, r1]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d907      	bls.n	80049ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80049de:	2301      	movs	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	e004      	b.n	80049ee <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80049e4:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <xTaskIncrementTick+0x160>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <xTaskIncrementTick+0x160>)
 80049ec:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <xTaskIncrementTick+0x164>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80049f6:	2301      	movs	r3, #1
 80049f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80049fa:	697b      	ldr	r3, [r7, #20]
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b006      	add	sp, #24
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000410 	.word	0x20000410
 8004a08:	200003ec 	.word	0x200003ec
 8004a0c:	200003a0 	.word	0x200003a0
 8004a10:	200003a4 	.word	0x200003a4
 8004a14:	20000400 	.word	0x20000400
 8004a18:	20000408 	.word	0x20000408
 8004a1c:	200003f0 	.word	0x200003f0
 8004a20:	200002ec 	.word	0x200002ec
 8004a24:	200002e8 	.word	0x200002e8
 8004a28:	200003f8 	.word	0x200003f8
 8004a2c:	200003fc 	.word	0x200003fc

08004a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a36:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <vTaskSwitchContext+0x90>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a3e:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <vTaskSwitchContext+0x94>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a44:	e037      	b.n	8004ab6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004a46:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <vTaskSwitchContext+0x94>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <vTaskSwitchContext+0x98>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	e007      	b.n	8004a64 <vTaskSwitchContext+0x34>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <vTaskSwitchContext+0x2e>
 8004a5a:	b672      	cpsid	i
 8004a5c:	e7fe      	b.n	8004a5c <vTaskSwitchContext+0x2c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	4919      	ldr	r1, [pc, #100]	; (8004acc <vTaskSwitchContext+0x9c>)
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	0013      	movs	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	189b      	adds	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	585b      	ldr	r3, [r3, r1]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0ee      	beq.n	8004a54 <vTaskSwitchContext+0x24>
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	0013      	movs	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	189b      	adds	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4a12      	ldr	r2, [pc, #72]	; (8004acc <vTaskSwitchContext+0x9c>)
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	3308      	adds	r3, #8
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d104      	bne.n	8004aa6 <vTaskSwitchContext+0x76>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <vTaskSwitchContext+0xa0>)
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <vTaskSwitchContext+0x98>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b002      	add	sp, #8
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	20000410 	.word	0x20000410
 8004ac4:	200003fc 	.word	0x200003fc
 8004ac8:	200003f0 	.word	0x200003f0
 8004acc:	200002ec 	.word	0x200002ec
 8004ad0:	200002e8 	.word	0x200002e8

08004ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004adc:	f000 f84e 	bl	8004b7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <prvIdleTask+0x1c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d9f9      	bls.n	8004adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ae8:	f000 f9a2 	bl	8004e30 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004aec:	e7f6      	b.n	8004adc <prvIdleTask+0x8>
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	200002ec 	.word	0x200002ec

08004af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	e00c      	b.n	8004b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	0013      	movs	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <prvInitialiseTaskLists+0x68>)
 8004b0c:	189b      	adds	r3, r3, r2
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7ff fbb8 	bl	8004284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3301      	adds	r3, #1
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b06      	cmp	r3, #6
 8004b1e:	d9ef      	bls.n	8004b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <prvInitialiseTaskLists+0x6c>)
 8004b22:	0018      	movs	r0, r3
 8004b24:	f7ff fbae 	bl	8004284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b28:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <prvInitialiseTaskLists+0x70>)
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7ff fbaa 	bl	8004284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <prvInitialiseTaskLists+0x74>)
 8004b32:	0018      	movs	r0, r3
 8004b34:	f7ff fba6 	bl	8004284 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <prvInitialiseTaskLists+0x78>)
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7ff fba2 	bl	8004284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <prvInitialiseTaskLists+0x7c>)
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7ff fb9e 	bl	8004284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <prvInitialiseTaskLists+0x80>)
 8004b4a:	4a05      	ldr	r2, [pc, #20]	; (8004b60 <prvInitialiseTaskLists+0x6c>)
 8004b4c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <prvInitialiseTaskLists+0x84>)
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <prvInitialiseTaskLists+0x70>)
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	46c0      	nop			; (mov r8, r8)
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	200002ec 	.word	0x200002ec
 8004b60:	20000378 	.word	0x20000378
 8004b64:	2000038c 	.word	0x2000038c
 8004b68:	200003a8 	.word	0x200003a8
 8004b6c:	200003bc 	.word	0x200003bc
 8004b70:	200003d4 	.word	0x200003d4
 8004b74:	200003a0 	.word	0x200003a0
 8004b78:	200003a4 	.word	0x200003a4

08004b7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b82:	e01a      	b.n	8004bba <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004b84:	f000 f964 	bl	8004e50 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <prvCheckTasksWaitingTermination+0x50>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7ff fbf6 	bl	8004386 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <prvCheckTasksWaitingTermination+0x54>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	1e5a      	subs	r2, r3, #1
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <prvCheckTasksWaitingTermination+0x54>)
 8004ba2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <prvCheckTasksWaitingTermination+0x58>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	1e5a      	subs	r2, r3, #1
 8004baa:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <prvCheckTasksWaitingTermination+0x58>)
 8004bac:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004bae:	f000 f961 	bl	8004e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f000 f80f 	bl	8004bd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <prvCheckTasksWaitingTermination+0x58>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e0      	bne.n	8004b84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	200003bc 	.word	0x200003bc
 8004bd0:	200003e8 	.word	0x200003e8
 8004bd4:	200003d0 	.word	0x200003d0

08004bd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2251      	movs	r2, #81	; 0x51
 8004be4:	5c9b      	ldrb	r3, [r3, r2]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f000 fa6c 	bl	80050cc <vPortFree>
				vPortFree( pxTCB );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f000 fa68 	bl	80050cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bfc:	e010      	b.n	8004c20 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2251      	movs	r2, #81	; 0x51
 8004c02:	5c9b      	ldrb	r3, [r3, r2]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d104      	bne.n	8004c12 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 fa5e 	bl	80050cc <vPortFree>
	}
 8004c10:	e006      	b.n	8004c20 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2251      	movs	r2, #81	; 0x51
 8004c16:	5c9b      	ldrb	r3, [r3, r2]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d001      	beq.n	8004c20 <prvDeleteTCB+0x48>
 8004c1c:	b672      	cpsid	i
 8004c1e:	e7fe      	b.n	8004c1e <prvDeleteTCB+0x46>
	}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b002      	add	sp, #8
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <prvResetNextTaskUnblockTime+0x40>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <prvResetNextTaskUnblockTime+0x14>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <prvResetNextTaskUnblockTime+0x16>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d004      	beq.n	8004c4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <prvResetNextTaskUnblockTime+0x44>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	4252      	negs	r2, r2
 8004c48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c4a:	e008      	b.n	8004c5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c4c:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <prvResetNextTaskUnblockTime+0x40>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <prvResetNextTaskUnblockTime+0x44>)
 8004c5c:	601a      	str	r2, [r3, #0]
}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b002      	add	sp, #8
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	200003a0 	.word	0x200003a0
 8004c6c:	20000408 	.word	0x20000408

08004c70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c7a:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3304      	adds	r3, #4
 8004c86:	0018      	movs	r0, r3
 8004c88:	f7ff fb7d 	bl	8004386 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	d10b      	bne.n	8004caa <prvAddCurrentTaskToDelayedList+0x3a>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c98:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	1d1a      	adds	r2, r3, #4
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ca0:	0011      	movs	r1, r2
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7ff fb17 	bl	80042d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ca8:	e026      	b.n	8004cf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	18d3      	adds	r3, r2, r3
 8004cb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d209      	bcs.n	8004cd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	0019      	movs	r1, r3
 8004cce:	0010      	movs	r0, r2
 8004cd0:	f7ff fb23 	bl	800431a <vListInsert>
}
 8004cd4:	e010      	b.n	8004cf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd6:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	0010      	movs	r0, r2
 8004ce4:	f7ff fb19 	bl	800431a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d202      	bcs.n	8004cf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cf2:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	601a      	str	r2, [r3, #0]
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b004      	add	sp, #16
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	200003ec 	.word	0x200003ec
 8004d04:	200002e8 	.word	0x200002e8
 8004d08:	200003d4 	.word	0x200003d4
 8004d0c:	200003a4 	.word	0x200003a4
 8004d10:	200003a0 	.word	0x200003a0
 8004d14:	20000408 	.word	0x20000408

08004d18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3b04      	subs	r3, #4
 8004d28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2280      	movs	r2, #128	; 0x80
 8004d2e:	0452      	lsls	r2, r2, #17
 8004d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3b04      	subs	r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d44:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <pxPortInitialiseStack+0x50>)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b14      	subs	r3, #20
 8004d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3b20      	subs	r3, #32
 8004d5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b004      	add	sp, #16
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	08004d6d 	.word	0x08004d6d

08004d6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d76:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <prvTaskExitError+0x28>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	d001      	beq.n	8004d82 <prvTaskExitError+0x16>
 8004d7e:	b672      	cpsid	i
 8004d80:	e7fe      	b.n	8004d80 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004d82:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0fc      	beq.n	8004d86 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b002      	add	sp, #8
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	2000000c 	.word	0x2000000c

08004d98 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004db0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004db0:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <pxCurrentTCBConst2>)
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	3020      	adds	r0, #32
 8004db8:	f380 8809 	msr	PSP, r0
 8004dbc:	2002      	movs	r0, #2
 8004dbe:	f380 8814 	msr	CONTROL, r0
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004dc8:	46ae      	mov	lr, r5
 8004dca:	bc08      	pop	{r3}
 8004dcc:	bc04      	pop	{r2}
 8004dce:	b662      	cpsie	i
 8004dd0:	4718      	bx	r3
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46c0      	nop			; (mov r8, r8)
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	46c0      	nop			; (mov r8, r8)

08004de0 <pxCurrentTCBConst2>:
 8004de0:	200002e8 	.word	0x200002e8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46c0      	nop			; (mov r8, r8)

08004de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <xPortStartScheduler+0x40>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <xPortStartScheduler+0x40>)
 8004df2:	21ff      	movs	r1, #255	; 0xff
 8004df4:	0409      	lsls	r1, r1, #16
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <xPortStartScheduler+0x40>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <xPortStartScheduler+0x40>)
 8004e00:	21ff      	movs	r1, #255	; 0xff
 8004e02:	0609      	lsls	r1, r1, #24
 8004e04:	430a      	orrs	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004e08:	f000 f898 	bl	8004f3c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e0c:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <xPortStartScheduler+0x44>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004e12:	f7ff ffcd 	bl	8004db0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e16:	f7ff fe0b 	bl	8004a30 <vTaskSwitchContext>
	prvTaskExitError();
 8004e1a:	f7ff ffa7 	bl	8004d6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	e000ed20 	.word	0xe000ed20
 8004e2c:	2000000c 	.word	0x2000000c

08004e30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <vPortYield+0x1c>)
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	0552      	lsls	r2, r2, #21
 8004e3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004e3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004e40:	f3bf 8f6f 	isb	sy
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	e000ed04 	.word	0xe000ed04

08004e50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004e54:	b672      	cpsid	i
    uxCriticalNesting++;
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <vPortEnterCritical+0x20>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <vPortEnterCritical+0x20>)
 8004e5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004e60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004e64:	f3bf 8f6f 	isb	sy
}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	2000000c 	.word	0x2000000c

08004e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <vPortExitCritical+0x2c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <vPortExitCritical+0x10>
 8004e80:	b672      	cpsid	i
 8004e82:	e7fe      	b.n	8004e82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <vPortExitCritical+0x2c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	1e5a      	subs	r2, r3, #1
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <vPortExitCritical+0x2c>)
 8004e8c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004e8e:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <vPortExitCritical+0x2c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d100      	bne.n	8004e98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004e96:	b662      	cpsie	i
    }
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	2000000c 	.word	0x2000000c

08004ea4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004ea4:	f3ef 8010 	mrs	r0, PRIMASK
 8004ea8:	b672      	cpsid	i
 8004eaa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	0018      	movs	r0, r3

08004eb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004eb0:	f380 8810 	msr	PRIMASK, r0
 8004eb4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004eb6:	46c0      	nop			; (mov r8, r8)
	...

08004ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ec0:	f3ef 8009 	mrs	r0, PSP
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <pxCurrentTCBConst>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	3820      	subs	r0, #32
 8004eca:	6010      	str	r0, [r2, #0]
 8004ecc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004ece:	4644      	mov	r4, r8
 8004ed0:	464d      	mov	r5, r9
 8004ed2:	4656      	mov	r6, sl
 8004ed4:	465f      	mov	r7, fp
 8004ed6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004ed8:	b508      	push	{r3, lr}
 8004eda:	b672      	cpsid	i
 8004edc:	f7ff fda8 	bl	8004a30 <vTaskSwitchContext>
 8004ee0:	b662      	cpsie	i
 8004ee2:	bc0c      	pop	{r2, r3}
 8004ee4:	6811      	ldr	r1, [r2, #0]
 8004ee6:	6808      	ldr	r0, [r1, #0]
 8004ee8:	3010      	adds	r0, #16
 8004eea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004eec:	46a0      	mov	r8, r4
 8004eee:	46a9      	mov	r9, r5
 8004ef0:	46b2      	mov	sl, r6
 8004ef2:	46bb      	mov	fp, r7
 8004ef4:	f380 8809 	msr	PSP, r0
 8004ef8:	3820      	subs	r0, #32
 8004efa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004efc:	4718      	bx	r3
 8004efe:	46c0      	nop			; (mov r8, r8)

08004f00 <pxCurrentTCBConst>:
 8004f00:	200002e8 	.word	0x200002e8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46c0      	nop			; (mov r8, r8)

08004f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f0e:	f7ff ffc9 	bl	8004ea4 <ulSetInterruptMaskFromISR>
 8004f12:	0003      	movs	r3, r0
 8004f14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f16:	f7ff fcd7 	bl	80048c8 <xTaskIncrementTick>
 8004f1a:	1e03      	subs	r3, r0, #0
 8004f1c:	d003      	beq.n	8004f26 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <SysTick_Handler+0x30>)
 8004f20:	2280      	movs	r2, #128	; 0x80
 8004f22:	0552      	lsls	r2, r2, #21
 8004f24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f7ff ffc1 	bl	8004eb0 <vClearInterruptMaskFromISR>
}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b002      	add	sp, #8
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <prvSetupTimerInterrupt+0x34>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <prvSetupTimerInterrupt+0x38>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <prvSetupTimerInterrupt+0x3c>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	23fa      	movs	r3, #250	; 0xfa
 8004f52:	0099      	lsls	r1, r3, #2
 8004f54:	0010      	movs	r0, r2
 8004f56:	f7fb f8df 	bl	8000118 <__udivsi3>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <prvSetupTimerInterrupt+0x40>)
 8004f60:	3a01      	subs	r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004f64:	4b02      	ldr	r3, [pc, #8]	; (8004f70 <prvSetupTimerInterrupt+0x34>)
 8004f66:	2207      	movs	r2, #7
 8004f68:	601a      	str	r2, [r3, #0]
}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	e000e010 	.word	0xe000e010
 8004f74:	e000e018 	.word	0xe000e018
 8004f78:	20000004 	.word	0x20000004
 8004f7c:	e000e014 	.word	0xe000e014

08004f80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004f8c:	f7ff fc04 	bl	8004798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f90:	4b49      	ldr	r3, [pc, #292]	; (80050b8 <pvPortMalloc+0x138>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f98:	f000 f8e0 	bl	800515c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f9c:	4b47      	ldr	r3, [pc, #284]	; (80050bc <pvPortMalloc+0x13c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d000      	beq.n	8004fa8 <pvPortMalloc+0x28>
 8004fa6:	e079      	b.n	800509c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d012      	beq.n	8004fd4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004fae:	2208      	movs	r2, #8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	189b      	adds	r3, r3, r2
 8004fb4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2207      	movs	r2, #7
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d00a      	beq.n	8004fd4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	4393      	bics	r3, r2
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2207      	movs	r2, #7
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d001      	beq.n	8004fd4 <pvPortMalloc+0x54>
 8004fd0:	b672      	cpsid	i
 8004fd2:	e7fe      	b.n	8004fd2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d060      	beq.n	800509c <pvPortMalloc+0x11c>
 8004fda:	4b39      	ldr	r3, [pc, #228]	; (80050c0 <pvPortMalloc+0x140>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d85b      	bhi.n	800509c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fe4:	4b37      	ldr	r3, [pc, #220]	; (80050c4 <pvPortMalloc+0x144>)
 8004fe6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004fe8:	4b36      	ldr	r3, [pc, #216]	; (80050c4 <pvPortMalloc+0x144>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fee:	e004      	b.n	8004ffa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d903      	bls.n	800500c <pvPortMalloc+0x8c>
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f1      	bne.n	8004ff0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800500c:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <pvPortMalloc+0x138>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	429a      	cmp	r2, r3
 8005014:	d042      	beq.n	800509c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2208      	movs	r2, #8
 800501c:	189b      	adds	r3, r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	2308      	movs	r3, #8
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	429a      	cmp	r2, r3
 8005036:	d916      	bls.n	8005066 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	18d3      	adds	r3, r2, r3
 800503e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2207      	movs	r2, #7
 8005044:	4013      	ands	r3, r2
 8005046:	d001      	beq.n	800504c <pvPortMalloc+0xcc>
 8005048:	b672      	cpsid	i
 800504a:	e7fe      	b.n	800504a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	1ad2      	subs	r2, r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	0018      	movs	r0, r3
 8005062:	f000 f8db 	bl	800521c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005066:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <pvPortMalloc+0x140>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	1ad2      	subs	r2, r2, r3
 8005070:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <pvPortMalloc+0x140>)
 8005072:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005074:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <pvPortMalloc+0x140>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <pvPortMalloc+0x148>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d203      	bcs.n	8005088 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <pvPortMalloc+0x140>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <pvPortMalloc+0x148>)
 8005086:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <pvPortMalloc+0x13c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	431a      	orrs	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800509c:	f7ff fb88 	bl	80047b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2207      	movs	r2, #7
 80050a4:	4013      	ands	r3, r2
 80050a6:	d001      	beq.n	80050ac <pvPortMalloc+0x12c>
 80050a8:	b672      	cpsid	i
 80050aa:	e7fe      	b.n	80050aa <pvPortMalloc+0x12a>
	return pvReturn;
 80050ac:	68fb      	ldr	r3, [r7, #12]
}
 80050ae:	0018      	movs	r0, r3
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b006      	add	sp, #24
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	2000101c 	.word	0x2000101c
 80050bc:	20001028 	.word	0x20001028
 80050c0:	20001020 	.word	0x20001020
 80050c4:	20001014 	.word	0x20001014
 80050c8:	20001024 	.word	0x20001024

080050cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d035      	beq.n	800514a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050de:	2308      	movs	r3, #8
 80050e0:	425b      	negs	r3, r3
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	18d3      	adds	r3, r2, r3
 80050e6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	4b18      	ldr	r3, [pc, #96]	; (8005154 <vPortFree+0x88>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4013      	ands	r3, r2
 80050f6:	d101      	bne.n	80050fc <vPortFree+0x30>
 80050f8:	b672      	cpsid	i
 80050fa:	e7fe      	b.n	80050fa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <vPortFree+0x3c>
 8005104:	b672      	cpsid	i
 8005106:	e7fe      	b.n	8005106 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	4b11      	ldr	r3, [pc, #68]	; (8005154 <vPortFree+0x88>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4013      	ands	r3, r2
 8005112:	d01a      	beq.n	800514a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <vPortFree+0x88>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	43db      	mvns	r3, r3
 8005126:	401a      	ands	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800512c:	f7ff fb34 	bl	8004798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b08      	ldr	r3, [pc, #32]	; (8005158 <vPortFree+0x8c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	18d2      	adds	r2, r2, r3
 800513a:	4b07      	ldr	r3, [pc, #28]	; (8005158 <vPortFree+0x8c>)
 800513c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	0018      	movs	r0, r3
 8005142:	f000 f86b 	bl	800521c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005146:	f7ff fb33 	bl	80047b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	46bd      	mov	sp, r7
 800514e:	b004      	add	sp, #16
 8005150:	bd80      	pop	{r7, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	20001028 	.word	0x20001028
 8005158:	20001020 	.word	0x20001020

0800515c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005162:	23c0      	movs	r3, #192	; 0xc0
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005168:	4b26      	ldr	r3, [pc, #152]	; (8005204 <prvHeapInit+0xa8>)
 800516a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2207      	movs	r2, #7
 8005170:	4013      	ands	r3, r2
 8005172:	d00c      	beq.n	800518e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3307      	adds	r3, #7
 8005178:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2207      	movs	r2, #7
 800517e:	4393      	bics	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1ad2      	subs	r2, r2, r3
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <prvHeapInit+0xa8>)
 800518a:	18d3      	adds	r3, r2, r3
 800518c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <prvHeapInit+0xac>)
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005198:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <prvHeapInit+0xac>)
 800519a:	2200      	movs	r2, #0
 800519c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	18d3      	adds	r3, r2, r3
 80051a4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051a6:	2208      	movs	r2, #8
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2207      	movs	r2, #7
 80051b2:	4393      	bics	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4b14      	ldr	r3, [pc, #80]	; (800520c <prvHeapInit+0xb0>)
 80051ba:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80051bc:	4b13      	ldr	r3, [pc, #76]	; (800520c <prvHeapInit+0xb0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2200      	movs	r2, #0
 80051c2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051c4:	4b11      	ldr	r3, [pc, #68]	; (800520c <prvHeapInit+0xb0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051da:	4b0c      	ldr	r3, [pc, #48]	; (800520c <prvHeapInit+0xb0>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <prvHeapInit+0xb4>)
 80051e8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <prvHeapInit+0xb8>)
 80051f0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <prvHeapInit+0xbc>)
 80051f4:	2280      	movs	r2, #128	; 0x80
 80051f6:	0612      	lsls	r2, r2, #24
 80051f8:	601a      	str	r2, [r3, #0]
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b004      	add	sp, #16
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	20000414 	.word	0x20000414
 8005208:	20001014 	.word	0x20001014
 800520c:	2000101c 	.word	0x2000101c
 8005210:	20001024 	.word	0x20001024
 8005214:	20001020 	.word	0x20001020
 8005218:	20001028 	.word	0x20001028

0800521c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005224:	4b27      	ldr	r3, [pc, #156]	; (80052c4 <prvInsertBlockIntoFreeList+0xa8>)
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e002      	b.n	8005230 <prvInsertBlockIntoFreeList+0x14>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d8f7      	bhi.n	800522a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	18d3      	adds	r3, r2, r3
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	429a      	cmp	r2, r3
 800524a:	d108      	bne.n	800525e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	18d2      	adds	r2, r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	18d2      	adds	r2, r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d118      	bne.n	80052a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <prvInsertBlockIntoFreeList+0xac>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d00d      	beq.n	800529a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	18d2      	adds	r2, r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e008      	b.n	80052ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <prvInsertBlockIntoFreeList+0xac>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e003      	b.n	80052ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d002      	beq.n	80052ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b004      	add	sp, #16
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	20001014 	.word	0x20001014
 80052c8:	2000101c 	.word	0x2000101c

080052cc <__errno>:
 80052cc:	4b01      	ldr	r3, [pc, #4]	; (80052d4 <__errno+0x8>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	4770      	bx	lr
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	20000010 	.word	0x20000010

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	2600      	movs	r6, #0
 80052dc:	4d0c      	ldr	r5, [pc, #48]	; (8005310 <__libc_init_array+0x38>)
 80052de:	4c0d      	ldr	r4, [pc, #52]	; (8005314 <__libc_init_array+0x3c>)
 80052e0:	1b64      	subs	r4, r4, r5
 80052e2:	10a4      	asrs	r4, r4, #2
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	2600      	movs	r6, #0
 80052ea:	f000 fcc9 	bl	8005c80 <_init>
 80052ee:	4d0a      	ldr	r5, [pc, #40]	; (8005318 <__libc_init_array+0x40>)
 80052f0:	4c0a      	ldr	r4, [pc, #40]	; (800531c <__libc_init_array+0x44>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	00b3      	lsls	r3, r6, #2
 80052fe:	58eb      	ldr	r3, [r5, r3]
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	00b3      	lsls	r3, r6, #2
 8005308:	58eb      	ldr	r3, [r5, r3]
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	08005e90 	.word	0x08005e90
 8005314:	08005e90 	.word	0x08005e90
 8005318:	08005e90 	.word	0x08005e90
 800531c:	08005e94 	.word	0x08005e94

08005320 <memset>:
 8005320:	0003      	movs	r3, r0
 8005322:	1812      	adds	r2, r2, r0
 8005324:	4293      	cmp	r3, r2
 8005326:	d100      	bne.n	800532a <memset+0xa>
 8005328:	4770      	bx	lr
 800532a:	7019      	strb	r1, [r3, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	e7f9      	b.n	8005324 <memset+0x4>

08005330 <_puts_r>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	0005      	movs	r5, r0
 8005334:	000e      	movs	r6, r1
 8005336:	2800      	cmp	r0, #0
 8005338:	d004      	beq.n	8005344 <_puts_r+0x14>
 800533a:	6983      	ldr	r3, [r0, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <_puts_r+0x14>
 8005340:	f000 fa24 	bl	800578c <__sinit>
 8005344:	69ab      	ldr	r3, [r5, #24]
 8005346:	68ac      	ldr	r4, [r5, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <_puts_r+0x22>
 800534c:	0028      	movs	r0, r5
 800534e:	f000 fa1d 	bl	800578c <__sinit>
 8005352:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <_puts_r+0xb4>)
 8005354:	429c      	cmp	r4, r3
 8005356:	d10f      	bne.n	8005378 <_puts_r+0x48>
 8005358:	686c      	ldr	r4, [r5, #4]
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	071b      	lsls	r3, r3, #28
 800535e:	d502      	bpl.n	8005366 <_puts_r+0x36>
 8005360:	6923      	ldr	r3, [r4, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d11f      	bne.n	80053a6 <_puts_r+0x76>
 8005366:	0021      	movs	r1, r4
 8005368:	0028      	movs	r0, r5
 800536a:	f000 f8a1 	bl	80054b0 <__swsetup_r>
 800536e:	2800      	cmp	r0, #0
 8005370:	d019      	beq.n	80053a6 <_puts_r+0x76>
 8005372:	2001      	movs	r0, #1
 8005374:	4240      	negs	r0, r0
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <_puts_r+0xb8>)
 800537a:	429c      	cmp	r4, r3
 800537c:	d101      	bne.n	8005382 <_puts_r+0x52>
 800537e:	68ac      	ldr	r4, [r5, #8]
 8005380:	e7eb      	b.n	800535a <_puts_r+0x2a>
 8005382:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <_puts_r+0xbc>)
 8005384:	429c      	cmp	r4, r3
 8005386:	d1e8      	bne.n	800535a <_puts_r+0x2a>
 8005388:	68ec      	ldr	r4, [r5, #12]
 800538a:	e7e6      	b.n	800535a <_puts_r+0x2a>
 800538c:	3601      	adds	r6, #1
 800538e:	60a3      	str	r3, [r4, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	da04      	bge.n	800539e <_puts_r+0x6e>
 8005394:	69a2      	ldr	r2, [r4, #24]
 8005396:	429a      	cmp	r2, r3
 8005398:	dc16      	bgt.n	80053c8 <_puts_r+0x98>
 800539a:	290a      	cmp	r1, #10
 800539c:	d014      	beq.n	80053c8 <_puts_r+0x98>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	6022      	str	r2, [r4, #0]
 80053a4:	7019      	strb	r1, [r3, #0]
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	7831      	ldrb	r1, [r6, #0]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	2900      	cmp	r1, #0
 80053ae:	d1ed      	bne.n	800538c <_puts_r+0x5c>
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da0f      	bge.n	80053d6 <_puts_r+0xa6>
 80053b6:	0022      	movs	r2, r4
 80053b8:	310a      	adds	r1, #10
 80053ba:	0028      	movs	r0, r5
 80053bc:	f000 f822 	bl	8005404 <__swbuf_r>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d0d6      	beq.n	8005372 <_puts_r+0x42>
 80053c4:	200a      	movs	r0, #10
 80053c6:	e7d6      	b.n	8005376 <_puts_r+0x46>
 80053c8:	0022      	movs	r2, r4
 80053ca:	0028      	movs	r0, r5
 80053cc:	f000 f81a 	bl	8005404 <__swbuf_r>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d1e8      	bne.n	80053a6 <_puts_r+0x76>
 80053d4:	e7cd      	b.n	8005372 <_puts_r+0x42>
 80053d6:	200a      	movs	r0, #10
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	6022      	str	r2, [r4, #0]
 80053de:	7018      	strb	r0, [r3, #0]
 80053e0:	e7c9      	b.n	8005376 <_puts_r+0x46>
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	08005e50 	.word	0x08005e50
 80053e8:	08005e70 	.word	0x08005e70
 80053ec:	08005e30 	.word	0x08005e30

080053f0 <puts>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	4b03      	ldr	r3, [pc, #12]	; (8005400 <puts+0x10>)
 80053f4:	0001      	movs	r1, r0
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	f7ff ff9a 	bl	8005330 <_puts_r>
 80053fc:	bd10      	pop	{r4, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	20000010 	.word	0x20000010

08005404 <__swbuf_r>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	0005      	movs	r5, r0
 8005408:	000e      	movs	r6, r1
 800540a:	0014      	movs	r4, r2
 800540c:	2800      	cmp	r0, #0
 800540e:	d004      	beq.n	800541a <__swbuf_r+0x16>
 8005410:	6983      	ldr	r3, [r0, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <__swbuf_r+0x16>
 8005416:	f000 f9b9 	bl	800578c <__sinit>
 800541a:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <__swbuf_r+0xa0>)
 800541c:	429c      	cmp	r4, r3
 800541e:	d12d      	bne.n	800547c <__swbuf_r+0x78>
 8005420:	686c      	ldr	r4, [r5, #4]
 8005422:	69a3      	ldr	r3, [r4, #24]
 8005424:	60a3      	str	r3, [r4, #8]
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	d531      	bpl.n	8005490 <__swbuf_r+0x8c>
 800542c:	6923      	ldr	r3, [r4, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d02e      	beq.n	8005490 <__swbuf_r+0x8c>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	6922      	ldr	r2, [r4, #16]
 8005436:	b2f7      	uxtb	r7, r6
 8005438:	1a98      	subs	r0, r3, r2
 800543a:	6963      	ldr	r3, [r4, #20]
 800543c:	b2f6      	uxtb	r6, r6
 800543e:	4283      	cmp	r3, r0
 8005440:	dc05      	bgt.n	800544e <__swbuf_r+0x4a>
 8005442:	0021      	movs	r1, r4
 8005444:	0028      	movs	r0, r5
 8005446:	f000 f933 	bl	80056b0 <_fflush_r>
 800544a:	2800      	cmp	r0, #0
 800544c:	d126      	bne.n	800549c <__swbuf_r+0x98>
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	3001      	adds	r0, #1
 8005452:	3b01      	subs	r3, #1
 8005454:	60a3      	str	r3, [r4, #8]
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	6022      	str	r2, [r4, #0]
 800545c:	701f      	strb	r7, [r3, #0]
 800545e:	6963      	ldr	r3, [r4, #20]
 8005460:	4283      	cmp	r3, r0
 8005462:	d004      	beq.n	800546e <__swbuf_r+0x6a>
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	07db      	lsls	r3, r3, #31
 8005468:	d51a      	bpl.n	80054a0 <__swbuf_r+0x9c>
 800546a:	2e0a      	cmp	r6, #10
 800546c:	d118      	bne.n	80054a0 <__swbuf_r+0x9c>
 800546e:	0021      	movs	r1, r4
 8005470:	0028      	movs	r0, r5
 8005472:	f000 f91d 	bl	80056b0 <_fflush_r>
 8005476:	2800      	cmp	r0, #0
 8005478:	d012      	beq.n	80054a0 <__swbuf_r+0x9c>
 800547a:	e00f      	b.n	800549c <__swbuf_r+0x98>
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <__swbuf_r+0xa4>)
 800547e:	429c      	cmp	r4, r3
 8005480:	d101      	bne.n	8005486 <__swbuf_r+0x82>
 8005482:	68ac      	ldr	r4, [r5, #8]
 8005484:	e7cd      	b.n	8005422 <__swbuf_r+0x1e>
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <__swbuf_r+0xa8>)
 8005488:	429c      	cmp	r4, r3
 800548a:	d1ca      	bne.n	8005422 <__swbuf_r+0x1e>
 800548c:	68ec      	ldr	r4, [r5, #12]
 800548e:	e7c8      	b.n	8005422 <__swbuf_r+0x1e>
 8005490:	0021      	movs	r1, r4
 8005492:	0028      	movs	r0, r5
 8005494:	f000 f80c 	bl	80054b0 <__swsetup_r>
 8005498:	2800      	cmp	r0, #0
 800549a:	d0ca      	beq.n	8005432 <__swbuf_r+0x2e>
 800549c:	2601      	movs	r6, #1
 800549e:	4276      	negs	r6, r6
 80054a0:	0030      	movs	r0, r6
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a4:	08005e50 	.word	0x08005e50
 80054a8:	08005e70 	.word	0x08005e70
 80054ac:	08005e30 	.word	0x08005e30

080054b0 <__swsetup_r>:
 80054b0:	4b36      	ldr	r3, [pc, #216]	; (800558c <__swsetup_r+0xdc>)
 80054b2:	b570      	push	{r4, r5, r6, lr}
 80054b4:	681d      	ldr	r5, [r3, #0]
 80054b6:	0006      	movs	r6, r0
 80054b8:	000c      	movs	r4, r1
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	d005      	beq.n	80054ca <__swsetup_r+0x1a>
 80054be:	69ab      	ldr	r3, [r5, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <__swsetup_r+0x1a>
 80054c4:	0028      	movs	r0, r5
 80054c6:	f000 f961 	bl	800578c <__sinit>
 80054ca:	4b31      	ldr	r3, [pc, #196]	; (8005590 <__swsetup_r+0xe0>)
 80054cc:	429c      	cmp	r4, r3
 80054ce:	d10f      	bne.n	80054f0 <__swsetup_r+0x40>
 80054d0:	686c      	ldr	r4, [r5, #4]
 80054d2:	230c      	movs	r3, #12
 80054d4:	5ee2      	ldrsh	r2, [r4, r3]
 80054d6:	b293      	uxth	r3, r2
 80054d8:	0719      	lsls	r1, r3, #28
 80054da:	d42d      	bmi.n	8005538 <__swsetup_r+0x88>
 80054dc:	06d9      	lsls	r1, r3, #27
 80054de:	d411      	bmi.n	8005504 <__swsetup_r+0x54>
 80054e0:	2309      	movs	r3, #9
 80054e2:	2001      	movs	r0, #1
 80054e4:	6033      	str	r3, [r6, #0]
 80054e6:	3337      	adds	r3, #55	; 0x37
 80054e8:	4313      	orrs	r3, r2
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	4240      	negs	r0, r0
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <__swsetup_r+0xe4>)
 80054f2:	429c      	cmp	r4, r3
 80054f4:	d101      	bne.n	80054fa <__swsetup_r+0x4a>
 80054f6:	68ac      	ldr	r4, [r5, #8]
 80054f8:	e7eb      	b.n	80054d2 <__swsetup_r+0x22>
 80054fa:	4b27      	ldr	r3, [pc, #156]	; (8005598 <__swsetup_r+0xe8>)
 80054fc:	429c      	cmp	r4, r3
 80054fe:	d1e8      	bne.n	80054d2 <__swsetup_r+0x22>
 8005500:	68ec      	ldr	r4, [r5, #12]
 8005502:	e7e6      	b.n	80054d2 <__swsetup_r+0x22>
 8005504:	075b      	lsls	r3, r3, #29
 8005506:	d513      	bpl.n	8005530 <__swsetup_r+0x80>
 8005508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800550a:	2900      	cmp	r1, #0
 800550c:	d008      	beq.n	8005520 <__swsetup_r+0x70>
 800550e:	0023      	movs	r3, r4
 8005510:	3344      	adds	r3, #68	; 0x44
 8005512:	4299      	cmp	r1, r3
 8005514:	d002      	beq.n	800551c <__swsetup_r+0x6c>
 8005516:	0030      	movs	r0, r6
 8005518:	f000 fa38 	bl	800598c <_free_r>
 800551c:	2300      	movs	r3, #0
 800551e:	6363      	str	r3, [r4, #52]	; 0x34
 8005520:	2224      	movs	r2, #36	; 0x24
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	4393      	bics	r3, r2
 8005526:	81a3      	strh	r3, [r4, #12]
 8005528:	2300      	movs	r3, #0
 800552a:	6063      	str	r3, [r4, #4]
 800552c:	6923      	ldr	r3, [r4, #16]
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	2308      	movs	r3, #8
 8005532:	89a2      	ldrh	r2, [r4, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	6923      	ldr	r3, [r4, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <__swsetup_r+0xa6>
 800553e:	21a0      	movs	r1, #160	; 0xa0
 8005540:	2280      	movs	r2, #128	; 0x80
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	0089      	lsls	r1, r1, #2
 8005546:	0092      	lsls	r2, r2, #2
 8005548:	400b      	ands	r3, r1
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <__swsetup_r+0xa6>
 800554e:	0021      	movs	r1, r4
 8005550:	0030      	movs	r0, r6
 8005552:	f000 f9d7 	bl	8005904 <__smakebuf_r>
 8005556:	2301      	movs	r3, #1
 8005558:	89a2      	ldrh	r2, [r4, #12]
 800555a:	4013      	ands	r3, r2
 800555c:	d011      	beq.n	8005582 <__swsetup_r+0xd2>
 800555e:	2300      	movs	r3, #0
 8005560:	60a3      	str	r3, [r4, #8]
 8005562:	6963      	ldr	r3, [r4, #20]
 8005564:	425b      	negs	r3, r3
 8005566:	61a3      	str	r3, [r4, #24]
 8005568:	2000      	movs	r0, #0
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	4283      	cmp	r3, r0
 800556e:	d1be      	bne.n	80054ee <__swsetup_r+0x3e>
 8005570:	230c      	movs	r3, #12
 8005572:	5ee2      	ldrsh	r2, [r4, r3]
 8005574:	0613      	lsls	r3, r2, #24
 8005576:	d5ba      	bpl.n	80054ee <__swsetup_r+0x3e>
 8005578:	2340      	movs	r3, #64	; 0x40
 800557a:	4313      	orrs	r3, r2
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	3801      	subs	r0, #1
 8005580:	e7b5      	b.n	80054ee <__swsetup_r+0x3e>
 8005582:	0792      	lsls	r2, r2, #30
 8005584:	d400      	bmi.n	8005588 <__swsetup_r+0xd8>
 8005586:	6963      	ldr	r3, [r4, #20]
 8005588:	60a3      	str	r3, [r4, #8]
 800558a:	e7ed      	b.n	8005568 <__swsetup_r+0xb8>
 800558c:	20000010 	.word	0x20000010
 8005590:	08005e50 	.word	0x08005e50
 8005594:	08005e70 	.word	0x08005e70
 8005598:	08005e30 	.word	0x08005e30

0800559c <__sflush_r>:
 800559c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800559e:	898a      	ldrh	r2, [r1, #12]
 80055a0:	0005      	movs	r5, r0
 80055a2:	000c      	movs	r4, r1
 80055a4:	0713      	lsls	r3, r2, #28
 80055a6:	d460      	bmi.n	800566a <__sflush_r+0xce>
 80055a8:	684b      	ldr	r3, [r1, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dc04      	bgt.n	80055b8 <__sflush_r+0x1c>
 80055ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	dc01      	bgt.n	80055b8 <__sflush_r+0x1c>
 80055b4:	2000      	movs	r0, #0
 80055b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055ba:	2f00      	cmp	r7, #0
 80055bc:	d0fa      	beq.n	80055b4 <__sflush_r+0x18>
 80055be:	2300      	movs	r3, #0
 80055c0:	682e      	ldr	r6, [r5, #0]
 80055c2:	602b      	str	r3, [r5, #0]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	015b      	lsls	r3, r3, #5
 80055c8:	6a21      	ldr	r1, [r4, #32]
 80055ca:	401a      	ands	r2, r3
 80055cc:	d034      	beq.n	8005638 <__sflush_r+0x9c>
 80055ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	075b      	lsls	r3, r3, #29
 80055d4:	d506      	bpl.n	80055e4 <__sflush_r+0x48>
 80055d6:	6863      	ldr	r3, [r4, #4]
 80055d8:	1ac0      	subs	r0, r0, r3
 80055da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <__sflush_r+0x48>
 80055e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055e2:	1ac0      	subs	r0, r0, r3
 80055e4:	0002      	movs	r2, r0
 80055e6:	6a21      	ldr	r1, [r4, #32]
 80055e8:	2300      	movs	r3, #0
 80055ea:	0028      	movs	r0, r5
 80055ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055ee:	47b8      	blx	r7
 80055f0:	89a1      	ldrh	r1, [r4, #12]
 80055f2:	1c43      	adds	r3, r0, #1
 80055f4:	d106      	bne.n	8005604 <__sflush_r+0x68>
 80055f6:	682b      	ldr	r3, [r5, #0]
 80055f8:	2b1d      	cmp	r3, #29
 80055fa:	d830      	bhi.n	800565e <__sflush_r+0xc2>
 80055fc:	4a2b      	ldr	r2, [pc, #172]	; (80056ac <__sflush_r+0x110>)
 80055fe:	40da      	lsrs	r2, r3
 8005600:	07d3      	lsls	r3, r2, #31
 8005602:	d52c      	bpl.n	800565e <__sflush_r+0xc2>
 8005604:	2300      	movs	r3, #0
 8005606:	6063      	str	r3, [r4, #4]
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	6023      	str	r3, [r4, #0]
 800560c:	04cb      	lsls	r3, r1, #19
 800560e:	d505      	bpl.n	800561c <__sflush_r+0x80>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <__sflush_r+0x7e>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d100      	bne.n	800561c <__sflush_r+0x80>
 800561a:	6560      	str	r0, [r4, #84]	; 0x54
 800561c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800561e:	602e      	str	r6, [r5, #0]
 8005620:	2900      	cmp	r1, #0
 8005622:	d0c7      	beq.n	80055b4 <__sflush_r+0x18>
 8005624:	0023      	movs	r3, r4
 8005626:	3344      	adds	r3, #68	; 0x44
 8005628:	4299      	cmp	r1, r3
 800562a:	d002      	beq.n	8005632 <__sflush_r+0x96>
 800562c:	0028      	movs	r0, r5
 800562e:	f000 f9ad 	bl	800598c <_free_r>
 8005632:	2000      	movs	r0, #0
 8005634:	6360      	str	r0, [r4, #52]	; 0x34
 8005636:	e7be      	b.n	80055b6 <__sflush_r+0x1a>
 8005638:	2301      	movs	r3, #1
 800563a:	0028      	movs	r0, r5
 800563c:	47b8      	blx	r7
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	d1c6      	bne.n	80055d0 <__sflush_r+0x34>
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0c3      	beq.n	80055d0 <__sflush_r+0x34>
 8005648:	2b1d      	cmp	r3, #29
 800564a:	d001      	beq.n	8005650 <__sflush_r+0xb4>
 800564c:	2b16      	cmp	r3, #22
 800564e:	d101      	bne.n	8005654 <__sflush_r+0xb8>
 8005650:	602e      	str	r6, [r5, #0]
 8005652:	e7af      	b.n	80055b4 <__sflush_r+0x18>
 8005654:	2340      	movs	r3, #64	; 0x40
 8005656:	89a2      	ldrh	r2, [r4, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	81a3      	strh	r3, [r4, #12]
 800565c:	e7ab      	b.n	80055b6 <__sflush_r+0x1a>
 800565e:	2340      	movs	r3, #64	; 0x40
 8005660:	430b      	orrs	r3, r1
 8005662:	2001      	movs	r0, #1
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	4240      	negs	r0, r0
 8005668:	e7a5      	b.n	80055b6 <__sflush_r+0x1a>
 800566a:	690f      	ldr	r7, [r1, #16]
 800566c:	2f00      	cmp	r7, #0
 800566e:	d0a1      	beq.n	80055b4 <__sflush_r+0x18>
 8005670:	680b      	ldr	r3, [r1, #0]
 8005672:	600f      	str	r7, [r1, #0]
 8005674:	1bdb      	subs	r3, r3, r7
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	2300      	movs	r3, #0
 800567a:	0792      	lsls	r2, r2, #30
 800567c:	d100      	bne.n	8005680 <__sflush_r+0xe4>
 800567e:	694b      	ldr	r3, [r1, #20]
 8005680:	60a3      	str	r3, [r4, #8]
 8005682:	9b01      	ldr	r3, [sp, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	dc00      	bgt.n	800568a <__sflush_r+0xee>
 8005688:	e794      	b.n	80055b4 <__sflush_r+0x18>
 800568a:	9b01      	ldr	r3, [sp, #4]
 800568c:	003a      	movs	r2, r7
 800568e:	6a21      	ldr	r1, [r4, #32]
 8005690:	0028      	movs	r0, r5
 8005692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005694:	47b0      	blx	r6
 8005696:	2800      	cmp	r0, #0
 8005698:	dc03      	bgt.n	80056a2 <__sflush_r+0x106>
 800569a:	2340      	movs	r3, #64	; 0x40
 800569c:	89a2      	ldrh	r2, [r4, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	e7df      	b.n	8005662 <__sflush_r+0xc6>
 80056a2:	9b01      	ldr	r3, [sp, #4]
 80056a4:	183f      	adds	r7, r7, r0
 80056a6:	1a1b      	subs	r3, r3, r0
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	e7ea      	b.n	8005682 <__sflush_r+0xe6>
 80056ac:	20400001 	.word	0x20400001

080056b0 <_fflush_r>:
 80056b0:	690b      	ldr	r3, [r1, #16]
 80056b2:	b570      	push	{r4, r5, r6, lr}
 80056b4:	0005      	movs	r5, r0
 80056b6:	000c      	movs	r4, r1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <_fflush_r+0x10>
 80056bc:	2000      	movs	r0, #0
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d004      	beq.n	80056ce <_fflush_r+0x1e>
 80056c4:	6983      	ldr	r3, [r0, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <_fflush_r+0x1e>
 80056ca:	f000 f85f 	bl	800578c <__sinit>
 80056ce:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <_fflush_r+0x4c>)
 80056d0:	429c      	cmp	r4, r3
 80056d2:	d109      	bne.n	80056e8 <_fflush_r+0x38>
 80056d4:	686c      	ldr	r4, [r5, #4]
 80056d6:	220c      	movs	r2, #12
 80056d8:	5ea3      	ldrsh	r3, [r4, r2]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0ee      	beq.n	80056bc <_fflush_r+0xc>
 80056de:	0021      	movs	r1, r4
 80056e0:	0028      	movs	r0, r5
 80056e2:	f7ff ff5b 	bl	800559c <__sflush_r>
 80056e6:	e7ea      	b.n	80056be <_fflush_r+0xe>
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <_fflush_r+0x50>)
 80056ea:	429c      	cmp	r4, r3
 80056ec:	d101      	bne.n	80056f2 <_fflush_r+0x42>
 80056ee:	68ac      	ldr	r4, [r5, #8]
 80056f0:	e7f1      	b.n	80056d6 <_fflush_r+0x26>
 80056f2:	4b04      	ldr	r3, [pc, #16]	; (8005704 <_fflush_r+0x54>)
 80056f4:	429c      	cmp	r4, r3
 80056f6:	d1ee      	bne.n	80056d6 <_fflush_r+0x26>
 80056f8:	68ec      	ldr	r4, [r5, #12]
 80056fa:	e7ec      	b.n	80056d6 <_fflush_r+0x26>
 80056fc:	08005e50 	.word	0x08005e50
 8005700:	08005e70 	.word	0x08005e70
 8005704:	08005e30 	.word	0x08005e30

08005708 <std>:
 8005708:	2300      	movs	r3, #0
 800570a:	b510      	push	{r4, lr}
 800570c:	0004      	movs	r4, r0
 800570e:	6003      	str	r3, [r0, #0]
 8005710:	6043      	str	r3, [r0, #4]
 8005712:	6083      	str	r3, [r0, #8]
 8005714:	8181      	strh	r1, [r0, #12]
 8005716:	6643      	str	r3, [r0, #100]	; 0x64
 8005718:	81c2      	strh	r2, [r0, #14]
 800571a:	6103      	str	r3, [r0, #16]
 800571c:	6143      	str	r3, [r0, #20]
 800571e:	6183      	str	r3, [r0, #24]
 8005720:	0019      	movs	r1, r3
 8005722:	2208      	movs	r2, #8
 8005724:	305c      	adds	r0, #92	; 0x5c
 8005726:	f7ff fdfb 	bl	8005320 <memset>
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <std+0x38>)
 800572c:	6224      	str	r4, [r4, #32]
 800572e:	6263      	str	r3, [r4, #36]	; 0x24
 8005730:	4b04      	ldr	r3, [pc, #16]	; (8005744 <std+0x3c>)
 8005732:	62a3      	str	r3, [r4, #40]	; 0x28
 8005734:	4b04      	ldr	r3, [pc, #16]	; (8005748 <std+0x40>)
 8005736:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005738:	4b04      	ldr	r3, [pc, #16]	; (800574c <std+0x44>)
 800573a:	6323      	str	r3, [r4, #48]	; 0x30
 800573c:	bd10      	pop	{r4, pc}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	08005b01 	.word	0x08005b01
 8005744:	08005b29 	.word	0x08005b29
 8005748:	08005b61 	.word	0x08005b61
 800574c:	08005b8d 	.word	0x08005b8d

08005750 <_cleanup_r>:
 8005750:	b510      	push	{r4, lr}
 8005752:	4902      	ldr	r1, [pc, #8]	; (800575c <_cleanup_r+0xc>)
 8005754:	f000 f88c 	bl	8005870 <_fwalk_reent>
 8005758:	bd10      	pop	{r4, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	080056b1 	.word	0x080056b1

08005760 <__sfmoreglue>:
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	2568      	movs	r5, #104	; 0x68
 8005764:	1e4a      	subs	r2, r1, #1
 8005766:	4355      	muls	r5, r2
 8005768:	000e      	movs	r6, r1
 800576a:	0029      	movs	r1, r5
 800576c:	3174      	adds	r1, #116	; 0x74
 800576e:	f000 f957 	bl	8005a20 <_malloc_r>
 8005772:	1e04      	subs	r4, r0, #0
 8005774:	d008      	beq.n	8005788 <__sfmoreglue+0x28>
 8005776:	2100      	movs	r1, #0
 8005778:	002a      	movs	r2, r5
 800577a:	6001      	str	r1, [r0, #0]
 800577c:	6046      	str	r6, [r0, #4]
 800577e:	300c      	adds	r0, #12
 8005780:	60a0      	str	r0, [r4, #8]
 8005782:	3268      	adds	r2, #104	; 0x68
 8005784:	f7ff fdcc 	bl	8005320 <memset>
 8005788:	0020      	movs	r0, r4
 800578a:	bd70      	pop	{r4, r5, r6, pc}

0800578c <__sinit>:
 800578c:	6983      	ldr	r3, [r0, #24]
 800578e:	b513      	push	{r0, r1, r4, lr}
 8005790:	0004      	movs	r4, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d128      	bne.n	80057e8 <__sinit+0x5c>
 8005796:	6483      	str	r3, [r0, #72]	; 0x48
 8005798:	64c3      	str	r3, [r0, #76]	; 0x4c
 800579a:	6503      	str	r3, [r0, #80]	; 0x50
 800579c:	4b13      	ldr	r3, [pc, #76]	; (80057ec <__sinit+0x60>)
 800579e:	4a14      	ldr	r2, [pc, #80]	; (80057f0 <__sinit+0x64>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6282      	str	r2, [r0, #40]	; 0x28
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	4298      	cmp	r0, r3
 80057a8:	d101      	bne.n	80057ae <__sinit+0x22>
 80057aa:	2301      	movs	r3, #1
 80057ac:	6183      	str	r3, [r0, #24]
 80057ae:	0020      	movs	r0, r4
 80057b0:	f000 f820 	bl	80057f4 <__sfp>
 80057b4:	6060      	str	r0, [r4, #4]
 80057b6:	0020      	movs	r0, r4
 80057b8:	f000 f81c 	bl	80057f4 <__sfp>
 80057bc:	60a0      	str	r0, [r4, #8]
 80057be:	0020      	movs	r0, r4
 80057c0:	f000 f818 	bl	80057f4 <__sfp>
 80057c4:	2200      	movs	r2, #0
 80057c6:	60e0      	str	r0, [r4, #12]
 80057c8:	2104      	movs	r1, #4
 80057ca:	6860      	ldr	r0, [r4, #4]
 80057cc:	f7ff ff9c 	bl	8005708 <std>
 80057d0:	2201      	movs	r2, #1
 80057d2:	2109      	movs	r1, #9
 80057d4:	68a0      	ldr	r0, [r4, #8]
 80057d6:	f7ff ff97 	bl	8005708 <std>
 80057da:	2202      	movs	r2, #2
 80057dc:	2112      	movs	r1, #18
 80057de:	68e0      	ldr	r0, [r4, #12]
 80057e0:	f7ff ff92 	bl	8005708 <std>
 80057e4:	2301      	movs	r3, #1
 80057e6:	61a3      	str	r3, [r4, #24]
 80057e8:	bd13      	pop	{r0, r1, r4, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	08005e2c 	.word	0x08005e2c
 80057f0:	08005751 	.word	0x08005751

080057f4 <__sfp>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <__sfp+0x74>)
 80057f8:	0007      	movs	r7, r0
 80057fa:	681e      	ldr	r6, [r3, #0]
 80057fc:	69b3      	ldr	r3, [r6, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d102      	bne.n	8005808 <__sfp+0x14>
 8005802:	0030      	movs	r0, r6
 8005804:	f7ff ffc2 	bl	800578c <__sinit>
 8005808:	3648      	adds	r6, #72	; 0x48
 800580a:	68b4      	ldr	r4, [r6, #8]
 800580c:	6873      	ldr	r3, [r6, #4]
 800580e:	3b01      	subs	r3, #1
 8005810:	d504      	bpl.n	800581c <__sfp+0x28>
 8005812:	6833      	ldr	r3, [r6, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <__sfp+0x34>
 8005818:	6836      	ldr	r6, [r6, #0]
 800581a:	e7f6      	b.n	800580a <__sfp+0x16>
 800581c:	220c      	movs	r2, #12
 800581e:	5ea5      	ldrsh	r5, [r4, r2]
 8005820:	2d00      	cmp	r5, #0
 8005822:	d00d      	beq.n	8005840 <__sfp+0x4c>
 8005824:	3468      	adds	r4, #104	; 0x68
 8005826:	e7f2      	b.n	800580e <__sfp+0x1a>
 8005828:	2104      	movs	r1, #4
 800582a:	0038      	movs	r0, r7
 800582c:	f7ff ff98 	bl	8005760 <__sfmoreglue>
 8005830:	6030      	str	r0, [r6, #0]
 8005832:	2800      	cmp	r0, #0
 8005834:	d1f0      	bne.n	8005818 <__sfp+0x24>
 8005836:	230c      	movs	r3, #12
 8005838:	0004      	movs	r4, r0
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	0020      	movs	r0, r4
 800583e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005840:	0020      	movs	r0, r4
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <__sfp+0x78>)
 8005844:	6665      	str	r5, [r4, #100]	; 0x64
 8005846:	6025      	str	r5, [r4, #0]
 8005848:	6065      	str	r5, [r4, #4]
 800584a:	60a5      	str	r5, [r4, #8]
 800584c:	60e3      	str	r3, [r4, #12]
 800584e:	6125      	str	r5, [r4, #16]
 8005850:	6165      	str	r5, [r4, #20]
 8005852:	61a5      	str	r5, [r4, #24]
 8005854:	2208      	movs	r2, #8
 8005856:	0029      	movs	r1, r5
 8005858:	305c      	adds	r0, #92	; 0x5c
 800585a:	f7ff fd61 	bl	8005320 <memset>
 800585e:	6365      	str	r5, [r4, #52]	; 0x34
 8005860:	63a5      	str	r5, [r4, #56]	; 0x38
 8005862:	64a5      	str	r5, [r4, #72]	; 0x48
 8005864:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005866:	e7e9      	b.n	800583c <__sfp+0x48>
 8005868:	08005e2c 	.word	0x08005e2c
 800586c:	ffff0001 	.word	0xffff0001

08005870 <_fwalk_reent>:
 8005870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005872:	0004      	movs	r4, r0
 8005874:	0007      	movs	r7, r0
 8005876:	2600      	movs	r6, #0
 8005878:	9101      	str	r1, [sp, #4]
 800587a:	3448      	adds	r4, #72	; 0x48
 800587c:	2c00      	cmp	r4, #0
 800587e:	d101      	bne.n	8005884 <_fwalk_reent+0x14>
 8005880:	0030      	movs	r0, r6
 8005882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	68a5      	ldr	r5, [r4, #8]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	9b00      	ldr	r3, [sp, #0]
 800588c:	3b01      	subs	r3, #1
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	d501      	bpl.n	8005896 <_fwalk_reent+0x26>
 8005892:	6824      	ldr	r4, [r4, #0]
 8005894:	e7f2      	b.n	800587c <_fwalk_reent+0xc>
 8005896:	89ab      	ldrh	r3, [r5, #12]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d908      	bls.n	80058ae <_fwalk_reent+0x3e>
 800589c:	220e      	movs	r2, #14
 800589e:	5eab      	ldrsh	r3, [r5, r2]
 80058a0:	3301      	adds	r3, #1
 80058a2:	d004      	beq.n	80058ae <_fwalk_reent+0x3e>
 80058a4:	0029      	movs	r1, r5
 80058a6:	0038      	movs	r0, r7
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	4798      	blx	r3
 80058ac:	4306      	orrs	r6, r0
 80058ae:	3568      	adds	r5, #104	; 0x68
 80058b0:	e7eb      	b.n	800588a <_fwalk_reent+0x1a>
	...

080058b4 <__swhatbuf_r>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	000e      	movs	r6, r1
 80058b8:	001d      	movs	r5, r3
 80058ba:	230e      	movs	r3, #14
 80058bc:	5ec9      	ldrsh	r1, [r1, r3]
 80058be:	b096      	sub	sp, #88	; 0x58
 80058c0:	0014      	movs	r4, r2
 80058c2:	2900      	cmp	r1, #0
 80058c4:	da07      	bge.n	80058d6 <__swhatbuf_r+0x22>
 80058c6:	2300      	movs	r3, #0
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	89b3      	ldrh	r3, [r6, #12]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	d411      	bmi.n	80058f4 <__swhatbuf_r+0x40>
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	e00f      	b.n	80058f6 <__swhatbuf_r+0x42>
 80058d6:	466a      	mov	r2, sp
 80058d8:	f000 f984 	bl	8005be4 <_fstat_r>
 80058dc:	2800      	cmp	r0, #0
 80058de:	dbf2      	blt.n	80058c6 <__swhatbuf_r+0x12>
 80058e0:	22f0      	movs	r2, #240	; 0xf0
 80058e2:	9b01      	ldr	r3, [sp, #4]
 80058e4:	0212      	lsls	r2, r2, #8
 80058e6:	4013      	ands	r3, r2
 80058e8:	4a05      	ldr	r2, [pc, #20]	; (8005900 <__swhatbuf_r+0x4c>)
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	425a      	negs	r2, r3
 80058ee:	4153      	adcs	r3, r2
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	e7ed      	b.n	80058d0 <__swhatbuf_r+0x1c>
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	2000      	movs	r0, #0
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	b016      	add	sp, #88	; 0x58
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	ffffe000 	.word	0xffffe000

08005904 <__smakebuf_r>:
 8005904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005906:	2602      	movs	r6, #2
 8005908:	898b      	ldrh	r3, [r1, #12]
 800590a:	0005      	movs	r5, r0
 800590c:	000c      	movs	r4, r1
 800590e:	4233      	tst	r3, r6
 8005910:	d006      	beq.n	8005920 <__smakebuf_r+0x1c>
 8005912:	0023      	movs	r3, r4
 8005914:	3347      	adds	r3, #71	; 0x47
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	2301      	movs	r3, #1
 800591c:	6163      	str	r3, [r4, #20]
 800591e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005920:	ab01      	add	r3, sp, #4
 8005922:	466a      	mov	r2, sp
 8005924:	f7ff ffc6 	bl	80058b4 <__swhatbuf_r>
 8005928:	9900      	ldr	r1, [sp, #0]
 800592a:	0007      	movs	r7, r0
 800592c:	0028      	movs	r0, r5
 800592e:	f000 f877 	bl	8005a20 <_malloc_r>
 8005932:	2800      	cmp	r0, #0
 8005934:	d108      	bne.n	8005948 <__smakebuf_r+0x44>
 8005936:	220c      	movs	r2, #12
 8005938:	5ea3      	ldrsh	r3, [r4, r2]
 800593a:	059a      	lsls	r2, r3, #22
 800593c:	d4ef      	bmi.n	800591e <__smakebuf_r+0x1a>
 800593e:	2203      	movs	r2, #3
 8005940:	4393      	bics	r3, r2
 8005942:	431e      	orrs	r6, r3
 8005944:	81a6      	strh	r6, [r4, #12]
 8005946:	e7e4      	b.n	8005912 <__smakebuf_r+0xe>
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <__smakebuf_r+0x84>)
 800594a:	62ab      	str	r3, [r5, #40]	; 0x28
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	89a2      	ldrh	r2, [r4, #12]
 8005950:	6020      	str	r0, [r4, #0]
 8005952:	4313      	orrs	r3, r2
 8005954:	81a3      	strh	r3, [r4, #12]
 8005956:	9b00      	ldr	r3, [sp, #0]
 8005958:	6120      	str	r0, [r4, #16]
 800595a:	6163      	str	r3, [r4, #20]
 800595c:	9b01      	ldr	r3, [sp, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <__smakebuf_r+0x7a>
 8005962:	230e      	movs	r3, #14
 8005964:	5ee1      	ldrsh	r1, [r4, r3]
 8005966:	0028      	movs	r0, r5
 8005968:	f000 f94e 	bl	8005c08 <_isatty_r>
 800596c:	2800      	cmp	r0, #0
 800596e:	d006      	beq.n	800597e <__smakebuf_r+0x7a>
 8005970:	2203      	movs	r2, #3
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	4393      	bics	r3, r2
 8005976:	001a      	movs	r2, r3
 8005978:	2301      	movs	r3, #1
 800597a:	4313      	orrs	r3, r2
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	89a0      	ldrh	r0, [r4, #12]
 8005980:	4338      	orrs	r0, r7
 8005982:	81a0      	strh	r0, [r4, #12]
 8005984:	e7cb      	b.n	800591e <__smakebuf_r+0x1a>
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	08005751 	.word	0x08005751

0800598c <_free_r>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	0005      	movs	r5, r0
 8005990:	2900      	cmp	r1, #0
 8005992:	d010      	beq.n	80059b6 <_free_r+0x2a>
 8005994:	1f0c      	subs	r4, r1, #4
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	da00      	bge.n	800599e <_free_r+0x12>
 800599c:	18e4      	adds	r4, r4, r3
 800599e:	0028      	movs	r0, r5
 80059a0:	f000 f958 	bl	8005c54 <__malloc_lock>
 80059a4:	4a1d      	ldr	r2, [pc, #116]	; (8005a1c <_free_r+0x90>)
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <_free_r+0x2c>
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	6014      	str	r4, [r2, #0]
 80059b0:	0028      	movs	r0, r5
 80059b2:	f000 f950 	bl	8005c56 <__malloc_unlock>
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d909      	bls.n	80059d0 <_free_r+0x44>
 80059bc:	6821      	ldr	r1, [r4, #0]
 80059be:	1860      	adds	r0, r4, r1
 80059c0:	4283      	cmp	r3, r0
 80059c2:	d1f3      	bne.n	80059ac <_free_r+0x20>
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	1841      	adds	r1, r0, r1
 80059ca:	6021      	str	r1, [r4, #0]
 80059cc:	e7ee      	b.n	80059ac <_free_r+0x20>
 80059ce:	0013      	movs	r3, r2
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	2a00      	cmp	r2, #0
 80059d4:	d001      	beq.n	80059da <_free_r+0x4e>
 80059d6:	42a2      	cmp	r2, r4
 80059d8:	d9f9      	bls.n	80059ce <_free_r+0x42>
 80059da:	6819      	ldr	r1, [r3, #0]
 80059dc:	1858      	adds	r0, r3, r1
 80059de:	42a0      	cmp	r0, r4
 80059e0:	d10b      	bne.n	80059fa <_free_r+0x6e>
 80059e2:	6820      	ldr	r0, [r4, #0]
 80059e4:	1809      	adds	r1, r1, r0
 80059e6:	1858      	adds	r0, r3, r1
 80059e8:	6019      	str	r1, [r3, #0]
 80059ea:	4282      	cmp	r2, r0
 80059ec:	d1e0      	bne.n	80059b0 <_free_r+0x24>
 80059ee:	6810      	ldr	r0, [r2, #0]
 80059f0:	6852      	ldr	r2, [r2, #4]
 80059f2:	1841      	adds	r1, r0, r1
 80059f4:	6019      	str	r1, [r3, #0]
 80059f6:	605a      	str	r2, [r3, #4]
 80059f8:	e7da      	b.n	80059b0 <_free_r+0x24>
 80059fa:	42a0      	cmp	r0, r4
 80059fc:	d902      	bls.n	8005a04 <_free_r+0x78>
 80059fe:	230c      	movs	r3, #12
 8005a00:	602b      	str	r3, [r5, #0]
 8005a02:	e7d5      	b.n	80059b0 <_free_r+0x24>
 8005a04:	6821      	ldr	r1, [r4, #0]
 8005a06:	1860      	adds	r0, r4, r1
 8005a08:	4282      	cmp	r2, r0
 8005a0a:	d103      	bne.n	8005a14 <_free_r+0x88>
 8005a0c:	6810      	ldr	r0, [r2, #0]
 8005a0e:	6852      	ldr	r2, [r2, #4]
 8005a10:	1841      	adds	r1, r0, r1
 8005a12:	6021      	str	r1, [r4, #0]
 8005a14:	6062      	str	r2, [r4, #4]
 8005a16:	605c      	str	r4, [r3, #4]
 8005a18:	e7ca      	b.n	80059b0 <_free_r+0x24>
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	2000102c 	.word	0x2000102c

08005a20 <_malloc_r>:
 8005a20:	2303      	movs	r3, #3
 8005a22:	b570      	push	{r4, r5, r6, lr}
 8005a24:	1ccd      	adds	r5, r1, #3
 8005a26:	439d      	bics	r5, r3
 8005a28:	3508      	adds	r5, #8
 8005a2a:	0006      	movs	r6, r0
 8005a2c:	2d0c      	cmp	r5, #12
 8005a2e:	d21e      	bcs.n	8005a6e <_malloc_r+0x4e>
 8005a30:	250c      	movs	r5, #12
 8005a32:	42a9      	cmp	r1, r5
 8005a34:	d81d      	bhi.n	8005a72 <_malloc_r+0x52>
 8005a36:	0030      	movs	r0, r6
 8005a38:	f000 f90c 	bl	8005c54 <__malloc_lock>
 8005a3c:	4a25      	ldr	r2, [pc, #148]	; (8005ad4 <_malloc_r+0xb4>)
 8005a3e:	6814      	ldr	r4, [r2, #0]
 8005a40:	0021      	movs	r1, r4
 8005a42:	2900      	cmp	r1, #0
 8005a44:	d119      	bne.n	8005a7a <_malloc_r+0x5a>
 8005a46:	4c24      	ldr	r4, [pc, #144]	; (8005ad8 <_malloc_r+0xb8>)
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <_malloc_r+0x36>
 8005a4e:	0030      	movs	r0, r6
 8005a50:	f000 f844 	bl	8005adc <_sbrk_r>
 8005a54:	6020      	str	r0, [r4, #0]
 8005a56:	0029      	movs	r1, r5
 8005a58:	0030      	movs	r0, r6
 8005a5a:	f000 f83f 	bl	8005adc <_sbrk_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	d12b      	bne.n	8005aba <_malloc_r+0x9a>
 8005a62:	230c      	movs	r3, #12
 8005a64:	0030      	movs	r0, r6
 8005a66:	6033      	str	r3, [r6, #0]
 8005a68:	f000 f8f5 	bl	8005c56 <__malloc_unlock>
 8005a6c:	e003      	b.n	8005a76 <_malloc_r+0x56>
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	dadf      	bge.n	8005a32 <_malloc_r+0x12>
 8005a72:	230c      	movs	r3, #12
 8005a74:	6033      	str	r3, [r6, #0]
 8005a76:	2000      	movs	r0, #0
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	680b      	ldr	r3, [r1, #0]
 8005a7c:	1b5b      	subs	r3, r3, r5
 8005a7e:	d419      	bmi.n	8005ab4 <_malloc_r+0x94>
 8005a80:	2b0b      	cmp	r3, #11
 8005a82:	d903      	bls.n	8005a8c <_malloc_r+0x6c>
 8005a84:	600b      	str	r3, [r1, #0]
 8005a86:	18cc      	adds	r4, r1, r3
 8005a88:	6025      	str	r5, [r4, #0]
 8005a8a:	e003      	b.n	8005a94 <_malloc_r+0x74>
 8005a8c:	684b      	ldr	r3, [r1, #4]
 8005a8e:	428c      	cmp	r4, r1
 8005a90:	d10d      	bne.n	8005aae <_malloc_r+0x8e>
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	0030      	movs	r0, r6
 8005a96:	f000 f8de 	bl	8005c56 <__malloc_unlock>
 8005a9a:	0020      	movs	r0, r4
 8005a9c:	2207      	movs	r2, #7
 8005a9e:	300b      	adds	r0, #11
 8005aa0:	1d23      	adds	r3, r4, #4
 8005aa2:	4390      	bics	r0, r2
 8005aa4:	1ac3      	subs	r3, r0, r3
 8005aa6:	d0e7      	beq.n	8005a78 <_malloc_r+0x58>
 8005aa8:	425a      	negs	r2, r3
 8005aaa:	50e2      	str	r2, [r4, r3]
 8005aac:	e7e4      	b.n	8005a78 <_malloc_r+0x58>
 8005aae:	6063      	str	r3, [r4, #4]
 8005ab0:	000c      	movs	r4, r1
 8005ab2:	e7ef      	b.n	8005a94 <_malloc_r+0x74>
 8005ab4:	000c      	movs	r4, r1
 8005ab6:	6849      	ldr	r1, [r1, #4]
 8005ab8:	e7c3      	b.n	8005a42 <_malloc_r+0x22>
 8005aba:	2303      	movs	r3, #3
 8005abc:	1cc4      	adds	r4, r0, #3
 8005abe:	439c      	bics	r4, r3
 8005ac0:	42a0      	cmp	r0, r4
 8005ac2:	d0e1      	beq.n	8005a88 <_malloc_r+0x68>
 8005ac4:	1a21      	subs	r1, r4, r0
 8005ac6:	0030      	movs	r0, r6
 8005ac8:	f000 f808 	bl	8005adc <_sbrk_r>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d1db      	bne.n	8005a88 <_malloc_r+0x68>
 8005ad0:	e7c7      	b.n	8005a62 <_malloc_r+0x42>
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	2000102c 	.word	0x2000102c
 8005ad8:	20001030 	.word	0x20001030

08005adc <_sbrk_r>:
 8005adc:	2300      	movs	r3, #0
 8005ade:	b570      	push	{r4, r5, r6, lr}
 8005ae0:	4c06      	ldr	r4, [pc, #24]	; (8005afc <_sbrk_r+0x20>)
 8005ae2:	0005      	movs	r5, r0
 8005ae4:	0008      	movs	r0, r1
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	f7fa ffb4 	bl	8000a54 <_sbrk>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d103      	bne.n	8005af8 <_sbrk_r+0x1c>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d000      	beq.n	8005af8 <_sbrk_r+0x1c>
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	2000136c 	.word	0x2000136c

08005b00 <__sread>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	000c      	movs	r4, r1
 8005b04:	250e      	movs	r5, #14
 8005b06:	5f49      	ldrsh	r1, [r1, r5]
 8005b08:	f000 f8a6 	bl	8005c58 <_read_r>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	db03      	blt.n	8005b18 <__sread+0x18>
 8005b10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b12:	181b      	adds	r3, r3, r0
 8005b14:	6563      	str	r3, [r4, #84]	; 0x54
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	4a02      	ldr	r2, [pc, #8]	; (8005b24 <__sread+0x24>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	e7f9      	b.n	8005b16 <__sread+0x16>
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	ffffefff 	.word	0xffffefff

08005b28 <__swrite>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	001f      	movs	r7, r3
 8005b2c:	898b      	ldrh	r3, [r1, #12]
 8005b2e:	0005      	movs	r5, r0
 8005b30:	000c      	movs	r4, r1
 8005b32:	0016      	movs	r6, r2
 8005b34:	05db      	lsls	r3, r3, #23
 8005b36:	d505      	bpl.n	8005b44 <__swrite+0x1c>
 8005b38:	230e      	movs	r3, #14
 8005b3a:	5ec9      	ldrsh	r1, [r1, r3]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2302      	movs	r3, #2
 8005b40:	f000 f874 	bl	8005c2c <_lseek_r>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	4a05      	ldr	r2, [pc, #20]	; (8005b5c <__swrite+0x34>)
 8005b48:	0028      	movs	r0, r5
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	0032      	movs	r2, r6
 8005b50:	230e      	movs	r3, #14
 8005b52:	5ee1      	ldrsh	r1, [r4, r3]
 8005b54:	003b      	movs	r3, r7
 8005b56:	f000 f81f 	bl	8005b98 <_write_r>
 8005b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b5c:	ffffefff 	.word	0xffffefff

08005b60 <__sseek>:
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	000c      	movs	r4, r1
 8005b64:	250e      	movs	r5, #14
 8005b66:	5f49      	ldrsh	r1, [r1, r5]
 8005b68:	f000 f860 	bl	8005c2c <_lseek_r>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	1c42      	adds	r2, r0, #1
 8005b70:	d103      	bne.n	8005b7a <__sseek+0x1a>
 8005b72:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <__sseek+0x28>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	81a3      	strh	r3, [r4, #12]
 8005b78:	bd70      	pop	{r4, r5, r6, pc}
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	0152      	lsls	r2, r2, #5
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	81a3      	strh	r3, [r4, #12]
 8005b82:	6560      	str	r0, [r4, #84]	; 0x54
 8005b84:	e7f8      	b.n	8005b78 <__sseek+0x18>
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	ffffefff 	.word	0xffffefff

08005b8c <__sclose>:
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	230e      	movs	r3, #14
 8005b90:	5ec9      	ldrsh	r1, [r1, r3]
 8005b92:	f000 f815 	bl	8005bc0 <_close_r>
 8005b96:	bd10      	pop	{r4, pc}

08005b98 <_write_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	0005      	movs	r5, r0
 8005b9c:	0008      	movs	r0, r1
 8005b9e:	0011      	movs	r1, r2
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4c06      	ldr	r4, [pc, #24]	; (8005bbc <_write_r+0x24>)
 8005ba4:	6022      	str	r2, [r4, #0]
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	f7fa ff0b 	bl	80009c2 <_write>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d103      	bne.n	8005bb8 <_write_r+0x20>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d000      	beq.n	8005bb8 <_write_r+0x20>
 8005bb6:	602b      	str	r3, [r5, #0]
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	2000136c 	.word	0x2000136c

08005bc0 <_close_r>:
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	b570      	push	{r4, r5, r6, lr}
 8005bc4:	4c06      	ldr	r4, [pc, #24]	; (8005be0 <_close_r+0x20>)
 8005bc6:	0005      	movs	r5, r0
 8005bc8:	0008      	movs	r0, r1
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	f7fa ff15 	bl	80009fa <_close>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d103      	bne.n	8005bdc <_close_r+0x1c>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d000      	beq.n	8005bdc <_close_r+0x1c>
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	bd70      	pop	{r4, r5, r6, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	2000136c 	.word	0x2000136c

08005be4 <_fstat_r>:
 8005be4:	2300      	movs	r3, #0
 8005be6:	b570      	push	{r4, r5, r6, lr}
 8005be8:	4c06      	ldr	r4, [pc, #24]	; (8005c04 <_fstat_r+0x20>)
 8005bea:	0005      	movs	r5, r0
 8005bec:	0008      	movs	r0, r1
 8005bee:	0011      	movs	r1, r2
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	f7fa ff0c 	bl	8000a0e <_fstat>
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	d103      	bne.n	8005c02 <_fstat_r+0x1e>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d000      	beq.n	8005c02 <_fstat_r+0x1e>
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	2000136c 	.word	0x2000136c

08005c08 <_isatty_r>:
 8005c08:	2300      	movs	r3, #0
 8005c0a:	b570      	push	{r4, r5, r6, lr}
 8005c0c:	4c06      	ldr	r4, [pc, #24]	; (8005c28 <_isatty_r+0x20>)
 8005c0e:	0005      	movs	r5, r0
 8005c10:	0008      	movs	r0, r1
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	f7fa ff09 	bl	8000a2a <_isatty>
 8005c18:	1c43      	adds	r3, r0, #1
 8005c1a:	d103      	bne.n	8005c24 <_isatty_r+0x1c>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d000      	beq.n	8005c24 <_isatty_r+0x1c>
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	2000136c 	.word	0x2000136c

08005c2c <_lseek_r>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	0005      	movs	r5, r0
 8005c30:	0008      	movs	r0, r1
 8005c32:	0011      	movs	r1, r2
 8005c34:	2200      	movs	r2, #0
 8005c36:	4c06      	ldr	r4, [pc, #24]	; (8005c50 <_lseek_r+0x24>)
 8005c38:	6022      	str	r2, [r4, #0]
 8005c3a:	001a      	movs	r2, r3
 8005c3c:	f7fa fefe 	bl	8000a3c <_lseek>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d103      	bne.n	8005c4c <_lseek_r+0x20>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d000      	beq.n	8005c4c <_lseek_r+0x20>
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	bd70      	pop	{r4, r5, r6, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	2000136c 	.word	0x2000136c

08005c54 <__malloc_lock>:
 8005c54:	4770      	bx	lr

08005c56 <__malloc_unlock>:
 8005c56:	4770      	bx	lr

08005c58 <_read_r>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	0005      	movs	r5, r0
 8005c5c:	0008      	movs	r0, r1
 8005c5e:	0011      	movs	r1, r2
 8005c60:	2200      	movs	r2, #0
 8005c62:	4c06      	ldr	r4, [pc, #24]	; (8005c7c <_read_r+0x24>)
 8005c64:	6022      	str	r2, [r4, #0]
 8005c66:	001a      	movs	r2, r3
 8005c68:	f7fa fe8e 	bl	8000988 <_read>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d103      	bne.n	8005c78 <_read_r+0x20>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d000      	beq.n	8005c78 <_read_r+0x20>
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	bd70      	pop	{r4, r5, r6, pc}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	2000136c 	.word	0x2000136c

08005c80 <_init>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr

08005c8c <_fini>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr
