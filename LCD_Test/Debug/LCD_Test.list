
LCD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007990  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08007a50  08007a50  00017a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de0  08007de0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007de0  08007de0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007de0  08007de0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de0  08007de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001e0  08007fc8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08007fc8  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6c5  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002088  00000000  00000000  0002c8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  0002e958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a675  00000000  00000000  00030030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a55b  00000000  00000000  0004a6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092a17  00000000  00000000  00054c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b0  00000000  00000000  000e7694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a38 	.word	0x08007a38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	08007a38 	.word	0x08007a38

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fd62 	bl	8001fd0 <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fbf3 	bl	8001fd0 <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 f9c7 	bl	8001fd0 <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 f993 	bl	8001fd0 <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	08007a84 	.word	0x08007a84
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f83c 	bl	8001fd0 <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f830 	bl	8001fd0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fdea 	bl	8001fd0 <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fdba 	bl	8001fd0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	08007ac4 	.word	0x08007ac4
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fc44 	bl	8001fd0 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fc38 	bl	8001fd0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fbbc 	bl	8001fd0 <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fa32 	bl	8001fd0 <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <displayInit>:
 *  		• MAX_COLUMNS
 * @param	hi2c 	- pointer to the i2c handler
 * @retval	status 	- 0...OK, other...error
 */
uint8_t displayInit(I2C_HandleTypeDef *hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 8002014:	230f      	movs	r3, #15
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]

	_i2cHandler = hi2c;			// pointer for i2c handler is stored in library
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <displayInit+0x80>)
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]

	// create i2c data stream
    uint8_t TransmitData[6] = {SPECIAL_COMMAND,									// special command character
 8002022:	2108      	movs	r1, #8
 8002024:	187b      	adds	r3, r7, r1
 8002026:	22fe      	movs	r2, #254	; 0xfe
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <displayInit+0x84>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2208      	movs	r2, #8
 8002030:	4313      	orrs	r3, r2
 8002032:	b2da      	uxtb	r2, r3
 8002034:	187b      	adds	r3, r7, r1
 8002036:	705a      	strb	r2, [r3, #1]
 8002038:	187b      	adds	r3, r7, r1
 800203a:	22fe      	movs	r2, #254	; 0xfe
 800203c:	709a      	strb	r2, [r3, #2]
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <displayInit+0x88>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2204      	movs	r2, #4
 8002044:	4313      	orrs	r3, r2
 8002046:	b2da      	uxtb	r2, r3
 8002048:	187b      	adds	r3, r7, r1
 800204a:	70da      	strb	r2, [r3, #3]
 800204c:	187b      	adds	r3, r7, r1
 800204e:	227c      	movs	r2, #124	; 0x7c
 8002050:	711a      	strb	r2, [r3, #4]
 8002052:	187b      	adds	r3, r7, r1
 8002054:	222d      	movs	r2, #45	; 0x2d
 8002056:	715a      	strb	r2, [r3, #5]
							   SETTING_COMMAND, 								// Put LCD into setting mode
							   CLEAR_COMMAND 									// clear display
    						   };

    // transmission of data stream
    if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, TransmitData, sizeof(TransmitData), 100) != HAL_OK)		// transmit data
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <displayInit+0x80>)
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	187a      	adds	r2, r7, r1
 800205e:	2364      	movs	r3, #100	; 0x64
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2306      	movs	r3, #6
 8002064:	21e4      	movs	r1, #228	; 0xe4
 8002066:	f000 ff51 	bl	8002f0c <HAL_I2C_Master_Transmit>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d003      	beq.n	8002076 <displayInit+0x6a>
    	retval = LCD_ERROR;
 800206e:	230f      	movs	r3, #15
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8002076:	2032      	movs	r0, #50	; 0x32
 8002078:	f000 fbbc 	bl	80027f4 <HAL_Delay>

    return retval;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	20000218 	.word	0x20000218
 8002090:	20000000 	.word	0x20000000
 8002094:	20000001 	.word	0x20000001

08002098 <displayWriteString>:
 * @param	size  	- length of the string to write
 * @retval	status 	- 0...OK, other...error
 *
 */
uint8_t displayWriteString(char *buffer)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b087      	sub	sp, #28
 800209c:	af02      	add	r7, sp, #8
 800209e:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 80020a0:	230f      	movs	r3, #15
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]

	// transmission of data stream
	if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, buffer, strlen(buffer), 100) != HAL_OK)		// transmit data
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <displayWriteString+0x50>)
 80020aa:	681c      	ldr	r4, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f7fe f82a 	bl	8000108 <strlen>
 80020b4:	0003      	movs	r3, r0
 80020b6:	b299      	uxth	r1, r3
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	000b      	movs	r3, r1
 80020c0:	21e4      	movs	r1, #228	; 0xe4
 80020c2:	0020      	movs	r0, r4
 80020c4:	f000 ff22 	bl	8002f0c <HAL_I2C_Master_Transmit>
 80020c8:	1e03      	subs	r3, r0, #0
 80020ca:	d003      	beq.n	80020d4 <displayWriteString+0x3c>
	  retval = LCD_ERROR;
 80020cc:	230f      	movs	r3, #15
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10); //This takes a bit longer
 80020d4:	200a      	movs	r0, #10
 80020d6:	f000 fb8d 	bl	80027f4 <HAL_Delay>

    return retval;
 80020da:	230f      	movs	r3, #15
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	781b      	ldrb	r3, [r3, #0]
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b005      	add	sp, #20
 80020e6:	bd90      	pop	{r4, r7, pc}
 80020e8:	20000218 	.word	0x20000218

080020ec <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 80020f4:	1d39      	adds	r1, r7, #4
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <__io_putchar+0x20>)
 80020f8:	230a      	movs	r3, #10
 80020fa:	2201      	movs	r2, #1
 80020fc:	f002 f870 	bl	80041e0 <HAL_UART_Transmit>

	return 1;
 8002100:	2301      	movs	r3, #1
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b002      	add	sp, #8
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	20000268 	.word	0x20000268

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002114:	f000 fb0a 	bl	800272c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002118:	f000 f83e 	bl	8002198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211c:	f000 f906 	bl	800232c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002120:	f000 f894 	bl	800224c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002124:	f000 f8d2 	bl	80022cc <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status_lcd = displayInit(&hi2c1);
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <main+0x6c>)
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff ff6e 	bl	800200c <displayInit>
 8002130:	0003      	movs	r3, r0
 8002132:	001a      	movs	r2, r3
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <main+0x70>)
 8002136:	701a      	strb	r2, [r3, #0]
	  printf("test\r\n");
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <main+0x74>)
 800213a:	0018      	movs	r0, r3
 800213c:	f003 fb92 	bl	8005864 <puts>
	  sprintf(lcd_string, "%d", lcd_counter);
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <main+0x78>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	001a      	movs	r2, r3
 8002146:	4911      	ldr	r1, [pc, #68]	; (800218c <main+0x7c>)
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <main+0x80>)
 800214a:	0018      	movs	r0, r3
 800214c:	f003 fb94 	bl	8005878 <siprintf>
	  printf("%s\r\n", lcd_string);
 8002150:	4a0f      	ldr	r2, [pc, #60]	; (8002190 <main+0x80>)
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <main+0x84>)
 8002154:	0011      	movs	r1, r2
 8002156:	0018      	movs	r0, r3
 8002158:	f003 fb0a 	bl	8005770 <iprintf>
	  displayWriteString(lcd_string);
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <main+0x80>)
 800215e:	0018      	movs	r0, r3
 8002160:	f7ff ff9a 	bl	8002098 <displayWriteString>
	  HAL_Delay(2000);
 8002164:	23fa      	movs	r3, #250	; 0xfa
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	0018      	movs	r0, r3
 800216a:	f000 fb43 	bl	80027f4 <HAL_Delay>
	  lcd_counter++;
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <main+0x78>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <main+0x78>)
 8002178:	701a      	strb	r2, [r3, #0]
	  status_lcd = displayInit(&hi2c1);
 800217a:	e7d5      	b.n	8002128 <main+0x18>
 800217c:	2000021c 	.word	0x2000021c
 8002180:	200001fc 	.word	0x200001fc
 8002184:	08007a50 	.word	0x08007a50
 8002188:	200001fd 	.word	0x200001fd
 800218c:	08007a58 	.word	0x08007a58
 8002190:	20000200 	.word	0x20000200
 8002194:	08007a5c 	.word	0x08007a5c

08002198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b099      	sub	sp, #100	; 0x64
 800219c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	242c      	movs	r4, #44	; 0x2c
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	0018      	movs	r0, r3
 80021a4:	2334      	movs	r3, #52	; 0x34
 80021a6:	001a      	movs	r2, r3
 80021a8:	2100      	movs	r1, #0
 80021aa:	f002 fe7b 	bl	8004ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ae:	231c      	movs	r3, #28
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	0018      	movs	r0, r3
 80021b4:	2310      	movs	r3, #16
 80021b6:	001a      	movs	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f002 fe73 	bl	8004ea4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021be:	003b      	movs	r3, r7
 80021c0:	0018      	movs	r0, r3
 80021c2:	231c      	movs	r3, #28
 80021c4:	001a      	movs	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	f002 fe6c 	bl	8004ea4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021cc:	0021      	movs	r1, r4
 80021ce:	187b      	adds	r3, r7, r1
 80021d0:	2202      	movs	r2, #2
 80021d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d4:	187b      	adds	r3, r7, r1
 80021d6:	2201      	movs	r2, #1
 80021d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2210      	movs	r2, #16
 80021de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	0018      	movs	r0, r3
 80021ea:	f001 f9a7 	bl	800353c <HAL_RCC_OscConfig>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d001      	beq.n	80021f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80021f2:	f000 f8e1 	bl	80023b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f6:	211c      	movs	r1, #28
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	2207      	movs	r2, #7
 80021fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021fe:	187b      	adds	r3, r7, r1
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002204:	187b      	adds	r3, r7, r1
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800220a:	187b      	adds	r3, r7, r1
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002210:	187b      	adds	r3, r7, r1
 8002212:	2100      	movs	r1, #0
 8002214:	0018      	movs	r0, r3
 8002216:	f001 fd17 	bl	8003c48 <HAL_RCC_ClockConfig>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800221e:	f000 f8cb 	bl	80023b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002222:	003b      	movs	r3, r7
 8002224:	2222      	movs	r2, #34	; 0x22
 8002226:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002228:	003b      	movs	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800222e:	003b      	movs	r3, r7
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002234:	003b      	movs	r3, r7
 8002236:	0018      	movs	r0, r3
 8002238:	f001 fe7e 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002240:	f000 f8ba 	bl	80023b8 <Error_Handler>
  }
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b019      	add	sp, #100	; 0x64
 800224a:	bd90      	pop	{r4, r7, pc}

0800224c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <MX_I2C1_Init+0x74>)
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <MX_I2C1_Init+0x78>)
 8002254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_I2C1_Init+0x74>)
 8002258:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <MX_I2C1_Init+0x7c>)
 800225a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <MX_I2C1_Init+0x74>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <MX_I2C1_Init+0x74>)
 8002264:	2201      	movs	r2, #1
 8002266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <MX_I2C1_Init+0x74>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_I2C1_Init+0x74>)
 8002270:	2200      	movs	r2, #0
 8002272:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MX_I2C1_Init+0x74>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_I2C1_Init+0x74>)
 800227c:	2200      	movs	r2, #0
 800227e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_I2C1_Init+0x74>)
 8002282:	2200      	movs	r2, #0
 8002284:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_I2C1_Init+0x74>)
 8002288:	0018      	movs	r0, r3
 800228a:	f000 fda9 	bl	8002de0 <HAL_I2C_Init>
 800228e:	1e03      	subs	r3, r0, #0
 8002290:	d001      	beq.n	8002296 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002292:	f000 f891 	bl	80023b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <MX_I2C1_Init+0x74>)
 8002298:	2100      	movs	r1, #0
 800229a:	0018      	movs	r0, r3
 800229c:	f001 f8b6 	bl	800340c <HAL_I2CEx_ConfigAnalogFilter>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d001      	beq.n	80022a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80022a4:	f000 f888 	bl	80023b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <MX_I2C1_Init+0x74>)
 80022aa:	2100      	movs	r1, #0
 80022ac:	0018      	movs	r0, r3
 80022ae:	f001 f8f9 	bl	80034a4 <HAL_I2CEx_ConfigDigitalFilter>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	d001      	beq.n	80022ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80022b6:	f000 f87f 	bl	80023b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2000021c 	.word	0x2000021c
 80022c4:	40005400 	.word	0x40005400
 80022c8:	2000090e 	.word	0x2000090e

080022cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <MX_USART2_UART_Init+0x5c>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d8:	2296      	movs	r2, #150	; 0x96
 80022da:	0192      	lsls	r2, r2, #6
 80022dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART2_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002310:	0018      	movs	r0, r3
 8002312:	f001 ff11 	bl	8004138 <HAL_UART_Init>
 8002316:	1e03      	subs	r3, r0, #0
 8002318:	d001      	beq.n	800231e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800231a:	f000 f84d 	bl	80023b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000268 	.word	0x20000268
 8002328:	40004400 	.word	0x40004400

0800232c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002332:	240c      	movs	r4, #12
 8002334:	193b      	adds	r3, r7, r4
 8002336:	0018      	movs	r0, r3
 8002338:	2314      	movs	r3, #20
 800233a:	001a      	movs	r2, r3
 800233c:	2100      	movs	r1, #0
 800233e:	f002 fdb1 	bl	8004ea4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <MX_GPIO_Init+0x84>)
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <MX_GPIO_Init+0x84>)
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	0289      	lsls	r1, r1, #10
 800234c:	430a      	orrs	r2, r1
 800234e:	615a      	str	r2, [r3, #20]
 8002350:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <MX_GPIO_Init+0x84>)
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	029b      	lsls	r3, r3, #10
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MX_GPIO_Init+0x84>)
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MX_GPIO_Init+0x84>)
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	02c9      	lsls	r1, r1, #11
 8002368:	430a      	orrs	r2, r1
 800236a:	615a      	str	r2, [r3, #20]
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <MX_GPIO_Init+0x84>)
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	02db      	lsls	r3, r3, #11
 8002374:	4013      	ands	r3, r2
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800237a:	0021      	movs	r1, r4
 800237c:	187b      	adds	r3, r7, r1
 800237e:	22c0      	movs	r2, #192	; 0xc0
 8002380:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2202      	movs	r2, #2
 8002386:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2203      	movs	r2, #3
 8002392:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	187b      	adds	r3, r7, r1
 800239c:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <MX_GPIO_Init+0x88>)
 800239e:	0019      	movs	r1, r3
 80023a0:	0010      	movs	r0, r2
 80023a2:	f000 fba5 	bl	8002af0 <HAL_GPIO_Init>

}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b009      	add	sp, #36	; 0x24
 80023ac:	bd90      	pop	{r4, r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40021000 	.word	0x40021000
 80023b4:	48000400 	.word	0x48000400

080023b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023be:	e7fe      	b.n	80023be <Error_Handler+0x6>

080023c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_MspInit+0x44>)
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_MspInit+0x44>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	619a      	str	r2, [r3, #24]
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_MspInit+0x44>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_MspInit+0x44>)
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_MspInit+0x44>)
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0549      	lsls	r1, r1, #21
 80023e8:	430a      	orrs	r2, r1
 80023ea:	61da      	str	r2, [r3, #28]
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_MspInit+0x44>)
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	055b      	lsls	r3, r3, #21
 80023f4:	4013      	ands	r3, r2
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	2314      	movs	r3, #20
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	0018      	movs	r0, r3
 8002416:	2314      	movs	r3, #20
 8002418:	001a      	movs	r2, r3
 800241a:	2100      	movs	r1, #0
 800241c:	f002 fd42 	bl	8004ea4 <memset>
  if(hi2c->Instance==I2C1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_I2C_MspInit+0x90>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d132      	bne.n	8002490 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <HAL_I2C_MspInit+0x94>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_I2C_MspInit+0x94>)
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	02c9      	lsls	r1, r1, #11
 8002434:	430a      	orrs	r2, r1
 8002436:	615a      	str	r2, [r3, #20]
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_I2C_MspInit+0x94>)
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	02db      	lsls	r3, r3, #11
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002446:	2114      	movs	r1, #20
 8002448:	187b      	adds	r3, r7, r1
 800244a:	22c0      	movs	r2, #192	; 0xc0
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002450:	187b      	adds	r3, r7, r1
 8002452:	2212      	movs	r2, #18
 8002454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002456:	187b      	adds	r3, r7, r1
 8002458:	2201      	movs	r2, #1
 800245a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800245c:	187b      	adds	r3, r7, r1
 800245e:	2203      	movs	r2, #3
 8002460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002462:	187b      	adds	r3, r7, r1
 8002464:	2201      	movs	r2, #1
 8002466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002468:	187b      	adds	r3, r7, r1
 800246a:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <HAL_I2C_MspInit+0x98>)
 800246c:	0019      	movs	r1, r3
 800246e:	0010      	movs	r0, r2
 8002470:	f000 fb3e 	bl	8002af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_I2C_MspInit+0x94>)
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_I2C_MspInit+0x94>)
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	0389      	lsls	r1, r1, #14
 800247e:	430a      	orrs	r2, r1
 8002480:	61da      	str	r2, [r3, #28]
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_I2C_MspInit+0x94>)
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	039b      	lsls	r3, r3, #14
 800248a:	4013      	ands	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b00a      	add	sp, #40	; 0x28
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40005400 	.word	0x40005400
 800249c:	40021000 	.word	0x40021000
 80024a0:	48000400 	.word	0x48000400

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	2314      	movs	r3, #20
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	0018      	movs	r0, r3
 80024b2:	2314      	movs	r3, #20
 80024b4:	001a      	movs	r2, r3
 80024b6:	2100      	movs	r1, #0
 80024b8:	f002 fcf4 	bl	8004ea4 <memset>
  if(huart->Instance==USART2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a20      	ldr	r2, [pc, #128]	; (8002544 <HAL_UART_MspInit+0xa0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d13a      	bne.n	800253c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_UART_MspInit+0xa4>)
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <HAL_UART_MspInit+0xa4>)
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	0289      	lsls	r1, r1, #10
 80024d0:	430a      	orrs	r2, r1
 80024d2:	61da      	str	r2, [r3, #28]
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_UART_MspInit+0xa4>)
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_UART_MspInit+0xa4>)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_UART_MspInit+0xa4>)
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	0289      	lsls	r1, r1, #10
 80024ec:	430a      	orrs	r2, r1
 80024ee:	615a      	str	r2, [r3, #20]
 80024f0:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_UART_MspInit+0xa4>)
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024fe:	2114      	movs	r1, #20
 8002500:	187b      	adds	r3, r7, r1
 8002502:	220c      	movs	r2, #12
 8002504:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2202      	movs	r2, #2
 800250a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2203      	movs	r2, #3
 8002516:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	2201      	movs	r2, #1
 800251c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	187a      	adds	r2, r7, r1
 8002520:	2390      	movs	r3, #144	; 0x90
 8002522:	05db      	lsls	r3, r3, #23
 8002524:	0011      	movs	r1, r2
 8002526:	0018      	movs	r0, r3
 8002528:	f000 fae2 	bl	8002af0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800252c:	2200      	movs	r2, #0
 800252e:	2100      	movs	r1, #0
 8002530:	201c      	movs	r0, #28
 8002532:	f000 fa2d 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002536:	201c      	movs	r0, #28
 8002538:	f000 fa3f 	bl	80029ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b00a      	add	sp, #40	; 0x28
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40004400 	.word	0x40004400
 8002548:	40021000 	.word	0x40021000

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <NMI_Handler+0x4>

08002552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <HardFault_Handler+0x4>

08002558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002570:	f000 f924 	bl	80027bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <USART2_IRQHandler+0x14>)
 8002582:	0018      	movs	r0, r3
 8002584:	f001 fed6 	bl	8004334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	20000268 	.word	0x20000268

08002594 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e00a      	b.n	80025bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025a6:	e000      	b.n	80025aa <_read+0x16>
 80025a8:	bf00      	nop
 80025aa:	0001      	movs	r1, r0
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	60ba      	str	r2, [r7, #8]
 80025b2:	b2ca      	uxtb	r2, r1
 80025b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	dbf0      	blt.n	80025a6 <_read+0x12>
	}

return len;
 80025c4:	687b      	ldr	r3, [r7, #4]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b006      	add	sp, #24
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e009      	b.n	80025f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	60ba      	str	r2, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7ff fd7f 	bl	80020ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	dbf1      	blt.n	80025e0 <_write+0x12>
	}
	return len;
 80025fc:	687b      	ldr	r3, [r7, #4]
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b006      	add	sp, #24
 8002604:	bd80      	pop	{r7, pc}

08002606 <_close>:

int _close(int file)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
	return -1;
 800260e:	2301      	movs	r3, #1
 8002610:	425b      	negs	r3, r3
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}

0800261a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	0192      	lsls	r2, r2, #6
 800262a:	605a      	str	r2, [r3, #4]
	return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}

08002636 <_isatty>:

int _isatty(int file)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
	return 1;
 800263e:	2301      	movs	r3, #1
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <_sbrk+0x5c>)
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <_sbrk+0x60>)
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <_sbrk+0x64>)
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <_sbrk+0x68>)
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	18d3      	adds	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d207      	bcs.n	80026a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002690:	f002 fbde 	bl	8004e50 <__errno>
 8002694:	0003      	movs	r3, r0
 8002696:	220c      	movs	r2, #12
 8002698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800269a:	2301      	movs	r3, #1
 800269c:	425b      	negs	r3, r3
 800269e:	e009      	b.n	80026b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	18d2      	adds	r2, r2, r3
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <_sbrk+0x64>)
 80026b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b006      	add	sp, #24
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20004000 	.word	0x20004000
 80026c0:	00000400 	.word	0x00000400
 80026c4:	2000020c 	.word	0x2000020c
 80026c8:	200002f8 	.word	0x200002f8

080026cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026d8:	480d      	ldr	r0, [pc, #52]	; (8002710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026dc:	480d      	ldr	r0, [pc, #52]	; (8002714 <LoopForever+0x6>)
  ldr r1, =_edata
 80026de:	490e      	ldr	r1, [pc, #56]	; (8002718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026e0:	4a0e      	ldr	r2, [pc, #56]	; (800271c <LoopForever+0xe>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e4:	e002      	b.n	80026ec <LoopCopyDataInit>

080026e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ea:	3304      	adds	r3, #4

080026ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f0:	d3f9      	bcc.n	80026e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f2:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026f4:	4c0b      	ldr	r4, [pc, #44]	; (8002724 <LoopForever+0x16>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f8:	e001      	b.n	80026fe <LoopFillZerobss>

080026fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026fc:	3204      	adds	r2, #4

080026fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002700:	d3fb      	bcc.n	80026fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002702:	f7ff ffe3 	bl	80026cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002706:	f002 fba9 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800270a:	f7ff fd01 	bl	8002110 <main>

0800270e <LoopForever>:

LoopForever:
    b LoopForever
 800270e:	e7fe      	b.n	800270e <LoopForever>
  ldr   r0, =_estack
 8002710:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002718:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800271c:	08007de8 	.word	0x08007de8
  ldr r2, =_sbss
 8002720:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002724:	200002f4 	.word	0x200002f4

08002728 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002728:	e7fe      	b.n	8002728 <ADC1_COMP_IRQHandler>
	...

0800272c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_Init+0x24>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_Init+0x24>)
 8002736:	2110      	movs	r1, #16
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800273c:	2000      	movs	r0, #0
 800273e:	f000 f809 	bl	8002754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002742:	f7ff fe3d 	bl	80023c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	40022000 	.word	0x40022000

08002754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_InitTick+0x5c>)
 800275e:	681c      	ldr	r4, [r3, #0]
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <HAL_InitTick+0x60>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	0019      	movs	r1, r3
 8002766:	23fa      	movs	r3, #250	; 0xfa
 8002768:	0098      	lsls	r0, r3, #2
 800276a:	f7fd fcdf 	bl	800012c <__udivsi3>
 800276e:	0003      	movs	r3, r0
 8002770:	0019      	movs	r1, r3
 8002772:	0020      	movs	r0, r4
 8002774:	f7fd fcda 	bl	800012c <__udivsi3>
 8002778:	0003      	movs	r3, r0
 800277a:	0018      	movs	r0, r3
 800277c:	f000 f92d 	bl	80029da <HAL_SYSTICK_Config>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d001      	beq.n	8002788 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e00f      	b.n	80027a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d80b      	bhi.n	80027a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	2301      	movs	r3, #1
 8002792:	425b      	negs	r3, r3
 8002794:	2200      	movs	r2, #0
 8002796:	0018      	movs	r0, r3
 8002798:	f000 f8fa 	bl	8002990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_InitTick+0x64>)
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b003      	add	sp, #12
 80027ae:	bd90      	pop	{r4, r7, pc}
 80027b0:	20000004 	.word	0x20000004
 80027b4:	2000000c 	.word	0x2000000c
 80027b8:	20000008 	.word	0x20000008

080027bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_IncTick+0x1c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	001a      	movs	r2, r3
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_IncTick+0x20>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	18d2      	adds	r2, r2, r3
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_IncTick+0x20>)
 80027ce:	601a      	str	r2, [r3, #0]
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	2000000c 	.word	0x2000000c
 80027dc:	200002ec 	.word	0x200002ec

080027e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b02      	ldr	r3, [pc, #8]	; (80027f0 <HAL_GetTick+0x10>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	200002ec 	.word	0x200002ec

080027f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff fff0 	bl	80027e0 <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3301      	adds	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_Delay+0x40>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	001a      	movs	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	189b      	adds	r3, r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	f7ff ffe0 	bl	80027e0 <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d8f7      	bhi.n	800281c <HAL_Delay+0x28>
  {
  }
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b004      	add	sp, #16
 8002832:	bd80      	pop	{r7, pc}
 8002834:	2000000c 	.word	0x2000000c

08002838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	0002      	movs	r2, r0
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002844:	1dfb      	adds	r3, r7, #7
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b7f      	cmp	r3, #127	; 0x7f
 800284a:	d809      	bhi.n	8002860 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	001a      	movs	r2, r3
 8002852:	231f      	movs	r3, #31
 8002854:	401a      	ands	r2, r3
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <__NVIC_EnableIRQ+0x30>)
 8002858:	2101      	movs	r1, #1
 800285a:	4091      	lsls	r1, r2
 800285c:	000a      	movs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
  }
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	0002      	movs	r2, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800287a:	1dfb      	adds	r3, r7, #7
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b7f      	cmp	r3, #127	; 0x7f
 8002880:	d828      	bhi.n	80028d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <__NVIC_SetPriority+0xd4>)
 8002884:	1dfb      	adds	r3, r7, #7
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b25b      	sxtb	r3, r3
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	33c0      	adds	r3, #192	; 0xc0
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	589b      	ldr	r3, [r3, r2]
 8002892:	1dfa      	adds	r2, r7, #7
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	0011      	movs	r1, r2
 8002898:	2203      	movs	r2, #3
 800289a:	400a      	ands	r2, r1
 800289c:	00d2      	lsls	r2, r2, #3
 800289e:	21ff      	movs	r1, #255	; 0xff
 80028a0:	4091      	lsls	r1, r2
 80028a2:	000a      	movs	r2, r1
 80028a4:	43d2      	mvns	r2, r2
 80028a6:	401a      	ands	r2, r3
 80028a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	401a      	ands	r2, r3
 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	0018      	movs	r0, r3
 80028b8:	2303      	movs	r3, #3
 80028ba:	4003      	ands	r3, r0
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c0:	481f      	ldr	r0, [pc, #124]	; (8002940 <__NVIC_SetPriority+0xd4>)
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	430a      	orrs	r2, r1
 80028cc:	33c0      	adds	r3, #192	; 0xc0
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028d2:	e031      	b.n	8002938 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d4:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <__NVIC_SetPriority+0xd8>)
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	0019      	movs	r1, r3
 80028dc:	230f      	movs	r3, #15
 80028de:	400b      	ands	r3, r1
 80028e0:	3b08      	subs	r3, #8
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3306      	adds	r3, #6
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	18d3      	adds	r3, r2, r3
 80028ea:	3304      	adds	r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	1dfa      	adds	r2, r7, #7
 80028f0:	7812      	ldrb	r2, [r2, #0]
 80028f2:	0011      	movs	r1, r2
 80028f4:	2203      	movs	r2, #3
 80028f6:	400a      	ands	r2, r1
 80028f8:	00d2      	lsls	r2, r2, #3
 80028fa:	21ff      	movs	r1, #255	; 0xff
 80028fc:	4091      	lsls	r1, r2
 80028fe:	000a      	movs	r2, r1
 8002900:	43d2      	mvns	r2, r2
 8002902:	401a      	ands	r2, r3
 8002904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	401a      	ands	r2, r3
 800290e:	1dfb      	adds	r3, r7, #7
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	0018      	movs	r0, r3
 8002914:	2303      	movs	r3, #3
 8002916:	4003      	ands	r3, r0
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800291c:	4809      	ldr	r0, [pc, #36]	; (8002944 <__NVIC_SetPriority+0xd8>)
 800291e:	1dfb      	adds	r3, r7, #7
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	001c      	movs	r4, r3
 8002924:	230f      	movs	r3, #15
 8002926:	4023      	ands	r3, r4
 8002928:	3b08      	subs	r3, #8
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	430a      	orrs	r2, r1
 800292e:	3306      	adds	r3, #6
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	18c3      	adds	r3, r0, r3
 8002934:	3304      	adds	r3, #4
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b003      	add	sp, #12
 800293e:	bd90      	pop	{r4, r7, pc}
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <SysTick_Config+0x40>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295a:	2301      	movs	r3, #1
 800295c:	e010      	b.n	8002980 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <SysTick_Config+0x44>)
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	3a01      	subs	r2, #1
 8002964:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002966:	2301      	movs	r3, #1
 8002968:	425b      	negs	r3, r3
 800296a:	2103      	movs	r1, #3
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff ff7d 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <SysTick_Config+0x44>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <SysTick_Config+0x44>)
 800297a:	2207      	movs	r2, #7
 800297c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297e:	2300      	movs	r3, #0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b002      	add	sp, #8
 8002986:	bd80      	pop	{r7, pc}
 8002988:	00ffffff 	.word	0x00ffffff
 800298c:	e000e010 	.word	0xe000e010

08002990 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	210f      	movs	r1, #15
 800299c:	187b      	adds	r3, r7, r1
 800299e:	1c02      	adds	r2, r0, #0
 80029a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	0011      	movs	r1, r2
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7ff ff5d 	bl	800286c <__NVIC_SetPriority>
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b004      	add	sp, #16
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	0002      	movs	r2, r0
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff ff33 	bl	8002838 <__NVIC_EnableIRQ>
}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff ffaf 	bl	8002948 <SysTick_Config>
 80029ea:	0003      	movs	r3, r0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2221      	movs	r2, #33	; 0x21
 8002a00:	5c9b      	ldrb	r3, [r3, r2]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d008      	beq.n	8002a1a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e020      	b.n	8002a5c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	210e      	movs	r1, #14
 8002a26:	438a      	bics	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	438a      	bics	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	2101      	movs	r1, #1
 8002a44:	4091      	lsls	r1, r2
 8002a46:	000a      	movs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2221      	movs	r2, #33	; 0x21
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	2100      	movs	r1, #0
 8002a58:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	230f      	movs	r3, #15
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2221      	movs	r2, #33	; 0x21
 8002a78:	5c9b      	ldrb	r3, [r3, r2]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d007      	beq.n	8002a90 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2204      	movs	r2, #4
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a86:	230f      	movs	r3, #15
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e028      	b.n	8002ae2 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	210e      	movs	r1, #14
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2101      	movs	r1, #1
 8002aac:	438a      	bics	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4091      	lsls	r1, r2
 8002abc:	000a      	movs	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2221      	movs	r2, #33	; 0x21
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	0010      	movs	r0, r2
 8002ae0:	4798      	blx	r3
    } 
  }
  return status;
 8002ae2:	230f      	movs	r3, #15
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b004      	add	sp, #16
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afe:	e155      	b.n	8002dac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2101      	movs	r1, #1
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4091      	lsls	r1, r2
 8002b0a:	000a      	movs	r2, r1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d100      	bne.n	8002b18 <HAL_GPIO_Init+0x28>
 8002b16:	e146      	b.n	8002da6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d00b      	beq.n	8002b38 <HAL_GPIO_Init+0x48>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d007      	beq.n	8002b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b2c:	2b11      	cmp	r3, #17
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b12      	cmp	r3, #18
 8002b36:	d130      	bne.n	8002b9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	409a      	lsls	r2, r3
 8002b46:	0013      	movs	r3, r2
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b6e:	2201      	movs	r2, #1
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
 8002b74:	0013      	movs	r3, r2
 8002b76:	43da      	mvns	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	2201      	movs	r2, #1
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	0013      	movs	r3, r2
 8002baa:	43da      	mvns	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0xea>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b12      	cmp	r3, #18
 8002bd8:	d123      	bne.n	8002c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	08da      	lsrs	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3208      	adds	r2, #8
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	58d3      	ldr	r3, [r2, r3]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2207      	movs	r2, #7
 8002bec:	4013      	ands	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	0013      	movs	r3, r2
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2107      	movs	r1, #7
 8002c06:	400b      	ands	r3, r1
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	0013      	movs	r3, r2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	08da      	lsrs	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3208      	adds	r2, #8
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	6939      	ldr	r1, [r7, #16]
 8002c20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	0013      	movs	r3, r2
 8002c32:	43da      	mvns	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2203      	movs	r2, #3
 8002c40:	401a      	ands	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	0013      	movs	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	055b      	lsls	r3, r3, #21
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d100      	bne.n	8002c64 <HAL_GPIO_Init+0x174>
 8002c62:	e0a0      	b.n	8002da6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c64:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <HAL_GPIO_Init+0x2d4>)
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	4b56      	ldr	r3, [pc, #344]	; (8002dc4 <HAL_GPIO_Init+0x2d4>)
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	619a      	str	r2, [r3, #24]
 8002c70:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <HAL_GPIO_Init+0x2d4>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2201      	movs	r2, #1
 8002c76:	4013      	ands	r3, r2
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c7c:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_GPIO_Init+0x2d8>)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	3302      	adds	r3, #2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	589b      	ldr	r3, [r3, r2]
 8002c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	4013      	ands	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	409a      	lsls	r2, r3
 8002c96:	0013      	movs	r3, r2
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	2390      	movs	r3, #144	; 0x90
 8002ca4:	05db      	lsls	r3, r3, #23
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x1ee>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a47      	ldr	r2, [pc, #284]	; (8002dcc <HAL_GPIO_Init+0x2dc>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x1ea>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a46      	ldr	r2, [pc, #280]	; (8002dd0 <HAL_GPIO_Init+0x2e0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x1e6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a45      	ldr	r2, [pc, #276]	; (8002dd4 <HAL_GPIO_Init+0x2e4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x1e2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a44      	ldr	r2, [pc, #272]	; (8002dd8 <HAL_GPIO_Init+0x2e8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x1de>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	e008      	b.n	8002ce0 <HAL_GPIO_Init+0x1f0>
 8002cce:	2305      	movs	r3, #5
 8002cd0:	e006      	b.n	8002ce0 <HAL_GPIO_Init+0x1f0>
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e004      	b.n	8002ce0 <HAL_GPIO_Init+0x1f0>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e002      	b.n	8002ce0 <HAL_GPIO_Init+0x1f0>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_GPIO_Init+0x1f0>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	0092      	lsls	r2, r2, #2
 8002ce8:	4093      	lsls	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cf0:	4935      	ldr	r1, [pc, #212]	; (8002dc8 <HAL_GPIO_Init+0x2d8>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfe:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	43da      	mvns	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	025b      	lsls	r3, r3, #9
 8002d16:	4013      	ands	r3, r2
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d22:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002d28:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	029b      	lsls	r3, r3, #10
 8002d40:	4013      	ands	r3, r2
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	035b      	lsls	r3, r3, #13
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	039b      	lsls	r3, r3, #14
 8002d94:	4013      	ands	r3, r2
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	40da      	lsrs	r2, r3
 8002db4:	1e13      	subs	r3, r2, #0
 8002db6:	d000      	beq.n	8002dba <HAL_GPIO_Init+0x2ca>
 8002db8:	e6a2      	b.n	8002b00 <HAL_GPIO_Init+0x10>
  } 
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b006      	add	sp, #24
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	48000400 	.word	0x48000400
 8002dd0:	48000800 	.word	0x48000800
 8002dd4:	48000c00 	.word	0x48000c00
 8002dd8:	48001000 	.word	0x48001000
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e082      	b.n	8002ef8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2241      	movs	r2, #65	; 0x41
 8002df6:	5c9b      	ldrb	r3, [r3, r2]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d107      	bne.n	8002e0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2240      	movs	r2, #64	; 0x40
 8002e02:	2100      	movs	r1, #0
 8002e04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7ff fafd 	bl	8002408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2241      	movs	r2, #65	; 0x41
 8002e12:	2124      	movs	r1, #36	; 0x24
 8002e14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2101      	movs	r1, #1
 8002e22:	438a      	bics	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4934      	ldr	r1, [pc, #208]	; (8002f00 <HAL_I2C_Init+0x120>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4931      	ldr	r1, [pc, #196]	; (8002f04 <HAL_I2C_Init+0x124>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d108      	bne.n	8002e5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	0209      	lsls	r1, r1, #8
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	e007      	b.n	8002e6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2184      	movs	r1, #132	; 0x84
 8002e68:	0209      	lsls	r1, r1, #8
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d104      	bne.n	8002e80 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	491f      	ldr	r1, [pc, #124]	; (8002f08 <HAL_I2C_Init+0x128>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	491a      	ldr	r1, [pc, #104]	; (8002f04 <HAL_I2C_Init+0x124>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	0011      	movs	r1, r2
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	021a      	lsls	r2, r3, #8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69d9      	ldr	r1, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1a      	ldr	r2, [r3, #32]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2241      	movs	r2, #65	; 0x41
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2242      	movs	r2, #66	; 0x42
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	f0ffffff 	.word	0xf0ffffff
 8002f04:	ffff7fff 	.word	0xffff7fff
 8002f08:	02008000 	.word	0x02008000

08002f0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	0008      	movs	r0, r1
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	0019      	movs	r1, r3
 8002f1a:	230a      	movs	r3, #10
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	1c02      	adds	r2, r0, #0
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	2308      	movs	r3, #8
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	1c0a      	adds	r2, r1, #0
 8002f28:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2241      	movs	r2, #65	; 0x41
 8002f2e:	5c9b      	ldrb	r3, [r3, r2]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d000      	beq.n	8002f38 <HAL_I2C_Master_Transmit+0x2c>
 8002f36:	e0e7      	b.n	8003108 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	5c9b      	ldrb	r3, [r3, r2]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Master_Transmit+0x3a>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e0e1      	b.n	800310a <HAL_I2C_Master_Transmit+0x1fe>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f4e:	f7ff fc47 	bl	80027e0 <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	0219      	lsls	r1, r3, #8
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2319      	movs	r3, #25
 8002f62:	2201      	movs	r2, #1
 8002f64:	f000 f8fc 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0cc      	b.n	800310a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2241      	movs	r2, #65	; 0x41
 8002f74:	2121      	movs	r1, #33	; 0x21
 8002f76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2242      	movs	r2, #66	; 0x42
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2208      	movs	r2, #8
 8002f90:	18ba      	adds	r2, r7, r2
 8002f92:	8812      	ldrh	r2, [r2, #0]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2bff      	cmp	r3, #255	; 0xff
 8002fa4:	d911      	bls.n	8002fca <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	22ff      	movs	r2, #255	; 0xff
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	045c      	lsls	r4, r3, #17
 8002fb6:	230a      	movs	r3, #10
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	8819      	ldrh	r1, [r3, #0]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	4b55      	ldr	r3, [pc, #340]	; (8003114 <HAL_I2C_Master_Transmit+0x208>)
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	0023      	movs	r3, r4
 8002fc4:	f000 f9ec 	bl	80033a0 <I2C_TransferConfig>
 8002fc8:	e075      	b.n	80030b6 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	049c      	lsls	r4, r3, #18
 8002fde:	230a      	movs	r3, #10
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	8819      	ldrh	r1, [r3, #0]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_I2C_Master_Transmit+0x208>)
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	0023      	movs	r3, r4
 8002fec:	f000 f9d8 	bl	80033a0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002ff0:	e061      	b.n	80030b6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 f8f0 	bl	80031de <I2C_WaitOnTXISFlagUntilTimeout>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e081      	b.n	800310a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d03a      	beq.n	80030b6 <HAL_I2C_Master_Transmit+0x1aa>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d136      	bne.n	80030b6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	0013      	movs	r3, r2
 8003052:	2200      	movs	r2, #0
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	f000 f883 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 800305a:	1e03      	subs	r3, r0, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e053      	b.n	800310a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	2bff      	cmp	r3, #255	; 0xff
 800306a:	d911      	bls.n	8003090 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	22ff      	movs	r2, #255	; 0xff
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	b2da      	uxtb	r2, r3
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	045c      	lsls	r4, r3, #17
 800307c:	230a      	movs	r3, #10
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	8819      	ldrh	r1, [r3, #0]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	2300      	movs	r3, #0
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	0023      	movs	r3, r4
 800308a:	f000 f989 	bl	80033a0 <I2C_TransferConfig>
 800308e:	e012      	b.n	80030b6 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	049c      	lsls	r4, r3, #18
 80030a4:	230a      	movs	r3, #10
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	8819      	ldrh	r1, [r3, #0]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	2300      	movs	r3, #0
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	0023      	movs	r3, r4
 80030b2:	f000 f975 	bl	80033a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d198      	bne.n	8002ff2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 f8c8 	bl	800325c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030cc:	1e03      	subs	r3, r0, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e01a      	b.n	800310a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2220      	movs	r2, #32
 80030da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	490c      	ldr	r1, [pc, #48]	; (8003118 <HAL_I2C_Master_Transmit+0x20c>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2241      	movs	r2, #65	; 0x41
 80030f0:	2120      	movs	r1, #32
 80030f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2242      	movs	r2, #66	; 0x42
 80030f8:	2100      	movs	r1, #0
 80030fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
  }
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b007      	add	sp, #28
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	80002000 	.word	0x80002000
 8003118:	fe00e800 	.word	0xfe00e800

0800311c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2202      	movs	r2, #2
 800312c:	4013      	ands	r3, r2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d103      	bne.n	800313a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2200      	movs	r2, #0
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2201      	movs	r2, #1
 8003142:	4013      	ands	r3, r2
 8003144:	2b01      	cmp	r3, #1
 8003146:	d007      	beq.n	8003158 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2101      	movs	r1, #1
 8003154:	430a      	orrs	r2, r1
 8003156:	619a      	str	r2, [r3, #24]
  }
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b002      	add	sp, #8
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	1dfb      	adds	r3, r7, #7
 800316e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003170:	e021      	b.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	d01e      	beq.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003178:	f7ff fb32 	bl	80027e0 <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d302      	bcc.n	800318e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d113      	bne.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	2220      	movs	r2, #32
 8003194:	431a      	orrs	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2241      	movs	r2, #65	; 0x41
 800319e:	2120      	movs	r1, #32
 80031a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2242      	movs	r2, #66	; 0x42
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2240      	movs	r2, #64	; 0x40
 80031ae:	2100      	movs	r1, #0
 80031b0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e00f      	b.n	80031d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	4013      	ands	r3, r2
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	425a      	negs	r2, r3
 80031c6:	4153      	adcs	r3, r2
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	001a      	movs	r2, r3
 80031cc:	1dfb      	adds	r3, r7, #7
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d0ce      	beq.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b004      	add	sp, #16
 80031dc:	bd80      	pop	{r7, pc}

080031de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ea:	e02b      	b.n	8003244 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f000 f86e 	bl	80032d4 <I2C_IsAcknowledgeFailed>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d001      	beq.n	8003200 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e029      	b.n	8003254 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3301      	adds	r3, #1
 8003204:	d01e      	beq.n	8003244 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7ff faeb 	bl	80027e0 <HAL_GetTick>
 800320a:	0002      	movs	r2, r0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d113      	bne.n	8003244 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	2220      	movs	r2, #32
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2241      	movs	r2, #65	; 0x41
 800322c:	2120      	movs	r1, #32
 800322e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2242      	movs	r2, #66	; 0x42
 8003234:	2100      	movs	r1, #0
 8003236:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	2100      	movs	r1, #0
 800323e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e007      	b.n	8003254 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d1cc      	bne.n	80031ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	0018      	movs	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	b004      	add	sp, #16
 800325a:	bd80      	pop	{r7, pc}

0800325c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003268:	e028      	b.n	80032bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 f82f 	bl	80032d4 <I2C_IsAcknowledgeFailed>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e026      	b.n	80032cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327e:	f7ff faaf 	bl	80027e0 <HAL_GetTick>
 8003282:	0002      	movs	r2, r0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d113      	bne.n	80032bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	2220      	movs	r2, #32
 800329a:	431a      	orrs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2241      	movs	r2, #65	; 0x41
 80032a4:	2120      	movs	r1, #32
 80032a6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2242      	movs	r2, #66	; 0x42
 80032ac:	2100      	movs	r1, #0
 80032ae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2240      	movs	r2, #64	; 0x40
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e007      	b.n	80032cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2220      	movs	r2, #32
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d1cf      	bne.n	800326a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2210      	movs	r2, #16
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d151      	bne.n	8003392 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ee:	e021      	b.n	8003334 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3301      	adds	r3, #1
 80032f4:	d01e      	beq.n	8003334 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7ff fa73 	bl	80027e0 <HAL_GetTick>
 80032fa:	0002      	movs	r2, r0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_IsAcknowledgeFailed+0x38>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d113      	bne.n	8003334 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	2220      	movs	r2, #32
 8003312:	431a      	orrs	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2241      	movs	r2, #65	; 0x41
 800331c:	2120      	movs	r1, #32
 800331e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2242      	movs	r2, #66	; 0x42
 8003324:	2100      	movs	r1, #0
 8003326:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e02f      	b.n	8003394 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2220      	movs	r2, #32
 800333c:	4013      	ands	r3, r2
 800333e:	2b20      	cmp	r3, #32
 8003340:	d1d6      	bne.n	80032f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2210      	movs	r2, #16
 8003348:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2220      	movs	r2, #32
 8003350:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	0018      	movs	r0, r3
 8003356:	f7ff fee1 	bl	800311c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	490d      	ldr	r1, [pc, #52]	; (800339c <I2C_IsAcknowledgeFailed+0xc8>)
 8003366:	400a      	ands	r2, r1
 8003368:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	2204      	movs	r2, #4
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2241      	movs	r2, #65	; 0x41
 800337a:	2120      	movs	r1, #32
 800337c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2242      	movs	r2, #66	; 0x42
 8003382:	2100      	movs	r1, #0
 8003384:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2240      	movs	r2, #64	; 0x40
 800338a:	2100      	movs	r1, #0
 800338c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	b004      	add	sp, #16
 800339a:	bd80      	pop	{r7, pc}
 800339c:	fe00e800 	.word	0xfe00e800

080033a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	0008      	movs	r0, r1
 80033aa:	0011      	movs	r1, r2
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	240a      	movs	r4, #10
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	1c02      	adds	r2, r0, #0
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	2009      	movs	r0, #9
 80033b8:	183b      	adds	r3, r7, r0
 80033ba:	1c0a      	adds	r2, r1, #0
 80033bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	6a3a      	ldr	r2, [r7, #32]
 80033c6:	0d51      	lsrs	r1, r2, #21
 80033c8:	2280      	movs	r2, #128	; 0x80
 80033ca:	00d2      	lsls	r2, r2, #3
 80033cc:	400a      	ands	r2, r1
 80033ce:	490e      	ldr	r1, [pc, #56]	; (8003408 <I2C_TransferConfig+0x68>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	43d2      	mvns	r2, r2
 80033d4:	401a      	ands	r2, r3
 80033d6:	0011      	movs	r1, r2
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	059b      	lsls	r3, r3, #22
 80033de:	0d9a      	lsrs	r2, r3, #22
 80033e0:	183b      	adds	r3, r7, r0
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	0418      	lsls	r0, r3, #16
 80033e6:	23ff      	movs	r3, #255	; 0xff
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	4003      	ands	r3, r0
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b005      	add	sp, #20
 8003404:	bd90      	pop	{r4, r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	03ff63ff 	.word	0x03ff63ff

0800340c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2241      	movs	r2, #65	; 0x41
 800341a:	5c9b      	ldrb	r3, [r3, r2]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	d138      	bne.n	8003494 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2240      	movs	r2, #64	; 0x40
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800342c:	2302      	movs	r3, #2
 800342e:	e032      	b.n	8003496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2240      	movs	r2, #64	; 0x40
 8003434:	2101      	movs	r1, #1
 8003436:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2241      	movs	r2, #65	; 0x41
 800343c:	2124      	movs	r1, #36	; 0x24
 800343e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	438a      	bics	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4911      	ldr	r1, [pc, #68]	; (80034a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800345c:	400a      	ands	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2241      	movs	r2, #65	; 0x41
 8003484:	2120      	movs	r1, #32
 8003486:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b002      	add	sp, #8
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	ffffefff 	.word	0xffffefff

080034a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2241      	movs	r2, #65	; 0x41
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d139      	bne.n	800352e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2240      	movs	r2, #64	; 0x40
 80034be:	5c9b      	ldrb	r3, [r3, r2]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e033      	b.n	8003530 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2240      	movs	r2, #64	; 0x40
 80034cc:	2101      	movs	r1, #1
 80034ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2241      	movs	r2, #65	; 0x41
 80034d4:	2124      	movs	r1, #36	; 0x24
 80034d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2101      	movs	r1, #1
 80034e4:	438a      	bics	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a11      	ldr	r2, [pc, #68]	; (8003538 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2241      	movs	r2, #65	; 0x41
 800351e:	2120      	movs	r1, #32
 8003520:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2240      	movs	r2, #64	; 0x40
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b004      	add	sp, #16
 8003536:	bd80      	pop	{r7, pc}
 8003538:	fffff0ff 	.word	0xfffff0ff

0800353c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f000 fb76 	bl	8003c3c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2201      	movs	r2, #1
 8003556:	4013      	ands	r3, r2
 8003558:	d100      	bne.n	800355c <HAL_RCC_OscConfig+0x20>
 800355a:	e08e      	b.n	800367a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800355c:	4bc5      	ldr	r3, [pc, #788]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	220c      	movs	r2, #12
 8003562:	4013      	ands	r3, r2
 8003564:	2b04      	cmp	r3, #4
 8003566:	d00e      	beq.n	8003586 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003568:	4bc2      	ldr	r3, [pc, #776]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	220c      	movs	r2, #12
 800356e:	4013      	ands	r3, r2
 8003570:	2b08      	cmp	r3, #8
 8003572:	d117      	bne.n	80035a4 <HAL_RCC_OscConfig+0x68>
 8003574:	4bbf      	ldr	r3, [pc, #764]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	23c0      	movs	r3, #192	; 0xc0
 800357a:	025b      	lsls	r3, r3, #9
 800357c:	401a      	ands	r2, r3
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	025b      	lsls	r3, r3, #9
 8003582:	429a      	cmp	r2, r3
 8003584:	d10e      	bne.n	80035a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003586:	4bbb      	ldr	r3, [pc, #748]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	029b      	lsls	r3, r3, #10
 800358e:	4013      	ands	r3, r2
 8003590:	d100      	bne.n	8003594 <HAL_RCC_OscConfig+0x58>
 8003592:	e071      	b.n	8003678 <HAL_RCC_OscConfig+0x13c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d000      	beq.n	800359e <HAL_RCC_OscConfig+0x62>
 800359c:	e06c      	b.n	8003678 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f000 fb4c 	bl	8003c3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x80>
 80035ac:	4bb1      	ldr	r3, [pc, #708]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4bb0      	ldr	r3, [pc, #704]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	0249      	lsls	r1, r1, #9
 80035b6:	430a      	orrs	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e02f      	b.n	800361c <HAL_RCC_OscConfig+0xe0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10c      	bne.n	80035de <HAL_RCC_OscConfig+0xa2>
 80035c4:	4bab      	ldr	r3, [pc, #684]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4baa      	ldr	r3, [pc, #680]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035ca:	49ab      	ldr	r1, [pc, #684]	; (8003878 <HAL_RCC_OscConfig+0x33c>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	4ba8      	ldr	r3, [pc, #672]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4ba7      	ldr	r3, [pc, #668]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035d6:	49a9      	ldr	r1, [pc, #676]	; (800387c <HAL_RCC_OscConfig+0x340>)
 80035d8:	400a      	ands	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e01e      	b.n	800361c <HAL_RCC_OscConfig+0xe0>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d10e      	bne.n	8003604 <HAL_RCC_OscConfig+0xc8>
 80035e6:	4ba3      	ldr	r3, [pc, #652]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4ba2      	ldr	r3, [pc, #648]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	02c9      	lsls	r1, r1, #11
 80035f0:	430a      	orrs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	4b9f      	ldr	r3, [pc, #636]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b9e      	ldr	r3, [pc, #632]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80035fa:	2180      	movs	r1, #128	; 0x80
 80035fc:	0249      	lsls	r1, r1, #9
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e00b      	b.n	800361c <HAL_RCC_OscConfig+0xe0>
 8003604:	4b9b      	ldr	r3, [pc, #620]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b9a      	ldr	r3, [pc, #616]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 800360a:	499b      	ldr	r1, [pc, #620]	; (8003878 <HAL_RCC_OscConfig+0x33c>)
 800360c:	400a      	ands	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4b98      	ldr	r3, [pc, #608]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b97      	ldr	r3, [pc, #604]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003616:	4999      	ldr	r1, [pc, #612]	; (800387c <HAL_RCC_OscConfig+0x340>)
 8003618:	400a      	ands	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d014      	beq.n	800364e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7ff f8dc 	bl	80027e0 <HAL_GetTick>
 8003628:	0003      	movs	r3, r0
 800362a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800362e:	f7ff f8d7 	bl	80027e0 <HAL_GetTick>
 8003632:	0002      	movs	r2, r0
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b64      	cmp	r3, #100	; 0x64
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e2fd      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003640:	4b8c      	ldr	r3, [pc, #560]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	029b      	lsls	r3, r3, #10
 8003648:	4013      	ands	r3, r2
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0xf2>
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7ff f8c7 	bl	80027e0 <HAL_GetTick>
 8003652:	0003      	movs	r3, r0
 8003654:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003658:	f7ff f8c2 	bl	80027e0 <HAL_GetTick>
 800365c:	0002      	movs	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e2e8      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b82      	ldr	r3, [pc, #520]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	029b      	lsls	r3, r3, #10
 8003672:	4013      	ands	r3, r2
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x11c>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2202      	movs	r2, #2
 8003680:	4013      	ands	r3, r2
 8003682:	d100      	bne.n	8003686 <HAL_RCC_OscConfig+0x14a>
 8003684:	e06c      	b.n	8003760 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003686:	4b7b      	ldr	r3, [pc, #492]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	220c      	movs	r2, #12
 800368c:	4013      	ands	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003690:	4b78      	ldr	r3, [pc, #480]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	220c      	movs	r2, #12
 8003696:	4013      	ands	r3, r2
 8003698:	2b08      	cmp	r3, #8
 800369a:	d11f      	bne.n	80036dc <HAL_RCC_OscConfig+0x1a0>
 800369c:	4b75      	ldr	r3, [pc, #468]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	23c0      	movs	r3, #192	; 0xc0
 80036a2:	025b      	lsls	r3, r3, #9
 80036a4:	401a      	ands	r2, r3
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d116      	bne.n	80036dc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	4b71      	ldr	r3, [pc, #452]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2202      	movs	r2, #2
 80036b4:	4013      	ands	r3, r2
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_OscConfig+0x188>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e2bb      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b6b      	ldr	r3, [pc, #428]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	22f8      	movs	r2, #248	; 0xf8
 80036ca:	4393      	bics	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00da      	lsls	r2, r3, #3
 80036d4:	4b67      	ldr	r3, [pc, #412]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	e041      	b.n	8003760 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d024      	beq.n	800372e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e4:	4b63      	ldr	r3, [pc, #396]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b62      	ldr	r3, [pc, #392]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80036ea:	2101      	movs	r1, #1
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7ff f876 	bl	80027e0 <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fa:	f7ff f871 	bl	80027e0 <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e297      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2202      	movs	r2, #2
 8003712:	4013      	ands	r3, r2
 8003714:	d0f1      	beq.n	80036fa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b57      	ldr	r3, [pc, #348]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	22f8      	movs	r2, #248	; 0xf8
 800371c:	4393      	bics	r3, r2
 800371e:	0019      	movs	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00da      	lsls	r2, r3, #3
 8003726:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e018      	b.n	8003760 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b51      	ldr	r3, [pc, #324]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b50      	ldr	r3, [pc, #320]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003734:	2101      	movs	r1, #1
 8003736:	438a      	bics	r2, r1
 8003738:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7ff f851 	bl	80027e0 <HAL_GetTick>
 800373e:	0003      	movs	r3, r0
 8003740:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003744:	f7ff f84c 	bl	80027e0 <HAL_GetTick>
 8003748:	0002      	movs	r2, r0
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e272      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2202      	movs	r2, #2
 800375c:	4013      	ands	r3, r2
 800375e:	d1f1      	bne.n	8003744 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2208      	movs	r2, #8
 8003766:	4013      	ands	r3, r2
 8003768:	d036      	beq.n	80037d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d019      	beq.n	80037a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b40      	ldr	r3, [pc, #256]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003776:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003778:	2101      	movs	r1, #1
 800377a:	430a      	orrs	r2, r1
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7ff f82f 	bl	80027e0 <HAL_GetTick>
 8003782:	0003      	movs	r3, r0
 8003784:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003788:	f7ff f82a 	bl	80027e0 <HAL_GetTick>
 800378c:	0002      	movs	r2, r0
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e250      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2202      	movs	r2, #2
 80037a0:	4013      	ands	r3, r2
 80037a2:	d0f1      	beq.n	8003788 <HAL_RCC_OscConfig+0x24c>
 80037a4:	e018      	b.n	80037d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a6:	4b33      	ldr	r3, [pc, #204]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80037a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037aa:	4b32      	ldr	r3, [pc, #200]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80037ac:	2101      	movs	r1, #1
 80037ae:	438a      	bics	r2, r1
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7ff f815 	bl	80027e0 <HAL_GetTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037bc:	f7ff f810 	bl	80027e0 <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e236      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2202      	movs	r2, #2
 80037d4:	4013      	ands	r3, r2
 80037d6:	d1f1      	bne.n	80037bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2204      	movs	r2, #4
 80037de:	4013      	ands	r3, r2
 80037e0:	d100      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2a8>
 80037e2:	e0b5      	b.n	8003950 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e4:	231f      	movs	r3, #31
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	055b      	lsls	r3, r3, #21
 80037f4:	4013      	ands	r3, r2
 80037f6:	d111      	bne.n	800381c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 80037fe:	2180      	movs	r1, #128	; 0x80
 8003800:	0549      	lsls	r1, r1, #21
 8003802:	430a      	orrs	r2, r1
 8003804:	61da      	str	r2, [r3, #28]
 8003806:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	055b      	lsls	r3, r3, #21
 800380e:	4013      	ands	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003814:	231f      	movs	r3, #31
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b18      	ldr	r3, [pc, #96]	; (8003880 <HAL_RCC_OscConfig+0x344>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4013      	ands	r3, r2
 8003826:	d11a      	bne.n	800385e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003828:	4b15      	ldr	r3, [pc, #84]	; (8003880 <HAL_RCC_OscConfig+0x344>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_RCC_OscConfig+0x344>)
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	0049      	lsls	r1, r1, #1
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fe ffd3 	bl	80027e0 <HAL_GetTick>
 800383a:	0003      	movs	r3, r0
 800383c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fe ffce 	bl	80027e0 <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e1f4      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_OscConfig+0x344>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4013      	ands	r3, r2
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d10e      	bne.n	8003884 <HAL_RCC_OscConfig+0x348>
 8003866:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	4b02      	ldr	r3, [pc, #8]	; (8003874 <HAL_RCC_OscConfig+0x338>)
 800386c:	2101      	movs	r1, #1
 800386e:	430a      	orrs	r2, r1
 8003870:	621a      	str	r2, [r3, #32]
 8003872:	e035      	b.n	80038e0 <HAL_RCC_OscConfig+0x3a4>
 8003874:	40021000 	.word	0x40021000
 8003878:	fffeffff 	.word	0xfffeffff
 800387c:	fffbffff 	.word	0xfffbffff
 8003880:	40007000 	.word	0x40007000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10c      	bne.n	80038a6 <HAL_RCC_OscConfig+0x36a>
 800388c:	4bca      	ldr	r3, [pc, #808]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 800388e:	6a1a      	ldr	r2, [r3, #32]
 8003890:	4bc9      	ldr	r3, [pc, #804]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003892:	2101      	movs	r1, #1
 8003894:	438a      	bics	r2, r1
 8003896:	621a      	str	r2, [r3, #32]
 8003898:	4bc7      	ldr	r3, [pc, #796]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 800389a:	6a1a      	ldr	r2, [r3, #32]
 800389c:	4bc6      	ldr	r3, [pc, #792]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 800389e:	2104      	movs	r1, #4
 80038a0:	438a      	bics	r2, r1
 80038a2:	621a      	str	r2, [r3, #32]
 80038a4:	e01c      	b.n	80038e0 <HAL_RCC_OscConfig+0x3a4>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x38c>
 80038ae:	4bc2      	ldr	r3, [pc, #776]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80038b0:	6a1a      	ldr	r2, [r3, #32]
 80038b2:	4bc1      	ldr	r3, [pc, #772]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80038b4:	2104      	movs	r1, #4
 80038b6:	430a      	orrs	r2, r1
 80038b8:	621a      	str	r2, [r3, #32]
 80038ba:	4bbf      	ldr	r3, [pc, #764]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	4bbe      	ldr	r3, [pc, #760]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80038c0:	2101      	movs	r1, #1
 80038c2:	430a      	orrs	r2, r1
 80038c4:	621a      	str	r2, [r3, #32]
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0x3a4>
 80038c8:	4bbb      	ldr	r3, [pc, #748]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80038ca:	6a1a      	ldr	r2, [r3, #32]
 80038cc:	4bba      	ldr	r3, [pc, #744]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	438a      	bics	r2, r1
 80038d2:	621a      	str	r2, [r3, #32]
 80038d4:	4bb8      	ldr	r3, [pc, #736]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80038d6:	6a1a      	ldr	r2, [r3, #32]
 80038d8:	4bb7      	ldr	r3, [pc, #732]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80038da:	2104      	movs	r1, #4
 80038dc:	438a      	bics	r2, r1
 80038de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d014      	beq.n	8003912 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e8:	f7fe ff7a 	bl	80027e0 <HAL_GetTick>
 80038ec:	0003      	movs	r3, r0
 80038ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f0:	e009      	b.n	8003906 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fe ff75 	bl	80027e0 <HAL_GetTick>
 80038f6:	0002      	movs	r2, r0
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	4aaf      	ldr	r2, [pc, #700]	; (8003bbc <HAL_RCC_OscConfig+0x680>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e19a      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003906:	4bac      	ldr	r3, [pc, #688]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	2202      	movs	r2, #2
 800390c:	4013      	ands	r3, r2
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x3b6>
 8003910:	e013      	b.n	800393a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003912:	f7fe ff65 	bl	80027e0 <HAL_GetTick>
 8003916:	0003      	movs	r3, r0
 8003918:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391a:	e009      	b.n	8003930 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7fe ff60 	bl	80027e0 <HAL_GetTick>
 8003920:	0002      	movs	r2, r0
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	4aa5      	ldr	r2, [pc, #660]	; (8003bbc <HAL_RCC_OscConfig+0x680>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e185      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003930:	4ba1      	ldr	r3, [pc, #644]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	2202      	movs	r2, #2
 8003936:	4013      	ands	r3, r2
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800393a:	231f      	movs	r3, #31
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003944:	4b9c      	ldr	r3, [pc, #624]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	4b9b      	ldr	r3, [pc, #620]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 800394a:	499d      	ldr	r1, [pc, #628]	; (8003bc0 <HAL_RCC_OscConfig+0x684>)
 800394c:	400a      	ands	r2, r1
 800394e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2210      	movs	r2, #16
 8003956:	4013      	ands	r3, r2
 8003958:	d063      	beq.n	8003a22 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d12a      	bne.n	80039b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003962:	4b95      	ldr	r3, [pc, #596]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003966:	4b94      	ldr	r3, [pc, #592]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003968:	2104      	movs	r1, #4
 800396a:	430a      	orrs	r2, r1
 800396c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800396e:	4b92      	ldr	r3, [pc, #584]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003972:	4b91      	ldr	r3, [pc, #580]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003974:	2101      	movs	r1, #1
 8003976:	430a      	orrs	r2, r1
 8003978:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397a:	f7fe ff31 	bl	80027e0 <HAL_GetTick>
 800397e:	0003      	movs	r3, r0
 8003980:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003984:	f7fe ff2c 	bl	80027e0 <HAL_GetTick>
 8003988:	0002      	movs	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e152      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003996:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399a:	2202      	movs	r2, #2
 800399c:	4013      	ands	r3, r2
 800399e:	d0f1      	beq.n	8003984 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039a0:	4b85      	ldr	r3, [pc, #532]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	22f8      	movs	r2, #248	; 0xf8
 80039a6:	4393      	bics	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	00da      	lsls	r2, r3, #3
 80039b0:	4b81      	ldr	r3, [pc, #516]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039b2:	430a      	orrs	r2, r1
 80039b4:	635a      	str	r2, [r3, #52]	; 0x34
 80039b6:	e034      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	3305      	adds	r3, #5
 80039be:	d111      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80039c0:	4b7d      	ldr	r3, [pc, #500]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c4:	4b7c      	ldr	r3, [pc, #496]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039c6:	2104      	movs	r1, #4
 80039c8:	438a      	bics	r2, r1
 80039ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039cc:	4b7a      	ldr	r3, [pc, #488]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d0:	22f8      	movs	r2, #248	; 0xf8
 80039d2:	4393      	bics	r3, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	00da      	lsls	r2, r3, #3
 80039dc:	4b76      	ldr	r3, [pc, #472]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039de:	430a      	orrs	r2, r1
 80039e0:	635a      	str	r2, [r3, #52]	; 0x34
 80039e2:	e01e      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80039e4:	4b74      	ldr	r3, [pc, #464]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e8:	4b73      	ldr	r3, [pc, #460]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039ea:	2104      	movs	r1, #4
 80039ec:	430a      	orrs	r2, r1
 80039ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80039f0:	4b71      	ldr	r3, [pc, #452]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f4:	4b70      	ldr	r3, [pc, #448]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 80039f6:	2101      	movs	r1, #1
 80039f8:	438a      	bics	r2, r1
 80039fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7fe fef0 	bl	80027e0 <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a06:	f7fe feeb 	bl	80027e0 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e111      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a18:	4b67      	ldr	r3, [pc, #412]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d1f1      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2220      	movs	r2, #32
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d05c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003a2c:	4b62      	ldr	r3, [pc, #392]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	220c      	movs	r2, #12
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d00e      	beq.n	8003a56 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003a38:	4b5f      	ldr	r3, [pc, #380]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	220c      	movs	r2, #12
 8003a3e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d114      	bne.n	8003a6e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003a44:	4b5c      	ldr	r3, [pc, #368]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	23c0      	movs	r3, #192	; 0xc0
 8003a4a:	025b      	lsls	r3, r3, #9
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	23c0      	movs	r3, #192	; 0xc0
 8003a50:	025b      	lsls	r3, r3, #9
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003a56:	4b58      	ldr	r3, [pc, #352]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	025b      	lsls	r3, r3, #9
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d040      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x5a8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d03c      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0e6      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01b      	beq.n	8003aae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a76:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7a:	4b4f      	ldr	r3, [pc, #316]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003a7c:	2180      	movs	r1, #128	; 0x80
 8003a7e:	0249      	lsls	r1, r1, #9
 8003a80:	430a      	orrs	r2, r1
 8003a82:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe feac 	bl	80027e0 <HAL_GetTick>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a8e:	f7fe fea7 	bl	80027e0 <HAL_GetTick>
 8003a92:	0002      	movs	r2, r0
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0cd      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003aa0:	4b45      	ldr	r3, [pc, #276]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	025b      	lsls	r3, r3, #9
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x552>
 8003aac:	e01b      	b.n	8003ae6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003aae:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab2:	4b41      	ldr	r3, [pc, #260]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003ab4:	4943      	ldr	r1, [pc, #268]	; (8003bc4 <HAL_RCC_OscConfig+0x688>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fe fe91 	bl	80027e0 <HAL_GetTick>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ac4:	f7fe fe8c 	bl	80027e0 <HAL_GetTick>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0b2      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003ad6:	4b38      	ldr	r3, [pc, #224]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	025b      	lsls	r3, r3, #9
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x588>
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003ae4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d100      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5b4>
 8003aee:	e0a4      	b.n	8003c3a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af0:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	220c      	movs	r2, #12
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d100      	bne.n	8003afe <HAL_RCC_OscConfig+0x5c2>
 8003afc:	e078      	b.n	8003bf0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d14c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b06:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b0c:	492e      	ldr	r1, [pc, #184]	; (8003bc8 <HAL_RCC_OscConfig+0x68c>)
 8003b0e:	400a      	ands	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe fe65 	bl	80027e0 <HAL_GetTick>
 8003b16:	0003      	movs	r3, r0
 8003b18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fe fe60 	bl	80027e0 <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e086      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	049b      	lsls	r3, r3, #18
 8003b36:	4013      	ands	r3, r2
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3a:	4b1f      	ldr	r3, [pc, #124]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	220f      	movs	r2, #15
 8003b40:	4393      	bics	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b48:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_RCC_OscConfig+0x690>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	431a      	orrs	r2, r3
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b68:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b6e:	2180      	movs	r1, #128	; 0x80
 8003b70:	0449      	lsls	r1, r1, #17
 8003b72:	430a      	orrs	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fe fe33 	bl	80027e0 <HAL_GetTick>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fe fe2e 	bl	80027e0 <HAL_GetTick>
 8003b84:	0002      	movs	r2, r0
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e054      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	049b      	lsls	r3, r3, #18
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x644>
 8003b9e:	e04c      	b.n	8003c3a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <HAL_RCC_OscConfig+0x67c>)
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <HAL_RCC_OscConfig+0x68c>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe fe18 	bl	80027e0 <HAL_GetTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb4:	e015      	b.n	8003be2 <HAL_RCC_OscConfig+0x6a6>
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	00001388 	.word	0x00001388
 8003bc0:	efffffff 	.word	0xefffffff
 8003bc4:	fffeffff 	.word	0xfffeffff
 8003bc8:	feffffff 	.word	0xfeffffff
 8003bcc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fe fe06 	bl	80027e0 <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e02c      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be2:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_RCC_OscConfig+0x708>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	049b      	lsls	r3, r3, #18
 8003bea:	4013      	ands	r3, r2
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x694>
 8003bee:	e024      	b.n	8003c3a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e01f      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <HAL_RCC_OscConfig+0x708>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_RCC_OscConfig+0x708>)
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	23c0      	movs	r3, #192	; 0xc0
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	401a      	ands	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d10e      	bne.n	8003c36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	220f      	movs	r2, #15
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	23f0      	movs	r3, #240	; 0xf0
 8003c2a:	039b      	lsls	r3, r3, #14
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d001      	beq.n	8003c3a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b008      	add	sp, #32
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000

08003c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0bf      	b.n	8003ddc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b61      	ldr	r3, [pc, #388]	; (8003de4 <HAL_RCC_ClockConfig+0x19c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2201      	movs	r2, #1
 8003c62:	4013      	ands	r3, r2
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d911      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b5e      	ldr	r3, [pc, #376]	; (8003de4 <HAL_RCC_ClockConfig+0x19c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	4393      	bics	r3, r2
 8003c72:	0019      	movs	r1, r3
 8003c74:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <HAL_RCC_ClockConfig+0x19c>)
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7c:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <HAL_RCC_ClockConfig+0x19c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2201      	movs	r2, #1
 8003c82:	4013      	ands	r3, r2
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0a6      	b.n	8003ddc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2202      	movs	r2, #2
 8003c94:	4013      	ands	r3, r2
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d006      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ca2:	4b51      	ldr	r3, [pc, #324]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003ca8:	21e0      	movs	r1, #224	; 0xe0
 8003caa:	00c9      	lsls	r1, r1, #3
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b4d      	ldr	r3, [pc, #308]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	22f0      	movs	r2, #240	; 0xf0
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	0019      	movs	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	4b4a      	ldr	r3, [pc, #296]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d04c      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	029b      	lsls	r3, r3, #10
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d120      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e07a      	b.n	8003ddc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cee:	4b3e      	ldr	r3, [pc, #248]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	049b      	lsls	r3, r3, #18
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d114      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e06e      	b.n	8003ddc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d06:	4b38      	ldr	r3, [pc, #224]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	025b      	lsls	r3, r3, #9
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d108      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e062      	b.n	8003ddc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d16:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e05b      	b.n	8003ddc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d24:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003d34:	430a      	orrs	r2, r1
 8003d36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d38:	f7fe fd52 	bl	80027e0 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d40:	e009      	b.n	8003d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d42:	f7fe fd4d 	bl	80027e0 <HAL_GetTick>
 8003d46:	0002      	movs	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	4a27      	ldr	r2, [pc, #156]	; (8003dec <HAL_RCC_ClockConfig+0x1a4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e042      	b.n	8003ddc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d56:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1ec      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCC_ClockConfig+0x19c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	4013      	ands	r3, r2
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d211      	bcs.n	8003d9a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCC_ClockConfig+0x19c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4393      	bics	r3, r2
 8003d7e:	0019      	movs	r1, r3
 8003d80:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <HAL_RCC_ClockConfig+0x19c>)
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_RCC_ClockConfig+0x19c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	4013      	ands	r3, r2
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e020      	b.n	8003ddc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	4013      	ands	r3, r2
 8003da2:	d009      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003da4:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <HAL_RCC_ClockConfig+0x1a8>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003db8:	f000 f820 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003dbc:	0001      	movs	r1, r0
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_RCC_ClockConfig+0x1a0>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_RCC_ClockConfig+0x1ac>)
 8003dca:	5cd3      	ldrb	r3, [r2, r3]
 8003dcc:	000a      	movs	r2, r1
 8003dce:	40da      	lsrs	r2, r3
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x1b0>)
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7fe fcbd 	bl	8002754 <HAL_InitTick>
  
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40022000 	.word	0x40022000
 8003de8:	40021000 	.word	0x40021000
 8003dec:	00001388 	.word	0x00001388
 8003df0:	fffff8ff 	.word	0xfffff8ff
 8003df4:	08007b04 	.word	0x08007b04
 8003df8:	20000004 	.word	0x20000004

08003dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b08f      	sub	sp, #60	; 0x3c
 8003e00:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003e02:	2314      	movs	r3, #20
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	4a37      	ldr	r2, [pc, #220]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8003e08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e0a:	c313      	stmia	r3!, {r0, r1, r4}
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003e10:	1d3b      	adds	r3, r7, #4
 8003e12:	4a35      	ldr	r2, [pc, #212]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xec>)
 8003e14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e16:	c313      	stmia	r3!, {r0, r1, r4}
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e20:	2300      	movs	r3, #0
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e24:	2300      	movs	r3, #0
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003e30:	4b2e      	ldr	r3, [pc, #184]	; (8003eec <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	220c      	movs	r2, #12
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d006      	beq.n	8003e4e <HAL_RCC_GetSysClockFreq+0x52>
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	d043      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0xd0>
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d144      	bne.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e4c:	e044      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	0c9b      	lsrs	r3, r3, #18
 8003e52:	220f      	movs	r2, #15
 8003e54:	4013      	ands	r3, r2
 8003e56:	2214      	movs	r2, #20
 8003e58:	18ba      	adds	r2, r7, r2
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003e5e:	4b23      	ldr	r3, [pc, #140]	; (8003eec <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	220f      	movs	r2, #15
 8003e64:	4013      	ands	r3, r2
 8003e66:	1d3a      	adds	r2, r7, #4
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6e:	23c0      	movs	r3, #192	; 0xc0
 8003e70:	025b      	lsls	r3, r3, #9
 8003e72:	401a      	ands	r2, r3
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	025b      	lsls	r3, r3, #9
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d109      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7e:	481c      	ldr	r0, [pc, #112]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e80:	f7fc f954 	bl	800012c <__udivsi3>
 8003e84:	0003      	movs	r3, r0
 8003e86:	001a      	movs	r2, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	4353      	muls	r3, r2
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8e:	e01a      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e92:	23c0      	movs	r3, #192	; 0xc0
 8003e94:	025b      	lsls	r3, r3, #9
 8003e96:	401a      	ands	r2, r3
 8003e98:	23c0      	movs	r3, #192	; 0xc0
 8003e9a:	025b      	lsls	r3, r3, #9
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d109      	bne.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ea2:	4814      	ldr	r0, [pc, #80]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ea4:	f7fc f942 	bl	800012c <__udivsi3>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	001a      	movs	r2, r3
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	4353      	muls	r3, r2
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb6:	480e      	ldr	r0, [pc, #56]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003eb8:	f7fc f938 	bl	800012c <__udivsi3>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	4353      	muls	r3, r2
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003eca:	e005      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ece:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ed6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b00f      	add	sp, #60	; 0x3c
 8003ee0:	bd90      	pop	{r4, r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	08007a64 	.word	0x08007a64
 8003ee8:	08007a74 	.word	0x08007a74
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	007a1200 	.word	0x007a1200
 8003ef4:	02dc6c00 	.word	0x02dc6c00

08003ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003efc:	4b02      	ldr	r3, [pc, #8]	; (8003f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	20000004 	.word	0x20000004

08003f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003f10:	f7ff fff2 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f14:	0001      	movs	r1, r0
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	4013      	ands	r3, r2
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	40d9      	lsrs	r1, r3
 8003f26:	000b      	movs	r3, r1
}    
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08007b14 	.word	0x08007b14

08003f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	025b      	lsls	r3, r3, #9
 8003f50:	4013      	ands	r3, r2
 8003f52:	d100      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003f54:	e08f      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003f56:	2317      	movs	r3, #23
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b6f      	ldr	r3, [pc, #444]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	055b      	lsls	r3, r3, #21
 8003f66:	4013      	ands	r3, r2
 8003f68:	d111      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4b6c      	ldr	r3, [pc, #432]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	4b6b      	ldr	r3, [pc, #428]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	0549      	lsls	r1, r1, #21
 8003f74:	430a      	orrs	r2, r1
 8003f76:	61da      	str	r2, [r3, #28]
 8003f78:	4b68      	ldr	r3, [pc, #416]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	055b      	lsls	r3, r3, #21
 8003f80:	4013      	ands	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2317      	movs	r3, #23
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8e:	4b64      	ldr	r3, [pc, #400]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4013      	ands	r3, r2
 8003f98:	d11a      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9a:	4b61      	ldr	r3, [pc, #388]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b60      	ldr	r3, [pc, #384]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	0049      	lsls	r1, r1, #1
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa8:	f7fe fc1a 	bl	80027e0 <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fe fc15 	bl	80027e0 <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	; 0x64
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0a6      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b56      	ldr	r3, [pc, #344]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd0:	4b52      	ldr	r3, [pc, #328]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	23c0      	movs	r3, #192	; 0xc0
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d034      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	23c0      	movs	r3, #192	; 0xc0
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4013      	ands	r3, r2
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d02c      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a4b      	ldr	r2, [pc, #300]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ffc:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	4b46      	ldr	r3, [pc, #280]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	0249      	lsls	r1, r1, #9
 8004006:	430a      	orrs	r2, r1
 8004008:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800400a:	4b44      	ldr	r3, [pc, #272]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	4b43      	ldr	r3, [pc, #268]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004010:	4945      	ldr	r1, [pc, #276]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004012:	400a      	ands	r2, r1
 8004014:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004016:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	4013      	ands	r3, r2
 8004022:	d013      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fe fbdc 	bl	80027e0 <HAL_GetTick>
 8004028:	0003      	movs	r3, r0
 800402a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402c:	e009      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fe fbd7 	bl	80027e0 <HAL_GetTick>
 8004032:	0002      	movs	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	4a3c      	ldr	r2, [pc, #240]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e067      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	2202      	movs	r2, #2
 8004048:	4013      	ands	r3, r2
 800404a:	d0f0      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800404c:	4b33      	ldr	r3, [pc, #204]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4a34      	ldr	r2, [pc, #208]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004052:	4013      	ands	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4b30      	ldr	r3, [pc, #192]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800405c:	430a      	orrs	r2, r1
 800405e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004060:	2317      	movs	r3, #23
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d105      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406a:	4b2c      	ldr	r3, [pc, #176]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	4b2b      	ldr	r3, [pc, #172]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004070:	492f      	ldr	r1, [pc, #188]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004072:	400a      	ands	r2, r1
 8004074:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2201      	movs	r2, #1
 800407c:	4013      	ands	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	2203      	movs	r2, #3
 8004086:	4393      	bics	r3, r2
 8004088:	0019      	movs	r1, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	4b23      	ldr	r3, [pc, #140]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004090:	430a      	orrs	r2, r1
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2202      	movs	r2, #2
 800409a:	4013      	ands	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800409e:	4b1f      	ldr	r3, [pc, #124]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4a24      	ldr	r2, [pc, #144]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	0019      	movs	r1, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040ae:	430a      	orrs	r2, r1
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2220      	movs	r2, #32
 80040b8:	4013      	ands	r3, r2
 80040ba:	d009      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040bc:	4b17      	ldr	r3, [pc, #92]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	2210      	movs	r2, #16
 80040c2:	4393      	bics	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	4b14      	ldr	r3, [pc, #80]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040cc:	430a      	orrs	r2, r1
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	4013      	ands	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	2280      	movs	r2, #128	; 0x80
 80040e2:	4393      	bics	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040ec:	430a      	orrs	r2, r1
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4013      	ands	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	2240      	movs	r2, #64	; 0x40
 8004102:	4393      	bics	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	4b04      	ldr	r3, [pc, #16]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800410c:	430a      	orrs	r2, r1
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	0018      	movs	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	b006      	add	sp, #24
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	40021000 	.word	0x40021000
 8004120:	40007000 	.word	0x40007000
 8004124:	fffffcff 	.word	0xfffffcff
 8004128:	fffeffff 	.word	0xfffeffff
 800412c:	00001388 	.word	0x00001388
 8004130:	efffffff 	.word	0xefffffff
 8004134:	fffcffff 	.word	0xfffcffff

08004138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e044      	b.n	80041d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414e:	2b00      	cmp	r3, #0
 8004150:	d107      	bne.n	8004162 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2274      	movs	r2, #116	; 0x74
 8004156:	2100      	movs	r1, #0
 8004158:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0018      	movs	r0, r3
 800415e:	f7fe f9a1 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2224      	movs	r2, #36	; 0x24
 8004166:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2101      	movs	r1, #1
 8004174:	438a      	bics	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	0018      	movs	r0, r3
 800417c:	f000 fafe 	bl	800477c <UART_SetConfig>
 8004180:	0003      	movs	r3, r0
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e024      	b.n	80041d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0018      	movs	r0, r3
 8004196:	f000 fc75 	bl	8004a84 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	490d      	ldr	r1, [pc, #52]	; (80041dc <HAL_UART_Init+0xa4>)
 80041a6:	400a      	ands	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	212a      	movs	r1, #42	; 0x2a
 80041b6:	438a      	bics	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2101      	movs	r1, #1
 80041c6:	430a      	orrs	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 fd0d 	bl	8004bec <UART_CheckIdleState>
 80041d2:	0003      	movs	r3, r0
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	ffffb7ff 	.word	0xffffb7ff

080041e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	1dbb      	adds	r3, r7, #6
 80041ee:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d000      	beq.n	80041fa <HAL_UART_Transmit+0x1a>
 80041f8:	e096      	b.n	8004328 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_UART_Transmit+0x28>
 8004200:	1dbb      	adds	r3, r7, #6
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e08e      	b.n	800432a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	015b      	lsls	r3, r3, #5
 8004214:	429a      	cmp	r2, r3
 8004216:	d109      	bne.n	800422c <HAL_UART_Transmit+0x4c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2201      	movs	r2, #1
 8004224:	4013      	ands	r3, r2
 8004226:	d001      	beq.n	800422c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e07e      	b.n	800432a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2274      	movs	r2, #116	; 0x74
 8004230:	5c9b      	ldrb	r3, [r3, r2]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_UART_Transmit+0x5a>
 8004236:	2302      	movs	r3, #2
 8004238:	e077      	b.n	800432a <HAL_UART_Transmit+0x14a>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2274      	movs	r2, #116	; 0x74
 800423e:	2101      	movs	r1, #1
 8004240:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2280      	movs	r2, #128	; 0x80
 8004246:	2100      	movs	r1, #0
 8004248:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2221      	movs	r2, #33	; 0x21
 800424e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004250:	f7fe fac6 	bl	80027e0 <HAL_GetTick>
 8004254:	0003      	movs	r3, r0
 8004256:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1dba      	adds	r2, r7, #6
 800425c:	2150      	movs	r1, #80	; 0x50
 800425e:	8812      	ldrh	r2, [r2, #0]
 8004260:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1dba      	adds	r2, r7, #6
 8004266:	2152      	movs	r1, #82	; 0x52
 8004268:	8812      	ldrh	r2, [r2, #0]
 800426a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	015b      	lsls	r3, r3, #5
 8004274:	429a      	cmp	r2, r3
 8004276:	d108      	bne.n	800428a <HAL_UART_Transmit+0xaa>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e003      	b.n	8004292 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2274      	movs	r2, #116	; 0x74
 8004296:	2100      	movs	r1, #0
 8004298:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800429a:	e02d      	b.n	80042f8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	0013      	movs	r3, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	f000 fce9 	bl	8004c80 <UART_WaitOnFlagUntilTimeout>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e039      	b.n	800432a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10b      	bne.n	80042d4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	881a      	ldrh	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	05d2      	lsls	r2, r2, #23
 80042c6:	0dd2      	lsrs	r2, r2, #23
 80042c8:	b292      	uxth	r2, r2
 80042ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	3302      	adds	r3, #2
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	e008      	b.n	80042e6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	781a      	ldrb	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	b292      	uxth	r2, r2
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	3301      	adds	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2252      	movs	r2, #82	; 0x52
 80042ea:	5a9b      	ldrh	r3, [r3, r2]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b299      	uxth	r1, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2252      	movs	r2, #82	; 0x52
 80042f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2252      	movs	r2, #82	; 0x52
 80042fc:	5a9b      	ldrh	r3, [r3, r2]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1cb      	bne.n	800429c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	0013      	movs	r3, r2
 800430e:	2200      	movs	r2, #0
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	f000 fcb5 	bl	8004c80 <UART_WaitOnFlagUntilTimeout>
 8004316:	1e03      	subs	r3, r0, #0
 8004318:	d001      	beq.n	800431e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e005      	b.n	800432a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b008      	add	sp, #32
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4ab5      	ldr	r2, [pc, #724]	; (800462c <HAL_UART_IRQHandler+0x2f8>)
 8004358:	4013      	ands	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d112      	bne.n	8004388 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2220      	movs	r2, #32
 8004366:	4013      	ands	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2220      	movs	r2, #32
 800436e:	4013      	ands	r3, r2
 8004370:	d00a      	beq.n	8004388 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004376:	2b00      	cmp	r3, #0
 8004378:	d100      	bne.n	800437c <HAL_UART_IRQHandler+0x48>
 800437a:	e1d4      	b.n	8004726 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	0010      	movs	r0, r2
 8004384:	4798      	blx	r3
      }
      return;
 8004386:	e1ce      	b.n	8004726 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d100      	bne.n	8004390 <HAL_UART_IRQHandler+0x5c>
 800438e:	e0d9      	b.n	8004544 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2201      	movs	r2, #1
 8004394:	4013      	ands	r3, r2
 8004396:	d104      	bne.n	80043a2 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	4aa5      	ldr	r2, [pc, #660]	; (8004630 <HAL_UART_IRQHandler+0x2fc>)
 800439c:	4013      	ands	r3, r2
 800439e:	d100      	bne.n	80043a2 <HAL_UART_IRQHandler+0x6e>
 80043a0:	e0d0      	b.n	8004544 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	2201      	movs	r2, #1
 80043a6:	4013      	ands	r3, r2
 80043a8:	d010      	beq.n	80043cc <HAL_UART_IRQHandler+0x98>
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d00b      	beq.n	80043cc <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2201      	movs	r2, #1
 80043ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2280      	movs	r2, #128	; 0x80
 80043c0:	589b      	ldr	r3, [r3, r2]
 80043c2:	2201      	movs	r2, #1
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2202      	movs	r2, #2
 80043d0:	4013      	ands	r3, r2
 80043d2:	d00f      	beq.n	80043f4 <HAL_UART_IRQHandler+0xc0>
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2201      	movs	r2, #1
 80043d8:	4013      	ands	r3, r2
 80043da:	d00b      	beq.n	80043f4 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2202      	movs	r2, #2
 80043e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2280      	movs	r2, #128	; 0x80
 80043e8:	589b      	ldr	r3, [r3, r2]
 80043ea:	2204      	movs	r2, #4
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2204      	movs	r2, #4
 80043f8:	4013      	ands	r3, r2
 80043fa:	d00f      	beq.n	800441c <HAL_UART_IRQHandler+0xe8>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2201      	movs	r2, #1
 8004400:	4013      	ands	r3, r2
 8004402:	d00b      	beq.n	800441c <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2204      	movs	r2, #4
 800440a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	589b      	ldr	r3, [r3, r2]
 8004412:	2202      	movs	r2, #2
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2208      	movs	r2, #8
 8004420:	4013      	ands	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2220      	movs	r2, #32
 8004428:	4013      	ands	r3, r2
 800442a:	d103      	bne.n	8004434 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2201      	movs	r2, #1
 8004430:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004432:	d00b      	beq.n	800444c <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2208      	movs	r2, #8
 800443a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	589b      	ldr	r3, [r3, r2]
 8004442:	2208      	movs	r2, #8
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2180      	movs	r1, #128	; 0x80
 800444a:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	4013      	ands	r3, r2
 8004454:	d011      	beq.n	800447a <HAL_UART_IRQHandler+0x146>
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	04db      	lsls	r3, r3, #19
 800445c:	4013      	ands	r3, r2
 800445e:	d00c      	beq.n	800447a <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2280      	movs	r2, #128	; 0x80
 8004466:	0112      	lsls	r2, r2, #4
 8004468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2280      	movs	r2, #128	; 0x80
 800446e:	589b      	ldr	r3, [r3, r2]
 8004470:	2220      	movs	r2, #32
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2180      	movs	r1, #128	; 0x80
 8004478:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2280      	movs	r2, #128	; 0x80
 800447e:	589b      	ldr	r3, [r3, r2]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d100      	bne.n	8004486 <HAL_UART_IRQHandler+0x152>
 8004484:	e151      	b.n	800472a <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	2220      	movs	r2, #32
 800448a:	4013      	ands	r3, r2
 800448c:	d00c      	beq.n	80044a8 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2220      	movs	r2, #32
 8004492:	4013      	ands	r3, r2
 8004494:	d008      	beq.n	80044a8 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	0010      	movs	r0, r2
 80044a6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2280      	movs	r2, #128	; 0x80
 80044ac:	589b      	ldr	r3, [r3, r2]
 80044ae:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2240      	movs	r2, #64	; 0x40
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	d003      	beq.n	80044c6 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2228      	movs	r2, #40	; 0x28
 80044c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044c4:	d033      	beq.n	800452e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 fc57 	bl	8004d7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2240      	movs	r2, #64	; 0x40
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d123      	bne.n	8004524 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2140      	movs	r1, #64	; 0x40
 80044e8:	438a      	bics	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d012      	beq.n	800451a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a4e      	ldr	r2, [pc, #312]	; (8004634 <HAL_UART_IRQHandler+0x300>)
 80044fa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	0018      	movs	r0, r3
 8004502:	f7fe faaf 	bl	8002a64 <HAL_DMA_Abort_IT>
 8004506:	1e03      	subs	r3, r0, #0
 8004508:	d01a      	beq.n	8004540 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	0018      	movs	r0, r3
 8004516:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	e012      	b.n	8004540 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0018      	movs	r0, r3
 800451e:	f000 f919 	bl	8004754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004522:	e00d      	b.n	8004540 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f000 f914 	bl	8004754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452c:	e008      	b.n	8004540 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f90f 	bl	8004754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	2100      	movs	r1, #0
 800453c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800453e:	e0f4      	b.n	800472a <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	46c0      	nop			; (mov r8, r8)
    return;
 8004542:	e0f2      	b.n	800472a <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004548:	2b01      	cmp	r3, #1
 800454a:	d000      	beq.n	800454e <HAL_UART_IRQHandler+0x21a>
 800454c:	e0b7      	b.n	80046be <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2210      	movs	r2, #16
 8004552:	4013      	ands	r3, r2
 8004554:	d100      	bne.n	8004558 <HAL_UART_IRQHandler+0x224>
 8004556:	e0b2      	b.n	80046be <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2210      	movs	r2, #16
 800455c:	4013      	ands	r3, r2
 800455e:	d100      	bne.n	8004562 <HAL_UART_IRQHandler+0x22e>
 8004560:	e0ad      	b.n	80046be <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2210      	movs	r2, #16
 8004568:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2240      	movs	r2, #64	; 0x40
 8004572:	4013      	ands	r3, r2
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d161      	bne.n	800463c <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	2108      	movs	r1, #8
 8004582:	187b      	adds	r3, r7, r1
 8004584:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8004586:	187b      	adds	r3, r7, r1
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d100      	bne.n	8004590 <HAL_UART_IRQHandler+0x25c>
 800458e:	e0ce      	b.n	800472e <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2258      	movs	r2, #88	; 0x58
 8004594:	5a9b      	ldrh	r3, [r3, r2]
 8004596:	2208      	movs	r2, #8
 8004598:	18ba      	adds	r2, r7, r2
 800459a:	8812      	ldrh	r2, [r2, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d300      	bcc.n	80045a2 <HAL_UART_IRQHandler+0x26e>
 80045a0:	e0c5      	b.n	800472e <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2208      	movs	r2, #8
 80045a6:	18ba      	adds	r2, r7, r2
 80045a8:	215a      	movs	r1, #90	; 0x5a
 80045aa:	8812      	ldrh	r2, [r2, #0]
 80045ac:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d02a      	beq.n	800460e <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	491d      	ldr	r1, [pc, #116]	; (8004638 <HAL_UART_IRQHandler+0x304>)
 80045c4:	400a      	ands	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2101      	movs	r1, #1
 80045d4:	438a      	bics	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2140      	movs	r1, #64	; 0x40
 80045e4:	438a      	bics	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2110      	movs	r1, #16
 8004600:	438a      	bics	r2, r1
 8004602:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	0018      	movs	r0, r3
 800460a:	f7fe f9f3 	bl	80029f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2258      	movs	r2, #88	; 0x58
 8004612:	5a9a      	ldrh	r2, [r3, r2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	215a      	movs	r1, #90	; 0x5a
 8004618:	5a5b      	ldrh	r3, [r3, r1]
 800461a:	b29b      	uxth	r3, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	b29a      	uxth	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	0011      	movs	r1, r2
 8004624:	0018      	movs	r0, r3
 8004626:	f000 f89d 	bl	8004764 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800462a:	e080      	b.n	800472e <HAL_UART_IRQHandler+0x3fa>
 800462c:	0000080f 	.word	0x0000080f
 8004630:	04000120 	.word	0x04000120
 8004634:	08004ddd 	.word	0x08004ddd
 8004638:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2258      	movs	r2, #88	; 0x58
 8004640:	5a99      	ldrh	r1, [r3, r2]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	225a      	movs	r2, #90	; 0x5a
 8004646:	5a9b      	ldrh	r3, [r3, r2]
 8004648:	b29a      	uxth	r2, r3
 800464a:	230a      	movs	r3, #10
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	1a8a      	subs	r2, r1, r2
 8004650:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	225a      	movs	r2, #90	; 0x5a
 8004656:	5a9b      	ldrh	r3, [r3, r2]
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d100      	bne.n	8004660 <HAL_UART_IRQHandler+0x32c>
 800465e:	e068      	b.n	8004732 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 8004660:	230a      	movs	r3, #10
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d063      	beq.n	8004732 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4932      	ldr	r1, [pc, #200]	; (8004740 <HAL_UART_IRQHandler+0x40c>)
 8004676:	400a      	ands	r2, r1
 8004678:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2101      	movs	r1, #1
 8004686:	438a      	bics	r2, r1
 8004688:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2110      	movs	r1, #16
 80046a8:	438a      	bics	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046ac:	230a      	movs	r3, #10
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	881a      	ldrh	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0011      	movs	r1, r2
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 f854 	bl	8004764 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046bc:	e039      	b.n	8004732 <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	035b      	lsls	r3, r3, #13
 80046c4:	4013      	ands	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_UART_IRQHandler+0x3b2>
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	03db      	lsls	r3, r3, #15
 80046ce:	4013      	ands	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	0352      	lsls	r2, r2, #13
 80046da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fbad 	bl	8004e3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046e4:	e028      	b.n	8004738 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2280      	movs	r2, #128	; 0x80
 80046ea:	4013      	ands	r3, r2
 80046ec:	d00d      	beq.n	800470a <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2280      	movs	r2, #128	; 0x80
 80046f2:	4013      	ands	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01b      	beq.n	8004736 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	0010      	movs	r0, r2
 8004706:	4798      	blx	r3
    }
    return;
 8004708:	e015      	b.n	8004736 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2240      	movs	r2, #64	; 0x40
 800470e:	4013      	ands	r3, r2
 8004710:	d012      	beq.n	8004738 <HAL_UART_IRQHandler+0x404>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2240      	movs	r2, #64	; 0x40
 8004716:	4013      	ands	r3, r2
 8004718:	d00e      	beq.n	8004738 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	0018      	movs	r0, r3
 800471e:	f000 fb74 	bl	8004e0a <UART_EndTransmit_IT>
    return;
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	e008      	b.n	8004738 <HAL_UART_IRQHandler+0x404>
      return;
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	e006      	b.n	8004738 <HAL_UART_IRQHandler+0x404>
    return;
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	e004      	b.n	8004738 <HAL_UART_IRQHandler+0x404>
      return;
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	e002      	b.n	8004738 <HAL_UART_IRQHandler+0x404>
      return;
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	e000      	b.n	8004738 <HAL_UART_IRQHandler+0x404>
    return;
 8004736:	46c0      	nop			; (mov r8, r8)
  }

}
 8004738:	46bd      	mov	sp, r7
 800473a:	b008      	add	sp, #32
 800473c:	bd80      	pop	{r7, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	fffffedf 	.word	0xfffffedf

08004744 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b002      	add	sp, #8
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	b002      	add	sp, #8
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	000a      	movs	r2, r1
 800476e:	1cbb      	adds	r3, r7, #2
 8004770:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	46bd      	mov	sp, r7
 8004776:	b002      	add	sp, #8
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004784:	231e      	movs	r3, #30
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4aac      	ldr	r2, [pc, #688]	; (8004a5c <UART_SetConfig+0x2e0>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	0019      	movs	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4aa7      	ldr	r2, [pc, #668]	; (8004a60 <UART_SetConfig+0x2e4>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	0019      	movs	r1, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a9e      	ldr	r2, [pc, #632]	; (8004a64 <UART_SetConfig+0x2e8>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	0019      	movs	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a9a      	ldr	r2, [pc, #616]	; (8004a68 <UART_SetConfig+0x2ec>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d125      	bne.n	800484e <UART_SetConfig+0xd2>
 8004802:	4b9a      	ldr	r3, [pc, #616]	; (8004a6c <UART_SetConfig+0x2f0>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	2203      	movs	r2, #3
 8004808:	4013      	ands	r3, r2
 800480a:	2b01      	cmp	r3, #1
 800480c:	d00f      	beq.n	800482e <UART_SetConfig+0xb2>
 800480e:	d304      	bcc.n	800481a <UART_SetConfig+0x9e>
 8004810:	2b02      	cmp	r3, #2
 8004812:	d011      	beq.n	8004838 <UART_SetConfig+0xbc>
 8004814:	2b03      	cmp	r3, #3
 8004816:	d005      	beq.n	8004824 <UART_SetConfig+0xa8>
 8004818:	e013      	b.n	8004842 <UART_SetConfig+0xc6>
 800481a:	231f      	movs	r3, #31
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e064      	b.n	80048ee <UART_SetConfig+0x172>
 8004824:	231f      	movs	r3, #31
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	2202      	movs	r2, #2
 800482a:	701a      	strb	r2, [r3, #0]
 800482c:	e05f      	b.n	80048ee <UART_SetConfig+0x172>
 800482e:	231f      	movs	r3, #31
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	2204      	movs	r2, #4
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e05a      	b.n	80048ee <UART_SetConfig+0x172>
 8004838:	231f      	movs	r3, #31
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2208      	movs	r2, #8
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	e055      	b.n	80048ee <UART_SetConfig+0x172>
 8004842:	231f      	movs	r3, #31
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	2210      	movs	r2, #16
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	e04f      	b.n	80048ee <UART_SetConfig+0x172>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a87      	ldr	r2, [pc, #540]	; (8004a70 <UART_SetConfig+0x2f4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d132      	bne.n	80048be <UART_SetConfig+0x142>
 8004858:	4b84      	ldr	r3, [pc, #528]	; (8004a6c <UART_SetConfig+0x2f0>)
 800485a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485c:	23c0      	movs	r3, #192	; 0xc0
 800485e:	029b      	lsls	r3, r3, #10
 8004860:	4013      	ands	r3, r2
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	0252      	lsls	r2, r2, #9
 8004866:	4293      	cmp	r3, r2
 8004868:	d019      	beq.n	800489e <UART_SetConfig+0x122>
 800486a:	2280      	movs	r2, #128	; 0x80
 800486c:	0252      	lsls	r2, r2, #9
 800486e:	4293      	cmp	r3, r2
 8004870:	d802      	bhi.n	8004878 <UART_SetConfig+0xfc>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <UART_SetConfig+0x10e>
 8004876:	e01c      	b.n	80048b2 <UART_SetConfig+0x136>
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	0292      	lsls	r2, r2, #10
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <UART_SetConfig+0x12c>
 8004880:	22c0      	movs	r2, #192	; 0xc0
 8004882:	0292      	lsls	r2, r2, #10
 8004884:	4293      	cmp	r3, r2
 8004886:	d005      	beq.n	8004894 <UART_SetConfig+0x118>
 8004888:	e013      	b.n	80048b2 <UART_SetConfig+0x136>
 800488a:	231f      	movs	r3, #31
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e02c      	b.n	80048ee <UART_SetConfig+0x172>
 8004894:	231f      	movs	r3, #31
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	2202      	movs	r2, #2
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e027      	b.n	80048ee <UART_SetConfig+0x172>
 800489e:	231f      	movs	r3, #31
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2204      	movs	r2, #4
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e022      	b.n	80048ee <UART_SetConfig+0x172>
 80048a8:	231f      	movs	r3, #31
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	2208      	movs	r2, #8
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	e01d      	b.n	80048ee <UART_SetConfig+0x172>
 80048b2:	231f      	movs	r3, #31
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	2210      	movs	r2, #16
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	e017      	b.n	80048ee <UART_SetConfig+0x172>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6c      	ldr	r2, [pc, #432]	; (8004a74 <UART_SetConfig+0x2f8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d104      	bne.n	80048d2 <UART_SetConfig+0x156>
 80048c8:	231f      	movs	r3, #31
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	e00d      	b.n	80048ee <UART_SetConfig+0x172>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a68      	ldr	r2, [pc, #416]	; (8004a78 <UART_SetConfig+0x2fc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d104      	bne.n	80048e6 <UART_SetConfig+0x16a>
 80048dc:	231f      	movs	r3, #31
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e003      	b.n	80048ee <UART_SetConfig+0x172>
 80048e6:	231f      	movs	r3, #31
 80048e8:	18fb      	adds	r3, r7, r3
 80048ea:	2210      	movs	r2, #16
 80048ec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d15c      	bne.n	80049b4 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 80048fa:	231f      	movs	r3, #31
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d00d      	beq.n	8004920 <UART_SetConfig+0x1a4>
 8004904:	dc02      	bgt.n	800490c <UART_SetConfig+0x190>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <UART_SetConfig+0x19a>
 800490a:	e015      	b.n	8004938 <UART_SetConfig+0x1bc>
 800490c:	2b04      	cmp	r3, #4
 800490e:	d00a      	beq.n	8004926 <UART_SetConfig+0x1aa>
 8004910:	2b08      	cmp	r3, #8
 8004912:	d00d      	beq.n	8004930 <UART_SetConfig+0x1b4>
 8004914:	e010      	b.n	8004938 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004916:	f7ff faf9 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 800491a:	0003      	movs	r3, r0
 800491c:	61bb      	str	r3, [r7, #24]
        break;
 800491e:	e012      	b.n	8004946 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <UART_SetConfig+0x300>)
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e00f      	b.n	8004946 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7ff fa69 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 800492a:	0003      	movs	r3, r0
 800492c:	61bb      	str	r3, [r7, #24]
        break;
 800492e:	e00a      	b.n	8004946 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	61bb      	str	r3, [r7, #24]
        break;
 8004936:	e006      	b.n	8004946 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800493c:	231e      	movs	r3, #30
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
        break;
 8004944:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d100      	bne.n	800494e <UART_SetConfig+0x1d2>
 800494c:	e079      	b.n	8004a42 <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	005a      	lsls	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	18d2      	adds	r2, r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	0019      	movs	r1, r3
 8004960:	0010      	movs	r0, r2
 8004962:	f7fb fbe3 	bl	800012c <__udivsi3>
 8004966:	0003      	movs	r3, r0
 8004968:	b29b      	uxth	r3, r3
 800496a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d91b      	bls.n	80049aa <UART_SetConfig+0x22e>
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4a42      	ldr	r2, [pc, #264]	; (8004a80 <UART_SetConfig+0x304>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d817      	bhi.n	80049aa <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	b29a      	uxth	r2, r3
 800497e:	200e      	movs	r0, #14
 8004980:	183b      	adds	r3, r7, r0
 8004982:	210f      	movs	r1, #15
 8004984:	438a      	bics	r2, r1
 8004986:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	b29b      	uxth	r3, r3
 800498e:	2207      	movs	r2, #7
 8004990:	4013      	ands	r3, r2
 8004992:	b299      	uxth	r1, r3
 8004994:	183b      	adds	r3, r7, r0
 8004996:	183a      	adds	r2, r7, r0
 8004998:	8812      	ldrh	r2, [r2, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	183a      	adds	r2, r7, r0
 80049a4:	8812      	ldrh	r2, [r2, #0]
 80049a6:	60da      	str	r2, [r3, #12]
 80049a8:	e04b      	b.n	8004a42 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 80049aa:	231e      	movs	r3, #30
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e046      	b.n	8004a42 <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049b4:	231f      	movs	r3, #31
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d00d      	beq.n	80049da <UART_SetConfig+0x25e>
 80049be:	dc02      	bgt.n	80049c6 <UART_SetConfig+0x24a>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <UART_SetConfig+0x254>
 80049c4:	e015      	b.n	80049f2 <UART_SetConfig+0x276>
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d00a      	beq.n	80049e0 <UART_SetConfig+0x264>
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d00d      	beq.n	80049ea <UART_SetConfig+0x26e>
 80049ce:	e010      	b.n	80049f2 <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7ff fa9c 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 80049d4:	0003      	movs	r3, r0
 80049d6:	61bb      	str	r3, [r7, #24]
        break;
 80049d8:	e012      	b.n	8004a00 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049da:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <UART_SetConfig+0x300>)
 80049dc:	61bb      	str	r3, [r7, #24]
        break;
 80049de:	e00f      	b.n	8004a00 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e0:	f7ff fa0c 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 80049e4:	0003      	movs	r3, r0
 80049e6:	61bb      	str	r3, [r7, #24]
        break;
 80049e8:	e00a      	b.n	8004a00 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	61bb      	str	r3, [r7, #24]
        break;
 80049f0:	e006      	b.n	8004a00 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049f6:	231e      	movs	r3, #30
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
        break;
 80049fe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01d      	beq.n	8004a42 <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	085a      	lsrs	r2, r3, #1
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	18d2      	adds	r2, r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	0019      	movs	r1, r3
 8004a16:	0010      	movs	r0, r2
 8004a18:	f7fb fb88 	bl	800012c <__udivsi3>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b0f      	cmp	r3, #15
 8004a26:	d908      	bls.n	8004a3a <UART_SetConfig+0x2be>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <UART_SetConfig+0x304>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d804      	bhi.n	8004a3a <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	60da      	str	r2, [r3, #12]
 8004a38:	e003      	b.n	8004a42 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8004a3a:	231e      	movs	r3, #30
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a4e:	231e      	movs	r3, #30
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	781b      	ldrb	r3, [r3, #0]
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b008      	add	sp, #32
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	efff69f3 	.word	0xefff69f3
 8004a60:	ffffcfff 	.word	0xffffcfff
 8004a64:	fffff4ff 	.word	0xfffff4ff
 8004a68:	40013800 	.word	0x40013800
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40004400 	.word	0x40004400
 8004a74:	40004800 	.word	0x40004800
 8004a78:	40004c00 	.word	0x40004c00
 8004a7c:	007a1200 	.word	0x007a1200
 8004a80:	0000ffff 	.word	0x0000ffff

08004a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2201      	movs	r2, #1
 8004a92:	4013      	ands	r3, r2
 8004a94:	d00b      	beq.n	8004aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4a4a      	ldr	r2, [pc, #296]	; (8004bc8 <UART_AdvFeatureConfig+0x144>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d00b      	beq.n	8004ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	4a43      	ldr	r2, [pc, #268]	; (8004bcc <UART_AdvFeatureConfig+0x148>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a3b      	ldr	r2, [pc, #236]	; (8004bd0 <UART_AdvFeatureConfig+0x14c>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2208      	movs	r2, #8
 8004af8:	4013      	ands	r3, r2
 8004afa:	d00b      	beq.n	8004b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4a34      	ldr	r2, [pc, #208]	; (8004bd4 <UART_AdvFeatureConfig+0x150>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	0019      	movs	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	2210      	movs	r2, #16
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4a2c      	ldr	r2, [pc, #176]	; (8004bd8 <UART_AdvFeatureConfig+0x154>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	0019      	movs	r1, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d00b      	beq.n	8004b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <UART_AdvFeatureConfig+0x158>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2240      	movs	r2, #64	; 0x40
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d01d      	beq.n	8004b9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4a1d      	ldr	r2, [pc, #116]	; (8004be0 <UART_AdvFeatureConfig+0x15c>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	035b      	lsls	r3, r3, #13
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d10b      	bne.n	8004b9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <UART_AdvFeatureConfig+0x160>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	0019      	movs	r1, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2280      	movs	r2, #128	; 0x80
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4a0e      	ldr	r2, [pc, #56]	; (8004be8 <UART_AdvFeatureConfig+0x164>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b002      	add	sp, #8
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	fffdffff 	.word	0xfffdffff
 8004bcc:	fffeffff 	.word	0xfffeffff
 8004bd0:	fffbffff 	.word	0xfffbffff
 8004bd4:	ffff7fff 	.word	0xffff7fff
 8004bd8:	ffffefff 	.word	0xffffefff
 8004bdc:	ffffdfff 	.word	0xffffdfff
 8004be0:	ffefffff 	.word	0xffefffff
 8004be4:	ff9fffff 	.word	0xff9fffff
 8004be8:	fff7ffff 	.word	0xfff7ffff

08004bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bfc:	f7fd fdf0 	bl	80027e0 <HAL_GetTick>
 8004c00:	0003      	movs	r3, r0
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d10d      	bne.n	8004c2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	0399      	lsls	r1, r3, #14
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <UART_CheckIdleState+0x90>)
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	0013      	movs	r3, r2
 8004c20:	2200      	movs	r2, #0
 8004c22:	f000 f82d 	bl	8004c80 <UART_WaitOnFlagUntilTimeout>
 8004c26:	1e03      	subs	r3, r0, #0
 8004c28:	d001      	beq.n	8004c2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e022      	b.n	8004c74 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2204      	movs	r2, #4
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d10d      	bne.n	8004c58 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	03d9      	lsls	r1, r3, #15
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <UART_CheckIdleState+0x90>)
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	0013      	movs	r3, r2
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f000 f818 	bl	8004c80 <UART_WaitOnFlagUntilTimeout>
 8004c50:	1e03      	subs	r3, r0, #0
 8004c52:	d001      	beq.n	8004c58 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e00d      	b.n	8004c74 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2274      	movs	r2, #116	; 0x74
 8004c6e:	2100      	movs	r1, #0
 8004c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	0018      	movs	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b004      	add	sp, #16
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	01ffffff 	.word	0x01ffffff

08004c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	1dfb      	adds	r3, r7, #7
 8004c8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c90:	e05e      	b.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3301      	adds	r3, #1
 8004c96:	d05b      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c98:	f7fd fda2 	bl	80027e0 <HAL_GetTick>
 8004c9c:	0002      	movs	r2, r0
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d302      	bcc.n	8004cae <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d11b      	bne.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	492f      	ldr	r1, [pc, #188]	; (8004d78 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004cba:	400a      	ands	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2101      	movs	r1, #1
 8004cca:	438a      	bics	r2, r1
 8004ccc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2274      	movs	r2, #116	; 0x74
 8004cde:	2100      	movs	r1, #0
 8004ce0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e044      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2204      	movs	r2, #4
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d02e      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	401a      	ands	r2, r3
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d124      	bne.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2280      	movs	r2, #128	; 0x80
 8004d0c:	0112      	lsls	r2, r2, #4
 8004d0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4917      	ldr	r1, [pc, #92]	; (8004d78 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	2120      	movs	r1, #32
 8004d42:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2274      	movs	r2, #116	; 0x74
 8004d48:	2100      	movs	r1, #0
 8004d4a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e00f      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	425a      	negs	r2, r3
 8004d60:	4153      	adcs	r3, r2
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	001a      	movs	r2, r3
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d091      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b004      	add	sp, #16
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	fffffe5f 	.word	0xfffffe5f

08004d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4912      	ldr	r1, [pc, #72]	; (8004dd8 <UART_EndRxTransfer+0x5c>)
 8004d90:	400a      	ands	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2101      	movs	r1, #1
 8004da0:	438a      	bics	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d107      	bne.n	8004dbc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2110      	movs	r1, #16
 8004db8:	438a      	bics	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b002      	add	sp, #8
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	fffffedf 	.word	0xfffffedf

08004ddc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	225a      	movs	r2, #90	; 0x5a
 8004dee:	2100      	movs	r1, #0
 8004df0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2252      	movs	r2, #82	; 0x52
 8004df6:	2100      	movs	r1, #0
 8004df8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7ff fca9 	bl	8004754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b004      	add	sp, #16
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2140      	movs	r1, #64	; 0x40
 8004e1e:	438a      	bics	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	0018      	movs	r0, r3
 8004e32:	f7ff fc87 	bl	8004744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b002      	add	sp, #8
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b002      	add	sp, #8
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <__errno>:
 8004e50:	4b01      	ldr	r3, [pc, #4]	; (8004e58 <__errno+0x8>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	4770      	bx	lr
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	20000010 	.word	0x20000010

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	2600      	movs	r6, #0
 8004e60:	4d0c      	ldr	r5, [pc, #48]	; (8004e94 <__libc_init_array+0x38>)
 8004e62:	4c0d      	ldr	r4, [pc, #52]	; (8004e98 <__libc_init_array+0x3c>)
 8004e64:	1b64      	subs	r4, r4, r5
 8004e66:	10a4      	asrs	r4, r4, #2
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	f002 fde3 	bl	8007a38 <_init>
 8004e72:	4d0a      	ldr	r5, [pc, #40]	; (8004e9c <__libc_init_array+0x40>)
 8004e74:	4c0a      	ldr	r4, [pc, #40]	; (8004ea0 <__libc_init_array+0x44>)
 8004e76:	1b64      	subs	r4, r4, r5
 8004e78:	10a4      	asrs	r4, r4, #2
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	00b3      	lsls	r3, r6, #2
 8004e82:	58eb      	ldr	r3, [r5, r3]
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	00b3      	lsls	r3, r6, #2
 8004e8c:	58eb      	ldr	r3, [r5, r3]
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	08007de0 	.word	0x08007de0
 8004e98:	08007de0 	.word	0x08007de0
 8004e9c:	08007de0 	.word	0x08007de0
 8004ea0:	08007de4 	.word	0x08007de4

08004ea4 <memset>:
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	1812      	adds	r2, r2, r0
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d100      	bne.n	8004eae <memset+0xa>
 8004eac:	4770      	bx	lr
 8004eae:	7019      	strb	r1, [r3, #0]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	e7f9      	b.n	8004ea8 <memset+0x4>

08004eb4 <__cvt>:
 8004eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb6:	b08b      	sub	sp, #44	; 0x2c
 8004eb8:	0014      	movs	r4, r2
 8004eba:	1e1d      	subs	r5, r3, #0
 8004ebc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004ebe:	da53      	bge.n	8004f68 <__cvt+0xb4>
 8004ec0:	2480      	movs	r4, #128	; 0x80
 8004ec2:	0624      	lsls	r4, r4, #24
 8004ec4:	191b      	adds	r3, r3, r4
 8004ec6:	001d      	movs	r5, r3
 8004ec8:	0014      	movs	r4, r2
 8004eca:	232d      	movs	r3, #45	; 0x2d
 8004ecc:	700b      	strb	r3, [r1, #0]
 8004ece:	2320      	movs	r3, #32
 8004ed0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	439e      	bics	r6, r3
 8004ed6:	2e46      	cmp	r6, #70	; 0x46
 8004ed8:	d007      	beq.n	8004eea <__cvt+0x36>
 8004eda:	0033      	movs	r3, r6
 8004edc:	3b45      	subs	r3, #69	; 0x45
 8004ede:	4259      	negs	r1, r3
 8004ee0:	414b      	adcs	r3, r1
 8004ee2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004ee4:	3a01      	subs	r2, #1
 8004ee6:	18cb      	adds	r3, r1, r3
 8004ee8:	9310      	str	r3, [sp, #64]	; 0x40
 8004eea:	ab09      	add	r3, sp, #36	; 0x24
 8004eec:	9304      	str	r3, [sp, #16]
 8004eee:	ab08      	add	r3, sp, #32
 8004ef0:	9303      	str	r3, [sp, #12]
 8004ef2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ef4:	9200      	str	r2, [sp, #0]
 8004ef6:	9302      	str	r3, [sp, #8]
 8004ef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004efa:	0022      	movs	r2, r4
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	002b      	movs	r3, r5
 8004f00:	f000 fe2c 	bl	8005b5c <_dtoa_r>
 8004f04:	0007      	movs	r7, r0
 8004f06:	2e47      	cmp	r6, #71	; 0x47
 8004f08:	d102      	bne.n	8004f10 <__cvt+0x5c>
 8004f0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f0c:	07db      	lsls	r3, r3, #31
 8004f0e:	d524      	bpl.n	8004f5a <__cvt+0xa6>
 8004f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	2e46      	cmp	r6, #70	; 0x46
 8004f18:	d114      	bne.n	8004f44 <__cvt+0x90>
 8004f1a:	783b      	ldrb	r3, [r7, #0]
 8004f1c:	2b30      	cmp	r3, #48	; 0x30
 8004f1e:	d10c      	bne.n	8004f3a <__cvt+0x86>
 8004f20:	2200      	movs	r2, #0
 8004f22:	2300      	movs	r3, #0
 8004f24:	0020      	movs	r0, r4
 8004f26:	0029      	movs	r1, r5
 8004f28:	f7fb fa86 	bl	8000438 <__aeabi_dcmpeq>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d104      	bne.n	8004f3a <__cvt+0x86>
 8004f30:	2301      	movs	r3, #1
 8004f32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f3c:	9a07      	ldr	r2, [sp, #28]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	18d3      	adds	r3, r2, r3
 8004f42:	9307      	str	r3, [sp, #28]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2300      	movs	r3, #0
 8004f48:	0020      	movs	r0, r4
 8004f4a:	0029      	movs	r1, r5
 8004f4c:	f7fb fa74 	bl	8000438 <__aeabi_dcmpeq>
 8004f50:	2230      	movs	r2, #48	; 0x30
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d00d      	beq.n	8004f72 <__cvt+0xbe>
 8004f56:	9b07      	ldr	r3, [sp, #28]
 8004f58:	9309      	str	r3, [sp, #36]	; 0x24
 8004f5a:	0038      	movs	r0, r7
 8004f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f60:	1bdb      	subs	r3, r3, r7
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	b00b      	add	sp, #44	; 0x2c
 8004f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e7af      	b.n	8004ecc <__cvt+0x18>
 8004f6c:	1c59      	adds	r1, r3, #1
 8004f6e:	9109      	str	r1, [sp, #36]	; 0x24
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f74:	9907      	ldr	r1, [sp, #28]
 8004f76:	428b      	cmp	r3, r1
 8004f78:	d3f8      	bcc.n	8004f6c <__cvt+0xb8>
 8004f7a:	e7ee      	b.n	8004f5a <__cvt+0xa6>

08004f7c <__exponent>:
 8004f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7e:	1c83      	adds	r3, r0, #2
 8004f80:	b085      	sub	sp, #20
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	0006      	movs	r6, r0
 8004f86:	000c      	movs	r4, r1
 8004f88:	7002      	strb	r2, [r0, #0]
 8004f8a:	232b      	movs	r3, #43	; 0x2b
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	da01      	bge.n	8004f94 <__exponent+0x18>
 8004f90:	232d      	movs	r3, #45	; 0x2d
 8004f92:	424c      	negs	r4, r1
 8004f94:	7073      	strb	r3, [r6, #1]
 8004f96:	2c09      	cmp	r4, #9
 8004f98:	dd22      	ble.n	8004fe0 <__exponent+0x64>
 8004f9a:	ab02      	add	r3, sp, #8
 8004f9c:	1ddd      	adds	r5, r3, #7
 8004f9e:	0020      	movs	r0, r4
 8004fa0:	210a      	movs	r1, #10
 8004fa2:	f7fb fa33 	bl	800040c <__aeabi_idivmod>
 8004fa6:	1e6f      	subs	r7, r5, #1
 8004fa8:	3130      	adds	r1, #48	; 0x30
 8004faa:	7039      	strb	r1, [r7, #0]
 8004fac:	0020      	movs	r0, r4
 8004fae:	210a      	movs	r1, #10
 8004fb0:	f7fb f946 	bl	8000240 <__divsi3>
 8004fb4:	0004      	movs	r4, r0
 8004fb6:	2809      	cmp	r0, #9
 8004fb8:	dc0b      	bgt.n	8004fd2 <__exponent+0x56>
 8004fba:	3d02      	subs	r5, #2
 8004fbc:	3430      	adds	r4, #48	; 0x30
 8004fbe:	9b01      	ldr	r3, [sp, #4]
 8004fc0:	702c      	strb	r4, [r5, #0]
 8004fc2:	aa02      	add	r2, sp, #8
 8004fc4:	3207      	adds	r2, #7
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	42aa      	cmp	r2, r5
 8004fca:	d804      	bhi.n	8004fd6 <__exponent+0x5a>
 8004fcc:	1b80      	subs	r0, r0, r6
 8004fce:	b005      	add	sp, #20
 8004fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd2:	003d      	movs	r5, r7
 8004fd4:	e7e3      	b.n	8004f9e <__exponent+0x22>
 8004fd6:	782a      	ldrb	r2, [r5, #0]
 8004fd8:	3501      	adds	r5, #1
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	e7f0      	b.n	8004fc2 <__exponent+0x46>
 8004fe0:	2330      	movs	r3, #48	; 0x30
 8004fe2:	18e4      	adds	r4, r4, r3
 8004fe4:	70b3      	strb	r3, [r6, #2]
 8004fe6:	1d30      	adds	r0, r6, #4
 8004fe8:	70f4      	strb	r4, [r6, #3]
 8004fea:	e7ef      	b.n	8004fcc <__exponent+0x50>

08004fec <_printf_float>:
 8004fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fee:	b095      	sub	sp, #84	; 0x54
 8004ff0:	000c      	movs	r4, r1
 8004ff2:	920a      	str	r2, [sp, #40]	; 0x28
 8004ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ff6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004ff8:	9009      	str	r0, [sp, #36]	; 0x24
 8004ffa:	f001 fd1b 	bl	8006a34 <_localeconv_r>
 8004ffe:	6803      	ldr	r3, [r0, #0]
 8005000:	0018      	movs	r0, r3
 8005002:	930c      	str	r3, [sp, #48]	; 0x30
 8005004:	f7fb f880 	bl	8000108 <strlen>
 8005008:	2300      	movs	r3, #0
 800500a:	9312      	str	r3, [sp, #72]	; 0x48
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	900e      	str	r0, [sp, #56]	; 0x38
 8005010:	930d      	str	r3, [sp, #52]	; 0x34
 8005012:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005014:	7e27      	ldrb	r7, [r4, #24]
 8005016:	682b      	ldr	r3, [r5, #0]
 8005018:	2207      	movs	r2, #7
 800501a:	05c9      	lsls	r1, r1, #23
 800501c:	d545      	bpl.n	80050aa <_printf_float+0xbe>
 800501e:	189b      	adds	r3, r3, r2
 8005020:	4393      	bics	r3, r2
 8005022:	001a      	movs	r2, r3
 8005024:	3208      	adds	r2, #8
 8005026:	602a      	str	r2, [r5, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	64a2      	str	r2, [r4, #72]	; 0x48
 800502e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005030:	2201      	movs	r2, #1
 8005032:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005034:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8005036:	006b      	lsls	r3, r5, #1
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	930f      	str	r3, [sp, #60]	; 0x3c
 800503c:	4252      	negs	r2, r2
 800503e:	4bac      	ldr	r3, [pc, #688]	; (80052f0 <_printf_float+0x304>)
 8005040:	0030      	movs	r0, r6
 8005042:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005044:	f7fc ff06 	bl	8001e54 <__aeabi_dcmpun>
 8005048:	2800      	cmp	r0, #0
 800504a:	d130      	bne.n	80050ae <_printf_float+0xc2>
 800504c:	2201      	movs	r2, #1
 800504e:	4ba8      	ldr	r3, [pc, #672]	; (80052f0 <_printf_float+0x304>)
 8005050:	4252      	negs	r2, r2
 8005052:	0030      	movs	r0, r6
 8005054:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005056:	f7fb f9ff 	bl	8000458 <__aeabi_dcmple>
 800505a:	2800      	cmp	r0, #0
 800505c:	d127      	bne.n	80050ae <_printf_float+0xc2>
 800505e:	2200      	movs	r2, #0
 8005060:	2300      	movs	r3, #0
 8005062:	0030      	movs	r0, r6
 8005064:	0029      	movs	r1, r5
 8005066:	f7fb f9ed 	bl	8000444 <__aeabi_dcmplt>
 800506a:	2800      	cmp	r0, #0
 800506c:	d003      	beq.n	8005076 <_printf_float+0x8a>
 800506e:	0023      	movs	r3, r4
 8005070:	222d      	movs	r2, #45	; 0x2d
 8005072:	3343      	adds	r3, #67	; 0x43
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	4d9f      	ldr	r5, [pc, #636]	; (80052f4 <_printf_float+0x308>)
 8005078:	2f47      	cmp	r7, #71	; 0x47
 800507a:	d800      	bhi.n	800507e <_printf_float+0x92>
 800507c:	4d9e      	ldr	r5, [pc, #632]	; (80052f8 <_printf_float+0x30c>)
 800507e:	2303      	movs	r3, #3
 8005080:	2600      	movs	r6, #0
 8005082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	3301      	adds	r3, #1
 8005088:	439a      	bics	r2, r3
 800508a:	6022      	str	r2, [r4, #0]
 800508c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800508e:	aa13      	add	r2, sp, #76	; 0x4c
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	0021      	movs	r1, r4
 8005094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005096:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005098:	f000 f9f4 	bl	8005484 <_printf_common>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d000      	beq.n	80050a2 <_printf_float+0xb6>
 80050a0:	e093      	b.n	80051ca <_printf_float+0x1de>
 80050a2:	2001      	movs	r0, #1
 80050a4:	4240      	negs	r0, r0
 80050a6:	b015      	add	sp, #84	; 0x54
 80050a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050aa:	3307      	adds	r3, #7
 80050ac:	e7b8      	b.n	8005020 <_printf_float+0x34>
 80050ae:	0032      	movs	r2, r6
 80050b0:	002b      	movs	r3, r5
 80050b2:	0030      	movs	r0, r6
 80050b4:	0029      	movs	r1, r5
 80050b6:	f7fc fecd 	bl	8001e54 <__aeabi_dcmpun>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d004      	beq.n	80050c8 <_printf_float+0xdc>
 80050be:	4d8f      	ldr	r5, [pc, #572]	; (80052fc <_printf_float+0x310>)
 80050c0:	2f47      	cmp	r7, #71	; 0x47
 80050c2:	d8dc      	bhi.n	800507e <_printf_float+0x92>
 80050c4:	4d8e      	ldr	r5, [pc, #568]	; (8005300 <_printf_float+0x314>)
 80050c6:	e7da      	b.n	800507e <_printf_float+0x92>
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050cc:	6862      	ldr	r2, [r4, #4]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	430b      	orrs	r3, r1
 80050d2:	1c51      	adds	r1, r2, #1
 80050d4:	d143      	bne.n	800515e <_printf_float+0x172>
 80050d6:	3207      	adds	r2, #7
 80050d8:	6062      	str	r2, [r4, #4]
 80050da:	aa12      	add	r2, sp, #72	; 0x48
 80050dc:	2100      	movs	r1, #0
 80050de:	9205      	str	r2, [sp, #20]
 80050e0:	aa11      	add	r2, sp, #68	; 0x44
 80050e2:	9203      	str	r2, [sp, #12]
 80050e4:	2223      	movs	r2, #35	; 0x23
 80050e6:	6023      	str	r3, [r4, #0]
 80050e8:	9106      	str	r1, [sp, #24]
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	a908      	add	r1, sp, #32
 80050ee:	6863      	ldr	r3, [r4, #4]
 80050f0:	1852      	adds	r2, r2, r1
 80050f2:	9202      	str	r2, [sp, #8]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	0032      	movs	r2, r6
 80050f8:	002b      	movs	r3, r5
 80050fa:	9704      	str	r7, [sp, #16]
 80050fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050fe:	f7ff fed9 	bl	8004eb4 <__cvt>
 8005102:	2320      	movs	r3, #32
 8005104:	003a      	movs	r2, r7
 8005106:	0005      	movs	r5, r0
 8005108:	439a      	bics	r2, r3
 800510a:	2a47      	cmp	r2, #71	; 0x47
 800510c:	d107      	bne.n	800511e <_printf_float+0x132>
 800510e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005110:	1cda      	adds	r2, r3, #3
 8005112:	db02      	blt.n	800511a <_printf_float+0x12e>
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	4293      	cmp	r3, r2
 8005118:	dd45      	ble.n	80051a6 <_printf_float+0x1ba>
 800511a:	3f02      	subs	r7, #2
 800511c:	b2ff      	uxtb	r7, r7
 800511e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005120:	2f65      	cmp	r7, #101	; 0x65
 8005122:	d825      	bhi.n	8005170 <_printf_float+0x184>
 8005124:	0020      	movs	r0, r4
 8005126:	3901      	subs	r1, #1
 8005128:	003a      	movs	r2, r7
 800512a:	3050      	adds	r0, #80	; 0x50
 800512c:	9111      	str	r1, [sp, #68]	; 0x44
 800512e:	f7ff ff25 	bl	8004f7c <__exponent>
 8005132:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005134:	0006      	movs	r6, r0
 8005136:	1813      	adds	r3, r2, r0
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	2a01      	cmp	r2, #1
 800513c:	dc02      	bgt.n	8005144 <_printf_float+0x158>
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	07d2      	lsls	r2, r2, #31
 8005142:	d501      	bpl.n	8005148 <_printf_float+0x15c>
 8005144:	3301      	adds	r3, #1
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	2323      	movs	r3, #35	; 0x23
 800514a:	aa08      	add	r2, sp, #32
 800514c:	189b      	adds	r3, r3, r2
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d09b      	beq.n	800508c <_printf_float+0xa0>
 8005154:	0023      	movs	r3, r4
 8005156:	222d      	movs	r2, #45	; 0x2d
 8005158:	3343      	adds	r3, #67	; 0x43
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e796      	b.n	800508c <_printf_float+0xa0>
 800515e:	2f67      	cmp	r7, #103	; 0x67
 8005160:	d100      	bne.n	8005164 <_printf_float+0x178>
 8005162:	e176      	b.n	8005452 <_printf_float+0x466>
 8005164:	2f47      	cmp	r7, #71	; 0x47
 8005166:	d1b8      	bne.n	80050da <_printf_float+0xee>
 8005168:	2a00      	cmp	r2, #0
 800516a:	d1b6      	bne.n	80050da <_printf_float+0xee>
 800516c:	2201      	movs	r2, #1
 800516e:	e7b3      	b.n	80050d8 <_printf_float+0xec>
 8005170:	2f66      	cmp	r7, #102	; 0x66
 8005172:	d119      	bne.n	80051a8 <_printf_float+0x1bc>
 8005174:	6863      	ldr	r3, [r4, #4]
 8005176:	2900      	cmp	r1, #0
 8005178:	dd0c      	ble.n	8005194 <_printf_float+0x1a8>
 800517a:	6121      	str	r1, [r4, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <_printf_float+0x19a>
 8005180:	6822      	ldr	r2, [r4, #0]
 8005182:	07d2      	lsls	r2, r2, #31
 8005184:	d502      	bpl.n	800518c <_printf_float+0x1a0>
 8005186:	3301      	adds	r3, #1
 8005188:	185b      	adds	r3, r3, r1
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800518e:	2600      	movs	r6, #0
 8005190:	65a3      	str	r3, [r4, #88]	; 0x58
 8005192:	e7d9      	b.n	8005148 <_printf_float+0x15c>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d103      	bne.n	80051a0 <_printf_float+0x1b4>
 8005198:	2201      	movs	r2, #1
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	4211      	tst	r1, r2
 800519e:	d000      	beq.n	80051a2 <_printf_float+0x1b6>
 80051a0:	1c9a      	adds	r2, r3, #2
 80051a2:	6122      	str	r2, [r4, #16]
 80051a4:	e7f2      	b.n	800518c <_printf_float+0x1a0>
 80051a6:	2767      	movs	r7, #103	; 0x67
 80051a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051ac:	4293      	cmp	r3, r2
 80051ae:	db05      	blt.n	80051bc <_printf_float+0x1d0>
 80051b0:	6822      	ldr	r2, [r4, #0]
 80051b2:	6123      	str	r3, [r4, #16]
 80051b4:	07d2      	lsls	r2, r2, #31
 80051b6:	d5e9      	bpl.n	800518c <_printf_float+0x1a0>
 80051b8:	3301      	adds	r3, #1
 80051ba:	e7e6      	b.n	800518a <_printf_float+0x19e>
 80051bc:	2101      	movs	r1, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	dc01      	bgt.n	80051c6 <_printf_float+0x1da>
 80051c2:	1849      	adds	r1, r1, r1
 80051c4:	1ac9      	subs	r1, r1, r3
 80051c6:	1852      	adds	r2, r2, r1
 80051c8:	e7eb      	b.n	80051a2 <_printf_float+0x1b6>
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	0553      	lsls	r3, r2, #21
 80051ce:	d408      	bmi.n	80051e2 <_printf_float+0x1f6>
 80051d0:	6923      	ldr	r3, [r4, #16]
 80051d2:	002a      	movs	r2, r5
 80051d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80051da:	47a8      	blx	r5
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d129      	bne.n	8005234 <_printf_float+0x248>
 80051e0:	e75f      	b.n	80050a2 <_printf_float+0xb6>
 80051e2:	2f65      	cmp	r7, #101	; 0x65
 80051e4:	d800      	bhi.n	80051e8 <_printf_float+0x1fc>
 80051e6:	e0e0      	b.n	80053aa <_printf_float+0x3be>
 80051e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80051ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80051ec:	2200      	movs	r2, #0
 80051ee:	2300      	movs	r3, #0
 80051f0:	f7fb f922 	bl	8000438 <__aeabi_dcmpeq>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d034      	beq.n	8005262 <_printf_float+0x276>
 80051f8:	2301      	movs	r3, #1
 80051fa:	4a42      	ldr	r2, [pc, #264]	; (8005304 <_printf_float+0x318>)
 80051fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005200:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005202:	47a8      	blx	r5
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d100      	bne.n	800520a <_printf_float+0x21e>
 8005208:	e74b      	b.n	80050a2 <_printf_float+0xb6>
 800520a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800520c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800520e:	4293      	cmp	r3, r2
 8005210:	db02      	blt.n	8005218 <_printf_float+0x22c>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	07db      	lsls	r3, r3, #31
 8005216:	d50d      	bpl.n	8005234 <_printf_float+0x248>
 8005218:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800521a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800521c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800521e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005222:	47a8      	blx	r5
 8005224:	2500      	movs	r5, #0
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d100      	bne.n	800522c <_printf_float+0x240>
 800522a:	e73a      	b.n	80050a2 <_printf_float+0xb6>
 800522c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800522e:	3b01      	subs	r3, #1
 8005230:	42ab      	cmp	r3, r5
 8005232:	dc0a      	bgt.n	800524a <_printf_float+0x25e>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	079b      	lsls	r3, r3, #30
 8005238:	d500      	bpl.n	800523c <_printf_float+0x250>
 800523a:	e108      	b.n	800544e <_printf_float+0x462>
 800523c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800523e:	68e0      	ldr	r0, [r4, #12]
 8005240:	4298      	cmp	r0, r3
 8005242:	db00      	blt.n	8005246 <_printf_float+0x25a>
 8005244:	e72f      	b.n	80050a6 <_printf_float+0xba>
 8005246:	0018      	movs	r0, r3
 8005248:	e72d      	b.n	80050a6 <_printf_float+0xba>
 800524a:	0022      	movs	r2, r4
 800524c:	2301      	movs	r3, #1
 800524e:	321a      	adds	r2, #26
 8005250:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005252:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005254:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005256:	47b0      	blx	r6
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d100      	bne.n	800525e <_printf_float+0x272>
 800525c:	e721      	b.n	80050a2 <_printf_float+0xb6>
 800525e:	3501      	adds	r5, #1
 8005260:	e7e4      	b.n	800522c <_printf_float+0x240>
 8005262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005264:	2b00      	cmp	r3, #0
 8005266:	dc2d      	bgt.n	80052c4 <_printf_float+0x2d8>
 8005268:	2301      	movs	r3, #1
 800526a:	4a26      	ldr	r2, [pc, #152]	; (8005304 <_printf_float+0x318>)
 800526c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800526e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005270:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005272:	47b0      	blx	r6
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d100      	bne.n	800527a <_printf_float+0x28e>
 8005278:	e713      	b.n	80050a2 <_printf_float+0xb6>
 800527a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <_printf_float+0x2a0>
 8005280:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <_printf_float+0x2a0>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	07db      	lsls	r3, r3, #31
 800528a:	d5d3      	bpl.n	8005234 <_printf_float+0x248>
 800528c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800528e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005292:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005296:	47b0      	blx	r6
 8005298:	2600      	movs	r6, #0
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	d100      	bne.n	80052a0 <_printf_float+0x2b4>
 800529e:	e700      	b.n	80050a2 <_printf_float+0xb6>
 80052a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052a2:	425b      	negs	r3, r3
 80052a4:	42b3      	cmp	r3, r6
 80052a6:	dc01      	bgt.n	80052ac <_printf_float+0x2c0>
 80052a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052aa:	e792      	b.n	80051d2 <_printf_float+0x1e6>
 80052ac:	0022      	movs	r2, r4
 80052ae:	2301      	movs	r3, #1
 80052b0:	321a      	adds	r2, #26
 80052b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052b6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80052b8:	47b8      	blx	r7
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d100      	bne.n	80052c0 <_printf_float+0x2d4>
 80052be:	e6f0      	b.n	80050a2 <_printf_float+0xb6>
 80052c0:	3601      	adds	r6, #1
 80052c2:	e7ed      	b.n	80052a0 <_printf_float+0x2b4>
 80052c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052c6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80052c8:	429f      	cmp	r7, r3
 80052ca:	dd00      	ble.n	80052ce <_printf_float+0x2e2>
 80052cc:	001f      	movs	r7, r3
 80052ce:	2f00      	cmp	r7, #0
 80052d0:	dd08      	ble.n	80052e4 <_printf_float+0x2f8>
 80052d2:	003b      	movs	r3, r7
 80052d4:	002a      	movs	r2, r5
 80052d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80052dc:	47b0      	blx	r6
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	d100      	bne.n	80052e4 <_printf_float+0x2f8>
 80052e2:	e6de      	b.n	80050a2 <_printf_float+0xb6>
 80052e4:	2300      	movs	r3, #0
 80052e6:	930d      	str	r3, [sp, #52]	; 0x34
 80052e8:	43fb      	mvns	r3, r7
 80052ea:	17db      	asrs	r3, r3, #31
 80052ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80052ee:	e018      	b.n	8005322 <_printf_float+0x336>
 80052f0:	7fefffff 	.word	0x7fefffff
 80052f4:	08007b24 	.word	0x08007b24
 80052f8:	08007b20 	.word	0x08007b20
 80052fc:	08007b2c 	.word	0x08007b2c
 8005300:	08007b28 	.word	0x08007b28
 8005304:	08007b30 	.word	0x08007b30
 8005308:	0022      	movs	r2, r4
 800530a:	2301      	movs	r3, #1
 800530c:	321a      	adds	r2, #26
 800530e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005312:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005314:	47b0      	blx	r6
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	d100      	bne.n	800531c <_printf_float+0x330>
 800531a:	e6c2      	b.n	80050a2 <_printf_float+0xb6>
 800531c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800531e:	3301      	adds	r3, #1
 8005320:	930d      	str	r3, [sp, #52]	; 0x34
 8005322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005324:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8005326:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005328:	403b      	ands	r3, r7
 800532a:	1af3      	subs	r3, r6, r3
 800532c:	4293      	cmp	r3, r2
 800532e:	dceb      	bgt.n	8005308 <_printf_float+0x31c>
 8005330:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005332:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005334:	19ad      	adds	r5, r5, r6
 8005336:	4293      	cmp	r3, r2
 8005338:	db10      	blt.n	800535c <_printf_float+0x370>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	07db      	lsls	r3, r3, #31
 800533e:	d40d      	bmi.n	800535c <_printf_float+0x370>
 8005340:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005344:	1bbe      	subs	r6, r7, r6
 8005346:	1aff      	subs	r7, r7, r3
 8005348:	42b7      	cmp	r7, r6
 800534a:	dd00      	ble.n	800534e <_printf_float+0x362>
 800534c:	0037      	movs	r7, r6
 800534e:	2f00      	cmp	r7, #0
 8005350:	dc0d      	bgt.n	800536e <_printf_float+0x382>
 8005352:	43fe      	mvns	r6, r7
 8005354:	17f3      	asrs	r3, r6, #31
 8005356:	2500      	movs	r5, #0
 8005358:	930c      	str	r3, [sp, #48]	; 0x30
 800535a:	e01c      	b.n	8005396 <_printf_float+0x3aa>
 800535c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800535e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005360:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005362:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005364:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005366:	47b8      	blx	r7
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d1e9      	bne.n	8005340 <_printf_float+0x354>
 800536c:	e699      	b.n	80050a2 <_printf_float+0xb6>
 800536e:	003b      	movs	r3, r7
 8005370:	002a      	movs	r2, r5
 8005372:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005376:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005378:	47a8      	blx	r5
 800537a:	1c43      	adds	r3, r0, #1
 800537c:	d1e9      	bne.n	8005352 <_printf_float+0x366>
 800537e:	e690      	b.n	80050a2 <_printf_float+0xb6>
 8005380:	0022      	movs	r2, r4
 8005382:	2301      	movs	r3, #1
 8005384:	321a      	adds	r2, #26
 8005386:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800538a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800538c:	47b0      	blx	r6
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d100      	bne.n	8005394 <_printf_float+0x3a8>
 8005392:	e686      	b.n	80050a2 <_printf_float+0xb6>
 8005394:	3501      	adds	r5, #1
 8005396:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800539a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	003a      	movs	r2, r7
 80053a0:	400a      	ands	r2, r1
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	42ab      	cmp	r3, r5
 80053a6:	dceb      	bgt.n	8005380 <_printf_float+0x394>
 80053a8:	e744      	b.n	8005234 <_printf_float+0x248>
 80053aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	dc02      	bgt.n	80053b6 <_printf_float+0x3ca>
 80053b0:	2301      	movs	r3, #1
 80053b2:	421a      	tst	r2, r3
 80053b4:	d032      	beq.n	800541c <_printf_float+0x430>
 80053b6:	2301      	movs	r3, #1
 80053b8:	002a      	movs	r2, r5
 80053ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80053c0:	47b8      	blx	r7
 80053c2:	1c43      	adds	r3, r0, #1
 80053c4:	d100      	bne.n	80053c8 <_printf_float+0x3dc>
 80053c6:	e66c      	b.n	80050a2 <_printf_float+0xb6>
 80053c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80053d2:	3501      	adds	r5, #1
 80053d4:	47b8      	blx	r7
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	d100      	bne.n	80053dc <_printf_float+0x3f0>
 80053da:	e662      	b.n	80050a2 <_printf_float+0xb6>
 80053dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80053de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80053e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053e2:	2200      	movs	r2, #0
 80053e4:	1e5f      	subs	r7, r3, #1
 80053e6:	2300      	movs	r3, #0
 80053e8:	f7fb f826 	bl	8000438 <__aeabi_dcmpeq>
 80053ec:	003b      	movs	r3, r7
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d014      	beq.n	800541c <_printf_float+0x430>
 80053f2:	2500      	movs	r5, #0
 80053f4:	e00a      	b.n	800540c <_printf_float+0x420>
 80053f6:	0022      	movs	r2, r4
 80053f8:	2301      	movs	r3, #1
 80053fa:	321a      	adds	r2, #26
 80053fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005400:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005402:	47b8      	blx	r7
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d100      	bne.n	800540a <_printf_float+0x41e>
 8005408:	e64b      	b.n	80050a2 <_printf_float+0xb6>
 800540a:	3501      	adds	r5, #1
 800540c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800540e:	3b01      	subs	r3, #1
 8005410:	42ab      	cmp	r3, r5
 8005412:	dcf0      	bgt.n	80053f6 <_printf_float+0x40a>
 8005414:	0022      	movs	r2, r4
 8005416:	0033      	movs	r3, r6
 8005418:	3250      	adds	r2, #80	; 0x50
 800541a:	e6db      	b.n	80051d4 <_printf_float+0x1e8>
 800541c:	002a      	movs	r2, r5
 800541e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005422:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005424:	47a8      	blx	r5
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d1f4      	bne.n	8005414 <_printf_float+0x428>
 800542a:	e63a      	b.n	80050a2 <_printf_float+0xb6>
 800542c:	0022      	movs	r2, r4
 800542e:	2301      	movs	r3, #1
 8005430:	3219      	adds	r2, #25
 8005432:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005436:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005438:	47b0      	blx	r6
 800543a:	1c43      	adds	r3, r0, #1
 800543c:	d100      	bne.n	8005440 <_printf_float+0x454>
 800543e:	e630      	b.n	80050a2 <_printf_float+0xb6>
 8005440:	3501      	adds	r5, #1
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	42ab      	cmp	r3, r5
 800544a:	dcef      	bgt.n	800542c <_printf_float+0x440>
 800544c:	e6f6      	b.n	800523c <_printf_float+0x250>
 800544e:	2500      	movs	r5, #0
 8005450:	e7f7      	b.n	8005442 <_printf_float+0x456>
 8005452:	2a00      	cmp	r2, #0
 8005454:	d100      	bne.n	8005458 <_printf_float+0x46c>
 8005456:	e689      	b.n	800516c <_printf_float+0x180>
 8005458:	2100      	movs	r1, #0
 800545a:	9106      	str	r1, [sp, #24]
 800545c:	a912      	add	r1, sp, #72	; 0x48
 800545e:	9105      	str	r1, [sp, #20]
 8005460:	a911      	add	r1, sp, #68	; 0x44
 8005462:	9103      	str	r1, [sp, #12]
 8005464:	2123      	movs	r1, #35	; 0x23
 8005466:	a808      	add	r0, sp, #32
 8005468:	1809      	adds	r1, r1, r0
 800546a:	6023      	str	r3, [r4, #0]
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	9200      	str	r2, [sp, #0]
 8005470:	002b      	movs	r3, r5
 8005472:	9704      	str	r7, [sp, #16]
 8005474:	9102      	str	r1, [sp, #8]
 8005476:	0032      	movs	r2, r6
 8005478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800547a:	f7ff fd1b 	bl	8004eb4 <__cvt>
 800547e:	0005      	movs	r5, r0
 8005480:	e645      	b.n	800510e <_printf_float+0x122>
 8005482:	46c0      	nop			; (mov r8, r8)

08005484 <_printf_common>:
 8005484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005486:	0015      	movs	r5, r2
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	688a      	ldr	r2, [r1, #8]
 800548c:	690b      	ldr	r3, [r1, #16]
 800548e:	9000      	str	r0, [sp, #0]
 8005490:	000c      	movs	r4, r1
 8005492:	4293      	cmp	r3, r2
 8005494:	da00      	bge.n	8005498 <_printf_common+0x14>
 8005496:	0013      	movs	r3, r2
 8005498:	0022      	movs	r2, r4
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	3243      	adds	r2, #67	; 0x43
 800549e:	7812      	ldrb	r2, [r2, #0]
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	d001      	beq.n	80054a8 <_printf_common+0x24>
 80054a4:	3301      	adds	r3, #1
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	069b      	lsls	r3, r3, #26
 80054ac:	d502      	bpl.n	80054b4 <_printf_common+0x30>
 80054ae:	682b      	ldr	r3, [r5, #0]
 80054b0:	3302      	adds	r3, #2
 80054b2:	602b      	str	r3, [r5, #0]
 80054b4:	2706      	movs	r7, #6
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	401f      	ands	r7, r3
 80054ba:	d027      	beq.n	800550c <_printf_common+0x88>
 80054bc:	0023      	movs	r3, r4
 80054be:	3343      	adds	r3, #67	; 0x43
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	1e5a      	subs	r2, r3, #1
 80054c4:	4193      	sbcs	r3, r2
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	0692      	lsls	r2, r2, #26
 80054ca:	d430      	bmi.n	800552e <_printf_common+0xaa>
 80054cc:	0022      	movs	r2, r4
 80054ce:	9901      	ldr	r1, [sp, #4]
 80054d0:	3243      	adds	r2, #67	; 0x43
 80054d2:	9800      	ldr	r0, [sp, #0]
 80054d4:	9e08      	ldr	r6, [sp, #32]
 80054d6:	47b0      	blx	r6
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d025      	beq.n	8005528 <_printf_common+0xa4>
 80054dc:	2306      	movs	r3, #6
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	682a      	ldr	r2, [r5, #0]
 80054e2:	68e1      	ldr	r1, [r4, #12]
 80054e4:	4003      	ands	r3, r0
 80054e6:	2500      	movs	r5, #0
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d103      	bne.n	80054f4 <_printf_common+0x70>
 80054ec:	1a8d      	subs	r5, r1, r2
 80054ee:	43eb      	mvns	r3, r5
 80054f0:	17db      	asrs	r3, r3, #31
 80054f2:	401d      	ands	r5, r3
 80054f4:	68a3      	ldr	r3, [r4, #8]
 80054f6:	6922      	ldr	r2, [r4, #16]
 80054f8:	4293      	cmp	r3, r2
 80054fa:	dd01      	ble.n	8005500 <_printf_common+0x7c>
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	18ed      	adds	r5, r5, r3
 8005500:	2700      	movs	r7, #0
 8005502:	42bd      	cmp	r5, r7
 8005504:	d120      	bne.n	8005548 <_printf_common+0xc4>
 8005506:	2000      	movs	r0, #0
 8005508:	e010      	b.n	800552c <_printf_common+0xa8>
 800550a:	3701      	adds	r7, #1
 800550c:	68e3      	ldr	r3, [r4, #12]
 800550e:	682a      	ldr	r2, [r5, #0]
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	42bb      	cmp	r3, r7
 8005514:	ddd2      	ble.n	80054bc <_printf_common+0x38>
 8005516:	0022      	movs	r2, r4
 8005518:	2301      	movs	r3, #1
 800551a:	3219      	adds	r2, #25
 800551c:	9901      	ldr	r1, [sp, #4]
 800551e:	9800      	ldr	r0, [sp, #0]
 8005520:	9e08      	ldr	r6, [sp, #32]
 8005522:	47b0      	blx	r6
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d1f0      	bne.n	800550a <_printf_common+0x86>
 8005528:	2001      	movs	r0, #1
 800552a:	4240      	negs	r0, r0
 800552c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800552e:	2030      	movs	r0, #48	; 0x30
 8005530:	18e1      	adds	r1, r4, r3
 8005532:	3143      	adds	r1, #67	; 0x43
 8005534:	7008      	strb	r0, [r1, #0]
 8005536:	0021      	movs	r1, r4
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	3145      	adds	r1, #69	; 0x45
 800553c:	7809      	ldrb	r1, [r1, #0]
 800553e:	18a2      	adds	r2, r4, r2
 8005540:	3243      	adds	r2, #67	; 0x43
 8005542:	3302      	adds	r3, #2
 8005544:	7011      	strb	r1, [r2, #0]
 8005546:	e7c1      	b.n	80054cc <_printf_common+0x48>
 8005548:	0022      	movs	r2, r4
 800554a:	2301      	movs	r3, #1
 800554c:	321a      	adds	r2, #26
 800554e:	9901      	ldr	r1, [sp, #4]
 8005550:	9800      	ldr	r0, [sp, #0]
 8005552:	9e08      	ldr	r6, [sp, #32]
 8005554:	47b0      	blx	r6
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	d0e6      	beq.n	8005528 <_printf_common+0xa4>
 800555a:	3701      	adds	r7, #1
 800555c:	e7d1      	b.n	8005502 <_printf_common+0x7e>
	...

08005560 <_printf_i>:
 8005560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005562:	b089      	sub	sp, #36	; 0x24
 8005564:	9204      	str	r2, [sp, #16]
 8005566:	000a      	movs	r2, r1
 8005568:	3243      	adds	r2, #67	; 0x43
 800556a:	9305      	str	r3, [sp, #20]
 800556c:	9003      	str	r0, [sp, #12]
 800556e:	9202      	str	r2, [sp, #8]
 8005570:	7e0a      	ldrb	r2, [r1, #24]
 8005572:	000c      	movs	r4, r1
 8005574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005576:	2a6e      	cmp	r2, #110	; 0x6e
 8005578:	d100      	bne.n	800557c <_printf_i+0x1c>
 800557a:	e086      	b.n	800568a <_printf_i+0x12a>
 800557c:	d81f      	bhi.n	80055be <_printf_i+0x5e>
 800557e:	2a63      	cmp	r2, #99	; 0x63
 8005580:	d033      	beq.n	80055ea <_printf_i+0x8a>
 8005582:	d808      	bhi.n	8005596 <_printf_i+0x36>
 8005584:	2a00      	cmp	r2, #0
 8005586:	d100      	bne.n	800558a <_printf_i+0x2a>
 8005588:	e08c      	b.n	80056a4 <_printf_i+0x144>
 800558a:	2a58      	cmp	r2, #88	; 0x58
 800558c:	d04d      	beq.n	800562a <_printf_i+0xca>
 800558e:	0025      	movs	r5, r4
 8005590:	3542      	adds	r5, #66	; 0x42
 8005592:	702a      	strb	r2, [r5, #0]
 8005594:	e030      	b.n	80055f8 <_printf_i+0x98>
 8005596:	2a64      	cmp	r2, #100	; 0x64
 8005598:	d001      	beq.n	800559e <_printf_i+0x3e>
 800559a:	2a69      	cmp	r2, #105	; 0x69
 800559c:	d1f7      	bne.n	800558e <_printf_i+0x2e>
 800559e:	6819      	ldr	r1, [r3, #0]
 80055a0:	6825      	ldr	r5, [r4, #0]
 80055a2:	1d0a      	adds	r2, r1, #4
 80055a4:	0628      	lsls	r0, r5, #24
 80055a6:	d529      	bpl.n	80055fc <_printf_i+0x9c>
 80055a8:	6808      	ldr	r0, [r1, #0]
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	2800      	cmp	r0, #0
 80055ae:	da03      	bge.n	80055b8 <_printf_i+0x58>
 80055b0:	232d      	movs	r3, #45	; 0x2d
 80055b2:	9a02      	ldr	r2, [sp, #8]
 80055b4:	4240      	negs	r0, r0
 80055b6:	7013      	strb	r3, [r2, #0]
 80055b8:	4e6b      	ldr	r6, [pc, #428]	; (8005768 <_printf_i+0x208>)
 80055ba:	270a      	movs	r7, #10
 80055bc:	e04f      	b.n	800565e <_printf_i+0xfe>
 80055be:	2a73      	cmp	r2, #115	; 0x73
 80055c0:	d074      	beq.n	80056ac <_printf_i+0x14c>
 80055c2:	d808      	bhi.n	80055d6 <_printf_i+0x76>
 80055c4:	2a6f      	cmp	r2, #111	; 0x6f
 80055c6:	d01f      	beq.n	8005608 <_printf_i+0xa8>
 80055c8:	2a70      	cmp	r2, #112	; 0x70
 80055ca:	d1e0      	bne.n	800558e <_printf_i+0x2e>
 80055cc:	2220      	movs	r2, #32
 80055ce:	6809      	ldr	r1, [r1, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	6022      	str	r2, [r4, #0]
 80055d4:	e003      	b.n	80055de <_printf_i+0x7e>
 80055d6:	2a75      	cmp	r2, #117	; 0x75
 80055d8:	d016      	beq.n	8005608 <_printf_i+0xa8>
 80055da:	2a78      	cmp	r2, #120	; 0x78
 80055dc:	d1d7      	bne.n	800558e <_printf_i+0x2e>
 80055de:	0022      	movs	r2, r4
 80055e0:	2178      	movs	r1, #120	; 0x78
 80055e2:	3245      	adds	r2, #69	; 0x45
 80055e4:	7011      	strb	r1, [r2, #0]
 80055e6:	4e61      	ldr	r6, [pc, #388]	; (800576c <_printf_i+0x20c>)
 80055e8:	e022      	b.n	8005630 <_printf_i+0xd0>
 80055ea:	0025      	movs	r5, r4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	3542      	adds	r5, #66	; 0x42
 80055f0:	1d11      	adds	r1, r2, #4
 80055f2:	6019      	str	r1, [r3, #0]
 80055f4:	6813      	ldr	r3, [r2, #0]
 80055f6:	702b      	strb	r3, [r5, #0]
 80055f8:	2301      	movs	r3, #1
 80055fa:	e065      	b.n	80056c8 <_printf_i+0x168>
 80055fc:	6808      	ldr	r0, [r1, #0]
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	0669      	lsls	r1, r5, #25
 8005602:	d5d3      	bpl.n	80055ac <_printf_i+0x4c>
 8005604:	b200      	sxth	r0, r0
 8005606:	e7d1      	b.n	80055ac <_printf_i+0x4c>
 8005608:	6819      	ldr	r1, [r3, #0]
 800560a:	6825      	ldr	r5, [r4, #0]
 800560c:	1d08      	adds	r0, r1, #4
 800560e:	6018      	str	r0, [r3, #0]
 8005610:	6808      	ldr	r0, [r1, #0]
 8005612:	062e      	lsls	r6, r5, #24
 8005614:	d505      	bpl.n	8005622 <_printf_i+0xc2>
 8005616:	4e54      	ldr	r6, [pc, #336]	; (8005768 <_printf_i+0x208>)
 8005618:	2708      	movs	r7, #8
 800561a:	2a6f      	cmp	r2, #111	; 0x6f
 800561c:	d01b      	beq.n	8005656 <_printf_i+0xf6>
 800561e:	270a      	movs	r7, #10
 8005620:	e019      	b.n	8005656 <_printf_i+0xf6>
 8005622:	066d      	lsls	r5, r5, #25
 8005624:	d5f7      	bpl.n	8005616 <_printf_i+0xb6>
 8005626:	b280      	uxth	r0, r0
 8005628:	e7f5      	b.n	8005616 <_printf_i+0xb6>
 800562a:	3145      	adds	r1, #69	; 0x45
 800562c:	4e4e      	ldr	r6, [pc, #312]	; (8005768 <_printf_i+0x208>)
 800562e:	700a      	strb	r2, [r1, #0]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	1d01      	adds	r1, r0, #4
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	6019      	str	r1, [r3, #0]
 800563a:	0615      	lsls	r5, r2, #24
 800563c:	d521      	bpl.n	8005682 <_printf_i+0x122>
 800563e:	07d3      	lsls	r3, r2, #31
 8005640:	d502      	bpl.n	8005648 <_printf_i+0xe8>
 8005642:	2320      	movs	r3, #32
 8005644:	431a      	orrs	r2, r3
 8005646:	6022      	str	r2, [r4, #0]
 8005648:	2710      	movs	r7, #16
 800564a:	2800      	cmp	r0, #0
 800564c:	d103      	bne.n	8005656 <_printf_i+0xf6>
 800564e:	2320      	movs	r3, #32
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	439a      	bics	r2, r3
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	0023      	movs	r3, r4
 8005658:	2200      	movs	r2, #0
 800565a:	3343      	adds	r3, #67	; 0x43
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	6863      	ldr	r3, [r4, #4]
 8005660:	60a3      	str	r3, [r4, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	db58      	blt.n	8005718 <_printf_i+0x1b8>
 8005666:	2204      	movs	r2, #4
 8005668:	6821      	ldr	r1, [r4, #0]
 800566a:	4391      	bics	r1, r2
 800566c:	6021      	str	r1, [r4, #0]
 800566e:	2800      	cmp	r0, #0
 8005670:	d154      	bne.n	800571c <_printf_i+0x1bc>
 8005672:	9d02      	ldr	r5, [sp, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d05a      	beq.n	800572e <_printf_i+0x1ce>
 8005678:	0025      	movs	r5, r4
 800567a:	7833      	ldrb	r3, [r6, #0]
 800567c:	3542      	adds	r5, #66	; 0x42
 800567e:	702b      	strb	r3, [r5, #0]
 8005680:	e055      	b.n	800572e <_printf_i+0x1ce>
 8005682:	0655      	lsls	r5, r2, #25
 8005684:	d5db      	bpl.n	800563e <_printf_i+0xde>
 8005686:	b280      	uxth	r0, r0
 8005688:	e7d9      	b.n	800563e <_printf_i+0xde>
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	680d      	ldr	r5, [r1, #0]
 800568e:	1d10      	adds	r0, r2, #4
 8005690:	6949      	ldr	r1, [r1, #20]
 8005692:	6018      	str	r0, [r3, #0]
 8005694:	6813      	ldr	r3, [r2, #0]
 8005696:	062e      	lsls	r6, r5, #24
 8005698:	d501      	bpl.n	800569e <_printf_i+0x13e>
 800569a:	6019      	str	r1, [r3, #0]
 800569c:	e002      	b.n	80056a4 <_printf_i+0x144>
 800569e:	066d      	lsls	r5, r5, #25
 80056a0:	d5fb      	bpl.n	800569a <_printf_i+0x13a>
 80056a2:	8019      	strh	r1, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	9d02      	ldr	r5, [sp, #8]
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	e04f      	b.n	800574c <_printf_i+0x1ec>
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	1d11      	adds	r1, r2, #4
 80056b0:	6019      	str	r1, [r3, #0]
 80056b2:	6815      	ldr	r5, [r2, #0]
 80056b4:	2100      	movs	r1, #0
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	0028      	movs	r0, r5
 80056ba:	f001 fa3d 	bl	8006b38 <memchr>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d001      	beq.n	80056c6 <_printf_i+0x166>
 80056c2:	1b40      	subs	r0, r0, r5
 80056c4:	6060      	str	r0, [r4, #4]
 80056c6:	6863      	ldr	r3, [r4, #4]
 80056c8:	6123      	str	r3, [r4, #16]
 80056ca:	2300      	movs	r3, #0
 80056cc:	9a02      	ldr	r2, [sp, #8]
 80056ce:	7013      	strb	r3, [r2, #0]
 80056d0:	e03c      	b.n	800574c <_printf_i+0x1ec>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	002a      	movs	r2, r5
 80056d6:	9904      	ldr	r1, [sp, #16]
 80056d8:	9803      	ldr	r0, [sp, #12]
 80056da:	9d05      	ldr	r5, [sp, #20]
 80056dc:	47a8      	blx	r5
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d03e      	beq.n	8005760 <_printf_i+0x200>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	079b      	lsls	r3, r3, #30
 80056e6:	d415      	bmi.n	8005714 <_printf_i+0x1b4>
 80056e8:	9b07      	ldr	r3, [sp, #28]
 80056ea:	68e0      	ldr	r0, [r4, #12]
 80056ec:	4298      	cmp	r0, r3
 80056ee:	da39      	bge.n	8005764 <_printf_i+0x204>
 80056f0:	0018      	movs	r0, r3
 80056f2:	e037      	b.n	8005764 <_printf_i+0x204>
 80056f4:	0022      	movs	r2, r4
 80056f6:	2301      	movs	r3, #1
 80056f8:	3219      	adds	r2, #25
 80056fa:	9904      	ldr	r1, [sp, #16]
 80056fc:	9803      	ldr	r0, [sp, #12]
 80056fe:	9e05      	ldr	r6, [sp, #20]
 8005700:	47b0      	blx	r6
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	d02c      	beq.n	8005760 <_printf_i+0x200>
 8005706:	3501      	adds	r5, #1
 8005708:	68e3      	ldr	r3, [r4, #12]
 800570a:	9a07      	ldr	r2, [sp, #28]
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	42ab      	cmp	r3, r5
 8005710:	dcf0      	bgt.n	80056f4 <_printf_i+0x194>
 8005712:	e7e9      	b.n	80056e8 <_printf_i+0x188>
 8005714:	2500      	movs	r5, #0
 8005716:	e7f7      	b.n	8005708 <_printf_i+0x1a8>
 8005718:	2800      	cmp	r0, #0
 800571a:	d0ad      	beq.n	8005678 <_printf_i+0x118>
 800571c:	9d02      	ldr	r5, [sp, #8]
 800571e:	0039      	movs	r1, r7
 8005720:	f7fa fd8a 	bl	8000238 <__aeabi_uidivmod>
 8005724:	5c73      	ldrb	r3, [r6, r1]
 8005726:	3d01      	subs	r5, #1
 8005728:	702b      	strb	r3, [r5, #0]
 800572a:	2800      	cmp	r0, #0
 800572c:	d1f7      	bne.n	800571e <_printf_i+0x1be>
 800572e:	2f08      	cmp	r7, #8
 8005730:	d109      	bne.n	8005746 <_printf_i+0x1e6>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	07db      	lsls	r3, r3, #31
 8005736:	d506      	bpl.n	8005746 <_printf_i+0x1e6>
 8005738:	6863      	ldr	r3, [r4, #4]
 800573a:	6922      	ldr	r2, [r4, #16]
 800573c:	4293      	cmp	r3, r2
 800573e:	dc02      	bgt.n	8005746 <_printf_i+0x1e6>
 8005740:	2330      	movs	r3, #48	; 0x30
 8005742:	3d01      	subs	r5, #1
 8005744:	702b      	strb	r3, [r5, #0]
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	1b5b      	subs	r3, r3, r5
 800574a:	6123      	str	r3, [r4, #16]
 800574c:	9b05      	ldr	r3, [sp, #20]
 800574e:	aa07      	add	r2, sp, #28
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	0021      	movs	r1, r4
 8005754:	9b04      	ldr	r3, [sp, #16]
 8005756:	9803      	ldr	r0, [sp, #12]
 8005758:	f7ff fe94 	bl	8005484 <_printf_common>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d1b8      	bne.n	80056d2 <_printf_i+0x172>
 8005760:	2001      	movs	r0, #1
 8005762:	4240      	negs	r0, r0
 8005764:	b009      	add	sp, #36	; 0x24
 8005766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005768:	08007b32 	.word	0x08007b32
 800576c:	08007b43 	.word	0x08007b43

08005770 <iprintf>:
 8005770:	b40f      	push	{r0, r1, r2, r3}
 8005772:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <iprintf+0x30>)
 8005774:	b513      	push	{r0, r1, r4, lr}
 8005776:	681c      	ldr	r4, [r3, #0]
 8005778:	2c00      	cmp	r4, #0
 800577a:	d005      	beq.n	8005788 <iprintf+0x18>
 800577c:	69a3      	ldr	r3, [r4, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <iprintf+0x18>
 8005782:	0020      	movs	r0, r4
 8005784:	f001 f8c2 	bl	800690c <__sinit>
 8005788:	ab05      	add	r3, sp, #20
 800578a:	9a04      	ldr	r2, [sp, #16]
 800578c:	68a1      	ldr	r1, [r4, #8]
 800578e:	0020      	movs	r0, r4
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	f001 ff09 	bl	80075a8 <_vfiprintf_r>
 8005796:	bc16      	pop	{r1, r2, r4}
 8005798:	bc08      	pop	{r3}
 800579a:	b004      	add	sp, #16
 800579c:	4718      	bx	r3
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	20000010 	.word	0x20000010

080057a4 <_puts_r>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	0005      	movs	r5, r0
 80057a8:	000e      	movs	r6, r1
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d004      	beq.n	80057b8 <_puts_r+0x14>
 80057ae:	6983      	ldr	r3, [r0, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <_puts_r+0x14>
 80057b4:	f001 f8aa 	bl	800690c <__sinit>
 80057b8:	69ab      	ldr	r3, [r5, #24]
 80057ba:	68ac      	ldr	r4, [r5, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <_puts_r+0x22>
 80057c0:	0028      	movs	r0, r5
 80057c2:	f001 f8a3 	bl	800690c <__sinit>
 80057c6:	4b24      	ldr	r3, [pc, #144]	; (8005858 <_puts_r+0xb4>)
 80057c8:	429c      	cmp	r4, r3
 80057ca:	d10f      	bne.n	80057ec <_puts_r+0x48>
 80057cc:	686c      	ldr	r4, [r5, #4]
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	071b      	lsls	r3, r3, #28
 80057d2:	d502      	bpl.n	80057da <_puts_r+0x36>
 80057d4:	6923      	ldr	r3, [r4, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d11f      	bne.n	800581a <_puts_r+0x76>
 80057da:	0021      	movs	r1, r4
 80057dc:	0028      	movs	r0, r5
 80057de:	f000 f8c1 	bl	8005964 <__swsetup_r>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d019      	beq.n	800581a <_puts_r+0x76>
 80057e6:	2001      	movs	r0, #1
 80057e8:	4240      	negs	r0, r0
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	4b1b      	ldr	r3, [pc, #108]	; (800585c <_puts_r+0xb8>)
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d101      	bne.n	80057f6 <_puts_r+0x52>
 80057f2:	68ac      	ldr	r4, [r5, #8]
 80057f4:	e7eb      	b.n	80057ce <_puts_r+0x2a>
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <_puts_r+0xbc>)
 80057f8:	429c      	cmp	r4, r3
 80057fa:	d1e8      	bne.n	80057ce <_puts_r+0x2a>
 80057fc:	68ec      	ldr	r4, [r5, #12]
 80057fe:	e7e6      	b.n	80057ce <_puts_r+0x2a>
 8005800:	3601      	adds	r6, #1
 8005802:	60a3      	str	r3, [r4, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	da04      	bge.n	8005812 <_puts_r+0x6e>
 8005808:	69a2      	ldr	r2, [r4, #24]
 800580a:	429a      	cmp	r2, r3
 800580c:	dc16      	bgt.n	800583c <_puts_r+0x98>
 800580e:	290a      	cmp	r1, #10
 8005810:	d014      	beq.n	800583c <_puts_r+0x98>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	6022      	str	r2, [r4, #0]
 8005818:	7019      	strb	r1, [r3, #0]
 800581a:	68a3      	ldr	r3, [r4, #8]
 800581c:	7831      	ldrb	r1, [r6, #0]
 800581e:	3b01      	subs	r3, #1
 8005820:	2900      	cmp	r1, #0
 8005822:	d1ed      	bne.n	8005800 <_puts_r+0x5c>
 8005824:	60a3      	str	r3, [r4, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	da0f      	bge.n	800584a <_puts_r+0xa6>
 800582a:	0022      	movs	r2, r4
 800582c:	310a      	adds	r1, #10
 800582e:	0028      	movs	r0, r5
 8005830:	f000 f842 	bl	80058b8 <__swbuf_r>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d0d6      	beq.n	80057e6 <_puts_r+0x42>
 8005838:	200a      	movs	r0, #10
 800583a:	e7d6      	b.n	80057ea <_puts_r+0x46>
 800583c:	0022      	movs	r2, r4
 800583e:	0028      	movs	r0, r5
 8005840:	f000 f83a 	bl	80058b8 <__swbuf_r>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d1e8      	bne.n	800581a <_puts_r+0x76>
 8005848:	e7cd      	b.n	80057e6 <_puts_r+0x42>
 800584a:	200a      	movs	r0, #10
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	6022      	str	r2, [r4, #0]
 8005852:	7018      	strb	r0, [r3, #0]
 8005854:	e7c9      	b.n	80057ea <_puts_r+0x46>
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	08007b84 	.word	0x08007b84
 800585c:	08007ba4 	.word	0x08007ba4
 8005860:	08007b64 	.word	0x08007b64

08005864 <puts>:
 8005864:	b510      	push	{r4, lr}
 8005866:	4b03      	ldr	r3, [pc, #12]	; (8005874 <puts+0x10>)
 8005868:	0001      	movs	r1, r0
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	f7ff ff9a 	bl	80057a4 <_puts_r>
 8005870:	bd10      	pop	{r4, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	20000010 	.word	0x20000010

08005878 <siprintf>:
 8005878:	b40e      	push	{r1, r2, r3}
 800587a:	b500      	push	{lr}
 800587c:	490b      	ldr	r1, [pc, #44]	; (80058ac <siprintf+0x34>)
 800587e:	b09c      	sub	sp, #112	; 0x70
 8005880:	ab1d      	add	r3, sp, #116	; 0x74
 8005882:	9002      	str	r0, [sp, #8]
 8005884:	9006      	str	r0, [sp, #24]
 8005886:	9107      	str	r1, [sp, #28]
 8005888:	9104      	str	r1, [sp, #16]
 800588a:	4809      	ldr	r0, [pc, #36]	; (80058b0 <siprintf+0x38>)
 800588c:	4909      	ldr	r1, [pc, #36]	; (80058b4 <siprintf+0x3c>)
 800588e:	cb04      	ldmia	r3!, {r2}
 8005890:	9105      	str	r1, [sp, #20]
 8005892:	6800      	ldr	r0, [r0, #0]
 8005894:	a902      	add	r1, sp, #8
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	f001 fd60 	bl	800735c <_svfiprintf_r>
 800589c:	2300      	movs	r3, #0
 800589e:	9a02      	ldr	r2, [sp, #8]
 80058a0:	7013      	strb	r3, [r2, #0]
 80058a2:	b01c      	add	sp, #112	; 0x70
 80058a4:	bc08      	pop	{r3}
 80058a6:	b003      	add	sp, #12
 80058a8:	4718      	bx	r3
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	7fffffff 	.word	0x7fffffff
 80058b0:	20000010 	.word	0x20000010
 80058b4:	ffff0208 	.word	0xffff0208

080058b8 <__swbuf_r>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	0005      	movs	r5, r0
 80058bc:	000e      	movs	r6, r1
 80058be:	0014      	movs	r4, r2
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d004      	beq.n	80058ce <__swbuf_r+0x16>
 80058c4:	6983      	ldr	r3, [r0, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <__swbuf_r+0x16>
 80058ca:	f001 f81f 	bl	800690c <__sinit>
 80058ce:	4b22      	ldr	r3, [pc, #136]	; (8005958 <__swbuf_r+0xa0>)
 80058d0:	429c      	cmp	r4, r3
 80058d2:	d12d      	bne.n	8005930 <__swbuf_r+0x78>
 80058d4:	686c      	ldr	r4, [r5, #4]
 80058d6:	69a3      	ldr	r3, [r4, #24]
 80058d8:	60a3      	str	r3, [r4, #8]
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	071b      	lsls	r3, r3, #28
 80058de:	d531      	bpl.n	8005944 <__swbuf_r+0x8c>
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d02e      	beq.n	8005944 <__swbuf_r+0x8c>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	6922      	ldr	r2, [r4, #16]
 80058ea:	b2f7      	uxtb	r7, r6
 80058ec:	1a98      	subs	r0, r3, r2
 80058ee:	6963      	ldr	r3, [r4, #20]
 80058f0:	b2f6      	uxtb	r6, r6
 80058f2:	4283      	cmp	r3, r0
 80058f4:	dc05      	bgt.n	8005902 <__swbuf_r+0x4a>
 80058f6:	0021      	movs	r1, r4
 80058f8:	0028      	movs	r0, r5
 80058fa:	f000 ff99 	bl	8006830 <_fflush_r>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d126      	bne.n	8005950 <__swbuf_r+0x98>
 8005902:	68a3      	ldr	r3, [r4, #8]
 8005904:	3001      	adds	r0, #1
 8005906:	3b01      	subs	r3, #1
 8005908:	60a3      	str	r3, [r4, #8]
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	6022      	str	r2, [r4, #0]
 8005910:	701f      	strb	r7, [r3, #0]
 8005912:	6963      	ldr	r3, [r4, #20]
 8005914:	4283      	cmp	r3, r0
 8005916:	d004      	beq.n	8005922 <__swbuf_r+0x6a>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	07db      	lsls	r3, r3, #31
 800591c:	d51a      	bpl.n	8005954 <__swbuf_r+0x9c>
 800591e:	2e0a      	cmp	r6, #10
 8005920:	d118      	bne.n	8005954 <__swbuf_r+0x9c>
 8005922:	0021      	movs	r1, r4
 8005924:	0028      	movs	r0, r5
 8005926:	f000 ff83 	bl	8006830 <_fflush_r>
 800592a:	2800      	cmp	r0, #0
 800592c:	d012      	beq.n	8005954 <__swbuf_r+0x9c>
 800592e:	e00f      	b.n	8005950 <__swbuf_r+0x98>
 8005930:	4b0a      	ldr	r3, [pc, #40]	; (800595c <__swbuf_r+0xa4>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d101      	bne.n	800593a <__swbuf_r+0x82>
 8005936:	68ac      	ldr	r4, [r5, #8]
 8005938:	e7cd      	b.n	80058d6 <__swbuf_r+0x1e>
 800593a:	4b09      	ldr	r3, [pc, #36]	; (8005960 <__swbuf_r+0xa8>)
 800593c:	429c      	cmp	r4, r3
 800593e:	d1ca      	bne.n	80058d6 <__swbuf_r+0x1e>
 8005940:	68ec      	ldr	r4, [r5, #12]
 8005942:	e7c8      	b.n	80058d6 <__swbuf_r+0x1e>
 8005944:	0021      	movs	r1, r4
 8005946:	0028      	movs	r0, r5
 8005948:	f000 f80c 	bl	8005964 <__swsetup_r>
 800594c:	2800      	cmp	r0, #0
 800594e:	d0ca      	beq.n	80058e6 <__swbuf_r+0x2e>
 8005950:	2601      	movs	r6, #1
 8005952:	4276      	negs	r6, r6
 8005954:	0030      	movs	r0, r6
 8005956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005958:	08007b84 	.word	0x08007b84
 800595c:	08007ba4 	.word	0x08007ba4
 8005960:	08007b64 	.word	0x08007b64

08005964 <__swsetup_r>:
 8005964:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <__swsetup_r+0xdc>)
 8005966:	b570      	push	{r4, r5, r6, lr}
 8005968:	681d      	ldr	r5, [r3, #0]
 800596a:	0006      	movs	r6, r0
 800596c:	000c      	movs	r4, r1
 800596e:	2d00      	cmp	r5, #0
 8005970:	d005      	beq.n	800597e <__swsetup_r+0x1a>
 8005972:	69ab      	ldr	r3, [r5, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <__swsetup_r+0x1a>
 8005978:	0028      	movs	r0, r5
 800597a:	f000 ffc7 	bl	800690c <__sinit>
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <__swsetup_r+0xe0>)
 8005980:	429c      	cmp	r4, r3
 8005982:	d10f      	bne.n	80059a4 <__swsetup_r+0x40>
 8005984:	686c      	ldr	r4, [r5, #4]
 8005986:	230c      	movs	r3, #12
 8005988:	5ee2      	ldrsh	r2, [r4, r3]
 800598a:	b293      	uxth	r3, r2
 800598c:	0719      	lsls	r1, r3, #28
 800598e:	d42d      	bmi.n	80059ec <__swsetup_r+0x88>
 8005990:	06d9      	lsls	r1, r3, #27
 8005992:	d411      	bmi.n	80059b8 <__swsetup_r+0x54>
 8005994:	2309      	movs	r3, #9
 8005996:	2001      	movs	r0, #1
 8005998:	6033      	str	r3, [r6, #0]
 800599a:	3337      	adds	r3, #55	; 0x37
 800599c:	4313      	orrs	r3, r2
 800599e:	81a3      	strh	r3, [r4, #12]
 80059a0:	4240      	negs	r0, r0
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	4b28      	ldr	r3, [pc, #160]	; (8005a48 <__swsetup_r+0xe4>)
 80059a6:	429c      	cmp	r4, r3
 80059a8:	d101      	bne.n	80059ae <__swsetup_r+0x4a>
 80059aa:	68ac      	ldr	r4, [r5, #8]
 80059ac:	e7eb      	b.n	8005986 <__swsetup_r+0x22>
 80059ae:	4b27      	ldr	r3, [pc, #156]	; (8005a4c <__swsetup_r+0xe8>)
 80059b0:	429c      	cmp	r4, r3
 80059b2:	d1e8      	bne.n	8005986 <__swsetup_r+0x22>
 80059b4:	68ec      	ldr	r4, [r5, #12]
 80059b6:	e7e6      	b.n	8005986 <__swsetup_r+0x22>
 80059b8:	075b      	lsls	r3, r3, #29
 80059ba:	d513      	bpl.n	80059e4 <__swsetup_r+0x80>
 80059bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059be:	2900      	cmp	r1, #0
 80059c0:	d008      	beq.n	80059d4 <__swsetup_r+0x70>
 80059c2:	0023      	movs	r3, r4
 80059c4:	3344      	adds	r3, #68	; 0x44
 80059c6:	4299      	cmp	r1, r3
 80059c8:	d002      	beq.n	80059d0 <__swsetup_r+0x6c>
 80059ca:	0030      	movs	r0, r6
 80059cc:	f001 fbbc 	bl	8007148 <_free_r>
 80059d0:	2300      	movs	r3, #0
 80059d2:	6363      	str	r3, [r4, #52]	; 0x34
 80059d4:	2224      	movs	r2, #36	; 0x24
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	4393      	bics	r3, r2
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	2300      	movs	r3, #0
 80059de:	6063      	str	r3, [r4, #4]
 80059e0:	6923      	ldr	r3, [r4, #16]
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	2308      	movs	r3, #8
 80059e6:	89a2      	ldrh	r2, [r4, #12]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10b      	bne.n	8005a0a <__swsetup_r+0xa6>
 80059f2:	21a0      	movs	r1, #160	; 0xa0
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	0089      	lsls	r1, r1, #2
 80059fa:	0092      	lsls	r2, r2, #2
 80059fc:	400b      	ands	r3, r1
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <__swsetup_r+0xa6>
 8005a02:	0021      	movs	r1, r4
 8005a04:	0030      	movs	r0, r6
 8005a06:	f001 f849 	bl	8006a9c <__smakebuf_r>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	89a2      	ldrh	r2, [r4, #12]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d011      	beq.n	8005a36 <__swsetup_r+0xd2>
 8005a12:	2300      	movs	r3, #0
 8005a14:	60a3      	str	r3, [r4, #8]
 8005a16:	6963      	ldr	r3, [r4, #20]
 8005a18:	425b      	negs	r3, r3
 8005a1a:	61a3      	str	r3, [r4, #24]
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	4283      	cmp	r3, r0
 8005a22:	d1be      	bne.n	80059a2 <__swsetup_r+0x3e>
 8005a24:	230c      	movs	r3, #12
 8005a26:	5ee2      	ldrsh	r2, [r4, r3]
 8005a28:	0613      	lsls	r3, r2, #24
 8005a2a:	d5ba      	bpl.n	80059a2 <__swsetup_r+0x3e>
 8005a2c:	2340      	movs	r3, #64	; 0x40
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	3801      	subs	r0, #1
 8005a34:	e7b5      	b.n	80059a2 <__swsetup_r+0x3e>
 8005a36:	0792      	lsls	r2, r2, #30
 8005a38:	d400      	bmi.n	8005a3c <__swsetup_r+0xd8>
 8005a3a:	6963      	ldr	r3, [r4, #20]
 8005a3c:	60a3      	str	r3, [r4, #8]
 8005a3e:	e7ed      	b.n	8005a1c <__swsetup_r+0xb8>
 8005a40:	20000010 	.word	0x20000010
 8005a44:	08007b84 	.word	0x08007b84
 8005a48:	08007ba4 	.word	0x08007ba4
 8005a4c:	08007b64 	.word	0x08007b64

08005a50 <quorem>:
 8005a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a52:	6903      	ldr	r3, [r0, #16]
 8005a54:	690c      	ldr	r4, [r1, #16]
 8005a56:	b089      	sub	sp, #36	; 0x24
 8005a58:	0007      	movs	r7, r0
 8005a5a:	9105      	str	r1, [sp, #20]
 8005a5c:	2600      	movs	r6, #0
 8005a5e:	42a3      	cmp	r3, r4
 8005a60:	db65      	blt.n	8005b2e <quorem+0xde>
 8005a62:	000b      	movs	r3, r1
 8005a64:	3c01      	subs	r4, #1
 8005a66:	3314      	adds	r3, #20
 8005a68:	00a5      	lsls	r5, r4, #2
 8005a6a:	9303      	str	r3, [sp, #12]
 8005a6c:	195b      	adds	r3, r3, r5
 8005a6e:	9304      	str	r3, [sp, #16]
 8005a70:	0003      	movs	r3, r0
 8005a72:	3314      	adds	r3, #20
 8005a74:	9302      	str	r3, [sp, #8]
 8005a76:	195d      	adds	r5, r3, r5
 8005a78:	9b04      	ldr	r3, [sp, #16]
 8005a7a:	6828      	ldr	r0, [r5, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	1c59      	adds	r1, r3, #1
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	f7fa fb53 	bl	800012c <__udivsi3>
 8005a86:	9001      	str	r0, [sp, #4]
 8005a88:	42b0      	cmp	r0, r6
 8005a8a:	d029      	beq.n	8005ae0 <quorem+0x90>
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	9802      	ldr	r0, [sp, #8]
 8005a90:	469c      	mov	ip, r3
 8005a92:	9606      	str	r6, [sp, #24]
 8005a94:	4662      	mov	r2, ip
 8005a96:	ca08      	ldmia	r2!, {r3}
 8005a98:	4694      	mov	ip, r2
 8005a9a:	9a01      	ldr	r2, [sp, #4]
 8005a9c:	b299      	uxth	r1, r3
 8005a9e:	4351      	muls	r1, r2
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	4353      	muls	r3, r2
 8005aa4:	1989      	adds	r1, r1, r6
 8005aa6:	0c0a      	lsrs	r2, r1, #16
 8005aa8:	189b      	adds	r3, r3, r2
 8005aaa:	9307      	str	r3, [sp, #28]
 8005aac:	0c1e      	lsrs	r6, r3, #16
 8005aae:	6803      	ldr	r3, [r0, #0]
 8005ab0:	b289      	uxth	r1, r1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	9b06      	ldr	r3, [sp, #24]
 8005ab6:	18d2      	adds	r2, r2, r3
 8005ab8:	6803      	ldr	r3, [r0, #0]
 8005aba:	1a52      	subs	r2, r2, r1
 8005abc:	0c19      	lsrs	r1, r3, #16
 8005abe:	466b      	mov	r3, sp
 8005ac0:	8b9b      	ldrh	r3, [r3, #28]
 8005ac2:	1acb      	subs	r3, r1, r3
 8005ac4:	1411      	asrs	r1, r2, #16
 8005ac6:	185b      	adds	r3, r3, r1
 8005ac8:	1419      	asrs	r1, r3, #16
 8005aca:	b292      	uxth	r2, r2
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	9b04      	ldr	r3, [sp, #16]
 8005ad2:	9106      	str	r1, [sp, #24]
 8005ad4:	c004      	stmia	r0!, {r2}
 8005ad6:	4563      	cmp	r3, ip
 8005ad8:	d2dc      	bcs.n	8005a94 <quorem+0x44>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02d      	beq.n	8005b3c <quorem+0xec>
 8005ae0:	9905      	ldr	r1, [sp, #20]
 8005ae2:	0038      	movs	r0, r7
 8005ae4:	f001 fa50 	bl	8006f88 <__mcmp>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	db1f      	blt.n	8005b2c <quorem+0xdc>
 8005aec:	2500      	movs	r5, #0
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	9802      	ldr	r0, [sp, #8]
 8005af2:	3301      	adds	r3, #1
 8005af4:	9903      	ldr	r1, [sp, #12]
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	6802      	ldr	r2, [r0, #0]
 8005afa:	c908      	ldmia	r1!, {r3}
 8005afc:	b292      	uxth	r2, r2
 8005afe:	1955      	adds	r5, r2, r5
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	1aaa      	subs	r2, r5, r2
 8005b04:	6805      	ldr	r5, [r0, #0]
 8005b06:	0c1b      	lsrs	r3, r3, #16
 8005b08:	0c2d      	lsrs	r5, r5, #16
 8005b0a:	1aeb      	subs	r3, r5, r3
 8005b0c:	1415      	asrs	r5, r2, #16
 8005b0e:	195b      	adds	r3, r3, r5
 8005b10:	141d      	asrs	r5, r3, #16
 8005b12:	b292      	uxth	r2, r2
 8005b14:	041b      	lsls	r3, r3, #16
 8005b16:	4313      	orrs	r3, r2
 8005b18:	c008      	stmia	r0!, {r3}
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	d2eb      	bcs.n	8005af8 <quorem+0xa8>
 8005b20:	9a02      	ldr	r2, [sp, #8]
 8005b22:	00a3      	lsls	r3, r4, #2
 8005b24:	18d3      	adds	r3, r2, r3
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	2a00      	cmp	r2, #0
 8005b2a:	d011      	beq.n	8005b50 <quorem+0x100>
 8005b2c:	9e01      	ldr	r6, [sp, #4]
 8005b2e:	0030      	movs	r0, r6
 8005b30:	b009      	add	sp, #36	; 0x24
 8005b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <quorem+0xf4>
 8005b3a:	3c01      	subs	r4, #1
 8005b3c:	9b02      	ldr	r3, [sp, #8]
 8005b3e:	3d04      	subs	r5, #4
 8005b40:	42ab      	cmp	r3, r5
 8005b42:	d3f7      	bcc.n	8005b34 <quorem+0xe4>
 8005b44:	613c      	str	r4, [r7, #16]
 8005b46:	e7cb      	b.n	8005ae0 <quorem+0x90>
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	2a00      	cmp	r2, #0
 8005b4c:	d104      	bne.n	8005b58 <quorem+0x108>
 8005b4e:	3c01      	subs	r4, #1
 8005b50:	9a02      	ldr	r2, [sp, #8]
 8005b52:	3b04      	subs	r3, #4
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d3f7      	bcc.n	8005b48 <quorem+0xf8>
 8005b58:	613c      	str	r4, [r7, #16]
 8005b5a:	e7e7      	b.n	8005b2c <quorem+0xdc>

08005b5c <_dtoa_r>:
 8005b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5e:	0016      	movs	r6, r2
 8005b60:	001f      	movs	r7, r3
 8005b62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b64:	b09b      	sub	sp, #108	; 0x6c
 8005b66:	9002      	str	r0, [sp, #8]
 8005b68:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8005b6a:	9606      	str	r6, [sp, #24]
 8005b6c:	9707      	str	r7, [sp, #28]
 8005b6e:	2c00      	cmp	r4, #0
 8005b70:	d108      	bne.n	8005b84 <_dtoa_r+0x28>
 8005b72:	2010      	movs	r0, #16
 8005b74:	f000 ffd6 	bl	8006b24 <malloc>
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	6258      	str	r0, [r3, #36]	; 0x24
 8005b7c:	6044      	str	r4, [r0, #4]
 8005b7e:	6084      	str	r4, [r0, #8]
 8005b80:	6004      	str	r4, [r0, #0]
 8005b82:	60c4      	str	r4, [r0, #12]
 8005b84:	9b02      	ldr	r3, [sp, #8]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	2900      	cmp	r1, #0
 8005b8c:	d00b      	beq.n	8005ba6 <_dtoa_r+0x4a>
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	2301      	movs	r3, #1
 8005b92:	4093      	lsls	r3, r2
 8005b94:	604a      	str	r2, [r1, #4]
 8005b96:	608b      	str	r3, [r1, #8]
 8005b98:	9802      	ldr	r0, [sp, #8]
 8005b9a:	f001 f819 	bl	8006bd0 <_Bfree>
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	9b02      	ldr	r3, [sp, #8]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	2f00      	cmp	r7, #0
 8005ba8:	da20      	bge.n	8005bec <_dtoa_r+0x90>
 8005baa:	2301      	movs	r3, #1
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	007b      	lsls	r3, r7, #1
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	9307      	str	r3, [sp, #28]
 8005bb4:	9c07      	ldr	r4, [sp, #28]
 8005bb6:	4bb2      	ldr	r3, [pc, #712]	; (8005e80 <_dtoa_r+0x324>)
 8005bb8:	0022      	movs	r2, r4
 8005bba:	9317      	str	r3, [sp, #92]	; 0x5c
 8005bbc:	401a      	ands	r2, r3
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d117      	bne.n	8005bf2 <_dtoa_r+0x96>
 8005bc2:	4bb0      	ldr	r3, [pc, #704]	; (8005e84 <_dtoa_r+0x328>)
 8005bc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	9b06      	ldr	r3, [sp, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <_dtoa_r+0x7a>
 8005bce:	0324      	lsls	r4, r4, #12
 8005bd0:	d101      	bne.n	8005bd6 <_dtoa_r+0x7a>
 8005bd2:	f000 fd87 	bl	80066e4 <_dtoa_r+0xb88>
 8005bd6:	4bac      	ldr	r3, [pc, #688]	; (8005e88 <_dtoa_r+0x32c>)
 8005bd8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005bda:	9308      	str	r3, [sp, #32]
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	d002      	beq.n	8005be6 <_dtoa_r+0x8a>
 8005be0:	4baa      	ldr	r3, [pc, #680]	; (8005e8c <_dtoa_r+0x330>)
 8005be2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	9808      	ldr	r0, [sp, #32]
 8005be8:	b01b      	add	sp, #108	; 0x6c
 8005bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bec:	2300      	movs	r3, #0
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	e7e0      	b.n	8005bb4 <_dtoa_r+0x58>
 8005bf2:	9e06      	ldr	r6, [sp, #24]
 8005bf4:	9f07      	ldr	r7, [sp, #28]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	0030      	movs	r0, r6
 8005bfc:	0039      	movs	r1, r7
 8005bfe:	f7fa fc1b 	bl	8000438 <__aeabi_dcmpeq>
 8005c02:	1e05      	subs	r5, r0, #0
 8005c04:	d00b      	beq.n	8005c1e <_dtoa_r+0xc2>
 8005c06:	2301      	movs	r3, #1
 8005c08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	4ba0      	ldr	r3, [pc, #640]	; (8005e90 <_dtoa_r+0x334>)
 8005c0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c10:	9308      	str	r3, [sp, #32]
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	d0e7      	beq.n	8005be6 <_dtoa_r+0x8a>
 8005c16:	4a9f      	ldr	r2, [pc, #636]	; (8005e94 <_dtoa_r+0x338>)
 8005c18:	9924      	ldr	r1, [sp, #144]	; 0x90
 8005c1a:	600a      	str	r2, [r1, #0]
 8005c1c:	e7e3      	b.n	8005be6 <_dtoa_r+0x8a>
 8005c1e:	ab18      	add	r3, sp, #96	; 0x60
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	ab19      	add	r3, sp, #100	; 0x64
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	0032      	movs	r2, r6
 8005c28:	003b      	movs	r3, r7
 8005c2a:	9802      	ldr	r0, [sp, #8]
 8005c2c:	f001 fa2a 	bl	8007084 <__d2b>
 8005c30:	0063      	lsls	r3, r4, #1
 8005c32:	9003      	str	r0, [sp, #12]
 8005c34:	0d5b      	lsrs	r3, r3, #21
 8005c36:	d074      	beq.n	8005d22 <_dtoa_r+0x1c6>
 8005c38:	033a      	lsls	r2, r7, #12
 8005c3a:	4c97      	ldr	r4, [pc, #604]	; (8005e98 <_dtoa_r+0x33c>)
 8005c3c:	0b12      	lsrs	r2, r2, #12
 8005c3e:	4314      	orrs	r4, r2
 8005c40:	0021      	movs	r1, r4
 8005c42:	4a96      	ldr	r2, [pc, #600]	; (8005e9c <_dtoa_r+0x340>)
 8005c44:	0030      	movs	r0, r6
 8005c46:	9516      	str	r5, [sp, #88]	; 0x58
 8005c48:	189e      	adds	r6, r3, r2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4b94      	ldr	r3, [pc, #592]	; (8005ea0 <_dtoa_r+0x344>)
 8005c4e:	f7fb fdb9 	bl	80017c4 <__aeabi_dsub>
 8005c52:	4a94      	ldr	r2, [pc, #592]	; (8005ea4 <_dtoa_r+0x348>)
 8005c54:	4b94      	ldr	r3, [pc, #592]	; (8005ea8 <_dtoa_r+0x34c>)
 8005c56:	f7fb fb43 	bl	80012e0 <__aeabi_dmul>
 8005c5a:	4a94      	ldr	r2, [pc, #592]	; (8005eac <_dtoa_r+0x350>)
 8005c5c:	4b94      	ldr	r3, [pc, #592]	; (8005eb0 <_dtoa_r+0x354>)
 8005c5e:	f7fa fc19 	bl	8000494 <__aeabi_dadd>
 8005c62:	0004      	movs	r4, r0
 8005c64:	0030      	movs	r0, r6
 8005c66:	000d      	movs	r5, r1
 8005c68:	f7fc f946 	bl	8001ef8 <__aeabi_i2d>
 8005c6c:	4a91      	ldr	r2, [pc, #580]	; (8005eb4 <_dtoa_r+0x358>)
 8005c6e:	4b92      	ldr	r3, [pc, #584]	; (8005eb8 <_dtoa_r+0x35c>)
 8005c70:	f7fb fb36 	bl	80012e0 <__aeabi_dmul>
 8005c74:	0002      	movs	r2, r0
 8005c76:	000b      	movs	r3, r1
 8005c78:	0020      	movs	r0, r4
 8005c7a:	0029      	movs	r1, r5
 8005c7c:	f7fa fc0a 	bl	8000494 <__aeabi_dadd>
 8005c80:	0004      	movs	r4, r0
 8005c82:	000d      	movs	r5, r1
 8005c84:	f7fc f902 	bl	8001e8c <__aeabi_d2iz>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	0007      	movs	r7, r0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	0020      	movs	r0, r4
 8005c90:	0029      	movs	r1, r5
 8005c92:	f7fa fbd7 	bl	8000444 <__aeabi_dcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d009      	beq.n	8005cae <_dtoa_r+0x152>
 8005c9a:	0038      	movs	r0, r7
 8005c9c:	f7fc f92c 	bl	8001ef8 <__aeabi_i2d>
 8005ca0:	002b      	movs	r3, r5
 8005ca2:	0022      	movs	r2, r4
 8005ca4:	f7fa fbc8 	bl	8000438 <__aeabi_dcmpeq>
 8005ca8:	4243      	negs	r3, r0
 8005caa:	4158      	adcs	r0, r3
 8005cac:	1a3f      	subs	r7, r7, r0
 8005cae:	2301      	movs	r3, #1
 8005cb0:	9314      	str	r3, [sp, #80]	; 0x50
 8005cb2:	2f16      	cmp	r7, #22
 8005cb4:	d80d      	bhi.n	8005cd2 <_dtoa_r+0x176>
 8005cb6:	4981      	ldr	r1, [pc, #516]	; (8005ebc <_dtoa_r+0x360>)
 8005cb8:	00fb      	lsls	r3, r7, #3
 8005cba:	18c9      	adds	r1, r1, r3
 8005cbc:	6808      	ldr	r0, [r1, #0]
 8005cbe:	6849      	ldr	r1, [r1, #4]
 8005cc0:	9a06      	ldr	r2, [sp, #24]
 8005cc2:	9b07      	ldr	r3, [sp, #28]
 8005cc4:	f7fa fbd2 	bl	800046c <__aeabi_dcmpgt>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d046      	beq.n	8005d5a <_dtoa_r+0x1fe>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	3f01      	subs	r7, #1
 8005cd0:	9314      	str	r3, [sp, #80]	; 0x50
 8005cd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005cd4:	1b9e      	subs	r6, r3, r6
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8005cda:	0033      	movs	r3, r6
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce0:	d504      	bpl.n	8005cec <_dtoa_r+0x190>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	1b9b      	subs	r3, r3, r6
 8005ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ce8:	2300      	movs	r3, #0
 8005cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	db36      	blt.n	8005d5e <_dtoa_r+0x202>
 8005cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf2:	9711      	str	r7, [sp, #68]	; 0x44
 8005cf4:	19db      	adds	r3, r3, r7
 8005cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9304      	str	r3, [sp, #16]
 8005cfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cfe:	2401      	movs	r4, #1
 8005d00:	2b09      	cmp	r3, #9
 8005d02:	d900      	bls.n	8005d06 <_dtoa_r+0x1aa>
 8005d04:	e084      	b.n	8005e10 <_dtoa_r+0x2b4>
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	dd02      	ble.n	8005d10 <_dtoa_r+0x1b4>
 8005d0a:	2400      	movs	r4, #0
 8005d0c:	3b04      	subs	r3, #4
 8005d0e:	9320      	str	r3, [sp, #128]	; 0x80
 8005d10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d12:	1e98      	subs	r0, r3, #2
 8005d14:	2803      	cmp	r0, #3
 8005d16:	d900      	bls.n	8005d1a <_dtoa_r+0x1be>
 8005d18:	e084      	b.n	8005e24 <_dtoa_r+0x2c8>
 8005d1a:	f7fa f9fd 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005d1e:	7775      	.short	0x7775
 8005d20:	6a28      	.short	0x6a28
 8005d22:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005d24:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d26:	189e      	adds	r6, r3, r2
 8005d28:	4b65      	ldr	r3, [pc, #404]	; (8005ec0 <_dtoa_r+0x364>)
 8005d2a:	18f2      	adds	r2, r6, r3
 8005d2c:	2a20      	cmp	r2, #32
 8005d2e:	dd0f      	ble.n	8005d50 <_dtoa_r+0x1f4>
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	409c      	lsls	r4, r3
 8005d36:	4b63      	ldr	r3, [pc, #396]	; (8005ec4 <_dtoa_r+0x368>)
 8005d38:	9806      	ldr	r0, [sp, #24]
 8005d3a:	18f3      	adds	r3, r6, r3
 8005d3c:	40d8      	lsrs	r0, r3
 8005d3e:	4320      	orrs	r0, r4
 8005d40:	f7fc f914 	bl	8001f6c <__aeabi_ui2d>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4c60      	ldr	r4, [pc, #384]	; (8005ec8 <_dtoa_r+0x36c>)
 8005d48:	3e01      	subs	r6, #1
 8005d4a:	1909      	adds	r1, r1, r4
 8005d4c:	9316      	str	r3, [sp, #88]	; 0x58
 8005d4e:	e77c      	b.n	8005c4a <_dtoa_r+0xee>
 8005d50:	2320      	movs	r3, #32
 8005d52:	9806      	ldr	r0, [sp, #24]
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	4098      	lsls	r0, r3
 8005d58:	e7f2      	b.n	8005d40 <_dtoa_r+0x1e4>
 8005d5a:	9014      	str	r0, [sp, #80]	; 0x50
 8005d5c:	e7b9      	b.n	8005cd2 <_dtoa_r+0x176>
 8005d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d60:	1bdb      	subs	r3, r3, r7
 8005d62:	930a      	str	r3, [sp, #40]	; 0x28
 8005d64:	427b      	negs	r3, r7
 8005d66:	9304      	str	r3, [sp, #16]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9311      	str	r3, [sp, #68]	; 0x44
 8005d6c:	e7c6      	b.n	8005cfc <_dtoa_r+0x1a0>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	930d      	str	r3, [sp, #52]	; 0x34
 8005d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dd59      	ble.n	8005e2c <_dtoa_r+0x2d0>
 8005d78:	930c      	str	r3, [sp, #48]	; 0x30
 8005d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7c:	9a02      	ldr	r2, [sp, #8]
 8005d7e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8005d80:	2200      	movs	r2, #0
 8005d82:	606a      	str	r2, [r5, #4]
 8005d84:	3204      	adds	r2, #4
 8005d86:	0010      	movs	r0, r2
 8005d88:	3014      	adds	r0, #20
 8005d8a:	6869      	ldr	r1, [r5, #4]
 8005d8c:	4298      	cmp	r0, r3
 8005d8e:	d952      	bls.n	8005e36 <_dtoa_r+0x2da>
 8005d90:	9802      	ldr	r0, [sp, #8]
 8005d92:	f000 fee5 	bl	8006b60 <_Balloc>
 8005d96:	9b02      	ldr	r3, [sp, #8]
 8005d98:	6028      	str	r0, [r5, #0]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	9308      	str	r3, [sp, #32]
 8005da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da2:	2b0e      	cmp	r3, #14
 8005da4:	d900      	bls.n	8005da8 <_dtoa_r+0x24c>
 8005da6:	e10a      	b.n	8005fbe <_dtoa_r+0x462>
 8005da8:	2c00      	cmp	r4, #0
 8005daa:	d100      	bne.n	8005dae <_dtoa_r+0x252>
 8005dac:	e107      	b.n	8005fbe <_dtoa_r+0x462>
 8005dae:	9b06      	ldr	r3, [sp, #24]
 8005db0:	9c07      	ldr	r4, [sp, #28]
 8005db2:	9312      	str	r3, [sp, #72]	; 0x48
 8005db4:	9413      	str	r4, [sp, #76]	; 0x4c
 8005db6:	2f00      	cmp	r7, #0
 8005db8:	dc00      	bgt.n	8005dbc <_dtoa_r+0x260>
 8005dba:	e089      	b.n	8005ed0 <_dtoa_r+0x374>
 8005dbc:	210f      	movs	r1, #15
 8005dbe:	003a      	movs	r2, r7
 8005dc0:	4b3e      	ldr	r3, [pc, #248]	; (8005ebc <_dtoa_r+0x360>)
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	00d2      	lsls	r2, r2, #3
 8005dc6:	189b      	adds	r3, r3, r2
 8005dc8:	681d      	ldr	r5, [r3, #0]
 8005dca:	685e      	ldr	r6, [r3, #4]
 8005dcc:	2302      	movs	r3, #2
 8005dce:	113c      	asrs	r4, r7, #4
 8005dd0:	930e      	str	r3, [sp, #56]	; 0x38
 8005dd2:	06e3      	lsls	r3, r4, #27
 8005dd4:	d50b      	bpl.n	8005dee <_dtoa_r+0x292>
 8005dd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ecc <_dtoa_r+0x370>)
 8005dd8:	400c      	ands	r4, r1
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005de0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005de2:	f7fa fe73 	bl	8000acc <__aeabi_ddiv>
 8005de6:	2303      	movs	r3, #3
 8005de8:	9006      	str	r0, [sp, #24]
 8005dea:	9107      	str	r1, [sp, #28]
 8005dec:	930e      	str	r3, [sp, #56]	; 0x38
 8005dee:	2300      	movs	r3, #0
 8005df0:	e03a      	b.n	8005e68 <_dtoa_r+0x30c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	930d      	str	r3, [sp, #52]	; 0x34
 8005df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	930c      	str	r3, [sp, #48]	; 0x30
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	dcbb      	bgt.n	8005d7c <_dtoa_r+0x220>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e7b9      	b.n	8005d7c <_dtoa_r+0x220>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e7b1      	b.n	8005d70 <_dtoa_r+0x214>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e7f1      	b.n	8005df4 <_dtoa_r+0x298>
 8005e10:	2300      	movs	r3, #0
 8005e12:	940d      	str	r4, [sp, #52]	; 0x34
 8005e14:	9320      	str	r3, [sp, #128]	; 0x80
 8005e16:	3b01      	subs	r3, #1
 8005e18:	2200      	movs	r2, #0
 8005e1a:	930c      	str	r3, [sp, #48]	; 0x30
 8005e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e1e:	3313      	adds	r3, #19
 8005e20:	9221      	str	r2, [sp, #132]	; 0x84
 8005e22:	e7ab      	b.n	8005d7c <_dtoa_r+0x220>
 8005e24:	2301      	movs	r3, #1
 8005e26:	930d      	str	r3, [sp, #52]	; 0x34
 8005e28:	3b02      	subs	r3, #2
 8005e2a:	e7f5      	b.n	8005e18 <_dtoa_r+0x2bc>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8005e30:	9309      	str	r3, [sp, #36]	; 0x24
 8005e32:	001a      	movs	r2, r3
 8005e34:	e7f4      	b.n	8005e20 <_dtoa_r+0x2c4>
 8005e36:	3101      	adds	r1, #1
 8005e38:	6069      	str	r1, [r5, #4]
 8005e3a:	0052      	lsls	r2, r2, #1
 8005e3c:	e7a3      	b.n	8005d86 <_dtoa_r+0x22a>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	421c      	tst	r4, r3
 8005e42:	d00e      	beq.n	8005e62 <_dtoa_r+0x306>
 8005e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e46:	4a21      	ldr	r2, [pc, #132]	; (8005ecc <_dtoa_r+0x370>)
 8005e48:	3301      	adds	r3, #1
 8005e4a:	930e      	str	r3, [sp, #56]	; 0x38
 8005e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e4e:	0028      	movs	r0, r5
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	189b      	adds	r3, r3, r2
 8005e54:	0031      	movs	r1, r6
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f7fb fa41 	bl	80012e0 <__aeabi_dmul>
 8005e5e:	0005      	movs	r5, r0
 8005e60:	000e      	movs	r6, r1
 8005e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e64:	1064      	asrs	r4, r4, #1
 8005e66:	3301      	adds	r3, #1
 8005e68:	9310      	str	r3, [sp, #64]	; 0x40
 8005e6a:	2c00      	cmp	r4, #0
 8005e6c:	d1e7      	bne.n	8005e3e <_dtoa_r+0x2e2>
 8005e6e:	9806      	ldr	r0, [sp, #24]
 8005e70:	9907      	ldr	r1, [sp, #28]
 8005e72:	002a      	movs	r2, r5
 8005e74:	0033      	movs	r3, r6
 8005e76:	f7fa fe29 	bl	8000acc <__aeabi_ddiv>
 8005e7a:	9006      	str	r0, [sp, #24]
 8005e7c:	9107      	str	r1, [sp, #28]
 8005e7e:	e042      	b.n	8005f06 <_dtoa_r+0x3aa>
 8005e80:	7ff00000 	.word	0x7ff00000
 8005e84:	0000270f 	.word	0x0000270f
 8005e88:	08007b5d 	.word	0x08007b5d
 8005e8c:	08007b60 	.word	0x08007b60
 8005e90:	08007b30 	.word	0x08007b30
 8005e94:	08007b31 	.word	0x08007b31
 8005e98:	3ff00000 	.word	0x3ff00000
 8005e9c:	fffffc01 	.word	0xfffffc01
 8005ea0:	3ff80000 	.word	0x3ff80000
 8005ea4:	636f4361 	.word	0x636f4361
 8005ea8:	3fd287a7 	.word	0x3fd287a7
 8005eac:	8b60c8b3 	.word	0x8b60c8b3
 8005eb0:	3fc68a28 	.word	0x3fc68a28
 8005eb4:	509f79fb 	.word	0x509f79fb
 8005eb8:	3fd34413 	.word	0x3fd34413
 8005ebc:	08007bf0 	.word	0x08007bf0
 8005ec0:	00000432 	.word	0x00000432
 8005ec4:	00000412 	.word	0x00000412
 8005ec8:	fe100000 	.word	0xfe100000
 8005ecc:	08007bc8 	.word	0x08007bc8
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ed4:	2f00      	cmp	r7, #0
 8005ed6:	d016      	beq.n	8005f06 <_dtoa_r+0x3aa>
 8005ed8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005eda:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005edc:	427c      	negs	r4, r7
 8005ede:	330d      	adds	r3, #13
 8005ee0:	4023      	ands	r3, r4
 8005ee2:	4ace      	ldr	r2, [pc, #824]	; (800621c <_dtoa_r+0x6c0>)
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	18d3      	adds	r3, r2, r3
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f7fb f9f8 	bl	80012e0 <__aeabi_dmul>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2601      	movs	r6, #1
 8005ef4:	001d      	movs	r5, r3
 8005ef6:	9006      	str	r0, [sp, #24]
 8005ef8:	9107      	str	r1, [sp, #28]
 8005efa:	1124      	asrs	r4, r4, #4
 8005efc:	2c00      	cmp	r4, #0
 8005efe:	d000      	beq.n	8005f02 <_dtoa_r+0x3a6>
 8005f00:	e08c      	b.n	800601c <_dtoa_r+0x4c0>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1b9      	bne.n	8005e7a <_dtoa_r+0x31e>
 8005f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d100      	bne.n	8005f0e <_dtoa_r+0x3b2>
 8005f0c:	e096      	b.n	800603c <_dtoa_r+0x4e0>
 8005f0e:	9c06      	ldr	r4, [sp, #24]
 8005f10:	9d07      	ldr	r5, [sp, #28]
 8005f12:	2200      	movs	r2, #0
 8005f14:	4bc2      	ldr	r3, [pc, #776]	; (8006220 <_dtoa_r+0x6c4>)
 8005f16:	0020      	movs	r0, r4
 8005f18:	0029      	movs	r1, r5
 8005f1a:	f7fa fa93 	bl	8000444 <__aeabi_dcmplt>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d100      	bne.n	8005f24 <_dtoa_r+0x3c8>
 8005f22:	e08b      	b.n	800603c <_dtoa_r+0x4e0>
 8005f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d100      	bne.n	8005f2c <_dtoa_r+0x3d0>
 8005f2a:	e087      	b.n	800603c <_dtoa_r+0x4e0>
 8005f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dd41      	ble.n	8005fb6 <_dtoa_r+0x45a>
 8005f32:	4bbc      	ldr	r3, [pc, #752]	; (8006224 <_dtoa_r+0x6c8>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	0020      	movs	r0, r4
 8005f38:	0029      	movs	r1, r5
 8005f3a:	f7fb f9d1 	bl	80012e0 <__aeabi_dmul>
 8005f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f40:	9006      	str	r0, [sp, #24]
 8005f42:	9107      	str	r1, [sp, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	930e      	str	r3, [sp, #56]	; 0x38
 8005f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f4a:	1e7e      	subs	r6, r7, #1
 8005f4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005f4e:	9310      	str	r3, [sp, #64]	; 0x40
 8005f50:	f7fb ffd2 	bl	8001ef8 <__aeabi_i2d>
 8005f54:	9a06      	ldr	r2, [sp, #24]
 8005f56:	9b07      	ldr	r3, [sp, #28]
 8005f58:	f7fb f9c2 	bl	80012e0 <__aeabi_dmul>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4bb2      	ldr	r3, [pc, #712]	; (8006228 <_dtoa_r+0x6cc>)
 8005f60:	f7fa fa98 	bl	8000494 <__aeabi_dadd>
 8005f64:	4ab1      	ldr	r2, [pc, #708]	; (800622c <_dtoa_r+0x6d0>)
 8005f66:	900e      	str	r0, [sp, #56]	; 0x38
 8005f68:	910f      	str	r1, [sp, #60]	; 0x3c
 8005f6a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005f6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f6e:	4694      	mov	ip, r2
 8005f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f72:	4463      	add	r3, ip
 8005f74:	9315      	str	r3, [sp, #84]	; 0x54
 8005f76:	001d      	movs	r5, r3
 8005f78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d161      	bne.n	8006042 <_dtoa_r+0x4e6>
 8005f7e:	9806      	ldr	r0, [sp, #24]
 8005f80:	9907      	ldr	r1, [sp, #28]
 8005f82:	2200      	movs	r2, #0
 8005f84:	4baa      	ldr	r3, [pc, #680]	; (8006230 <_dtoa_r+0x6d4>)
 8005f86:	f7fb fc1d 	bl	80017c4 <__aeabi_dsub>
 8005f8a:	0022      	movs	r2, r4
 8005f8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f8e:	9006      	str	r0, [sp, #24]
 8005f90:	9107      	str	r1, [sp, #28]
 8005f92:	f7fa fa6b 	bl	800046c <__aeabi_dcmpgt>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d000      	beq.n	8005f9c <_dtoa_r+0x440>
 8005f9a:	e2a8      	b.n	80064ee <_dtoa_r+0x992>
 8005f9c:	48a5      	ldr	r0, [pc, #660]	; (8006234 <_dtoa_r+0x6d8>)
 8005f9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005fa0:	4684      	mov	ip, r0
 8005fa2:	4461      	add	r1, ip
 8005fa4:	000b      	movs	r3, r1
 8005fa6:	9806      	ldr	r0, [sp, #24]
 8005fa8:	9907      	ldr	r1, [sp, #28]
 8005faa:	0022      	movs	r2, r4
 8005fac:	f7fa fa4a 	bl	8000444 <__aeabi_dcmplt>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d000      	beq.n	8005fb6 <_dtoa_r+0x45a>
 8005fb4:	e295      	b.n	80064e2 <_dtoa_r+0x986>
 8005fb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005fba:	9306      	str	r3, [sp, #24]
 8005fbc:	9407      	str	r4, [sp, #28]
 8005fbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	da00      	bge.n	8005fc6 <_dtoa_r+0x46a>
 8005fc4:	e15c      	b.n	8006280 <_dtoa_r+0x724>
 8005fc6:	2f0e      	cmp	r7, #14
 8005fc8:	dd00      	ble.n	8005fcc <_dtoa_r+0x470>
 8005fca:	e159      	b.n	8006280 <_dtoa_r+0x724>
 8005fcc:	4b93      	ldr	r3, [pc, #588]	; (800621c <_dtoa_r+0x6c0>)
 8005fce:	00fa      	lsls	r2, r7, #3
 8005fd0:	189b      	adds	r3, r3, r2
 8005fd2:	685c      	ldr	r4, [r3, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	9405      	str	r4, [sp, #20]
 8005fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	db00      	blt.n	8005fe2 <_dtoa_r+0x486>
 8005fe0:	e0d8      	b.n	8006194 <_dtoa_r+0x638>
 8005fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	dd00      	ble.n	8005fea <_dtoa_r+0x48e>
 8005fe8:	e0d4      	b.n	8006194 <_dtoa_r+0x638>
 8005fea:	d000      	beq.n	8005fee <_dtoa_r+0x492>
 8005fec:	e27d      	b.n	80064ea <_dtoa_r+0x98e>
 8005fee:	9804      	ldr	r0, [sp, #16]
 8005ff0:	9905      	ldr	r1, [sp, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	4b8e      	ldr	r3, [pc, #568]	; (8006230 <_dtoa_r+0x6d4>)
 8005ff6:	f7fb f973 	bl	80012e0 <__aeabi_dmul>
 8005ffa:	9a06      	ldr	r2, [sp, #24]
 8005ffc:	9b07      	ldr	r3, [sp, #28]
 8005ffe:	f7fa fa3f 	bl	8000480 <__aeabi_dcmpge>
 8006002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	001e      	movs	r6, r3
 8006008:	2800      	cmp	r0, #0
 800600a:	d000      	beq.n	800600e <_dtoa_r+0x4b2>
 800600c:	e24f      	b.n	80064ae <_dtoa_r+0x952>
 800600e:	9b08      	ldr	r3, [sp, #32]
 8006010:	9a08      	ldr	r2, [sp, #32]
 8006012:	1c5d      	adds	r5, r3, #1
 8006014:	2331      	movs	r3, #49	; 0x31
 8006016:	3701      	adds	r7, #1
 8006018:	7013      	strb	r3, [r2, #0]
 800601a:	e24b      	b.n	80064b4 <_dtoa_r+0x958>
 800601c:	4234      	tst	r4, r6
 800601e:	d00a      	beq.n	8006036 <_dtoa_r+0x4da>
 8006020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006022:	4a85      	ldr	r2, [pc, #532]	; (8006238 <_dtoa_r+0x6dc>)
 8006024:	3301      	adds	r3, #1
 8006026:	930e      	str	r3, [sp, #56]	; 0x38
 8006028:	00eb      	lsls	r3, r5, #3
 800602a:	189b      	adds	r3, r3, r2
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f7fb f956 	bl	80012e0 <__aeabi_dmul>
 8006034:	0033      	movs	r3, r6
 8006036:	1064      	asrs	r4, r4, #1
 8006038:	3501      	adds	r5, #1
 800603a:	e75f      	b.n	8005efc <_dtoa_r+0x3a0>
 800603c:	003e      	movs	r6, r7
 800603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006040:	e784      	b.n	8005f4c <_dtoa_r+0x3f0>
 8006042:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006044:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006046:	1e5a      	subs	r2, r3, #1
 8006048:	4b74      	ldr	r3, [pc, #464]	; (800621c <_dtoa_r+0x6c0>)
 800604a:	00d2      	lsls	r2, r2, #3
 800604c:	189b      	adds	r3, r3, r2
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2900      	cmp	r1, #0
 8006054:	d049      	beq.n	80060ea <_dtoa_r+0x58e>
 8006056:	2000      	movs	r0, #0
 8006058:	4978      	ldr	r1, [pc, #480]	; (800623c <_dtoa_r+0x6e0>)
 800605a:	f7fa fd37 	bl	8000acc <__aeabi_ddiv>
 800605e:	002b      	movs	r3, r5
 8006060:	0022      	movs	r2, r4
 8006062:	f7fb fbaf 	bl	80017c4 <__aeabi_dsub>
 8006066:	9b08      	ldr	r3, [sp, #32]
 8006068:	900e      	str	r0, [sp, #56]	; 0x38
 800606a:	910f      	str	r1, [sp, #60]	; 0x3c
 800606c:	9315      	str	r3, [sp, #84]	; 0x54
 800606e:	9806      	ldr	r0, [sp, #24]
 8006070:	9907      	ldr	r1, [sp, #28]
 8006072:	f7fb ff0b 	bl	8001e8c <__aeabi_d2iz>
 8006076:	0004      	movs	r4, r0
 8006078:	f7fb ff3e 	bl	8001ef8 <__aeabi_i2d>
 800607c:	0002      	movs	r2, r0
 800607e:	000b      	movs	r3, r1
 8006080:	9806      	ldr	r0, [sp, #24]
 8006082:	9907      	ldr	r1, [sp, #28]
 8006084:	f7fb fb9e 	bl	80017c4 <__aeabi_dsub>
 8006088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800608a:	3430      	adds	r4, #48	; 0x30
 800608c:	1c5d      	adds	r5, r3, #1
 800608e:	701c      	strb	r4, [r3, #0]
 8006090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006094:	9006      	str	r0, [sp, #24]
 8006096:	9107      	str	r1, [sp, #28]
 8006098:	f7fa f9d4 	bl	8000444 <__aeabi_dcmplt>
 800609c:	2800      	cmp	r0, #0
 800609e:	d16c      	bne.n	800617a <_dtoa_r+0x61e>
 80060a0:	9a06      	ldr	r2, [sp, #24]
 80060a2:	9b07      	ldr	r3, [sp, #28]
 80060a4:	2000      	movs	r0, #0
 80060a6:	495e      	ldr	r1, [pc, #376]	; (8006220 <_dtoa_r+0x6c4>)
 80060a8:	f7fb fb8c 	bl	80017c4 <__aeabi_dsub>
 80060ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060b0:	f7fa f9c8 	bl	8000444 <__aeabi_dcmplt>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d000      	beq.n	80060ba <_dtoa_r+0x55e>
 80060b8:	e0c3      	b.n	8006242 <_dtoa_r+0x6e6>
 80060ba:	9b08      	ldr	r3, [sp, #32]
 80060bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060be:	1aeb      	subs	r3, r5, r3
 80060c0:	429a      	cmp	r2, r3
 80060c2:	dc00      	bgt.n	80060c6 <_dtoa_r+0x56a>
 80060c4:	e777      	b.n	8005fb6 <_dtoa_r+0x45a>
 80060c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80060ca:	2200      	movs	r2, #0
 80060cc:	4b55      	ldr	r3, [pc, #340]	; (8006224 <_dtoa_r+0x6c8>)
 80060ce:	f7fb f907 	bl	80012e0 <__aeabi_dmul>
 80060d2:	2200      	movs	r2, #0
 80060d4:	900e      	str	r0, [sp, #56]	; 0x38
 80060d6:	910f      	str	r1, [sp, #60]	; 0x3c
 80060d8:	9806      	ldr	r0, [sp, #24]
 80060da:	9907      	ldr	r1, [sp, #28]
 80060dc:	4b51      	ldr	r3, [pc, #324]	; (8006224 <_dtoa_r+0x6c8>)
 80060de:	f7fb f8ff 	bl	80012e0 <__aeabi_dmul>
 80060e2:	9515      	str	r5, [sp, #84]	; 0x54
 80060e4:	9006      	str	r0, [sp, #24]
 80060e6:	9107      	str	r1, [sp, #28]
 80060e8:	e7c1      	b.n	800606e <_dtoa_r+0x512>
 80060ea:	0020      	movs	r0, r4
 80060ec:	0029      	movs	r1, r5
 80060ee:	f7fb f8f7 	bl	80012e0 <__aeabi_dmul>
 80060f2:	9c08      	ldr	r4, [sp, #32]
 80060f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060f6:	0023      	movs	r3, r4
 80060f8:	4694      	mov	ip, r2
 80060fa:	900e      	str	r0, [sp, #56]	; 0x38
 80060fc:	910f      	str	r1, [sp, #60]	; 0x3c
 80060fe:	4463      	add	r3, ip
 8006100:	9315      	str	r3, [sp, #84]	; 0x54
 8006102:	9806      	ldr	r0, [sp, #24]
 8006104:	9907      	ldr	r1, [sp, #28]
 8006106:	f7fb fec1 	bl	8001e8c <__aeabi_d2iz>
 800610a:	0005      	movs	r5, r0
 800610c:	f7fb fef4 	bl	8001ef8 <__aeabi_i2d>
 8006110:	000b      	movs	r3, r1
 8006112:	0002      	movs	r2, r0
 8006114:	9806      	ldr	r0, [sp, #24]
 8006116:	9907      	ldr	r1, [sp, #28]
 8006118:	f7fb fb54 	bl	80017c4 <__aeabi_dsub>
 800611c:	3530      	adds	r5, #48	; 0x30
 800611e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006120:	7025      	strb	r5, [r4, #0]
 8006122:	3401      	adds	r4, #1
 8006124:	9006      	str	r0, [sp, #24]
 8006126:	9107      	str	r1, [sp, #28]
 8006128:	42a3      	cmp	r3, r4
 800612a:	d12a      	bne.n	8006182 <_dtoa_r+0x626>
 800612c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800612e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006130:	9a08      	ldr	r2, [sp, #32]
 8006132:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006134:	4694      	mov	ip, r2
 8006136:	4463      	add	r3, ip
 8006138:	2200      	movs	r2, #0
 800613a:	001d      	movs	r5, r3
 800613c:	4b3f      	ldr	r3, [pc, #252]	; (800623c <_dtoa_r+0x6e0>)
 800613e:	f7fa f9a9 	bl	8000494 <__aeabi_dadd>
 8006142:	0002      	movs	r2, r0
 8006144:	000b      	movs	r3, r1
 8006146:	9806      	ldr	r0, [sp, #24]
 8006148:	9907      	ldr	r1, [sp, #28]
 800614a:	f7fa f98f 	bl	800046c <__aeabi_dcmpgt>
 800614e:	2800      	cmp	r0, #0
 8006150:	d000      	beq.n	8006154 <_dtoa_r+0x5f8>
 8006152:	e076      	b.n	8006242 <_dtoa_r+0x6e6>
 8006154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006158:	2000      	movs	r0, #0
 800615a:	4938      	ldr	r1, [pc, #224]	; (800623c <_dtoa_r+0x6e0>)
 800615c:	f7fb fb32 	bl	80017c4 <__aeabi_dsub>
 8006160:	0002      	movs	r2, r0
 8006162:	000b      	movs	r3, r1
 8006164:	9806      	ldr	r0, [sp, #24]
 8006166:	9907      	ldr	r1, [sp, #28]
 8006168:	f7fa f96c 	bl	8000444 <__aeabi_dcmplt>
 800616c:	2800      	cmp	r0, #0
 800616e:	d100      	bne.n	8006172 <_dtoa_r+0x616>
 8006170:	e721      	b.n	8005fb6 <_dtoa_r+0x45a>
 8006172:	1e6b      	subs	r3, r5, #1
 8006174:	781a      	ldrb	r2, [r3, #0]
 8006176:	2a30      	cmp	r2, #48	; 0x30
 8006178:	d001      	beq.n	800617e <_dtoa_r+0x622>
 800617a:	0037      	movs	r7, r6
 800617c:	e03f      	b.n	80061fe <_dtoa_r+0x6a2>
 800617e:	001d      	movs	r5, r3
 8006180:	e7f7      	b.n	8006172 <_dtoa_r+0x616>
 8006182:	9806      	ldr	r0, [sp, #24]
 8006184:	9907      	ldr	r1, [sp, #28]
 8006186:	2200      	movs	r2, #0
 8006188:	4b26      	ldr	r3, [pc, #152]	; (8006224 <_dtoa_r+0x6c8>)
 800618a:	f7fb f8a9 	bl	80012e0 <__aeabi_dmul>
 800618e:	9006      	str	r0, [sp, #24]
 8006190:	9107      	str	r1, [sp, #28]
 8006192:	e7b6      	b.n	8006102 <_dtoa_r+0x5a6>
 8006194:	9e08      	ldr	r6, [sp, #32]
 8006196:	9a04      	ldr	r2, [sp, #16]
 8006198:	9b05      	ldr	r3, [sp, #20]
 800619a:	9806      	ldr	r0, [sp, #24]
 800619c:	9907      	ldr	r1, [sp, #28]
 800619e:	f7fa fc95 	bl	8000acc <__aeabi_ddiv>
 80061a2:	f7fb fe73 	bl	8001e8c <__aeabi_d2iz>
 80061a6:	0004      	movs	r4, r0
 80061a8:	f7fb fea6 	bl	8001ef8 <__aeabi_i2d>
 80061ac:	9a04      	ldr	r2, [sp, #16]
 80061ae:	9b05      	ldr	r3, [sp, #20]
 80061b0:	f7fb f896 	bl	80012e0 <__aeabi_dmul>
 80061b4:	0002      	movs	r2, r0
 80061b6:	000b      	movs	r3, r1
 80061b8:	9806      	ldr	r0, [sp, #24]
 80061ba:	9907      	ldr	r1, [sp, #28]
 80061bc:	f7fb fb02 	bl	80017c4 <__aeabi_dsub>
 80061c0:	0023      	movs	r3, r4
 80061c2:	3330      	adds	r3, #48	; 0x30
 80061c4:	7033      	strb	r3, [r6, #0]
 80061c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061c8:	9b08      	ldr	r3, [sp, #32]
 80061ca:	1c75      	adds	r5, r6, #1
 80061cc:	1aeb      	subs	r3, r5, r3
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d148      	bne.n	8006264 <_dtoa_r+0x708>
 80061d2:	0002      	movs	r2, r0
 80061d4:	000b      	movs	r3, r1
 80061d6:	f7fa f95d 	bl	8000494 <__aeabi_dadd>
 80061da:	9a04      	ldr	r2, [sp, #16]
 80061dc:	9b05      	ldr	r3, [sp, #20]
 80061de:	9006      	str	r0, [sp, #24]
 80061e0:	9107      	str	r1, [sp, #28]
 80061e2:	f7fa f943 	bl	800046c <__aeabi_dcmpgt>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d12a      	bne.n	8006240 <_dtoa_r+0x6e4>
 80061ea:	9a04      	ldr	r2, [sp, #16]
 80061ec:	9b05      	ldr	r3, [sp, #20]
 80061ee:	9806      	ldr	r0, [sp, #24]
 80061f0:	9907      	ldr	r1, [sp, #28]
 80061f2:	f7fa f921 	bl	8000438 <__aeabi_dcmpeq>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d001      	beq.n	80061fe <_dtoa_r+0x6a2>
 80061fa:	07e3      	lsls	r3, r4, #31
 80061fc:	d420      	bmi.n	8006240 <_dtoa_r+0x6e4>
 80061fe:	9903      	ldr	r1, [sp, #12]
 8006200:	9802      	ldr	r0, [sp, #8]
 8006202:	f000 fce5 	bl	8006bd0 <_Bfree>
 8006206:	2300      	movs	r3, #0
 8006208:	702b      	strb	r3, [r5, #0]
 800620a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800620c:	3701      	adds	r7, #1
 800620e:	601f      	str	r7, [r3, #0]
 8006210:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006212:	2b00      	cmp	r3, #0
 8006214:	d100      	bne.n	8006218 <_dtoa_r+0x6bc>
 8006216:	e4e6      	b.n	8005be6 <_dtoa_r+0x8a>
 8006218:	601d      	str	r5, [r3, #0]
 800621a:	e4e4      	b.n	8005be6 <_dtoa_r+0x8a>
 800621c:	08007bf0 	.word	0x08007bf0
 8006220:	3ff00000 	.word	0x3ff00000
 8006224:	40240000 	.word	0x40240000
 8006228:	401c0000 	.word	0x401c0000
 800622c:	fcc00000 	.word	0xfcc00000
 8006230:	40140000 	.word	0x40140000
 8006234:	7cc00000 	.word	0x7cc00000
 8006238:	08007bc8 	.word	0x08007bc8
 800623c:	3fe00000 	.word	0x3fe00000
 8006240:	003e      	movs	r6, r7
 8006242:	1e6b      	subs	r3, r5, #1
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	2a39      	cmp	r2, #57	; 0x39
 8006248:	d106      	bne.n	8006258 <_dtoa_r+0x6fc>
 800624a:	9a08      	ldr	r2, [sp, #32]
 800624c:	429a      	cmp	r2, r3
 800624e:	d107      	bne.n	8006260 <_dtoa_r+0x704>
 8006250:	2330      	movs	r3, #48	; 0x30
 8006252:	7013      	strb	r3, [r2, #0]
 8006254:	0013      	movs	r3, r2
 8006256:	3601      	adds	r6, #1
 8006258:	781a      	ldrb	r2, [r3, #0]
 800625a:	3201      	adds	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e78c      	b.n	800617a <_dtoa_r+0x61e>
 8006260:	001d      	movs	r5, r3
 8006262:	e7ee      	b.n	8006242 <_dtoa_r+0x6e6>
 8006264:	2200      	movs	r2, #0
 8006266:	4ba4      	ldr	r3, [pc, #656]	; (80064f8 <_dtoa_r+0x99c>)
 8006268:	f7fb f83a 	bl	80012e0 <__aeabi_dmul>
 800626c:	2200      	movs	r2, #0
 800626e:	2300      	movs	r3, #0
 8006270:	9006      	str	r0, [sp, #24]
 8006272:	9107      	str	r1, [sp, #28]
 8006274:	002e      	movs	r6, r5
 8006276:	f7fa f8df 	bl	8000438 <__aeabi_dcmpeq>
 800627a:	2800      	cmp	r0, #0
 800627c:	d08b      	beq.n	8006196 <_dtoa_r+0x63a>
 800627e:	e7be      	b.n	80061fe <_dtoa_r+0x6a2>
 8006280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006282:	2a00      	cmp	r2, #0
 8006284:	d100      	bne.n	8006288 <_dtoa_r+0x72c>
 8006286:	e0da      	b.n	800643e <_dtoa_r+0x8e2>
 8006288:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800628a:	2a01      	cmp	r2, #1
 800628c:	dd00      	ble.n	8006290 <_dtoa_r+0x734>
 800628e:	e0bd      	b.n	800640c <_dtoa_r+0x8b0>
 8006290:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006292:	2a00      	cmp	r2, #0
 8006294:	d100      	bne.n	8006298 <_dtoa_r+0x73c>
 8006296:	e0b5      	b.n	8006404 <_dtoa_r+0x8a8>
 8006298:	4a98      	ldr	r2, [pc, #608]	; (80064fc <_dtoa_r+0x9a0>)
 800629a:	189b      	adds	r3, r3, r2
 800629c:	9d04      	ldr	r5, [sp, #16]
 800629e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062a2:	2101      	movs	r1, #1
 80062a4:	18d2      	adds	r2, r2, r3
 80062a6:	920a      	str	r2, [sp, #40]	; 0x28
 80062a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062aa:	9802      	ldr	r0, [sp, #8]
 80062ac:	18d3      	adds	r3, r2, r3
 80062ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80062b0:	f000 fd2e 	bl	8006d10 <__i2b>
 80062b4:	0006      	movs	r6, r0
 80062b6:	2c00      	cmp	r4, #0
 80062b8:	dd0e      	ble.n	80062d8 <_dtoa_r+0x77c>
 80062ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dd0b      	ble.n	80062d8 <_dtoa_r+0x77c>
 80062c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062c2:	0023      	movs	r3, r4
 80062c4:	4294      	cmp	r4, r2
 80062c6:	dd00      	ble.n	80062ca <_dtoa_r+0x76e>
 80062c8:	0013      	movs	r3, r2
 80062ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062cc:	1ae4      	subs	r4, r4, r3
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	920a      	str	r2, [sp, #40]	; 0x28
 80062d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062d8:	9b04      	ldr	r3, [sp, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01f      	beq.n	800631e <_dtoa_r+0x7c2>
 80062de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d100      	bne.n	80062e6 <_dtoa_r+0x78a>
 80062e4:	e0af      	b.n	8006446 <_dtoa_r+0x8ea>
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	d011      	beq.n	800630e <_dtoa_r+0x7b2>
 80062ea:	0031      	movs	r1, r6
 80062ec:	002a      	movs	r2, r5
 80062ee:	9802      	ldr	r0, [sp, #8]
 80062f0:	f000 fda6 	bl	8006e40 <__pow5mult>
 80062f4:	9a03      	ldr	r2, [sp, #12]
 80062f6:	0001      	movs	r1, r0
 80062f8:	0006      	movs	r6, r0
 80062fa:	9802      	ldr	r0, [sp, #8]
 80062fc:	f000 fd11 	bl	8006d22 <__multiply>
 8006300:	9903      	ldr	r1, [sp, #12]
 8006302:	9010      	str	r0, [sp, #64]	; 0x40
 8006304:	9802      	ldr	r0, [sp, #8]
 8006306:	f000 fc63 	bl	8006bd0 <_Bfree>
 800630a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800630c:	9303      	str	r3, [sp, #12]
 800630e:	9b04      	ldr	r3, [sp, #16]
 8006310:	1b5a      	subs	r2, r3, r5
 8006312:	d004      	beq.n	800631e <_dtoa_r+0x7c2>
 8006314:	9903      	ldr	r1, [sp, #12]
 8006316:	9802      	ldr	r0, [sp, #8]
 8006318:	f000 fd92 	bl	8006e40 <__pow5mult>
 800631c:	9003      	str	r0, [sp, #12]
 800631e:	2101      	movs	r1, #1
 8006320:	9802      	ldr	r0, [sp, #8]
 8006322:	f000 fcf5 	bl	8006d10 <__i2b>
 8006326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006328:	9004      	str	r0, [sp, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d100      	bne.n	8006330 <_dtoa_r+0x7d4>
 800632e:	e1e3      	b.n	80066f8 <_dtoa_r+0xb9c>
 8006330:	001a      	movs	r2, r3
 8006332:	0001      	movs	r1, r0
 8006334:	9802      	ldr	r0, [sp, #8]
 8006336:	f000 fd83 	bl	8006e40 <__pow5mult>
 800633a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800633c:	9004      	str	r0, [sp, #16]
 800633e:	2b01      	cmp	r3, #1
 8006340:	dd00      	ble.n	8006344 <_dtoa_r+0x7e8>
 8006342:	e082      	b.n	800644a <_dtoa_r+0x8ee>
 8006344:	2500      	movs	r5, #0
 8006346:	9b06      	ldr	r3, [sp, #24]
 8006348:	42ab      	cmp	r3, r5
 800634a:	d10e      	bne.n	800636a <_dtoa_r+0x80e>
 800634c:	9b07      	ldr	r3, [sp, #28]
 800634e:	031b      	lsls	r3, r3, #12
 8006350:	42ab      	cmp	r3, r5
 8006352:	d10a      	bne.n	800636a <_dtoa_r+0x80e>
 8006354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006356:	9a07      	ldr	r2, [sp, #28]
 8006358:	4213      	tst	r3, r2
 800635a:	d006      	beq.n	800636a <_dtoa_r+0x80e>
 800635c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635e:	3501      	adds	r5, #1
 8006360:	3301      	adds	r3, #1
 8006362:	930a      	str	r3, [sp, #40]	; 0x28
 8006364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006366:	3301      	adds	r3, #1
 8006368:	930b      	str	r3, [sp, #44]	; 0x2c
 800636a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800636c:	2001      	movs	r0, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d16c      	bne.n	800644c <_dtoa_r+0x8f0>
 8006372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006374:	1818      	adds	r0, r3, r0
 8006376:	231f      	movs	r3, #31
 8006378:	4018      	ands	r0, r3
 800637a:	d07e      	beq.n	800647a <_dtoa_r+0x91e>
 800637c:	3301      	adds	r3, #1
 800637e:	1a1b      	subs	r3, r3, r0
 8006380:	2b04      	cmp	r3, #4
 8006382:	dd70      	ble.n	8006466 <_dtoa_r+0x90a>
 8006384:	231c      	movs	r3, #28
 8006386:	1a18      	subs	r0, r3, r0
 8006388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800638a:	1824      	adds	r4, r4, r0
 800638c:	181b      	adds	r3, r3, r0
 800638e:	930a      	str	r3, [sp, #40]	; 0x28
 8006390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006392:	181b      	adds	r3, r3, r0
 8006394:	930b      	str	r3, [sp, #44]	; 0x2c
 8006396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006398:	2b00      	cmp	r3, #0
 800639a:	dd05      	ble.n	80063a8 <_dtoa_r+0x84c>
 800639c:	001a      	movs	r2, r3
 800639e:	9903      	ldr	r1, [sp, #12]
 80063a0:	9802      	ldr	r0, [sp, #8]
 80063a2:	f000 fd9f 	bl	8006ee4 <__lshift>
 80063a6:	9003      	str	r0, [sp, #12]
 80063a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dd05      	ble.n	80063ba <_dtoa_r+0x85e>
 80063ae:	001a      	movs	r2, r3
 80063b0:	9904      	ldr	r1, [sp, #16]
 80063b2:	9802      	ldr	r0, [sp, #8]
 80063b4:	f000 fd96 	bl	8006ee4 <__lshift>
 80063b8:	9004      	str	r0, [sp, #16]
 80063ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d05e      	beq.n	800647e <_dtoa_r+0x922>
 80063c0:	9904      	ldr	r1, [sp, #16]
 80063c2:	9803      	ldr	r0, [sp, #12]
 80063c4:	f000 fde0 	bl	8006f88 <__mcmp>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	da58      	bge.n	800647e <_dtoa_r+0x922>
 80063cc:	2300      	movs	r3, #0
 80063ce:	220a      	movs	r2, #10
 80063d0:	9903      	ldr	r1, [sp, #12]
 80063d2:	9802      	ldr	r0, [sp, #8]
 80063d4:	f000 fc15 	bl	8006c02 <__multadd>
 80063d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063da:	3f01      	subs	r7, #1
 80063dc:	9003      	str	r0, [sp, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d100      	bne.n	80063e4 <_dtoa_r+0x888>
 80063e2:	e190      	b.n	8006706 <_dtoa_r+0xbaa>
 80063e4:	2300      	movs	r3, #0
 80063e6:	0031      	movs	r1, r6
 80063e8:	220a      	movs	r2, #10
 80063ea:	9802      	ldr	r0, [sp, #8]
 80063ec:	f000 fc09 	bl	8006c02 <__multadd>
 80063f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063f2:	0006      	movs	r6, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	dd00      	ble.n	80063fa <_dtoa_r+0x89e>
 80063f8:	e088      	b.n	800650c <_dtoa_r+0x9b0>
 80063fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	dc00      	bgt.n	8006402 <_dtoa_r+0x8a6>
 8006400:	e084      	b.n	800650c <_dtoa_r+0x9b0>
 8006402:	e044      	b.n	800648e <_dtoa_r+0x932>
 8006404:	2336      	movs	r3, #54	; 0x36
 8006406:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	e747      	b.n	800629c <_dtoa_r+0x740>
 800640c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640e:	1e5d      	subs	r5, r3, #1
 8006410:	9b04      	ldr	r3, [sp, #16]
 8006412:	42ab      	cmp	r3, r5
 8006414:	db08      	blt.n	8006428 <_dtoa_r+0x8cc>
 8006416:	1b5d      	subs	r5, r3, r5
 8006418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	da0c      	bge.n	8006438 <_dtoa_r+0x8dc>
 800641e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006422:	1a9c      	subs	r4, r3, r2
 8006424:	2300      	movs	r3, #0
 8006426:	e73b      	b.n	80062a0 <_dtoa_r+0x744>
 8006428:	9b04      	ldr	r3, [sp, #16]
 800642a:	9504      	str	r5, [sp, #16]
 800642c:	1aea      	subs	r2, r5, r3
 800642e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006430:	2500      	movs	r5, #0
 8006432:	189b      	adds	r3, r3, r2
 8006434:	9311      	str	r3, [sp, #68]	; 0x44
 8006436:	e7ef      	b.n	8006418 <_dtoa_r+0x8bc>
 8006438:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643c:	e730      	b.n	80062a0 <_dtoa_r+0x744>
 800643e:	9d04      	ldr	r5, [sp, #16]
 8006440:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006442:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006444:	e737      	b.n	80062b6 <_dtoa_r+0x75a>
 8006446:	9a04      	ldr	r2, [sp, #16]
 8006448:	e764      	b.n	8006314 <_dtoa_r+0x7b8>
 800644a:	2500      	movs	r5, #0
 800644c:	9b04      	ldr	r3, [sp, #16]
 800644e:	9a04      	ldr	r2, [sp, #16]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	9310      	str	r3, [sp, #64]	; 0x40
 8006454:	3303      	adds	r3, #3
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	18d3      	adds	r3, r2, r3
 800645a:	6858      	ldr	r0, [r3, #4]
 800645c:	f000 fc0f 	bl	8006c7e <__hi0bits>
 8006460:	2320      	movs	r3, #32
 8006462:	1a18      	subs	r0, r3, r0
 8006464:	e785      	b.n	8006372 <_dtoa_r+0x816>
 8006466:	2b04      	cmp	r3, #4
 8006468:	d095      	beq.n	8006396 <_dtoa_r+0x83a>
 800646a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800646c:	331c      	adds	r3, #28
 800646e:	18d2      	adds	r2, r2, r3
 8006470:	920a      	str	r2, [sp, #40]	; 0x28
 8006472:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006474:	18e4      	adds	r4, r4, r3
 8006476:	18d3      	adds	r3, r2, r3
 8006478:	e78c      	b.n	8006394 <_dtoa_r+0x838>
 800647a:	0003      	movs	r3, r0
 800647c:	e7f5      	b.n	800646a <_dtoa_r+0x90e>
 800647e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	dc3d      	bgt.n	8006500 <_dtoa_r+0x9a4>
 8006484:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006486:	2b02      	cmp	r3, #2
 8006488:	dd3a      	ble.n	8006500 <_dtoa_r+0x9a4>
 800648a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648c:	930c      	str	r3, [sp, #48]	; 0x30
 800648e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10c      	bne.n	80064ae <_dtoa_r+0x952>
 8006494:	9904      	ldr	r1, [sp, #16]
 8006496:	2205      	movs	r2, #5
 8006498:	9802      	ldr	r0, [sp, #8]
 800649a:	f000 fbb2 	bl	8006c02 <__multadd>
 800649e:	9004      	str	r0, [sp, #16]
 80064a0:	0001      	movs	r1, r0
 80064a2:	9803      	ldr	r0, [sp, #12]
 80064a4:	f000 fd70 	bl	8006f88 <__mcmp>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	dd00      	ble.n	80064ae <_dtoa_r+0x952>
 80064ac:	e5af      	b.n	800600e <_dtoa_r+0x4b2>
 80064ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064b0:	9d08      	ldr	r5, [sp, #32]
 80064b2:	43df      	mvns	r7, r3
 80064b4:	2300      	movs	r3, #0
 80064b6:	9309      	str	r3, [sp, #36]	; 0x24
 80064b8:	9904      	ldr	r1, [sp, #16]
 80064ba:	9802      	ldr	r0, [sp, #8]
 80064bc:	f000 fb88 	bl	8006bd0 <_Bfree>
 80064c0:	2e00      	cmp	r6, #0
 80064c2:	d100      	bne.n	80064c6 <_dtoa_r+0x96a>
 80064c4:	e69b      	b.n	80061fe <_dtoa_r+0x6a2>
 80064c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <_dtoa_r+0x97c>
 80064cc:	42b3      	cmp	r3, r6
 80064ce:	d003      	beq.n	80064d8 <_dtoa_r+0x97c>
 80064d0:	0019      	movs	r1, r3
 80064d2:	9802      	ldr	r0, [sp, #8]
 80064d4:	f000 fb7c 	bl	8006bd0 <_Bfree>
 80064d8:	0031      	movs	r1, r6
 80064da:	9802      	ldr	r0, [sp, #8]
 80064dc:	f000 fb78 	bl	8006bd0 <_Bfree>
 80064e0:	e68d      	b.n	80061fe <_dtoa_r+0x6a2>
 80064e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064e4:	9304      	str	r3, [sp, #16]
 80064e6:	001e      	movs	r6, r3
 80064e8:	e7e1      	b.n	80064ae <_dtoa_r+0x952>
 80064ea:	2300      	movs	r3, #0
 80064ec:	e7fa      	b.n	80064e4 <_dtoa_r+0x988>
 80064ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064f0:	0037      	movs	r7, r6
 80064f2:	9304      	str	r3, [sp, #16]
 80064f4:	001e      	movs	r6, r3
 80064f6:	e58a      	b.n	800600e <_dtoa_r+0x4b2>
 80064f8:	40240000 	.word	0x40240000
 80064fc:	00000433 	.word	0x00000433
 8006500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006502:	2b00      	cmp	r3, #0
 8006504:	d100      	bne.n	8006508 <_dtoa_r+0x9ac>
 8006506:	e0b2      	b.n	800666e <_dtoa_r+0xb12>
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	930c      	str	r3, [sp, #48]	; 0x30
 800650c:	2c00      	cmp	r4, #0
 800650e:	dd05      	ble.n	800651c <_dtoa_r+0x9c0>
 8006510:	0031      	movs	r1, r6
 8006512:	0022      	movs	r2, r4
 8006514:	9802      	ldr	r0, [sp, #8]
 8006516:	f000 fce5 	bl	8006ee4 <__lshift>
 800651a:	0006      	movs	r6, r0
 800651c:	0030      	movs	r0, r6
 800651e:	2d00      	cmp	r5, #0
 8006520:	d011      	beq.n	8006546 <_dtoa_r+0x9ea>
 8006522:	6871      	ldr	r1, [r6, #4]
 8006524:	9802      	ldr	r0, [sp, #8]
 8006526:	f000 fb1b 	bl	8006b60 <_Balloc>
 800652a:	0031      	movs	r1, r6
 800652c:	0004      	movs	r4, r0
 800652e:	6933      	ldr	r3, [r6, #16]
 8006530:	310c      	adds	r1, #12
 8006532:	1c9a      	adds	r2, r3, #2
 8006534:	0092      	lsls	r2, r2, #2
 8006536:	300c      	adds	r0, #12
 8006538:	f000 fb09 	bl	8006b4e <memcpy>
 800653c:	2201      	movs	r2, #1
 800653e:	0021      	movs	r1, r4
 8006540:	9802      	ldr	r0, [sp, #8]
 8006542:	f000 fccf 	bl	8006ee4 <__lshift>
 8006546:	9609      	str	r6, [sp, #36]	; 0x24
 8006548:	0006      	movs	r6, r0
 800654a:	9b08      	ldr	r3, [sp, #32]
 800654c:	930a      	str	r3, [sp, #40]	; 0x28
 800654e:	9904      	ldr	r1, [sp, #16]
 8006550:	9803      	ldr	r0, [sp, #12]
 8006552:	f7ff fa7d 	bl	8005a50 <quorem>
 8006556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006558:	900d      	str	r0, [sp, #52]	; 0x34
 800655a:	0004      	movs	r4, r0
 800655c:	9803      	ldr	r0, [sp, #12]
 800655e:	f000 fd13 	bl	8006f88 <__mcmp>
 8006562:	0032      	movs	r2, r6
 8006564:	9010      	str	r0, [sp, #64]	; 0x40
 8006566:	9904      	ldr	r1, [sp, #16]
 8006568:	9802      	ldr	r0, [sp, #8]
 800656a:	f000 fd27 	bl	8006fbc <__mdiff>
 800656e:	2301      	movs	r3, #1
 8006570:	930b      	str	r3, [sp, #44]	; 0x2c
 8006572:	68c3      	ldr	r3, [r0, #12]
 8006574:	3430      	adds	r4, #48	; 0x30
 8006576:	0005      	movs	r5, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <_dtoa_r+0xa2a>
 800657c:	0001      	movs	r1, r0
 800657e:	9803      	ldr	r0, [sp, #12]
 8006580:	f000 fd02 	bl	8006f88 <__mcmp>
 8006584:	900b      	str	r0, [sp, #44]	; 0x2c
 8006586:	0029      	movs	r1, r5
 8006588:	9802      	ldr	r0, [sp, #8]
 800658a:	f000 fb21 	bl	8006bd0 <_Bfree>
 800658e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006590:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006592:	4313      	orrs	r3, r2
 8006594:	d10e      	bne.n	80065b4 <_dtoa_r+0xa58>
 8006596:	9a06      	ldr	r2, [sp, #24]
 8006598:	3301      	adds	r3, #1
 800659a:	4213      	tst	r3, r2
 800659c:	d10a      	bne.n	80065b4 <_dtoa_r+0xa58>
 800659e:	2c39      	cmp	r4, #57	; 0x39
 80065a0:	d026      	beq.n	80065f0 <_dtoa_r+0xa94>
 80065a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dd01      	ble.n	80065ac <_dtoa_r+0xa50>
 80065a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80065aa:	3431      	adds	r4, #49	; 0x31
 80065ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ae:	1c5d      	adds	r5, r3, #1
 80065b0:	701c      	strb	r4, [r3, #0]
 80065b2:	e781      	b.n	80064b8 <_dtoa_r+0x95c>
 80065b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	db07      	blt.n	80065ca <_dtoa_r+0xa6e>
 80065ba:	001d      	movs	r5, r3
 80065bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065be:	431d      	orrs	r5, r3
 80065c0:	d122      	bne.n	8006608 <_dtoa_r+0xaac>
 80065c2:	2301      	movs	r3, #1
 80065c4:	9a06      	ldr	r2, [sp, #24]
 80065c6:	4213      	tst	r3, r2
 80065c8:	d11e      	bne.n	8006608 <_dtoa_r+0xaac>
 80065ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dded      	ble.n	80065ac <_dtoa_r+0xa50>
 80065d0:	9903      	ldr	r1, [sp, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	9802      	ldr	r0, [sp, #8]
 80065d6:	f000 fc85 	bl	8006ee4 <__lshift>
 80065da:	9904      	ldr	r1, [sp, #16]
 80065dc:	9003      	str	r0, [sp, #12]
 80065de:	f000 fcd3 	bl	8006f88 <__mcmp>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	dc02      	bgt.n	80065ec <_dtoa_r+0xa90>
 80065e6:	d1e1      	bne.n	80065ac <_dtoa_r+0xa50>
 80065e8:	07e3      	lsls	r3, r4, #31
 80065ea:	d5df      	bpl.n	80065ac <_dtoa_r+0xa50>
 80065ec:	2c39      	cmp	r4, #57	; 0x39
 80065ee:	d1db      	bne.n	80065a8 <_dtoa_r+0xa4c>
 80065f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f4:	1c5d      	adds	r5, r3, #1
 80065f6:	2339      	movs	r3, #57	; 0x39
 80065f8:	7013      	strb	r3, [r2, #0]
 80065fa:	1e6b      	subs	r3, r5, #1
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	2a39      	cmp	r2, #57	; 0x39
 8006600:	d067      	beq.n	80066d2 <_dtoa_r+0xb76>
 8006602:	3201      	adds	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e757      	b.n	80064b8 <_dtoa_r+0x95c>
 8006608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660a:	1c5d      	adds	r5, r3, #1
 800660c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800660e:	2b00      	cmp	r3, #0
 8006610:	dd04      	ble.n	800661c <_dtoa_r+0xac0>
 8006612:	2c39      	cmp	r4, #57	; 0x39
 8006614:	d0ec      	beq.n	80065f0 <_dtoa_r+0xa94>
 8006616:	3401      	adds	r4, #1
 8006618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800661a:	e7c9      	b.n	80065b0 <_dtoa_r+0xa54>
 800661c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800661e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006620:	701c      	strb	r4, [r3, #0]
 8006622:	9b08      	ldr	r3, [sp, #32]
 8006624:	1aeb      	subs	r3, r5, r3
 8006626:	4293      	cmp	r3, r2
 8006628:	d03e      	beq.n	80066a8 <_dtoa_r+0xb4c>
 800662a:	2300      	movs	r3, #0
 800662c:	220a      	movs	r2, #10
 800662e:	9903      	ldr	r1, [sp, #12]
 8006630:	9802      	ldr	r0, [sp, #8]
 8006632:	f000 fae6 	bl	8006c02 <__multadd>
 8006636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006638:	9003      	str	r0, [sp, #12]
 800663a:	42b3      	cmp	r3, r6
 800663c:	d109      	bne.n	8006652 <_dtoa_r+0xaf6>
 800663e:	2300      	movs	r3, #0
 8006640:	220a      	movs	r2, #10
 8006642:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006644:	9802      	ldr	r0, [sp, #8]
 8006646:	f000 fadc 	bl	8006c02 <__multadd>
 800664a:	9009      	str	r0, [sp, #36]	; 0x24
 800664c:	0006      	movs	r6, r0
 800664e:	950a      	str	r5, [sp, #40]	; 0x28
 8006650:	e77d      	b.n	800654e <_dtoa_r+0x9f2>
 8006652:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006654:	2300      	movs	r3, #0
 8006656:	220a      	movs	r2, #10
 8006658:	9802      	ldr	r0, [sp, #8]
 800665a:	f000 fad2 	bl	8006c02 <__multadd>
 800665e:	2300      	movs	r3, #0
 8006660:	9009      	str	r0, [sp, #36]	; 0x24
 8006662:	220a      	movs	r2, #10
 8006664:	0031      	movs	r1, r6
 8006666:	9802      	ldr	r0, [sp, #8]
 8006668:	f000 facb 	bl	8006c02 <__multadd>
 800666c:	e7ee      	b.n	800664c <_dtoa_r+0xaf0>
 800666e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006670:	930c      	str	r3, [sp, #48]	; 0x30
 8006672:	9b08      	ldr	r3, [sp, #32]
 8006674:	9306      	str	r3, [sp, #24]
 8006676:	9904      	ldr	r1, [sp, #16]
 8006678:	9803      	ldr	r0, [sp, #12]
 800667a:	f7ff f9e9 	bl	8005a50 <quorem>
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	3030      	adds	r0, #48	; 0x30
 8006682:	1c5d      	adds	r5, r3, #1
 8006684:	7018      	strb	r0, [r3, #0]
 8006686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	0004      	movs	r4, r0
 800668c:	1aeb      	subs	r3, r5, r3
 800668e:	429a      	cmp	r2, r3
 8006690:	dd08      	ble.n	80066a4 <_dtoa_r+0xb48>
 8006692:	2300      	movs	r3, #0
 8006694:	220a      	movs	r2, #10
 8006696:	9903      	ldr	r1, [sp, #12]
 8006698:	9802      	ldr	r0, [sp, #8]
 800669a:	f000 fab2 	bl	8006c02 <__multadd>
 800669e:	9506      	str	r5, [sp, #24]
 80066a0:	9003      	str	r0, [sp, #12]
 80066a2:	e7e8      	b.n	8006676 <_dtoa_r+0xb1a>
 80066a4:	2300      	movs	r3, #0
 80066a6:	9309      	str	r3, [sp, #36]	; 0x24
 80066a8:	9903      	ldr	r1, [sp, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	9802      	ldr	r0, [sp, #8]
 80066ae:	f000 fc19 	bl	8006ee4 <__lshift>
 80066b2:	9904      	ldr	r1, [sp, #16]
 80066b4:	9003      	str	r0, [sp, #12]
 80066b6:	f000 fc67 	bl	8006f88 <__mcmp>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	dc9d      	bgt.n	80065fa <_dtoa_r+0xa9e>
 80066be:	d101      	bne.n	80066c4 <_dtoa_r+0xb68>
 80066c0:	07e3      	lsls	r3, r4, #31
 80066c2:	d49a      	bmi.n	80065fa <_dtoa_r+0xa9e>
 80066c4:	1e6b      	subs	r3, r5, #1
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	2a30      	cmp	r2, #48	; 0x30
 80066ca:	d000      	beq.n	80066ce <_dtoa_r+0xb72>
 80066cc:	e6f4      	b.n	80064b8 <_dtoa_r+0x95c>
 80066ce:	001d      	movs	r5, r3
 80066d0:	e7f8      	b.n	80066c4 <_dtoa_r+0xb68>
 80066d2:	9a08      	ldr	r2, [sp, #32]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d103      	bne.n	80066e0 <_dtoa_r+0xb84>
 80066d8:	2331      	movs	r3, #49	; 0x31
 80066da:	3701      	adds	r7, #1
 80066dc:	7013      	strb	r3, [r2, #0]
 80066de:	e6eb      	b.n	80064b8 <_dtoa_r+0x95c>
 80066e0:	001d      	movs	r5, r3
 80066e2:	e78a      	b.n	80065fa <_dtoa_r+0xa9e>
 80066e4:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <_dtoa_r+0xbb8>)
 80066e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066e8:	9308      	str	r3, [sp, #32]
 80066ea:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <_dtoa_r+0xbbc>)
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	d001      	beq.n	80066f4 <_dtoa_r+0xb98>
 80066f0:	f7ff fa77 	bl	8005be2 <_dtoa_r+0x86>
 80066f4:	f7ff fa77 	bl	8005be6 <_dtoa_r+0x8a>
 80066f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	dc00      	bgt.n	8006700 <_dtoa_r+0xba4>
 80066fe:	e621      	b.n	8006344 <_dtoa_r+0x7e8>
 8006700:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8006702:	2001      	movs	r0, #1
 8006704:	e635      	b.n	8006372 <_dtoa_r+0x816>
 8006706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	dcb2      	bgt.n	8006672 <_dtoa_r+0xb16>
 800670c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800670e:	2b02      	cmp	r3, #2
 8006710:	ddaf      	ble.n	8006672 <_dtoa_r+0xb16>
 8006712:	e6bc      	b.n	800648e <_dtoa_r+0x932>
 8006714:	08007b54 	.word	0x08007b54
 8006718:	08007b5c 	.word	0x08007b5c

0800671c <__sflush_r>:
 800671c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800671e:	898a      	ldrh	r2, [r1, #12]
 8006720:	0005      	movs	r5, r0
 8006722:	000c      	movs	r4, r1
 8006724:	0713      	lsls	r3, r2, #28
 8006726:	d460      	bmi.n	80067ea <__sflush_r+0xce>
 8006728:	684b      	ldr	r3, [r1, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dc04      	bgt.n	8006738 <__sflush_r+0x1c>
 800672e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	dc01      	bgt.n	8006738 <__sflush_r+0x1c>
 8006734:	2000      	movs	r0, #0
 8006736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006738:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800673a:	2f00      	cmp	r7, #0
 800673c:	d0fa      	beq.n	8006734 <__sflush_r+0x18>
 800673e:	2300      	movs	r3, #0
 8006740:	682e      	ldr	r6, [r5, #0]
 8006742:	602b      	str	r3, [r5, #0]
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	015b      	lsls	r3, r3, #5
 8006748:	6a21      	ldr	r1, [r4, #32]
 800674a:	401a      	ands	r2, r3
 800674c:	d034      	beq.n	80067b8 <__sflush_r+0x9c>
 800674e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	075b      	lsls	r3, r3, #29
 8006754:	d506      	bpl.n	8006764 <__sflush_r+0x48>
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	1ac0      	subs	r0, r0, r3
 800675a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <__sflush_r+0x48>
 8006760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006762:	1ac0      	subs	r0, r0, r3
 8006764:	0002      	movs	r2, r0
 8006766:	6a21      	ldr	r1, [r4, #32]
 8006768:	2300      	movs	r3, #0
 800676a:	0028      	movs	r0, r5
 800676c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800676e:	47b8      	blx	r7
 8006770:	89a1      	ldrh	r1, [r4, #12]
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d106      	bne.n	8006784 <__sflush_r+0x68>
 8006776:	682b      	ldr	r3, [r5, #0]
 8006778:	2b1d      	cmp	r3, #29
 800677a:	d830      	bhi.n	80067de <__sflush_r+0xc2>
 800677c:	4a2b      	ldr	r2, [pc, #172]	; (800682c <__sflush_r+0x110>)
 800677e:	40da      	lsrs	r2, r3
 8006780:	07d3      	lsls	r3, r2, #31
 8006782:	d52c      	bpl.n	80067de <__sflush_r+0xc2>
 8006784:	2300      	movs	r3, #0
 8006786:	6063      	str	r3, [r4, #4]
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	04cb      	lsls	r3, r1, #19
 800678e:	d505      	bpl.n	800679c <__sflush_r+0x80>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <__sflush_r+0x7e>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d100      	bne.n	800679c <__sflush_r+0x80>
 800679a:	6560      	str	r0, [r4, #84]	; 0x54
 800679c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800679e:	602e      	str	r6, [r5, #0]
 80067a0:	2900      	cmp	r1, #0
 80067a2:	d0c7      	beq.n	8006734 <__sflush_r+0x18>
 80067a4:	0023      	movs	r3, r4
 80067a6:	3344      	adds	r3, #68	; 0x44
 80067a8:	4299      	cmp	r1, r3
 80067aa:	d002      	beq.n	80067b2 <__sflush_r+0x96>
 80067ac:	0028      	movs	r0, r5
 80067ae:	f000 fccb 	bl	8007148 <_free_r>
 80067b2:	2000      	movs	r0, #0
 80067b4:	6360      	str	r0, [r4, #52]	; 0x34
 80067b6:	e7be      	b.n	8006736 <__sflush_r+0x1a>
 80067b8:	2301      	movs	r3, #1
 80067ba:	0028      	movs	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	d1c6      	bne.n	8006750 <__sflush_r+0x34>
 80067c2:	682b      	ldr	r3, [r5, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0c3      	beq.n	8006750 <__sflush_r+0x34>
 80067c8:	2b1d      	cmp	r3, #29
 80067ca:	d001      	beq.n	80067d0 <__sflush_r+0xb4>
 80067cc:	2b16      	cmp	r3, #22
 80067ce:	d101      	bne.n	80067d4 <__sflush_r+0xb8>
 80067d0:	602e      	str	r6, [r5, #0]
 80067d2:	e7af      	b.n	8006734 <__sflush_r+0x18>
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	89a2      	ldrh	r2, [r4, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	e7ab      	b.n	8006736 <__sflush_r+0x1a>
 80067de:	2340      	movs	r3, #64	; 0x40
 80067e0:	430b      	orrs	r3, r1
 80067e2:	2001      	movs	r0, #1
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	4240      	negs	r0, r0
 80067e8:	e7a5      	b.n	8006736 <__sflush_r+0x1a>
 80067ea:	690f      	ldr	r7, [r1, #16]
 80067ec:	2f00      	cmp	r7, #0
 80067ee:	d0a1      	beq.n	8006734 <__sflush_r+0x18>
 80067f0:	680b      	ldr	r3, [r1, #0]
 80067f2:	600f      	str	r7, [r1, #0]
 80067f4:	1bdb      	subs	r3, r3, r7
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	2300      	movs	r3, #0
 80067fa:	0792      	lsls	r2, r2, #30
 80067fc:	d100      	bne.n	8006800 <__sflush_r+0xe4>
 80067fe:	694b      	ldr	r3, [r1, #20]
 8006800:	60a3      	str	r3, [r4, #8]
 8006802:	9b01      	ldr	r3, [sp, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	dc00      	bgt.n	800680a <__sflush_r+0xee>
 8006808:	e794      	b.n	8006734 <__sflush_r+0x18>
 800680a:	9b01      	ldr	r3, [sp, #4]
 800680c:	003a      	movs	r2, r7
 800680e:	6a21      	ldr	r1, [r4, #32]
 8006810:	0028      	movs	r0, r5
 8006812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006814:	47b0      	blx	r6
 8006816:	2800      	cmp	r0, #0
 8006818:	dc03      	bgt.n	8006822 <__sflush_r+0x106>
 800681a:	2340      	movs	r3, #64	; 0x40
 800681c:	89a2      	ldrh	r2, [r4, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	e7df      	b.n	80067e2 <__sflush_r+0xc6>
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	183f      	adds	r7, r7, r0
 8006826:	1a1b      	subs	r3, r3, r0
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	e7ea      	b.n	8006802 <__sflush_r+0xe6>
 800682c:	20400001 	.word	0x20400001

08006830 <_fflush_r>:
 8006830:	690b      	ldr	r3, [r1, #16]
 8006832:	b570      	push	{r4, r5, r6, lr}
 8006834:	0005      	movs	r5, r0
 8006836:	000c      	movs	r4, r1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <_fflush_r+0x10>
 800683c:	2000      	movs	r0, #0
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	2800      	cmp	r0, #0
 8006842:	d004      	beq.n	800684e <_fflush_r+0x1e>
 8006844:	6983      	ldr	r3, [r0, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <_fflush_r+0x1e>
 800684a:	f000 f85f 	bl	800690c <__sinit>
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <_fflush_r+0x4c>)
 8006850:	429c      	cmp	r4, r3
 8006852:	d109      	bne.n	8006868 <_fflush_r+0x38>
 8006854:	686c      	ldr	r4, [r5, #4]
 8006856:	220c      	movs	r2, #12
 8006858:	5ea3      	ldrsh	r3, [r4, r2]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0ee      	beq.n	800683c <_fflush_r+0xc>
 800685e:	0021      	movs	r1, r4
 8006860:	0028      	movs	r0, r5
 8006862:	f7ff ff5b 	bl	800671c <__sflush_r>
 8006866:	e7ea      	b.n	800683e <_fflush_r+0xe>
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <_fflush_r+0x50>)
 800686a:	429c      	cmp	r4, r3
 800686c:	d101      	bne.n	8006872 <_fflush_r+0x42>
 800686e:	68ac      	ldr	r4, [r5, #8]
 8006870:	e7f1      	b.n	8006856 <_fflush_r+0x26>
 8006872:	4b04      	ldr	r3, [pc, #16]	; (8006884 <_fflush_r+0x54>)
 8006874:	429c      	cmp	r4, r3
 8006876:	d1ee      	bne.n	8006856 <_fflush_r+0x26>
 8006878:	68ec      	ldr	r4, [r5, #12]
 800687a:	e7ec      	b.n	8006856 <_fflush_r+0x26>
 800687c:	08007b84 	.word	0x08007b84
 8006880:	08007ba4 	.word	0x08007ba4
 8006884:	08007b64 	.word	0x08007b64

08006888 <std>:
 8006888:	2300      	movs	r3, #0
 800688a:	b510      	push	{r4, lr}
 800688c:	0004      	movs	r4, r0
 800688e:	6003      	str	r3, [r0, #0]
 8006890:	6043      	str	r3, [r0, #4]
 8006892:	6083      	str	r3, [r0, #8]
 8006894:	8181      	strh	r1, [r0, #12]
 8006896:	6643      	str	r3, [r0, #100]	; 0x64
 8006898:	81c2      	strh	r2, [r0, #14]
 800689a:	6103      	str	r3, [r0, #16]
 800689c:	6143      	str	r3, [r0, #20]
 800689e:	6183      	str	r3, [r0, #24]
 80068a0:	0019      	movs	r1, r3
 80068a2:	2208      	movs	r2, #8
 80068a4:	305c      	adds	r0, #92	; 0x5c
 80068a6:	f7fe fafd 	bl	8004ea4 <memset>
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <std+0x38>)
 80068ac:	6224      	str	r4, [r4, #32]
 80068ae:	6263      	str	r3, [r4, #36]	; 0x24
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <std+0x3c>)
 80068b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <std+0x40>)
 80068b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068b8:	4b04      	ldr	r3, [pc, #16]	; (80068cc <std+0x44>)
 80068ba:	6323      	str	r3, [r4, #48]	; 0x30
 80068bc:	bd10      	pop	{r4, pc}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	080077f9 	.word	0x080077f9
 80068c4:	08007821 	.word	0x08007821
 80068c8:	08007859 	.word	0x08007859
 80068cc:	08007885 	.word	0x08007885

080068d0 <_cleanup_r>:
 80068d0:	b510      	push	{r4, lr}
 80068d2:	4902      	ldr	r1, [pc, #8]	; (80068dc <_cleanup_r+0xc>)
 80068d4:	f000 f88c 	bl	80069f0 <_fwalk_reent>
 80068d8:	bd10      	pop	{r4, pc}
 80068da:	46c0      	nop			; (mov r8, r8)
 80068dc:	08006831 	.word	0x08006831

080068e0 <__sfmoreglue>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	2568      	movs	r5, #104	; 0x68
 80068e4:	1e4a      	subs	r2, r1, #1
 80068e6:	4355      	muls	r5, r2
 80068e8:	000e      	movs	r6, r1
 80068ea:	0029      	movs	r1, r5
 80068ec:	3174      	adds	r1, #116	; 0x74
 80068ee:	f000 fc75 	bl	80071dc <_malloc_r>
 80068f2:	1e04      	subs	r4, r0, #0
 80068f4:	d008      	beq.n	8006908 <__sfmoreglue+0x28>
 80068f6:	2100      	movs	r1, #0
 80068f8:	002a      	movs	r2, r5
 80068fa:	6001      	str	r1, [r0, #0]
 80068fc:	6046      	str	r6, [r0, #4]
 80068fe:	300c      	adds	r0, #12
 8006900:	60a0      	str	r0, [r4, #8]
 8006902:	3268      	adds	r2, #104	; 0x68
 8006904:	f7fe face 	bl	8004ea4 <memset>
 8006908:	0020      	movs	r0, r4
 800690a:	bd70      	pop	{r4, r5, r6, pc}

0800690c <__sinit>:
 800690c:	6983      	ldr	r3, [r0, #24]
 800690e:	b513      	push	{r0, r1, r4, lr}
 8006910:	0004      	movs	r4, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d128      	bne.n	8006968 <__sinit+0x5c>
 8006916:	6483      	str	r3, [r0, #72]	; 0x48
 8006918:	64c3      	str	r3, [r0, #76]	; 0x4c
 800691a:	6503      	str	r3, [r0, #80]	; 0x50
 800691c:	4b13      	ldr	r3, [pc, #76]	; (800696c <__sinit+0x60>)
 800691e:	4a14      	ldr	r2, [pc, #80]	; (8006970 <__sinit+0x64>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6282      	str	r2, [r0, #40]	; 0x28
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	4298      	cmp	r0, r3
 8006928:	d101      	bne.n	800692e <__sinit+0x22>
 800692a:	2301      	movs	r3, #1
 800692c:	6183      	str	r3, [r0, #24]
 800692e:	0020      	movs	r0, r4
 8006930:	f000 f820 	bl	8006974 <__sfp>
 8006934:	6060      	str	r0, [r4, #4]
 8006936:	0020      	movs	r0, r4
 8006938:	f000 f81c 	bl	8006974 <__sfp>
 800693c:	60a0      	str	r0, [r4, #8]
 800693e:	0020      	movs	r0, r4
 8006940:	f000 f818 	bl	8006974 <__sfp>
 8006944:	2200      	movs	r2, #0
 8006946:	60e0      	str	r0, [r4, #12]
 8006948:	2104      	movs	r1, #4
 800694a:	6860      	ldr	r0, [r4, #4]
 800694c:	f7ff ff9c 	bl	8006888 <std>
 8006950:	2201      	movs	r2, #1
 8006952:	2109      	movs	r1, #9
 8006954:	68a0      	ldr	r0, [r4, #8]
 8006956:	f7ff ff97 	bl	8006888 <std>
 800695a:	2202      	movs	r2, #2
 800695c:	2112      	movs	r1, #18
 800695e:	68e0      	ldr	r0, [r4, #12]
 8006960:	f7ff ff92 	bl	8006888 <std>
 8006964:	2301      	movs	r3, #1
 8006966:	61a3      	str	r3, [r4, #24]
 8006968:	bd13      	pop	{r0, r1, r4, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	08007b1c 	.word	0x08007b1c
 8006970:	080068d1 	.word	0x080068d1

08006974 <__sfp>:
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006976:	4b1c      	ldr	r3, [pc, #112]	; (80069e8 <__sfp+0x74>)
 8006978:	0007      	movs	r7, r0
 800697a:	681e      	ldr	r6, [r3, #0]
 800697c:	69b3      	ldr	r3, [r6, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <__sfp+0x14>
 8006982:	0030      	movs	r0, r6
 8006984:	f7ff ffc2 	bl	800690c <__sinit>
 8006988:	3648      	adds	r6, #72	; 0x48
 800698a:	68b4      	ldr	r4, [r6, #8]
 800698c:	6873      	ldr	r3, [r6, #4]
 800698e:	3b01      	subs	r3, #1
 8006990:	d504      	bpl.n	800699c <__sfp+0x28>
 8006992:	6833      	ldr	r3, [r6, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <__sfp+0x34>
 8006998:	6836      	ldr	r6, [r6, #0]
 800699a:	e7f6      	b.n	800698a <__sfp+0x16>
 800699c:	220c      	movs	r2, #12
 800699e:	5ea5      	ldrsh	r5, [r4, r2]
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	d00d      	beq.n	80069c0 <__sfp+0x4c>
 80069a4:	3468      	adds	r4, #104	; 0x68
 80069a6:	e7f2      	b.n	800698e <__sfp+0x1a>
 80069a8:	2104      	movs	r1, #4
 80069aa:	0038      	movs	r0, r7
 80069ac:	f7ff ff98 	bl	80068e0 <__sfmoreglue>
 80069b0:	6030      	str	r0, [r6, #0]
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d1f0      	bne.n	8006998 <__sfp+0x24>
 80069b6:	230c      	movs	r3, #12
 80069b8:	0004      	movs	r4, r0
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	0020      	movs	r0, r4
 80069be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c0:	0020      	movs	r0, r4
 80069c2:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <__sfp+0x78>)
 80069c4:	6665      	str	r5, [r4, #100]	; 0x64
 80069c6:	6025      	str	r5, [r4, #0]
 80069c8:	6065      	str	r5, [r4, #4]
 80069ca:	60a5      	str	r5, [r4, #8]
 80069cc:	60e3      	str	r3, [r4, #12]
 80069ce:	6125      	str	r5, [r4, #16]
 80069d0:	6165      	str	r5, [r4, #20]
 80069d2:	61a5      	str	r5, [r4, #24]
 80069d4:	2208      	movs	r2, #8
 80069d6:	0029      	movs	r1, r5
 80069d8:	305c      	adds	r0, #92	; 0x5c
 80069da:	f7fe fa63 	bl	8004ea4 <memset>
 80069de:	6365      	str	r5, [r4, #52]	; 0x34
 80069e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80069e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80069e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80069e6:	e7e9      	b.n	80069bc <__sfp+0x48>
 80069e8:	08007b1c 	.word	0x08007b1c
 80069ec:	ffff0001 	.word	0xffff0001

080069f0 <_fwalk_reent>:
 80069f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069f2:	0004      	movs	r4, r0
 80069f4:	0007      	movs	r7, r0
 80069f6:	2600      	movs	r6, #0
 80069f8:	9101      	str	r1, [sp, #4]
 80069fa:	3448      	adds	r4, #72	; 0x48
 80069fc:	2c00      	cmp	r4, #0
 80069fe:	d101      	bne.n	8006a04 <_fwalk_reent+0x14>
 8006a00:	0030      	movs	r0, r6
 8006a02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	68a5      	ldr	r5, [r4, #8]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	9b00      	ldr	r3, [sp, #0]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	d501      	bpl.n	8006a16 <_fwalk_reent+0x26>
 8006a12:	6824      	ldr	r4, [r4, #0]
 8006a14:	e7f2      	b.n	80069fc <_fwalk_reent+0xc>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d908      	bls.n	8006a2e <_fwalk_reent+0x3e>
 8006a1c:	220e      	movs	r2, #14
 8006a1e:	5eab      	ldrsh	r3, [r5, r2]
 8006a20:	3301      	adds	r3, #1
 8006a22:	d004      	beq.n	8006a2e <_fwalk_reent+0x3e>
 8006a24:	0029      	movs	r1, r5
 8006a26:	0038      	movs	r0, r7
 8006a28:	9b01      	ldr	r3, [sp, #4]
 8006a2a:	4798      	blx	r3
 8006a2c:	4306      	orrs	r6, r0
 8006a2e:	3568      	adds	r5, #104	; 0x68
 8006a30:	e7eb      	b.n	8006a0a <_fwalk_reent+0x1a>
	...

08006a34 <_localeconv_r>:
 8006a34:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <_localeconv_r+0x10>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6a18      	ldr	r0, [r3, #32]
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d100      	bne.n	8006a40 <_localeconv_r+0xc>
 8006a3e:	4802      	ldr	r0, [pc, #8]	; (8006a48 <_localeconv_r+0x14>)
 8006a40:	30f0      	adds	r0, #240	; 0xf0
 8006a42:	4770      	bx	lr
 8006a44:	20000010 	.word	0x20000010
 8006a48:	20000074 	.word	0x20000074

08006a4c <__swhatbuf_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	000e      	movs	r6, r1
 8006a50:	001d      	movs	r5, r3
 8006a52:	230e      	movs	r3, #14
 8006a54:	5ec9      	ldrsh	r1, [r1, r3]
 8006a56:	b096      	sub	sp, #88	; 0x58
 8006a58:	0014      	movs	r4, r2
 8006a5a:	2900      	cmp	r1, #0
 8006a5c:	da07      	bge.n	8006a6e <__swhatbuf_r+0x22>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	89b3      	ldrh	r3, [r6, #12]
 8006a64:	061b      	lsls	r3, r3, #24
 8006a66:	d411      	bmi.n	8006a8c <__swhatbuf_r+0x40>
 8006a68:	2380      	movs	r3, #128	; 0x80
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	e00f      	b.n	8006a8e <__swhatbuf_r+0x42>
 8006a6e:	466a      	mov	r2, sp
 8006a70:	f000 ff34 	bl	80078dc <_fstat_r>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	dbf2      	blt.n	8006a5e <__swhatbuf_r+0x12>
 8006a78:	22f0      	movs	r2, #240	; 0xf0
 8006a7a:	9b01      	ldr	r3, [sp, #4]
 8006a7c:	0212      	lsls	r2, r2, #8
 8006a7e:	4013      	ands	r3, r2
 8006a80:	4a05      	ldr	r2, [pc, #20]	; (8006a98 <__swhatbuf_r+0x4c>)
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	425a      	negs	r2, r3
 8006a86:	4153      	adcs	r3, r2
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	e7ed      	b.n	8006a68 <__swhatbuf_r+0x1c>
 8006a8c:	2340      	movs	r3, #64	; 0x40
 8006a8e:	2000      	movs	r0, #0
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	b016      	add	sp, #88	; 0x58
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	ffffe000 	.word	0xffffe000

08006a9c <__smakebuf_r>:
 8006a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a9e:	2602      	movs	r6, #2
 8006aa0:	898b      	ldrh	r3, [r1, #12]
 8006aa2:	0005      	movs	r5, r0
 8006aa4:	000c      	movs	r4, r1
 8006aa6:	4233      	tst	r3, r6
 8006aa8:	d006      	beq.n	8006ab8 <__smakebuf_r+0x1c>
 8006aaa:	0023      	movs	r3, r4
 8006aac:	3347      	adds	r3, #71	; 0x47
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	6123      	str	r3, [r4, #16]
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	6163      	str	r3, [r4, #20]
 8006ab6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006ab8:	ab01      	add	r3, sp, #4
 8006aba:	466a      	mov	r2, sp
 8006abc:	f7ff ffc6 	bl	8006a4c <__swhatbuf_r>
 8006ac0:	9900      	ldr	r1, [sp, #0]
 8006ac2:	0007      	movs	r7, r0
 8006ac4:	0028      	movs	r0, r5
 8006ac6:	f000 fb89 	bl	80071dc <_malloc_r>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d108      	bne.n	8006ae0 <__smakebuf_r+0x44>
 8006ace:	220c      	movs	r2, #12
 8006ad0:	5ea3      	ldrsh	r3, [r4, r2]
 8006ad2:	059a      	lsls	r2, r3, #22
 8006ad4:	d4ef      	bmi.n	8006ab6 <__smakebuf_r+0x1a>
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	4393      	bics	r3, r2
 8006ada:	431e      	orrs	r6, r3
 8006adc:	81a6      	strh	r6, [r4, #12]
 8006ade:	e7e4      	b.n	8006aaa <__smakebuf_r+0xe>
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <__smakebuf_r+0x84>)
 8006ae2:	62ab      	str	r3, [r5, #40]	; 0x28
 8006ae4:	2380      	movs	r3, #128	; 0x80
 8006ae6:	89a2      	ldrh	r2, [r4, #12]
 8006ae8:	6020      	str	r0, [r4, #0]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	9b00      	ldr	r3, [sp, #0]
 8006af0:	6120      	str	r0, [r4, #16]
 8006af2:	6163      	str	r3, [r4, #20]
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <__smakebuf_r+0x7a>
 8006afa:	230e      	movs	r3, #14
 8006afc:	5ee1      	ldrsh	r1, [r4, r3]
 8006afe:	0028      	movs	r0, r5
 8006b00:	f000 fefe 	bl	8007900 <_isatty_r>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d006      	beq.n	8006b16 <__smakebuf_r+0x7a>
 8006b08:	2203      	movs	r2, #3
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	4393      	bics	r3, r2
 8006b0e:	001a      	movs	r2, r3
 8006b10:	2301      	movs	r3, #1
 8006b12:	4313      	orrs	r3, r2
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	89a0      	ldrh	r0, [r4, #12]
 8006b18:	4338      	orrs	r0, r7
 8006b1a:	81a0      	strh	r0, [r4, #12]
 8006b1c:	e7cb      	b.n	8006ab6 <__smakebuf_r+0x1a>
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	080068d1 	.word	0x080068d1

08006b24 <malloc>:
 8006b24:	b510      	push	{r4, lr}
 8006b26:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <malloc+0x10>)
 8006b28:	0001      	movs	r1, r0
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	f000 fb56 	bl	80071dc <_malloc_r>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	20000010 	.word	0x20000010

08006b38 <memchr>:
 8006b38:	b2c9      	uxtb	r1, r1
 8006b3a:	1882      	adds	r2, r0, r2
 8006b3c:	4290      	cmp	r0, r2
 8006b3e:	d101      	bne.n	8006b44 <memchr+0xc>
 8006b40:	2000      	movs	r0, #0
 8006b42:	4770      	bx	lr
 8006b44:	7803      	ldrb	r3, [r0, #0]
 8006b46:	428b      	cmp	r3, r1
 8006b48:	d0fb      	beq.n	8006b42 <memchr+0xa>
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	e7f6      	b.n	8006b3c <memchr+0x4>

08006b4e <memcpy>:
 8006b4e:	2300      	movs	r3, #0
 8006b50:	b510      	push	{r4, lr}
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d100      	bne.n	8006b58 <memcpy+0xa>
 8006b56:	bd10      	pop	{r4, pc}
 8006b58:	5ccc      	ldrb	r4, [r1, r3]
 8006b5a:	54c4      	strb	r4, [r0, r3]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	e7f8      	b.n	8006b52 <memcpy+0x4>

08006b60 <_Balloc>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b64:	0004      	movs	r4, r0
 8006b66:	000d      	movs	r5, r1
 8006b68:	2e00      	cmp	r6, #0
 8006b6a:	d107      	bne.n	8006b7c <_Balloc+0x1c>
 8006b6c:	2010      	movs	r0, #16
 8006b6e:	f7ff ffd9 	bl	8006b24 <malloc>
 8006b72:	6260      	str	r0, [r4, #36]	; 0x24
 8006b74:	6046      	str	r6, [r0, #4]
 8006b76:	6086      	str	r6, [r0, #8]
 8006b78:	6006      	str	r6, [r0, #0]
 8006b7a:	60c6      	str	r6, [r0, #12]
 8006b7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b7e:	68f3      	ldr	r3, [r6, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d013      	beq.n	8006bac <_Balloc+0x4c>
 8006b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b86:	00aa      	lsls	r2, r5, #2
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d118      	bne.n	8006bc4 <_Balloc+0x64>
 8006b92:	2101      	movs	r1, #1
 8006b94:	000e      	movs	r6, r1
 8006b96:	40ae      	lsls	r6, r5
 8006b98:	1d72      	adds	r2, r6, #5
 8006b9a:	0092      	lsls	r2, r2, #2
 8006b9c:	0020      	movs	r0, r4
 8006b9e:	f000 fac5 	bl	800712c <_calloc_r>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d00c      	beq.n	8006bc0 <_Balloc+0x60>
 8006ba6:	6045      	str	r5, [r0, #4]
 8006ba8:	6086      	str	r6, [r0, #8]
 8006baa:	e00d      	b.n	8006bc8 <_Balloc+0x68>
 8006bac:	2221      	movs	r2, #33	; 0x21
 8006bae:	2104      	movs	r1, #4
 8006bb0:	0020      	movs	r0, r4
 8006bb2:	f000 fabb 	bl	800712c <_calloc_r>
 8006bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb8:	60f0      	str	r0, [r6, #12]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e1      	bne.n	8006b84 <_Balloc+0x24>
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	6802      	ldr	r2, [r0, #0]
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	6103      	str	r3, [r0, #16]
 8006bcc:	60c3      	str	r3, [r0, #12]
 8006bce:	e7f8      	b.n	8006bc2 <_Balloc+0x62>

08006bd0 <_Bfree>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006bd4:	0006      	movs	r6, r0
 8006bd6:	000d      	movs	r5, r1
 8006bd8:	2c00      	cmp	r4, #0
 8006bda:	d107      	bne.n	8006bec <_Bfree+0x1c>
 8006bdc:	2010      	movs	r0, #16
 8006bde:	f7ff ffa1 	bl	8006b24 <malloc>
 8006be2:	6270      	str	r0, [r6, #36]	; 0x24
 8006be4:	6044      	str	r4, [r0, #4]
 8006be6:	6084      	str	r4, [r0, #8]
 8006be8:	6004      	str	r4, [r0, #0]
 8006bea:	60c4      	str	r4, [r0, #12]
 8006bec:	2d00      	cmp	r5, #0
 8006bee:	d007      	beq.n	8006c00 <_Bfree+0x30>
 8006bf0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006bf2:	686a      	ldr	r2, [r5, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	0092      	lsls	r2, r2, #2
 8006bf8:	189b      	adds	r3, r3, r2
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	602a      	str	r2, [r5, #0]
 8006bfe:	601d      	str	r5, [r3, #0]
 8006c00:	bd70      	pop	{r4, r5, r6, pc}

08006c02 <__multadd>:
 8006c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c04:	001e      	movs	r6, r3
 8006c06:	2314      	movs	r3, #20
 8006c08:	469c      	mov	ip, r3
 8006c0a:	0007      	movs	r7, r0
 8006c0c:	000c      	movs	r4, r1
 8006c0e:	2000      	movs	r0, #0
 8006c10:	690d      	ldr	r5, [r1, #16]
 8006c12:	448c      	add	ip, r1
 8006c14:	4663      	mov	r3, ip
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3001      	adds	r0, #1
 8006c1a:	b299      	uxth	r1, r3
 8006c1c:	4663      	mov	r3, ip
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4351      	muls	r1, r2
 8006c22:	0c1b      	lsrs	r3, r3, #16
 8006c24:	4353      	muls	r3, r2
 8006c26:	1989      	adds	r1, r1, r6
 8006c28:	0c0e      	lsrs	r6, r1, #16
 8006c2a:	199b      	adds	r3, r3, r6
 8006c2c:	b289      	uxth	r1, r1
 8006c2e:	0c1e      	lsrs	r6, r3, #16
 8006c30:	041b      	lsls	r3, r3, #16
 8006c32:	185b      	adds	r3, r3, r1
 8006c34:	4661      	mov	r1, ip
 8006c36:	c108      	stmia	r1!, {r3}
 8006c38:	468c      	mov	ip, r1
 8006c3a:	4285      	cmp	r5, r0
 8006c3c:	dcea      	bgt.n	8006c14 <__multadd+0x12>
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	d01b      	beq.n	8006c7a <__multadd+0x78>
 8006c42:	68a3      	ldr	r3, [r4, #8]
 8006c44:	42ab      	cmp	r3, r5
 8006c46:	dc12      	bgt.n	8006c6e <__multadd+0x6c>
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	0038      	movs	r0, r7
 8006c4c:	1c59      	adds	r1, r3, #1
 8006c4e:	f7ff ff87 	bl	8006b60 <_Balloc>
 8006c52:	0021      	movs	r1, r4
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	9001      	str	r0, [sp, #4]
 8006c58:	1c9a      	adds	r2, r3, #2
 8006c5a:	0092      	lsls	r2, r2, #2
 8006c5c:	310c      	adds	r1, #12
 8006c5e:	300c      	adds	r0, #12
 8006c60:	f7ff ff75 	bl	8006b4e <memcpy>
 8006c64:	0021      	movs	r1, r4
 8006c66:	0038      	movs	r0, r7
 8006c68:	f7ff ffb2 	bl	8006bd0 <_Bfree>
 8006c6c:	9c01      	ldr	r4, [sp, #4]
 8006c6e:	1d2b      	adds	r3, r5, #4
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	18e3      	adds	r3, r4, r3
 8006c74:	3501      	adds	r5, #1
 8006c76:	605e      	str	r6, [r3, #4]
 8006c78:	6125      	str	r5, [r4, #16]
 8006c7a:	0020      	movs	r0, r4
 8006c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006c7e <__hi0bits>:
 8006c7e:	0003      	movs	r3, r0
 8006c80:	0c02      	lsrs	r2, r0, #16
 8006c82:	2000      	movs	r0, #0
 8006c84:	4282      	cmp	r2, r0
 8006c86:	d101      	bne.n	8006c8c <__hi0bits+0xe>
 8006c88:	041b      	lsls	r3, r3, #16
 8006c8a:	3010      	adds	r0, #16
 8006c8c:	0e1a      	lsrs	r2, r3, #24
 8006c8e:	d101      	bne.n	8006c94 <__hi0bits+0x16>
 8006c90:	3008      	adds	r0, #8
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	0f1a      	lsrs	r2, r3, #28
 8006c96:	d101      	bne.n	8006c9c <__hi0bits+0x1e>
 8006c98:	3004      	adds	r0, #4
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	0f9a      	lsrs	r2, r3, #30
 8006c9e:	d101      	bne.n	8006ca4 <__hi0bits+0x26>
 8006ca0:	3002      	adds	r0, #2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	db03      	blt.n	8006cb0 <__hi0bits+0x32>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	d400      	bmi.n	8006cb0 <__hi0bits+0x32>
 8006cae:	2020      	movs	r0, #32
 8006cb0:	4770      	bx	lr

08006cb2 <__lo0bits>:
 8006cb2:	2207      	movs	r2, #7
 8006cb4:	6803      	ldr	r3, [r0, #0]
 8006cb6:	b510      	push	{r4, lr}
 8006cb8:	0001      	movs	r1, r0
 8006cba:	401a      	ands	r2, r3
 8006cbc:	d00d      	beq.n	8006cda <__lo0bits+0x28>
 8006cbe:	2401      	movs	r4, #1
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	4223      	tst	r3, r4
 8006cc4:	d105      	bne.n	8006cd2 <__lo0bits+0x20>
 8006cc6:	3002      	adds	r0, #2
 8006cc8:	4203      	tst	r3, r0
 8006cca:	d003      	beq.n	8006cd4 <__lo0bits+0x22>
 8006ccc:	40e3      	lsrs	r3, r4
 8006cce:	0020      	movs	r0, r4
 8006cd0:	600b      	str	r3, [r1, #0]
 8006cd2:	bd10      	pop	{r4, pc}
 8006cd4:	089b      	lsrs	r3, r3, #2
 8006cd6:	600b      	str	r3, [r1, #0]
 8006cd8:	e7fb      	b.n	8006cd2 <__lo0bits+0x20>
 8006cda:	b29c      	uxth	r4, r3
 8006cdc:	0010      	movs	r0, r2
 8006cde:	2c00      	cmp	r4, #0
 8006ce0:	d101      	bne.n	8006ce6 <__lo0bits+0x34>
 8006ce2:	2010      	movs	r0, #16
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	d101      	bne.n	8006cf0 <__lo0bits+0x3e>
 8006cec:	3008      	adds	r0, #8
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	071a      	lsls	r2, r3, #28
 8006cf2:	d101      	bne.n	8006cf8 <__lo0bits+0x46>
 8006cf4:	3004      	adds	r0, #4
 8006cf6:	091b      	lsrs	r3, r3, #4
 8006cf8:	079a      	lsls	r2, r3, #30
 8006cfa:	d101      	bne.n	8006d00 <__lo0bits+0x4e>
 8006cfc:	3002      	adds	r0, #2
 8006cfe:	089b      	lsrs	r3, r3, #2
 8006d00:	07da      	lsls	r2, r3, #31
 8006d02:	d4e8      	bmi.n	8006cd6 <__lo0bits+0x24>
 8006d04:	085b      	lsrs	r3, r3, #1
 8006d06:	d001      	beq.n	8006d0c <__lo0bits+0x5a>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	e7e4      	b.n	8006cd6 <__lo0bits+0x24>
 8006d0c:	2020      	movs	r0, #32
 8006d0e:	e7e0      	b.n	8006cd2 <__lo0bits+0x20>

08006d10 <__i2b>:
 8006d10:	b510      	push	{r4, lr}
 8006d12:	000c      	movs	r4, r1
 8006d14:	2101      	movs	r1, #1
 8006d16:	f7ff ff23 	bl	8006b60 <_Balloc>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	6144      	str	r4, [r0, #20]
 8006d1e:	6103      	str	r3, [r0, #16]
 8006d20:	bd10      	pop	{r4, pc}

08006d22 <__multiply>:
 8006d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d24:	690b      	ldr	r3, [r1, #16]
 8006d26:	0014      	movs	r4, r2
 8006d28:	6912      	ldr	r2, [r2, #16]
 8006d2a:	b089      	sub	sp, #36	; 0x24
 8006d2c:	000d      	movs	r5, r1
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	da01      	bge.n	8006d36 <__multiply+0x14>
 8006d32:	0025      	movs	r5, r4
 8006d34:	000c      	movs	r4, r1
 8006d36:	692f      	ldr	r7, [r5, #16]
 8006d38:	6926      	ldr	r6, [r4, #16]
 8006d3a:	6869      	ldr	r1, [r5, #4]
 8006d3c:	19bb      	adds	r3, r7, r6
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	68ab      	ldr	r3, [r5, #8]
 8006d42:	19ba      	adds	r2, r7, r6
 8006d44:	4293      	cmp	r3, r2
 8006d46:	da00      	bge.n	8006d4a <__multiply+0x28>
 8006d48:	3101      	adds	r1, #1
 8006d4a:	f7ff ff09 	bl	8006b60 <_Balloc>
 8006d4e:	0002      	movs	r2, r0
 8006d50:	19bb      	adds	r3, r7, r6
 8006d52:	3214      	adds	r2, #20
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	18d3      	adds	r3, r2, r3
 8006d58:	469c      	mov	ip, r3
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	0013      	movs	r3, r2
 8006d5e:	9004      	str	r0, [sp, #16]
 8006d60:	4563      	cmp	r3, ip
 8006d62:	d31d      	bcc.n	8006da0 <__multiply+0x7e>
 8006d64:	3514      	adds	r5, #20
 8006d66:	00bf      	lsls	r7, r7, #2
 8006d68:	19eb      	adds	r3, r5, r7
 8006d6a:	3414      	adds	r4, #20
 8006d6c:	00b6      	lsls	r6, r6, #2
 8006d6e:	9305      	str	r3, [sp, #20]
 8006d70:	19a3      	adds	r3, r4, r6
 8006d72:	9503      	str	r5, [sp, #12]
 8006d74:	9401      	str	r4, [sp, #4]
 8006d76:	9307      	str	r3, [sp, #28]
 8006d78:	9b07      	ldr	r3, [sp, #28]
 8006d7a:	9901      	ldr	r1, [sp, #4]
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	d311      	bcc.n	8006da4 <__multiply+0x82>
 8006d80:	9b02      	ldr	r3, [sp, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	dd06      	ble.n	8006d94 <__multiply+0x72>
 8006d86:	2304      	movs	r3, #4
 8006d88:	425b      	negs	r3, r3
 8006d8a:	449c      	add	ip, r3
 8006d8c:	4663      	mov	r3, ip
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d051      	beq.n	8006e38 <__multiply+0x116>
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	9a02      	ldr	r2, [sp, #8]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	611a      	str	r2, [r3, #16]
 8006d9c:	b009      	add	sp, #36	; 0x24
 8006d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da0:	c302      	stmia	r3!, {r1}
 8006da2:	e7dd      	b.n	8006d60 <__multiply+0x3e>
 8006da4:	9b01      	ldr	r3, [sp, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	b298      	uxth	r0, r3
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d01c      	beq.n	8006de8 <__multiply+0xc6>
 8006dae:	0015      	movs	r5, r2
 8006db0:	2600      	movs	r6, #0
 8006db2:	9f03      	ldr	r7, [sp, #12]
 8006db4:	cf02      	ldmia	r7!, {r1}
 8006db6:	682c      	ldr	r4, [r5, #0]
 8006db8:	b28b      	uxth	r3, r1
 8006dba:	4343      	muls	r3, r0
 8006dbc:	0c09      	lsrs	r1, r1, #16
 8006dbe:	4341      	muls	r1, r0
 8006dc0:	b2a4      	uxth	r4, r4
 8006dc2:	191b      	adds	r3, r3, r4
 8006dc4:	199b      	adds	r3, r3, r6
 8006dc6:	000e      	movs	r6, r1
 8006dc8:	6829      	ldr	r1, [r5, #0]
 8006dca:	9506      	str	r5, [sp, #24]
 8006dcc:	0c09      	lsrs	r1, r1, #16
 8006dce:	1871      	adds	r1, r6, r1
 8006dd0:	0c1e      	lsrs	r6, r3, #16
 8006dd2:	1989      	adds	r1, r1, r6
 8006dd4:	0c0e      	lsrs	r6, r1, #16
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	0409      	lsls	r1, r1, #16
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	c508      	stmia	r5!, {r3}
 8006dde:	9b05      	ldr	r3, [sp, #20]
 8006de0:	42bb      	cmp	r3, r7
 8006de2:	d8e7      	bhi.n	8006db4 <__multiply+0x92>
 8006de4:	9b06      	ldr	r3, [sp, #24]
 8006de6:	605e      	str	r6, [r3, #4]
 8006de8:	9b01      	ldr	r3, [sp, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	0c1d      	lsrs	r5, r3, #16
 8006dee:	d01e      	beq.n	8006e2e <__multiply+0x10c>
 8006df0:	0010      	movs	r0, r2
 8006df2:	2700      	movs	r7, #0
 8006df4:	6813      	ldr	r3, [r2, #0]
 8006df6:	9e03      	ldr	r6, [sp, #12]
 8006df8:	6831      	ldr	r1, [r6, #0]
 8006dfa:	6804      	ldr	r4, [r0, #0]
 8006dfc:	b289      	uxth	r1, r1
 8006dfe:	4369      	muls	r1, r5
 8006e00:	0c24      	lsrs	r4, r4, #16
 8006e02:	1909      	adds	r1, r1, r4
 8006e04:	19c9      	adds	r1, r1, r7
 8006e06:	040f      	lsls	r7, r1, #16
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	433b      	orrs	r3, r7
 8006e0c:	6003      	str	r3, [r0, #0]
 8006e0e:	ce80      	ldmia	r6!, {r7}
 8006e10:	6843      	ldr	r3, [r0, #4]
 8006e12:	0c3f      	lsrs	r7, r7, #16
 8006e14:	436f      	muls	r7, r5
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	0c09      	lsrs	r1, r1, #16
 8006e1c:	185b      	adds	r3, r3, r1
 8006e1e:	9905      	ldr	r1, [sp, #20]
 8006e20:	9006      	str	r0, [sp, #24]
 8006e22:	0c1f      	lsrs	r7, r3, #16
 8006e24:	3004      	adds	r0, #4
 8006e26:	42b1      	cmp	r1, r6
 8006e28:	d8e6      	bhi.n	8006df8 <__multiply+0xd6>
 8006e2a:	9906      	ldr	r1, [sp, #24]
 8006e2c:	604b      	str	r3, [r1, #4]
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	3204      	adds	r2, #4
 8006e32:	3304      	adds	r3, #4
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	e79f      	b.n	8006d78 <__multiply+0x56>
 8006e38:	9b02      	ldr	r3, [sp, #8]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	9302      	str	r3, [sp, #8]
 8006e3e:	e79f      	b.n	8006d80 <__multiply+0x5e>

08006e40 <__pow5mult>:
 8006e40:	2303      	movs	r3, #3
 8006e42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e44:	4013      	ands	r3, r2
 8006e46:	0005      	movs	r5, r0
 8006e48:	000e      	movs	r6, r1
 8006e4a:	0014      	movs	r4, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <__pow5mult+0x22>
 8006e50:	4922      	ldr	r1, [pc, #136]	; (8006edc <__pow5mult+0x9c>)
 8006e52:	3b01      	subs	r3, #1
 8006e54:	009a      	lsls	r2, r3, #2
 8006e56:	5852      	ldr	r2, [r2, r1]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	0031      	movs	r1, r6
 8006e5c:	f7ff fed1 	bl	8006c02 <__multadd>
 8006e60:	0006      	movs	r6, r0
 8006e62:	10a3      	asrs	r3, r4, #2
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	d036      	beq.n	8006ed6 <__pow5mult+0x96>
 8006e68:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006e6a:	2c00      	cmp	r4, #0
 8006e6c:	d107      	bne.n	8006e7e <__pow5mult+0x3e>
 8006e6e:	2010      	movs	r0, #16
 8006e70:	f7ff fe58 	bl	8006b24 <malloc>
 8006e74:	6268      	str	r0, [r5, #36]	; 0x24
 8006e76:	6044      	str	r4, [r0, #4]
 8006e78:	6084      	str	r4, [r0, #8]
 8006e7a:	6004      	str	r4, [r0, #0]
 8006e7c:	60c4      	str	r4, [r0, #12]
 8006e7e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8006e80:	68bc      	ldr	r4, [r7, #8]
 8006e82:	2c00      	cmp	r4, #0
 8006e84:	d107      	bne.n	8006e96 <__pow5mult+0x56>
 8006e86:	4916      	ldr	r1, [pc, #88]	; (8006ee0 <__pow5mult+0xa0>)
 8006e88:	0028      	movs	r0, r5
 8006e8a:	f7ff ff41 	bl	8006d10 <__i2b>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	0004      	movs	r4, r0
 8006e92:	60b8      	str	r0, [r7, #8]
 8006e94:	6003      	str	r3, [r0, #0]
 8006e96:	2201      	movs	r2, #1
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	4213      	tst	r3, r2
 8006e9c:	d00a      	beq.n	8006eb4 <__pow5mult+0x74>
 8006e9e:	0031      	movs	r1, r6
 8006ea0:	0022      	movs	r2, r4
 8006ea2:	0028      	movs	r0, r5
 8006ea4:	f7ff ff3d 	bl	8006d22 <__multiply>
 8006ea8:	0007      	movs	r7, r0
 8006eaa:	0031      	movs	r1, r6
 8006eac:	0028      	movs	r0, r5
 8006eae:	f7ff fe8f 	bl	8006bd0 <_Bfree>
 8006eb2:	003e      	movs	r6, r7
 8006eb4:	9b01      	ldr	r3, [sp, #4]
 8006eb6:	105b      	asrs	r3, r3, #1
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	d00c      	beq.n	8006ed6 <__pow5mult+0x96>
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d107      	bne.n	8006ed2 <__pow5mult+0x92>
 8006ec2:	0022      	movs	r2, r4
 8006ec4:	0021      	movs	r1, r4
 8006ec6:	0028      	movs	r0, r5
 8006ec8:	f7ff ff2b 	bl	8006d22 <__multiply>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6020      	str	r0, [r4, #0]
 8006ed0:	6003      	str	r3, [r0, #0]
 8006ed2:	0004      	movs	r4, r0
 8006ed4:	e7df      	b.n	8006e96 <__pow5mult+0x56>
 8006ed6:	0030      	movs	r0, r6
 8006ed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	08007cb8 	.word	0x08007cb8
 8006ee0:	00000271 	.word	0x00000271

08006ee4 <__lshift>:
 8006ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee6:	000d      	movs	r5, r1
 8006ee8:	0017      	movs	r7, r2
 8006eea:	692b      	ldr	r3, [r5, #16]
 8006eec:	1154      	asrs	r4, r2, #5
 8006eee:	b085      	sub	sp, #20
 8006ef0:	18e3      	adds	r3, r4, r3
 8006ef2:	9301      	str	r3, [sp, #4]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	6849      	ldr	r1, [r1, #4]
 8006efa:	68ab      	ldr	r3, [r5, #8]
 8006efc:	9002      	str	r0, [sp, #8]
 8006efe:	9a00      	ldr	r2, [sp, #0]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	db35      	blt.n	8006f70 <__lshift+0x8c>
 8006f04:	9802      	ldr	r0, [sp, #8]
 8006f06:	f7ff fe2b 	bl	8006b60 <_Balloc>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	0002      	movs	r2, r0
 8006f0e:	0006      	movs	r6, r0
 8006f10:	0019      	movs	r1, r3
 8006f12:	3214      	adds	r2, #20
 8006f14:	42a3      	cmp	r3, r4
 8006f16:	db2e      	blt.n	8006f76 <__lshift+0x92>
 8006f18:	43e3      	mvns	r3, r4
 8006f1a:	17db      	asrs	r3, r3, #31
 8006f1c:	401c      	ands	r4, r3
 8006f1e:	002b      	movs	r3, r5
 8006f20:	00a4      	lsls	r4, r4, #2
 8006f22:	1914      	adds	r4, r2, r4
 8006f24:	692a      	ldr	r2, [r5, #16]
 8006f26:	3314      	adds	r3, #20
 8006f28:	0092      	lsls	r2, r2, #2
 8006f2a:	189a      	adds	r2, r3, r2
 8006f2c:	4694      	mov	ip, r2
 8006f2e:	221f      	movs	r2, #31
 8006f30:	4017      	ands	r7, r2
 8006f32:	d024      	beq.n	8006f7e <__lshift+0x9a>
 8006f34:	3201      	adds	r2, #1
 8006f36:	1bd2      	subs	r2, r2, r7
 8006f38:	9203      	str	r2, [sp, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	6819      	ldr	r1, [r3, #0]
 8006f3e:	0020      	movs	r0, r4
 8006f40:	40b9      	lsls	r1, r7
 8006f42:	430a      	orrs	r2, r1
 8006f44:	c404      	stmia	r4!, {r2}
 8006f46:	cb04      	ldmia	r3!, {r2}
 8006f48:	9903      	ldr	r1, [sp, #12]
 8006f4a:	40ca      	lsrs	r2, r1
 8006f4c:	459c      	cmp	ip, r3
 8006f4e:	d8f5      	bhi.n	8006f3c <__lshift+0x58>
 8006f50:	6042      	str	r2, [r0, #4]
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d002      	beq.n	8006f5c <__lshift+0x78>
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	3302      	adds	r3, #2
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	9b00      	ldr	r3, [sp, #0]
 8006f5e:	9802      	ldr	r0, [sp, #8]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	6133      	str	r3, [r6, #16]
 8006f64:	0029      	movs	r1, r5
 8006f66:	f7ff fe33 	bl	8006bd0 <_Bfree>
 8006f6a:	0030      	movs	r0, r6
 8006f6c:	b005      	add	sp, #20
 8006f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f70:	3101      	adds	r1, #1
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	e7c3      	b.n	8006efe <__lshift+0x1a>
 8006f76:	0098      	lsls	r0, r3, #2
 8006f78:	5011      	str	r1, [r2, r0]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	e7ca      	b.n	8006f14 <__lshift+0x30>
 8006f7e:	cb04      	ldmia	r3!, {r2}
 8006f80:	c404      	stmia	r4!, {r2}
 8006f82:	459c      	cmp	ip, r3
 8006f84:	d8fb      	bhi.n	8006f7e <__lshift+0x9a>
 8006f86:	e7e9      	b.n	8006f5c <__lshift+0x78>

08006f88 <__mcmp>:
 8006f88:	690a      	ldr	r2, [r1, #16]
 8006f8a:	6903      	ldr	r3, [r0, #16]
 8006f8c:	b530      	push	{r4, r5, lr}
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	d10d      	bne.n	8006fae <__mcmp+0x26>
 8006f92:	0092      	lsls	r2, r2, #2
 8006f94:	3014      	adds	r0, #20
 8006f96:	3114      	adds	r1, #20
 8006f98:	1884      	adds	r4, r0, r2
 8006f9a:	1889      	adds	r1, r1, r2
 8006f9c:	3c04      	subs	r4, #4
 8006f9e:	3904      	subs	r1, #4
 8006fa0:	6825      	ldr	r5, [r4, #0]
 8006fa2:	680a      	ldr	r2, [r1, #0]
 8006fa4:	4295      	cmp	r5, r2
 8006fa6:	d004      	beq.n	8006fb2 <__mcmp+0x2a>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4295      	cmp	r5, r2
 8006fac:	d304      	bcc.n	8006fb8 <__mcmp+0x30>
 8006fae:	0018      	movs	r0, r3
 8006fb0:	bd30      	pop	{r4, r5, pc}
 8006fb2:	42a0      	cmp	r0, r4
 8006fb4:	d3f2      	bcc.n	8006f9c <__mcmp+0x14>
 8006fb6:	e7fa      	b.n	8006fae <__mcmp+0x26>
 8006fb8:	425b      	negs	r3, r3
 8006fba:	e7f8      	b.n	8006fae <__mcmp+0x26>

08006fbc <__mdiff>:
 8006fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fbe:	000d      	movs	r5, r1
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	0007      	movs	r7, r0
 8006fc4:	0011      	movs	r1, r2
 8006fc6:	0028      	movs	r0, r5
 8006fc8:	0014      	movs	r4, r2
 8006fca:	f7ff ffdd 	bl	8006f88 <__mcmp>
 8006fce:	1e06      	subs	r6, r0, #0
 8006fd0:	d108      	bne.n	8006fe4 <__mdiff+0x28>
 8006fd2:	0001      	movs	r1, r0
 8006fd4:	0038      	movs	r0, r7
 8006fd6:	f7ff fdc3 	bl	8006b60 <_Balloc>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	6146      	str	r6, [r0, #20]
 8006fde:	6103      	str	r3, [r0, #16]
 8006fe0:	b005      	add	sp, #20
 8006fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	db04      	blt.n	8006ff6 <__mdiff+0x3a>
 8006fec:	0023      	movs	r3, r4
 8006fee:	002c      	movs	r4, r5
 8006ff0:	001d      	movs	r5, r3
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	6861      	ldr	r1, [r4, #4]
 8006ff8:	0038      	movs	r0, r7
 8006ffa:	f7ff fdb1 	bl	8006b60 <_Balloc>
 8006ffe:	002f      	movs	r7, r5
 8007000:	2200      	movs	r2, #0
 8007002:	9b01      	ldr	r3, [sp, #4]
 8007004:	6926      	ldr	r6, [r4, #16]
 8007006:	60c3      	str	r3, [r0, #12]
 8007008:	3414      	adds	r4, #20
 800700a:	00b3      	lsls	r3, r6, #2
 800700c:	18e3      	adds	r3, r4, r3
 800700e:	9302      	str	r3, [sp, #8]
 8007010:	692b      	ldr	r3, [r5, #16]
 8007012:	3714      	adds	r7, #20
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	9303      	str	r3, [sp, #12]
 800701a:	0003      	movs	r3, r0
 800701c:	4694      	mov	ip, r2
 800701e:	3314      	adds	r3, #20
 8007020:	cc20      	ldmia	r4!, {r5}
 8007022:	cf04      	ldmia	r7!, {r2}
 8007024:	9201      	str	r2, [sp, #4]
 8007026:	b2aa      	uxth	r2, r5
 8007028:	4494      	add	ip, r2
 800702a:	466a      	mov	r2, sp
 800702c:	4661      	mov	r1, ip
 800702e:	8892      	ldrh	r2, [r2, #4]
 8007030:	0c2d      	lsrs	r5, r5, #16
 8007032:	1a8a      	subs	r2, r1, r2
 8007034:	9901      	ldr	r1, [sp, #4]
 8007036:	0c09      	lsrs	r1, r1, #16
 8007038:	1a69      	subs	r1, r5, r1
 800703a:	1415      	asrs	r5, r2, #16
 800703c:	1949      	adds	r1, r1, r5
 800703e:	140d      	asrs	r5, r1, #16
 8007040:	b292      	uxth	r2, r2
 8007042:	0409      	lsls	r1, r1, #16
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	9a03      	ldr	r2, [sp, #12]
 800704a:	46ac      	mov	ip, r5
 800704c:	3304      	adds	r3, #4
 800704e:	42ba      	cmp	r2, r7
 8007050:	d8e6      	bhi.n	8007020 <__mdiff+0x64>
 8007052:	9902      	ldr	r1, [sp, #8]
 8007054:	001a      	movs	r2, r3
 8007056:	428c      	cmp	r4, r1
 8007058:	d305      	bcc.n	8007066 <__mdiff+0xaa>
 800705a:	3a04      	subs	r2, #4
 800705c:	6813      	ldr	r3, [r2, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00e      	beq.n	8007080 <__mdiff+0xc4>
 8007062:	6106      	str	r6, [r0, #16]
 8007064:	e7bc      	b.n	8006fe0 <__mdiff+0x24>
 8007066:	cc04      	ldmia	r4!, {r2}
 8007068:	b291      	uxth	r1, r2
 800706a:	4461      	add	r1, ip
 800706c:	140d      	asrs	r5, r1, #16
 800706e:	0c12      	lsrs	r2, r2, #16
 8007070:	1952      	adds	r2, r2, r5
 8007072:	1415      	asrs	r5, r2, #16
 8007074:	b289      	uxth	r1, r1
 8007076:	0412      	lsls	r2, r2, #16
 8007078:	430a      	orrs	r2, r1
 800707a:	46ac      	mov	ip, r5
 800707c:	c304      	stmia	r3!, {r2}
 800707e:	e7e8      	b.n	8007052 <__mdiff+0x96>
 8007080:	3e01      	subs	r6, #1
 8007082:	e7ea      	b.n	800705a <__mdiff+0x9e>

08007084 <__d2b>:
 8007084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007086:	001d      	movs	r5, r3
 8007088:	2101      	movs	r1, #1
 800708a:	0014      	movs	r4, r2
 800708c:	9f08      	ldr	r7, [sp, #32]
 800708e:	f7ff fd67 	bl	8006b60 <_Balloc>
 8007092:	032b      	lsls	r3, r5, #12
 8007094:	006d      	lsls	r5, r5, #1
 8007096:	0006      	movs	r6, r0
 8007098:	0b1b      	lsrs	r3, r3, #12
 800709a:	0d6d      	lsrs	r5, r5, #21
 800709c:	d124      	bne.n	80070e8 <__d2b+0x64>
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	2c00      	cmp	r4, #0
 80070a2:	d027      	beq.n	80070f4 <__d2b+0x70>
 80070a4:	4668      	mov	r0, sp
 80070a6:	9400      	str	r4, [sp, #0]
 80070a8:	f7ff fe03 	bl	8006cb2 <__lo0bits>
 80070ac:	9c00      	ldr	r4, [sp, #0]
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d01e      	beq.n	80070f0 <__d2b+0x6c>
 80070b2:	9b01      	ldr	r3, [sp, #4]
 80070b4:	2120      	movs	r1, #32
 80070b6:	001a      	movs	r2, r3
 80070b8:	1a09      	subs	r1, r1, r0
 80070ba:	408a      	lsls	r2, r1
 80070bc:	40c3      	lsrs	r3, r0
 80070be:	4322      	orrs	r2, r4
 80070c0:	6172      	str	r2, [r6, #20]
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	9c01      	ldr	r4, [sp, #4]
 80070c6:	61b4      	str	r4, [r6, #24]
 80070c8:	1e63      	subs	r3, r4, #1
 80070ca:	419c      	sbcs	r4, r3
 80070cc:	3401      	adds	r4, #1
 80070ce:	6134      	str	r4, [r6, #16]
 80070d0:	2d00      	cmp	r5, #0
 80070d2:	d018      	beq.n	8007106 <__d2b+0x82>
 80070d4:	4b12      	ldr	r3, [pc, #72]	; (8007120 <__d2b+0x9c>)
 80070d6:	18ed      	adds	r5, r5, r3
 80070d8:	2335      	movs	r3, #53	; 0x35
 80070da:	182d      	adds	r5, r5, r0
 80070dc:	603d      	str	r5, [r7, #0]
 80070de:	1a18      	subs	r0, r3, r0
 80070e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e2:	6018      	str	r0, [r3, #0]
 80070e4:	0030      	movs	r0, r6
 80070e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070e8:	2280      	movs	r2, #128	; 0x80
 80070ea:	0352      	lsls	r2, r2, #13
 80070ec:	4313      	orrs	r3, r2
 80070ee:	e7d6      	b.n	800709e <__d2b+0x1a>
 80070f0:	6174      	str	r4, [r6, #20]
 80070f2:	e7e7      	b.n	80070c4 <__d2b+0x40>
 80070f4:	a801      	add	r0, sp, #4
 80070f6:	f7ff fddc 	bl	8006cb2 <__lo0bits>
 80070fa:	2401      	movs	r4, #1
 80070fc:	9b01      	ldr	r3, [sp, #4]
 80070fe:	6134      	str	r4, [r6, #16]
 8007100:	6173      	str	r3, [r6, #20]
 8007102:	3020      	adds	r0, #32
 8007104:	e7e4      	b.n	80070d0 <__d2b+0x4c>
 8007106:	4b07      	ldr	r3, [pc, #28]	; (8007124 <__d2b+0xa0>)
 8007108:	18c0      	adds	r0, r0, r3
 800710a:	4b07      	ldr	r3, [pc, #28]	; (8007128 <__d2b+0xa4>)
 800710c:	6038      	str	r0, [r7, #0]
 800710e:	18e3      	adds	r3, r4, r3
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	18f3      	adds	r3, r6, r3
 8007114:	6958      	ldr	r0, [r3, #20]
 8007116:	f7ff fdb2 	bl	8006c7e <__hi0bits>
 800711a:	0164      	lsls	r4, r4, #5
 800711c:	1a20      	subs	r0, r4, r0
 800711e:	e7df      	b.n	80070e0 <__d2b+0x5c>
 8007120:	fffffbcd 	.word	0xfffffbcd
 8007124:	fffffbce 	.word	0xfffffbce
 8007128:	3fffffff 	.word	0x3fffffff

0800712c <_calloc_r>:
 800712c:	434a      	muls	r2, r1
 800712e:	b570      	push	{r4, r5, r6, lr}
 8007130:	0011      	movs	r1, r2
 8007132:	0014      	movs	r4, r2
 8007134:	f000 f852 	bl	80071dc <_malloc_r>
 8007138:	1e05      	subs	r5, r0, #0
 800713a:	d003      	beq.n	8007144 <_calloc_r+0x18>
 800713c:	0022      	movs	r2, r4
 800713e:	2100      	movs	r1, #0
 8007140:	f7fd feb0 	bl	8004ea4 <memset>
 8007144:	0028      	movs	r0, r5
 8007146:	bd70      	pop	{r4, r5, r6, pc}

08007148 <_free_r>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	0005      	movs	r5, r0
 800714c:	2900      	cmp	r1, #0
 800714e:	d010      	beq.n	8007172 <_free_r+0x2a>
 8007150:	1f0c      	subs	r4, r1, #4
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	da00      	bge.n	800715a <_free_r+0x12>
 8007158:	18e4      	adds	r4, r4, r3
 800715a:	0028      	movs	r0, r5
 800715c:	f000 fc1b 	bl	8007996 <__malloc_lock>
 8007160:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <_free_r+0x90>)
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d105      	bne.n	8007174 <_free_r+0x2c>
 8007168:	6063      	str	r3, [r4, #4]
 800716a:	6014      	str	r4, [r2, #0]
 800716c:	0028      	movs	r0, r5
 800716e:	f000 fc13 	bl	8007998 <__malloc_unlock>
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	42a3      	cmp	r3, r4
 8007176:	d909      	bls.n	800718c <_free_r+0x44>
 8007178:	6821      	ldr	r1, [r4, #0]
 800717a:	1860      	adds	r0, r4, r1
 800717c:	4283      	cmp	r3, r0
 800717e:	d1f3      	bne.n	8007168 <_free_r+0x20>
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	1841      	adds	r1, r0, r1
 8007186:	6021      	str	r1, [r4, #0]
 8007188:	e7ee      	b.n	8007168 <_free_r+0x20>
 800718a:	0013      	movs	r3, r2
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	2a00      	cmp	r2, #0
 8007190:	d001      	beq.n	8007196 <_free_r+0x4e>
 8007192:	42a2      	cmp	r2, r4
 8007194:	d9f9      	bls.n	800718a <_free_r+0x42>
 8007196:	6819      	ldr	r1, [r3, #0]
 8007198:	1858      	adds	r0, r3, r1
 800719a:	42a0      	cmp	r0, r4
 800719c:	d10b      	bne.n	80071b6 <_free_r+0x6e>
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	1809      	adds	r1, r1, r0
 80071a2:	1858      	adds	r0, r3, r1
 80071a4:	6019      	str	r1, [r3, #0]
 80071a6:	4282      	cmp	r2, r0
 80071a8:	d1e0      	bne.n	800716c <_free_r+0x24>
 80071aa:	6810      	ldr	r0, [r2, #0]
 80071ac:	6852      	ldr	r2, [r2, #4]
 80071ae:	1841      	adds	r1, r0, r1
 80071b0:	6019      	str	r1, [r3, #0]
 80071b2:	605a      	str	r2, [r3, #4]
 80071b4:	e7da      	b.n	800716c <_free_r+0x24>
 80071b6:	42a0      	cmp	r0, r4
 80071b8:	d902      	bls.n	80071c0 <_free_r+0x78>
 80071ba:	230c      	movs	r3, #12
 80071bc:	602b      	str	r3, [r5, #0]
 80071be:	e7d5      	b.n	800716c <_free_r+0x24>
 80071c0:	6821      	ldr	r1, [r4, #0]
 80071c2:	1860      	adds	r0, r4, r1
 80071c4:	4282      	cmp	r2, r0
 80071c6:	d103      	bne.n	80071d0 <_free_r+0x88>
 80071c8:	6810      	ldr	r0, [r2, #0]
 80071ca:	6852      	ldr	r2, [r2, #4]
 80071cc:	1841      	adds	r1, r0, r1
 80071ce:	6021      	str	r1, [r4, #0]
 80071d0:	6062      	str	r2, [r4, #4]
 80071d2:	605c      	str	r4, [r3, #4]
 80071d4:	e7ca      	b.n	800716c <_free_r+0x24>
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	20000210 	.word	0x20000210

080071dc <_malloc_r>:
 80071dc:	2303      	movs	r3, #3
 80071de:	b570      	push	{r4, r5, r6, lr}
 80071e0:	1ccd      	adds	r5, r1, #3
 80071e2:	439d      	bics	r5, r3
 80071e4:	3508      	adds	r5, #8
 80071e6:	0006      	movs	r6, r0
 80071e8:	2d0c      	cmp	r5, #12
 80071ea:	d21e      	bcs.n	800722a <_malloc_r+0x4e>
 80071ec:	250c      	movs	r5, #12
 80071ee:	42a9      	cmp	r1, r5
 80071f0:	d81d      	bhi.n	800722e <_malloc_r+0x52>
 80071f2:	0030      	movs	r0, r6
 80071f4:	f000 fbcf 	bl	8007996 <__malloc_lock>
 80071f8:	4a25      	ldr	r2, [pc, #148]	; (8007290 <_malloc_r+0xb4>)
 80071fa:	6814      	ldr	r4, [r2, #0]
 80071fc:	0021      	movs	r1, r4
 80071fe:	2900      	cmp	r1, #0
 8007200:	d119      	bne.n	8007236 <_malloc_r+0x5a>
 8007202:	4c24      	ldr	r4, [pc, #144]	; (8007294 <_malloc_r+0xb8>)
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d103      	bne.n	8007212 <_malloc_r+0x36>
 800720a:	0030      	movs	r0, r6
 800720c:	f000 fae2 	bl	80077d4 <_sbrk_r>
 8007210:	6020      	str	r0, [r4, #0]
 8007212:	0029      	movs	r1, r5
 8007214:	0030      	movs	r0, r6
 8007216:	f000 fadd 	bl	80077d4 <_sbrk_r>
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	d12b      	bne.n	8007276 <_malloc_r+0x9a>
 800721e:	230c      	movs	r3, #12
 8007220:	0030      	movs	r0, r6
 8007222:	6033      	str	r3, [r6, #0]
 8007224:	f000 fbb8 	bl	8007998 <__malloc_unlock>
 8007228:	e003      	b.n	8007232 <_malloc_r+0x56>
 800722a:	2d00      	cmp	r5, #0
 800722c:	dadf      	bge.n	80071ee <_malloc_r+0x12>
 800722e:	230c      	movs	r3, #12
 8007230:	6033      	str	r3, [r6, #0]
 8007232:	2000      	movs	r0, #0
 8007234:	bd70      	pop	{r4, r5, r6, pc}
 8007236:	680b      	ldr	r3, [r1, #0]
 8007238:	1b5b      	subs	r3, r3, r5
 800723a:	d419      	bmi.n	8007270 <_malloc_r+0x94>
 800723c:	2b0b      	cmp	r3, #11
 800723e:	d903      	bls.n	8007248 <_malloc_r+0x6c>
 8007240:	600b      	str	r3, [r1, #0]
 8007242:	18cc      	adds	r4, r1, r3
 8007244:	6025      	str	r5, [r4, #0]
 8007246:	e003      	b.n	8007250 <_malloc_r+0x74>
 8007248:	684b      	ldr	r3, [r1, #4]
 800724a:	428c      	cmp	r4, r1
 800724c:	d10d      	bne.n	800726a <_malloc_r+0x8e>
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	0030      	movs	r0, r6
 8007252:	f000 fba1 	bl	8007998 <__malloc_unlock>
 8007256:	0020      	movs	r0, r4
 8007258:	2207      	movs	r2, #7
 800725a:	300b      	adds	r0, #11
 800725c:	1d23      	adds	r3, r4, #4
 800725e:	4390      	bics	r0, r2
 8007260:	1ac3      	subs	r3, r0, r3
 8007262:	d0e7      	beq.n	8007234 <_malloc_r+0x58>
 8007264:	425a      	negs	r2, r3
 8007266:	50e2      	str	r2, [r4, r3]
 8007268:	e7e4      	b.n	8007234 <_malloc_r+0x58>
 800726a:	6063      	str	r3, [r4, #4]
 800726c:	000c      	movs	r4, r1
 800726e:	e7ef      	b.n	8007250 <_malloc_r+0x74>
 8007270:	000c      	movs	r4, r1
 8007272:	6849      	ldr	r1, [r1, #4]
 8007274:	e7c3      	b.n	80071fe <_malloc_r+0x22>
 8007276:	2303      	movs	r3, #3
 8007278:	1cc4      	adds	r4, r0, #3
 800727a:	439c      	bics	r4, r3
 800727c:	42a0      	cmp	r0, r4
 800727e:	d0e1      	beq.n	8007244 <_malloc_r+0x68>
 8007280:	1a21      	subs	r1, r4, r0
 8007282:	0030      	movs	r0, r6
 8007284:	f000 faa6 	bl	80077d4 <_sbrk_r>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d1db      	bne.n	8007244 <_malloc_r+0x68>
 800728c:	e7c7      	b.n	800721e <_malloc_r+0x42>
 800728e:	46c0      	nop			; (mov r8, r8)
 8007290:	20000210 	.word	0x20000210
 8007294:	20000214 	.word	0x20000214

08007298 <__ssputs_r>:
 8007298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729a:	688e      	ldr	r6, [r1, #8]
 800729c:	b085      	sub	sp, #20
 800729e:	0007      	movs	r7, r0
 80072a0:	000c      	movs	r4, r1
 80072a2:	9203      	str	r2, [sp, #12]
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	429e      	cmp	r6, r3
 80072a8:	d83c      	bhi.n	8007324 <__ssputs_r+0x8c>
 80072aa:	2390      	movs	r3, #144	; 0x90
 80072ac:	898a      	ldrh	r2, [r1, #12]
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	421a      	tst	r2, r3
 80072b2:	d034      	beq.n	800731e <__ssputs_r+0x86>
 80072b4:	2503      	movs	r5, #3
 80072b6:	6909      	ldr	r1, [r1, #16]
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	1a5b      	subs	r3, r3, r1
 80072bc:	9302      	str	r3, [sp, #8]
 80072be:	6963      	ldr	r3, [r4, #20]
 80072c0:	9802      	ldr	r0, [sp, #8]
 80072c2:	435d      	muls	r5, r3
 80072c4:	0feb      	lsrs	r3, r5, #31
 80072c6:	195d      	adds	r5, r3, r5
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	106d      	asrs	r5, r5, #1
 80072cc:	3301      	adds	r3, #1
 80072ce:	181b      	adds	r3, r3, r0
 80072d0:	42ab      	cmp	r3, r5
 80072d2:	d900      	bls.n	80072d6 <__ssputs_r+0x3e>
 80072d4:	001d      	movs	r5, r3
 80072d6:	0553      	lsls	r3, r2, #21
 80072d8:	d532      	bpl.n	8007340 <__ssputs_r+0xa8>
 80072da:	0029      	movs	r1, r5
 80072dc:	0038      	movs	r0, r7
 80072de:	f7ff ff7d 	bl	80071dc <_malloc_r>
 80072e2:	1e06      	subs	r6, r0, #0
 80072e4:	d109      	bne.n	80072fa <__ssputs_r+0x62>
 80072e6:	230c      	movs	r3, #12
 80072e8:	603b      	str	r3, [r7, #0]
 80072ea:	2340      	movs	r3, #64	; 0x40
 80072ec:	2001      	movs	r0, #1
 80072ee:	89a2      	ldrh	r2, [r4, #12]
 80072f0:	4240      	negs	r0, r0
 80072f2:	4313      	orrs	r3, r2
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	b005      	add	sp, #20
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fa:	9a02      	ldr	r2, [sp, #8]
 80072fc:	6921      	ldr	r1, [r4, #16]
 80072fe:	f7ff fc26 	bl	8006b4e <memcpy>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	4a14      	ldr	r2, [pc, #80]	; (8007358 <__ssputs_r+0xc0>)
 8007306:	401a      	ands	r2, r3
 8007308:	2380      	movs	r3, #128	; 0x80
 800730a:	4313      	orrs	r3, r2
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	6126      	str	r6, [r4, #16]
 8007312:	18f6      	adds	r6, r6, r3
 8007314:	6026      	str	r6, [r4, #0]
 8007316:	6165      	str	r5, [r4, #20]
 8007318:	9e01      	ldr	r6, [sp, #4]
 800731a:	1aed      	subs	r5, r5, r3
 800731c:	60a5      	str	r5, [r4, #8]
 800731e:	9b01      	ldr	r3, [sp, #4]
 8007320:	429e      	cmp	r6, r3
 8007322:	d900      	bls.n	8007326 <__ssputs_r+0x8e>
 8007324:	9e01      	ldr	r6, [sp, #4]
 8007326:	0032      	movs	r2, r6
 8007328:	9903      	ldr	r1, [sp, #12]
 800732a:	6820      	ldr	r0, [r4, #0]
 800732c:	f000 fb20 	bl	8007970 <memmove>
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	2000      	movs	r0, #0
 8007334:	1b9b      	subs	r3, r3, r6
 8007336:	60a3      	str	r3, [r4, #8]
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	199e      	adds	r6, r3, r6
 800733c:	6026      	str	r6, [r4, #0]
 800733e:	e7da      	b.n	80072f6 <__ssputs_r+0x5e>
 8007340:	002a      	movs	r2, r5
 8007342:	0038      	movs	r0, r7
 8007344:	f000 fb29 	bl	800799a <_realloc_r>
 8007348:	1e06      	subs	r6, r0, #0
 800734a:	d1e0      	bne.n	800730e <__ssputs_r+0x76>
 800734c:	6921      	ldr	r1, [r4, #16]
 800734e:	0038      	movs	r0, r7
 8007350:	f7ff fefa 	bl	8007148 <_free_r>
 8007354:	e7c7      	b.n	80072e6 <__ssputs_r+0x4e>
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	fffffb7f 	.word	0xfffffb7f

0800735c <_svfiprintf_r>:
 800735c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800735e:	b0a1      	sub	sp, #132	; 0x84
 8007360:	9003      	str	r0, [sp, #12]
 8007362:	001d      	movs	r5, r3
 8007364:	898b      	ldrh	r3, [r1, #12]
 8007366:	000f      	movs	r7, r1
 8007368:	0016      	movs	r6, r2
 800736a:	061b      	lsls	r3, r3, #24
 800736c:	d511      	bpl.n	8007392 <_svfiprintf_r+0x36>
 800736e:	690b      	ldr	r3, [r1, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10e      	bne.n	8007392 <_svfiprintf_r+0x36>
 8007374:	2140      	movs	r1, #64	; 0x40
 8007376:	f7ff ff31 	bl	80071dc <_malloc_r>
 800737a:	6038      	str	r0, [r7, #0]
 800737c:	6138      	str	r0, [r7, #16]
 800737e:	2800      	cmp	r0, #0
 8007380:	d105      	bne.n	800738e <_svfiprintf_r+0x32>
 8007382:	230c      	movs	r3, #12
 8007384:	9a03      	ldr	r2, [sp, #12]
 8007386:	3801      	subs	r0, #1
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	b021      	add	sp, #132	; 0x84
 800738c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800738e:	2340      	movs	r3, #64	; 0x40
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	2300      	movs	r3, #0
 8007394:	ac08      	add	r4, sp, #32
 8007396:	6163      	str	r3, [r4, #20]
 8007398:	3320      	adds	r3, #32
 800739a:	7663      	strb	r3, [r4, #25]
 800739c:	3310      	adds	r3, #16
 800739e:	76a3      	strb	r3, [r4, #26]
 80073a0:	9507      	str	r5, [sp, #28]
 80073a2:	0035      	movs	r5, r6
 80073a4:	782b      	ldrb	r3, [r5, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <_svfiprintf_r+0x52>
 80073aa:	2b25      	cmp	r3, #37	; 0x25
 80073ac:	d146      	bne.n	800743c <_svfiprintf_r+0xe0>
 80073ae:	1bab      	subs	r3, r5, r6
 80073b0:	9305      	str	r3, [sp, #20]
 80073b2:	d00c      	beq.n	80073ce <_svfiprintf_r+0x72>
 80073b4:	0032      	movs	r2, r6
 80073b6:	0039      	movs	r1, r7
 80073b8:	9803      	ldr	r0, [sp, #12]
 80073ba:	f7ff ff6d 	bl	8007298 <__ssputs_r>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	d100      	bne.n	80073c4 <_svfiprintf_r+0x68>
 80073c2:	e0ae      	b.n	8007522 <_svfiprintf_r+0x1c6>
 80073c4:	6962      	ldr	r2, [r4, #20]
 80073c6:	9b05      	ldr	r3, [sp, #20]
 80073c8:	4694      	mov	ip, r2
 80073ca:	4463      	add	r3, ip
 80073cc:	6163      	str	r3, [r4, #20]
 80073ce:	782b      	ldrb	r3, [r5, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d100      	bne.n	80073d6 <_svfiprintf_r+0x7a>
 80073d4:	e0a5      	b.n	8007522 <_svfiprintf_r+0x1c6>
 80073d6:	2201      	movs	r2, #1
 80073d8:	2300      	movs	r3, #0
 80073da:	4252      	negs	r2, r2
 80073dc:	6062      	str	r2, [r4, #4]
 80073de:	a904      	add	r1, sp, #16
 80073e0:	3254      	adds	r2, #84	; 0x54
 80073e2:	1852      	adds	r2, r2, r1
 80073e4:	1c6e      	adds	r6, r5, #1
 80073e6:	6023      	str	r3, [r4, #0]
 80073e8:	60e3      	str	r3, [r4, #12]
 80073ea:	60a3      	str	r3, [r4, #8]
 80073ec:	7013      	strb	r3, [r2, #0]
 80073ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80073f0:	7831      	ldrb	r1, [r6, #0]
 80073f2:	2205      	movs	r2, #5
 80073f4:	4853      	ldr	r0, [pc, #332]	; (8007544 <_svfiprintf_r+0x1e8>)
 80073f6:	f7ff fb9f 	bl	8006b38 <memchr>
 80073fa:	1c75      	adds	r5, r6, #1
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d11f      	bne.n	8007440 <_svfiprintf_r+0xe4>
 8007400:	6822      	ldr	r2, [r4, #0]
 8007402:	06d3      	lsls	r3, r2, #27
 8007404:	d504      	bpl.n	8007410 <_svfiprintf_r+0xb4>
 8007406:	2353      	movs	r3, #83	; 0x53
 8007408:	a904      	add	r1, sp, #16
 800740a:	185b      	adds	r3, r3, r1
 800740c:	2120      	movs	r1, #32
 800740e:	7019      	strb	r1, [r3, #0]
 8007410:	0713      	lsls	r3, r2, #28
 8007412:	d504      	bpl.n	800741e <_svfiprintf_r+0xc2>
 8007414:	2353      	movs	r3, #83	; 0x53
 8007416:	a904      	add	r1, sp, #16
 8007418:	185b      	adds	r3, r3, r1
 800741a:	212b      	movs	r1, #43	; 0x2b
 800741c:	7019      	strb	r1, [r3, #0]
 800741e:	7833      	ldrb	r3, [r6, #0]
 8007420:	2b2a      	cmp	r3, #42	; 0x2a
 8007422:	d016      	beq.n	8007452 <_svfiprintf_r+0xf6>
 8007424:	0035      	movs	r5, r6
 8007426:	2100      	movs	r1, #0
 8007428:	200a      	movs	r0, #10
 800742a:	68e3      	ldr	r3, [r4, #12]
 800742c:	782a      	ldrb	r2, [r5, #0]
 800742e:	1c6e      	adds	r6, r5, #1
 8007430:	3a30      	subs	r2, #48	; 0x30
 8007432:	2a09      	cmp	r2, #9
 8007434:	d94e      	bls.n	80074d4 <_svfiprintf_r+0x178>
 8007436:	2900      	cmp	r1, #0
 8007438:	d018      	beq.n	800746c <_svfiprintf_r+0x110>
 800743a:	e010      	b.n	800745e <_svfiprintf_r+0x102>
 800743c:	3501      	adds	r5, #1
 800743e:	e7b1      	b.n	80073a4 <_svfiprintf_r+0x48>
 8007440:	4b40      	ldr	r3, [pc, #256]	; (8007544 <_svfiprintf_r+0x1e8>)
 8007442:	6822      	ldr	r2, [r4, #0]
 8007444:	1ac0      	subs	r0, r0, r3
 8007446:	2301      	movs	r3, #1
 8007448:	4083      	lsls	r3, r0
 800744a:	4313      	orrs	r3, r2
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	002e      	movs	r6, r5
 8007450:	e7ce      	b.n	80073f0 <_svfiprintf_r+0x94>
 8007452:	9b07      	ldr	r3, [sp, #28]
 8007454:	1d19      	adds	r1, r3, #4
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	9107      	str	r1, [sp, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	db01      	blt.n	8007462 <_svfiprintf_r+0x106>
 800745e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007460:	e004      	b.n	800746c <_svfiprintf_r+0x110>
 8007462:	425b      	negs	r3, r3
 8007464:	60e3      	str	r3, [r4, #12]
 8007466:	2302      	movs	r3, #2
 8007468:	4313      	orrs	r3, r2
 800746a:	6023      	str	r3, [r4, #0]
 800746c:	782b      	ldrb	r3, [r5, #0]
 800746e:	2b2e      	cmp	r3, #46	; 0x2e
 8007470:	d10a      	bne.n	8007488 <_svfiprintf_r+0x12c>
 8007472:	786b      	ldrb	r3, [r5, #1]
 8007474:	2b2a      	cmp	r3, #42	; 0x2a
 8007476:	d135      	bne.n	80074e4 <_svfiprintf_r+0x188>
 8007478:	9b07      	ldr	r3, [sp, #28]
 800747a:	3502      	adds	r5, #2
 800747c:	1d1a      	adds	r2, r3, #4
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	9207      	str	r2, [sp, #28]
 8007482:	2b00      	cmp	r3, #0
 8007484:	db2b      	blt.n	80074de <_svfiprintf_r+0x182>
 8007486:	9309      	str	r3, [sp, #36]	; 0x24
 8007488:	4e2f      	ldr	r6, [pc, #188]	; (8007548 <_svfiprintf_r+0x1ec>)
 800748a:	7829      	ldrb	r1, [r5, #0]
 800748c:	2203      	movs	r2, #3
 800748e:	0030      	movs	r0, r6
 8007490:	f7ff fb52 	bl	8006b38 <memchr>
 8007494:	2800      	cmp	r0, #0
 8007496:	d006      	beq.n	80074a6 <_svfiprintf_r+0x14a>
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	1b80      	subs	r0, r0, r6
 800749c:	4083      	lsls	r3, r0
 800749e:	6822      	ldr	r2, [r4, #0]
 80074a0:	3501      	adds	r5, #1
 80074a2:	4313      	orrs	r3, r2
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	7829      	ldrb	r1, [r5, #0]
 80074a8:	2206      	movs	r2, #6
 80074aa:	4828      	ldr	r0, [pc, #160]	; (800754c <_svfiprintf_r+0x1f0>)
 80074ac:	1c6e      	adds	r6, r5, #1
 80074ae:	7621      	strb	r1, [r4, #24]
 80074b0:	f7ff fb42 	bl	8006b38 <memchr>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d03c      	beq.n	8007532 <_svfiprintf_r+0x1d6>
 80074b8:	4b25      	ldr	r3, [pc, #148]	; (8007550 <_svfiprintf_r+0x1f4>)
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d125      	bne.n	800750a <_svfiprintf_r+0x1ae>
 80074be:	2207      	movs	r2, #7
 80074c0:	9b07      	ldr	r3, [sp, #28]
 80074c2:	3307      	adds	r3, #7
 80074c4:	4393      	bics	r3, r2
 80074c6:	3308      	adds	r3, #8
 80074c8:	9307      	str	r3, [sp, #28]
 80074ca:	6963      	ldr	r3, [r4, #20]
 80074cc:	9a04      	ldr	r2, [sp, #16]
 80074ce:	189b      	adds	r3, r3, r2
 80074d0:	6163      	str	r3, [r4, #20]
 80074d2:	e766      	b.n	80073a2 <_svfiprintf_r+0x46>
 80074d4:	4343      	muls	r3, r0
 80074d6:	2101      	movs	r1, #1
 80074d8:	189b      	adds	r3, r3, r2
 80074da:	0035      	movs	r5, r6
 80074dc:	e7a6      	b.n	800742c <_svfiprintf_r+0xd0>
 80074de:	2301      	movs	r3, #1
 80074e0:	425b      	negs	r3, r3
 80074e2:	e7d0      	b.n	8007486 <_svfiprintf_r+0x12a>
 80074e4:	2300      	movs	r3, #0
 80074e6:	200a      	movs	r0, #10
 80074e8:	001a      	movs	r2, r3
 80074ea:	3501      	adds	r5, #1
 80074ec:	6063      	str	r3, [r4, #4]
 80074ee:	7829      	ldrb	r1, [r5, #0]
 80074f0:	1c6e      	adds	r6, r5, #1
 80074f2:	3930      	subs	r1, #48	; 0x30
 80074f4:	2909      	cmp	r1, #9
 80074f6:	d903      	bls.n	8007500 <_svfiprintf_r+0x1a4>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0c5      	beq.n	8007488 <_svfiprintf_r+0x12c>
 80074fc:	9209      	str	r2, [sp, #36]	; 0x24
 80074fe:	e7c3      	b.n	8007488 <_svfiprintf_r+0x12c>
 8007500:	4342      	muls	r2, r0
 8007502:	2301      	movs	r3, #1
 8007504:	1852      	adds	r2, r2, r1
 8007506:	0035      	movs	r5, r6
 8007508:	e7f1      	b.n	80074ee <_svfiprintf_r+0x192>
 800750a:	ab07      	add	r3, sp, #28
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	003a      	movs	r2, r7
 8007510:	4b10      	ldr	r3, [pc, #64]	; (8007554 <_svfiprintf_r+0x1f8>)
 8007512:	0021      	movs	r1, r4
 8007514:	9803      	ldr	r0, [sp, #12]
 8007516:	f7fd fd69 	bl	8004fec <_printf_float>
 800751a:	9004      	str	r0, [sp, #16]
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	3301      	adds	r3, #1
 8007520:	d1d3      	bne.n	80074ca <_svfiprintf_r+0x16e>
 8007522:	89bb      	ldrh	r3, [r7, #12]
 8007524:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007526:	065b      	lsls	r3, r3, #25
 8007528:	d400      	bmi.n	800752c <_svfiprintf_r+0x1d0>
 800752a:	e72e      	b.n	800738a <_svfiprintf_r+0x2e>
 800752c:	2001      	movs	r0, #1
 800752e:	4240      	negs	r0, r0
 8007530:	e72b      	b.n	800738a <_svfiprintf_r+0x2e>
 8007532:	ab07      	add	r3, sp, #28
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	003a      	movs	r2, r7
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <_svfiprintf_r+0x1f8>)
 800753a:	0021      	movs	r1, r4
 800753c:	9803      	ldr	r0, [sp, #12]
 800753e:	f7fe f80f 	bl	8005560 <_printf_i>
 8007542:	e7ea      	b.n	800751a <_svfiprintf_r+0x1be>
 8007544:	08007cc4 	.word	0x08007cc4
 8007548:	08007cca 	.word	0x08007cca
 800754c:	08007cce 	.word	0x08007cce
 8007550:	08004fed 	.word	0x08004fed
 8007554:	08007299 	.word	0x08007299

08007558 <__sfputc_r>:
 8007558:	6893      	ldr	r3, [r2, #8]
 800755a:	b510      	push	{r4, lr}
 800755c:	3b01      	subs	r3, #1
 800755e:	6093      	str	r3, [r2, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	da04      	bge.n	800756e <__sfputc_r+0x16>
 8007564:	6994      	ldr	r4, [r2, #24]
 8007566:	42a3      	cmp	r3, r4
 8007568:	db07      	blt.n	800757a <__sfputc_r+0x22>
 800756a:	290a      	cmp	r1, #10
 800756c:	d005      	beq.n	800757a <__sfputc_r+0x22>
 800756e:	6813      	ldr	r3, [r2, #0]
 8007570:	1c58      	adds	r0, r3, #1
 8007572:	6010      	str	r0, [r2, #0]
 8007574:	7019      	strb	r1, [r3, #0]
 8007576:	0008      	movs	r0, r1
 8007578:	bd10      	pop	{r4, pc}
 800757a:	f7fe f99d 	bl	80058b8 <__swbuf_r>
 800757e:	0001      	movs	r1, r0
 8007580:	e7f9      	b.n	8007576 <__sfputc_r+0x1e>

08007582 <__sfputs_r>:
 8007582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007584:	0006      	movs	r6, r0
 8007586:	000f      	movs	r7, r1
 8007588:	0014      	movs	r4, r2
 800758a:	18d5      	adds	r5, r2, r3
 800758c:	42ac      	cmp	r4, r5
 800758e:	d101      	bne.n	8007594 <__sfputs_r+0x12>
 8007590:	2000      	movs	r0, #0
 8007592:	e007      	b.n	80075a4 <__sfputs_r+0x22>
 8007594:	7821      	ldrb	r1, [r4, #0]
 8007596:	003a      	movs	r2, r7
 8007598:	0030      	movs	r0, r6
 800759a:	f7ff ffdd 	bl	8007558 <__sfputc_r>
 800759e:	3401      	adds	r4, #1
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d1f3      	bne.n	800758c <__sfputs_r+0xa>
 80075a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075a8 <_vfiprintf_r>:
 80075a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075aa:	b0a1      	sub	sp, #132	; 0x84
 80075ac:	9003      	str	r0, [sp, #12]
 80075ae:	000f      	movs	r7, r1
 80075b0:	0016      	movs	r6, r2
 80075b2:	001d      	movs	r5, r3
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d005      	beq.n	80075c4 <_vfiprintf_r+0x1c>
 80075b8:	6983      	ldr	r3, [r0, #24]
 80075ba:	9305      	str	r3, [sp, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <_vfiprintf_r+0x1c>
 80075c0:	f7ff f9a4 	bl	800690c <__sinit>
 80075c4:	4b7b      	ldr	r3, [pc, #492]	; (80077b4 <_vfiprintf_r+0x20c>)
 80075c6:	429f      	cmp	r7, r3
 80075c8:	d15c      	bne.n	8007684 <_vfiprintf_r+0xdc>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	685f      	ldr	r7, [r3, #4]
 80075ce:	89bb      	ldrh	r3, [r7, #12]
 80075d0:	071b      	lsls	r3, r3, #28
 80075d2:	d563      	bpl.n	800769c <_vfiprintf_r+0xf4>
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d060      	beq.n	800769c <_vfiprintf_r+0xf4>
 80075da:	2300      	movs	r3, #0
 80075dc:	ac08      	add	r4, sp, #32
 80075de:	6163      	str	r3, [r4, #20]
 80075e0:	3320      	adds	r3, #32
 80075e2:	7663      	strb	r3, [r4, #25]
 80075e4:	3310      	adds	r3, #16
 80075e6:	76a3      	strb	r3, [r4, #26]
 80075e8:	9507      	str	r5, [sp, #28]
 80075ea:	0035      	movs	r5, r6
 80075ec:	782b      	ldrb	r3, [r5, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <_vfiprintf_r+0x4e>
 80075f2:	2b25      	cmp	r3, #37	; 0x25
 80075f4:	d15c      	bne.n	80076b0 <_vfiprintf_r+0x108>
 80075f6:	1bab      	subs	r3, r5, r6
 80075f8:	9305      	str	r3, [sp, #20]
 80075fa:	d00c      	beq.n	8007616 <_vfiprintf_r+0x6e>
 80075fc:	0032      	movs	r2, r6
 80075fe:	0039      	movs	r1, r7
 8007600:	9803      	ldr	r0, [sp, #12]
 8007602:	f7ff ffbe 	bl	8007582 <__sfputs_r>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	d100      	bne.n	800760c <_vfiprintf_r+0x64>
 800760a:	e0c4      	b.n	8007796 <_vfiprintf_r+0x1ee>
 800760c:	6962      	ldr	r2, [r4, #20]
 800760e:	9b05      	ldr	r3, [sp, #20]
 8007610:	4694      	mov	ip, r2
 8007612:	4463      	add	r3, ip
 8007614:	6163      	str	r3, [r4, #20]
 8007616:	782b      	ldrb	r3, [r5, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d100      	bne.n	800761e <_vfiprintf_r+0x76>
 800761c:	e0bb      	b.n	8007796 <_vfiprintf_r+0x1ee>
 800761e:	2201      	movs	r2, #1
 8007620:	2300      	movs	r3, #0
 8007622:	4252      	negs	r2, r2
 8007624:	6062      	str	r2, [r4, #4]
 8007626:	a904      	add	r1, sp, #16
 8007628:	3254      	adds	r2, #84	; 0x54
 800762a:	1852      	adds	r2, r2, r1
 800762c:	1c6e      	adds	r6, r5, #1
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	60e3      	str	r3, [r4, #12]
 8007632:	60a3      	str	r3, [r4, #8]
 8007634:	7013      	strb	r3, [r2, #0]
 8007636:	65a3      	str	r3, [r4, #88]	; 0x58
 8007638:	7831      	ldrb	r1, [r6, #0]
 800763a:	2205      	movs	r2, #5
 800763c:	485e      	ldr	r0, [pc, #376]	; (80077b8 <_vfiprintf_r+0x210>)
 800763e:	f7ff fa7b 	bl	8006b38 <memchr>
 8007642:	1c75      	adds	r5, r6, #1
 8007644:	2800      	cmp	r0, #0
 8007646:	d135      	bne.n	80076b4 <_vfiprintf_r+0x10c>
 8007648:	6822      	ldr	r2, [r4, #0]
 800764a:	06d3      	lsls	r3, r2, #27
 800764c:	d504      	bpl.n	8007658 <_vfiprintf_r+0xb0>
 800764e:	2353      	movs	r3, #83	; 0x53
 8007650:	a904      	add	r1, sp, #16
 8007652:	185b      	adds	r3, r3, r1
 8007654:	2120      	movs	r1, #32
 8007656:	7019      	strb	r1, [r3, #0]
 8007658:	0713      	lsls	r3, r2, #28
 800765a:	d504      	bpl.n	8007666 <_vfiprintf_r+0xbe>
 800765c:	2353      	movs	r3, #83	; 0x53
 800765e:	a904      	add	r1, sp, #16
 8007660:	185b      	adds	r3, r3, r1
 8007662:	212b      	movs	r1, #43	; 0x2b
 8007664:	7019      	strb	r1, [r3, #0]
 8007666:	7833      	ldrb	r3, [r6, #0]
 8007668:	2b2a      	cmp	r3, #42	; 0x2a
 800766a:	d02c      	beq.n	80076c6 <_vfiprintf_r+0x11e>
 800766c:	0035      	movs	r5, r6
 800766e:	2100      	movs	r1, #0
 8007670:	200a      	movs	r0, #10
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	782a      	ldrb	r2, [r5, #0]
 8007676:	1c6e      	adds	r6, r5, #1
 8007678:	3a30      	subs	r2, #48	; 0x30
 800767a:	2a09      	cmp	r2, #9
 800767c:	d964      	bls.n	8007748 <_vfiprintf_r+0x1a0>
 800767e:	2900      	cmp	r1, #0
 8007680:	d02e      	beq.n	80076e0 <_vfiprintf_r+0x138>
 8007682:	e026      	b.n	80076d2 <_vfiprintf_r+0x12a>
 8007684:	4b4d      	ldr	r3, [pc, #308]	; (80077bc <_vfiprintf_r+0x214>)
 8007686:	429f      	cmp	r7, r3
 8007688:	d102      	bne.n	8007690 <_vfiprintf_r+0xe8>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	689f      	ldr	r7, [r3, #8]
 800768e:	e79e      	b.n	80075ce <_vfiprintf_r+0x26>
 8007690:	4b4b      	ldr	r3, [pc, #300]	; (80077c0 <_vfiprintf_r+0x218>)
 8007692:	429f      	cmp	r7, r3
 8007694:	d19b      	bne.n	80075ce <_vfiprintf_r+0x26>
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	68df      	ldr	r7, [r3, #12]
 800769a:	e798      	b.n	80075ce <_vfiprintf_r+0x26>
 800769c:	0039      	movs	r1, r7
 800769e:	9803      	ldr	r0, [sp, #12]
 80076a0:	f7fe f960 	bl	8005964 <__swsetup_r>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d098      	beq.n	80075da <_vfiprintf_r+0x32>
 80076a8:	2001      	movs	r0, #1
 80076aa:	4240      	negs	r0, r0
 80076ac:	b021      	add	sp, #132	; 0x84
 80076ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b0:	3501      	adds	r5, #1
 80076b2:	e79b      	b.n	80075ec <_vfiprintf_r+0x44>
 80076b4:	4b40      	ldr	r3, [pc, #256]	; (80077b8 <_vfiprintf_r+0x210>)
 80076b6:	6822      	ldr	r2, [r4, #0]
 80076b8:	1ac0      	subs	r0, r0, r3
 80076ba:	2301      	movs	r3, #1
 80076bc:	4083      	lsls	r3, r0
 80076be:	4313      	orrs	r3, r2
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	002e      	movs	r6, r5
 80076c4:	e7b8      	b.n	8007638 <_vfiprintf_r+0x90>
 80076c6:	9b07      	ldr	r3, [sp, #28]
 80076c8:	1d19      	adds	r1, r3, #4
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	9107      	str	r1, [sp, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	db01      	blt.n	80076d6 <_vfiprintf_r+0x12e>
 80076d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80076d4:	e004      	b.n	80076e0 <_vfiprintf_r+0x138>
 80076d6:	425b      	negs	r3, r3
 80076d8:	60e3      	str	r3, [r4, #12]
 80076da:	2302      	movs	r3, #2
 80076dc:	4313      	orrs	r3, r2
 80076de:	6023      	str	r3, [r4, #0]
 80076e0:	782b      	ldrb	r3, [r5, #0]
 80076e2:	2b2e      	cmp	r3, #46	; 0x2e
 80076e4:	d10a      	bne.n	80076fc <_vfiprintf_r+0x154>
 80076e6:	786b      	ldrb	r3, [r5, #1]
 80076e8:	2b2a      	cmp	r3, #42	; 0x2a
 80076ea:	d135      	bne.n	8007758 <_vfiprintf_r+0x1b0>
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	3502      	adds	r5, #2
 80076f0:	1d1a      	adds	r2, r3, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	9207      	str	r2, [sp, #28]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	db2b      	blt.n	8007752 <_vfiprintf_r+0x1aa>
 80076fa:	9309      	str	r3, [sp, #36]	; 0x24
 80076fc:	4e31      	ldr	r6, [pc, #196]	; (80077c4 <_vfiprintf_r+0x21c>)
 80076fe:	7829      	ldrb	r1, [r5, #0]
 8007700:	2203      	movs	r2, #3
 8007702:	0030      	movs	r0, r6
 8007704:	f7ff fa18 	bl	8006b38 <memchr>
 8007708:	2800      	cmp	r0, #0
 800770a:	d006      	beq.n	800771a <_vfiprintf_r+0x172>
 800770c:	2340      	movs	r3, #64	; 0x40
 800770e:	1b80      	subs	r0, r0, r6
 8007710:	4083      	lsls	r3, r0
 8007712:	6822      	ldr	r2, [r4, #0]
 8007714:	3501      	adds	r5, #1
 8007716:	4313      	orrs	r3, r2
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	7829      	ldrb	r1, [r5, #0]
 800771c:	2206      	movs	r2, #6
 800771e:	482a      	ldr	r0, [pc, #168]	; (80077c8 <_vfiprintf_r+0x220>)
 8007720:	1c6e      	adds	r6, r5, #1
 8007722:	7621      	strb	r1, [r4, #24]
 8007724:	f7ff fa08 	bl	8006b38 <memchr>
 8007728:	2800      	cmp	r0, #0
 800772a:	d03a      	beq.n	80077a2 <_vfiprintf_r+0x1fa>
 800772c:	4b27      	ldr	r3, [pc, #156]	; (80077cc <_vfiprintf_r+0x224>)
 800772e:	2b00      	cmp	r3, #0
 8007730:	d125      	bne.n	800777e <_vfiprintf_r+0x1d6>
 8007732:	2207      	movs	r2, #7
 8007734:	9b07      	ldr	r3, [sp, #28]
 8007736:	3307      	adds	r3, #7
 8007738:	4393      	bics	r3, r2
 800773a:	3308      	adds	r3, #8
 800773c:	9307      	str	r3, [sp, #28]
 800773e:	6963      	ldr	r3, [r4, #20]
 8007740:	9a04      	ldr	r2, [sp, #16]
 8007742:	189b      	adds	r3, r3, r2
 8007744:	6163      	str	r3, [r4, #20]
 8007746:	e750      	b.n	80075ea <_vfiprintf_r+0x42>
 8007748:	4343      	muls	r3, r0
 800774a:	2101      	movs	r1, #1
 800774c:	189b      	adds	r3, r3, r2
 800774e:	0035      	movs	r5, r6
 8007750:	e790      	b.n	8007674 <_vfiprintf_r+0xcc>
 8007752:	2301      	movs	r3, #1
 8007754:	425b      	negs	r3, r3
 8007756:	e7d0      	b.n	80076fa <_vfiprintf_r+0x152>
 8007758:	2300      	movs	r3, #0
 800775a:	200a      	movs	r0, #10
 800775c:	001a      	movs	r2, r3
 800775e:	3501      	adds	r5, #1
 8007760:	6063      	str	r3, [r4, #4]
 8007762:	7829      	ldrb	r1, [r5, #0]
 8007764:	1c6e      	adds	r6, r5, #1
 8007766:	3930      	subs	r1, #48	; 0x30
 8007768:	2909      	cmp	r1, #9
 800776a:	d903      	bls.n	8007774 <_vfiprintf_r+0x1cc>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0c5      	beq.n	80076fc <_vfiprintf_r+0x154>
 8007770:	9209      	str	r2, [sp, #36]	; 0x24
 8007772:	e7c3      	b.n	80076fc <_vfiprintf_r+0x154>
 8007774:	4342      	muls	r2, r0
 8007776:	2301      	movs	r3, #1
 8007778:	1852      	adds	r2, r2, r1
 800777a:	0035      	movs	r5, r6
 800777c:	e7f1      	b.n	8007762 <_vfiprintf_r+0x1ba>
 800777e:	ab07      	add	r3, sp, #28
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	003a      	movs	r2, r7
 8007784:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <_vfiprintf_r+0x228>)
 8007786:	0021      	movs	r1, r4
 8007788:	9803      	ldr	r0, [sp, #12]
 800778a:	f7fd fc2f 	bl	8004fec <_printf_float>
 800778e:	9004      	str	r0, [sp, #16]
 8007790:	9b04      	ldr	r3, [sp, #16]
 8007792:	3301      	adds	r3, #1
 8007794:	d1d3      	bne.n	800773e <_vfiprintf_r+0x196>
 8007796:	89bb      	ldrh	r3, [r7, #12]
 8007798:	065b      	lsls	r3, r3, #25
 800779a:	d500      	bpl.n	800779e <_vfiprintf_r+0x1f6>
 800779c:	e784      	b.n	80076a8 <_vfiprintf_r+0x100>
 800779e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80077a0:	e784      	b.n	80076ac <_vfiprintf_r+0x104>
 80077a2:	ab07      	add	r3, sp, #28
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	003a      	movs	r2, r7
 80077a8:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <_vfiprintf_r+0x228>)
 80077aa:	0021      	movs	r1, r4
 80077ac:	9803      	ldr	r0, [sp, #12]
 80077ae:	f7fd fed7 	bl	8005560 <_printf_i>
 80077b2:	e7ec      	b.n	800778e <_vfiprintf_r+0x1e6>
 80077b4:	08007b84 	.word	0x08007b84
 80077b8:	08007cc4 	.word	0x08007cc4
 80077bc:	08007ba4 	.word	0x08007ba4
 80077c0:	08007b64 	.word	0x08007b64
 80077c4:	08007cca 	.word	0x08007cca
 80077c8:	08007cce 	.word	0x08007cce
 80077cc:	08004fed 	.word	0x08004fed
 80077d0:	08007583 	.word	0x08007583

080077d4 <_sbrk_r>:
 80077d4:	2300      	movs	r3, #0
 80077d6:	b570      	push	{r4, r5, r6, lr}
 80077d8:	4c06      	ldr	r4, [pc, #24]	; (80077f4 <_sbrk_r+0x20>)
 80077da:	0005      	movs	r5, r0
 80077dc:	0008      	movs	r0, r1
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	f7fa ff3e 	bl	8002660 <_sbrk>
 80077e4:	1c43      	adds	r3, r0, #1
 80077e6:	d103      	bne.n	80077f0 <_sbrk_r+0x1c>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d000      	beq.n	80077f0 <_sbrk_r+0x1c>
 80077ee:	602b      	str	r3, [r5, #0]
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	200002f0 	.word	0x200002f0

080077f8 <__sread>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	000c      	movs	r4, r1
 80077fc:	250e      	movs	r5, #14
 80077fe:	5f49      	ldrsh	r1, [r1, r5]
 8007800:	f000 f8f2 	bl	80079e8 <_read_r>
 8007804:	2800      	cmp	r0, #0
 8007806:	db03      	blt.n	8007810 <__sread+0x18>
 8007808:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800780a:	181b      	adds	r3, r3, r0
 800780c:	6563      	str	r3, [r4, #84]	; 0x54
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	4a02      	ldr	r2, [pc, #8]	; (800781c <__sread+0x24>)
 8007814:	4013      	ands	r3, r2
 8007816:	81a3      	strh	r3, [r4, #12]
 8007818:	e7f9      	b.n	800780e <__sread+0x16>
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	ffffefff 	.word	0xffffefff

08007820 <__swrite>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	001f      	movs	r7, r3
 8007824:	898b      	ldrh	r3, [r1, #12]
 8007826:	0005      	movs	r5, r0
 8007828:	000c      	movs	r4, r1
 800782a:	0016      	movs	r6, r2
 800782c:	05db      	lsls	r3, r3, #23
 800782e:	d505      	bpl.n	800783c <__swrite+0x1c>
 8007830:	230e      	movs	r3, #14
 8007832:	5ec9      	ldrsh	r1, [r1, r3]
 8007834:	2200      	movs	r2, #0
 8007836:	2302      	movs	r3, #2
 8007838:	f000 f874 	bl	8007924 <_lseek_r>
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	4a05      	ldr	r2, [pc, #20]	; (8007854 <__swrite+0x34>)
 8007840:	0028      	movs	r0, r5
 8007842:	4013      	ands	r3, r2
 8007844:	81a3      	strh	r3, [r4, #12]
 8007846:	0032      	movs	r2, r6
 8007848:	230e      	movs	r3, #14
 800784a:	5ee1      	ldrsh	r1, [r4, r3]
 800784c:	003b      	movs	r3, r7
 800784e:	f000 f81f 	bl	8007890 <_write_r>
 8007852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007854:	ffffefff 	.word	0xffffefff

08007858 <__sseek>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	000c      	movs	r4, r1
 800785c:	250e      	movs	r5, #14
 800785e:	5f49      	ldrsh	r1, [r1, r5]
 8007860:	f000 f860 	bl	8007924 <_lseek_r>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	1c42      	adds	r2, r0, #1
 8007868:	d103      	bne.n	8007872 <__sseek+0x1a>
 800786a:	4a05      	ldr	r2, [pc, #20]	; (8007880 <__sseek+0x28>)
 800786c:	4013      	ands	r3, r2
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	bd70      	pop	{r4, r5, r6, pc}
 8007872:	2280      	movs	r2, #128	; 0x80
 8007874:	0152      	lsls	r2, r2, #5
 8007876:	4313      	orrs	r3, r2
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	6560      	str	r0, [r4, #84]	; 0x54
 800787c:	e7f8      	b.n	8007870 <__sseek+0x18>
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	ffffefff 	.word	0xffffefff

08007884 <__sclose>:
 8007884:	b510      	push	{r4, lr}
 8007886:	230e      	movs	r3, #14
 8007888:	5ec9      	ldrsh	r1, [r1, r3]
 800788a:	f000 f815 	bl	80078b8 <_close_r>
 800788e:	bd10      	pop	{r4, pc}

08007890 <_write_r>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	0005      	movs	r5, r0
 8007894:	0008      	movs	r0, r1
 8007896:	0011      	movs	r1, r2
 8007898:	2200      	movs	r2, #0
 800789a:	4c06      	ldr	r4, [pc, #24]	; (80078b4 <_write_r+0x24>)
 800789c:	6022      	str	r2, [r4, #0]
 800789e:	001a      	movs	r2, r3
 80078a0:	f7fa fe95 	bl	80025ce <_write>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d103      	bne.n	80078b0 <_write_r+0x20>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d000      	beq.n	80078b0 <_write_r+0x20>
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	bd70      	pop	{r4, r5, r6, pc}
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	200002f0 	.word	0x200002f0

080078b8 <_close_r>:
 80078b8:	2300      	movs	r3, #0
 80078ba:	b570      	push	{r4, r5, r6, lr}
 80078bc:	4c06      	ldr	r4, [pc, #24]	; (80078d8 <_close_r+0x20>)
 80078be:	0005      	movs	r5, r0
 80078c0:	0008      	movs	r0, r1
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	f7fa fe9f 	bl	8002606 <_close>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d103      	bne.n	80078d4 <_close_r+0x1c>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d000      	beq.n	80078d4 <_close_r+0x1c>
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	bd70      	pop	{r4, r5, r6, pc}
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	200002f0 	.word	0x200002f0

080078dc <_fstat_r>:
 80078dc:	2300      	movs	r3, #0
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	4c06      	ldr	r4, [pc, #24]	; (80078fc <_fstat_r+0x20>)
 80078e2:	0005      	movs	r5, r0
 80078e4:	0008      	movs	r0, r1
 80078e6:	0011      	movs	r1, r2
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	f7fa fe96 	bl	800261a <_fstat>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	d103      	bne.n	80078fa <_fstat_r+0x1e>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d000      	beq.n	80078fa <_fstat_r+0x1e>
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	200002f0 	.word	0x200002f0

08007900 <_isatty_r>:
 8007900:	2300      	movs	r3, #0
 8007902:	b570      	push	{r4, r5, r6, lr}
 8007904:	4c06      	ldr	r4, [pc, #24]	; (8007920 <_isatty_r+0x20>)
 8007906:	0005      	movs	r5, r0
 8007908:	0008      	movs	r0, r1
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	f7fa fe93 	bl	8002636 <_isatty>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d103      	bne.n	800791c <_isatty_r+0x1c>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d000      	beq.n	800791c <_isatty_r+0x1c>
 800791a:	602b      	str	r3, [r5, #0]
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	200002f0 	.word	0x200002f0

08007924 <_lseek_r>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	0005      	movs	r5, r0
 8007928:	0008      	movs	r0, r1
 800792a:	0011      	movs	r1, r2
 800792c:	2200      	movs	r2, #0
 800792e:	4c06      	ldr	r4, [pc, #24]	; (8007948 <_lseek_r+0x24>)
 8007930:	6022      	str	r2, [r4, #0]
 8007932:	001a      	movs	r2, r3
 8007934:	f7fa fe88 	bl	8002648 <_lseek>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d103      	bne.n	8007944 <_lseek_r+0x20>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d000      	beq.n	8007944 <_lseek_r+0x20>
 8007942:	602b      	str	r3, [r5, #0]
 8007944:	bd70      	pop	{r4, r5, r6, pc}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	200002f0 	.word	0x200002f0

0800794c <__ascii_mbtowc>:
 800794c:	b082      	sub	sp, #8
 800794e:	2900      	cmp	r1, #0
 8007950:	d100      	bne.n	8007954 <__ascii_mbtowc+0x8>
 8007952:	a901      	add	r1, sp, #4
 8007954:	1e10      	subs	r0, r2, #0
 8007956:	d006      	beq.n	8007966 <__ascii_mbtowc+0x1a>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <__ascii_mbtowc+0x1e>
 800795c:	7813      	ldrb	r3, [r2, #0]
 800795e:	600b      	str	r3, [r1, #0]
 8007960:	7810      	ldrb	r0, [r2, #0]
 8007962:	1e43      	subs	r3, r0, #1
 8007964:	4198      	sbcs	r0, r3
 8007966:	b002      	add	sp, #8
 8007968:	4770      	bx	lr
 800796a:	2002      	movs	r0, #2
 800796c:	4240      	negs	r0, r0
 800796e:	e7fa      	b.n	8007966 <__ascii_mbtowc+0x1a>

08007970 <memmove>:
 8007970:	b510      	push	{r4, lr}
 8007972:	4288      	cmp	r0, r1
 8007974:	d902      	bls.n	800797c <memmove+0xc>
 8007976:	188b      	adds	r3, r1, r2
 8007978:	4298      	cmp	r0, r3
 800797a:	d303      	bcc.n	8007984 <memmove+0x14>
 800797c:	2300      	movs	r3, #0
 800797e:	e007      	b.n	8007990 <memmove+0x20>
 8007980:	5c8b      	ldrb	r3, [r1, r2]
 8007982:	5483      	strb	r3, [r0, r2]
 8007984:	3a01      	subs	r2, #1
 8007986:	d2fb      	bcs.n	8007980 <memmove+0x10>
 8007988:	bd10      	pop	{r4, pc}
 800798a:	5ccc      	ldrb	r4, [r1, r3]
 800798c:	54c4      	strb	r4, [r0, r3]
 800798e:	3301      	adds	r3, #1
 8007990:	429a      	cmp	r2, r3
 8007992:	d1fa      	bne.n	800798a <memmove+0x1a>
 8007994:	e7f8      	b.n	8007988 <memmove+0x18>

08007996 <__malloc_lock>:
 8007996:	4770      	bx	lr

08007998 <__malloc_unlock>:
 8007998:	4770      	bx	lr

0800799a <_realloc_r>:
 800799a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799c:	0007      	movs	r7, r0
 800799e:	000d      	movs	r5, r1
 80079a0:	0016      	movs	r6, r2
 80079a2:	2900      	cmp	r1, #0
 80079a4:	d105      	bne.n	80079b2 <_realloc_r+0x18>
 80079a6:	0011      	movs	r1, r2
 80079a8:	f7ff fc18 	bl	80071dc <_malloc_r>
 80079ac:	0004      	movs	r4, r0
 80079ae:	0020      	movs	r0, r4
 80079b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	d103      	bne.n	80079be <_realloc_r+0x24>
 80079b6:	f7ff fbc7 	bl	8007148 <_free_r>
 80079ba:	0034      	movs	r4, r6
 80079bc:	e7f7      	b.n	80079ae <_realloc_r+0x14>
 80079be:	f000 f833 	bl	8007a28 <_malloc_usable_size_r>
 80079c2:	002c      	movs	r4, r5
 80079c4:	42b0      	cmp	r0, r6
 80079c6:	d2f2      	bcs.n	80079ae <_realloc_r+0x14>
 80079c8:	0031      	movs	r1, r6
 80079ca:	0038      	movs	r0, r7
 80079cc:	f7ff fc06 	bl	80071dc <_malloc_r>
 80079d0:	1e04      	subs	r4, r0, #0
 80079d2:	d0ec      	beq.n	80079ae <_realloc_r+0x14>
 80079d4:	0029      	movs	r1, r5
 80079d6:	0032      	movs	r2, r6
 80079d8:	f7ff f8b9 	bl	8006b4e <memcpy>
 80079dc:	0029      	movs	r1, r5
 80079de:	0038      	movs	r0, r7
 80079e0:	f7ff fbb2 	bl	8007148 <_free_r>
 80079e4:	e7e3      	b.n	80079ae <_realloc_r+0x14>
	...

080079e8 <_read_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	0005      	movs	r5, r0
 80079ec:	0008      	movs	r0, r1
 80079ee:	0011      	movs	r1, r2
 80079f0:	2200      	movs	r2, #0
 80079f2:	4c06      	ldr	r4, [pc, #24]	; (8007a0c <_read_r+0x24>)
 80079f4:	6022      	str	r2, [r4, #0]
 80079f6:	001a      	movs	r2, r3
 80079f8:	f7fa fdcc 	bl	8002594 <_read>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d103      	bne.n	8007a08 <_read_r+0x20>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d000      	beq.n	8007a08 <_read_r+0x20>
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	bd70      	pop	{r4, r5, r6, pc}
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	200002f0 	.word	0x200002f0

08007a10 <__ascii_wctomb>:
 8007a10:	1e0b      	subs	r3, r1, #0
 8007a12:	d004      	beq.n	8007a1e <__ascii_wctomb+0xe>
 8007a14:	2aff      	cmp	r2, #255	; 0xff
 8007a16:	d904      	bls.n	8007a22 <__ascii_wctomb+0x12>
 8007a18:	238a      	movs	r3, #138	; 0x8a
 8007a1a:	6003      	str	r3, [r0, #0]
 8007a1c:	3b8b      	subs	r3, #139	; 0x8b
 8007a1e:	0018      	movs	r0, r3
 8007a20:	4770      	bx	lr
 8007a22:	700a      	strb	r2, [r1, #0]
 8007a24:	2301      	movs	r3, #1
 8007a26:	e7fa      	b.n	8007a1e <__ascii_wctomb+0xe>

08007a28 <_malloc_usable_size_r>:
 8007a28:	1f0b      	subs	r3, r1, #4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	1f18      	subs	r0, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da01      	bge.n	8007a36 <_malloc_usable_size_r+0xe>
 8007a32:	580b      	ldr	r3, [r1, r0]
 8007a34:	18c0      	adds	r0, r0, r3
 8007a36:	4770      	bx	lr

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	46c0      	nop			; (mov r8, r8)
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr
