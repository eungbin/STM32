
L4S5VI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae2c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800aff0  0800aff0  0001aff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b490  0800b490  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b490  0800b490  0001b490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b498  0800b498  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b49c  0800b49c  0001b49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001364  200001ec  0800b68c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001550  0800b68c  00021550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021132  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f2b  00000000  00000000  0004134e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a30  00000000  00000000  00045280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001838  00000000  00000000  00046cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ed55  00000000  00000000  000484e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001618f  00000000  00000000  0007723d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00116b7d  00000000  00000000  0008d3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a3f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bac  00000000  00000000  001a3fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800afd4 	.word	0x0800afd4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	0800afd4 	.word	0x0800afd4

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b972 	b.w	8000ef4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4688      	mov	r8, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14b      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4615      	mov	r5, r2
 8000c3a:	d967      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0720 	rsb	r7, r2, #32
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c4e:	4095      	lsls	r5, r2
 8000c50:	ea47 0803 	orr.w	r8, r7, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c60:	fa1f fc85 	uxth.w	ip, r5
 8000c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7a:	f080 811b 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8118 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	442b      	add	r3, r5
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9c:	45a4      	cmp	ip, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	192c      	adds	r4, r5, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	442c      	add	r4, r5
 8000cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cb8:	eba4 040c 	sub.w	r4, r4, ip
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	b11e      	cbz	r6, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0xbe>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80eb 	beq.w	8000eae <__udivmoddi4+0x286>
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e9c6 0100 	strd	r0, r1, [r6]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f783 	clz	r7, r3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d147      	bne.n	8000d7e <__udivmoddi4+0x156>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xd0>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80fa 	bhi.w	8000eec <__udivmoddi4+0x2c4>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4698      	mov	r8, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e0      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d06:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0a:	e7dd      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xe8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f040 808f 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d1a:	1b49      	subs	r1, r1, r5
 8000d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d20:	fa1f f885 	uxth.w	r8, r5
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb08 f10c 	mul.w	r1, r8, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3c:	18eb      	adds	r3, r5, r3
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4299      	cmp	r1, r3
 8000d46:	f200 80cd 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x14c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x14a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80b6 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e79f      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da2:	0c2c      	lsrs	r4, r5, #16
 8000da4:	fb08 3319 	mls	r3, r8, r9, r3
 8000da8:	fa1f fa8e 	uxth.w	sl, lr
 8000dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db0:	fb09 f40a 	mul.w	r4, r9, sl
 8000db4:	429c      	cmp	r4, r3
 8000db6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dba:	fa00 f107 	lsl.w	r1, r0, r7
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4473      	add	r3, lr
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dec:	45a2      	cmp	sl, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1e 0404 	adds.w	r4, lr, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a2      	cmp	sl, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4474      	add	r4, lr
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	eba4 040a 	sub.w	r4, r4, sl
 8000e0e:	454c      	cmp	r4, r9
 8000e10:	46c2      	mov	sl, r8
 8000e12:	464b      	mov	r3, r9
 8000e14:	d354      	bcc.n	8000ec0 <__udivmoddi4+0x298>
 8000e16:	d051      	beq.n	8000ebc <__udivmoddi4+0x294>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d069      	beq.n	8000ef0 <__udivmoddi4+0x2c8>
 8000e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e20:	eb64 0403 	sbc.w	r4, r4, r3
 8000e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e28:	40fd      	lsrs	r5, r7
 8000e2a:	40fc      	lsrs	r4, r7
 8000e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e30:	e9c6 5400 	strd	r5, r4, [r6]
 8000e34:	2700      	movs	r7, #0
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e40:	4095      	lsls	r5, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e4e:	4338      	orrs	r0, r7
 8000e50:	0c01      	lsrs	r1, r0, #16
 8000e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e56:	fa1f f885 	uxth.w	r8, r5
 8000e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb07 f308 	mul.w	r3, r7, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3f02      	subs	r7, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	b281      	uxth	r1, r0
 8000e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb00 f308 	mul.w	r3, r0, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x27e>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e9c:	d217      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d915      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xfe>
 8000eae:	4637      	mov	r7, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e709      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	e6e7      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000ebc:	4541      	cmp	r1, r8
 8000ebe:	d2ab      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ec8:	3801      	subs	r0, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4660      	mov	r0, ip
 8000ed0:	e7e9      	b.n	8000ea6 <__udivmoddi4+0x27e>
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4667      	mov	r7, ip
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	e747      	b.n	8000d74 <__udivmoddi4+0x14c>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	442b      	add	r3, r5
 8000eea:	e72f      	b.n	8000d4c <__udivmoddi4+0x124>
 8000eec:	4638      	mov	r0, r7
 8000eee:	e708      	b.n	8000d02 <__udivmoddi4+0xda>
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0xa0>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <displayInit>:
 *  		• MAX_COLUMNS
 * @param	hi2c 	- pointer to the i2c handler
 * @retval	status 	- 0...OK, other...error
 */
uint8_t displayInit(I2C_HandleTypeDef *hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

	_i2cHandler = hi2c;			// pointer for i2c handler is stored in library
 8000f04:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <displayInit+0x68>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]

	// create i2c data stream
    uint8_t TransmitData[6] = {SPECIAL_COMMAND,									// special command character
 8000f0a:	23fe      	movs	r3, #254	; 0xfe
 8000f0c:	723b      	strb	r3, [r7, #8]
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <displayInit+0x6c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	727b      	strb	r3, [r7, #9]
 8000f1a:	23fe      	movs	r3, #254	; 0xfe
 8000f1c:	72bb      	strb	r3, [r7, #10]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <displayInit+0x70>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	72fb      	strb	r3, [r7, #11]
 8000f2a:	237c      	movs	r3, #124	; 0x7c
 8000f2c:	733b      	strb	r3, [r7, #12]
 8000f2e:	232d      	movs	r3, #45	; 0x2d
 8000f30:	737b      	strb	r3, [r7, #13]
							   SETTING_COMMAND, 								// Put LCD into setting mode
							   CLEAR_COMMAND 									// clear display
    						   };

    // transmission of data stream
    if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, TransmitData, sizeof(TransmitData), 100) != HAL_OK)		// transmit data
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <displayInit+0x68>)
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	f107 0208 	add.w	r2, r7, #8
 8000f3a:	2364      	movs	r3, #100	; 0x64
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2306      	movs	r3, #6
 8000f40:	21e4      	movs	r1, #228	; 0xe4
 8000f42:	f002 f851 	bl	8002fe8 <HAL_I2C_Master_Transmit>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <displayInit+0x58>
    	retval = LCD_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]

    HAL_Delay(50);
 8000f50:	2032      	movs	r0, #50	; 0x32
 8000f52:	f001 f9ef 	bl	8002334 <HAL_Delay>

    return retval;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20001178 	.word	0x20001178
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000001 	.word	0x20000001

08000f6c <displaySetCursor>:
 * @param	col 	- column number (0...19)
 * @param	row  	- row number (0...3)
 * @retval	status 	- 0...OK, other...error
 */
uint8_t displaySetCursor(uint8_t col, uint8_t row)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <displaySetCursor+0x44>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  //kepp variables in bounds
  //row = max(0, row);            //row cannot be less than 0
  //row = min(row, MAX_ROWS - 1); //row cannot be greater than max rows

  //send the command
  return displaySpecialCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	f107 0210 	add.w	r2, r7, #16
 8000f88:	4413      	add	r3, r2
 8000f8a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4413      	add	r3, r2
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f82c 	bl	8000ffc <displaySpecialCommand>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	0800aff0 	.word	0x0800aff0

08000fb4 <displayWriteString>:
 * @param	size  	- length of the string to write
 * @retval	status 	- 0...OK, other...error
 *
 */
uint8_t displayWriteString(char *buffer)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

	// transmission of data stream
	if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, buffer, strlen(buffer), 100) != HAL_OK)		// transmit data
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <displayWriteString+0x44>)
 8000fc2:	681c      	ldr	r4, [r3, #0]
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff f925 	bl	8000214 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	21e4      	movs	r1, #228	; 0xe4
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f002 f805 	bl	8002fe8 <HAL_I2C_Master_Transmit>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <displayWriteString+0x34>
	  retval = LCD_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10); //This takes a bit longer
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f001 f9a3 	bl	8002334 <HAL_Delay>

    return retval;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	20001178 	.word	0x20001178

08000ffc <displaySpecialCommand>:
/**
 * @brief	Send a special command to the display.  Used by other functions.
 * @retval	status (0...OK, other...error)
 */
uint8_t displaySpecialCommand(uint8_t command)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t retval = LCD_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
	uint8_t TransmitData[2] = {SPECIAL_COMMAND, command}; 												// create data stream
 800100a:	23fe      	movs	r3, #254	; 0xfe
 800100c:	733b      	strb	r3, [r7, #12]
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	737b      	strb	r3, [r7, #13]
	if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, TransmitData, sizeof(TransmitData), 100) != HAL_OK)		// transmit data
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <displaySpecialCommand+0x44>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	f107 020c 	add.w	r2, r7, #12
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2302      	movs	r3, #2
 8001020:	21e4      	movs	r1, #228	; 0xe4
 8001022:	f001 ffe1 	bl	8002fe8 <HAL_I2C_Master_Transmit>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <displaySpecialCommand+0x34>
		retval = LCD_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50); //Wait a bit longer for special display commands
 8001030:	2032      	movs	r0, #50	; 0x32
 8001032:	f001 f97f 	bl	8002334 <HAL_Delay>
	return retval;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20001178 	.word	0x20001178

08001044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_DMA_Init+0x60>)
 800104c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800104e:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <MX_DMA_Init+0x60>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6493      	str	r3, [r2, #72]	; 0x48
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_DMA_Init+0x60>)
 8001058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_DMA_Init+0x60>)
 8001064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <MX_DMA_Init+0x60>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6493      	str	r3, [r2, #72]	; 0x48
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_DMA_Init+0x60>)
 8001070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	200b      	movs	r0, #11
 8001080:	f001 fa32 	bl	80024e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001084:	200b      	movs	r0, #11
 8001086:	f001 fa4b 	bl	8002520 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2105      	movs	r1, #5
 800108e:	200c      	movs	r0, #12
 8001090:	f001 fa2a 	bl	80024e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001094:	200c      	movs	r0, #12
 8001096:	f001 fa43 	bl	8002520 <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <vApplicationGetIdleTaskMemory+0x30>)
 80010be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000214 	.word	0x20000214
 80010d8:	20000268 	.word	0x20000268

080010dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_FREERTOS_Init+0x6c>)
 80010e4:	1d3c      	adds	r4, r7, #4
 80010e6:	461d      	mov	r5, r3
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 fff0 	bl	80070de <osThreadCreate>
 80010fe:	4602      	mov	r2, r0
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_FREERTOS_Init+0x70>)
 8001102:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(vTask1,		/* Pointer to the function that implements the task. */
 8001104:	2300      	movs	r3, #0
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	2303      	movs	r3, #3
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2300      	movs	r3, #0
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	490f      	ldr	r1, [pc, #60]	; (8001150 <MX_FREERTOS_Init+0x74>)
 8001112:	4810      	ldr	r0, [pc, #64]	; (8001154 <MX_FREERTOS_Init+0x78>)
 8001114:	f006 f951 	bl	80073ba <xTaskCreate>
  				NULL,		/* task parameter. */
  				3,			/* task priority */
  				NULL );		/* task handle. */

  	/* Create the other task in exactly the same way. */
  	xTaskCreate( vTask2, "Task 2", 128, NULL, 3, NULL );
 8001118:	2300      	movs	r3, #0
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	2303      	movs	r3, #3
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <MX_FREERTOS_Init+0x7c>)
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_FREERTOS_Init+0x80>)
 8001128:	f006 f947 	bl	80073ba <xTaskCreate>
  	xTaskCreate( vTask3, "Task 3", 128, NULL, 3, NULL );
 800112c:	2300      	movs	r3, #0
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	2303      	movs	r3, #3
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2300      	movs	r3, #0
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	4909      	ldr	r1, [pc, #36]	; (8001160 <MX_FREERTOS_Init+0x84>)
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <MX_FREERTOS_Init+0x88>)
 800113c:	f006 f93d 	bl	80073ba <xTaskCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}
 8001148:	0800b02c 	.word	0x0800b02c
 800114c:	20001180 	.word	0x20001180
 8001150:	0800b008 	.word	0x0800b008
 8001154:	08001179 	.word	0x08001179
 8001158:	0800b010 	.word	0x0800b010
 800115c:	080011b1 	.word	0x080011b1
 8001160:	0800b018 	.word	0x0800b018
 8001164:	0800125d 	.word	0x0800125d

08001168 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f006 f800 	bl	8007176 <osDelay>
 8001176:	e7fb      	b.n	8001170 <StartDefaultTask+0x8>

08001178 <vTask1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vTask1( void *pvParameters )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Receive_DMA(&huart3,mise_buffer,32)!=HAL_OK)
 8001180:	2220      	movs	r2, #32
 8001182:	4907      	ldr	r1, [pc, #28]	; (80011a0 <vTask1+0x28>)
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <vTask1+0x2c>)
 8001186:	f004 fc19 	bl	80059bc <HAL_UART_Receive_DMA>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <vTask1+0x1e>
	{
		printf("fail\r\n");
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <vTask1+0x30>)
 8001192:	f007 feb3 	bl	8008efc <puts>
	}
	write_MISE("Passive");
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <vTask1+0x34>)
 8001198:	f000 f962 	bl	8001460 <write_MISE>
	/* infinite loop. */
	for( ;; )
 800119c:	e7fe      	b.n	800119c <vTask1+0x24>
 800119e:	bf00      	nop
 80011a0:	20001184 	.word	0x20001184
 80011a4:	200012b8 	.word	0x200012b8
 80011a8:	0800b048 	.word	0x0800b048
 80011ac:	0800b050 	.word	0x0800b050

080011b0 <vTask2>:
	}
}


void vTask2( void *pvParameters )
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	/* infinite loop. */
	for( ;; )
	{
		HAL_UART_Receive_IT(&huart4, co2_buffer, 12);
 80011b8:	220c      	movs	r2, #12
 80011ba:	491d      	ldr	r1, [pc, #116]	; (8001230 <vTask2+0x80>)
 80011bc:	481d      	ldr	r0, [pc, #116]	; (8001234 <vTask2+0x84>)
 80011be:	f004 fb25 	bl	800580c <HAL_UART_Receive_IT>
		displayInit(&hi2c1);
 80011c2:	481d      	ldr	r0, [pc, #116]	; (8001238 <vTask2+0x88>)
 80011c4:	f7ff fe98 	bl	8000ef8 <displayInit>
		if(!pir_status) {
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <vTask2+0x8c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d110      	bne.n	80011f2 <vTask2+0x42>
			displayWriteString("PM2.5 : ");
 80011d0:	481b      	ldr	r0, [pc, #108]	; (8001240 <vTask2+0x90>)
 80011d2:	f7ff feef 	bl	8000fb4 <displayWriteString>
			displayWriteString(s_pm2_5);
 80011d6:	481b      	ldr	r0, [pc, #108]	; (8001244 <vTask2+0x94>)
 80011d8:	f7ff feec 	bl	8000fb4 <displayWriteString>
			displaySetCursor(0, 1);
 80011dc:	2101      	movs	r1, #1
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fec4 	bl	8000f6c <displaySetCursor>
			displayWriteString("PM10  : ");
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <vTask2+0x98>)
 80011e6:	f7ff fee5 	bl	8000fb4 <displayWriteString>
			displayWriteString(s_pm10);
 80011ea:	4818      	ldr	r0, [pc, #96]	; (800124c <vTask2+0x9c>)
 80011ec:	f7ff fee2 	bl	8000fb4 <displayWriteString>
 80011f0:	e005      	b.n	80011fe <vTask2+0x4e>
		} else {
			displayWriteString("CO2 : ");
 80011f2:	4817      	ldr	r0, [pc, #92]	; (8001250 <vTask2+0xa0>)
 80011f4:	f7ff fede 	bl	8000fb4 <displayWriteString>
			displayWriteString(co2_result_buffer);
 80011f8:	4816      	ldr	r0, [pc, #88]	; (8001254 <vTask2+0xa4>)
 80011fa:	f7ff fedb 	bl	8000fb4 <displayWriteString>
		}
		counter++;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <vTask2+0xa8>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <vTask2+0xa8>)
 8001208:	701a      	strb	r2, [r3, #0]
		if(counter >= 5) {
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <vTask2+0xa8>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b04      	cmp	r3, #4
 8001210:	d908      	bls.n	8001224 <vTask2+0x74>
			counter = 0;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <vTask2+0xa8>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
			pir_status = ~pir_status;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <vTask2+0x8c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	43db      	mvns	r3, r3
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <vTask2+0x8c>)
 8001222:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001228:	f001 f884 	bl	8002334 <HAL_Delay>
		HAL_UART_Receive_IT(&huart4, co2_buffer, 12);
 800122c:	e7c4      	b.n	80011b8 <vTask2+0x8>
 800122e:	bf00      	nop
 8001230:	200011a4 	.word	0x200011a4
 8001234:	20001430 	.word	0x20001430
 8001238:	200011c0 	.word	0x200011c0
 800123c:	20000208 	.word	0x20000208
 8001240:	0800b058 	.word	0x0800b058
 8001244:	2000020c 	.word	0x2000020c
 8001248:	0800b064 	.word	0x0800b064
 800124c:	20000210 	.word	0x20000210
 8001250:	0800b070 	.word	0x0800b070
 8001254:	200011b4 	.word	0x200011b4
 8001258:	20000209 	.word	0x20000209

0800125c <vTask3>:
	}
}

void vTask3( void *pvParameters ) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	for( ;; ) {
//		HAL_GPIO_TogglePin(Relay_GPIO_Port, Relay_Pin);
//		HAL_GPIO_TogglePin(Relay2_GPIO_Port, Relay2_Pin);
		if(HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin))
 8001264:	2101      	movs	r1, #1
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <vTask3+0x30>)
 8001268:	f001 fdcc 	bl	8002e04 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <vTask3+0x1e>
			printf("DETECTED!!!\r\n");
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <vTask3+0x34>)
 8001274:	f007 fe42 	bl	8008efc <puts>
 8001278:	e002      	b.n	8001280 <vTask3+0x24>
		else
			printf("NO DETECTION...\r\n");
 800127a:	4806      	ldr	r0, [pc, #24]	; (8001294 <vTask3+0x38>)
 800127c:	f007 fe3e 	bl	8008efc <puts>
		HAL_Delay(1000);
 8001280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001284:	f001 f856 	bl	8002334 <HAL_Delay>
		if(HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin))
 8001288:	e7ec      	b.n	8001264 <vTask3+0x8>
 800128a:	bf00      	nop
 800128c:	48000400 	.word	0x48000400
 8001290:	0800b078 	.word	0x0800b078
 8001294:	0800b088 	.word	0x0800b088

08001298 <print_MISE>:
	}
}


void print_MISE(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 800129e:	2300      	movs	r3, #0
 80012a0:	80fb      	strh	r3, [r7, #6]

	check_byte_receive=mise_buffer[30]<<8|mise_buffer[31];
 80012a2:	4b63      	ldr	r3, [pc, #396]	; (8001430 <print_MISE+0x198>)
 80012a4:	7f9b      	ldrb	r3, [r3, #30]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	4b61      	ldr	r3, [pc, #388]	; (8001430 <print_MISE+0x198>)
 80012ac:	7fdb      	ldrb	r3, [r3, #31]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	807b      	strh	r3, [r7, #2]
	for(uint8_t i=0;i<30;i++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	717b      	strb	r3, [r7, #5]
 80012ba:	e009      	b.n	80012d0 <print_MISE+0x38>
	{
		check_byte_calculate+=mise_buffer[i];
 80012bc:	797b      	ldrb	r3, [r7, #5]
 80012be:	4a5c      	ldr	r2, [pc, #368]	; (8001430 <print_MISE+0x198>)
 80012c0:	5cd3      	ldrb	r3, [r2, r3]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4413      	add	r3, r2
 80012c8:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0;i<30;i++)
 80012ca:	797b      	ldrb	r3, [r7, #5]
 80012cc:	3301      	adds	r3, #1
 80012ce:	717b      	strb	r3, [r7, #5]
 80012d0:	797b      	ldrb	r3, [r7, #5]
 80012d2:	2b1d      	cmp	r3, #29
 80012d4:	d9f2      	bls.n	80012bc <print_MISE+0x24>
	}

	if(check_byte_receive==check_byte_calculate)
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	429a      	cmp	r2, r3
 80012dc:	f040 80a3 	bne.w	8001426 <print_MISE+0x18e>
	{
		printf("PM1.0 : %d	",(combine_value=(mise_buffer[10]<<8)|mise_buffer[11]));
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <print_MISE+0x198>)
 80012e2:	7a9b      	ldrb	r3, [r3, #10]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	4b51      	ldr	r3, [pc, #324]	; (8001430 <print_MISE+0x198>)
 80012ea:	7adb      	ldrb	r3, [r3, #11]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	803b      	strh	r3, [r7, #0]
 80012f4:	883b      	ldrh	r3, [r7, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	484e      	ldr	r0, [pc, #312]	; (8001434 <print_MISE+0x19c>)
 80012fa:	f007 fd8b 	bl	8008e14 <iprintf>
		printf("PM2.5 : %d	",(combine_value=(mise_buffer[12]<<8)|mise_buffer[13]));
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <print_MISE+0x198>)
 8001300:	7b1b      	ldrb	r3, [r3, #12]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <print_MISE+0x198>)
 8001308:	7b5b      	ldrb	r3, [r3, #13]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21b      	sxth	r3, r3
 8001310:	803b      	strh	r3, [r7, #0]
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	4848      	ldr	r0, [pc, #288]	; (8001438 <print_MISE+0x1a0>)
 8001318:	f007 fd7c 	bl	8008e14 <iprintf>
		printf("PM10 : %d	",(combine_value=(mise_buffer[14]<<8)|mise_buffer[15]));
 800131c:	4b44      	ldr	r3, [pc, #272]	; (8001430 <print_MISE+0x198>)
 800131e:	7b9b      	ldrb	r3, [r3, #14]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b42      	ldr	r3, [pc, #264]	; (8001430 <print_MISE+0x198>)
 8001326:	7bdb      	ldrb	r3, [r3, #15]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	803b      	strh	r3, [r7, #0]
 8001330:	883b      	ldrh	r3, [r7, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	4841      	ldr	r0, [pc, #260]	; (800143c <print_MISE+0x1a4>)
 8001336:	f007 fd6d 	bl	8008e14 <iprintf>
		printf("0.3um : %d	",(combine_value=(mise_buffer[16]<<8)|mise_buffer[17]));
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <print_MISE+0x198>)
 800133c:	7c1b      	ldrb	r3, [r3, #16]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <print_MISE+0x198>)
 8001344:	7c5b      	ldrb	r3, [r3, #17]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21b      	sxth	r3, r3
 800134c:	803b      	strh	r3, [r7, #0]
 800134e:	883b      	ldrh	r3, [r7, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	483b      	ldr	r0, [pc, #236]	; (8001440 <print_MISE+0x1a8>)
 8001354:	f007 fd5e 	bl	8008e14 <iprintf>
		printf("0.5um : %d	",(combine_value=(mise_buffer[18]<<8)|mise_buffer[19]));
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <print_MISE+0x198>)
 800135a:	7c9b      	ldrb	r3, [r3, #18]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b33      	ldr	r3, [pc, #204]	; (8001430 <print_MISE+0x198>)
 8001362:	7cdb      	ldrb	r3, [r3, #19]
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21b      	sxth	r3, r3
 800136a:	803b      	strh	r3, [r7, #0]
 800136c:	883b      	ldrh	r3, [r7, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	4834      	ldr	r0, [pc, #208]	; (8001444 <print_MISE+0x1ac>)
 8001372:	f007 fd4f 	bl	8008e14 <iprintf>
		printf("1.0um : %d	",(combine_value=(mise_buffer[20]<<8)|mise_buffer[21]));
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <print_MISE+0x198>)
 8001378:	7d1b      	ldrb	r3, [r3, #20]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <print_MISE+0x198>)
 8001380:	7d5b      	ldrb	r3, [r3, #21]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	803b      	strh	r3, [r7, #0]
 800138a:	883b      	ldrh	r3, [r7, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	482e      	ldr	r0, [pc, #184]	; (8001448 <print_MISE+0x1b0>)
 8001390:	f007 fd40 	bl	8008e14 <iprintf>
		printf("2.5um : %d	",(combine_value=(mise_buffer[22]<<8)|mise_buffer[23]));
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <print_MISE+0x198>)
 8001396:	7d9b      	ldrb	r3, [r3, #22]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <print_MISE+0x198>)
 800139e:	7ddb      	ldrb	r3, [r3, #23]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	803b      	strh	r3, [r7, #0]
 80013a8:	883b      	ldrh	r3, [r7, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4827      	ldr	r0, [pc, #156]	; (800144c <print_MISE+0x1b4>)
 80013ae:	f007 fd31 	bl	8008e14 <iprintf>
		printf("5.0um : %d	",(combine_value=(mise_buffer[24]<<8)|mise_buffer[25]));
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <print_MISE+0x198>)
 80013b4:	7e1b      	ldrb	r3, [r3, #24]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <print_MISE+0x198>)
 80013bc:	7e5b      	ldrb	r3, [r3, #25]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	803b      	strh	r3, [r7, #0]
 80013c6:	883b      	ldrh	r3, [r7, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4821      	ldr	r0, [pc, #132]	; (8001450 <print_MISE+0x1b8>)
 80013cc:	f007 fd22 	bl	8008e14 <iprintf>
		printf("10.0um : %d\r\n",(combine_value=(mise_buffer[26]<<8)|mise_buffer[27]));
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <print_MISE+0x198>)
 80013d2:	7e9b      	ldrb	r3, [r3, #26]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <print_MISE+0x198>)
 80013da:	7edb      	ldrb	r3, [r3, #27]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	803b      	strh	r3, [r7, #0]
 80013e4:	883b      	ldrh	r3, [r7, #0]
 80013e6:	4619      	mov	r1, r3
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <print_MISE+0x1bc>)
 80013ea:	f007 fd13 	bl	8008e14 <iprintf>
		pm2_5 = combine_value=((mise_buffer[12]<<8)|mise_buffer[13]);
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <print_MISE+0x198>)
 80013f0:	7b1b      	ldrb	r3, [r3, #12]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <print_MISE+0x198>)
 80013f8:	7b5b      	ldrb	r3, [r3, #13]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	803b      	strh	r3, [r7, #0]
 8001402:	883b      	ldrh	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <print_MISE+0x1c0>)
 8001408:	701a      	strb	r2, [r3, #0]
		pm10 = combine_value=((mise_buffer[14]<<8)|mise_buffer[15]);
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <print_MISE+0x198>)
 800140c:	7b9b      	ldrb	r3, [r3, #14]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <print_MISE+0x198>)
 8001414:	7bdb      	ldrb	r3, [r3, #15]
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21b      	sxth	r3, r3
 800141c:	803b      	strh	r3, [r7, #0]
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <print_MISE+0x1c4>)
 8001424:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20001184 	.word	0x20001184
 8001434:	0800b09c 	.word	0x0800b09c
 8001438:	0800b0a8 	.word	0x0800b0a8
 800143c:	0800b0b4 	.word	0x0800b0b4
 8001440:	0800b0c0 	.word	0x0800b0c0
 8001444:	0800b0cc 	.word	0x0800b0cc
 8001448:	0800b0d8 	.word	0x0800b0d8
 800144c:	0800b0e4 	.word	0x0800b0e4
 8001450:	0800b0f0 	.word	0x0800b0f0
 8001454:	0800b0fc 	.word	0x0800b0fc
 8001458:	2000020a 	.word	0x2000020a
 800145c:	2000020b 	.word	0x2000020b

08001460 <write_MISE>:

void write_MISE(char* cmd)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	uint16_t verify_byte=0;
 8001468:	2300      	movs	r3, #0
 800146a:	81fb      	strh	r3, [r7, #14]
	printf("Enter the write_MISE\r\n");
 800146c:	484b      	ldr	r0, [pc, #300]	; (800159c <write_MISE+0x13c>)
 800146e:	f007 fd45 	bl	8008efc <puts>
	if(strcmp(cmd,"Read")==0)
 8001472:	494b      	ldr	r1, [pc, #300]	; (80015a0 <write_MISE+0x140>)
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7fe fec3 	bl	8000200 <strcmp>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <write_MISE+0x34>
	{
		mise_send_buffer[2]=0xe2;
 8001480:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <write_MISE+0x144>)
 8001482:	22e2      	movs	r2, #226	; 0xe2
 8001484:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <write_MISE+0x144>)
 8001488:	2200      	movs	r2, #0
 800148a:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x00;
 800148c:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <write_MISE+0x144>)
 800148e:	2200      	movs	r2, #0
 8001490:	711a      	strb	r2, [r3, #4]
 8001492:	e042      	b.n	800151a <write_MISE+0xba>
	}
	else if(strcmp(cmd,"Passive")==0)
 8001494:	4944      	ldr	r1, [pc, #272]	; (80015a8 <write_MISE+0x148>)
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7fe feb2 	bl	8000200 <strcmp>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d109      	bne.n	80014b6 <write_MISE+0x56>
	{
		mise_send_buffer[2]=0xe1;
 80014a2:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <write_MISE+0x144>)
 80014a4:	22e1      	movs	r2, #225	; 0xe1
 80014a6:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 80014a8:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <write_MISE+0x144>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x00;
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <write_MISE+0x144>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	711a      	strb	r2, [r3, #4]
 80014b4:	e031      	b.n	800151a <write_MISE+0xba>
	}
	else if(strcmp(cmd,"Active")==0)
 80014b6:	493d      	ldr	r1, [pc, #244]	; (80015ac <write_MISE+0x14c>)
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7fe fea1 	bl	8000200 <strcmp>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <write_MISE+0x78>
	{
		mise_send_buffer[2]=0xe1;
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <write_MISE+0x144>)
 80014c6:	22e1      	movs	r2, #225	; 0xe1
 80014c8:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <write_MISE+0x144>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x01;
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <write_MISE+0x144>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	711a      	strb	r2, [r3, #4]
 80014d6:	e020      	b.n	800151a <write_MISE+0xba>

	}
	else if(strcmp(cmd,"Sleep")==0)
 80014d8:	4935      	ldr	r1, [pc, #212]	; (80015b0 <write_MISE+0x150>)
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7fe fe90 	bl	8000200 <strcmp>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <write_MISE+0x9a>
	{
		mise_send_buffer[2]=0xe4;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <write_MISE+0x144>)
 80014e8:	22e4      	movs	r2, #228	; 0xe4
 80014ea:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <write_MISE+0x144>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x00;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <write_MISE+0x144>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	711a      	strb	r2, [r3, #4]
 80014f8:	e00f      	b.n	800151a <write_MISE+0xba>
	}
	else if(strcmp(cmd,"WakeUp")==0)
 80014fa:	492e      	ldr	r1, [pc, #184]	; (80015b4 <write_MISE+0x154>)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7fe fe7f 	bl	8000200 <strcmp>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d108      	bne.n	800151a <write_MISE+0xba>
	{
		mise_send_buffer[2]=0xe4;
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <write_MISE+0x144>)
 800150a:	22e4      	movs	r2, #228	; 0xe4
 800150c:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <write_MISE+0x144>)
 8001510:	2200      	movs	r2, #0
 8001512:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x01;
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <write_MISE+0x144>)
 8001516:	2201      	movs	r2, #1
 8001518:	711a      	strb	r2, [r3, #4]
	}
	for(uint8_t i=0;i<5;i++)
 800151a:	2300      	movs	r3, #0
 800151c:	737b      	strb	r3, [r7, #13]
 800151e:	e009      	b.n	8001534 <write_MISE+0xd4>
	{
		verify_byte+=mise_send_buffer[i];
 8001520:	7b7b      	ldrb	r3, [r7, #13]
 8001522:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <write_MISE+0x144>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	b29a      	uxth	r2, r3
 8001528:	89fb      	ldrh	r3, [r7, #14]
 800152a:	4413      	add	r3, r2
 800152c:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0;i<5;i++)
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	3301      	adds	r3, #1
 8001532:	737b      	strb	r3, [r7, #13]
 8001534:	7b7b      	ldrb	r3, [r7, #13]
 8001536:	2b04      	cmp	r3, #4
 8001538:	d9f2      	bls.n	8001520 <write_MISE+0xc0>
	}
	mise_send_buffer[5]=verify_byte>>8;
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <write_MISE+0x144>)
 8001544:	715a      	strb	r2, [r3, #5]
	mise_send_buffer[6]=verify_byte;
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <write_MISE+0x144>)
 800154c:	719a      	strb	r2, [r3, #6]

	while(HAL_UART_GetState(&huart3)!=HAL_UART_STATE_READY)
 800154e:	bf00      	nop
 8001550:	4819      	ldr	r0, [pc, #100]	; (80015b8 <write_MISE+0x158>)
 8001552:	f004 fc4f 	bl	8005df4 <HAL_UART_GetState>
 8001556:	4603      	mov	r3, r0
 8001558:	2b20      	cmp	r3, #32
 800155a:	d1f9      	bne.n	8001550 <write_MISE+0xf0>
	{
	}

	if(HAL_UART_Transmit_IT(&huart3,(uint8_t*)mise_send_buffer,7)!=HAL_OK)
 800155c:	2207      	movs	r2, #7
 800155e:	4911      	ldr	r1, [pc, #68]	; (80015a4 <write_MISE+0x144>)
 8001560:	4815      	ldr	r0, [pc, #84]	; (80015b8 <write_MISE+0x158>)
 8001562:	f004 f8cf 	bl	8005704 <HAL_UART_Transmit_IT>
	{

	}
	if(strcmp(cmd,"Read")==0)
 8001566:	490e      	ldr	r1, [pc, #56]	; (80015a0 <write_MISE+0x140>)
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7fe fe49 	bl	8000200 <strcmp>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10b      	bne.n	800158c <write_MISE+0x12c>
	{
		while(HAL_UART_GetState(&huart3)!=HAL_UART_STATE_READY)
 8001574:	bf00      	nop
 8001576:	4810      	ldr	r0, [pc, #64]	; (80015b8 <write_MISE+0x158>)
 8001578:	f004 fc3c 	bl	8005df4 <HAL_UART_GetState>
 800157c:	4603      	mov	r3, r0
 800157e:	2b20      	cmp	r3, #32
 8001580:	d1f9      	bne.n	8001576 <write_MISE+0x116>
		{
		}
		if(HAL_UART_Receive_IT(&huart3,mise_send_buffer, 32)!=HAL_OK)
 8001582:	2220      	movs	r2, #32
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <write_MISE+0x144>)
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <write_MISE+0x158>)
 8001588:	f004 f940 	bl	800580c <HAL_UART_Receive_IT>
		{

		}
	}

	printf("%d\r\n", mise_send_buffer);
 800158c:	4905      	ldr	r1, [pc, #20]	; (80015a4 <write_MISE+0x144>)
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <write_MISE+0x15c>)
 8001590:	f007 fc40 	bl	8008e14 <iprintf>
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	0800b10c 	.word	0x0800b10c
 80015a0:	0800b124 	.word	0x0800b124
 80015a4:	20000004 	.word	0x20000004
 80015a8:	0800b050 	.word	0x0800b050
 80015ac:	0800b12c 	.word	0x0800b12c
 80015b0:	0800b134 	.word	0x0800b134
 80015b4:	0800b13c 	.word	0x0800b13c
 80015b8:	200012b8 	.word	0x200012b8
 80015bc:	0800b144 	.word	0x0800b144

080015c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a18      	ldr	r2, [pc, #96]	; (8001630 <HAL_UART_RxCpltCallback+0x70>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10f      	bne.n	80015f2 <HAL_UART_RxCpltCallback+0x32>
		print_MISE();
 80015d2:	f7ff fe61 	bl	8001298 <print_MISE>
		sprintf(s_pm2_5, "%d", pm2_5);
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_UART_RxCpltCallback+0x74>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	4916      	ldr	r1, [pc, #88]	; (8001638 <HAL_UART_RxCpltCallback+0x78>)
 80015de:	4817      	ldr	r0, [pc, #92]	; (800163c <HAL_UART_RxCpltCallback+0x7c>)
 80015e0:	f007 fc94 	bl	8008f0c <siprintf>
		sprintf(s_pm10, "%d", pm10);
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_UART_RxCpltCallback+0x80>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4913      	ldr	r1, [pc, #76]	; (8001638 <HAL_UART_RxCpltCallback+0x78>)
 80015ec:	4815      	ldr	r0, [pc, #84]	; (8001644 <HAL_UART_RxCpltCallback+0x84>)
 80015ee:	f007 fc8d 	bl	8008f0c <siprintf>
	}
	if(huart->Instance == UART4) {
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_UART_RxCpltCallback+0x88>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d115      	bne.n	8001628 <HAL_UART_RxCpltCallback+0x68>
		for(int i=0; i<9; i++) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e00b      	b.n	800161a <HAL_UART_RxCpltCallback+0x5a>
			co2_result_buffer[i] = co2_buffer[i+1];
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_UART_RxCpltCallback+0x8c>)
 8001608:	5cd1      	ldrb	r1, [r2, r3]
 800160a:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_UART_RxCpltCallback+0x90>)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	460a      	mov	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<9; i++) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b08      	cmp	r3, #8
 800161e:	ddf0      	ble.n	8001602 <HAL_UART_RxCpltCallback+0x42>
		}
		printf("%s\r\n", co2_result_buffer);
 8001620:	490b      	ldr	r1, [pc, #44]	; (8001650 <HAL_UART_RxCpltCallback+0x90>)
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <HAL_UART_RxCpltCallback+0x94>)
 8001624:	f007 fbf6 	bl	8008e14 <iprintf>
	}
}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40004800 	.word	0x40004800
 8001634:	2000020a 	.word	0x2000020a
 8001638:	0800b14c 	.word	0x0800b14c
 800163c:	2000020c 	.word	0x2000020c
 8001640:	2000020b 	.word	0x2000020b
 8001644:	20000210 	.word	0x20000210
 8001648:	40004c00 	.word	0x40004c00
 800164c:	200011a4 	.word	0x200011a4
 8001650:	200011b4 	.word	0x200011b4
 8001654:	0800b150 	.word	0x0800b150

08001658 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
	{

	}
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == URBTN_Pin) {
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167c:	d104      	bne.n	8001688 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(Relay2_GPIO_Port, Relay2_Pin);
 800167e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <HAL_GPIO_EXTI_Callback+0x24>)
 8001684:	f001 fbee 	bl	8002e64 <HAL_GPIO_TogglePin>
	}
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	48000c00 	.word	0x48000c00

08001694 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a37      	ldr	r2, [pc, #220]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a31      	ldr	r2, [pc, #196]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f2:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a2b      	ldr	r2, [pc, #172]	; (80017a4 <MX_GPIO_Init+0x110>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <MX_GPIO_Init+0x110>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2104      	movs	r1, #4
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <MX_GPIO_Init+0x114>)
 8001710:	f001 fb90 	bl	8002e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800171a:	4824      	ldr	r0, [pc, #144]	; (80017ac <MX_GPIO_Init+0x118>)
 800171c:	f001 fb8a 	bl	8002e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = URBTN_Pin;
 8001720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <MX_GPIO_Init+0x11c>)
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(URBTN_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	481f      	ldr	r0, [pc, #124]	; (80017b4 <MX_GPIO_Init+0x120>)
 8001736:	f001 f9d3 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIR_Pin;
 800173a:	2301      	movs	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4816      	ldr	r0, [pc, #88]	; (80017a8 <MX_GPIO_Init+0x114>)
 800174e:	f001 f9c7 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_Pin;
 8001752:	2304      	movs	r3, #4
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480f      	ldr	r0, [pc, #60]	; (80017a8 <MX_GPIO_Init+0x114>)
 800176a:	f001 f9b9 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay2_Pin;
 800176e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay2_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <MX_GPIO_Init+0x118>)
 8001788:	f001 f9aa 	bl	8002ae0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2105      	movs	r1, #5
 8001790:	2028      	movs	r0, #40	; 0x28
 8001792:	f000 fea9 	bl	80024e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001796:	2028      	movs	r0, #40	; 0x28
 8001798:	f000 fec2 	bl	8002520 <HAL_NVIC_EnableIRQ>

}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	; 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	48000400 	.word	0x48000400
 80017ac:	48000c00 	.word	0x48000c00
 80017b0:	10110000 	.word	0x10110000
 80017b4:	48000800 	.word	0x48000800

080017b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <MX_I2C1_Init+0x74>)
 80017be:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <MX_I2C1_Init+0x78>)
 80017c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_I2C1_Init+0x74>)
 80017c4:	f640 6214 	movw	r2, #3604	; 0xe14
 80017c8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <MX_I2C1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_I2C1_Init+0x74>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_I2C1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_I2C1_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_I2C1_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_I2C1_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_I2C1_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_I2C1_Init+0x74>)
 80017f6:	f001 fb67 	bl	8002ec8 <HAL_I2C_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001800:	f000 f906 	bl	8001a10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001804:	2100      	movs	r1, #0
 8001806:	4809      	ldr	r0, [pc, #36]	; (800182c <MX_I2C1_Init+0x74>)
 8001808:	f001 fe56 	bl	80034b8 <HAL_I2CEx_ConfigAnalogFilter>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001812:	f000 f8fd 	bl	8001a10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_I2C1_Init+0x74>)
 800181a:	f001 fe98 	bl	800354e <HAL_I2CEx_ConfigDigitalFilter>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001824:	f000 f8f4 	bl	8001a10 <Error_Handler>
  }

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200011c0 	.word	0x200011c0
 8001830:	40005400 	.word	0x40005400

08001834 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <HAL_I2C_MspInit+0x7c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d128      	bne.n	80018a8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800186e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001878:	2301      	movs	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001880:	2304      	movs	r3, #4
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	480b      	ldr	r0, [pc, #44]	; (80018b8 <HAL_I2C_MspInit+0x84>)
 800188c:	f001 f928 	bl	8002ae0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 8001896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189a:	6593      	str	r3, [r2, #88]	; 0x58
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_I2C_MspInit+0x80>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40005400 	.word	0x40005400
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000400 	.word	0x48000400

080018bc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 10);
 80018c4:	1d39      	adds	r1, r7, #4
 80018c6:	230a      	movs	r3, #10
 80018c8:	2201      	movs	r2, #1
 80018ca:	4804      	ldr	r0, [pc, #16]	; (80018dc <__io_putchar+0x20>)
 80018cc:	f003 fe82 	bl	80055d4 <HAL_UART_Transmit>

	return 1;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200013a4 	.word	0x200013a4

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e4:	f000 fced 	bl	80022c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e8:	f000 f813 	bl	8001912 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ec:	f7ff fed2 	bl	8001694 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f0:	f7ff fba8 	bl	8001044 <MX_DMA_Init>
  MX_UART4_Init();
 80018f4:	f000 fa42 	bl	8001d7c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80018f8:	f000 fa8c 	bl	8001e14 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80018fc:	f000 fb22 	bl	8001f44 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001900:	f7ff ff5a 	bl	80017b8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001904:	f000 fad2 	bl	8001eac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001908:	f7ff fbe8 	bl	80010dc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800190c:	f005 fbe0 	bl	80070d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001910:	e7fe      	b.n	8001910 <main+0x30>

08001912 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b0bc      	sub	sp, #240	; 0xf0
 8001916:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001918:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800191c:	2244      	movs	r2, #68	; 0x44
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f006 fe12 	bl	800854a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001926:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2294      	movs	r2, #148	; 0x94
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f006 fe04 	bl	800854a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001942:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001946:	f001 fe6f 	bl	8003628 <HAL_PWREx_ControlVoltageScaling>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001950:	f000 f85e 	bl	8001a10 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001954:	2310      	movs	r3, #16
 8001956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800195a:	2301      	movs	r3, #1
 800195c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001966:	2360      	movs	r3, #96	; 0x60
 8001968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001972:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001976:	4618      	mov	r0, r3
 8001978:	f001 fefa 	bl	8003770 <HAL_RCC_OscConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001982:	f000 f845 	bl	8001a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001986:	230f      	movs	r3, #15
 8001988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fb06 	bl	8003fbc <HAL_RCC_ClockConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80019b6:	f000 f82b 	bl	8001a10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80019ba:	234f      	movs	r3, #79	; 0x4f
 80019bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019be:	2300      	movs	r3, #0
 80019c0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fdd3 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80019e0:	f000 f816 	bl	8001a10 <Error_Handler>
  }
}
 80019e4:	bf00      	nop
 80019e6:	37f0      	adds	r7, #240	; 0xf0
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019fe:	f000 fc79 	bl	80022f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40001000 	.word	0x40001000

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <Error_Handler+0x6>

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6593      	str	r3, [r2, #88]	; 0x58
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	210f      	movs	r1, #15
 8001a52:	f06f 0001 	mvn.w	r0, #1
 8001a56:	f000 fd47 	bl	80024e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	2036      	movs	r0, #54	; 0x36
 8001a7e:	f000 fd33 	bl	80024e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a82:	2036      	movs	r0, #54	; 0x36
 8001a84:	f000 fd4c 	bl	8002520 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_InitTick+0x9c>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_InitTick+0x9c>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6593      	str	r3, [r2, #88]	; 0x58
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_InitTick+0x9c>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aa0:	f107 0210 	add.w	r2, r7, #16
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fc74 	bl	8004398 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ab0:	f002 fc46 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8001ab4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <HAL_InitTick+0xa0>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_InitTick+0xa4>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_InitTick+0xa8>)
 8001ac8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_InitTick+0xa4>)
 8001acc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <HAL_InitTick+0xa4>)
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_InitTick+0xa4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_InitTick+0xa4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ae4:	4809      	ldr	r0, [pc, #36]	; (8001b0c <HAL_InitTick+0xa4>)
 8001ae6:	f003 fa53 	bl	8004f90 <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <HAL_InitTick+0xa4>)
 8001af2:	f003 faaf 	bl	8005054 <HAL_TIM_Base_Start_IT>
 8001af6:	4603      	mov	r3, r0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3730      	adds	r7, #48	; 0x30
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	431bde83 	.word	0x431bde83
 8001b0c:	2000120c 	.word	0x2000120c
 8001b10:	40001000 	.word	0x40001000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA1_Channel1_IRQHandler+0x10>)
 8001b46:	f000 fe7b 	bl	8002840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20001258 	.word	0x20001258

08001b54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <DMA1_Channel2_IRQHandler+0x10>)
 8001b5a:	f000 fe71 	bl	8002840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20001344 	.word	0x20001344

08001b68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <USART1_IRQHandler+0x10>)
 8001b6e:	f003 ffad 	bl	8005acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200013a4 	.word	0x200013a4

08001b7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <USART3_IRQHandler+0x10>)
 8001b82:	f003 ffa3 	bl	8005acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200012b8 	.word	0x200012b8

08001b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b98:	f001 f97e 	bl	8002e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <UART4_IRQHandler+0x10>)
 8001ba6:	f003 ff91 	bl	8005acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20001430 	.word	0x20001430

08001bb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <TIM6_DAC_IRQHandler+0x10>)
 8001bba:	f003 fabb 	bl	8005134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000120c 	.word	0x2000120c

08001bc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e00a      	b.n	8001bf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bda:	f3af 8000 	nop.w
 8001bde:	4601      	mov	r1, r0
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	60ba      	str	r2, [r7, #8]
 8001be6:	b2ca      	uxtb	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbf0      	blt.n	8001bda <_read+0x12>
	}

return len;
 8001bf8:	687b      	ldr	r3, [r7, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e009      	b.n	8001c28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60ba      	str	r2, [r7, #8]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fe4d 	bl	80018bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbf1      	blt.n	8001c14 <_write+0x12>
	}
	return len;
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_close>:

int _close(int file)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
	return -1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c62:	605a      	str	r2, [r3, #4]
	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <_isatty>:

int _isatty(int file)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
	return 1;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f006 fc04 	bl	80084e0 <__errno>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	230c      	movs	r3, #12
 8001cdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <_sbrk+0x64>)
 8001cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200a0000 	.word	0x200a0000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	20000468 	.word	0x20000468
 8001d0c:	20001550 	.word	0x20001550

08001d10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <SystemInit+0x64>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <SystemInit+0x64>)
 8001d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <SystemInit+0x68>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <SystemInit+0x68>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <SystemInit+0x68>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <SystemInit+0x68>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <SystemInit+0x68>)
 8001d3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <SystemInit+0x68>)
 8001d48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <SystemInit+0x68>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <SystemInit+0x68>)
 8001d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <SystemInit+0x68>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SystemInit+0x64>)
 8001d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d66:	609a      	str	r2, [r3, #8]
#endif
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00
 8001d78:	40021000 	.word	0x40021000

08001d7c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_UART4_Init+0x90>)
 8001d82:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <MX_UART4_Init+0x94>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_UART4_Init+0x90>)
 8001d88:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001d8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_UART4_Init+0x90>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <MX_UART4_Init+0x90>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_UART4_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_UART4_Init+0x90>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_UART4_Init+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <MX_UART4_Init+0x90>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_UART4_Init+0x90>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_UART4_Init+0x90>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_UART4_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dc4:	4811      	ldr	r0, [pc, #68]	; (8001e0c <MX_UART4_Init+0x90>)
 8001dc6:	f003 fbb5 	bl	8005534 <HAL_UART_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001dd0:	f7ff fe1e 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_UART4_Init+0x90>)
 8001dd8:	f005 f87d 	bl	8006ed6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001de2:	f7ff fe15 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de6:	2100      	movs	r1, #0
 8001de8:	4808      	ldr	r0, [pc, #32]	; (8001e0c <MX_UART4_Init+0x90>)
 8001dea:	f005 f8b2 	bl	8006f52 <HAL_UARTEx_SetRxFifoThreshold>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001df4:	f7ff fe0c 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_UART4_Init+0x90>)
 8001dfa:	f005 f833 	bl	8006e64 <HAL_UARTEx_DisableFifoMode>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001e04:	f7ff fe04 	bl	8001a10 <Error_Handler>
  }

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20001430 	.word	0x20001430
 8001e10:	40004c00 	.word	0x40004c00

08001e14 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e1a:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <MX_USART1_UART_Init+0x94>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e5c:	4811      	ldr	r0, [pc, #68]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e5e:	f003 fb69 	bl	8005534 <HAL_UART_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e68:	f7ff fdd2 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e70:	f005 f831 	bl	8006ed6 <HAL_UARTEx_SetTxFifoThreshold>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e7a:	f7ff fdc9 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e82:	f005 f866 	bl	8006f52 <HAL_UARTEx_SetRxFifoThreshold>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e8c:	f7ff fdc0 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e90:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <MX_USART1_UART_Init+0x90>)
 8001e92:	f004 ffe7 	bl	8006e64 <HAL_UARTEx_DisableFifoMode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e9c:	f7ff fdb8 	bl	8001a10 <Error_Handler>
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200013a4 	.word	0x200013a4
 8001ea8:	40013800 	.word	0x40013800

08001eac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <MX_USART2_UART_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ef4:	4811      	ldr	r0, [pc, #68]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001ef6:	f003 fb1d 	bl	8005534 <HAL_UART_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f00:	f7ff fd86 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	480d      	ldr	r0, [pc, #52]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001f08:	f004 ffe5 	bl	8006ed6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f12:	f7ff fd7d 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001f1a:	f005 f81a 	bl	8006f52 <HAL_UARTEx_SetRxFifoThreshold>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f24:	f7ff fd74 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_USART2_UART_Init+0x90>)
 8001f2a:	f004 ff9b 	bl	8006e64 <HAL_UARTEx_DisableFifoMode>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f7ff fd6c 	bl	8001a10 <Error_Handler>
  }

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200014bc 	.word	0x200014bc
 8001f40:	40004400 	.word	0x40004400

08001f44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <MX_USART3_UART_Init+0x94>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f8c:	4811      	ldr	r0, [pc, #68]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f8e:	f003 fad1 	bl	8005534 <HAL_UART_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f98:	f7ff fd3a 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001fa0:	f004 ff99 	bl	8006ed6 <HAL_UARTEx_SetTxFifoThreshold>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001faa:	f7ff fd31 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4808      	ldr	r0, [pc, #32]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001fb2:	f004 ffce 	bl	8006f52 <HAL_UARTEx_SetRxFifoThreshold>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001fbc:	f7ff fd28 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001fc2:	f004 ff4f 	bl	8006e64 <HAL_UARTEx_DisableFifoMode>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001fcc:	f7ff fd20 	bl	8001a10 <Error_Handler>
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200012b8 	.word	0x200012b8
 8001fd8:	40004800 	.word	0x40004800

08001fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b090      	sub	sp, #64	; 0x40
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a92      	ldr	r2, [pc, #584]	; (8002244 <HAL_UART_MspInit+0x268>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d131      	bne.n	8002062 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ffe:	4b92      	ldr	r3, [pc, #584]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	4a91      	ldr	r2, [pc, #580]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002008:	6593      	str	r3, [r2, #88]	; 0x58
 800200a:	4b8f      	ldr	r3, [pc, #572]	; (8002248 <HAL_UART_MspInit+0x26c>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b8c      	ldr	r3, [pc, #560]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	4a8b      	ldr	r2, [pc, #556]	; (8002248 <HAL_UART_MspInit+0x26c>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002022:	4b89      	ldr	r3, [pc, #548]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = CO2_TX_Pin|CO2_RX_Pin;
 800202e:	2303      	movs	r3, #3
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800203e:	2308      	movs	r3, #8
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204c:	f000 fd48 	bl	8002ae0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2105      	movs	r1, #5
 8002054:	2034      	movs	r0, #52	; 0x34
 8002056:	f000 fa47 	bl	80024e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800205a:	2034      	movs	r0, #52	; 0x34
 800205c:	f000 fa60 	bl	8002520 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002060:	e0ec      	b.n	800223c <HAL_UART_MspInit+0x260>
  else if(uartHandle->Instance==USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a79      	ldr	r2, [pc, #484]	; (800224c <HAL_UART_MspInit+0x270>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d130      	bne.n	80020ce <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800206c:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_UART_MspInit+0x26c>)
 800206e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002070:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002076:	6613      	str	r3, [r2, #96]	; 0x60
 8002078:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_UART_MspInit+0x26c>)
 800207a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002080:	623b      	str	r3, [r7, #32]
 8002082:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	4b70      	ldr	r3, [pc, #448]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	4a6f      	ldr	r2, [pc, #444]	; (8002248 <HAL_UART_MspInit+0x26c>)
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002090:	4b6d      	ldr	r3, [pc, #436]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800209c:	23c0      	movs	r3, #192	; 0xc0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ac:	2307      	movs	r3, #7
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	4866      	ldr	r0, [pc, #408]	; (8002250 <HAL_UART_MspInit+0x274>)
 80020b8:	f000 fd12 	bl	8002ae0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2105      	movs	r1, #5
 80020c0:	2025      	movs	r0, #37	; 0x25
 80020c2:	f000 fa11 	bl	80024e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c6:	2025      	movs	r0, #37	; 0x25
 80020c8:	f000 fa2a 	bl	8002520 <HAL_NVIC_EnableIRQ>
}
 80020cc:	e0b6      	b.n	800223c <HAL_UART_MspInit+0x260>
  else if(uartHandle->Instance==USART2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a60      	ldr	r2, [pc, #384]	; (8002254 <HAL_UART_MspInit+0x278>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d129      	bne.n	800212c <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d8:	4b5b      	ldr	r3, [pc, #364]	; (8002248 <HAL_UART_MspInit+0x26c>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	4a5a      	ldr	r2, [pc, #360]	; (8002248 <HAL_UART_MspInit+0x26c>)
 80020de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e2:	6593      	str	r3, [r2, #88]	; 0x58
 80020e4:	4b58      	ldr	r3, [pc, #352]	; (8002248 <HAL_UART_MspInit+0x26c>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	4b55      	ldr	r3, [pc, #340]	; (8002248 <HAL_UART_MspInit+0x26c>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	4a54      	ldr	r2, [pc, #336]	; (8002248 <HAL_UART_MspInit+0x26c>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fc:	4b52      	ldr	r3, [pc, #328]	; (8002248 <HAL_UART_MspInit+0x26c>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002108:	230c      	movs	r3, #12
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002118:	2307      	movs	r3, #7
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002120:	4619      	mov	r1, r3
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002126:	f000 fcdb 	bl	8002ae0 <HAL_GPIO_Init>
}
 800212a:	e087      	b.n	800223c <HAL_UART_MspInit+0x260>
  else if(uartHandle->Instance==USART3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a49      	ldr	r2, [pc, #292]	; (8002258 <HAL_UART_MspInit+0x27c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	f040 8082 	bne.w	800223c <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002138:	4b43      	ldr	r3, [pc, #268]	; (8002248 <HAL_UART_MspInit+0x26c>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a42      	ldr	r2, [pc, #264]	; (8002248 <HAL_UART_MspInit+0x26c>)
 800213e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
 8002144:	4b40      	ldr	r3, [pc, #256]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002150:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002154:	4a3c      	ldr	r2, [pc, #240]	; (8002248 <HAL_UART_MspInit+0x26c>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <HAL_UART_MspInit+0x26c>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002168:	2330      	movs	r3, #48	; 0x30
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002178:	2307      	movs	r3, #7
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002180:	4619      	mov	r1, r3
 8002182:	4836      	ldr	r0, [pc, #216]	; (800225c <HAL_UART_MspInit+0x280>)
 8002184:	f000 fcac 	bl	8002ae0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_UART_MspInit+0x284>)
 800218a:	4a36      	ldr	r2, [pc, #216]	; (8002264 <HAL_UART_MspInit+0x288>)
 800218c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_UART_MspInit+0x284>)
 8002190:	221c      	movs	r2, #28
 8002192:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <HAL_UART_MspInit+0x284>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_UART_MspInit+0x284>)
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_UART_MspInit+0x284>)
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_UART_MspInit+0x284>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_UART_MspInit+0x284>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_UART_MspInit+0x284>)
 80021b4:	2220      	movs	r2, #32
 80021b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <HAL_UART_MspInit+0x284>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80021be:	4828      	ldr	r0, [pc, #160]	; (8002260 <HAL_UART_MspInit+0x284>)
 80021c0:	f000 f9bc 	bl	800253c <HAL_DMA_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 80021ca:	f7ff fc21 	bl	8001a10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a23      	ldr	r2, [pc, #140]	; (8002260 <HAL_UART_MspInit+0x284>)
 80021d2:	679a      	str	r2, [r3, #120]	; 0x78
 80021d4:	4a22      	ldr	r2, [pc, #136]	; (8002260 <HAL_UART_MspInit+0x284>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_UART_MspInit+0x28c>)
 80021dc:	4a23      	ldr	r2, [pc, #140]	; (800226c <HAL_UART_MspInit+0x290>)
 80021de:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_UART_MspInit+0x28c>)
 80021e2:	221d      	movs	r2, #29
 80021e4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_UART_MspInit+0x28c>)
 80021e8:	2210      	movs	r2, #16
 80021ea:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ec:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_UART_MspInit+0x28c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_UART_MspInit+0x28c>)
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_UART_MspInit+0x28c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_UART_MspInit+0x28c>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_UART_MspInit+0x28c>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_UART_MspInit+0x28c>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002210:	4815      	ldr	r0, [pc, #84]	; (8002268 <HAL_UART_MspInit+0x28c>)
 8002212:	f000 f993 	bl	800253c <HAL_DMA_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_UART_MspInit+0x244>
      Error_Handler();
 800221c:	f7ff fbf8 	bl	8001a10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a11      	ldr	r2, [pc, #68]	; (8002268 <HAL_UART_MspInit+0x28c>)
 8002224:	675a      	str	r2, [r3, #116]	; 0x74
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_UART_MspInit+0x28c>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2105      	movs	r1, #5
 8002230:	2027      	movs	r0, #39	; 0x27
 8002232:	f000 f959 	bl	80024e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002236:	2027      	movs	r0, #39	; 0x27
 8002238:	f000 f972 	bl	8002520 <HAL_NVIC_EnableIRQ>
}
 800223c:	bf00      	nop
 800223e:	3740      	adds	r7, #64	; 0x40
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40004c00 	.word	0x40004c00
 8002248:	40021000 	.word	0x40021000
 800224c:	40013800 	.word	0x40013800
 8002250:	48000400 	.word	0x48000400
 8002254:	40004400 	.word	0x40004400
 8002258:	40004800 	.word	0x40004800
 800225c:	48000800 	.word	0x48000800
 8002260:	20001258 	.word	0x20001258
 8002264:	40020008 	.word	0x40020008
 8002268:	20001344 	.word	0x20001344
 800226c:	4002001c 	.word	0x4002001c

08002270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002274:	f7ff fd4c 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002278:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800227a:	e003      	b.n	8002284 <LoopCopyDataInit>

0800227c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800227e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002280:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002282:	3104      	adds	r1, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002284:	480a      	ldr	r0, [pc, #40]	; (80022b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002288:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800228a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800228c:	d3f6      	bcc.n	800227c <CopyDataInit>
	ldr	r2, =_sbss
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002290:	e002      	b.n	8002298 <LoopFillZerobss>

08002292 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002292:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002294:	f842 3b04 	str.w	r3, [r2], #4

08002298 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <LoopForever+0x16>)
	cmp	r2, r3
 800229a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800229c:	d3f9      	bcc.n	8002292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229e:	f006 f925 	bl	80084ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022a2:	f7ff fb1d 	bl	80018e0 <main>

080022a6 <LoopForever>:

LoopForever:
    b LoopForever
 80022a6:	e7fe      	b.n	80022a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022a8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80022ac:	0800b4a0 	.word	0x0800b4a0
	ldr	r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022b4:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 80022b8:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 80022bc:	20001550 	.word	0x20001550

080022c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC1_IRQHandler>

080022c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f000 f900 	bl	80024d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7ff fbc8 	bl	8001a68 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	e001      	b.n	80022e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e4:	f7ff fb98 	bl	8001a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000014 	.word	0x20000014
 8002318:	20001548 	.word	0x20001548

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20001548 	.word	0x20001548

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_Delay+0x40>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000014 	.word	0x20000014

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff4c 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024fa:	f7ff ff61 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 80024fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	6978      	ldr	r0, [r7, #20]
 8002506:	f7ff ffb1 	bl	800246c <NVIC_EncodePriority>
 800250a:	4602      	mov	r2, r0
 800250c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff80 	bl	8002418 <__NVIC_SetPriority>
}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff54 	bl	80023dc <__NVIC_EnableIRQ>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e08d      	b.n	800266a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_DMA_Init+0x138>)
 8002556:	429a      	cmp	r2, r3
 8002558:	d80f      	bhi.n	800257a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	4b45      	ldr	r3, [pc, #276]	; (8002678 <HAL_DMA_Init+0x13c>)
 8002562:	4413      	add	r3, r2
 8002564:	4a45      	ldr	r2, [pc, #276]	; (800267c <HAL_DMA_Init+0x140>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	009a      	lsls	r2, r3, #2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a42      	ldr	r2, [pc, #264]	; (8002680 <HAL_DMA_Init+0x144>)
 8002576:	641a      	str	r2, [r3, #64]	; 0x40
 8002578:	e00e      	b.n	8002598 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <HAL_DMA_Init+0x148>)
 8002582:	4413      	add	r3, r2
 8002584:	4a3d      	ldr	r2, [pc, #244]	; (800267c <HAL_DMA_Init+0x140>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a3c      	ldr	r2, [pc, #240]	; (8002688 <HAL_DMA_Init+0x14c>)
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa16 	bl	8002a1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f8:	d102      	bne.n	8002600 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002614:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d010      	beq.n	8002640 <HAL_DMA_Init+0x104>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d80c      	bhi.n	8002640 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fa36 	bl	8002a98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	e008      	b.n	8002652 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40020407 	.word	0x40020407
 8002678:	bffdfff8 	.word	0xbffdfff8
 800267c:	cccccccd 	.word	0xcccccccd
 8002680:	40020000 	.word	0x40020000
 8002684:	bffdfbf8 	.word	0xbffdfbf8
 8002688:	40020400 	.word	0x40020400

0800268c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_DMA_Start_IT+0x20>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e066      	b.n	800277a <HAL_DMA_Start_IT+0xee>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d155      	bne.n	800276c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f95a 	bl	800299e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 020e 	orr.w	r2, r2, #14
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e00f      	b.n	8002724 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0204 	bic.w	r2, r2, #4
 8002712:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 020a 	orr.w	r2, r2, #10
 8002722:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002740:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002758:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e005      	b.n	8002778 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002774:	2302      	movs	r3, #2
 8002776:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002778:	7dfb      	ldrb	r3, [r7, #23]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d005      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2204      	movs	r2, #4
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e047      	b.n	8002836 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 020e 	bic.w	r2, r2, #14
 80027b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f003 021c 	and.w	r2, r3, #28
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027f2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00c      	beq.n	8002816 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800280a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002814:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
    }
  }
  return status;
 8002836:	7bfb      	ldrb	r3, [r7, #15]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f003 031c 	and.w	r3, r3, #28
 8002860:	2204      	movs	r2, #4
 8002862:	409a      	lsls	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d026      	beq.n	80028ba <HAL_DMA_IRQHandler+0x7a>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d021      	beq.n	80028ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d107      	bne.n	8002894 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0204 	bic.w	r2, r2, #4
 8002892:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	f003 021c 	and.w	r2, r3, #28
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	2104      	movs	r1, #4
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d071      	beq.n	8002994 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	e06c      	b.n	8002994 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f003 031c 	and.w	r3, r3, #28
 80028c2:	2202      	movs	r2, #2
 80028c4:	409a      	lsls	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d02e      	beq.n	800292c <HAL_DMA_IRQHandler+0xec>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d029      	beq.n	800292c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 020a 	bic.w	r2, r2, #10
 80028f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f003 021c 	and.w	r2, r3, #28
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2102      	movs	r1, #2
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d038      	beq.n	8002994 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800292a:	e033      	b.n	8002994 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	f003 031c 	and.w	r3, r3, #28
 8002934:	2208      	movs	r2, #8
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d02a      	beq.n	8002996 <HAL_DMA_IRQHandler+0x156>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d025      	beq.n	8002996 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 020e 	bic.w	r2, r2, #14
 8002958:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f003 021c 	and.w	r2, r3, #28
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f202 	lsl.w	r2, r1, r2
 800296c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002994:	bf00      	nop
 8002996:	bf00      	nop
}
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029b4:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029c6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f003 021c 	and.w	r2, r3, #28
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d108      	bne.n	80029fe <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029fc:	e007      	b.n	8002a0e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	60da      	str	r2, [r3, #12]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d80a      	bhi.n	8002a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a3c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6493      	str	r3, [r2, #72]	; 0x48
 8002a44:	e007      	b.n	8002a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	009a      	lsls	r2, r3, #2
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002a50:	4413      	add	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	3b08      	subs	r3, #8
 8002a5e:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40020407 	.word	0x40020407
 8002a8c:	4002081c 	.word	0x4002081c
 8002a90:	cccccccd 	.word	0xcccccccd
 8002a94:	40020880 	.word	0x40020880

08002a98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a08      	ldr	r2, [pc, #32]	; (8002adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002aba:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	1000823f 	.word	0x1000823f
 8002adc:	40020940 	.word	0x40020940

08002ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aee:	e166      	b.n	8002dbe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8158 	beq.w	8002db8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d00b      	beq.n	8002b28 <HAL_GPIO_Init+0x48>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d007      	beq.n	8002b28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b1c:	2b11      	cmp	r3, #17
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b12      	cmp	r3, #18
 8002b26:	d130      	bne.n	8002b8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b5e:	2201      	movs	r2, #1
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	f003 0201 	and.w	r2, r3, #1
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0xea>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b12      	cmp	r3, #18
 8002bc8:	d123      	bne.n	8002c12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	08da      	lsrs	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3208      	adds	r2, #8
 8002bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	6939      	ldr	r1, [r7, #16]
 8002c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80b2 	beq.w	8002db8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c54:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_GPIO_Init+0x2fc>)
 8002c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c58:	4a60      	ldr	r2, [pc, #384]	; (8002ddc <HAL_GPIO_Init+0x2fc>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6613      	str	r3, [r2, #96]	; 0x60
 8002c60:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <HAL_GPIO_Init+0x2fc>)
 8002c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c6c:	4a5c      	ldr	r2, [pc, #368]	; (8002de0 <HAL_GPIO_Init+0x300>)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c96:	d02b      	beq.n	8002cf0 <HAL_GPIO_Init+0x210>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a52      	ldr	r2, [pc, #328]	; (8002de4 <HAL_GPIO_Init+0x304>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d025      	beq.n	8002cec <HAL_GPIO_Init+0x20c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a51      	ldr	r2, [pc, #324]	; (8002de8 <HAL_GPIO_Init+0x308>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d01f      	beq.n	8002ce8 <HAL_GPIO_Init+0x208>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a50      	ldr	r2, [pc, #320]	; (8002dec <HAL_GPIO_Init+0x30c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d019      	beq.n	8002ce4 <HAL_GPIO_Init+0x204>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a4f      	ldr	r2, [pc, #316]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <HAL_GPIO_Init+0x200>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <HAL_GPIO_Init+0x314>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00d      	beq.n	8002cdc <HAL_GPIO_Init+0x1fc>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a4d      	ldr	r2, [pc, #308]	; (8002df8 <HAL_GPIO_Init+0x318>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <HAL_GPIO_Init+0x1f8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a4c      	ldr	r2, [pc, #304]	; (8002dfc <HAL_GPIO_Init+0x31c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_GPIO_Init+0x1f4>
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	e00e      	b.n	8002cf2 <HAL_GPIO_Init+0x212>
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	e00c      	b.n	8002cf2 <HAL_GPIO_Init+0x212>
 8002cd8:	2306      	movs	r3, #6
 8002cda:	e00a      	b.n	8002cf2 <HAL_GPIO_Init+0x212>
 8002cdc:	2305      	movs	r3, #5
 8002cde:	e008      	b.n	8002cf2 <HAL_GPIO_Init+0x212>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	e006      	b.n	8002cf2 <HAL_GPIO_Init+0x212>
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e004      	b.n	8002cf2 <HAL_GPIO_Init+0x212>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e002      	b.n	8002cf2 <HAL_GPIO_Init+0x212>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_GPIO_Init+0x212>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	f002 0203 	and.w	r2, r2, #3
 8002cf8:	0092      	lsls	r2, r2, #2
 8002cfa:	4093      	lsls	r3, r2
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d02:	4937      	ldr	r1, [pc, #220]	; (8002de0 <HAL_GPIO_Init+0x300>)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d10:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_GPIO_Init+0x320>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d34:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <HAL_GPIO_Init+0x320>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_GPIO_Init+0x320>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d5e:	4a28      	ldr	r2, [pc, #160]	; (8002e00 <HAL_GPIO_Init+0x320>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d64:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_GPIO_Init+0x320>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_GPIO_Init+0x320>)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_GPIO_Init+0x320>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002db2:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_GPIO_Init+0x320>)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f47f ae91 	bne.w	8002af0 <HAL_GPIO_Init+0x10>
  }
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010000 	.word	0x40010000
 8002de4:	48000400 	.word	0x48000400
 8002de8:	48000800 	.word	0x48000800
 8002dec:	48000c00 	.word	0x48000c00
 8002df0:	48001000 	.word	0x48001000
 8002df4:	48001400 	.word	0x48001400
 8002df8:	48001800 	.word	0x48001800
 8002dfc:	48001c00 	.word	0x48001c00
 8002e00:	40010400 	.word	0x40010400

08002e04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
 8002e20:	e001      	b.n	8002e26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e22:	2300      	movs	r3, #0
 8002e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e44:	787b      	ldrb	r3, [r7, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	43d9      	mvns	r1, r3
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	400b      	ands	r3, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d006      	beq.n	8002ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eae:	4a05      	ldr	r2, [pc, #20]	; (8002ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fbd8 	bl	800166c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e081      	b.n	8002fde <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fca0 	bl	8001834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d107      	bne.n	8002f42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	e006      	b.n	8002f50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d104      	bne.n	8002f62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	ea42 0103 	orr.w	r1, r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69d9      	ldr	r1, [r3, #28]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1a      	ldr	r2, [r3, #32]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	817b      	strh	r3, [r7, #10]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b20      	cmp	r3, #32
 8003006:	f040 80da 	bne.w	80031be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_I2C_Master_Transmit+0x30>
 8003014:	2302      	movs	r3, #2
 8003016:	e0d3      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1d8>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003020:	f7ff f97c 	bl	800231c <HAL_GetTick>
 8003024:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2319      	movs	r3, #25
 800302c:	2201      	movs	r2, #1
 800302e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f8f0 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0be      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2221      	movs	r2, #33	; 0x21
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2210      	movs	r2, #16
 800304e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	893a      	ldrh	r2, [r7, #8]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	2bff      	cmp	r3, #255	; 0xff
 8003072:	d90e      	bls.n	8003092 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	22ff      	movs	r2, #255	; 0xff
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	b2da      	uxtb	r2, r3
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	4b51      	ldr	r3, [pc, #324]	; (80031c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f9e6 	bl	800345c <I2C_TransferConfig>
 8003090:	e06c      	b.n	800316c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	8979      	ldrh	r1, [r7, #10]
 80030a4:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f9d5 	bl	800345c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80030b2:	e05b      	b.n	800316c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	6a39      	ldr	r1, [r7, #32]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f8ed 	bl	8003298 <I2C_WaitOnTXISFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e07b      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d034      	beq.n	800316c <HAL_I2C_Master_Transmit+0x184>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	2b00      	cmp	r3, #0
 8003108:	d130      	bne.n	800316c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	2200      	movs	r2, #0
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f87f 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e04d      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	d90e      	bls.n	800314c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	22ff      	movs	r2, #255	; 0xff
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	b2da      	uxtb	r2, r3
 800313a:	8979      	ldrh	r1, [r7, #10]
 800313c:	2300      	movs	r3, #0
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f989 	bl	800345c <I2C_TransferConfig>
 800314a:	e00f      	b.n	800316c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	b2da      	uxtb	r2, r3
 800315c:	8979      	ldrh	r1, [r7, #10]
 800315e:	2300      	movs	r3, #0
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f978 	bl	800345c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d19e      	bne.n	80030b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	6a39      	ldr	r1, [r7, #32]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f8cc 	bl	8003318 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e01a      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2220      	movs	r2, #32
 8003190:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_I2C_Master_Transmit+0x1e4>)
 800319e:	400b      	ands	r3, r1
 80031a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e000      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031be:	2302      	movs	r3, #2
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	80002000 	.word	0x80002000
 80031cc:	fe00e800 	.word	0xfe00e800

080031d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d103      	bne.n	80031ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2200      	movs	r2, #0
 80031ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d007      	beq.n	800320c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	619a      	str	r2, [r3, #24]
  }
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003228:	e022      	b.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d01e      	beq.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7ff f873 	bl	800231c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d113      	bne.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e00f      	b.n	8003290 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	429a      	cmp	r2, r3
 800328c:	d0cd      	beq.n	800322a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032a4:	e02c      	b.n	8003300 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f870 	bl	8003390 <I2C_IsAcknowledgeFailed>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e02a      	b.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d01e      	beq.n	8003300 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7ff f82b 	bl	800231c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d113      	bne.n	8003300 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e007      	b.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d1cb      	bne.n	80032a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003324:	e028      	b.n	8003378 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f830 	bl	8003390 <I2C_IsAcknowledgeFailed>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e026      	b.n	8003388 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fe ffef 	bl	800231c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d113      	bne.n	8003378 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e007      	b.n	8003388 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b20      	cmp	r3, #32
 8003384:	d1cf      	bne.n	8003326 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d151      	bne.n	800344e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033aa:	e022      	b.n	80033f2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d01e      	beq.n	80033f2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b4:	f7fe ffb2 	bl	800231c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <I2C_IsAcknowledgeFailed+0x3a>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d113      	bne.n	80033f2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f043 0220 	orr.w	r2, r3, #32
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e02e      	b.n	8003450 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d1d5      	bne.n	80033ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2210      	movs	r2, #16
 8003406:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2220      	movs	r2, #32
 800340e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fedd 	bl	80031d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <I2C_IsAcknowledgeFailed+0xc8>)
 8003422:	400b      	ands	r3, r1
 8003424:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f043 0204 	orr.w	r2, r3, #4
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	fe00e800 	.word	0xfe00e800

0800345c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	817b      	strh	r3, [r7, #10]
 800346a:	4613      	mov	r3, r2
 800346c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	0d5b      	lsrs	r3, r3, #21
 8003478:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <I2C_TransferConfig+0x58>)
 800347e:	430b      	orrs	r3, r1
 8003480:	43db      	mvns	r3, r3
 8003482:	ea02 0103 	and.w	r1, r2, r3
 8003486:	897b      	ldrh	r3, [r7, #10]
 8003488:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800348c:	7a7b      	ldrb	r3, [r7, #9]
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	431a      	orrs	r2, r3
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	431a      	orrs	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	03ff63ff 	.word	0x03ff63ff

080034b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d138      	bne.n	8003540 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034d8:	2302      	movs	r3, #2
 80034da:	e032      	b.n	8003542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800350a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	d139      	bne.n	80035d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800356e:	2302      	movs	r3, #2
 8003570:	e033      	b.n	80035da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2224      	movs	r2, #36	; 0x24
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e000      	b.n	80035da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_PWREx_GetVoltageRange+0x3c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	d102      	bne.n	8003600 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	e00b      	b.n	8003618 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d102      	bne.n	8003616 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003614:	e000      	b.n	8003618 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003616:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40007000 	.word	0x40007000

08003628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d141      	bne.n	80036ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003636:	4b4b      	ldr	r3, [pc, #300]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003642:	d131      	bne.n	80036a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003644:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364a:	4a46      	ldr	r2, [pc, #280]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003650:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003654:	4b43      	ldr	r3, [pc, #268]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800365c:	4a41      	ldr	r2, [pc, #260]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003662:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003664:	4b40      	ldr	r3, [pc, #256]	; (8003768 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2232      	movs	r2, #50	; 0x32
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	4a3f      	ldr	r2, [pc, #252]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	0c9b      	lsrs	r3, r3, #18
 8003676:	3301      	adds	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800367a:	e002      	b.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3b01      	subs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d102      	bne.n	8003696 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f2      	bne.n	800367c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003696:	4b33      	ldr	r3, [pc, #204]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d158      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e057      	b.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036a8:	4b2e      	ldr	r3, [pc, #184]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ae:	4a2d      	ldr	r2, [pc, #180]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036b8:	e04d      	b.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c0:	d141      	bne.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036c2:	4b28      	ldr	r3, [pc, #160]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ce:	d131      	bne.n	8003734 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036d6:	4a23      	ldr	r2, [pc, #140]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e0:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036e8:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2232      	movs	r2, #50	; 0x32
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	0c9b      	lsrs	r3, r3, #18
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003706:	e002      	b.n	800370e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3b01      	subs	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371a:	d102      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f2      	bne.n	8003708 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372e:	d112      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e011      	b.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003744:	e007      	b.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003754:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40007000 	.word	0x40007000
 8003768:	2000000c 	.word	0x2000000c
 800376c:	431bde83 	.word	0x431bde83

08003770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f000 bc16 	b.w	8003fb0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003784:	4ba0      	ldr	r3, [pc, #640]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800378e:	4b9e      	ldr	r3, [pc, #632]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80e4 	beq.w	800396e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <HAL_RCC_OscConfig+0x4c>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	f040 808b 	bne.w	80038ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	f040 8087 	bne.w	80038ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037bc:	4b92      	ldr	r3, [pc, #584]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_OscConfig+0x64>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e3ed      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	4b8b      	ldr	r3, [pc, #556]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <HAL_RCC_OscConfig+0x7e>
 80037e4:	4b88      	ldr	r3, [pc, #544]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ec:	e005      	b.n	80037fa <HAL_RCC_OscConfig+0x8a>
 80037ee:	4b86      	ldr	r3, [pc, #536]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80037f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d223      	bcs.n	8003846 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fdfa 	bl	80043fc <RCC_SetFlashLatencyFromMSIRange>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e3ce      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003812:	4b7d      	ldr	r3, [pc, #500]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7c      	ldr	r2, [pc, #496]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003818:	f043 0308 	orr.w	r3, r3, #8
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b7a      	ldr	r3, [pc, #488]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	4977      	ldr	r1, [pc, #476]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003830:	4b75      	ldr	r3, [pc, #468]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	4972      	ldr	r1, [pc, #456]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
 8003844:	e025      	b.n	8003892 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003846:	4b70      	ldr	r3, [pc, #448]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6f      	ldr	r2, [pc, #444]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 800384c:	f043 0308 	orr.w	r3, r3, #8
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b6d      	ldr	r3, [pc, #436]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	496a      	ldr	r1, [pc, #424]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	4965      	ldr	r1, [pc, #404]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fdba 	bl	80043fc <RCC_SetFlashLatencyFromMSIRange>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e38e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003892:	f000 fcbf 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8003896:	4601      	mov	r1, r0
 8003898:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	4a5a      	ldr	r2, [pc, #360]	; (8003a0c <HAL_RCC_OscConfig+0x29c>)
 80038a4:	5cd3      	ldrb	r3, [r2, r3]
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	fa21 f303 	lsr.w	r3, r1, r3
 80038ae:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_RCC_OscConfig+0x2a0>)
 80038b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038b2:	4b58      	ldr	r3, [pc, #352]	; (8003a14 <HAL_RCC_OscConfig+0x2a4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe f8d6 	bl	8001a68 <HAL_InitTick>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d052      	beq.n	800396c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	e372      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d032      	beq.n	8003938 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038d2:	4b4d      	ldr	r3, [pc, #308]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a4c      	ldr	r2, [pc, #304]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038de:	f7fe fd1d 	bl	800231c <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038e6:	f7fe fd19 	bl	800231c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e35b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f8:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003904:	4b40      	ldr	r3, [pc, #256]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3f      	ldr	r2, [pc, #252]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 800390a:	f043 0308 	orr.w	r3, r3, #8
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	493a      	ldr	r1, [pc, #232]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003922:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	4935      	ldr	r1, [pc, #212]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]
 8003936:	e01a      	b.n	800396e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003938:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a32      	ldr	r2, [pc, #200]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003944:	f7fe fcea 	bl	800231c <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800394c:	f7fe fce6 	bl	800231c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e328      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800395e:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1dc>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d073      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d005      	beq.n	800398c <HAL_RCC_OscConfig+0x21c>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d10e      	bne.n	80039a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d10b      	bne.n	80039a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398c:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d063      	beq.n	8003a60 <HAL_RCC_OscConfig+0x2f0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d15f      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e305      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ac:	d106      	bne.n	80039bc <HAL_RCC_OscConfig+0x24c>
 80039ae:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e01d      	b.n	80039f8 <HAL_RCC_OscConfig+0x288>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x270>
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a0f      	ldr	r2, [pc, #60]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0x288>
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a05      	ldr	r2, [pc, #20]	; (8003a08 <HAL_RCC_OscConfig+0x298>)
 80039f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe fc8c 	bl	800231c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a06:	e010      	b.n	8003a2a <HAL_RCC_OscConfig+0x2ba>
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	0800b170 	.word	0x0800b170
 8003a10:	2000000c 	.word	0x2000000c
 8003a14:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fe fc80 	bl	800231c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e2c2      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2a:	4baf      	ldr	r3, [pc, #700]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x2a8>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe fc70 	bl	800231c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe fc6c 	bl	800231c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e2ae      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a52:	4ba5      	ldr	r3, [pc, #660]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x2d0>
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d060      	beq.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_OscConfig+0x310>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b0c      	cmp	r3, #12
 8003a78:	d119      	bne.n	8003aae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d116      	bne.n	8003aae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a80:	4b99      	ldr	r3, [pc, #612]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_OscConfig+0x328>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e28b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a98:	4b93      	ldr	r3, [pc, #588]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	4990      	ldr	r1, [pc, #576]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aac:	e040      	b.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d023      	beq.n	8003afe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab6:	4b8c      	ldr	r3, [pc, #560]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a8b      	ldr	r2, [pc, #556]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7fe fc2b 	bl	800231c <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aca:	f7fe fc27 	bl	800231c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e269      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003adc:	4b82      	ldr	r3, [pc, #520]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae8:	4b7f      	ldr	r3, [pc, #508]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	061b      	lsls	r3, r3, #24
 8003af6:	497c      	ldr	r1, [pc, #496]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
 8003afc:	e018      	b.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afe:	4b7a      	ldr	r3, [pc, #488]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a79      	ldr	r2, [pc, #484]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fc07 	bl	800231c <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe fc03 	bl	800231c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e245      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b24:	4b70      	ldr	r3, [pc, #448]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d03c      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01c      	beq.n	8003b7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b44:	4b68      	ldr	r3, [pc, #416]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4a:	4a67      	ldr	r2, [pc, #412]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fe fbe2 	bl	800231c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fbde 	bl	800231c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e220      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b6e:	4b5e      	ldr	r3, [pc, #376]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ef      	beq.n	8003b5c <HAL_RCC_OscConfig+0x3ec>
 8003b7c:	e01b      	b.n	8003bb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7e:	4b5a      	ldr	r3, [pc, #360]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8e:	f7fe fbc5 	bl	800231c <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fe fbc1 	bl	800231c <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e203      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba8:	4b4f      	ldr	r3, [pc, #316]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ef      	bne.n	8003b96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80a6 	beq.w	8003d10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bc8:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	4b44      	ldr	r3, [pc, #272]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	4a43      	ldr	r2, [pc, #268]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bde:	6593      	str	r3, [r2, #88]	; 0x58
 8003be0:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf0:	4b3e      	ldr	r3, [pc, #248]	; (8003cec <HAL_RCC_OscConfig+0x57c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d118      	bne.n	8003c2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <HAL_RCC_OscConfig+0x57c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a3a      	ldr	r2, [pc, #232]	; (8003cec <HAL_RCC_OscConfig+0x57c>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c08:	f7fe fb88 	bl	800231c <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fe fb84 	bl	800231c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1c6      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c22:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_RCC_OscConfig+0x57c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d108      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4d8>
 8003c36:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c46:	e024      	b.n	8003c92 <HAL_RCC_OscConfig+0x522>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d110      	bne.n	8003c72 <HAL_RCC_OscConfig+0x502>
 8003c50:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	4a24      	ldr	r2, [pc, #144]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c60:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c70:	e00f      	b.n	8003c92 <HAL_RCC_OscConfig+0x522>
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c82:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003c8a:	f023 0304 	bic.w	r3, r3, #4
 8003c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d016      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fe fb3f 	bl	800231c <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fe fb3b 	bl	800231c <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e17b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_OscConfig+0x578>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ed      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x532>
 8003cc6:	e01a      	b.n	8003cfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fe fb28 	bl	800231c <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fb24 	bl	800231c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d906      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e164      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf0:	4ba8      	ldr	r3, [pc, #672]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e8      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d105      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d04:	4ba3      	ldr	r3, [pc, #652]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	4aa2      	ldr	r2, [pc, #648]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d03c      	beq.n	8003d96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d24:	4b9b      	ldr	r3, [pc, #620]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d2a:	4a9a      	ldr	r2, [pc, #616]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fe faf2 	bl	800231c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d3c:	f7fe faee 	bl	800231c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e130      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d4e:	4b91      	ldr	r3, [pc, #580]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ef      	beq.n	8003d3c <HAL_RCC_OscConfig+0x5cc>
 8003d5c:	e01b      	b.n	8003d96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d5e:	4b8d      	ldr	r3, [pc, #564]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d64:	4a8b      	ldr	r2, [pc, #556]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fe fad5 	bl	800231c <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d76:	f7fe fad1 	bl	800231c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e113      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d88:	4b82      	ldr	r3, [pc, #520]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1ef      	bne.n	8003d76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8107 	beq.w	8003fae <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	f040 80cb 	bne.w	8003f40 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003daa:	4b7a      	ldr	r3, [pc, #488]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f003 0203 	and.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d12c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d123      	bne.n	8003e18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d11b      	bne.n	8003e18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d113      	bne.n	8003e18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d109      	bne.n	8003e18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	3b01      	subs	r3, #1
 8003e12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d06d      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d068      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e1e:	4b5d      	ldr	r3, [pc, #372]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d105      	bne.n	8003e36 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e2a:	4b5a      	ldr	r3, [pc, #360]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0ba      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b56      	ldr	r3, [pc, #344]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a55      	ldr	r2, [pc, #340]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e46:	f7fe fa69 	bl	800231c <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7fe fa65 	bl	800231c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e0a7      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e60:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6c:	4b49      	ldr	r3, [pc, #292]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <HAL_RCC_OscConfig+0x828>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e86:	0212      	lsls	r2, r2, #8
 8003e88:	4311      	orrs	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e8e:	0852      	lsrs	r2, r2, #1
 8003e90:	3a01      	subs	r2, #1
 8003e92:	0552      	lsls	r2, r2, #21
 8003e94:	4311      	orrs	r1, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e9a:	0852      	lsrs	r2, r2, #1
 8003e9c:	3a01      	subs	r2, #1
 8003e9e:	0652      	lsls	r2, r2, #25
 8003ea0:	4311      	orrs	r1, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea6:	06d2      	lsls	r2, r2, #27
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	493a      	ldr	r1, [pc, #232]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb0:	4b38      	ldr	r3, [pc, #224]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a37      	ldr	r2, [pc, #220]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ebc:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a34      	ldr	r2, [pc, #208]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ec8:	f7fe fa28 	bl	800231c <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fe fa24 	bl	800231c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e066      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eee:	e05e      	b.n	8003fae <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e05d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d156      	bne.n	8003fae <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f00:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a20      	ldr	r2, [pc, #128]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f18:	f7fe fa00 	bl	800231c <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe f9fc 	bl	800231c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e03e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x7b0>
 8003f3e:	e036      	b.n	8003fae <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d031      	beq.n	8003faa <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f64:	f023 0303 	bic.w	r3, r3, #3
 8003f68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_RCC_OscConfig+0x824>)
 8003f70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fe f9cf 	bl	800231c <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f80:	e00c      	b.n	8003f9c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fe f9cb 	bl	800231c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d905      	bls.n	8003f9c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e00d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
 8003f94:	40021000 	.word	0x40021000
 8003f98:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_RCC_OscConfig+0x848>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ec      	bne.n	8003f82 <HAL_RCC_OscConfig+0x812>
 8003fa8:	e001      	b.n	8003fae <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021000 	.word	0x40021000

08003fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e10f      	b.n	80041f4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b89      	ldr	r3, [pc, #548]	; (80041fc <HAL_RCC_ClockConfig+0x240>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d910      	bls.n	8004004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b86      	ldr	r3, [pc, #536]	; (80041fc <HAL_RCC_ClockConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 020f 	bic.w	r2, r3, #15
 8003fea:	4984      	ldr	r1, [pc, #528]	; (80041fc <HAL_RCC_ClockConfig+0x240>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b82      	ldr	r3, [pc, #520]	; (80041fc <HAL_RCC_ClockConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0f7      	b.n	80041f4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8089 	beq.w	8004124 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d133      	bne.n	8004082 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401a:	4b79      	ldr	r3, [pc, #484]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0e4      	b.n	80041f4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800402a:	f000 fa41 	bl	80044b0 <RCC_GetSysClockFreqFromPLLSource>
 800402e:	4602      	mov	r2, r0
 8004030:	4b74      	ldr	r3, [pc, #464]	; (8004204 <HAL_RCC_ClockConfig+0x248>)
 8004032:	429a      	cmp	r2, r3
 8004034:	d955      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004036:	4b72      	ldr	r3, [pc, #456]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004042:	4b6f      	ldr	r3, [pc, #444]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404a:	4a6d      	ldr	r2, [pc, #436]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 800404c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004050:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e044      	b.n	80040e2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d03e      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x126>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d13a      	bne.n	80040e2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800406c:	4b64      	ldr	r3, [pc, #400]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004074:	4a62      	ldr	r2, [pc, #392]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 8004076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	e02f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408a:	4b5d      	ldr	r3, [pc, #372]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d115      	bne.n	80040c2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0ac      	b.n	80041f4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040a2:	4b57      	ldr	r3, [pc, #348]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0a0      	b.n	80041f4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b2:	4b53      	ldr	r3, [pc, #332]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e098      	b.n	80041f4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80040c2:	f000 f8a7 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80040c6:	4602      	mov	r2, r0
 80040c8:	4b4e      	ldr	r3, [pc, #312]	; (8004204 <HAL_RCC_ClockConfig+0x248>)
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d909      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ce:	4b4c      	ldr	r3, [pc, #304]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d6:	4a4a      	ldr	r2, [pc, #296]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80040d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f023 0203 	bic.w	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4944      	ldr	r1, [pc, #272]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f4:	f7fe f912 	bl	800231c <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fc:	f7fe f90e 	bl	800231c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e070      	b.n	80041f4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 020c 	and.w	r2, r3, #12
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	429a      	cmp	r2, r3
 8004122:	d1eb      	bne.n	80040fc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b33      	ldr	r3, [pc, #204]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4930      	ldr	r1, [pc, #192]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
 8004142:	e008      	b.n	8004156 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d105      	bne.n	8004156 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800414a:	4b2d      	ldr	r3, [pc, #180]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 8004150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004154:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004156:	4b29      	ldr	r3, [pc, #164]	; (80041fc <HAL_RCC_ClockConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d210      	bcs.n	8004186 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_RCC_ClockConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 020f 	bic.w	r2, r3, #15
 800416c:	4923      	ldr	r1, [pc, #140]	; (80041fc <HAL_RCC_ClockConfig+0x240>)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <HAL_RCC_ClockConfig+0x240>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d001      	beq.n	8004186 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e036      	b.n	80041f4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	4918      	ldr	r1, [pc, #96]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4910      	ldr	r1, [pc, #64]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041c4:	f000 f826 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80041c8:	4601      	mov	r1, r0
 80041ca:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <HAL_RCC_ClockConfig+0x24c>)
 80041d6:	5cd3      	ldrb	r3, [r2, r3]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	fa21 f303 	lsr.w	r3, r1, r3
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x250>)
 80041e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_RCC_ClockConfig+0x254>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fd fc3d 	bl	8001a68 <HAL_InitTick>
 80041ee:	4603      	mov	r3, r0
 80041f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40022000 	.word	0x40022000
 8004200:	40021000 	.word	0x40021000
 8004204:	04c4b400 	.word	0x04c4b400
 8004208:	0800b170 	.word	0x0800b170
 800420c:	2000000c 	.word	0x2000000c
 8004210:	20000010 	.word	0x20000010

08004214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004222:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <HAL_RCC_GetSysClockFreq+0x104>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800422c:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <HAL_RCC_GetSysClockFreq+0x104>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x34>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b0c      	cmp	r3, #12
 8004240:	d121      	bne.n	8004286 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d11e      	bne.n	8004286 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004248:	4b33      	ldr	r3, [pc, #204]	; (8004318 <HAL_RCC_GetSysClockFreq+0x104>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d107      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004254:	4b30      	ldr	r3, [pc, #192]	; (8004318 <HAL_RCC_GetSysClockFreq+0x104>)
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	e005      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004264:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <HAL_RCC_GetSysClockFreq+0x104>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004270:	4a2a      	ldr	r2, [pc, #168]	; (800431c <HAL_RCC_GetSysClockFreq+0x108>)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004278:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10d      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004284:	e00a      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d102      	bne.n	8004292 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800428c:	4b24      	ldr	r3, [pc, #144]	; (8004320 <HAL_RCC_GetSysClockFreq+0x10c>)
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e004      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d101      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004298:	4b22      	ldr	r3, [pc, #136]	; (8004324 <HAL_RCC_GetSysClockFreq+0x110>)
 800429a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d133      	bne.n	800430a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_RCC_GetSysClockFreq+0x104>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0xa4>
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0xaa>
 80042b6:	e005      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ba:	617b      	str	r3, [r7, #20]
      break;
 80042bc:	e005      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042be:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_RCC_GetSysClockFreq+0x110>)
 80042c0:	617b      	str	r3, [r7, #20]
      break;
 80042c2:	e002      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	617b      	str	r3, [r7, #20]
      break;
 80042c8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <HAL_RCC_GetSysClockFreq+0x104>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	3301      	adds	r3, #1
 80042d6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042d8:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <HAL_RCC_GetSysClockFreq+0x104>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	fb02 f203 	mul.w	r2, r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_GetSysClockFreq+0x104>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	0e5b      	lsrs	r3, r3, #25
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	3301      	adds	r3, #1
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	fbb2 f3f3 	udiv	r3, r2, r3
 8004308:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800430a:	69bb      	ldr	r3, [r7, #24]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3724      	adds	r7, #36	; 0x24
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40021000 	.word	0x40021000
 800431c:	0800b188 	.word	0x0800b188
 8004320:	00f42400 	.word	0x00f42400
 8004324:	007a1200 	.word	0x007a1200

08004328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <HAL_RCC_GetHCLKFreq+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	2000000c 	.word	0x2000000c

08004340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004344:	f7ff fff0 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004348:	4601      	mov	r1, r0
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000
 8004368:	0800b180 	.word	0x0800b180

0800436c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004370:	f7ff ffda 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004374:	4601      	mov	r1, r0
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	0adb      	lsrs	r3, r3, #11
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004382:	5cd3      	ldrb	r3, [r2, r3]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000
 8004394:	0800b180 	.word	0x0800b180

08004398 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	220f      	movs	r2, #15
 80043a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80043a8:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCC_GetClockConfig+0x5c>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0203 	and.w	r2, r3, #3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <HAL_RCC_GetClockConfig+0x5c>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <HAL_RCC_GetClockConfig+0x5c>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043cc:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_RCC_GetClockConfig+0x5c>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <HAL_RCC_GetClockConfig+0x60>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 020f 	and.w	r2, r3, #15
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	601a      	str	r2, [r3, #0]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40022000 	.word	0x40022000

080043fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004414:	f7ff f8e8 	bl	80035e8 <HAL_PWREx_GetVoltageRange>
 8004418:	6178      	str	r0, [r7, #20]
 800441a:	e014      	b.n	8004446 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800441c:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	6593      	str	r3, [r2, #88]	; 0x58
 8004428:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004434:	f7ff f8d8 	bl	80035e8 <HAL_PWREx_GetVoltageRange>
 8004438:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800443a:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004444:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800444c:	d10b      	bne.n	8004466 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d913      	bls.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2ba0      	cmp	r3, #160	; 0xa0
 8004458:	d902      	bls.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800445a:	2302      	movs	r3, #2
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	e00d      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004460:	2301      	movs	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	e00a      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b7f      	cmp	r3, #127	; 0x7f
 800446a:	d902      	bls.n	8004472 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800446c:	2302      	movs	r3, #2
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e004      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b70      	cmp	r3, #112	; 0x70
 8004476:	d101      	bne.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004478:	2301      	movs	r3, #1
 800447a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 020f 	bic.w	r2, r3, #15
 8004484:	4909      	ldr	r1, [pc, #36]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40022000 	.word	0x40022000

080044b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d118      	bne.n	80044f8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044c6:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d107      	bne.n	80044e2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044d2:	4b27      	ldr	r3, [pc, #156]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e005      	b.n	80044ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044e2:	4b23      	ldr	r3, [pc, #140]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044ee:	4a21      	ldr	r2, [pc, #132]	; (8004574 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044f8:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d002      	beq.n	800450e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8004508:	2b03      	cmp	r3, #3
 800450a:	d003      	beq.n	8004514 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800450c:	e005      	b.n	800451a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800450e:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004510:	613b      	str	r3, [r7, #16]
    break;
 8004512:	e005      	b.n	8004520 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004516:	613b      	str	r3, [r7, #16]
    break;
 8004518:	e002      	b.n	8004520 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	613b      	str	r3, [r7, #16]
    break;
 800451e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004520:	4b13      	ldr	r3, [pc, #76]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	3301      	adds	r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	0a1b      	lsrs	r3, r3, #8
 8004534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	fb02 f203 	mul.w	r2, r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	0e5b      	lsrs	r3, r3, #25
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	3301      	adds	r3, #1
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004560:	683b      	ldr	r3, [r7, #0]
}
 8004562:	4618      	mov	r0, r3
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	0800b188 	.word	0x0800b188
 8004578:	00f42400 	.word	0x00f42400
 800457c:	007a1200 	.word	0x007a1200

08004580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004588:	2300      	movs	r3, #0
 800458a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800458c:	2300      	movs	r3, #0
 800458e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004598:	2b00      	cmp	r3, #0
 800459a:	d03d      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d00b      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d804      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d015      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045b0:	e01d      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80045b2:	2b60      	cmp	r3, #96	; 0x60
 80045b4:	d01e      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d01c      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045ba:	e018      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045bc:	4b86      	ldr	r3, [pc, #536]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a85      	ldr	r2, [pc, #532]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c8:	e015      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3304      	adds	r3, #4
 80045ce:	2100      	movs	r1, #0
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fafd 	bl	8004bd0 <RCCEx_PLLSAI1_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045da:	e00c      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3320      	adds	r3, #32
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fbe4 	bl	8004db0 <RCCEx_PLLSAI2_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ec:	e003      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	74fb      	strb	r3, [r7, #19]
      break;
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80045f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f6:	7cfb      	ldrb	r3, [r7, #19]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10b      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045fc:	4b76      	ldr	r3, [pc, #472]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004602:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460a:	4973      	ldr	r1, [pc, #460]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004612:	e001      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d042      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800462c:	d00f      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800462e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004632:	d805      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d011      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463c:	d017      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800463e:	e01f      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004644:	d01f      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d01c      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800464c:	e018      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800464e:	4b62      	ldr	r3, [pc, #392]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4a61      	ldr	r2, [pc, #388]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800465a:	e015      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fab4 	bl	8004bd0 <RCCEx_PLLSAI1_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800466c:	e00c      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3320      	adds	r3, #32
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fb9b 	bl	8004db0 <RCCEx_PLLSAI2_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800467e:	e003      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	74fb      	strb	r3, [r7, #19]
      break;
 8004684:	e000      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8004686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800468e:	4b52      	ldr	r3, [pc, #328]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	494e      	ldr	r1, [pc, #312]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046a4:	e001      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 809f 	beq.w	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b8:	2300      	movs	r3, #0
 80046ba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046bc:	4b46      	ldr	r3, [pc, #280]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	4a40      	ldr	r2, [pc, #256]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046dc:	6593      	str	r3, [r2, #88]	; 0x58
 80046de:	4b3e      	ldr	r3, [pc, #248]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ea:	2301      	movs	r3, #1
 80046ec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ee:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a3a      	ldr	r2, [pc, #232]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046fa:	f7fd fe0f 	bl	800231c <HAL_GetTick>
 80046fe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004700:	e009      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004702:	f7fd fe0b 	bl	800231c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d902      	bls.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	74fb      	strb	r3, [r7, #19]
        break;
 8004714:	e005      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004716:	4b31      	ldr	r3, [pc, #196]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0ef      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8004722:	7cfb      	ldrb	r3, [r7, #19]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d15b      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004728:	4b2b      	ldr	r3, [pc, #172]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004732:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01f      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	429a      	cmp	r2, r3
 8004744:	d019      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004746:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004750:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004752:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800475a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004772:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d016      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd fdca 	bl	800231c <HAL_GetTick>
 8004788:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478a:	e00b      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fd fdc6 	bl	800231c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d902      	bls.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	74fb      	strb	r3, [r7, #19]
            break;
 80047a2:	e006      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ec      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10c      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b8:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c8:	4903      	ldr	r1, [pc, #12]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047d0:	e008      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	74bb      	strb	r3, [r7, #18]
 80047d6:	e005      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e4:	7c7b      	ldrb	r3, [r7, #17]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ea:	4ba0      	ldr	r3, [pc, #640]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	4a9f      	ldr	r2, [pc, #636]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004802:	4b9a      	ldr	r3, [pc, #616]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f023 0203 	bic.w	r2, r3, #3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004810:	4996      	ldr	r1, [pc, #600]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004824:	4b91      	ldr	r3, [pc, #580]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f023 020c 	bic.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	498e      	ldr	r1, [pc, #568]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004846:	4b89      	ldr	r3, [pc, #548]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	4985      	ldr	r1, [pc, #532]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004868:	4b80      	ldr	r3, [pc, #512]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004876:	497d      	ldr	r1, [pc, #500]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800488a:	4b78      	ldr	r3, [pc, #480]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004898:	4974      	ldr	r1, [pc, #464]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048ac:	4b6f      	ldr	r3, [pc, #444]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ba:	496c      	ldr	r1, [pc, #432]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ce:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048dc:	4963      	ldr	r1, [pc, #396]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048f0:	4b5e      	ldr	r3, [pc, #376]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048fe:	495b      	ldr	r1, [pc, #364]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004912:	4b56      	ldr	r3, [pc, #344]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	4952      	ldr	r1, [pc, #328]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004934:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	494a      	ldr	r1, [pc, #296]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004956:	4b45      	ldr	r3, [pc, #276]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	4941      	ldr	r1, [pc, #260]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004978:	4b3c      	ldr	r3, [pc, #240]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800497e:	f023 0203 	bic.w	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004986:	4939      	ldr	r1, [pc, #228]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d028      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800499a:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a8:	4930      	ldr	r1, [pc, #192]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ba:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c4:	60d3      	str	r3, [r2, #12]
 80049c6:	e011      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2101      	movs	r1, #1
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f8f9 	bl	8004bd0 <RCCEx_PLLSAI1_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d04d      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a00:	d108      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004a02:	4b1a      	ldr	r3, [pc, #104]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a08:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a12:	e012      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004a14:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a1a:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a32:	490e      	ldr	r1, [pc, #56]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a42:	d106      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a4e:	60d3      	str	r3, [r2, #12]
 8004a50:	e020      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a5a:	d109      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a02      	ldr	r2, [pc, #8]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a66:	60d3      	str	r3, [r2, #12]
 8004a68:	e014      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	2101      	movs	r1, #1
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 f8a5 	bl	8004bd0 <RCCEx_PLLSAI1_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a8a:	7cfb      	ldrb	r3, [r7, #19]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d028      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004aa0:	4b4a      	ldr	r3, [pc, #296]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aae:	4947      	ldr	r1, [pc, #284]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004abe:	d106      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac0:	4b42      	ldr	r3, [pc, #264]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4a41      	ldr	r2, [pc, #260]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aca:	60d3      	str	r3, [r2, #12]
 8004acc:	e011      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad6:	d10c      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	2101      	movs	r1, #1
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f876 	bl	8004bd0 <RCCEx_PLLSAI1_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01e      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004afe:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0e:	492f      	ldr	r1, [pc, #188]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3304      	adds	r3, #4
 8004b26:	2102      	movs	r1, #2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f851 	bl	8004bd0 <RCCEx_PLLSAI1_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b32:	7cfb      	ldrb	r3, [r7, #19]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004b38:	7cfb      	ldrb	r3, [r7, #19]
 8004b3a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b48:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b4e:	f023 0204 	bic.w	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b58:	491c      	ldr	r1, [pc, #112]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b6c:	4b17      	ldr	r3, [pc, #92]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b72:	f023 0218 	bic.w	r2, r3, #24
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	4913      	ldr	r1, [pc, #76]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba0:	490a      	ldr	r1, [pc, #40]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000

08004bd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bde:	4b70      	ldr	r3, [pc, #448]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00e      	beq.n	8004c08 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bea:	4b6d      	ldr	r3, [pc, #436]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0203 	and.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d103      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
       ||
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d13f      	bne.n	8004c82 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
 8004c06:	e03c      	b.n	8004c82 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d00c      	beq.n	8004c2a <RCCEx_PLLSAI1_Config+0x5a>
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d013      	beq.n	8004c3c <RCCEx_PLLSAI1_Config+0x6c>
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d120      	bne.n	8004c5a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c18:	4b61      	ldr	r3, [pc, #388]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11d      	bne.n	8004c60 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c28:	e01a      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c2a:	4b5d      	ldr	r3, [pc, #372]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d116      	bne.n	8004c64 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3a:	e013      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c3c:	4b58      	ldr	r3, [pc, #352]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10f      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c48:	4b55      	ldr	r3, [pc, #340]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c58:	e006      	b.n	8004c68 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c5e:	e004      	b.n	8004c6a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004c60:	bf00      	nop
 8004c62:	e002      	b.n	8004c6a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004c64:	bf00      	nop
 8004c66:	e000      	b.n	8004c6a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004c68:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d108      	bne.n	8004c82 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004c70:	4b4b      	ldr	r3, [pc, #300]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f023 0203 	bic.w	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4948      	ldr	r1, [pc, #288]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 8086 	bne.w	8004d96 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c8a:	4b45      	ldr	r3, [pc, #276]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a44      	ldr	r2, [pc, #272]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c96:	f7fd fb41 	bl	800231c <HAL_GetTick>
 8004c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c9c:	e009      	b.n	8004cb2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c9e:	f7fd fb3d 	bl	800231c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d902      	bls.n	8004cb2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	73fb      	strb	r3, [r7, #15]
        break;
 8004cb0:	e005      	b.n	8004cbe <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1ef      	bne.n	8004c9e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d168      	bne.n	8004d96 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d113      	bne.n	8004cf2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cca:	4b35      	ldr	r3, [pc, #212]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	4b35      	ldr	r3, [pc, #212]	; (8004da4 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6892      	ldr	r2, [r2, #8]
 8004cd6:	0211      	lsls	r1, r2, #8
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68d2      	ldr	r2, [r2, #12]
 8004cdc:	06d2      	lsls	r2, r2, #27
 8004cde:	4311      	orrs	r1, r2
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6852      	ldr	r2, [r2, #4]
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	0112      	lsls	r2, r2, #4
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	492d      	ldr	r1, [pc, #180]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	610b      	str	r3, [r1, #16]
 8004cf0:	e02d      	b.n	8004d4e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d115      	bne.n	8004d24 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf8:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	0211      	lsls	r1, r2, #8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6912      	ldr	r2, [r2, #16]
 8004d0a:	0852      	lsrs	r2, r2, #1
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0552      	lsls	r2, r2, #21
 8004d10:	4311      	orrs	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6852      	ldr	r2, [r2, #4]
 8004d16:	3a01      	subs	r2, #1
 8004d18:	0112      	lsls	r2, r2, #4
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	4920      	ldr	r1, [pc, #128]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	610b      	str	r3, [r1, #16]
 8004d22:	e014      	b.n	8004d4e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6892      	ldr	r2, [r2, #8]
 8004d30:	0211      	lsls	r1, r2, #8
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6952      	ldr	r2, [r2, #20]
 8004d36:	0852      	lsrs	r2, r2, #1
 8004d38:	3a01      	subs	r2, #1
 8004d3a:	0652      	lsls	r2, r2, #25
 8004d3c:	4311      	orrs	r1, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6852      	ldr	r2, [r2, #4]
 8004d42:	3a01      	subs	r2, #1
 8004d44:	0112      	lsls	r2, r2, #4
 8004d46:	430a      	orrs	r2, r1
 8004d48:	4915      	ldr	r1, [pc, #84]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5a:	f7fd fadf 	bl	800231c <HAL_GetTick>
 8004d5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d60:	e009      	b.n	8004d76 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d62:	f7fd fadb 	bl	800231c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d902      	bls.n	8004d76 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	73fb      	strb	r3, [r7, #15]
          break;
 8004d74:	e005      	b.n	8004d82 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0ef      	beq.n	8004d62 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	4903      	ldr	r1, [pc, #12]	; (8004da0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	07ff800f 	.word	0x07ff800f
 8004da8:	ff9f800f 	.word	0xff9f800f
 8004dac:	f9ff800f 	.word	0xf9ff800f

08004db0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dbe:	4b70      	ldr	r3, [pc, #448]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dca:	4b6d      	ldr	r3, [pc, #436]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0203 	and.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d103      	bne.n	8004de2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d13f      	bne.n	8004e62 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	e03c      	b.n	8004e62 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d00c      	beq.n	8004e0a <RCCEx_PLLSAI2_Config+0x5a>
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d013      	beq.n	8004e1c <RCCEx_PLLSAI2_Config+0x6c>
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d120      	bne.n	8004e3a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004df8:	4b61      	ldr	r3, [pc, #388]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11d      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e08:	e01a      	b.n	8004e40 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e0a:	4b5d      	ldr	r3, [pc, #372]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d116      	bne.n	8004e44 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1a:	e013      	b.n	8004e44 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e1c:	4b58      	ldr	r3, [pc, #352]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10f      	bne.n	8004e48 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e28:	4b55      	ldr	r3, [pc, #340]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e38:	e006      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3e:	e004      	b.n	8004e4a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004e40:	bf00      	nop
 8004e42:	e002      	b.n	8004e4a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004e44:	bf00      	nop
 8004e46:	e000      	b.n	8004e4a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004e48:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d108      	bne.n	8004e62 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004e50:	4b4b      	ldr	r3, [pc, #300]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f023 0203 	bic.w	r2, r3, #3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4948      	ldr	r1, [pc, #288]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 8086 	bne.w	8004f76 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e6a:	4b45      	ldr	r3, [pc, #276]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a44      	ldr	r2, [pc, #272]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e76:	f7fd fa51 	bl	800231c <HAL_GetTick>
 8004e7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e7c:	e009      	b.n	8004e92 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e7e:	f7fd fa4d 	bl	800231c <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d902      	bls.n	8004e92 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	73fb      	strb	r3, [r7, #15]
        break;
 8004e90:	e005      	b.n	8004e9e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e92:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1ef      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d168      	bne.n	8004f76 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d113      	bne.n	8004ed2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eaa:	4b35      	ldr	r3, [pc, #212]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	4b35      	ldr	r3, [pc, #212]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6892      	ldr	r2, [r2, #8]
 8004eb6:	0211      	lsls	r1, r2, #8
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68d2      	ldr	r2, [r2, #12]
 8004ebc:	06d2      	lsls	r2, r2, #27
 8004ebe:	4311      	orrs	r1, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6852      	ldr	r2, [r2, #4]
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	0112      	lsls	r2, r2, #4
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	492d      	ldr	r1, [pc, #180]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	614b      	str	r3, [r1, #20]
 8004ed0:	e02d      	b.n	8004f2e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d115      	bne.n	8004f04 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ed8:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6892      	ldr	r2, [r2, #8]
 8004ee4:	0211      	lsls	r1, r2, #8
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6912      	ldr	r2, [r2, #16]
 8004eea:	0852      	lsrs	r2, r2, #1
 8004eec:	3a01      	subs	r2, #1
 8004eee:	0552      	lsls	r2, r2, #21
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6852      	ldr	r2, [r2, #4]
 8004ef6:	3a01      	subs	r2, #1
 8004ef8:	0112      	lsls	r2, r2, #4
 8004efa:	430a      	orrs	r2, r1
 8004efc:	4920      	ldr	r1, [pc, #128]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	614b      	str	r3, [r1, #20]
 8004f02:	e014      	b.n	8004f2e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f04:	4b1e      	ldr	r3, [pc, #120]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6892      	ldr	r2, [r2, #8]
 8004f10:	0211      	lsls	r1, r2, #8
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6952      	ldr	r2, [r2, #20]
 8004f16:	0852      	lsrs	r2, r2, #1
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0652      	lsls	r2, r2, #25
 8004f1c:	4311      	orrs	r1, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6852      	ldr	r2, [r2, #4]
 8004f22:	3a01      	subs	r2, #1
 8004f24:	0112      	lsls	r2, r2, #4
 8004f26:	430a      	orrs	r2, r1
 8004f28:	4915      	ldr	r1, [pc, #84]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3a:	f7fd f9ef 	bl	800231c <HAL_GetTick>
 8004f3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f40:	e009      	b.n	8004f56 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f42:	f7fd f9eb 	bl	800231c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d902      	bls.n	8004f56 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	73fb      	strb	r3, [r7, #15]
          break;
 8004f54:	e005      	b.n	8004f62 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ef      	beq.n	8004f42 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d106      	bne.n	8004f76 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	4903      	ldr	r1, [pc, #12]	; (8004f80 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40021000 	.word	0x40021000
 8004f84:	07ff800f 	.word	0x07ff800f
 8004f88:	ff9f800f 	.word	0xff9f800f
 8004f8c:	f9ff800f 	.word	0xf9ff800f

08004f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e049      	b.n	8005036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f841 	bl	800503e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 f9f8 	bl	80053c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d001      	beq.n	800506c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e04f      	b.n	800510c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a23      	ldr	r2, [pc, #140]	; (8005118 <HAL_TIM_Base_Start_IT+0xc4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01d      	beq.n	80050ca <HAL_TIM_Base_Start_IT+0x76>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005096:	d018      	beq.n	80050ca <HAL_TIM_Base_Start_IT+0x76>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_TIM_Base_Start_IT+0xc8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <HAL_TIM_Base_Start_IT+0x76>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_TIM_Base_Start_IT+0xcc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <HAL_TIM_Base_Start_IT+0x76>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <HAL_TIM_Base_Start_IT+0xd0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d009      	beq.n	80050ca <HAL_TIM_Base_Start_IT+0x76>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <HAL_TIM_Base_Start_IT+0xd4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_TIM_Base_Start_IT+0x76>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a19      	ldr	r2, [pc, #100]	; (800512c <HAL_TIM_Base_Start_IT+0xd8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d115      	bne.n	80050f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <HAL_TIM_Base_Start_IT+0xdc>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b06      	cmp	r3, #6
 80050da:	d015      	beq.n	8005108 <HAL_TIM_Base_Start_IT+0xb4>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e2:	d011      	beq.n	8005108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	e008      	b.n	8005108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e000      	b.n	800510a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005108:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40013400 	.word	0x40013400
 800512c:	40014000 	.word	0x40014000
 8005130:	00010007 	.word	0x00010007

08005134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b02      	cmp	r3, #2
 8005148:	d122      	bne.n	8005190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b02      	cmp	r3, #2
 8005156:	d11b      	bne.n	8005190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0202 	mvn.w	r2, #2
 8005160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f905 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 800517c:	e005      	b.n	800518a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8f7 	bl	8005372 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f908 	bl	800539a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b04      	cmp	r3, #4
 800519c:	d122      	bne.n	80051e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d11b      	bne.n	80051e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0204 	mvn.w	r2, #4
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f8db 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8cd 	bl	8005372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8de 	bl	800539a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0208 	mvn.w	r2, #8
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2204      	movs	r2, #4
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f8b1 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f8a3 	bl	8005372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f8b4 	bl	800539a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b10      	cmp	r3, #16
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b10      	cmp	r3, #16
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0210 	mvn.w	r2, #16
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2208      	movs	r2, #8
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f887 	bl	8005386 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f879 	bl	8005372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f88a 	bl	800539a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b01      	cmp	r3, #1
 8005298:	d10e      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0201 	mvn.w	r2, #1
 80052b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fc fb9a 	bl	80019ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	2b80      	cmp	r3, #128	; 0x80
 80052c4:	d10e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b80      	cmp	r3, #128	; 0x80
 80052d2:	d107      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f914 	bl	800550c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d107      	bne.n	8005312 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f907 	bl	8005520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d10e      	bne.n	800533e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d107      	bne.n	800533e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f838 	bl	80053ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b20      	cmp	r3, #32
 800534a:	d10e      	bne.n	800536a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d107      	bne.n	800536a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0220 	mvn.w	r2, #32
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f8c7 	bl	80054f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a40      	ldr	r2, [pc, #256]	; (80054d8 <TIM_Base_SetConfig+0x114>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d013      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e2:	d00f      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3d      	ldr	r2, [pc, #244]	; (80054dc <TIM_Base_SetConfig+0x118>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a3c      	ldr	r2, [pc, #240]	; (80054e0 <TIM_Base_SetConfig+0x11c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3b      	ldr	r2, [pc, #236]	; (80054e4 <TIM_Base_SetConfig+0x120>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3a      	ldr	r2, [pc, #232]	; (80054e8 <TIM_Base_SetConfig+0x124>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d108      	bne.n	8005416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <TIM_Base_SetConfig+0x114>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01f      	beq.n	800545e <TIM_Base_SetConfig+0x9a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d01b      	beq.n	800545e <TIM_Base_SetConfig+0x9a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2c      	ldr	r2, [pc, #176]	; (80054dc <TIM_Base_SetConfig+0x118>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d017      	beq.n	800545e <TIM_Base_SetConfig+0x9a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2b      	ldr	r2, [pc, #172]	; (80054e0 <TIM_Base_SetConfig+0x11c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <TIM_Base_SetConfig+0x9a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2a      	ldr	r2, [pc, #168]	; (80054e4 <TIM_Base_SetConfig+0x120>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00f      	beq.n	800545e <TIM_Base_SetConfig+0x9a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <TIM_Base_SetConfig+0x124>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00b      	beq.n	800545e <TIM_Base_SetConfig+0x9a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a28      	ldr	r2, [pc, #160]	; (80054ec <TIM_Base_SetConfig+0x128>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <TIM_Base_SetConfig+0x9a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a27      	ldr	r2, [pc, #156]	; (80054f0 <TIM_Base_SetConfig+0x12c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_Base_SetConfig+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a26      	ldr	r2, [pc, #152]	; (80054f4 <TIM_Base_SetConfig+0x130>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d108      	bne.n	8005470 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a10      	ldr	r2, [pc, #64]	; (80054d8 <TIM_Base_SetConfig+0x114>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <TIM_Base_SetConfig+0xf8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a12      	ldr	r2, [pc, #72]	; (80054e8 <TIM_Base_SetConfig+0x124>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_Base_SetConfig+0xf8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a11      	ldr	r2, [pc, #68]	; (80054ec <TIM_Base_SetConfig+0x128>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_Base_SetConfig+0xf8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a10      	ldr	r2, [pc, #64]	; (80054f0 <TIM_Base_SetConfig+0x12c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_Base_SetConfig+0xf8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a0f      	ldr	r2, [pc, #60]	; (80054f4 <TIM_Base_SetConfig+0x130>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d103      	bne.n	80054c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	615a      	str	r2, [r3, #20]
}
 80054ca:	bf00      	nop
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40012c00 	.word	0x40012c00
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40000c00 	.word	0x40000c00
 80054e8:	40013400 	.word	0x40013400
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40014400 	.word	0x40014400
 80054f4:	40014800 	.word	0x40014800

080054f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e042      	b.n	80055cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fc fd3f 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2224      	movs	r2, #36	; 0x24
 8005562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fc52 	bl	8005e20 <UART_SetConfig>
 800557c:	4603      	mov	r3, r0
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e022      	b.n	80055cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 ff18 	bl	80063c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 ff9f 	bl	8006508 <UART_CheckIdleState>
 80055ca:	4603      	mov	r3, r0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	f040 8084 	bne.w	80056f8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_UART_Transmit+0x28>
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e07c      	b.n	80056fa <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_UART_Transmit+0x3a>
 800560a:	2302      	movs	r3, #2
 800560c:	e075      	b.n	80056fa <HAL_UART_Transmit+0x126>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2221      	movs	r2, #33	; 0x21
 8005622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005626:	f7fc fe79 	bl	800231c <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005644:	d108      	bne.n	8005658 <HAL_UART_Transmit+0x84>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e003      	b.n	8005660 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005668:	e02d      	b.n	80056c6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2200      	movs	r2, #0
 8005672:	2180      	movs	r1, #128	; 0x80
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 ff8f 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e03a      	b.n	80056fa <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005696:	b292      	uxth	r2, r2
 8005698:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3302      	adds	r3, #2
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e008      	b.n	80056b4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	b292      	uxth	r2, r2
 80056ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	3301      	adds	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1cb      	bne.n	800566a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2200      	movs	r2, #0
 80056da:	2140      	movs	r1, #64	; 0x40
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 ff5b 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e006      	b.n	80056fa <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005718:	2b20      	cmp	r3, #32
 800571a:	d168      	bne.n	80057ee <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_UART_Transmit_IT+0x24>
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e061      	b.n	80057f0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_UART_Transmit_IT+0x36>
 8005736:	2302      	movs	r3, #2
 8005738:	e05a      	b.n	80057f0 <HAL_UART_Transmit_IT+0xec>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2221      	movs	r2, #33	; 0x21
 800576a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005776:	d11c      	bne.n	80057b2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005780:	d107      	bne.n	8005792 <HAL_UART_Transmit_IT+0x8e>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <HAL_UART_Transmit_IT+0xf8>)
 800578e:	671a      	str	r2, [r3, #112]	; 0x70
 8005790:	e002      	b.n	8005798 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <HAL_UART_Transmit_IT+0xfc>)
 8005796:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80057ae:	609a      	str	r2, [r3, #8]
 80057b0:	e01b      	b.n	80057ea <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	d107      	bne.n	80057cc <HAL_UART_Transmit_IT+0xc8>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4a0f      	ldr	r2, [pc, #60]	; (8005804 <HAL_UART_Transmit_IT+0x100>)
 80057c8:	671a      	str	r2, [r3, #112]	; 0x70
 80057ca:	e002      	b.n	80057d2 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a0e      	ldr	r2, [pc, #56]	; (8005808 <HAL_UART_Transmit_IT+0x104>)
 80057d0:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057e8:	601a      	str	r2, [r3, #0]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e000      	b.n	80057f0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	080069dd 	.word	0x080069dd
 8005800:	08006941 	.word	0x08006941
 8005804:	080068c3 	.word	0x080068c3
 8005808:	0800684d 	.word	0x0800684d

0800580c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005820:	2b20      	cmp	r3, #32
 8005822:	f040 80bc 	bne.w	800599e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_Receive_IT+0x26>
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0b4      	b.n	80059a0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_UART_Receive_IT+0x38>
 8005840:	2302      	movs	r3, #2
 8005842:	e0ad      	b.n	80059a0 <HAL_UART_Receive_IT+0x194>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	88fa      	ldrh	r2, [r7, #6]
 800585e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005870:	d10e      	bne.n	8005890 <HAL_UART_Receive_IT+0x84>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d105      	bne.n	8005886 <HAL_UART_Receive_IT+0x7a>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005880:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005884:	e02d      	b.n	80058e2 <HAL_UART_Receive_IT+0xd6>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	22ff      	movs	r2, #255	; 0xff
 800588a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800588e:	e028      	b.n	80058e2 <HAL_UART_Receive_IT+0xd6>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10d      	bne.n	80058b4 <HAL_UART_Receive_IT+0xa8>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <HAL_UART_Receive_IT+0x9e>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	22ff      	movs	r2, #255	; 0xff
 80058a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058a8:	e01b      	b.n	80058e2 <HAL_UART_Receive_IT+0xd6>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	227f      	movs	r2, #127	; 0x7f
 80058ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058b2:	e016      	b.n	80058e2 <HAL_UART_Receive_IT+0xd6>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058bc:	d10d      	bne.n	80058da <HAL_UART_Receive_IT+0xce>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <HAL_UART_Receive_IT+0xc4>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	227f      	movs	r2, #127	; 0x7f
 80058ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058ce:	e008      	b.n	80058e2 <HAL_UART_Receive_IT+0xd6>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	223f      	movs	r2, #63	; 0x3f
 80058d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058d8:	e003      	b.n	80058e2 <HAL_UART_Receive_IT+0xd6>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2222      	movs	r2, #34	; 0x22
 80058ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590a:	d12a      	bne.n	8005962 <HAL_UART_Receive_IT+0x156>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005912:	88fa      	ldrh	r2, [r7, #6]
 8005914:	429a      	cmp	r2, r3
 8005916:	d324      	bcc.n	8005962 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005920:	d107      	bne.n	8005932 <HAL_UART_Receive_IT+0x126>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <HAL_UART_Receive_IT+0x1a0>)
 800592e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005930:	e002      	b.n	8005938 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <HAL_UART_Receive_IT+0x1a4>)
 8005936:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	e01b      	b.n	800599a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596a:	d107      	bne.n	800597c <HAL_UART_Receive_IT+0x170>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d103      	bne.n	800597c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a0f      	ldr	r2, [pc, #60]	; (80059b4 <HAL_UART_Receive_IT+0x1a8>)
 8005978:	66da      	str	r2, [r3, #108]	; 0x6c
 800597a:	e002      	b.n	8005982 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a0e      	ldr	r2, [pc, #56]	; (80059b8 <HAL_UART_Receive_IT+0x1ac>)
 8005980:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005998:	601a      	str	r2, [r3, #0]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	08006d1d 	.word	0x08006d1d
 80059b0:	08006c11 	.word	0x08006c11
 80059b4:	08006b63 	.word	0x08006b63
 80059b8:	08006ab5 	.word	0x08006ab5

080059bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d170      	bne.n	8005ab6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Receive_DMA+0x24>
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e069      	b.n	8005ab8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Receive_DMA+0x36>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e062      	b.n	8005ab8 <HAL_UART_Receive_DMA+0xfc>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2222      	movs	r2, #34	; 0x22
 8005a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d02c      	beq.n	8005a7a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a24:	4a26      	ldr	r2, [pc, #152]	; (8005ac0 <HAL_UART_Receive_DMA+0x104>)
 8005a26:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a2c:	4a25      	ldr	r2, [pc, #148]	; (8005ac4 <HAL_UART_Receive_DMA+0x108>)
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a34:	4a24      	ldr	r2, [pc, #144]	; (8005ac8 <HAL_UART_Receive_DMA+0x10c>)
 8005a36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3324      	adds	r3, #36	; 0x24
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a50:	461a      	mov	r2, r3
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	f7fc fe1a 	bl	800268c <HAL_DMA_Start_IT>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00d      	beq.n	8005a7a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2210      	movs	r2, #16
 8005a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e01e      	b.n	8005ab8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a90:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
  }
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	0800671b 	.word	0x0800671b
 8005ac4:	08006785 	.word	0x08006785
 8005ac8:	080067a1 	.word	0x080067a1

08005acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	f640 030f 	movw	r3, #2063	; 0x80f
 8005af2:	4013      	ands	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d118      	bne.n	8005b2e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d013      	beq.n	8005b2e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8145 	beq.w	8005dae <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
      }
      return;
 8005b2c:	e13f      	b.n	8005dae <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80e8 	beq.w	8005d06 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4ba1      	ldr	r3, [pc, #644]	; (8005dc0 <HAL_UART_IRQHandler+0x2f4>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4ba0      	ldr	r3, [pc, #640]	; (8005dc4 <HAL_UART_IRQHandler+0x2f8>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80dd 	beq.w	8005d06 <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_UART_IRQHandler+0xac>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2201      	movs	r2, #1
 8005b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6e:	f043 0201 	orr.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d010      	beq.n	8005ba4 <HAL_UART_IRQHandler+0xd8>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2202      	movs	r2, #2
 8005b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	f043 0204 	orr.w	r2, r3, #4
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d010      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x104>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc6:	f043 0202 	orr.w	r2, r3, #2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d015      	beq.n	8005c06 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4b76      	ldr	r3, [pc, #472]	; (8005dc0 <HAL_UART_IRQHandler+0x2f4>)
 8005be8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f043 0208 	orr.w	r2, r3, #8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d011      	beq.n	8005c34 <HAL_UART_IRQHandler+0x168>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	f043 0220 	orr.w	r2, r3, #32
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80b9 	beq.w	8005db2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d011      	beq.n	8005c6e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c74:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d004      	beq.n	8005c8e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d031      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fd20 	bl	80066d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d123      	bne.n	8005cea <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d013      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cbe:	4a42      	ldr	r2, [pc, #264]	; (8005dc8 <HAL_UART_IRQHandler+0x2fc>)
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fc fd5b 	bl	8002782 <HAL_DMA_Abort_IT>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d017      	beq.n	8005d02 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	e00f      	b.n	8005d02 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f87c 	bl	8005de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	e00b      	b.n	8005d02 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f878 	bl	8005de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	e007      	b.n	8005d02 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f874 	bl	8005de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005d00:	e057      	b.n	8005db2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d02:	bf00      	nop
    return;
 8005d04:	e055      	b.n	8005db2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <HAL_UART_IRQHandler+0x260>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 f87f 	bl	8006e28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d2a:	e045      	b.n	8005db8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d012      	beq.n	8005d5c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d031      	beq.n	8005db6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
    }
    return;
 8005d5a:	e02c      	b.n	8005db6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_UART_IRQHandler+0x2ac>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fe85 	bl	8006a80 <UART_EndTransmit_IT>
    return;
 8005d76:	e01f      	b.n	8005db8 <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d008      	beq.n	8005d94 <HAL_UART_IRQHandler+0x2c8>
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f001 f85f 	bl	8006e50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d92:	e011      	b.n	8005db8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00c      	beq.n	8005db8 <HAL_UART_IRQHandler+0x2ec>
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da09      	bge.n	8005db8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 f849 	bl	8006e3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005daa:	bf00      	nop
 8005dac:	e004      	b.n	8005db8 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005db6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	10000001 	.word	0x10000001
 8005dc4:	04000120 	.word	0x04000120
 8005dc8:	08006821 	.word	0x08006821

08005dcc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e02:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4313      	orrs	r3, r2
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005e24:	b088      	sub	sp, #32
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4bb1      	ldr	r3, [pc, #708]	; (800611c <UART_SetConfig+0x2fc>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	69f9      	ldr	r1, [r7, #28]
 8005e60:	430b      	orrs	r3, r1
 8005e62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4aa6      	ldr	r2, [pc, #664]	; (8006120 <UART_SetConfig+0x300>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005e9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	69f9      	ldr	r1, [r7, #28]
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	f023 010f 	bic.w	r1, r3, #15
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a97      	ldr	r2, [pc, #604]	; (8006124 <UART_SetConfig+0x304>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d121      	bne.n	8005f10 <UART_SetConfig+0xf0>
 8005ecc:	4b96      	ldr	r3, [pc, #600]	; (8006128 <UART_SetConfig+0x308>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d816      	bhi.n	8005f08 <UART_SetConfig+0xe8>
 8005eda:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <UART_SetConfig+0xc0>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005ef1 	.word	0x08005ef1
 8005ee4:	08005efd 	.word	0x08005efd
 8005ee8:	08005ef7 	.word	0x08005ef7
 8005eec:	08005f03 	.word	0x08005f03
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	76fb      	strb	r3, [r7, #27]
 8005ef4:	e0e8      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	76fb      	strb	r3, [r7, #27]
 8005efa:	e0e5      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005efc:	2304      	movs	r3, #4
 8005efe:	76fb      	strb	r3, [r7, #27]
 8005f00:	e0e2      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005f02:	2308      	movs	r3, #8
 8005f04:	76fb      	strb	r3, [r7, #27]
 8005f06:	e0df      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	76fb      	strb	r3, [r7, #27]
 8005f0c:	bf00      	nop
 8005f0e:	e0db      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a85      	ldr	r2, [pc, #532]	; (800612c <UART_SetConfig+0x30c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d134      	bne.n	8005f84 <UART_SetConfig+0x164>
 8005f1a:	4b83      	ldr	r3, [pc, #524]	; (8006128 <UART_SetConfig+0x308>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b0c      	cmp	r3, #12
 8005f26:	d829      	bhi.n	8005f7c <UART_SetConfig+0x15c>
 8005f28:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <UART_SetConfig+0x110>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f65 	.word	0x08005f65
 8005f34:	08005f7d 	.word	0x08005f7d
 8005f38:	08005f7d 	.word	0x08005f7d
 8005f3c:	08005f7d 	.word	0x08005f7d
 8005f40:	08005f71 	.word	0x08005f71
 8005f44:	08005f7d 	.word	0x08005f7d
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08005f7d 	.word	0x08005f7d
 8005f50:	08005f6b 	.word	0x08005f6b
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f7d 	.word	0x08005f7d
 8005f60:	08005f77 	.word	0x08005f77
 8005f64:	2300      	movs	r3, #0
 8005f66:	76fb      	strb	r3, [r7, #27]
 8005f68:	e0ae      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	76fb      	strb	r3, [r7, #27]
 8005f6e:	e0ab      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005f70:	2304      	movs	r3, #4
 8005f72:	76fb      	strb	r3, [r7, #27]
 8005f74:	e0a8      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005f76:	2308      	movs	r3, #8
 8005f78:	76fb      	strb	r3, [r7, #27]
 8005f7a:	e0a5      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	76fb      	strb	r3, [r7, #27]
 8005f80:	bf00      	nop
 8005f82:	e0a1      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a69      	ldr	r2, [pc, #420]	; (8006130 <UART_SetConfig+0x310>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d120      	bne.n	8005fd0 <UART_SetConfig+0x1b0>
 8005f8e:	4b66      	ldr	r3, [pc, #408]	; (8006128 <UART_SetConfig+0x308>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f98:	2b10      	cmp	r3, #16
 8005f9a:	d00f      	beq.n	8005fbc <UART_SetConfig+0x19c>
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d802      	bhi.n	8005fa6 <UART_SetConfig+0x186>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <UART_SetConfig+0x190>
 8005fa4:	e010      	b.n	8005fc8 <UART_SetConfig+0x1a8>
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d005      	beq.n	8005fb6 <UART_SetConfig+0x196>
 8005faa:	2b30      	cmp	r3, #48	; 0x30
 8005fac:	d009      	beq.n	8005fc2 <UART_SetConfig+0x1a2>
 8005fae:	e00b      	b.n	8005fc8 <UART_SetConfig+0x1a8>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	76fb      	strb	r3, [r7, #27]
 8005fb4:	e088      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	76fb      	strb	r3, [r7, #27]
 8005fba:	e085      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	76fb      	strb	r3, [r7, #27]
 8005fc0:	e082      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	76fb      	strb	r3, [r7, #27]
 8005fc6:	e07f      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	76fb      	strb	r3, [r7, #27]
 8005fcc:	bf00      	nop
 8005fce:	e07b      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a57      	ldr	r2, [pc, #348]	; (8006134 <UART_SetConfig+0x314>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d120      	bne.n	800601c <UART_SetConfig+0x1fc>
 8005fda:	4b53      	ldr	r3, [pc, #332]	; (8006128 <UART_SetConfig+0x308>)
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d00f      	beq.n	8006008 <UART_SetConfig+0x1e8>
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d802      	bhi.n	8005ff2 <UART_SetConfig+0x1d2>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <UART_SetConfig+0x1dc>
 8005ff0:	e010      	b.n	8006014 <UART_SetConfig+0x1f4>
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d005      	beq.n	8006002 <UART_SetConfig+0x1e2>
 8005ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ff8:	d009      	beq.n	800600e <UART_SetConfig+0x1ee>
 8005ffa:	e00b      	b.n	8006014 <UART_SetConfig+0x1f4>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	76fb      	strb	r3, [r7, #27]
 8006000:	e062      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8006002:	2302      	movs	r3, #2
 8006004:	76fb      	strb	r3, [r7, #27]
 8006006:	e05f      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8006008:	2304      	movs	r3, #4
 800600a:	76fb      	strb	r3, [r7, #27]
 800600c:	e05c      	b.n	80060c8 <UART_SetConfig+0x2a8>
 800600e:	2308      	movs	r3, #8
 8006010:	76fb      	strb	r3, [r7, #27]
 8006012:	e059      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8006014:	2310      	movs	r3, #16
 8006016:	76fb      	strb	r3, [r7, #27]
 8006018:	bf00      	nop
 800601a:	e055      	b.n	80060c8 <UART_SetConfig+0x2a8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a45      	ldr	r2, [pc, #276]	; (8006138 <UART_SetConfig+0x318>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d124      	bne.n	8006070 <UART_SetConfig+0x250>
 8006026:	4b40      	ldr	r3, [pc, #256]	; (8006128 <UART_SetConfig+0x308>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006034:	d012      	beq.n	800605c <UART_SetConfig+0x23c>
 8006036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800603a:	d802      	bhi.n	8006042 <UART_SetConfig+0x222>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <UART_SetConfig+0x230>
 8006040:	e012      	b.n	8006068 <UART_SetConfig+0x248>
 8006042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006046:	d006      	beq.n	8006056 <UART_SetConfig+0x236>
 8006048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800604c:	d009      	beq.n	8006062 <UART_SetConfig+0x242>
 800604e:	e00b      	b.n	8006068 <UART_SetConfig+0x248>
 8006050:	2300      	movs	r3, #0
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	e038      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8006056:	2302      	movs	r3, #2
 8006058:	76fb      	strb	r3, [r7, #27]
 800605a:	e035      	b.n	80060c8 <UART_SetConfig+0x2a8>
 800605c:	2304      	movs	r3, #4
 800605e:	76fb      	strb	r3, [r7, #27]
 8006060:	e032      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8006062:	2308      	movs	r3, #8
 8006064:	76fb      	strb	r3, [r7, #27]
 8006066:	e02f      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8006068:	2310      	movs	r3, #16
 800606a:	76fb      	strb	r3, [r7, #27]
 800606c:	bf00      	nop
 800606e:	e02b      	b.n	80060c8 <UART_SetConfig+0x2a8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <UART_SetConfig+0x300>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d124      	bne.n	80060c4 <UART_SetConfig+0x2a4>
 800607a:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <UART_SetConfig+0x308>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006088:	d012      	beq.n	80060b0 <UART_SetConfig+0x290>
 800608a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608e:	d802      	bhi.n	8006096 <UART_SetConfig+0x276>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <UART_SetConfig+0x284>
 8006094:	e012      	b.n	80060bc <UART_SetConfig+0x29c>
 8006096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609a:	d006      	beq.n	80060aa <UART_SetConfig+0x28a>
 800609c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060a0:	d009      	beq.n	80060b6 <UART_SetConfig+0x296>
 80060a2:	e00b      	b.n	80060bc <UART_SetConfig+0x29c>
 80060a4:	2300      	movs	r3, #0
 80060a6:	76fb      	strb	r3, [r7, #27]
 80060a8:	e00e      	b.n	80060c8 <UART_SetConfig+0x2a8>
 80060aa:	2302      	movs	r3, #2
 80060ac:	76fb      	strb	r3, [r7, #27]
 80060ae:	e00b      	b.n	80060c8 <UART_SetConfig+0x2a8>
 80060b0:	2304      	movs	r3, #4
 80060b2:	76fb      	strb	r3, [r7, #27]
 80060b4:	e008      	b.n	80060c8 <UART_SetConfig+0x2a8>
 80060b6:	2308      	movs	r3, #8
 80060b8:	76fb      	strb	r3, [r7, #27]
 80060ba:	e005      	b.n	80060c8 <UART_SetConfig+0x2a8>
 80060bc:	2310      	movs	r3, #16
 80060be:	76fb      	strb	r3, [r7, #27]
 80060c0:	bf00      	nop
 80060c2:	e001      	b.n	80060c8 <UART_SetConfig+0x2a8>
 80060c4:	2310      	movs	r3, #16
 80060c6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a14      	ldr	r2, [pc, #80]	; (8006120 <UART_SetConfig+0x300>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	f040 80a1 	bne.w	8006216 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060d4:	7efb      	ldrb	r3, [r7, #27]
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d836      	bhi.n	8006148 <UART_SetConfig+0x328>
 80060da:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <UART_SetConfig+0x2c0>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	08006105 	.word	0x08006105
 80060e4:	08006149 	.word	0x08006149
 80060e8:	0800610d 	.word	0x0800610d
 80060ec:	08006149 	.word	0x08006149
 80060f0:	08006113 	.word	0x08006113
 80060f4:	08006149 	.word	0x08006149
 80060f8:	08006149 	.word	0x08006149
 80060fc:	08006149 	.word	0x08006149
 8006100:	08006141 	.word	0x08006141
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006104:	f7fe f91c 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8006108:	6178      	str	r0, [r7, #20]
        break;
 800610a:	e022      	b.n	8006152 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800610c:	4b0b      	ldr	r3, [pc, #44]	; (800613c <UART_SetConfig+0x31c>)
 800610e:	617b      	str	r3, [r7, #20]
        break;
 8006110:	e01f      	b.n	8006152 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006112:	f7fe f87f 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8006116:	6178      	str	r0, [r7, #20]
        break;
 8006118:	e01b      	b.n	8006152 <UART_SetConfig+0x332>
 800611a:	bf00      	nop
 800611c:	cfff69f3 	.word	0xcfff69f3
 8006120:	40008000 	.word	0x40008000
 8006124:	40013800 	.word	0x40013800
 8006128:	40021000 	.word	0x40021000
 800612c:	40004400 	.word	0x40004400
 8006130:	40004800 	.word	0x40004800
 8006134:	40004c00 	.word	0x40004c00
 8006138:	40005000 	.word	0x40005000
 800613c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006144:	617b      	str	r3, [r7, #20]
        break;
 8006146:	e004      	b.n	8006152 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	76bb      	strb	r3, [r7, #26]
        break;
 8006150:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 811d 	beq.w	8006394 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	4a97      	ldr	r2, [pc, #604]	; (80063bc <UART_SetConfig+0x59c>)
 8006160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006164:	461a      	mov	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	fbb3 f3f2 	udiv	r3, r3, r2
 800616c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	429a      	cmp	r2, r3
 800617c:	d305      	bcc.n	800618a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	429a      	cmp	r2, r3
 8006188:	d902      	bls.n	8006190 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	76bb      	strb	r3, [r7, #26]
 800618e:	e101      	b.n	8006394 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4618      	mov	r0, r3
 8006194:	f04f 0100 	mov.w	r1, #0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	4a87      	ldr	r2, [pc, #540]	; (80063bc <UART_SetConfig+0x59c>)
 800619e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f04f 0400 	mov.w	r4, #0
 80061a8:	461a      	mov	r2, r3
 80061aa:	4623      	mov	r3, r4
 80061ac:	f7fa fd24 	bl	8000bf8 <__aeabi_uldivmod>
 80061b0:	4603      	mov	r3, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	4619      	mov	r1, r3
 80061b6:	4622      	mov	r2, r4
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	f04f 0400 	mov.w	r4, #0
 80061c0:	0214      	lsls	r4, r2, #8
 80061c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80061c6:	020b      	lsls	r3, r1, #8
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6852      	ldr	r2, [r2, #4]
 80061cc:	0852      	lsrs	r2, r2, #1
 80061ce:	4611      	mov	r1, r2
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	eb13 0b01 	adds.w	fp, r3, r1
 80061d8:	eb44 0c02 	adc.w	ip, r4, r2
 80061dc:	4658      	mov	r0, fp
 80061de:	4661      	mov	r1, ip
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f04f 0400 	mov.w	r4, #0
 80061e8:	461a      	mov	r2, r3
 80061ea:	4623      	mov	r3, r4
 80061ec:	f7fa fd04 	bl	8000bf8 <__aeabi_uldivmod>
 80061f0:	4603      	mov	r3, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061fc:	d308      	bcc.n	8006210 <UART_SetConfig+0x3f0>
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006204:	d204      	bcs.n	8006210 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	60da      	str	r2, [r3, #12]
 800620e:	e0c1      	b.n	8006394 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	76bb      	strb	r3, [r7, #26]
 8006214:	e0be      	b.n	8006394 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621e:	d164      	bne.n	80062ea <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8006220:	7efb      	ldrb	r3, [r7, #27]
 8006222:	2b08      	cmp	r3, #8
 8006224:	d827      	bhi.n	8006276 <UART_SetConfig+0x456>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <UART_SetConfig+0x40c>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006251 	.word	0x08006251
 8006230:	08006259 	.word	0x08006259
 8006234:	08006261 	.word	0x08006261
 8006238:	08006277 	.word	0x08006277
 800623c:	08006267 	.word	0x08006267
 8006240:	08006277 	.word	0x08006277
 8006244:	08006277 	.word	0x08006277
 8006248:	08006277 	.word	0x08006277
 800624c:	0800626f 	.word	0x0800626f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006250:	f7fe f876 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8006254:	6178      	str	r0, [r7, #20]
        break;
 8006256:	e013      	b.n	8006280 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006258:	f7fe f888 	bl	800436c <HAL_RCC_GetPCLK2Freq>
 800625c:	6178      	str	r0, [r7, #20]
        break;
 800625e:	e00f      	b.n	8006280 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006260:	4b57      	ldr	r3, [pc, #348]	; (80063c0 <UART_SetConfig+0x5a0>)
 8006262:	617b      	str	r3, [r7, #20]
        break;
 8006264:	e00c      	b.n	8006280 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006266:	f7fd ffd5 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 800626a:	6178      	str	r0, [r7, #20]
        break;
 800626c:	e008      	b.n	8006280 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006272:	617b      	str	r3, [r7, #20]
        break;
 8006274:	e004      	b.n	8006280 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	76bb      	strb	r3, [r7, #26]
        break;
 800627e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8086 	beq.w	8006394 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	4a4b      	ldr	r2, [pc, #300]	; (80063bc <UART_SetConfig+0x59c>)
 800628e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006292:	461a      	mov	r2, r3
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	fbb3 f3f2 	udiv	r3, r3, r2
 800629a:	005a      	lsls	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	441a      	add	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b0f      	cmp	r3, #15
 80062b4:	d916      	bls.n	80062e4 <UART_SetConfig+0x4c4>
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062bc:	d212      	bcs.n	80062e4 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f023 030f 	bic.w	r3, r3, #15
 80062c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	89fb      	ldrh	r3, [r7, #14]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	89fa      	ldrh	r2, [r7, #14]
 80062e0:	60da      	str	r2, [r3, #12]
 80062e2:	e057      	b.n	8006394 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	76bb      	strb	r3, [r7, #26]
 80062e8:	e054      	b.n	8006394 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ea:	7efb      	ldrb	r3, [r7, #27]
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d828      	bhi.n	8006342 <UART_SetConfig+0x522>
 80062f0:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <UART_SetConfig+0x4d8>)
 80062f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f6:	bf00      	nop
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	08006325 	.word	0x08006325
 8006300:	0800632d 	.word	0x0800632d
 8006304:	08006343 	.word	0x08006343
 8006308:	08006333 	.word	0x08006333
 800630c:	08006343 	.word	0x08006343
 8006310:	08006343 	.word	0x08006343
 8006314:	08006343 	.word	0x08006343
 8006318:	0800633b 	.word	0x0800633b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800631c:	f7fe f810 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8006320:	6178      	str	r0, [r7, #20]
        break;
 8006322:	e013      	b.n	800634c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006324:	f7fe f822 	bl	800436c <HAL_RCC_GetPCLK2Freq>
 8006328:	6178      	str	r0, [r7, #20]
        break;
 800632a:	e00f      	b.n	800634c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800632c:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <UART_SetConfig+0x5a0>)
 800632e:	617b      	str	r3, [r7, #20]
        break;
 8006330:	e00c      	b.n	800634c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006332:	f7fd ff6f 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8006336:	6178      	str	r0, [r7, #20]
        break;
 8006338:	e008      	b.n	800634c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633e:	617b      	str	r3, [r7, #20]
        break;
 8006340:	e004      	b.n	800634c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	76bb      	strb	r3, [r7, #26]
        break;
 800634a:	bf00      	nop
    }

    if (pclk != 0U)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d020      	beq.n	8006394 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	4a19      	ldr	r2, [pc, #100]	; (80063bc <UART_SetConfig+0x59c>)
 8006358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800635c:	461a      	mov	r2, r3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	fbb3 f2f2 	udiv	r2, r3, r2
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	441a      	add	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	b29b      	uxth	r3, r3
 8006376:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b0f      	cmp	r3, #15
 800637c:	d908      	bls.n	8006390 <UART_SetConfig+0x570>
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006384:	d204      	bcs.n	8006390 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	60da      	str	r2, [r3, #12]
 800638e:	e001      	b.n	8006394 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80063b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80063bc:	0800b1b8 	.word	0x0800b1b8
 80063c0:	00f42400 	.word	0x00f42400

080063c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01a      	beq.n	80064da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064c2:	d10a      	bne.n	80064da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]
  }
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af02      	add	r7, sp, #8
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006518:	f7fb ff00 	bl	800231c <HAL_GetTick>
 800651c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b08      	cmp	r3, #8
 800652a:	d10e      	bne.n	800654a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800652c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f82c 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e022      	b.n	8006590 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b04      	cmp	r3, #4
 8006556:	d10e      	bne.n	8006576 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f816 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e00c      	b.n	8006590 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a8:	e062      	b.n	8006670 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d05e      	beq.n	8006670 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b2:	f7fb feb3 	bl	800231c <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11d      	bne.n	8006604 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065d6:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e045      	b.n	8006690 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	d02e      	beq.n	8006670 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800661c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006620:	d126      	bne.n	8006670 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800663a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e00f      	b.n	8006690 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69da      	ldr	r2, [r3, #28]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4013      	ands	r3, r2
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	429a      	cmp	r2, r3
 800668c:	d08d      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80066ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80066be:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066fa:	f023 0301 	bic.w	r3, r3, #1
 80066fe:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d11f      	bne.n	8006776 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800674c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7fa ff22 	bl	80015c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff fb1a 	bl	8005dcc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d109      	bne.n	80067e0 <UART_DMAError+0x40>
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b21      	cmp	r3, #33	; 0x21
 80067d0:	d106      	bne.n	80067e0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7ff ff5c 	bl	8006698 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	d109      	bne.n	8006802 <UART_DMAError+0x62>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b22      	cmp	r3, #34	; 0x22
 80067f2:	d106      	bne.n	8006802 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80067fc:	6978      	ldr	r0, [r7, #20]
 80067fe:	f7ff ff69 	bl	80066d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006808:	f043 0210 	orr.w	r2, r3, #16
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006812:	6978      	ldr	r0, [r7, #20]
 8006814:	f7ff fae4 	bl	8005de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006818:	bf00      	nop
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7ff face 	bl	8005de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006844:	bf00      	nop
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800685a:	2b21      	cmp	r3, #33	; 0x21
 800685c:	d12b      	bne.n	80068b6 <UART_TxISR_8BIT+0x6a>
  {
    if (huart->TxXferCount == 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d110      	bne.n	800688c <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006878:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006888:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800688a:	e014      	b.n	80068b6 <UART_TxISR_8BIT+0x6a>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	b292      	uxth	r2, r2
 8006898:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d0:	2b21      	cmp	r3, #33	; 0x21
 80068d2:	d12f      	bne.n	8006934 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d110      	bne.n	8006902 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ee:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068fe:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006900:	e018      	b.n	8006934 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006906:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006914:	b292      	uxth	r2, r2
 8006916:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	1c9a      	adds	r2, r3, #2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694e:	2b21      	cmp	r3, #33	; 0x21
 8006950:	d13e      	bne.n	80069d0 <UART_TxISR_8BIT_FIFOEN+0x90>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006958:	81fb      	strh	r3, [r7, #14]
 800695a:	e036      	b.n	80069ca <UART_TxISR_8BIT_FIFOEN+0x8a>
    {
      if (huart->TxXferCount == 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d111      	bne.n	800698c <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006976:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006986:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006988:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800698a:	e021      	b.n	80069d0 <UART_TxISR_8BIT_FIFOEN+0x90>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006996:	2b00      	cmp	r3, #0
 8006998:	d014      	beq.n	80069c4 <UART_TxISR_8BIT_FIFOEN+0x84>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699e:	781a      	ldrb	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	b292      	uxth	r2, r2
 80069a6:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80069c4:	89fb      	ldrh	r3, [r7, #14]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	81fb      	strh	r3, [r7, #14]
 80069ca:	89fb      	ldrh	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1c5      	bne.n	800695c <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ea:	2b21      	cmp	r3, #33	; 0x21
 80069ec:	d142      	bne.n	8006a74 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069f4:	81fb      	strh	r3, [r7, #14]
 80069f6:	e03a      	b.n	8006a6e <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d111      	bne.n	8006a28 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006a12:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a22:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006a24:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006a26:	e025      	b.n	8006a74 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d018      	beq.n	8006a68 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3a:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	881a      	ldrh	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a48:	b292      	uxth	r2, r2
 8006a4a:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a50:	1c9a      	adds	r2, r3, #2
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006a68:	89fb      	ldrh	r3, [r7, #14]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	81fb      	strh	r3, [r7, #14]
 8006a6e:	89fb      	ldrh	r3, [r7, #14]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1c1      	bne.n	80069f8 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8006a74:	bf00      	nop
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a96:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fa fdd6 	bl	8001658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ac2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aca:	2b22      	cmp	r3, #34	; 0x22
 8006acc:	d13b      	bne.n	8006b46 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ad4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ad6:	89bb      	ldrh	r3, [r7, #12]
 8006ad8:	b2d9      	uxtb	r1, r3
 8006ada:	89fb      	ldrh	r3, [r7, #14]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae2:	400a      	ands	r2, r1
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d124      	bne.n	8006b5a <UART_RxISR_8BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b1e:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fa fd3e 	bl	80015c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b44:	e009      	b.n	8006b5a <UART_RxISR_8BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	8b1b      	ldrh	r3, [r3, #24]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0208 	orr.w	r2, r2, #8
 8006b56:	b292      	uxth	r2, r2
 8006b58:	831a      	strh	r2, [r3, #24]
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b70:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b78:	2b22      	cmp	r3, #34	; 0x22
 8006b7a:	d13b      	bne.n	8006bf4 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b82:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b88:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b8a:	89ba      	ldrh	r2, [r7, #12]
 8006b8c:	89fb      	ldrh	r3, [r7, #14]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9a:	1c9a      	adds	r2, r3, #2
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d124      	bne.n	8006c08 <UART_RxISR_16BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bcc:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fa fce7 	bl	80015c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bf2:	e009      	b.n	8006c08 <UART_RxISR_16BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	8b1b      	ldrh	r3, [r3, #24]
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0208 	orr.w	r2, r2, #8
 8006c04:	b292      	uxth	r2, r2
 8006c06:	831a      	strh	r2, [r3, #24]
}
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c1e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c26:	2b22      	cmp	r3, #34	; 0x22
 8006c28:	d168      	bne.n	8006cfc <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c30:	81fb      	strh	r3, [r7, #14]
 8006c32:	e03f      	b.n	8006cb4 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c3a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c3c:	893b      	ldrh	r3, [r7, #8]
 8006c3e:	b2d9      	uxtb	r1, r3
 8006c40:	89bb      	ldrh	r3, [r7, #12]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c48:	400a      	ands	r2, r1
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d11b      	bne.n	8006cae <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c84:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c94:	f023 0301 	bic.w	r3, r3, #1
 8006c98:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7fa fc89 	bl	80015c0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006cae:	89fb      	ldrh	r3, [r7, #14]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	81fb      	strh	r3, [r7, #14]
 8006cb4:	89fb      	ldrh	r3, [r7, #14]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1bc      	bne.n	8006c34 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cc0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006cc2:	897b      	ldrh	r3, [r7, #10]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d023      	beq.n	8006d10 <UART_RxISR_8BIT_FIFOEN+0x100>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006cce:	897a      	ldrh	r2, [r7, #10]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d21d      	bcs.n	8006d10 <UART_RxISR_8BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006ce2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a0c      	ldr	r2, [pc, #48]	; (8006d18 <UART_RxISR_8BIT_FIFOEN+0x108>)
 8006ce8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0220 	orr.w	r2, r2, #32
 8006cf8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cfa:	e009      	b.n	8006d10 <UART_RxISR_8BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	8b1b      	ldrh	r3, [r3, #24]
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0208 	orr.w	r2, r2, #8
 8006d0c:	b292      	uxth	r2, r2
 8006d0e:	831a      	strh	r2, [r3, #24]
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	08006ab5 	.word	0x08006ab5

08006d1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d2a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d32:	2b22      	cmp	r3, #34	; 0x22
 8006d34:	d168      	bne.n	8006e08 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d3c:	82fb      	strh	r3, [r7, #22]
 8006d3e:	e03f      	b.n	8006dc0 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d46:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006d4e:	8a3a      	ldrh	r2, [r7, #16]
 8006d50:	8abb      	ldrh	r3, [r7, #20]
 8006d52:	4013      	ands	r3, r2
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5e:	1c9a      	adds	r2, r3, #2
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d11b      	bne.n	8006dba <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d90:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7fa fc03 	bl	80015c0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006dba:	8afb      	ldrh	r3, [r7, #22]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	82fb      	strh	r3, [r7, #22]
 8006dc0:	8afb      	ldrh	r3, [r7, #22]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1bc      	bne.n	8006d40 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dcc:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006dce:	8a7b      	ldrh	r3, [r7, #18]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d023      	beq.n	8006e1c <UART_RxISR_16BIT_FIFOEN+0x100>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006dda:	8a7a      	ldrh	r2, [r7, #18]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d21d      	bcs.n	8006e1c <UART_RxISR_16BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006dee:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a0c      	ldr	r2, [pc, #48]	; (8006e24 <UART_RxISR_16BIT_FIFOEN+0x108>)
 8006df4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0220 	orr.w	r2, r2, #32
 8006e04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e06:	e009      	b.n	8006e1c <UART_RxISR_16BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	8b1b      	ldrh	r3, [r3, #24]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0208 	orr.w	r2, r2, #8
 8006e18:	b292      	uxth	r2, r2
 8006e1a:	831a      	strh	r2, [r3, #24]
}
 8006e1c:	bf00      	nop
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	08006b63 	.word	0x08006b63

08006e28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_UARTEx_DisableFifoMode+0x16>
 8006e76:	2302      	movs	r3, #2
 8006e78:	e027      	b.n	8006eca <HAL_UARTEx_DisableFifoMode+0x66>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2224      	movs	r2, #36	; 0x24
 8006e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0201 	bic.w	r2, r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ea8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006eea:	2302      	movs	r3, #2
 8006eec:	e02d      	b.n	8006f4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2224      	movs	r2, #36	; 0x24
 8006efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f850 	bl	8006fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e02d      	b.n	8006fc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2224      	movs	r2, #36	; 0x24
 8006f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0201 	bic.w	r2, r2, #1
 8006f90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f812 	bl	8006fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b089      	sub	sp, #36	; 0x24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006fd8:	4a2f      	ldr	r2, [pc, #188]	; (8007098 <UARTEx_SetNbDataToProcess+0xc8>)
 8006fda:	f107 0314 	add.w	r3, r7, #20
 8006fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fe2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006fe6:	4a2d      	ldr	r2, [pc, #180]	; (800709c <UARTEx_SetNbDataToProcess+0xcc>)
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ff0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d108      	bne.n	800700e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800700c:	e03d      	b.n	800708a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800700e:	2308      	movs	r3, #8
 8007010:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007012:	2308      	movs	r3, #8
 8007014:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	0e5b      	lsrs	r3, r3, #25
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	0f5b      	lsrs	r3, r3, #29
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007036:	7fbb      	ldrb	r3, [r7, #30]
 8007038:	7f3a      	ldrb	r2, [r7, #28]
 800703a:	f107 0120 	add.w	r1, r7, #32
 800703e:	440a      	add	r2, r1
 8007040:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007044:	fb02 f303 	mul.w	r3, r2, r3
 8007048:	7f3a      	ldrb	r2, [r7, #28]
 800704a:	f107 0120 	add.w	r1, r7, #32
 800704e:	440a      	add	r2, r1
 8007050:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007054:	fb93 f3f2 	sdiv	r3, r3, r2
 8007058:	b29a      	uxth	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007060:	7ffb      	ldrb	r3, [r7, #31]
 8007062:	7f7a      	ldrb	r2, [r7, #29]
 8007064:	f107 0120 	add.w	r1, r7, #32
 8007068:	440a      	add	r2, r1
 800706a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800706e:	fb02 f303 	mul.w	r3, r2, r3
 8007072:	7f7a      	ldrb	r2, [r7, #29]
 8007074:	f107 0120 	add.w	r1, r7, #32
 8007078:	440a      	add	r2, r1
 800707a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800707e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007082:	b29a      	uxth	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800708a:	bf00      	nop
 800708c:	3724      	adds	r7, #36	; 0x24
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	0800b158 	.word	0x0800b158
 800709c:	0800b160 	.word	0x0800b160

080070a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070b2:	2b84      	cmp	r3, #132	; 0x84
 80070b4:	d005      	beq.n	80070c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	3303      	adds	r3, #3
 80070c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80070d4:	f000 fada 	bl	800768c <vTaskStartScheduler>
  
  return osOK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	bd80      	pop	{r7, pc}

080070de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e0:	b089      	sub	sp, #36	; 0x24
 80070e2:	af04      	add	r7, sp, #16
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d020      	beq.n	8007132 <osThreadCreate+0x54>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01c      	beq.n	8007132 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685c      	ldr	r4, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681d      	ldr	r5, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691e      	ldr	r6, [r3, #16]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff ffc8 	bl	80070a0 <makeFreeRtosPriority>
 8007110:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800711a:	9202      	str	r2, [sp, #8]
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	9100      	str	r1, [sp, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	4632      	mov	r2, r6
 8007124:	4629      	mov	r1, r5
 8007126:	4620      	mov	r0, r4
 8007128:	f000 f8ed 	bl	8007306 <xTaskCreateStatic>
 800712c:	4603      	mov	r3, r0
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	e01c      	b.n	800716c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685c      	ldr	r4, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800713e:	b29e      	uxth	r6, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff ffaa 	bl	80070a0 <makeFreeRtosPriority>
 800714c:	4602      	mov	r2, r0
 800714e:	f107 030c 	add.w	r3, r7, #12
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	9200      	str	r2, [sp, #0]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	4632      	mov	r2, r6
 800715a:	4629      	mov	r1, r5
 800715c:	4620      	mov	r0, r4
 800715e:	f000 f92c 	bl	80073ba <xTaskCreate>
 8007162:	4603      	mov	r3, r0
 8007164:	2b01      	cmp	r3, #1
 8007166:	d001      	beq.n	800716c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007168:	2300      	movs	r3, #0
 800716a:	e000      	b.n	800716e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800716c:	68fb      	ldr	r3, [r7, #12]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007176 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <osDelay+0x16>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	e000      	b.n	800718e <osDelay+0x18>
 800718c:	2301      	movs	r3, #1
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fa48 	bl	8007624 <vTaskDelay>
  
  return osOK;
 8007194:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f103 0208 	add.w	r2, r3, #8
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f04f 32ff 	mov.w	r2, #4294967295
 80071b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f103 0208 	add.w	r2, r3, #8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f103 0208 	add.w	r2, r3, #8
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007256:	d103      	bne.n	8007260 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e00c      	b.n	800727a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3308      	adds	r3, #8
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	e002      	b.n	800726e <vListInsert+0x2e>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	d2f6      	bcs.n	8007268 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
}
 80072a6:	bf00      	nop
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6892      	ldr	r2, [r2, #8]
 80072c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6852      	ldr	r2, [r2, #4]
 80072d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d103      	bne.n	80072e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	1e5a      	subs	r2, r3, #1
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007306:	b580      	push	{r7, lr}
 8007308:	b08e      	sub	sp, #56	; 0x38
 800730a:	af04      	add	r7, sp, #16
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
 8007312:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	623b      	str	r3, [r7, #32]
 800732c:	e7fe      	b.n	800732c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	2b00      	cmp	r3, #0
 8007332:	d109      	bne.n	8007348 <xTaskCreateStatic+0x42>
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	e7fe      	b.n	8007346 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007348:	2354      	movs	r3, #84	; 0x54
 800734a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b54      	cmp	r3, #84	; 0x54
 8007350:	d009      	beq.n	8007366 <xTaskCreateStatic+0x60>
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	e7fe      	b.n	8007364 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007366:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01e      	beq.n	80073ac <xTaskCreateStatic+0xa6>
 800736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01b      	beq.n	80073ac <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800737c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	2202      	movs	r2, #2
 8007382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007386:	2300      	movs	r3, #0
 8007388:	9303      	str	r3, [sp, #12]
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	9302      	str	r3, [sp, #8]
 800738e:	f107 0314 	add.w	r3, r7, #20
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 f850 	bl	8007444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073a6:	f000 f8d3 	bl	8007550 <prvAddNewTaskToReadyList>
 80073aa:	e001      	b.n	80073b0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073b0:	697b      	ldr	r3, [r7, #20]
	}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3728      	adds	r7, #40	; 0x28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b08c      	sub	sp, #48	; 0x30
 80073be:	af04      	add	r7, sp, #16
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	603b      	str	r3, [r7, #0]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 feb0 	bl	8008134 <pvPortMalloc>
 80073d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00e      	beq.n	80073fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073dc:	2054      	movs	r0, #84	; 0x54
 80073de:	f000 fea9 	bl	8008134 <pvPortMalloc>
 80073e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30
 80073f0:	e005      	b.n	80073fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073f2:	6978      	ldr	r0, [r7, #20]
 80073f4:	f000 ff60 	bl	80082b8 <vPortFree>
 80073f8:	e001      	b.n	80073fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d017      	beq.n	8007434 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800740c:	88fa      	ldrh	r2, [r7, #6]
 800740e:	2300      	movs	r3, #0
 8007410:	9303      	str	r3, [sp, #12]
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	9302      	str	r3, [sp, #8]
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f80e 	bl	8007444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007428:	69f8      	ldr	r0, [r7, #28]
 800742a:	f000 f891 	bl	8007550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800742e:	2301      	movs	r3, #1
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	e002      	b.n	800743a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007434:	f04f 33ff 	mov.w	r3, #4294967295
 8007438:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800743a:	69bb      	ldr	r3, [r7, #24]
	}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800745c:	3b01      	subs	r3, #1
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	f023 0307 	bic.w	r3, r3, #7
 800746a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	2b00      	cmp	r3, #0
 8007474:	d009      	beq.n	800748a <prvInitialiseNewTask+0x46>
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	e7fe      	b.n	8007488 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01f      	beq.n	80074d0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	e012      	b.n	80074bc <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	7819      	ldrb	r1, [r3, #0]
 800749e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	3334      	adds	r3, #52	; 0x34
 80074a6:	460a      	mov	r2, r1
 80074a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d006      	beq.n	80074c4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	3301      	adds	r3, #1
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	2b0f      	cmp	r3, #15
 80074c0:	d9e9      	bls.n	8007496 <prvInitialiseNewTask+0x52>
 80074c2:	e000      	b.n	80074c6 <prvInitialiseNewTask+0x82>
			{
				break;
 80074c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074ce:	e003      	b.n	80074d8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	2b06      	cmp	r3, #6
 80074dc:	d901      	bls.n	80074e2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074de:	2306      	movs	r3, #6
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	2200      	movs	r2, #0
 80074f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	3304      	adds	r3, #4
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff fe70 	bl	80071de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	3318      	adds	r3, #24
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff fe6b 	bl	80071de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	f1c3 0207 	rsb	r2, r3, #7
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	2200      	movs	r2, #0
 8007522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	69b8      	ldr	r0, [r7, #24]
 8007532:	f000 fbfd 	bl	8007d30 <pxPortInitialiseStack>
 8007536:	4602      	mov	r2, r0
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007546:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007548:	bf00      	nop
 800754a:	3720      	adds	r7, #32
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007558:	f000 fd10 	bl	8007f7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800755c:	4b2a      	ldr	r3, [pc, #168]	; (8007608 <prvAddNewTaskToReadyList+0xb8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3301      	adds	r3, #1
 8007562:	4a29      	ldr	r2, [pc, #164]	; (8007608 <prvAddNewTaskToReadyList+0xb8>)
 8007564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007566:	4b29      	ldr	r3, [pc, #164]	; (800760c <prvAddNewTaskToReadyList+0xbc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d109      	bne.n	8007582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800756e:	4a27      	ldr	r2, [pc, #156]	; (800760c <prvAddNewTaskToReadyList+0xbc>)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007574:	4b24      	ldr	r3, [pc, #144]	; (8007608 <prvAddNewTaskToReadyList+0xb8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d110      	bne.n	800759e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800757c:	f000 fab8 	bl	8007af0 <prvInitialiseTaskLists>
 8007580:	e00d      	b.n	800759e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007582:	4b23      	ldr	r3, [pc, #140]	; (8007610 <prvAddNewTaskToReadyList+0xc0>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800758a:	4b20      	ldr	r3, [pc, #128]	; (800760c <prvAddNewTaskToReadyList+0xbc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	429a      	cmp	r2, r3
 8007596:	d802      	bhi.n	800759e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007598:	4a1c      	ldr	r2, [pc, #112]	; (800760c <prvAddNewTaskToReadyList+0xbc>)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800759e:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <prvAddNewTaskToReadyList+0xc4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <prvAddNewTaskToReadyList+0xc4>)
 80075a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	2201      	movs	r2, #1
 80075ae:	409a      	lsls	r2, r3
 80075b0:	4b19      	ldr	r3, [pc, #100]	; (8007618 <prvAddNewTaskToReadyList+0xc8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	4a18      	ldr	r2, [pc, #96]	; (8007618 <prvAddNewTaskToReadyList+0xc8>)
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a15      	ldr	r2, [pc, #84]	; (800761c <prvAddNewTaskToReadyList+0xcc>)
 80075c8:	441a      	add	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7ff fe11 	bl	80071f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075d6:	f000 fcff 	bl	8007fd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075da:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <prvAddNewTaskToReadyList+0xc0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00e      	beq.n	8007600 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075e2:	4b0a      	ldr	r3, [pc, #40]	; (800760c <prvAddNewTaskToReadyList+0xbc>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d207      	bcs.n	8007600 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <prvAddNewTaskToReadyList+0xd0>)
 80075f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	2000056c 	.word	0x2000056c
 800760c:	2000046c 	.word	0x2000046c
 8007610:	20000578 	.word	0x20000578
 8007614:	20000588 	.word	0x20000588
 8007618:	20000574 	.word	0x20000574
 800761c:	20000470 	.word	0x20000470
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800762c:	2300      	movs	r3, #0
 800762e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d016      	beq.n	8007664 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <vTaskDelay+0x60>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <vTaskDelay+0x2e>
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60bb      	str	r3, [r7, #8]
 8007650:	e7fe      	b.n	8007650 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007652:	f000 f879 	bl	8007748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007656:	2100      	movs	r1, #0
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fb03 	bl	8007c64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800765e:	f000 f881 	bl	8007764 <xTaskResumeAll>
 8007662:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d107      	bne.n	800767a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800766a:	4b07      	ldr	r3, [pc, #28]	; (8007688 <vTaskDelay+0x64>)
 800766c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	20000594 	.word	0x20000594
 8007688:	e000ed04 	.word	0xe000ed04

0800768c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	; 0x28
 8007690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800769a:	463a      	mov	r2, r7
 800769c:	1d39      	adds	r1, r7, #4
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7f9 fd00 	bl	80010a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	9202      	str	r2, [sp, #8]
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	2300      	movs	r3, #0
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	2300      	movs	r3, #0
 80076b8:	460a      	mov	r2, r1
 80076ba:	491d      	ldr	r1, [pc, #116]	; (8007730 <vTaskStartScheduler+0xa4>)
 80076bc:	481d      	ldr	r0, [pc, #116]	; (8007734 <vTaskStartScheduler+0xa8>)
 80076be:	f7ff fe22 	bl	8007306 <xTaskCreateStatic>
 80076c2:	4602      	mov	r2, r0
 80076c4:	4b1c      	ldr	r3, [pc, #112]	; (8007738 <vTaskStartScheduler+0xac>)
 80076c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076c8:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <vTaskStartScheduler+0xac>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076d0:	2301      	movs	r3, #1
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	e001      	b.n	80076da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d115      	bne.n	800770c <vTaskStartScheduler+0x80>
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <vTaskStartScheduler+0xb0>)
 80076f4:	f04f 32ff 	mov.w	r2, #4294967295
 80076f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076fa:	4b11      	ldr	r3, [pc, #68]	; (8007740 <vTaskStartScheduler+0xb4>)
 80076fc:	2201      	movs	r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007700:	4b10      	ldr	r3, [pc, #64]	; (8007744 <vTaskStartScheduler+0xb8>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007706:	f000 fb9b 	bl	8007e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800770a:	e00d      	b.n	8007728 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007712:	d109      	bne.n	8007728 <vTaskStartScheduler+0x9c>
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	e7fe      	b.n	8007726 <vTaskStartScheduler+0x9a>
}
 8007728:	bf00      	nop
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	0800b168 	.word	0x0800b168
 8007734:	08007ac1 	.word	0x08007ac1
 8007738:	20000590 	.word	0x20000590
 800773c:	2000058c 	.word	0x2000058c
 8007740:	20000578 	.word	0x20000578
 8007744:	20000570 	.word	0x20000570

08007748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <vTaskSuspendAll+0x18>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3301      	adds	r3, #1
 8007752:	4a03      	ldr	r2, [pc, #12]	; (8007760 <vTaskSuspendAll+0x18>)
 8007754:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007756:	bf00      	nop
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	20000594 	.word	0x20000594

08007764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007772:	4b41      	ldr	r3, [pc, #260]	; (8007878 <xTaskResumeAll+0x114>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <xTaskResumeAll+0x2a>
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	e7fe      	b.n	800778c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800778e:	f000 fbf5 	bl	8007f7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007792:	4b39      	ldr	r3, [pc, #228]	; (8007878 <xTaskResumeAll+0x114>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3b01      	subs	r3, #1
 8007798:	4a37      	ldr	r2, [pc, #220]	; (8007878 <xTaskResumeAll+0x114>)
 800779a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800779c:	4b36      	ldr	r3, [pc, #216]	; (8007878 <xTaskResumeAll+0x114>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d161      	bne.n	8007868 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077a4:	4b35      	ldr	r3, [pc, #212]	; (800787c <xTaskResumeAll+0x118>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d05d      	beq.n	8007868 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077ac:	e02e      	b.n	800780c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ae:	4b34      	ldr	r3, [pc, #208]	; (8007880 <xTaskResumeAll+0x11c>)
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3318      	adds	r3, #24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff fd79 	bl	80072b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff fd74 	bl	80072b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	2201      	movs	r2, #1
 80077d0:	409a      	lsls	r2, r3
 80077d2:	4b2c      	ldr	r3, [pc, #176]	; (8007884 <xTaskResumeAll+0x120>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	4a2a      	ldr	r2, [pc, #168]	; (8007884 <xTaskResumeAll+0x120>)
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4a27      	ldr	r2, [pc, #156]	; (8007888 <xTaskResumeAll+0x124>)
 80077ea:	441a      	add	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3304      	adds	r3, #4
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f7ff fd00 	bl	80071f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fc:	4b23      	ldr	r3, [pc, #140]	; (800788c <xTaskResumeAll+0x128>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	429a      	cmp	r2, r3
 8007804:	d302      	bcc.n	800780c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007806:	4b22      	ldr	r3, [pc, #136]	; (8007890 <xTaskResumeAll+0x12c>)
 8007808:	2201      	movs	r2, #1
 800780a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800780c:	4b1c      	ldr	r3, [pc, #112]	; (8007880 <xTaskResumeAll+0x11c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1cc      	bne.n	80077ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800781a:	f000 fa03 	bl	8007c24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800781e:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <xTaskResumeAll+0x130>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d010      	beq.n	800784c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800782a:	f000 f837 	bl	800789c <xTaskIncrementTick>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007834:	4b16      	ldr	r3, [pc, #88]	; (8007890 <xTaskResumeAll+0x12c>)
 8007836:	2201      	movs	r2, #1
 8007838:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3b01      	subs	r3, #1
 800783e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f1      	bne.n	800782a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007846:	4b13      	ldr	r3, [pc, #76]	; (8007894 <xTaskResumeAll+0x130>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800784c:	4b10      	ldr	r3, [pc, #64]	; (8007890 <xTaskResumeAll+0x12c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d009      	beq.n	8007868 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007854:	2301      	movs	r3, #1
 8007856:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007858:	4b0f      	ldr	r3, [pc, #60]	; (8007898 <xTaskResumeAll+0x134>)
 800785a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007868:	f000 fbb6 	bl	8007fd8 <vPortExitCritical>

	return xAlreadyYielded;
 800786c:	68bb      	ldr	r3, [r7, #8]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000594 	.word	0x20000594
 800787c:	2000056c 	.word	0x2000056c
 8007880:	2000052c 	.word	0x2000052c
 8007884:	20000574 	.word	0x20000574
 8007888:	20000470 	.word	0x20000470
 800788c:	2000046c 	.word	0x2000046c
 8007890:	20000580 	.word	0x20000580
 8007894:	2000057c 	.word	0x2000057c
 8007898:	e000ed04 	.word	0xe000ed04

0800789c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078a6:	4b4e      	ldr	r3, [pc, #312]	; (80079e0 <xTaskIncrementTick+0x144>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f040 8087 	bne.w	80079be <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078b0:	4b4c      	ldr	r3, [pc, #304]	; (80079e4 <xTaskIncrementTick+0x148>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078b8:	4a4a      	ldr	r2, [pc, #296]	; (80079e4 <xTaskIncrementTick+0x148>)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d11f      	bne.n	8007904 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80078c4:	4b48      	ldr	r3, [pc, #288]	; (80079e8 <xTaskIncrementTick+0x14c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <xTaskIncrementTick+0x46>
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	e7fe      	b.n	80078e0 <xTaskIncrementTick+0x44>
 80078e2:	4b41      	ldr	r3, [pc, #260]	; (80079e8 <xTaskIncrementTick+0x14c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	4b40      	ldr	r3, [pc, #256]	; (80079ec <xTaskIncrementTick+0x150>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a3e      	ldr	r2, [pc, #248]	; (80079e8 <xTaskIncrementTick+0x14c>)
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	4a3e      	ldr	r2, [pc, #248]	; (80079ec <xTaskIncrementTick+0x150>)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	4b3e      	ldr	r3, [pc, #248]	; (80079f0 <xTaskIncrementTick+0x154>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3301      	adds	r3, #1
 80078fc:	4a3c      	ldr	r2, [pc, #240]	; (80079f0 <xTaskIncrementTick+0x154>)
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	f000 f990 	bl	8007c24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007904:	4b3b      	ldr	r3, [pc, #236]	; (80079f4 <xTaskIncrementTick+0x158>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	429a      	cmp	r2, r3
 800790c:	d348      	bcc.n	80079a0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800790e:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <xTaskIncrementTick+0x14c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007918:	4b36      	ldr	r3, [pc, #216]	; (80079f4 <xTaskIncrementTick+0x158>)
 800791a:	f04f 32ff 	mov.w	r2, #4294967295
 800791e:	601a      	str	r2, [r3, #0]
					break;
 8007920:	e03e      	b.n	80079a0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007922:	4b31      	ldr	r3, [pc, #196]	; (80079e8 <xTaskIncrementTick+0x14c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d203      	bcs.n	8007942 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800793a:	4a2e      	ldr	r2, [pc, #184]	; (80079f4 <xTaskIncrementTick+0x158>)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007940:	e02e      	b.n	80079a0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	3304      	adds	r3, #4
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff fcb3 	bl	80072b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	3318      	adds	r3, #24
 8007958:	4618      	mov	r0, r3
 800795a:	f7ff fcaa 	bl	80072b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	2201      	movs	r2, #1
 8007964:	409a      	lsls	r2, r3
 8007966:	4b24      	ldr	r3, [pc, #144]	; (80079f8 <xTaskIncrementTick+0x15c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4313      	orrs	r3, r2
 800796c:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <xTaskIncrementTick+0x15c>)
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4a1f      	ldr	r2, [pc, #124]	; (80079fc <xTaskIncrementTick+0x160>)
 800797e:	441a      	add	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3304      	adds	r3, #4
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f7ff fc36 	bl	80071f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <xTaskIncrementTick+0x164>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	429a      	cmp	r2, r3
 8007998:	d3b9      	bcc.n	800790e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800799a:	2301      	movs	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800799e:	e7b6      	b.n	800790e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079a0:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <xTaskIncrementTick+0x164>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a6:	4915      	ldr	r1, [pc, #84]	; (80079fc <xTaskIncrementTick+0x160>)
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d907      	bls.n	80079c8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	e004      	b.n	80079c8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079be:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <xTaskIncrementTick+0x168>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a0f      	ldr	r2, [pc, #60]	; (8007a04 <xTaskIncrementTick+0x168>)
 80079c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079c8:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <xTaskIncrementTick+0x16c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80079d0:	2301      	movs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079d4:	697b      	ldr	r3, [r7, #20]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20000594 	.word	0x20000594
 80079e4:	20000570 	.word	0x20000570
 80079e8:	20000524 	.word	0x20000524
 80079ec:	20000528 	.word	0x20000528
 80079f0:	20000584 	.word	0x20000584
 80079f4:	2000058c 	.word	0x2000058c
 80079f8:	20000574 	.word	0x20000574
 80079fc:	20000470 	.word	0x20000470
 8007a00:	2000046c 	.word	0x2000046c
 8007a04:	2000057c 	.word	0x2000057c
 8007a08:	20000580 	.word	0x20000580

08007a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a12:	4b26      	ldr	r3, [pc, #152]	; (8007aac <vTaskSwitchContext+0xa0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a1a:	4b25      	ldr	r3, [pc, #148]	; (8007ab0 <vTaskSwitchContext+0xa4>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a20:	e03e      	b.n	8007aa0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007a22:	4b23      	ldr	r3, [pc, #140]	; (8007ab0 <vTaskSwitchContext+0xa4>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a28:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <vTaskSwitchContext+0xa8>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	fab3 f383 	clz	r3, r3
 8007a34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a36:	7afb      	ldrb	r3, [r7, #11]
 8007a38:	f1c3 031f 	rsb	r3, r3, #31
 8007a3c:	617b      	str	r3, [r7, #20]
 8007a3e:	491e      	ldr	r1, [pc, #120]	; (8007ab8 <vTaskSwitchContext+0xac>)
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4613      	mov	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	440b      	add	r3, r1
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	607b      	str	r3, [r7, #4]
 8007a64:	e7fe      	b.n	8007a64 <vTaskSwitchContext+0x58>
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4a11      	ldr	r2, [pc, #68]	; (8007ab8 <vTaskSwitchContext+0xac>)
 8007a72:	4413      	add	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	605a      	str	r2, [r3, #4]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	3308      	adds	r3, #8
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d104      	bne.n	8007a96 <vTaskSwitchContext+0x8a>
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	605a      	str	r2, [r3, #4]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	4a07      	ldr	r2, [pc, #28]	; (8007abc <vTaskSwitchContext+0xb0>)
 8007a9e:	6013      	str	r3, [r2, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	20000594 	.word	0x20000594
 8007ab0:	20000580 	.word	0x20000580
 8007ab4:	20000574 	.word	0x20000574
 8007ab8:	20000470 	.word	0x20000470
 8007abc:	2000046c 	.word	0x2000046c

08007ac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ac8:	f000 f852 	bl	8007b70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <prvIdleTask+0x28>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d9f9      	bls.n	8007ac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <prvIdleTask+0x2c>)
 8007ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ae4:	e7f0      	b.n	8007ac8 <prvIdleTask+0x8>
 8007ae6:	bf00      	nop
 8007ae8:	20000470 	.word	0x20000470
 8007aec:	e000ed04 	.word	0xe000ed04

08007af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	e00c      	b.n	8007b16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4a12      	ldr	r2, [pc, #72]	; (8007b50 <prvInitialiseTaskLists+0x60>)
 8007b08:	4413      	add	r3, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fb47 	bl	800719e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3301      	adds	r3, #1
 8007b14:	607b      	str	r3, [r7, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b06      	cmp	r3, #6
 8007b1a:	d9ef      	bls.n	8007afc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b1c:	480d      	ldr	r0, [pc, #52]	; (8007b54 <prvInitialiseTaskLists+0x64>)
 8007b1e:	f7ff fb3e 	bl	800719e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b22:	480d      	ldr	r0, [pc, #52]	; (8007b58 <prvInitialiseTaskLists+0x68>)
 8007b24:	f7ff fb3b 	bl	800719e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b28:	480c      	ldr	r0, [pc, #48]	; (8007b5c <prvInitialiseTaskLists+0x6c>)
 8007b2a:	f7ff fb38 	bl	800719e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b2e:	480c      	ldr	r0, [pc, #48]	; (8007b60 <prvInitialiseTaskLists+0x70>)
 8007b30:	f7ff fb35 	bl	800719e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b34:	480b      	ldr	r0, [pc, #44]	; (8007b64 <prvInitialiseTaskLists+0x74>)
 8007b36:	f7ff fb32 	bl	800719e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <prvInitialiseTaskLists+0x78>)
 8007b3c:	4a05      	ldr	r2, [pc, #20]	; (8007b54 <prvInitialiseTaskLists+0x64>)
 8007b3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <prvInitialiseTaskLists+0x7c>)
 8007b42:	4a05      	ldr	r2, [pc, #20]	; (8007b58 <prvInitialiseTaskLists+0x68>)
 8007b44:	601a      	str	r2, [r3, #0]
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000470 	.word	0x20000470
 8007b54:	200004fc 	.word	0x200004fc
 8007b58:	20000510 	.word	0x20000510
 8007b5c:	2000052c 	.word	0x2000052c
 8007b60:	20000540 	.word	0x20000540
 8007b64:	20000558 	.word	0x20000558
 8007b68:	20000524 	.word	0x20000524
 8007b6c:	20000528 	.word	0x20000528

08007b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b76:	e019      	b.n	8007bac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b78:	f000 fa00 	bl	8007f7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b7c:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <prvCheckTasksWaitingTermination+0x4c>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fb92 	bl	80072b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <prvCheckTasksWaitingTermination+0x50>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	4a0a      	ldr	r2, [pc, #40]	; (8007bc0 <prvCheckTasksWaitingTermination+0x50>)
 8007b96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <prvCheckTasksWaitingTermination+0x54>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	4a09      	ldr	r2, [pc, #36]	; (8007bc4 <prvCheckTasksWaitingTermination+0x54>)
 8007ba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ba2:	f000 fa19 	bl	8007fd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f80e 	bl	8007bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bac:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <prvCheckTasksWaitingTermination+0x54>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e1      	bne.n	8007b78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20000540 	.word	0x20000540
 8007bc0:	2000056c 	.word	0x2000056c
 8007bc4:	20000554 	.word	0x20000554

08007bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d108      	bne.n	8007bec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fb6a 	bl	80082b8 <vPortFree>
				vPortFree( pxTCB );
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fb67 	bl	80082b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bea:	e017      	b.n	8007c1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d103      	bne.n	8007bfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fb5e 	bl	80082b8 <vPortFree>
	}
 8007bfc:	e00e      	b.n	8007c1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d009      	beq.n	8007c1c <prvDeleteTCB+0x54>
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	e7fe      	b.n	8007c1a <prvDeleteTCB+0x52>
	}
 8007c1c:	bf00      	nop
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c2a:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <prvResetNextTaskUnblockTime+0x38>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c34:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <prvResetNextTaskUnblockTime+0x3c>)
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c3c:	e008      	b.n	8007c50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <prvResetNextTaskUnblockTime+0x38>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <prvResetNextTaskUnblockTime+0x3c>)
 8007c4e:	6013      	str	r3, [r2, #0]
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	20000524 	.word	0x20000524
 8007c60:	2000058c 	.word	0x2000058c

08007c64 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c6e:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c74:	4b28      	ldr	r3, [pc, #160]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fb19 	bl	80072b2 <uxListRemove>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c86:	4b24      	ldr	r3, [pc, #144]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	43da      	mvns	r2, r3
 8007c94:	4b21      	ldr	r3, [pc, #132]	; (8007d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d10a      	bne.n	8007cbc <prvAddCurrentTaskToDelayedList+0x58>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d007      	beq.n	8007cbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cac:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	481a      	ldr	r0, [pc, #104]	; (8007d20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007cb6:	f7ff fa9f 	bl	80071f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cba:	e026      	b.n	8007d0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cc4:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d209      	bcs.n	8007ce8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cd4:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f7ff faad 	bl	8007240 <vListInsert>
}
 8007ce6:	e010      	b.n	8007d0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f7ff faa3 	bl	8007240 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d202      	bcs.n	8007d0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d04:	4a09      	ldr	r2, [pc, #36]	; (8007d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6013      	str	r3, [r2, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000570 	.word	0x20000570
 8007d18:	2000046c 	.word	0x2000046c
 8007d1c:	20000574 	.word	0x20000574
 8007d20:	20000558 	.word	0x20000558
 8007d24:	20000528 	.word	0x20000528
 8007d28:	20000524 	.word	0x20000524
 8007d2c:	2000058c 	.word	0x2000058c

08007d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3b04      	subs	r3, #4
 8007d40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3b04      	subs	r3, #4
 8007d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f023 0201 	bic.w	r2, r3, #1
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3b04      	subs	r3, #4
 8007d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d60:	4a0c      	ldr	r2, [pc, #48]	; (8007d94 <pxPortInitialiseStack+0x64>)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3b14      	subs	r3, #20
 8007d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3b04      	subs	r3, #4
 8007d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f06f 0202 	mvn.w	r2, #2
 8007d7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3b20      	subs	r3, #32
 8007d84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d86:	68fb      	ldr	r3, [r7, #12]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	08007d99 	.word	0x08007d99

08007d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007da2:	4b11      	ldr	r3, [pc, #68]	; (8007de8 <prvTaskExitError+0x50>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007daa:	d009      	beq.n	8007dc0 <prvTaskExitError+0x28>
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	e7fe      	b.n	8007dbe <prvTaskExitError+0x26>
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dd2:	bf00      	nop
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0fc      	beq.n	8007dd4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	20000018 	.word	0x20000018
 8007dec:	00000000 	.word	0x00000000

08007df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <pxCurrentTCBConst2>)
 8007df2:	6819      	ldr	r1, [r3, #0]
 8007df4:	6808      	ldr	r0, [r1, #0]
 8007df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfa:	f380 8809 	msr	PSP, r0
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f04f 0000 	mov.w	r0, #0
 8007e06:	f380 8811 	msr	BASEPRI, r0
 8007e0a:	4770      	bx	lr
 8007e0c:	f3af 8000 	nop.w

08007e10 <pxCurrentTCBConst2>:
 8007e10:	2000046c 	.word	0x2000046c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop

08007e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e18:	4808      	ldr	r0, [pc, #32]	; (8007e3c <prvPortStartFirstTask+0x24>)
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	6800      	ldr	r0, [r0, #0]
 8007e1e:	f380 8808 	msr	MSP, r0
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8814 	msr	CONTROL, r0
 8007e2a:	b662      	cpsie	i
 8007e2c:	b661      	cpsie	f
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	df00      	svc	0
 8007e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e3a:	bf00      	nop
 8007e3c:	e000ed08 	.word	0xe000ed08

08007e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e46:	4b44      	ldr	r3, [pc, #272]	; (8007f58 <xPortStartScheduler+0x118>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a44      	ldr	r2, [pc, #272]	; (8007f5c <xPortStartScheduler+0x11c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d109      	bne.n	8007e64 <xPortStartScheduler+0x24>
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	e7fe      	b.n	8007e62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e64:	4b3c      	ldr	r3, [pc, #240]	; (8007f58 <xPortStartScheduler+0x118>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a3d      	ldr	r2, [pc, #244]	; (8007f60 <xPortStartScheduler+0x120>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d109      	bne.n	8007e82 <xPortStartScheduler+0x42>
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	e7fe      	b.n	8007e80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e82:	4b38      	ldr	r3, [pc, #224]	; (8007f64 <xPortStartScheduler+0x124>)
 8007e84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	22ff      	movs	r2, #255	; 0xff
 8007e92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	4b30      	ldr	r3, [pc, #192]	; (8007f68 <xPortStartScheduler+0x128>)
 8007ea8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007eaa:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <xPortStartScheduler+0x12c>)
 8007eac:	2207      	movs	r2, #7
 8007eae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eb0:	e009      	b.n	8007ec6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007eb2:	4b2e      	ldr	r3, [pc, #184]	; (8007f6c <xPortStartScheduler+0x12c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	4a2c      	ldr	r2, [pc, #176]	; (8007f6c <xPortStartScheduler+0x12c>)
 8007eba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b80      	cmp	r3, #128	; 0x80
 8007ed0:	d0ef      	beq.n	8007eb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ed2:	4b26      	ldr	r3, [pc, #152]	; (8007f6c <xPortStartScheduler+0x12c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f1c3 0307 	rsb	r3, r3, #7
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d009      	beq.n	8007ef2 <xPortStartScheduler+0xb2>
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	60bb      	str	r3, [r7, #8]
 8007ef0:	e7fe      	b.n	8007ef0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ef2:	4b1e      	ldr	r3, [pc, #120]	; (8007f6c <xPortStartScheduler+0x12c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	4a1c      	ldr	r2, [pc, #112]	; (8007f6c <xPortStartScheduler+0x12c>)
 8007efa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007efc:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <xPortStartScheduler+0x12c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f04:	4a19      	ldr	r2, [pc, #100]	; (8007f6c <xPortStartScheduler+0x12c>)
 8007f06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <xPortStartScheduler+0x130>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a16      	ldr	r2, [pc, #88]	; (8007f70 <xPortStartScheduler+0x130>)
 8007f16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f1c:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <xPortStartScheduler+0x130>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a13      	ldr	r2, [pc, #76]	; (8007f70 <xPortStartScheduler+0x130>)
 8007f22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f28:	f000 f8d6 	bl	80080d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f2c:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <xPortStartScheduler+0x134>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f32:	f000 f8f5 	bl	8008120 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f36:	4b10      	ldr	r3, [pc, #64]	; (8007f78 <xPortStartScheduler+0x138>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a0f      	ldr	r2, [pc, #60]	; (8007f78 <xPortStartScheduler+0x138>)
 8007f3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f42:	f7ff ff69 	bl	8007e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f46:	f7ff fd61 	bl	8007a0c <vTaskSwitchContext>
	prvTaskExitError();
 8007f4a:	f7ff ff25 	bl	8007d98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	e000ed00 	.word	0xe000ed00
 8007f5c:	410fc271 	.word	0x410fc271
 8007f60:	410fc270 	.word	0x410fc270
 8007f64:	e000e400 	.word	0xe000e400
 8007f68:	20000598 	.word	0x20000598
 8007f6c:	2000059c 	.word	0x2000059c
 8007f70:	e000ed20 	.word	0xe000ed20
 8007f74:	20000018 	.word	0x20000018
 8007f78:	e000ef34 	.word	0xe000ef34

08007f7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f94:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <vPortEnterCritical+0x54>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	4a0d      	ldr	r2, [pc, #52]	; (8007fd0 <vPortEnterCritical+0x54>)
 8007f9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f9e:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <vPortEnterCritical+0x54>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d10e      	bne.n	8007fc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <vPortEnterCritical+0x58>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d009      	beq.n	8007fc4 <vPortEnterCritical+0x48>
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	e7fe      	b.n	8007fc2 <vPortEnterCritical+0x46>
	}
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000018 	.word	0x20000018
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <vPortExitCritical+0x4c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <vPortExitCritical+0x22>
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	607b      	str	r3, [r7, #4]
 8007ff8:	e7fe      	b.n	8007ff8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007ffa:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <vPortExitCritical+0x4c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	4a08      	ldr	r2, [pc, #32]	; (8008024 <vPortExitCritical+0x4c>)
 8008002:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <vPortExitCritical+0x4c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <vPortExitCritical+0x3e>
 800800c:	2300      	movs	r3, #0
 800800e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000018 	.word	0x20000018
	...

08008030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008030:	f3ef 8009 	mrs	r0, PSP
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4b15      	ldr	r3, [pc, #84]	; (8008090 <pxCurrentTCBConst>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	f01e 0f10 	tst.w	lr, #16
 8008040:	bf08      	it	eq
 8008042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804a:	6010      	str	r0, [r2, #0]
 800804c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008054:	f380 8811 	msr	BASEPRI, r0
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f7ff fcd4 	bl	8007a0c <vTaskSwitchContext>
 8008064:	f04f 0000 	mov.w	r0, #0
 8008068:	f380 8811 	msr	BASEPRI, r0
 800806c:	bc09      	pop	{r0, r3}
 800806e:	6819      	ldr	r1, [r3, #0]
 8008070:	6808      	ldr	r0, [r1, #0]
 8008072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008076:	f01e 0f10 	tst.w	lr, #16
 800807a:	bf08      	it	eq
 800807c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008080:	f380 8809 	msr	PSP, r0
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	f3af 8000 	nop.w

08008090 <pxCurrentTCBConst>:
 8008090:	2000046c 	.word	0x2000046c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop

08008098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080b0:	f7ff fbf4 	bl	800789c <xTaskIncrementTick>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080ba:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <SysTick_Handler+0x3c>)
 80080bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	2300      	movs	r3, #0
 80080c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	e000ed04 	.word	0xe000ed04

080080d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <vPortSetupTimerInterrupt+0x34>)
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080e2:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <vPortSetupTimerInterrupt+0x38>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080e8:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <vPortSetupTimerInterrupt+0x3c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a0a      	ldr	r2, [pc, #40]	; (8008118 <vPortSetupTimerInterrupt+0x40>)
 80080ee:	fba2 2303 	umull	r2, r3, r2, r3
 80080f2:	099b      	lsrs	r3, r3, #6
 80080f4:	4a09      	ldr	r2, [pc, #36]	; (800811c <vPortSetupTimerInterrupt+0x44>)
 80080f6:	3b01      	subs	r3, #1
 80080f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080fa:	4b04      	ldr	r3, [pc, #16]	; (800810c <vPortSetupTimerInterrupt+0x34>)
 80080fc:	2207      	movs	r2, #7
 80080fe:	601a      	str	r2, [r3, #0]
}
 8008100:	bf00      	nop
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	e000e010 	.word	0xe000e010
 8008110:	e000e018 	.word	0xe000e018
 8008114:	2000000c 	.word	0x2000000c
 8008118:	10624dd3 	.word	0x10624dd3
 800811c:	e000e014 	.word	0xe000e014

08008120 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008120:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008130 <vPortEnableVFP+0x10>
 8008124:	6801      	ldr	r1, [r0, #0]
 8008126:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800812a:	6001      	str	r1, [r0, #0]
 800812c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800812e:	bf00      	nop
 8008130:	e000ed88 	.word	0xe000ed88

08008134 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	; 0x28
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008140:	f7ff fb02 	bl	8007748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008144:	4b57      	ldr	r3, [pc, #348]	; (80082a4 <pvPortMalloc+0x170>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800814c:	f000 f90c 	bl	8008368 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008150:	4b55      	ldr	r3, [pc, #340]	; (80082a8 <pvPortMalloc+0x174>)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4013      	ands	r3, r2
 8008158:	2b00      	cmp	r3, #0
 800815a:	f040 808c 	bne.w	8008276 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01c      	beq.n	800819e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008164:	2208      	movs	r2, #8
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4413      	add	r3, r2
 800816a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	2b00      	cmp	r3, #0
 8008174:	d013      	beq.n	800819e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f023 0307 	bic.w	r3, r3, #7
 800817c:	3308      	adds	r3, #8
 800817e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <pvPortMalloc+0x6a>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	e7fe      	b.n	800819c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d068      	beq.n	8008276 <pvPortMalloc+0x142>
 80081a4:	4b41      	ldr	r3, [pc, #260]	; (80082ac <pvPortMalloc+0x178>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d863      	bhi.n	8008276 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081ae:	4b40      	ldr	r3, [pc, #256]	; (80082b0 <pvPortMalloc+0x17c>)
 80081b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081b2:	4b3f      	ldr	r3, [pc, #252]	; (80082b0 <pvPortMalloc+0x17c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081b8:	e004      	b.n	80081c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d903      	bls.n	80081d6 <pvPortMalloc+0xa2>
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1f1      	bne.n	80081ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081d6:	4b33      	ldr	r3, [pc, #204]	; (80082a4 <pvPortMalloc+0x170>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081dc:	429a      	cmp	r2, r3
 80081de:	d04a      	beq.n	8008276 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2208      	movs	r2, #8
 80081e6:	4413      	add	r3, r2
 80081e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	1ad2      	subs	r2, r2, r3
 80081fa:	2308      	movs	r3, #8
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	429a      	cmp	r2, r3
 8008200:	d91e      	bls.n	8008240 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4413      	add	r3, r2
 8008208:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	2b00      	cmp	r3, #0
 8008212:	d009      	beq.n	8008228 <pvPortMalloc+0xf4>
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	e7fe      	b.n	8008226 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800823a:	69b8      	ldr	r0, [r7, #24]
 800823c:	f000 f8f6 	bl	800842c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008240:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <pvPortMalloc+0x178>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	4a18      	ldr	r2, [pc, #96]	; (80082ac <pvPortMalloc+0x178>)
 800824c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800824e:	4b17      	ldr	r3, [pc, #92]	; (80082ac <pvPortMalloc+0x178>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <pvPortMalloc+0x180>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d203      	bcs.n	8008262 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800825a:	4b14      	ldr	r3, [pc, #80]	; (80082ac <pvPortMalloc+0x178>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a15      	ldr	r2, [pc, #84]	; (80082b4 <pvPortMalloc+0x180>)
 8008260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <pvPortMalloc+0x174>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	431a      	orrs	r2, r3
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008276:	f7ff fa75 	bl	8007764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	2b00      	cmp	r3, #0
 8008282:	d009      	beq.n	8008298 <pvPortMalloc+0x164>
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	e7fe      	b.n	8008296 <pvPortMalloc+0x162>
	return pvReturn;
 8008298:	69fb      	ldr	r3, [r7, #28]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3728      	adds	r7, #40	; 0x28
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20001160 	.word	0x20001160
 80082a8:	2000116c 	.word	0x2000116c
 80082ac:	20001164 	.word	0x20001164
 80082b0:	20001158 	.word	0x20001158
 80082b4:	20001168 	.word	0x20001168

080082b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d046      	beq.n	8008358 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082ca:	2308      	movs	r3, #8
 80082cc:	425b      	negs	r3, r3
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4413      	add	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	4b20      	ldr	r3, [pc, #128]	; (8008360 <vPortFree+0xa8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d109      	bne.n	80082fa <vPortFree+0x42>
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	e7fe      	b.n	80082f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d009      	beq.n	8008316 <vPortFree+0x5e>
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	60bb      	str	r3, [r7, #8]
 8008314:	e7fe      	b.n	8008314 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	4b11      	ldr	r3, [pc, #68]	; (8008360 <vPortFree+0xa8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4013      	ands	r3, r2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d019      	beq.n	8008358 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d115      	bne.n	8008358 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <vPortFree+0xa8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	43db      	mvns	r3, r3
 8008336:	401a      	ands	r2, r3
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800833c:	f7ff fa04 	bl	8007748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	4b07      	ldr	r3, [pc, #28]	; (8008364 <vPortFree+0xac>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4413      	add	r3, r2
 800834a:	4a06      	ldr	r2, [pc, #24]	; (8008364 <vPortFree+0xac>)
 800834c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800834e:	6938      	ldr	r0, [r7, #16]
 8008350:	f000 f86c 	bl	800842c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008354:	f7ff fa06 	bl	8007764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008358:	bf00      	nop
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	2000116c 	.word	0x2000116c
 8008364:	20001164 	.word	0x20001164

08008368 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800836e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008372:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008374:	4b27      	ldr	r3, [pc, #156]	; (8008414 <prvHeapInit+0xac>)
 8008376:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0307 	and.w	r3, r3, #7
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00c      	beq.n	800839c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3307      	adds	r3, #7
 8008386:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0307 	bic.w	r3, r3, #7
 800838e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	4a1f      	ldr	r2, [pc, #124]	; (8008414 <prvHeapInit+0xac>)
 8008398:	4413      	add	r3, r2
 800839a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083a0:	4a1d      	ldr	r2, [pc, #116]	; (8008418 <prvHeapInit+0xb0>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083a6:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <prvHeapInit+0xb0>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083b4:	2208      	movs	r2, #8
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0307 	bic.w	r3, r3, #7
 80083c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a15      	ldr	r2, [pc, #84]	; (800841c <prvHeapInit+0xb4>)
 80083c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083ca:	4b14      	ldr	r3, [pc, #80]	; (800841c <prvHeapInit+0xb4>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2200      	movs	r2, #0
 80083d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083d2:	4b12      	ldr	r3, [pc, #72]	; (800841c <prvHeapInit+0xb4>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2200      	movs	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	1ad2      	subs	r2, r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <prvHeapInit+0xb4>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <prvHeapInit+0xb8>)
 80083f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	4a09      	ldr	r2, [pc, #36]	; (8008424 <prvHeapInit+0xbc>)
 80083fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008400:	4b09      	ldr	r3, [pc, #36]	; (8008428 <prvHeapInit+0xc0>)
 8008402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008406:	601a      	str	r2, [r3, #0]
}
 8008408:	bf00      	nop
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	200005a0 	.word	0x200005a0
 8008418:	20001158 	.word	0x20001158
 800841c:	20001160 	.word	0x20001160
 8008420:	20001168 	.word	0x20001168
 8008424:	20001164 	.word	0x20001164
 8008428:	2000116c 	.word	0x2000116c

0800842c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008434:	4b28      	ldr	r3, [pc, #160]	; (80084d8 <prvInsertBlockIntoFreeList+0xac>)
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e002      	b.n	8008440 <prvInsertBlockIntoFreeList+0x14>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	429a      	cmp	r2, r3
 8008448:	d8f7      	bhi.n	800843a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	4413      	add	r3, r2
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	429a      	cmp	r2, r3
 800845a:	d108      	bne.n	800846e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	441a      	add	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	441a      	add	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d118      	bne.n	80084b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b15      	ldr	r3, [pc, #84]	; (80084dc <prvInsertBlockIntoFreeList+0xb0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d00d      	beq.n	80084aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	441a      	add	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	e008      	b.n	80084bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084aa:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <prvInsertBlockIntoFreeList+0xb0>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	e003      	b.n	80084bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d002      	beq.n	80084ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	20001158 	.word	0x20001158
 80084dc:	20001160 	.word	0x20001160

080084e0 <__errno>:
 80084e0:	4b01      	ldr	r3, [pc, #4]	; (80084e8 <__errno+0x8>)
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	2000001c 	.word	0x2000001c

080084ec <__libc_init_array>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	4e0d      	ldr	r6, [pc, #52]	; (8008524 <__libc_init_array+0x38>)
 80084f0:	4c0d      	ldr	r4, [pc, #52]	; (8008528 <__libc_init_array+0x3c>)
 80084f2:	1ba4      	subs	r4, r4, r6
 80084f4:	10a4      	asrs	r4, r4, #2
 80084f6:	2500      	movs	r5, #0
 80084f8:	42a5      	cmp	r5, r4
 80084fa:	d109      	bne.n	8008510 <__libc_init_array+0x24>
 80084fc:	4e0b      	ldr	r6, [pc, #44]	; (800852c <__libc_init_array+0x40>)
 80084fe:	4c0c      	ldr	r4, [pc, #48]	; (8008530 <__libc_init_array+0x44>)
 8008500:	f002 fd68 	bl	800afd4 <_init>
 8008504:	1ba4      	subs	r4, r4, r6
 8008506:	10a4      	asrs	r4, r4, #2
 8008508:	2500      	movs	r5, #0
 800850a:	42a5      	cmp	r5, r4
 800850c:	d105      	bne.n	800851a <__libc_init_array+0x2e>
 800850e:	bd70      	pop	{r4, r5, r6, pc}
 8008510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008514:	4798      	blx	r3
 8008516:	3501      	adds	r5, #1
 8008518:	e7ee      	b.n	80084f8 <__libc_init_array+0xc>
 800851a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800851e:	4798      	blx	r3
 8008520:	3501      	adds	r5, #1
 8008522:	e7f2      	b.n	800850a <__libc_init_array+0x1e>
 8008524:	0800b498 	.word	0x0800b498
 8008528:	0800b498 	.word	0x0800b498
 800852c:	0800b498 	.word	0x0800b498
 8008530:	0800b49c 	.word	0x0800b49c

08008534 <memcpy>:
 8008534:	b510      	push	{r4, lr}
 8008536:	1e43      	subs	r3, r0, #1
 8008538:	440a      	add	r2, r1
 800853a:	4291      	cmp	r1, r2
 800853c:	d100      	bne.n	8008540 <memcpy+0xc>
 800853e:	bd10      	pop	{r4, pc}
 8008540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008548:	e7f7      	b.n	800853a <memcpy+0x6>

0800854a <memset>:
 800854a:	4402      	add	r2, r0
 800854c:	4603      	mov	r3, r0
 800854e:	4293      	cmp	r3, r2
 8008550:	d100      	bne.n	8008554 <memset+0xa>
 8008552:	4770      	bx	lr
 8008554:	f803 1b01 	strb.w	r1, [r3], #1
 8008558:	e7f9      	b.n	800854e <memset+0x4>

0800855a <__cvt>:
 800855a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800855e:	ec55 4b10 	vmov	r4, r5, d0
 8008562:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008564:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008568:	2d00      	cmp	r5, #0
 800856a:	460e      	mov	r6, r1
 800856c:	4691      	mov	r9, r2
 800856e:	4619      	mov	r1, r3
 8008570:	bfb8      	it	lt
 8008572:	4622      	movlt	r2, r4
 8008574:	462b      	mov	r3, r5
 8008576:	f027 0720 	bic.w	r7, r7, #32
 800857a:	bfbb      	ittet	lt
 800857c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008580:	461d      	movlt	r5, r3
 8008582:	2300      	movge	r3, #0
 8008584:	232d      	movlt	r3, #45	; 0x2d
 8008586:	bfb8      	it	lt
 8008588:	4614      	movlt	r4, r2
 800858a:	2f46      	cmp	r7, #70	; 0x46
 800858c:	700b      	strb	r3, [r1, #0]
 800858e:	d004      	beq.n	800859a <__cvt+0x40>
 8008590:	2f45      	cmp	r7, #69	; 0x45
 8008592:	d100      	bne.n	8008596 <__cvt+0x3c>
 8008594:	3601      	adds	r6, #1
 8008596:	2102      	movs	r1, #2
 8008598:	e000      	b.n	800859c <__cvt+0x42>
 800859a:	2103      	movs	r1, #3
 800859c:	ab03      	add	r3, sp, #12
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	ab02      	add	r3, sp, #8
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4632      	mov	r2, r6
 80085a6:	4653      	mov	r3, sl
 80085a8:	ec45 4b10 	vmov	d0, r4, r5
 80085ac:	f000 fe1c 	bl	80091e8 <_dtoa_r>
 80085b0:	2f47      	cmp	r7, #71	; 0x47
 80085b2:	4680      	mov	r8, r0
 80085b4:	d102      	bne.n	80085bc <__cvt+0x62>
 80085b6:	f019 0f01 	tst.w	r9, #1
 80085ba:	d026      	beq.n	800860a <__cvt+0xb0>
 80085bc:	2f46      	cmp	r7, #70	; 0x46
 80085be:	eb08 0906 	add.w	r9, r8, r6
 80085c2:	d111      	bne.n	80085e8 <__cvt+0x8e>
 80085c4:	f898 3000 	ldrb.w	r3, [r8]
 80085c8:	2b30      	cmp	r3, #48	; 0x30
 80085ca:	d10a      	bne.n	80085e2 <__cvt+0x88>
 80085cc:	2200      	movs	r2, #0
 80085ce:	2300      	movs	r3, #0
 80085d0:	4620      	mov	r0, r4
 80085d2:	4629      	mov	r1, r5
 80085d4:	f7f8 faa0 	bl	8000b18 <__aeabi_dcmpeq>
 80085d8:	b918      	cbnz	r0, 80085e2 <__cvt+0x88>
 80085da:	f1c6 0601 	rsb	r6, r6, #1
 80085de:	f8ca 6000 	str.w	r6, [sl]
 80085e2:	f8da 3000 	ldr.w	r3, [sl]
 80085e6:	4499      	add	r9, r3
 80085e8:	2200      	movs	r2, #0
 80085ea:	2300      	movs	r3, #0
 80085ec:	4620      	mov	r0, r4
 80085ee:	4629      	mov	r1, r5
 80085f0:	f7f8 fa92 	bl	8000b18 <__aeabi_dcmpeq>
 80085f4:	b938      	cbnz	r0, 8008606 <__cvt+0xac>
 80085f6:	2230      	movs	r2, #48	; 0x30
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	454b      	cmp	r3, r9
 80085fc:	d205      	bcs.n	800860a <__cvt+0xb0>
 80085fe:	1c59      	adds	r1, r3, #1
 8008600:	9103      	str	r1, [sp, #12]
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	e7f8      	b.n	80085f8 <__cvt+0x9e>
 8008606:	f8cd 900c 	str.w	r9, [sp, #12]
 800860a:	9b03      	ldr	r3, [sp, #12]
 800860c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800860e:	eba3 0308 	sub.w	r3, r3, r8
 8008612:	4640      	mov	r0, r8
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	b004      	add	sp, #16
 8008618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800861c <__exponent>:
 800861c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800861e:	2900      	cmp	r1, #0
 8008620:	4604      	mov	r4, r0
 8008622:	bfba      	itte	lt
 8008624:	4249      	neglt	r1, r1
 8008626:	232d      	movlt	r3, #45	; 0x2d
 8008628:	232b      	movge	r3, #43	; 0x2b
 800862a:	2909      	cmp	r1, #9
 800862c:	f804 2b02 	strb.w	r2, [r4], #2
 8008630:	7043      	strb	r3, [r0, #1]
 8008632:	dd20      	ble.n	8008676 <__exponent+0x5a>
 8008634:	f10d 0307 	add.w	r3, sp, #7
 8008638:	461f      	mov	r7, r3
 800863a:	260a      	movs	r6, #10
 800863c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008640:	fb06 1115 	mls	r1, r6, r5, r1
 8008644:	3130      	adds	r1, #48	; 0x30
 8008646:	2d09      	cmp	r5, #9
 8008648:	f803 1c01 	strb.w	r1, [r3, #-1]
 800864c:	f103 32ff 	add.w	r2, r3, #4294967295
 8008650:	4629      	mov	r1, r5
 8008652:	dc09      	bgt.n	8008668 <__exponent+0x4c>
 8008654:	3130      	adds	r1, #48	; 0x30
 8008656:	3b02      	subs	r3, #2
 8008658:	f802 1c01 	strb.w	r1, [r2, #-1]
 800865c:	42bb      	cmp	r3, r7
 800865e:	4622      	mov	r2, r4
 8008660:	d304      	bcc.n	800866c <__exponent+0x50>
 8008662:	1a10      	subs	r0, r2, r0
 8008664:	b003      	add	sp, #12
 8008666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008668:	4613      	mov	r3, r2
 800866a:	e7e7      	b.n	800863c <__exponent+0x20>
 800866c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008670:	f804 2b01 	strb.w	r2, [r4], #1
 8008674:	e7f2      	b.n	800865c <__exponent+0x40>
 8008676:	2330      	movs	r3, #48	; 0x30
 8008678:	4419      	add	r1, r3
 800867a:	7083      	strb	r3, [r0, #2]
 800867c:	1d02      	adds	r2, r0, #4
 800867e:	70c1      	strb	r1, [r0, #3]
 8008680:	e7ef      	b.n	8008662 <__exponent+0x46>
	...

08008684 <_printf_float>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	b08d      	sub	sp, #52	; 0x34
 800868a:	460c      	mov	r4, r1
 800868c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008690:	4616      	mov	r6, r2
 8008692:	461f      	mov	r7, r3
 8008694:	4605      	mov	r5, r0
 8008696:	f001 fcd9 	bl	800a04c <_localeconv_r>
 800869a:	6803      	ldr	r3, [r0, #0]
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7f7 fdb8 	bl	8000214 <strlen>
 80086a4:	2300      	movs	r3, #0
 80086a6:	930a      	str	r3, [sp, #40]	; 0x28
 80086a8:	f8d8 3000 	ldr.w	r3, [r8]
 80086ac:	9005      	str	r0, [sp, #20]
 80086ae:	3307      	adds	r3, #7
 80086b0:	f023 0307 	bic.w	r3, r3, #7
 80086b4:	f103 0208 	add.w	r2, r3, #8
 80086b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086bc:	f8d4 b000 	ldr.w	fp, [r4]
 80086c0:	f8c8 2000 	str.w	r2, [r8]
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086cc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086d4:	9307      	str	r3, [sp, #28]
 80086d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80086da:	f04f 32ff 	mov.w	r2, #4294967295
 80086de:	4ba7      	ldr	r3, [pc, #668]	; (800897c <_printf_float+0x2f8>)
 80086e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086e4:	f7f8 fa4a 	bl	8000b7c <__aeabi_dcmpun>
 80086e8:	bb70      	cbnz	r0, 8008748 <_printf_float+0xc4>
 80086ea:	f04f 32ff 	mov.w	r2, #4294967295
 80086ee:	4ba3      	ldr	r3, [pc, #652]	; (800897c <_printf_float+0x2f8>)
 80086f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086f4:	f7f8 fa24 	bl	8000b40 <__aeabi_dcmple>
 80086f8:	bb30      	cbnz	r0, 8008748 <_printf_float+0xc4>
 80086fa:	2200      	movs	r2, #0
 80086fc:	2300      	movs	r3, #0
 80086fe:	4640      	mov	r0, r8
 8008700:	4649      	mov	r1, r9
 8008702:	f7f8 fa13 	bl	8000b2c <__aeabi_dcmplt>
 8008706:	b110      	cbz	r0, 800870e <_printf_float+0x8a>
 8008708:	232d      	movs	r3, #45	; 0x2d
 800870a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800870e:	4a9c      	ldr	r2, [pc, #624]	; (8008980 <_printf_float+0x2fc>)
 8008710:	4b9c      	ldr	r3, [pc, #624]	; (8008984 <_printf_float+0x300>)
 8008712:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008716:	bf8c      	ite	hi
 8008718:	4690      	movhi	r8, r2
 800871a:	4698      	movls	r8, r3
 800871c:	2303      	movs	r3, #3
 800871e:	f02b 0204 	bic.w	r2, fp, #4
 8008722:	6123      	str	r3, [r4, #16]
 8008724:	6022      	str	r2, [r4, #0]
 8008726:	f04f 0900 	mov.w	r9, #0
 800872a:	9700      	str	r7, [sp, #0]
 800872c:	4633      	mov	r3, r6
 800872e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008730:	4621      	mov	r1, r4
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f9e6 	bl	8008b04 <_printf_common>
 8008738:	3001      	adds	r0, #1
 800873a:	f040 808d 	bne.w	8008858 <_printf_float+0x1d4>
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	b00d      	add	sp, #52	; 0x34
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	4640      	mov	r0, r8
 800874e:	4649      	mov	r1, r9
 8008750:	f7f8 fa14 	bl	8000b7c <__aeabi_dcmpun>
 8008754:	b110      	cbz	r0, 800875c <_printf_float+0xd8>
 8008756:	4a8c      	ldr	r2, [pc, #560]	; (8008988 <_printf_float+0x304>)
 8008758:	4b8c      	ldr	r3, [pc, #560]	; (800898c <_printf_float+0x308>)
 800875a:	e7da      	b.n	8008712 <_printf_float+0x8e>
 800875c:	6861      	ldr	r1, [r4, #4]
 800875e:	1c4b      	adds	r3, r1, #1
 8008760:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008764:	a80a      	add	r0, sp, #40	; 0x28
 8008766:	d13e      	bne.n	80087e6 <_printf_float+0x162>
 8008768:	2306      	movs	r3, #6
 800876a:	6063      	str	r3, [r4, #4]
 800876c:	2300      	movs	r3, #0
 800876e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008772:	ab09      	add	r3, sp, #36	; 0x24
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	ec49 8b10 	vmov	d0, r8, r9
 800877a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800877e:	6022      	str	r2, [r4, #0]
 8008780:	f8cd a004 	str.w	sl, [sp, #4]
 8008784:	6861      	ldr	r1, [r4, #4]
 8008786:	4628      	mov	r0, r5
 8008788:	f7ff fee7 	bl	800855a <__cvt>
 800878c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008790:	2b47      	cmp	r3, #71	; 0x47
 8008792:	4680      	mov	r8, r0
 8008794:	d109      	bne.n	80087aa <_printf_float+0x126>
 8008796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008798:	1cd8      	adds	r0, r3, #3
 800879a:	db02      	blt.n	80087a2 <_printf_float+0x11e>
 800879c:	6862      	ldr	r2, [r4, #4]
 800879e:	4293      	cmp	r3, r2
 80087a0:	dd47      	ble.n	8008832 <_printf_float+0x1ae>
 80087a2:	f1aa 0a02 	sub.w	sl, sl, #2
 80087a6:	fa5f fa8a 	uxtb.w	sl, sl
 80087aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80087ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087b0:	d824      	bhi.n	80087fc <_printf_float+0x178>
 80087b2:	3901      	subs	r1, #1
 80087b4:	4652      	mov	r2, sl
 80087b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087ba:	9109      	str	r1, [sp, #36]	; 0x24
 80087bc:	f7ff ff2e 	bl	800861c <__exponent>
 80087c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c2:	1813      	adds	r3, r2, r0
 80087c4:	2a01      	cmp	r2, #1
 80087c6:	4681      	mov	r9, r0
 80087c8:	6123      	str	r3, [r4, #16]
 80087ca:	dc02      	bgt.n	80087d2 <_printf_float+0x14e>
 80087cc:	6822      	ldr	r2, [r4, #0]
 80087ce:	07d1      	lsls	r1, r2, #31
 80087d0:	d501      	bpl.n	80087d6 <_printf_float+0x152>
 80087d2:	3301      	adds	r3, #1
 80087d4:	6123      	str	r3, [r4, #16]
 80087d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0a5      	beq.n	800872a <_printf_float+0xa6>
 80087de:	232d      	movs	r3, #45	; 0x2d
 80087e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e4:	e7a1      	b.n	800872a <_printf_float+0xa6>
 80087e6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80087ea:	f000 8177 	beq.w	8008adc <_printf_float+0x458>
 80087ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80087f2:	d1bb      	bne.n	800876c <_printf_float+0xe8>
 80087f4:	2900      	cmp	r1, #0
 80087f6:	d1b9      	bne.n	800876c <_printf_float+0xe8>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e7b6      	b.n	800876a <_printf_float+0xe6>
 80087fc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008800:	d119      	bne.n	8008836 <_printf_float+0x1b2>
 8008802:	2900      	cmp	r1, #0
 8008804:	6863      	ldr	r3, [r4, #4]
 8008806:	dd0c      	ble.n	8008822 <_printf_float+0x19e>
 8008808:	6121      	str	r1, [r4, #16]
 800880a:	b913      	cbnz	r3, 8008812 <_printf_float+0x18e>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	07d2      	lsls	r2, r2, #31
 8008810:	d502      	bpl.n	8008818 <_printf_float+0x194>
 8008812:	3301      	adds	r3, #1
 8008814:	440b      	add	r3, r1
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881a:	65a3      	str	r3, [r4, #88]	; 0x58
 800881c:	f04f 0900 	mov.w	r9, #0
 8008820:	e7d9      	b.n	80087d6 <_printf_float+0x152>
 8008822:	b913      	cbnz	r3, 800882a <_printf_float+0x1a6>
 8008824:	6822      	ldr	r2, [r4, #0]
 8008826:	07d0      	lsls	r0, r2, #31
 8008828:	d501      	bpl.n	800882e <_printf_float+0x1aa>
 800882a:	3302      	adds	r3, #2
 800882c:	e7f3      	b.n	8008816 <_printf_float+0x192>
 800882e:	2301      	movs	r3, #1
 8008830:	e7f1      	b.n	8008816 <_printf_float+0x192>
 8008832:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008836:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800883a:	4293      	cmp	r3, r2
 800883c:	db05      	blt.n	800884a <_printf_float+0x1c6>
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	07d1      	lsls	r1, r2, #31
 8008844:	d5e8      	bpl.n	8008818 <_printf_float+0x194>
 8008846:	3301      	adds	r3, #1
 8008848:	e7e5      	b.n	8008816 <_printf_float+0x192>
 800884a:	2b00      	cmp	r3, #0
 800884c:	bfd4      	ite	le
 800884e:	f1c3 0302 	rsble	r3, r3, #2
 8008852:	2301      	movgt	r3, #1
 8008854:	4413      	add	r3, r2
 8008856:	e7de      	b.n	8008816 <_printf_float+0x192>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	055a      	lsls	r2, r3, #21
 800885c:	d407      	bmi.n	800886e <_printf_float+0x1ea>
 800885e:	6923      	ldr	r3, [r4, #16]
 8008860:	4642      	mov	r2, r8
 8008862:	4631      	mov	r1, r6
 8008864:	4628      	mov	r0, r5
 8008866:	47b8      	blx	r7
 8008868:	3001      	adds	r0, #1
 800886a:	d12b      	bne.n	80088c4 <_printf_float+0x240>
 800886c:	e767      	b.n	800873e <_printf_float+0xba>
 800886e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008872:	f240 80dc 	bls.w	8008a2e <_printf_float+0x3aa>
 8008876:	2200      	movs	r2, #0
 8008878:	2300      	movs	r3, #0
 800887a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800887e:	f7f8 f94b 	bl	8000b18 <__aeabi_dcmpeq>
 8008882:	2800      	cmp	r0, #0
 8008884:	d033      	beq.n	80088ee <_printf_float+0x26a>
 8008886:	2301      	movs	r3, #1
 8008888:	4a41      	ldr	r2, [pc, #260]	; (8008990 <_printf_float+0x30c>)
 800888a:	4631      	mov	r1, r6
 800888c:	4628      	mov	r0, r5
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	f43f af54 	beq.w	800873e <_printf_float+0xba>
 8008896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800889a:	429a      	cmp	r2, r3
 800889c:	db02      	blt.n	80088a4 <_printf_float+0x220>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	07d8      	lsls	r0, r3, #31
 80088a2:	d50f      	bpl.n	80088c4 <_printf_float+0x240>
 80088a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	f43f af45 	beq.w	800873e <_printf_float+0xba>
 80088b4:	f04f 0800 	mov.w	r8, #0
 80088b8:	f104 091a 	add.w	r9, r4, #26
 80088bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088be:	3b01      	subs	r3, #1
 80088c0:	4543      	cmp	r3, r8
 80088c2:	dc09      	bgt.n	80088d8 <_printf_float+0x254>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	079b      	lsls	r3, r3, #30
 80088c8:	f100 8103 	bmi.w	8008ad2 <_printf_float+0x44e>
 80088cc:	68e0      	ldr	r0, [r4, #12]
 80088ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088d0:	4298      	cmp	r0, r3
 80088d2:	bfb8      	it	lt
 80088d4:	4618      	movlt	r0, r3
 80088d6:	e734      	b.n	8008742 <_printf_float+0xbe>
 80088d8:	2301      	movs	r3, #1
 80088da:	464a      	mov	r2, r9
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f af2b 	beq.w	800873e <_printf_float+0xba>
 80088e8:	f108 0801 	add.w	r8, r8, #1
 80088ec:	e7e6      	b.n	80088bc <_printf_float+0x238>
 80088ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc2b      	bgt.n	800894c <_printf_float+0x2c8>
 80088f4:	2301      	movs	r3, #1
 80088f6:	4a26      	ldr	r2, [pc, #152]	; (8008990 <_printf_float+0x30c>)
 80088f8:	4631      	mov	r1, r6
 80088fa:	4628      	mov	r0, r5
 80088fc:	47b8      	blx	r7
 80088fe:	3001      	adds	r0, #1
 8008900:	f43f af1d 	beq.w	800873e <_printf_float+0xba>
 8008904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008906:	b923      	cbnz	r3, 8008912 <_printf_float+0x28e>
 8008908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890a:	b913      	cbnz	r3, 8008912 <_printf_float+0x28e>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	07d9      	lsls	r1, r3, #31
 8008910:	d5d8      	bpl.n	80088c4 <_printf_float+0x240>
 8008912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008916:	4631      	mov	r1, r6
 8008918:	4628      	mov	r0, r5
 800891a:	47b8      	blx	r7
 800891c:	3001      	adds	r0, #1
 800891e:	f43f af0e 	beq.w	800873e <_printf_float+0xba>
 8008922:	f04f 0900 	mov.w	r9, #0
 8008926:	f104 0a1a 	add.w	sl, r4, #26
 800892a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892c:	425b      	negs	r3, r3
 800892e:	454b      	cmp	r3, r9
 8008930:	dc01      	bgt.n	8008936 <_printf_float+0x2b2>
 8008932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008934:	e794      	b.n	8008860 <_printf_float+0x1dc>
 8008936:	2301      	movs	r3, #1
 8008938:	4652      	mov	r2, sl
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	f43f aefc 	beq.w	800873e <_printf_float+0xba>
 8008946:	f109 0901 	add.w	r9, r9, #1
 800894a:	e7ee      	b.n	800892a <_printf_float+0x2a6>
 800894c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800894e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008950:	429a      	cmp	r2, r3
 8008952:	bfa8      	it	ge
 8008954:	461a      	movge	r2, r3
 8008956:	2a00      	cmp	r2, #0
 8008958:	4691      	mov	r9, r2
 800895a:	dd07      	ble.n	800896c <_printf_float+0x2e8>
 800895c:	4613      	mov	r3, r2
 800895e:	4631      	mov	r1, r6
 8008960:	4642      	mov	r2, r8
 8008962:	4628      	mov	r0, r5
 8008964:	47b8      	blx	r7
 8008966:	3001      	adds	r0, #1
 8008968:	f43f aee9 	beq.w	800873e <_printf_float+0xba>
 800896c:	f104 031a 	add.w	r3, r4, #26
 8008970:	f04f 0b00 	mov.w	fp, #0
 8008974:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008978:	9306      	str	r3, [sp, #24]
 800897a:	e015      	b.n	80089a8 <_printf_float+0x324>
 800897c:	7fefffff 	.word	0x7fefffff
 8008980:	0800b1d8 	.word	0x0800b1d8
 8008984:	0800b1d4 	.word	0x0800b1d4
 8008988:	0800b1e0 	.word	0x0800b1e0
 800898c:	0800b1dc 	.word	0x0800b1dc
 8008990:	0800b1e4 	.word	0x0800b1e4
 8008994:	2301      	movs	r3, #1
 8008996:	9a06      	ldr	r2, [sp, #24]
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f aecd 	beq.w	800873e <_printf_float+0xba>
 80089a4:	f10b 0b01 	add.w	fp, fp, #1
 80089a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80089ac:	ebaa 0309 	sub.w	r3, sl, r9
 80089b0:	455b      	cmp	r3, fp
 80089b2:	dcef      	bgt.n	8008994 <_printf_float+0x310>
 80089b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089b8:	429a      	cmp	r2, r3
 80089ba:	44d0      	add	r8, sl
 80089bc:	db15      	blt.n	80089ea <_printf_float+0x366>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	07da      	lsls	r2, r3, #31
 80089c2:	d412      	bmi.n	80089ea <_printf_float+0x366>
 80089c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089c8:	eba3 020a 	sub.w	r2, r3, sl
 80089cc:	eba3 0a01 	sub.w	sl, r3, r1
 80089d0:	4592      	cmp	sl, r2
 80089d2:	bfa8      	it	ge
 80089d4:	4692      	movge	sl, r2
 80089d6:	f1ba 0f00 	cmp.w	sl, #0
 80089da:	dc0e      	bgt.n	80089fa <_printf_float+0x376>
 80089dc:	f04f 0800 	mov.w	r8, #0
 80089e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089e4:	f104 091a 	add.w	r9, r4, #26
 80089e8:	e019      	b.n	8008a1e <_printf_float+0x39a>
 80089ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	d1e5      	bne.n	80089c4 <_printf_float+0x340>
 80089f8:	e6a1      	b.n	800873e <_printf_float+0xba>
 80089fa:	4653      	mov	r3, sl
 80089fc:	4642      	mov	r2, r8
 80089fe:	4631      	mov	r1, r6
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	3001      	adds	r0, #1
 8008a06:	d1e9      	bne.n	80089dc <_printf_float+0x358>
 8008a08:	e699      	b.n	800873e <_printf_float+0xba>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	464a      	mov	r2, r9
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b8      	blx	r7
 8008a14:	3001      	adds	r0, #1
 8008a16:	f43f ae92 	beq.w	800873e <_printf_float+0xba>
 8008a1a:	f108 0801 	add.w	r8, r8, #1
 8008a1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a22:	1a9b      	subs	r3, r3, r2
 8008a24:	eba3 030a 	sub.w	r3, r3, sl
 8008a28:	4543      	cmp	r3, r8
 8008a2a:	dcee      	bgt.n	8008a0a <_printf_float+0x386>
 8008a2c:	e74a      	b.n	80088c4 <_printf_float+0x240>
 8008a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a30:	2a01      	cmp	r2, #1
 8008a32:	dc01      	bgt.n	8008a38 <_printf_float+0x3b4>
 8008a34:	07db      	lsls	r3, r3, #31
 8008a36:	d53a      	bpl.n	8008aae <_printf_float+0x42a>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4642      	mov	r2, r8
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	f43f ae7b 	beq.w	800873e <_printf_float+0xba>
 8008a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	f108 0801 	add.w	r8, r8, #1
 8008a58:	f43f ae71 	beq.w	800873e <_printf_float+0xba>
 8008a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f103 3aff 	add.w	sl, r3, #4294967295
 8008a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f7f8 f855 	bl	8000b18 <__aeabi_dcmpeq>
 8008a6e:	b9c8      	cbnz	r0, 8008aa4 <_printf_float+0x420>
 8008a70:	4653      	mov	r3, sl
 8008a72:	4642      	mov	r2, r8
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d10e      	bne.n	8008a9c <_printf_float+0x418>
 8008a7e:	e65e      	b.n	800873e <_printf_float+0xba>
 8008a80:	2301      	movs	r3, #1
 8008a82:	4652      	mov	r2, sl
 8008a84:	4631      	mov	r1, r6
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f43f ae57 	beq.w	800873e <_printf_float+0xba>
 8008a90:	f108 0801 	add.w	r8, r8, #1
 8008a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a96:	3b01      	subs	r3, #1
 8008a98:	4543      	cmp	r3, r8
 8008a9a:	dcf1      	bgt.n	8008a80 <_printf_float+0x3fc>
 8008a9c:	464b      	mov	r3, r9
 8008a9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008aa2:	e6de      	b.n	8008862 <_printf_float+0x1de>
 8008aa4:	f04f 0800 	mov.w	r8, #0
 8008aa8:	f104 0a1a 	add.w	sl, r4, #26
 8008aac:	e7f2      	b.n	8008a94 <_printf_float+0x410>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e7df      	b.n	8008a72 <_printf_float+0x3ee>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	464a      	mov	r2, r9
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	f43f ae3e 	beq.w	800873e <_printf_float+0xba>
 8008ac2:	f108 0801 	add.w	r8, r8, #1
 8008ac6:	68e3      	ldr	r3, [r4, #12]
 8008ac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aca:	1a9b      	subs	r3, r3, r2
 8008acc:	4543      	cmp	r3, r8
 8008ace:	dcf0      	bgt.n	8008ab2 <_printf_float+0x42e>
 8008ad0:	e6fc      	b.n	80088cc <_printf_float+0x248>
 8008ad2:	f04f 0800 	mov.w	r8, #0
 8008ad6:	f104 0919 	add.w	r9, r4, #25
 8008ada:	e7f4      	b.n	8008ac6 <_printf_float+0x442>
 8008adc:	2900      	cmp	r1, #0
 8008ade:	f43f ae8b 	beq.w	80087f8 <_printf_float+0x174>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008ae8:	ab09      	add	r3, sp, #36	; 0x24
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	ec49 8b10 	vmov	d0, r8, r9
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	f8cd a004 	str.w	sl, [sp, #4]
 8008af6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008afa:	4628      	mov	r0, r5
 8008afc:	f7ff fd2d 	bl	800855a <__cvt>
 8008b00:	4680      	mov	r8, r0
 8008b02:	e648      	b.n	8008796 <_printf_float+0x112>

08008b04 <_printf_common>:
 8008b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b08:	4691      	mov	r9, r2
 8008b0a:	461f      	mov	r7, r3
 8008b0c:	688a      	ldr	r2, [r1, #8]
 8008b0e:	690b      	ldr	r3, [r1, #16]
 8008b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b14:	4293      	cmp	r3, r2
 8008b16:	bfb8      	it	lt
 8008b18:	4613      	movlt	r3, r2
 8008b1a:	f8c9 3000 	str.w	r3, [r9]
 8008b1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b22:	4606      	mov	r6, r0
 8008b24:	460c      	mov	r4, r1
 8008b26:	b112      	cbz	r2, 8008b2e <_printf_common+0x2a>
 8008b28:	3301      	adds	r3, #1
 8008b2a:	f8c9 3000 	str.w	r3, [r9]
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	0699      	lsls	r1, r3, #26
 8008b32:	bf42      	ittt	mi
 8008b34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b38:	3302      	addmi	r3, #2
 8008b3a:	f8c9 3000 	strmi.w	r3, [r9]
 8008b3e:	6825      	ldr	r5, [r4, #0]
 8008b40:	f015 0506 	ands.w	r5, r5, #6
 8008b44:	d107      	bne.n	8008b56 <_printf_common+0x52>
 8008b46:	f104 0a19 	add.w	sl, r4, #25
 8008b4a:	68e3      	ldr	r3, [r4, #12]
 8008b4c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b50:	1a9b      	subs	r3, r3, r2
 8008b52:	42ab      	cmp	r3, r5
 8008b54:	dc28      	bgt.n	8008ba8 <_printf_common+0xa4>
 8008b56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	3300      	adds	r3, #0
 8008b5e:	bf18      	it	ne
 8008b60:	2301      	movne	r3, #1
 8008b62:	0692      	lsls	r2, r2, #26
 8008b64:	d42d      	bmi.n	8008bc2 <_printf_common+0xbe>
 8008b66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	47c0      	blx	r8
 8008b70:	3001      	adds	r0, #1
 8008b72:	d020      	beq.n	8008bb6 <_printf_common+0xb2>
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	68e5      	ldr	r5, [r4, #12]
 8008b78:	f8d9 2000 	ldr.w	r2, [r9]
 8008b7c:	f003 0306 	and.w	r3, r3, #6
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	bf08      	it	eq
 8008b84:	1aad      	subeq	r5, r5, r2
 8008b86:	68a3      	ldr	r3, [r4, #8]
 8008b88:	6922      	ldr	r2, [r4, #16]
 8008b8a:	bf0c      	ite	eq
 8008b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b90:	2500      	movne	r5, #0
 8008b92:	4293      	cmp	r3, r2
 8008b94:	bfc4      	itt	gt
 8008b96:	1a9b      	subgt	r3, r3, r2
 8008b98:	18ed      	addgt	r5, r5, r3
 8008b9a:	f04f 0900 	mov.w	r9, #0
 8008b9e:	341a      	adds	r4, #26
 8008ba0:	454d      	cmp	r5, r9
 8008ba2:	d11a      	bne.n	8008bda <_printf_common+0xd6>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e008      	b.n	8008bba <_printf_common+0xb6>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	4652      	mov	r2, sl
 8008bac:	4639      	mov	r1, r7
 8008bae:	4630      	mov	r0, r6
 8008bb0:	47c0      	blx	r8
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d103      	bne.n	8008bbe <_printf_common+0xba>
 8008bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbe:	3501      	adds	r5, #1
 8008bc0:	e7c3      	b.n	8008b4a <_printf_common+0x46>
 8008bc2:	18e1      	adds	r1, r4, r3
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	2030      	movs	r0, #48	; 0x30
 8008bc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bcc:	4422      	add	r2, r4
 8008bce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	e7c5      	b.n	8008b66 <_printf_common+0x62>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4622      	mov	r2, r4
 8008bde:	4639      	mov	r1, r7
 8008be0:	4630      	mov	r0, r6
 8008be2:	47c0      	blx	r8
 8008be4:	3001      	adds	r0, #1
 8008be6:	d0e6      	beq.n	8008bb6 <_printf_common+0xb2>
 8008be8:	f109 0901 	add.w	r9, r9, #1
 8008bec:	e7d8      	b.n	8008ba0 <_printf_common+0x9c>
	...

08008bf0 <_printf_i>:
 8008bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	7e09      	ldrb	r1, [r1, #24]
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	296e      	cmp	r1, #110	; 0x6e
 8008c00:	4617      	mov	r7, r2
 8008c02:	4606      	mov	r6, r0
 8008c04:	4698      	mov	r8, r3
 8008c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c08:	f000 80b3 	beq.w	8008d72 <_printf_i+0x182>
 8008c0c:	d822      	bhi.n	8008c54 <_printf_i+0x64>
 8008c0e:	2963      	cmp	r1, #99	; 0x63
 8008c10:	d036      	beq.n	8008c80 <_printf_i+0x90>
 8008c12:	d80a      	bhi.n	8008c2a <_printf_i+0x3a>
 8008c14:	2900      	cmp	r1, #0
 8008c16:	f000 80b9 	beq.w	8008d8c <_printf_i+0x19c>
 8008c1a:	2958      	cmp	r1, #88	; 0x58
 8008c1c:	f000 8083 	beq.w	8008d26 <_printf_i+0x136>
 8008c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c28:	e032      	b.n	8008c90 <_printf_i+0xa0>
 8008c2a:	2964      	cmp	r1, #100	; 0x64
 8008c2c:	d001      	beq.n	8008c32 <_printf_i+0x42>
 8008c2e:	2969      	cmp	r1, #105	; 0x69
 8008c30:	d1f6      	bne.n	8008c20 <_printf_i+0x30>
 8008c32:	6820      	ldr	r0, [r4, #0]
 8008c34:	6813      	ldr	r3, [r2, #0]
 8008c36:	0605      	lsls	r5, r0, #24
 8008c38:	f103 0104 	add.w	r1, r3, #4
 8008c3c:	d52a      	bpl.n	8008c94 <_printf_i+0xa4>
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6011      	str	r1, [r2, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	da03      	bge.n	8008c4e <_printf_i+0x5e>
 8008c46:	222d      	movs	r2, #45	; 0x2d
 8008c48:	425b      	negs	r3, r3
 8008c4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c4e:	486f      	ldr	r0, [pc, #444]	; (8008e0c <_printf_i+0x21c>)
 8008c50:	220a      	movs	r2, #10
 8008c52:	e039      	b.n	8008cc8 <_printf_i+0xd8>
 8008c54:	2973      	cmp	r1, #115	; 0x73
 8008c56:	f000 809d 	beq.w	8008d94 <_printf_i+0x1a4>
 8008c5a:	d808      	bhi.n	8008c6e <_printf_i+0x7e>
 8008c5c:	296f      	cmp	r1, #111	; 0x6f
 8008c5e:	d020      	beq.n	8008ca2 <_printf_i+0xb2>
 8008c60:	2970      	cmp	r1, #112	; 0x70
 8008c62:	d1dd      	bne.n	8008c20 <_printf_i+0x30>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	f043 0320 	orr.w	r3, r3, #32
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	e003      	b.n	8008c76 <_printf_i+0x86>
 8008c6e:	2975      	cmp	r1, #117	; 0x75
 8008c70:	d017      	beq.n	8008ca2 <_printf_i+0xb2>
 8008c72:	2978      	cmp	r1, #120	; 0x78
 8008c74:	d1d4      	bne.n	8008c20 <_printf_i+0x30>
 8008c76:	2378      	movs	r3, #120	; 0x78
 8008c78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c7c:	4864      	ldr	r0, [pc, #400]	; (8008e10 <_printf_i+0x220>)
 8008c7e:	e055      	b.n	8008d2c <_printf_i+0x13c>
 8008c80:	6813      	ldr	r3, [r2, #0]
 8008c82:	1d19      	adds	r1, r3, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6011      	str	r1, [r2, #0]
 8008c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c90:	2301      	movs	r3, #1
 8008c92:	e08c      	b.n	8008dae <_printf_i+0x1be>
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6011      	str	r1, [r2, #0]
 8008c98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c9c:	bf18      	it	ne
 8008c9e:	b21b      	sxthne	r3, r3
 8008ca0:	e7cf      	b.n	8008c42 <_printf_i+0x52>
 8008ca2:	6813      	ldr	r3, [r2, #0]
 8008ca4:	6825      	ldr	r5, [r4, #0]
 8008ca6:	1d18      	adds	r0, r3, #4
 8008ca8:	6010      	str	r0, [r2, #0]
 8008caa:	0628      	lsls	r0, r5, #24
 8008cac:	d501      	bpl.n	8008cb2 <_printf_i+0xc2>
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	e002      	b.n	8008cb8 <_printf_i+0xc8>
 8008cb2:	0668      	lsls	r0, r5, #25
 8008cb4:	d5fb      	bpl.n	8008cae <_printf_i+0xbe>
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	4854      	ldr	r0, [pc, #336]	; (8008e0c <_printf_i+0x21c>)
 8008cba:	296f      	cmp	r1, #111	; 0x6f
 8008cbc:	bf14      	ite	ne
 8008cbe:	220a      	movne	r2, #10
 8008cc0:	2208      	moveq	r2, #8
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cc8:	6865      	ldr	r5, [r4, #4]
 8008cca:	60a5      	str	r5, [r4, #8]
 8008ccc:	2d00      	cmp	r5, #0
 8008cce:	f2c0 8095 	blt.w	8008dfc <_printf_i+0x20c>
 8008cd2:	6821      	ldr	r1, [r4, #0]
 8008cd4:	f021 0104 	bic.w	r1, r1, #4
 8008cd8:	6021      	str	r1, [r4, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d13d      	bne.n	8008d5a <_printf_i+0x16a>
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	f040 808e 	bne.w	8008e00 <_printf_i+0x210>
 8008ce4:	4665      	mov	r5, ip
 8008ce6:	2a08      	cmp	r2, #8
 8008ce8:	d10b      	bne.n	8008d02 <_printf_i+0x112>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	07db      	lsls	r3, r3, #31
 8008cee:	d508      	bpl.n	8008d02 <_printf_i+0x112>
 8008cf0:	6923      	ldr	r3, [r4, #16]
 8008cf2:	6862      	ldr	r2, [r4, #4]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	bfde      	ittt	le
 8008cf8:	2330      	movle	r3, #48	; 0x30
 8008cfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d02:	ebac 0305 	sub.w	r3, ip, r5
 8008d06:	6123      	str	r3, [r4, #16]
 8008d08:	f8cd 8000 	str.w	r8, [sp]
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	aa03      	add	r2, sp, #12
 8008d10:	4621      	mov	r1, r4
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7ff fef6 	bl	8008b04 <_printf_common>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d14d      	bne.n	8008db8 <_printf_i+0x1c8>
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d20:	b005      	add	sp, #20
 8008d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d26:	4839      	ldr	r0, [pc, #228]	; (8008e0c <_printf_i+0x21c>)
 8008d28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d2c:	6813      	ldr	r3, [r2, #0]
 8008d2e:	6821      	ldr	r1, [r4, #0]
 8008d30:	1d1d      	adds	r5, r3, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6015      	str	r5, [r2, #0]
 8008d36:	060a      	lsls	r2, r1, #24
 8008d38:	d50b      	bpl.n	8008d52 <_printf_i+0x162>
 8008d3a:	07ca      	lsls	r2, r1, #31
 8008d3c:	bf44      	itt	mi
 8008d3e:	f041 0120 	orrmi.w	r1, r1, #32
 8008d42:	6021      	strmi	r1, [r4, #0]
 8008d44:	b91b      	cbnz	r3, 8008d4e <_printf_i+0x15e>
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	f022 0220 	bic.w	r2, r2, #32
 8008d4c:	6022      	str	r2, [r4, #0]
 8008d4e:	2210      	movs	r2, #16
 8008d50:	e7b7      	b.n	8008cc2 <_printf_i+0xd2>
 8008d52:	064d      	lsls	r5, r1, #25
 8008d54:	bf48      	it	mi
 8008d56:	b29b      	uxthmi	r3, r3
 8008d58:	e7ef      	b.n	8008d3a <_printf_i+0x14a>
 8008d5a:	4665      	mov	r5, ip
 8008d5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d60:	fb02 3311 	mls	r3, r2, r1, r3
 8008d64:	5cc3      	ldrb	r3, [r0, r3]
 8008d66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	2900      	cmp	r1, #0
 8008d6e:	d1f5      	bne.n	8008d5c <_printf_i+0x16c>
 8008d70:	e7b9      	b.n	8008ce6 <_printf_i+0xf6>
 8008d72:	6813      	ldr	r3, [r2, #0]
 8008d74:	6825      	ldr	r5, [r4, #0]
 8008d76:	6961      	ldr	r1, [r4, #20]
 8008d78:	1d18      	adds	r0, r3, #4
 8008d7a:	6010      	str	r0, [r2, #0]
 8008d7c:	0628      	lsls	r0, r5, #24
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	d501      	bpl.n	8008d86 <_printf_i+0x196>
 8008d82:	6019      	str	r1, [r3, #0]
 8008d84:	e002      	b.n	8008d8c <_printf_i+0x19c>
 8008d86:	066a      	lsls	r2, r5, #25
 8008d88:	d5fb      	bpl.n	8008d82 <_printf_i+0x192>
 8008d8a:	8019      	strh	r1, [r3, #0]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	4665      	mov	r5, ip
 8008d92:	e7b9      	b.n	8008d08 <_printf_i+0x118>
 8008d94:	6813      	ldr	r3, [r2, #0]
 8008d96:	1d19      	adds	r1, r3, #4
 8008d98:	6011      	str	r1, [r2, #0]
 8008d9a:	681d      	ldr	r5, [r3, #0]
 8008d9c:	6862      	ldr	r2, [r4, #4]
 8008d9e:	2100      	movs	r1, #0
 8008da0:	4628      	mov	r0, r5
 8008da2:	f7f7 fa45 	bl	8000230 <memchr>
 8008da6:	b108      	cbz	r0, 8008dac <_printf_i+0x1bc>
 8008da8:	1b40      	subs	r0, r0, r5
 8008daa:	6060      	str	r0, [r4, #4]
 8008dac:	6863      	ldr	r3, [r4, #4]
 8008dae:	6123      	str	r3, [r4, #16]
 8008db0:	2300      	movs	r3, #0
 8008db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db6:	e7a7      	b.n	8008d08 <_printf_i+0x118>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	462a      	mov	r2, r5
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	47c0      	blx	r8
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d0aa      	beq.n	8008d1c <_printf_i+0x12c>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	079b      	lsls	r3, r3, #30
 8008dca:	d413      	bmi.n	8008df4 <_printf_i+0x204>
 8008dcc:	68e0      	ldr	r0, [r4, #12]
 8008dce:	9b03      	ldr	r3, [sp, #12]
 8008dd0:	4298      	cmp	r0, r3
 8008dd2:	bfb8      	it	lt
 8008dd4:	4618      	movlt	r0, r3
 8008dd6:	e7a3      	b.n	8008d20 <_printf_i+0x130>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	464a      	mov	r2, r9
 8008ddc:	4639      	mov	r1, r7
 8008dde:	4630      	mov	r0, r6
 8008de0:	47c0      	blx	r8
 8008de2:	3001      	adds	r0, #1
 8008de4:	d09a      	beq.n	8008d1c <_printf_i+0x12c>
 8008de6:	3501      	adds	r5, #1
 8008de8:	68e3      	ldr	r3, [r4, #12]
 8008dea:	9a03      	ldr	r2, [sp, #12]
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	42ab      	cmp	r3, r5
 8008df0:	dcf2      	bgt.n	8008dd8 <_printf_i+0x1e8>
 8008df2:	e7eb      	b.n	8008dcc <_printf_i+0x1dc>
 8008df4:	2500      	movs	r5, #0
 8008df6:	f104 0919 	add.w	r9, r4, #25
 8008dfa:	e7f5      	b.n	8008de8 <_printf_i+0x1f8>
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1ac      	bne.n	8008d5a <_printf_i+0x16a>
 8008e00:	7803      	ldrb	r3, [r0, #0]
 8008e02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e0a:	e76c      	b.n	8008ce6 <_printf_i+0xf6>
 8008e0c:	0800b1e6 	.word	0x0800b1e6
 8008e10:	0800b1f7 	.word	0x0800b1f7

08008e14 <iprintf>:
 8008e14:	b40f      	push	{r0, r1, r2, r3}
 8008e16:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <iprintf+0x2c>)
 8008e18:	b513      	push	{r0, r1, r4, lr}
 8008e1a:	681c      	ldr	r4, [r3, #0]
 8008e1c:	b124      	cbz	r4, 8008e28 <iprintf+0x14>
 8008e1e:	69a3      	ldr	r3, [r4, #24]
 8008e20:	b913      	cbnz	r3, 8008e28 <iprintf+0x14>
 8008e22:	4620      	mov	r0, r4
 8008e24:	f001 f888 	bl	8009f38 <__sinit>
 8008e28:	ab05      	add	r3, sp, #20
 8008e2a:	9a04      	ldr	r2, [sp, #16]
 8008e2c:	68a1      	ldr	r1, [r4, #8]
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	4620      	mov	r0, r4
 8008e32:	f001 fe93 	bl	800ab5c <_vfiprintf_r>
 8008e36:	b002      	add	sp, #8
 8008e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e3c:	b004      	add	sp, #16
 8008e3e:	4770      	bx	lr
 8008e40:	2000001c 	.word	0x2000001c

08008e44 <_puts_r>:
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	460e      	mov	r6, r1
 8008e48:	4605      	mov	r5, r0
 8008e4a:	b118      	cbz	r0, 8008e54 <_puts_r+0x10>
 8008e4c:	6983      	ldr	r3, [r0, #24]
 8008e4e:	b90b      	cbnz	r3, 8008e54 <_puts_r+0x10>
 8008e50:	f001 f872 	bl	8009f38 <__sinit>
 8008e54:	69ab      	ldr	r3, [r5, #24]
 8008e56:	68ac      	ldr	r4, [r5, #8]
 8008e58:	b913      	cbnz	r3, 8008e60 <_puts_r+0x1c>
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f001 f86c 	bl	8009f38 <__sinit>
 8008e60:	4b23      	ldr	r3, [pc, #140]	; (8008ef0 <_puts_r+0xac>)
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d117      	bne.n	8008e96 <_puts_r+0x52>
 8008e66:	686c      	ldr	r4, [r5, #4]
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	071b      	lsls	r3, r3, #28
 8008e6c:	d51d      	bpl.n	8008eaa <_puts_r+0x66>
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	b1db      	cbz	r3, 8008eaa <_puts_r+0x66>
 8008e72:	3e01      	subs	r6, #1
 8008e74:	68a3      	ldr	r3, [r4, #8]
 8008e76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	60a3      	str	r3, [r4, #8]
 8008e7e:	b9e9      	cbnz	r1, 8008ebc <_puts_r+0x78>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	da2e      	bge.n	8008ee2 <_puts_r+0x9e>
 8008e84:	4622      	mov	r2, r4
 8008e86:	210a      	movs	r1, #10
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f000 f85f 	bl	8008f4c <__swbuf_r>
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d011      	beq.n	8008eb6 <_puts_r+0x72>
 8008e92:	200a      	movs	r0, #10
 8008e94:	e011      	b.n	8008eba <_puts_r+0x76>
 8008e96:	4b17      	ldr	r3, [pc, #92]	; (8008ef4 <_puts_r+0xb0>)
 8008e98:	429c      	cmp	r4, r3
 8008e9a:	d101      	bne.n	8008ea0 <_puts_r+0x5c>
 8008e9c:	68ac      	ldr	r4, [r5, #8]
 8008e9e:	e7e3      	b.n	8008e68 <_puts_r+0x24>
 8008ea0:	4b15      	ldr	r3, [pc, #84]	; (8008ef8 <_puts_r+0xb4>)
 8008ea2:	429c      	cmp	r4, r3
 8008ea4:	bf08      	it	eq
 8008ea6:	68ec      	ldreq	r4, [r5, #12]
 8008ea8:	e7de      	b.n	8008e68 <_puts_r+0x24>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4628      	mov	r0, r5
 8008eae:	f000 f89f 	bl	8008ff0 <__swsetup_r>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d0dd      	beq.n	8008e72 <_puts_r+0x2e>
 8008eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	da04      	bge.n	8008eca <_puts_r+0x86>
 8008ec0:	69a2      	ldr	r2, [r4, #24]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	dc06      	bgt.n	8008ed4 <_puts_r+0x90>
 8008ec6:	290a      	cmp	r1, #10
 8008ec8:	d004      	beq.n	8008ed4 <_puts_r+0x90>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	7019      	strb	r1, [r3, #0]
 8008ed2:	e7cf      	b.n	8008e74 <_puts_r+0x30>
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f000 f838 	bl	8008f4c <__swbuf_r>
 8008edc:	3001      	adds	r0, #1
 8008ede:	d1c9      	bne.n	8008e74 <_puts_r+0x30>
 8008ee0:	e7e9      	b.n	8008eb6 <_puts_r+0x72>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	200a      	movs	r0, #10
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	6022      	str	r2, [r4, #0]
 8008eea:	7018      	strb	r0, [r3, #0]
 8008eec:	e7e5      	b.n	8008eba <_puts_r+0x76>
 8008eee:	bf00      	nop
 8008ef0:	0800b238 	.word	0x0800b238
 8008ef4:	0800b258 	.word	0x0800b258
 8008ef8:	0800b218 	.word	0x0800b218

08008efc <puts>:
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <puts+0xc>)
 8008efe:	4601      	mov	r1, r0
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	f7ff bf9f 	b.w	8008e44 <_puts_r>
 8008f06:	bf00      	nop
 8008f08:	2000001c 	.word	0x2000001c

08008f0c <siprintf>:
 8008f0c:	b40e      	push	{r1, r2, r3}
 8008f0e:	b500      	push	{lr}
 8008f10:	b09c      	sub	sp, #112	; 0x70
 8008f12:	ab1d      	add	r3, sp, #116	; 0x74
 8008f14:	9002      	str	r0, [sp, #8]
 8008f16:	9006      	str	r0, [sp, #24]
 8008f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f1c:	4809      	ldr	r0, [pc, #36]	; (8008f44 <siprintf+0x38>)
 8008f1e:	9107      	str	r1, [sp, #28]
 8008f20:	9104      	str	r1, [sp, #16]
 8008f22:	4909      	ldr	r1, [pc, #36]	; (8008f48 <siprintf+0x3c>)
 8008f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f28:	9105      	str	r1, [sp, #20]
 8008f2a:	6800      	ldr	r0, [r0, #0]
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	a902      	add	r1, sp, #8
 8008f30:	f001 fcf2 	bl	800a918 <_svfiprintf_r>
 8008f34:	9b02      	ldr	r3, [sp, #8]
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
 8008f3a:	b01c      	add	sp, #112	; 0x70
 8008f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f40:	b003      	add	sp, #12
 8008f42:	4770      	bx	lr
 8008f44:	2000001c 	.word	0x2000001c
 8008f48:	ffff0208 	.word	0xffff0208

08008f4c <__swbuf_r>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	460e      	mov	r6, r1
 8008f50:	4614      	mov	r4, r2
 8008f52:	4605      	mov	r5, r0
 8008f54:	b118      	cbz	r0, 8008f5e <__swbuf_r+0x12>
 8008f56:	6983      	ldr	r3, [r0, #24]
 8008f58:	b90b      	cbnz	r3, 8008f5e <__swbuf_r+0x12>
 8008f5a:	f000 ffed 	bl	8009f38 <__sinit>
 8008f5e:	4b21      	ldr	r3, [pc, #132]	; (8008fe4 <__swbuf_r+0x98>)
 8008f60:	429c      	cmp	r4, r3
 8008f62:	d12a      	bne.n	8008fba <__swbuf_r+0x6e>
 8008f64:	686c      	ldr	r4, [r5, #4]
 8008f66:	69a3      	ldr	r3, [r4, #24]
 8008f68:	60a3      	str	r3, [r4, #8]
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	071a      	lsls	r2, r3, #28
 8008f6e:	d52e      	bpl.n	8008fce <__swbuf_r+0x82>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	b363      	cbz	r3, 8008fce <__swbuf_r+0x82>
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	6820      	ldr	r0, [r4, #0]
 8008f78:	1ac0      	subs	r0, r0, r3
 8008f7a:	6963      	ldr	r3, [r4, #20]
 8008f7c:	b2f6      	uxtb	r6, r6
 8008f7e:	4283      	cmp	r3, r0
 8008f80:	4637      	mov	r7, r6
 8008f82:	dc04      	bgt.n	8008f8e <__swbuf_r+0x42>
 8008f84:	4621      	mov	r1, r4
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 ff6c 	bl	8009e64 <_fflush_r>
 8008f8c:	bb28      	cbnz	r0, 8008fda <__swbuf_r+0x8e>
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	60a3      	str	r3, [r4, #8]
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	6022      	str	r2, [r4, #0]
 8008f9a:	701e      	strb	r6, [r3, #0]
 8008f9c:	6963      	ldr	r3, [r4, #20]
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	4283      	cmp	r3, r0
 8008fa2:	d004      	beq.n	8008fae <__swbuf_r+0x62>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	07db      	lsls	r3, r3, #31
 8008fa8:	d519      	bpl.n	8008fde <__swbuf_r+0x92>
 8008faa:	2e0a      	cmp	r6, #10
 8008fac:	d117      	bne.n	8008fde <__swbuf_r+0x92>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f000 ff57 	bl	8009e64 <_fflush_r>
 8008fb6:	b190      	cbz	r0, 8008fde <__swbuf_r+0x92>
 8008fb8:	e00f      	b.n	8008fda <__swbuf_r+0x8e>
 8008fba:	4b0b      	ldr	r3, [pc, #44]	; (8008fe8 <__swbuf_r+0x9c>)
 8008fbc:	429c      	cmp	r4, r3
 8008fbe:	d101      	bne.n	8008fc4 <__swbuf_r+0x78>
 8008fc0:	68ac      	ldr	r4, [r5, #8]
 8008fc2:	e7d0      	b.n	8008f66 <__swbuf_r+0x1a>
 8008fc4:	4b09      	ldr	r3, [pc, #36]	; (8008fec <__swbuf_r+0xa0>)
 8008fc6:	429c      	cmp	r4, r3
 8008fc8:	bf08      	it	eq
 8008fca:	68ec      	ldreq	r4, [r5, #12]
 8008fcc:	e7cb      	b.n	8008f66 <__swbuf_r+0x1a>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f000 f80d 	bl	8008ff0 <__swsetup_r>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d0cc      	beq.n	8008f74 <__swbuf_r+0x28>
 8008fda:	f04f 37ff 	mov.w	r7, #4294967295
 8008fde:	4638      	mov	r0, r7
 8008fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	0800b238 	.word	0x0800b238
 8008fe8:	0800b258 	.word	0x0800b258
 8008fec:	0800b218 	.word	0x0800b218

08008ff0 <__swsetup_r>:
 8008ff0:	4b32      	ldr	r3, [pc, #200]	; (80090bc <__swsetup_r+0xcc>)
 8008ff2:	b570      	push	{r4, r5, r6, lr}
 8008ff4:	681d      	ldr	r5, [r3, #0]
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	b125      	cbz	r5, 8009006 <__swsetup_r+0x16>
 8008ffc:	69ab      	ldr	r3, [r5, #24]
 8008ffe:	b913      	cbnz	r3, 8009006 <__swsetup_r+0x16>
 8009000:	4628      	mov	r0, r5
 8009002:	f000 ff99 	bl	8009f38 <__sinit>
 8009006:	4b2e      	ldr	r3, [pc, #184]	; (80090c0 <__swsetup_r+0xd0>)
 8009008:	429c      	cmp	r4, r3
 800900a:	d10f      	bne.n	800902c <__swsetup_r+0x3c>
 800900c:	686c      	ldr	r4, [r5, #4]
 800900e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009012:	b29a      	uxth	r2, r3
 8009014:	0715      	lsls	r5, r2, #28
 8009016:	d42c      	bmi.n	8009072 <__swsetup_r+0x82>
 8009018:	06d0      	lsls	r0, r2, #27
 800901a:	d411      	bmi.n	8009040 <__swsetup_r+0x50>
 800901c:	2209      	movs	r2, #9
 800901e:	6032      	str	r2, [r6, #0]
 8009020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009024:	81a3      	strh	r3, [r4, #12]
 8009026:	f04f 30ff 	mov.w	r0, #4294967295
 800902a:	e03e      	b.n	80090aa <__swsetup_r+0xba>
 800902c:	4b25      	ldr	r3, [pc, #148]	; (80090c4 <__swsetup_r+0xd4>)
 800902e:	429c      	cmp	r4, r3
 8009030:	d101      	bne.n	8009036 <__swsetup_r+0x46>
 8009032:	68ac      	ldr	r4, [r5, #8]
 8009034:	e7eb      	b.n	800900e <__swsetup_r+0x1e>
 8009036:	4b24      	ldr	r3, [pc, #144]	; (80090c8 <__swsetup_r+0xd8>)
 8009038:	429c      	cmp	r4, r3
 800903a:	bf08      	it	eq
 800903c:	68ec      	ldreq	r4, [r5, #12]
 800903e:	e7e6      	b.n	800900e <__swsetup_r+0x1e>
 8009040:	0751      	lsls	r1, r2, #29
 8009042:	d512      	bpl.n	800906a <__swsetup_r+0x7a>
 8009044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009046:	b141      	cbz	r1, 800905a <__swsetup_r+0x6a>
 8009048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800904c:	4299      	cmp	r1, r3
 800904e:	d002      	beq.n	8009056 <__swsetup_r+0x66>
 8009050:	4630      	mov	r0, r6
 8009052:	f001 fb5f 	bl	800a714 <_free_r>
 8009056:	2300      	movs	r3, #0
 8009058:	6363      	str	r3, [r4, #52]	; 0x34
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	2300      	movs	r3, #0
 8009064:	6063      	str	r3, [r4, #4]
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	f043 0308 	orr.w	r3, r3, #8
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	b94b      	cbnz	r3, 800908a <__swsetup_r+0x9a>
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800907c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009080:	d003      	beq.n	800908a <__swsetup_r+0x9a>
 8009082:	4621      	mov	r1, r4
 8009084:	4630      	mov	r0, r6
 8009086:	f001 f813 	bl	800a0b0 <__smakebuf_r>
 800908a:	89a2      	ldrh	r2, [r4, #12]
 800908c:	f012 0301 	ands.w	r3, r2, #1
 8009090:	d00c      	beq.n	80090ac <__swsetup_r+0xbc>
 8009092:	2300      	movs	r3, #0
 8009094:	60a3      	str	r3, [r4, #8]
 8009096:	6963      	ldr	r3, [r4, #20]
 8009098:	425b      	negs	r3, r3
 800909a:	61a3      	str	r3, [r4, #24]
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	b953      	cbnz	r3, 80090b6 <__swsetup_r+0xc6>
 80090a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80090a8:	d1ba      	bne.n	8009020 <__swsetup_r+0x30>
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	0792      	lsls	r2, r2, #30
 80090ae:	bf58      	it	pl
 80090b0:	6963      	ldrpl	r3, [r4, #20]
 80090b2:	60a3      	str	r3, [r4, #8]
 80090b4:	e7f2      	b.n	800909c <__swsetup_r+0xac>
 80090b6:	2000      	movs	r0, #0
 80090b8:	e7f7      	b.n	80090aa <__swsetup_r+0xba>
 80090ba:	bf00      	nop
 80090bc:	2000001c 	.word	0x2000001c
 80090c0:	0800b238 	.word	0x0800b238
 80090c4:	0800b258 	.word	0x0800b258
 80090c8:	0800b218 	.word	0x0800b218

080090cc <quorem>:
 80090cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d0:	6903      	ldr	r3, [r0, #16]
 80090d2:	690c      	ldr	r4, [r1, #16]
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	4680      	mov	r8, r0
 80090d8:	f2c0 8082 	blt.w	80091e0 <quorem+0x114>
 80090dc:	3c01      	subs	r4, #1
 80090de:	f101 0714 	add.w	r7, r1, #20
 80090e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80090e6:	f100 0614 	add.w	r6, r0, #20
 80090ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80090ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80090f2:	eb06 030c 	add.w	r3, r6, ip
 80090f6:	3501      	adds	r5, #1
 80090f8:	eb07 090c 	add.w	r9, r7, ip
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8009102:	b395      	cbz	r5, 800916a <quorem+0x9e>
 8009104:	f04f 0a00 	mov.w	sl, #0
 8009108:	4638      	mov	r0, r7
 800910a:	46b6      	mov	lr, r6
 800910c:	46d3      	mov	fp, sl
 800910e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009112:	b293      	uxth	r3, r2
 8009114:	fb05 a303 	mla	r3, r5, r3, sl
 8009118:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800911c:	b29b      	uxth	r3, r3
 800911e:	ebab 0303 	sub.w	r3, fp, r3
 8009122:	0c12      	lsrs	r2, r2, #16
 8009124:	f8de b000 	ldr.w	fp, [lr]
 8009128:	fb05 a202 	mla	r2, r5, r2, sl
 800912c:	fa13 f38b 	uxtah	r3, r3, fp
 8009130:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009134:	fa1f fb82 	uxth.w	fp, r2
 8009138:	f8de 2000 	ldr.w	r2, [lr]
 800913c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009144:	b29b      	uxth	r3, r3
 8009146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800914a:	4581      	cmp	r9, r0
 800914c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009150:	f84e 3b04 	str.w	r3, [lr], #4
 8009154:	d2db      	bcs.n	800910e <quorem+0x42>
 8009156:	f856 300c 	ldr.w	r3, [r6, ip]
 800915a:	b933      	cbnz	r3, 800916a <quorem+0x9e>
 800915c:	9b01      	ldr	r3, [sp, #4]
 800915e:	3b04      	subs	r3, #4
 8009160:	429e      	cmp	r6, r3
 8009162:	461a      	mov	r2, r3
 8009164:	d330      	bcc.n	80091c8 <quorem+0xfc>
 8009166:	f8c8 4010 	str.w	r4, [r8, #16]
 800916a:	4640      	mov	r0, r8
 800916c:	f001 f9fe 	bl	800a56c <__mcmp>
 8009170:	2800      	cmp	r0, #0
 8009172:	db25      	blt.n	80091c0 <quorem+0xf4>
 8009174:	3501      	adds	r5, #1
 8009176:	4630      	mov	r0, r6
 8009178:	f04f 0c00 	mov.w	ip, #0
 800917c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009180:	f8d0 e000 	ldr.w	lr, [r0]
 8009184:	b293      	uxth	r3, r2
 8009186:	ebac 0303 	sub.w	r3, ip, r3
 800918a:	0c12      	lsrs	r2, r2, #16
 800918c:	fa13 f38e 	uxtah	r3, r3, lr
 8009190:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009198:	b29b      	uxth	r3, r3
 800919a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800919e:	45b9      	cmp	r9, r7
 80091a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091a4:	f840 3b04 	str.w	r3, [r0], #4
 80091a8:	d2e8      	bcs.n	800917c <quorem+0xb0>
 80091aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80091ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80091b2:	b92a      	cbnz	r2, 80091c0 <quorem+0xf4>
 80091b4:	3b04      	subs	r3, #4
 80091b6:	429e      	cmp	r6, r3
 80091b8:	461a      	mov	r2, r3
 80091ba:	d30b      	bcc.n	80091d4 <quorem+0x108>
 80091bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80091c0:	4628      	mov	r0, r5
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	6812      	ldr	r2, [r2, #0]
 80091ca:	3b04      	subs	r3, #4
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	d1ca      	bne.n	8009166 <quorem+0x9a>
 80091d0:	3c01      	subs	r4, #1
 80091d2:	e7c5      	b.n	8009160 <quorem+0x94>
 80091d4:	6812      	ldr	r2, [r2, #0]
 80091d6:	3b04      	subs	r3, #4
 80091d8:	2a00      	cmp	r2, #0
 80091da:	d1ef      	bne.n	80091bc <quorem+0xf0>
 80091dc:	3c01      	subs	r4, #1
 80091de:	e7ea      	b.n	80091b6 <quorem+0xea>
 80091e0:	2000      	movs	r0, #0
 80091e2:	e7ee      	b.n	80091c2 <quorem+0xf6>
 80091e4:	0000      	movs	r0, r0
	...

080091e8 <_dtoa_r>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	ec57 6b10 	vmov	r6, r7, d0
 80091f0:	b097      	sub	sp, #92	; 0x5c
 80091f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091f4:	9106      	str	r1, [sp, #24]
 80091f6:	4604      	mov	r4, r0
 80091f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80091fa:	9312      	str	r3, [sp, #72]	; 0x48
 80091fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009200:	e9cd 6700 	strd	r6, r7, [sp]
 8009204:	b93d      	cbnz	r5, 8009216 <_dtoa_r+0x2e>
 8009206:	2010      	movs	r0, #16
 8009208:	f000 ff92 	bl	800a130 <malloc>
 800920c:	6260      	str	r0, [r4, #36]	; 0x24
 800920e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009212:	6005      	str	r5, [r0, #0]
 8009214:	60c5      	str	r5, [r0, #12]
 8009216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009218:	6819      	ldr	r1, [r3, #0]
 800921a:	b151      	cbz	r1, 8009232 <_dtoa_r+0x4a>
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	604a      	str	r2, [r1, #4]
 8009220:	2301      	movs	r3, #1
 8009222:	4093      	lsls	r3, r2
 8009224:	608b      	str	r3, [r1, #8]
 8009226:	4620      	mov	r0, r4
 8009228:	f000 ffbe 	bl	800a1a8 <_Bfree>
 800922c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	1e3b      	subs	r3, r7, #0
 8009234:	bfbb      	ittet	lt
 8009236:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800923a:	9301      	strlt	r3, [sp, #4]
 800923c:	2300      	movge	r3, #0
 800923e:	2201      	movlt	r2, #1
 8009240:	bfac      	ite	ge
 8009242:	f8c8 3000 	strge.w	r3, [r8]
 8009246:	f8c8 2000 	strlt.w	r2, [r8]
 800924a:	4baf      	ldr	r3, [pc, #700]	; (8009508 <_dtoa_r+0x320>)
 800924c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009250:	ea33 0308 	bics.w	r3, r3, r8
 8009254:	d114      	bne.n	8009280 <_dtoa_r+0x98>
 8009256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009258:	f242 730f 	movw	r3, #9999	; 0x270f
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	9b00      	ldr	r3, [sp, #0]
 8009260:	b923      	cbnz	r3, 800926c <_dtoa_r+0x84>
 8009262:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009266:	2800      	cmp	r0, #0
 8009268:	f000 8542 	beq.w	8009cf0 <_dtoa_r+0xb08>
 800926c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800926e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800951c <_dtoa_r+0x334>
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 8544 	beq.w	8009d00 <_dtoa_r+0xb18>
 8009278:	f10b 0303 	add.w	r3, fp, #3
 800927c:	f000 bd3e 	b.w	8009cfc <_dtoa_r+0xb14>
 8009280:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009284:	2200      	movs	r2, #0
 8009286:	2300      	movs	r3, #0
 8009288:	4630      	mov	r0, r6
 800928a:	4639      	mov	r1, r7
 800928c:	f7f7 fc44 	bl	8000b18 <__aeabi_dcmpeq>
 8009290:	4681      	mov	r9, r0
 8009292:	b168      	cbz	r0, 80092b0 <_dtoa_r+0xc8>
 8009294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009296:	2301      	movs	r3, #1
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 8524 	beq.w	8009cea <_dtoa_r+0xb02>
 80092a2:	4b9a      	ldr	r3, [pc, #616]	; (800950c <_dtoa_r+0x324>)
 80092a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	f000 bd28 	b.w	8009d00 <_dtoa_r+0xb18>
 80092b0:	aa14      	add	r2, sp, #80	; 0x50
 80092b2:	a915      	add	r1, sp, #84	; 0x54
 80092b4:	ec47 6b10 	vmov	d0, r6, r7
 80092b8:	4620      	mov	r0, r4
 80092ba:	f001 f9ce 	bl	800a65a <__d2b>
 80092be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80092c2:	9004      	str	r0, [sp, #16]
 80092c4:	2d00      	cmp	r5, #0
 80092c6:	d07c      	beq.n	80093c2 <_dtoa_r+0x1da>
 80092c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80092d0:	46b2      	mov	sl, r6
 80092d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80092d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80092da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80092de:	2200      	movs	r2, #0
 80092e0:	4b8b      	ldr	r3, [pc, #556]	; (8009510 <_dtoa_r+0x328>)
 80092e2:	4650      	mov	r0, sl
 80092e4:	4659      	mov	r1, fp
 80092e6:	f7f6 fff7 	bl	80002d8 <__aeabi_dsub>
 80092ea:	a381      	add	r3, pc, #516	; (adr r3, 80094f0 <_dtoa_r+0x308>)
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	f7f7 f9aa 	bl	8000648 <__aeabi_dmul>
 80092f4:	a380      	add	r3, pc, #512	; (adr r3, 80094f8 <_dtoa_r+0x310>)
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f7f6 ffef 	bl	80002dc <__adddf3>
 80092fe:	4606      	mov	r6, r0
 8009300:	4628      	mov	r0, r5
 8009302:	460f      	mov	r7, r1
 8009304:	f7f7 f936 	bl	8000574 <__aeabi_i2d>
 8009308:	a37d      	add	r3, pc, #500	; (adr r3, 8009500 <_dtoa_r+0x318>)
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f7f7 f99b 	bl	8000648 <__aeabi_dmul>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4630      	mov	r0, r6
 8009318:	4639      	mov	r1, r7
 800931a:	f7f6 ffdf 	bl	80002dc <__adddf3>
 800931e:	4606      	mov	r6, r0
 8009320:	460f      	mov	r7, r1
 8009322:	f7f7 fc41 	bl	8000ba8 <__aeabi_d2iz>
 8009326:	2200      	movs	r2, #0
 8009328:	4682      	mov	sl, r0
 800932a:	2300      	movs	r3, #0
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 fbfc 	bl	8000b2c <__aeabi_dcmplt>
 8009334:	b148      	cbz	r0, 800934a <_dtoa_r+0x162>
 8009336:	4650      	mov	r0, sl
 8009338:	f7f7 f91c 	bl	8000574 <__aeabi_i2d>
 800933c:	4632      	mov	r2, r6
 800933e:	463b      	mov	r3, r7
 8009340:	f7f7 fbea 	bl	8000b18 <__aeabi_dcmpeq>
 8009344:	b908      	cbnz	r0, 800934a <_dtoa_r+0x162>
 8009346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800934a:	f1ba 0f16 	cmp.w	sl, #22
 800934e:	d859      	bhi.n	8009404 <_dtoa_r+0x21c>
 8009350:	4970      	ldr	r1, [pc, #448]	; (8009514 <_dtoa_r+0x32c>)
 8009352:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800935a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800935e:	f7f7 fc03 	bl	8000b68 <__aeabi_dcmpgt>
 8009362:	2800      	cmp	r0, #0
 8009364:	d050      	beq.n	8009408 <_dtoa_r+0x220>
 8009366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800936a:	2300      	movs	r3, #0
 800936c:	930f      	str	r3, [sp, #60]	; 0x3c
 800936e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009370:	1b5d      	subs	r5, r3, r5
 8009372:	f1b5 0801 	subs.w	r8, r5, #1
 8009376:	bf49      	itett	mi
 8009378:	f1c5 0301 	rsbmi	r3, r5, #1
 800937c:	2300      	movpl	r3, #0
 800937e:	9305      	strmi	r3, [sp, #20]
 8009380:	f04f 0800 	movmi.w	r8, #0
 8009384:	bf58      	it	pl
 8009386:	9305      	strpl	r3, [sp, #20]
 8009388:	f1ba 0f00 	cmp.w	sl, #0
 800938c:	db3e      	blt.n	800940c <_dtoa_r+0x224>
 800938e:	2300      	movs	r3, #0
 8009390:	44d0      	add	r8, sl
 8009392:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	9b06      	ldr	r3, [sp, #24]
 800939a:	2b09      	cmp	r3, #9
 800939c:	f200 8090 	bhi.w	80094c0 <_dtoa_r+0x2d8>
 80093a0:	2b05      	cmp	r3, #5
 80093a2:	bfc4      	itt	gt
 80093a4:	3b04      	subgt	r3, #4
 80093a6:	9306      	strgt	r3, [sp, #24]
 80093a8:	9b06      	ldr	r3, [sp, #24]
 80093aa:	f1a3 0302 	sub.w	r3, r3, #2
 80093ae:	bfcc      	ite	gt
 80093b0:	2500      	movgt	r5, #0
 80093b2:	2501      	movle	r5, #1
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	f200 808f 	bhi.w	80094d8 <_dtoa_r+0x2f0>
 80093ba:	e8df f003 	tbb	[pc, r3]
 80093be:	7f7d      	.short	0x7f7d
 80093c0:	7131      	.short	0x7131
 80093c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80093c6:	441d      	add	r5, r3
 80093c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80093cc:	2820      	cmp	r0, #32
 80093ce:	dd13      	ble.n	80093f8 <_dtoa_r+0x210>
 80093d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80093d4:	9b00      	ldr	r3, [sp, #0]
 80093d6:	fa08 f800 	lsl.w	r8, r8, r0
 80093da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80093de:	fa23 f000 	lsr.w	r0, r3, r0
 80093e2:	ea48 0000 	orr.w	r0, r8, r0
 80093e6:	f7f7 f8b5 	bl	8000554 <__aeabi_ui2d>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4682      	mov	sl, r0
 80093ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80093f2:	3d01      	subs	r5, #1
 80093f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80093f6:	e772      	b.n	80092de <_dtoa_r+0xf6>
 80093f8:	9b00      	ldr	r3, [sp, #0]
 80093fa:	f1c0 0020 	rsb	r0, r0, #32
 80093fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009402:	e7f0      	b.n	80093e6 <_dtoa_r+0x1fe>
 8009404:	2301      	movs	r3, #1
 8009406:	e7b1      	b.n	800936c <_dtoa_r+0x184>
 8009408:	900f      	str	r0, [sp, #60]	; 0x3c
 800940a:	e7b0      	b.n	800936e <_dtoa_r+0x186>
 800940c:	9b05      	ldr	r3, [sp, #20]
 800940e:	eba3 030a 	sub.w	r3, r3, sl
 8009412:	9305      	str	r3, [sp, #20]
 8009414:	f1ca 0300 	rsb	r3, sl, #0
 8009418:	9307      	str	r3, [sp, #28]
 800941a:	2300      	movs	r3, #0
 800941c:	930e      	str	r3, [sp, #56]	; 0x38
 800941e:	e7bb      	b.n	8009398 <_dtoa_r+0x1b0>
 8009420:	2301      	movs	r3, #1
 8009422:	930a      	str	r3, [sp, #40]	; 0x28
 8009424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009426:	2b00      	cmp	r3, #0
 8009428:	dd59      	ble.n	80094de <_dtoa_r+0x2f6>
 800942a:	9302      	str	r3, [sp, #8]
 800942c:	4699      	mov	r9, r3
 800942e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009430:	2200      	movs	r2, #0
 8009432:	6072      	str	r2, [r6, #4]
 8009434:	2204      	movs	r2, #4
 8009436:	f102 0014 	add.w	r0, r2, #20
 800943a:	4298      	cmp	r0, r3
 800943c:	6871      	ldr	r1, [r6, #4]
 800943e:	d953      	bls.n	80094e8 <_dtoa_r+0x300>
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fe7d 	bl	800a140 <_Balloc>
 8009446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009448:	6030      	str	r0, [r6, #0]
 800944a:	f1b9 0f0e 	cmp.w	r9, #14
 800944e:	f8d3 b000 	ldr.w	fp, [r3]
 8009452:	f200 80e6 	bhi.w	8009622 <_dtoa_r+0x43a>
 8009456:	2d00      	cmp	r5, #0
 8009458:	f000 80e3 	beq.w	8009622 <_dtoa_r+0x43a>
 800945c:	ed9d 7b00 	vldr	d7, [sp]
 8009460:	f1ba 0f00 	cmp.w	sl, #0
 8009464:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009468:	dd74      	ble.n	8009554 <_dtoa_r+0x36c>
 800946a:	4a2a      	ldr	r2, [pc, #168]	; (8009514 <_dtoa_r+0x32c>)
 800946c:	f00a 030f 	and.w	r3, sl, #15
 8009470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009474:	ed93 7b00 	vldr	d7, [r3]
 8009478:	ea4f 162a 	mov.w	r6, sl, asr #4
 800947c:	06f0      	lsls	r0, r6, #27
 800947e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009482:	d565      	bpl.n	8009550 <_dtoa_r+0x368>
 8009484:	4b24      	ldr	r3, [pc, #144]	; (8009518 <_dtoa_r+0x330>)
 8009486:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800948a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800948e:	f7f7 fa05 	bl	800089c <__aeabi_ddiv>
 8009492:	e9cd 0100 	strd	r0, r1, [sp]
 8009496:	f006 060f 	and.w	r6, r6, #15
 800949a:	2503      	movs	r5, #3
 800949c:	4f1e      	ldr	r7, [pc, #120]	; (8009518 <_dtoa_r+0x330>)
 800949e:	e04c      	b.n	800953a <_dtoa_r+0x352>
 80094a0:	2301      	movs	r3, #1
 80094a2:	930a      	str	r3, [sp, #40]	; 0x28
 80094a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a6:	4453      	add	r3, sl
 80094a8:	f103 0901 	add.w	r9, r3, #1
 80094ac:	9302      	str	r3, [sp, #8]
 80094ae:	464b      	mov	r3, r9
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	bfb8      	it	lt
 80094b4:	2301      	movlt	r3, #1
 80094b6:	e7ba      	b.n	800942e <_dtoa_r+0x246>
 80094b8:	2300      	movs	r3, #0
 80094ba:	e7b2      	b.n	8009422 <_dtoa_r+0x23a>
 80094bc:	2300      	movs	r3, #0
 80094be:	e7f0      	b.n	80094a2 <_dtoa_r+0x2ba>
 80094c0:	2501      	movs	r5, #1
 80094c2:	2300      	movs	r3, #0
 80094c4:	9306      	str	r3, [sp, #24]
 80094c6:	950a      	str	r5, [sp, #40]	; 0x28
 80094c8:	f04f 33ff 	mov.w	r3, #4294967295
 80094cc:	9302      	str	r3, [sp, #8]
 80094ce:	4699      	mov	r9, r3
 80094d0:	2200      	movs	r2, #0
 80094d2:	2312      	movs	r3, #18
 80094d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80094d6:	e7aa      	b.n	800942e <_dtoa_r+0x246>
 80094d8:	2301      	movs	r3, #1
 80094da:	930a      	str	r3, [sp, #40]	; 0x28
 80094dc:	e7f4      	b.n	80094c8 <_dtoa_r+0x2e0>
 80094de:	2301      	movs	r3, #1
 80094e0:	9302      	str	r3, [sp, #8]
 80094e2:	4699      	mov	r9, r3
 80094e4:	461a      	mov	r2, r3
 80094e6:	e7f5      	b.n	80094d4 <_dtoa_r+0x2ec>
 80094e8:	3101      	adds	r1, #1
 80094ea:	6071      	str	r1, [r6, #4]
 80094ec:	0052      	lsls	r2, r2, #1
 80094ee:	e7a2      	b.n	8009436 <_dtoa_r+0x24e>
 80094f0:	636f4361 	.word	0x636f4361
 80094f4:	3fd287a7 	.word	0x3fd287a7
 80094f8:	8b60c8b3 	.word	0x8b60c8b3
 80094fc:	3fc68a28 	.word	0x3fc68a28
 8009500:	509f79fb 	.word	0x509f79fb
 8009504:	3fd34413 	.word	0x3fd34413
 8009508:	7ff00000 	.word	0x7ff00000
 800950c:	0800b1e5 	.word	0x0800b1e5
 8009510:	3ff80000 	.word	0x3ff80000
 8009514:	0800b2a0 	.word	0x0800b2a0
 8009518:	0800b278 	.word	0x0800b278
 800951c:	0800b211 	.word	0x0800b211
 8009520:	07f1      	lsls	r1, r6, #31
 8009522:	d508      	bpl.n	8009536 <_dtoa_r+0x34e>
 8009524:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952c:	f7f7 f88c 	bl	8000648 <__aeabi_dmul>
 8009530:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009534:	3501      	adds	r5, #1
 8009536:	1076      	asrs	r6, r6, #1
 8009538:	3708      	adds	r7, #8
 800953a:	2e00      	cmp	r6, #0
 800953c:	d1f0      	bne.n	8009520 <_dtoa_r+0x338>
 800953e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009546:	f7f7 f9a9 	bl	800089c <__aeabi_ddiv>
 800954a:	e9cd 0100 	strd	r0, r1, [sp]
 800954e:	e01a      	b.n	8009586 <_dtoa_r+0x39e>
 8009550:	2502      	movs	r5, #2
 8009552:	e7a3      	b.n	800949c <_dtoa_r+0x2b4>
 8009554:	f000 80a0 	beq.w	8009698 <_dtoa_r+0x4b0>
 8009558:	f1ca 0600 	rsb	r6, sl, #0
 800955c:	4b9f      	ldr	r3, [pc, #636]	; (80097dc <_dtoa_r+0x5f4>)
 800955e:	4fa0      	ldr	r7, [pc, #640]	; (80097e0 <_dtoa_r+0x5f8>)
 8009560:	f006 020f 	and.w	r2, r6, #15
 8009564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009570:	f7f7 f86a 	bl	8000648 <__aeabi_dmul>
 8009574:	e9cd 0100 	strd	r0, r1, [sp]
 8009578:	1136      	asrs	r6, r6, #4
 800957a:	2300      	movs	r3, #0
 800957c:	2502      	movs	r5, #2
 800957e:	2e00      	cmp	r6, #0
 8009580:	d17f      	bne.n	8009682 <_dtoa_r+0x49a>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e1      	bne.n	800954a <_dtoa_r+0x362>
 8009586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 8087 	beq.w	800969c <_dtoa_r+0x4b4>
 800958e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009592:	2200      	movs	r2, #0
 8009594:	4b93      	ldr	r3, [pc, #588]	; (80097e4 <_dtoa_r+0x5fc>)
 8009596:	4630      	mov	r0, r6
 8009598:	4639      	mov	r1, r7
 800959a:	f7f7 fac7 	bl	8000b2c <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d07c      	beq.n	800969c <_dtoa_r+0x4b4>
 80095a2:	f1b9 0f00 	cmp.w	r9, #0
 80095a6:	d079      	beq.n	800969c <_dtoa_r+0x4b4>
 80095a8:	9b02      	ldr	r3, [sp, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dd35      	ble.n	800961a <_dtoa_r+0x432>
 80095ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80095b2:	9308      	str	r3, [sp, #32]
 80095b4:	4639      	mov	r1, r7
 80095b6:	2200      	movs	r2, #0
 80095b8:	4b8b      	ldr	r3, [pc, #556]	; (80097e8 <_dtoa_r+0x600>)
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7f7 f844 	bl	8000648 <__aeabi_dmul>
 80095c0:	e9cd 0100 	strd	r0, r1, [sp]
 80095c4:	9f02      	ldr	r7, [sp, #8]
 80095c6:	3501      	adds	r5, #1
 80095c8:	4628      	mov	r0, r5
 80095ca:	f7f6 ffd3 	bl	8000574 <__aeabi_i2d>
 80095ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095d2:	f7f7 f839 	bl	8000648 <__aeabi_dmul>
 80095d6:	2200      	movs	r2, #0
 80095d8:	4b84      	ldr	r3, [pc, #528]	; (80097ec <_dtoa_r+0x604>)
 80095da:	f7f6 fe7f 	bl	80002dc <__adddf3>
 80095de:	4605      	mov	r5, r0
 80095e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80095e4:	2f00      	cmp	r7, #0
 80095e6:	d15d      	bne.n	80096a4 <_dtoa_r+0x4bc>
 80095e8:	2200      	movs	r2, #0
 80095ea:	4b81      	ldr	r3, [pc, #516]	; (80097f0 <_dtoa_r+0x608>)
 80095ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095f0:	f7f6 fe72 	bl	80002d8 <__aeabi_dsub>
 80095f4:	462a      	mov	r2, r5
 80095f6:	4633      	mov	r3, r6
 80095f8:	e9cd 0100 	strd	r0, r1, [sp]
 80095fc:	f7f7 fab4 	bl	8000b68 <__aeabi_dcmpgt>
 8009600:	2800      	cmp	r0, #0
 8009602:	f040 8288 	bne.w	8009b16 <_dtoa_r+0x92e>
 8009606:	462a      	mov	r2, r5
 8009608:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800960c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009610:	f7f7 fa8c 	bl	8000b2c <__aeabi_dcmplt>
 8009614:	2800      	cmp	r0, #0
 8009616:	f040 827c 	bne.w	8009b12 <_dtoa_r+0x92a>
 800961a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800961e:	e9cd 2300 	strd	r2, r3, [sp]
 8009622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009624:	2b00      	cmp	r3, #0
 8009626:	f2c0 8150 	blt.w	80098ca <_dtoa_r+0x6e2>
 800962a:	f1ba 0f0e 	cmp.w	sl, #14
 800962e:	f300 814c 	bgt.w	80098ca <_dtoa_r+0x6e2>
 8009632:	4b6a      	ldr	r3, [pc, #424]	; (80097dc <_dtoa_r+0x5f4>)
 8009634:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009638:	ed93 7b00 	vldr	d7, [r3]
 800963c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800963e:	2b00      	cmp	r3, #0
 8009640:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009644:	f280 80d8 	bge.w	80097f8 <_dtoa_r+0x610>
 8009648:	f1b9 0f00 	cmp.w	r9, #0
 800964c:	f300 80d4 	bgt.w	80097f8 <_dtoa_r+0x610>
 8009650:	f040 825e 	bne.w	8009b10 <_dtoa_r+0x928>
 8009654:	2200      	movs	r2, #0
 8009656:	4b66      	ldr	r3, [pc, #408]	; (80097f0 <_dtoa_r+0x608>)
 8009658:	ec51 0b17 	vmov	r0, r1, d7
 800965c:	f7f6 fff4 	bl	8000648 <__aeabi_dmul>
 8009660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009664:	f7f7 fa76 	bl	8000b54 <__aeabi_dcmpge>
 8009668:	464f      	mov	r7, r9
 800966a:	464e      	mov	r6, r9
 800966c:	2800      	cmp	r0, #0
 800966e:	f040 8234 	bne.w	8009ada <_dtoa_r+0x8f2>
 8009672:	2331      	movs	r3, #49	; 0x31
 8009674:	f10b 0501 	add.w	r5, fp, #1
 8009678:	f88b 3000 	strb.w	r3, [fp]
 800967c:	f10a 0a01 	add.w	sl, sl, #1
 8009680:	e22f      	b.n	8009ae2 <_dtoa_r+0x8fa>
 8009682:	07f2      	lsls	r2, r6, #31
 8009684:	d505      	bpl.n	8009692 <_dtoa_r+0x4aa>
 8009686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968a:	f7f6 ffdd 	bl	8000648 <__aeabi_dmul>
 800968e:	3501      	adds	r5, #1
 8009690:	2301      	movs	r3, #1
 8009692:	1076      	asrs	r6, r6, #1
 8009694:	3708      	adds	r7, #8
 8009696:	e772      	b.n	800957e <_dtoa_r+0x396>
 8009698:	2502      	movs	r5, #2
 800969a:	e774      	b.n	8009586 <_dtoa_r+0x39e>
 800969c:	f8cd a020 	str.w	sl, [sp, #32]
 80096a0:	464f      	mov	r7, r9
 80096a2:	e791      	b.n	80095c8 <_dtoa_r+0x3e0>
 80096a4:	4b4d      	ldr	r3, [pc, #308]	; (80097dc <_dtoa_r+0x5f4>)
 80096a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80096ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d047      	beq.n	8009744 <_dtoa_r+0x55c>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	2000      	movs	r0, #0
 80096ba:	494e      	ldr	r1, [pc, #312]	; (80097f4 <_dtoa_r+0x60c>)
 80096bc:	f7f7 f8ee 	bl	800089c <__aeabi_ddiv>
 80096c0:	462a      	mov	r2, r5
 80096c2:	4633      	mov	r3, r6
 80096c4:	f7f6 fe08 	bl	80002d8 <__aeabi_dsub>
 80096c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80096cc:	465d      	mov	r5, fp
 80096ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096d2:	f7f7 fa69 	bl	8000ba8 <__aeabi_d2iz>
 80096d6:	4606      	mov	r6, r0
 80096d8:	f7f6 ff4c 	bl	8000574 <__aeabi_i2d>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096e4:	f7f6 fdf8 	bl	80002d8 <__aeabi_dsub>
 80096e8:	3630      	adds	r6, #48	; 0x30
 80096ea:	f805 6b01 	strb.w	r6, [r5], #1
 80096ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80096f2:	e9cd 0100 	strd	r0, r1, [sp]
 80096f6:	f7f7 fa19 	bl	8000b2c <__aeabi_dcmplt>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d163      	bne.n	80097c6 <_dtoa_r+0x5de>
 80096fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009702:	2000      	movs	r0, #0
 8009704:	4937      	ldr	r1, [pc, #220]	; (80097e4 <_dtoa_r+0x5fc>)
 8009706:	f7f6 fde7 	bl	80002d8 <__aeabi_dsub>
 800970a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800970e:	f7f7 fa0d 	bl	8000b2c <__aeabi_dcmplt>
 8009712:	2800      	cmp	r0, #0
 8009714:	f040 80b7 	bne.w	8009886 <_dtoa_r+0x69e>
 8009718:	eba5 030b 	sub.w	r3, r5, fp
 800971c:	429f      	cmp	r7, r3
 800971e:	f77f af7c 	ble.w	800961a <_dtoa_r+0x432>
 8009722:	2200      	movs	r2, #0
 8009724:	4b30      	ldr	r3, [pc, #192]	; (80097e8 <_dtoa_r+0x600>)
 8009726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800972a:	f7f6 ff8d 	bl	8000648 <__aeabi_dmul>
 800972e:	2200      	movs	r2, #0
 8009730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009734:	4b2c      	ldr	r3, [pc, #176]	; (80097e8 <_dtoa_r+0x600>)
 8009736:	e9dd 0100 	ldrd	r0, r1, [sp]
 800973a:	f7f6 ff85 	bl	8000648 <__aeabi_dmul>
 800973e:	e9cd 0100 	strd	r0, r1, [sp]
 8009742:	e7c4      	b.n	80096ce <_dtoa_r+0x4e6>
 8009744:	462a      	mov	r2, r5
 8009746:	4633      	mov	r3, r6
 8009748:	f7f6 ff7e 	bl	8000648 <__aeabi_dmul>
 800974c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009750:	eb0b 0507 	add.w	r5, fp, r7
 8009754:	465e      	mov	r6, fp
 8009756:	e9dd 0100 	ldrd	r0, r1, [sp]
 800975a:	f7f7 fa25 	bl	8000ba8 <__aeabi_d2iz>
 800975e:	4607      	mov	r7, r0
 8009760:	f7f6 ff08 	bl	8000574 <__aeabi_i2d>
 8009764:	3730      	adds	r7, #48	; 0x30
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800976e:	f7f6 fdb3 	bl	80002d8 <__aeabi_dsub>
 8009772:	f806 7b01 	strb.w	r7, [r6], #1
 8009776:	42ae      	cmp	r6, r5
 8009778:	e9cd 0100 	strd	r0, r1, [sp]
 800977c:	f04f 0200 	mov.w	r2, #0
 8009780:	d126      	bne.n	80097d0 <_dtoa_r+0x5e8>
 8009782:	4b1c      	ldr	r3, [pc, #112]	; (80097f4 <_dtoa_r+0x60c>)
 8009784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009788:	f7f6 fda8 	bl	80002dc <__adddf3>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009794:	f7f7 f9e8 	bl	8000b68 <__aeabi_dcmpgt>
 8009798:	2800      	cmp	r0, #0
 800979a:	d174      	bne.n	8009886 <_dtoa_r+0x69e>
 800979c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80097a0:	2000      	movs	r0, #0
 80097a2:	4914      	ldr	r1, [pc, #80]	; (80097f4 <_dtoa_r+0x60c>)
 80097a4:	f7f6 fd98 	bl	80002d8 <__aeabi_dsub>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097b0:	f7f7 f9bc 	bl	8000b2c <__aeabi_dcmplt>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	f43f af30 	beq.w	800961a <_dtoa_r+0x432>
 80097ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097be:	2b30      	cmp	r3, #48	; 0x30
 80097c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80097c4:	d002      	beq.n	80097cc <_dtoa_r+0x5e4>
 80097c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80097ca:	e04a      	b.n	8009862 <_dtoa_r+0x67a>
 80097cc:	4615      	mov	r5, r2
 80097ce:	e7f4      	b.n	80097ba <_dtoa_r+0x5d2>
 80097d0:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <_dtoa_r+0x600>)
 80097d2:	f7f6 ff39 	bl	8000648 <__aeabi_dmul>
 80097d6:	e9cd 0100 	strd	r0, r1, [sp]
 80097da:	e7bc      	b.n	8009756 <_dtoa_r+0x56e>
 80097dc:	0800b2a0 	.word	0x0800b2a0
 80097e0:	0800b278 	.word	0x0800b278
 80097e4:	3ff00000 	.word	0x3ff00000
 80097e8:	40240000 	.word	0x40240000
 80097ec:	401c0000 	.word	0x401c0000
 80097f0:	40140000 	.word	0x40140000
 80097f4:	3fe00000 	.word	0x3fe00000
 80097f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80097fc:	465d      	mov	r5, fp
 80097fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009802:	4630      	mov	r0, r6
 8009804:	4639      	mov	r1, r7
 8009806:	f7f7 f849 	bl	800089c <__aeabi_ddiv>
 800980a:	f7f7 f9cd 	bl	8000ba8 <__aeabi_d2iz>
 800980e:	4680      	mov	r8, r0
 8009810:	f7f6 feb0 	bl	8000574 <__aeabi_i2d>
 8009814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009818:	f7f6 ff16 	bl	8000648 <__aeabi_dmul>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4630      	mov	r0, r6
 8009822:	4639      	mov	r1, r7
 8009824:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009828:	f7f6 fd56 	bl	80002d8 <__aeabi_dsub>
 800982c:	f805 6b01 	strb.w	r6, [r5], #1
 8009830:	eba5 060b 	sub.w	r6, r5, fp
 8009834:	45b1      	cmp	r9, r6
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	d139      	bne.n	80098b0 <_dtoa_r+0x6c8>
 800983c:	f7f6 fd4e 	bl	80002dc <__adddf3>
 8009840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009844:	4606      	mov	r6, r0
 8009846:	460f      	mov	r7, r1
 8009848:	f7f7 f98e 	bl	8000b68 <__aeabi_dcmpgt>
 800984c:	b9c8      	cbnz	r0, 8009882 <_dtoa_r+0x69a>
 800984e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009852:	4630      	mov	r0, r6
 8009854:	4639      	mov	r1, r7
 8009856:	f7f7 f95f 	bl	8000b18 <__aeabi_dcmpeq>
 800985a:	b110      	cbz	r0, 8009862 <_dtoa_r+0x67a>
 800985c:	f018 0f01 	tst.w	r8, #1
 8009860:	d10f      	bne.n	8009882 <_dtoa_r+0x69a>
 8009862:	9904      	ldr	r1, [sp, #16]
 8009864:	4620      	mov	r0, r4
 8009866:	f000 fc9f 	bl	800a1a8 <_Bfree>
 800986a:	2300      	movs	r3, #0
 800986c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800986e:	702b      	strb	r3, [r5, #0]
 8009870:	f10a 0301 	add.w	r3, sl, #1
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 8241 	beq.w	8009d00 <_dtoa_r+0xb18>
 800987e:	601d      	str	r5, [r3, #0]
 8009880:	e23e      	b.n	8009d00 <_dtoa_r+0xb18>
 8009882:	f8cd a020 	str.w	sl, [sp, #32]
 8009886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800988a:	2a39      	cmp	r2, #57	; 0x39
 800988c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009890:	d108      	bne.n	80098a4 <_dtoa_r+0x6bc>
 8009892:	459b      	cmp	fp, r3
 8009894:	d10a      	bne.n	80098ac <_dtoa_r+0x6c4>
 8009896:	9b08      	ldr	r3, [sp, #32]
 8009898:	3301      	adds	r3, #1
 800989a:	9308      	str	r3, [sp, #32]
 800989c:	2330      	movs	r3, #48	; 0x30
 800989e:	f88b 3000 	strb.w	r3, [fp]
 80098a2:	465b      	mov	r3, fp
 80098a4:	781a      	ldrb	r2, [r3, #0]
 80098a6:	3201      	adds	r2, #1
 80098a8:	701a      	strb	r2, [r3, #0]
 80098aa:	e78c      	b.n	80097c6 <_dtoa_r+0x5de>
 80098ac:	461d      	mov	r5, r3
 80098ae:	e7ea      	b.n	8009886 <_dtoa_r+0x69e>
 80098b0:	2200      	movs	r2, #0
 80098b2:	4b9b      	ldr	r3, [pc, #620]	; (8009b20 <_dtoa_r+0x938>)
 80098b4:	f7f6 fec8 	bl	8000648 <__aeabi_dmul>
 80098b8:	2200      	movs	r2, #0
 80098ba:	2300      	movs	r3, #0
 80098bc:	4606      	mov	r6, r0
 80098be:	460f      	mov	r7, r1
 80098c0:	f7f7 f92a 	bl	8000b18 <__aeabi_dcmpeq>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d09a      	beq.n	80097fe <_dtoa_r+0x616>
 80098c8:	e7cb      	b.n	8009862 <_dtoa_r+0x67a>
 80098ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	f000 808b 	beq.w	80099e8 <_dtoa_r+0x800>
 80098d2:	9a06      	ldr	r2, [sp, #24]
 80098d4:	2a01      	cmp	r2, #1
 80098d6:	dc6e      	bgt.n	80099b6 <_dtoa_r+0x7ce>
 80098d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098da:	2a00      	cmp	r2, #0
 80098dc:	d067      	beq.n	80099ae <_dtoa_r+0x7c6>
 80098de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80098e2:	9f07      	ldr	r7, [sp, #28]
 80098e4:	9d05      	ldr	r5, [sp, #20]
 80098e6:	9a05      	ldr	r2, [sp, #20]
 80098e8:	2101      	movs	r1, #1
 80098ea:	441a      	add	r2, r3
 80098ec:	4620      	mov	r0, r4
 80098ee:	9205      	str	r2, [sp, #20]
 80098f0:	4498      	add	r8, r3
 80098f2:	f000 fcf9 	bl	800a2e8 <__i2b>
 80098f6:	4606      	mov	r6, r0
 80098f8:	2d00      	cmp	r5, #0
 80098fa:	dd0c      	ble.n	8009916 <_dtoa_r+0x72e>
 80098fc:	f1b8 0f00 	cmp.w	r8, #0
 8009900:	dd09      	ble.n	8009916 <_dtoa_r+0x72e>
 8009902:	4545      	cmp	r5, r8
 8009904:	9a05      	ldr	r2, [sp, #20]
 8009906:	462b      	mov	r3, r5
 8009908:	bfa8      	it	ge
 800990a:	4643      	movge	r3, r8
 800990c:	1ad2      	subs	r2, r2, r3
 800990e:	9205      	str	r2, [sp, #20]
 8009910:	1aed      	subs	r5, r5, r3
 8009912:	eba8 0803 	sub.w	r8, r8, r3
 8009916:	9b07      	ldr	r3, [sp, #28]
 8009918:	b1eb      	cbz	r3, 8009956 <_dtoa_r+0x76e>
 800991a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991c:	2b00      	cmp	r3, #0
 800991e:	d067      	beq.n	80099f0 <_dtoa_r+0x808>
 8009920:	b18f      	cbz	r7, 8009946 <_dtoa_r+0x75e>
 8009922:	4631      	mov	r1, r6
 8009924:	463a      	mov	r2, r7
 8009926:	4620      	mov	r0, r4
 8009928:	f000 fd7e 	bl	800a428 <__pow5mult>
 800992c:	9a04      	ldr	r2, [sp, #16]
 800992e:	4601      	mov	r1, r0
 8009930:	4606      	mov	r6, r0
 8009932:	4620      	mov	r0, r4
 8009934:	f000 fce1 	bl	800a2fa <__multiply>
 8009938:	9904      	ldr	r1, [sp, #16]
 800993a:	9008      	str	r0, [sp, #32]
 800993c:	4620      	mov	r0, r4
 800993e:	f000 fc33 	bl	800a1a8 <_Bfree>
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	9304      	str	r3, [sp, #16]
 8009946:	9b07      	ldr	r3, [sp, #28]
 8009948:	1bda      	subs	r2, r3, r7
 800994a:	d004      	beq.n	8009956 <_dtoa_r+0x76e>
 800994c:	9904      	ldr	r1, [sp, #16]
 800994e:	4620      	mov	r0, r4
 8009950:	f000 fd6a 	bl	800a428 <__pow5mult>
 8009954:	9004      	str	r0, [sp, #16]
 8009956:	2101      	movs	r1, #1
 8009958:	4620      	mov	r0, r4
 800995a:	f000 fcc5 	bl	800a2e8 <__i2b>
 800995e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009960:	4607      	mov	r7, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 81d0 	beq.w	8009d08 <_dtoa_r+0xb20>
 8009968:	461a      	mov	r2, r3
 800996a:	4601      	mov	r1, r0
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fd5b 	bl	800a428 <__pow5mult>
 8009972:	9b06      	ldr	r3, [sp, #24]
 8009974:	2b01      	cmp	r3, #1
 8009976:	4607      	mov	r7, r0
 8009978:	dc40      	bgt.n	80099fc <_dtoa_r+0x814>
 800997a:	9b00      	ldr	r3, [sp, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d139      	bne.n	80099f4 <_dtoa_r+0x80c>
 8009980:	9b01      	ldr	r3, [sp, #4]
 8009982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009986:	2b00      	cmp	r3, #0
 8009988:	d136      	bne.n	80099f8 <_dtoa_r+0x810>
 800998a:	9b01      	ldr	r3, [sp, #4]
 800998c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009990:	0d1b      	lsrs	r3, r3, #20
 8009992:	051b      	lsls	r3, r3, #20
 8009994:	b12b      	cbz	r3, 80099a2 <_dtoa_r+0x7ba>
 8009996:	9b05      	ldr	r3, [sp, #20]
 8009998:	3301      	adds	r3, #1
 800999a:	9305      	str	r3, [sp, #20]
 800999c:	f108 0801 	add.w	r8, r8, #1
 80099a0:	2301      	movs	r3, #1
 80099a2:	9307      	str	r3, [sp, #28]
 80099a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d12a      	bne.n	8009a00 <_dtoa_r+0x818>
 80099aa:	2001      	movs	r0, #1
 80099ac:	e030      	b.n	8009a10 <_dtoa_r+0x828>
 80099ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099b4:	e795      	b.n	80098e2 <_dtoa_r+0x6fa>
 80099b6:	9b07      	ldr	r3, [sp, #28]
 80099b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80099bc:	42bb      	cmp	r3, r7
 80099be:	bfbf      	itttt	lt
 80099c0:	9b07      	ldrlt	r3, [sp, #28]
 80099c2:	9707      	strlt	r7, [sp, #28]
 80099c4:	1afa      	sublt	r2, r7, r3
 80099c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80099c8:	bfbb      	ittet	lt
 80099ca:	189b      	addlt	r3, r3, r2
 80099cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80099ce:	1bdf      	subge	r7, r3, r7
 80099d0:	2700      	movlt	r7, #0
 80099d2:	f1b9 0f00 	cmp.w	r9, #0
 80099d6:	bfb5      	itete	lt
 80099d8:	9b05      	ldrlt	r3, [sp, #20]
 80099da:	9d05      	ldrge	r5, [sp, #20]
 80099dc:	eba3 0509 	sublt.w	r5, r3, r9
 80099e0:	464b      	movge	r3, r9
 80099e2:	bfb8      	it	lt
 80099e4:	2300      	movlt	r3, #0
 80099e6:	e77e      	b.n	80098e6 <_dtoa_r+0x6fe>
 80099e8:	9f07      	ldr	r7, [sp, #28]
 80099ea:	9d05      	ldr	r5, [sp, #20]
 80099ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80099ee:	e783      	b.n	80098f8 <_dtoa_r+0x710>
 80099f0:	9a07      	ldr	r2, [sp, #28]
 80099f2:	e7ab      	b.n	800994c <_dtoa_r+0x764>
 80099f4:	2300      	movs	r3, #0
 80099f6:	e7d4      	b.n	80099a2 <_dtoa_r+0x7ba>
 80099f8:	9b00      	ldr	r3, [sp, #0]
 80099fa:	e7d2      	b.n	80099a2 <_dtoa_r+0x7ba>
 80099fc:	2300      	movs	r3, #0
 80099fe:	9307      	str	r3, [sp, #28]
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009a06:	6918      	ldr	r0, [r3, #16]
 8009a08:	f000 fc20 	bl	800a24c <__hi0bits>
 8009a0c:	f1c0 0020 	rsb	r0, r0, #32
 8009a10:	4440      	add	r0, r8
 8009a12:	f010 001f 	ands.w	r0, r0, #31
 8009a16:	d047      	beq.n	8009aa8 <_dtoa_r+0x8c0>
 8009a18:	f1c0 0320 	rsb	r3, r0, #32
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	dd3b      	ble.n	8009a98 <_dtoa_r+0x8b0>
 8009a20:	9b05      	ldr	r3, [sp, #20]
 8009a22:	f1c0 001c 	rsb	r0, r0, #28
 8009a26:	4403      	add	r3, r0
 8009a28:	9305      	str	r3, [sp, #20]
 8009a2a:	4405      	add	r5, r0
 8009a2c:	4480      	add	r8, r0
 8009a2e:	9b05      	ldr	r3, [sp, #20]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dd05      	ble.n	8009a40 <_dtoa_r+0x858>
 8009a34:	461a      	mov	r2, r3
 8009a36:	9904      	ldr	r1, [sp, #16]
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f000 fd43 	bl	800a4c4 <__lshift>
 8009a3e:	9004      	str	r0, [sp, #16]
 8009a40:	f1b8 0f00 	cmp.w	r8, #0
 8009a44:	dd05      	ble.n	8009a52 <_dtoa_r+0x86a>
 8009a46:	4639      	mov	r1, r7
 8009a48:	4642      	mov	r2, r8
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 fd3a 	bl	800a4c4 <__lshift>
 8009a50:	4607      	mov	r7, r0
 8009a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a54:	b353      	cbz	r3, 8009aac <_dtoa_r+0x8c4>
 8009a56:	4639      	mov	r1, r7
 8009a58:	9804      	ldr	r0, [sp, #16]
 8009a5a:	f000 fd87 	bl	800a56c <__mcmp>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	da24      	bge.n	8009aac <_dtoa_r+0x8c4>
 8009a62:	2300      	movs	r3, #0
 8009a64:	220a      	movs	r2, #10
 8009a66:	9904      	ldr	r1, [sp, #16]
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 fbb4 	bl	800a1d6 <__multadd>
 8009a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a70:	9004      	str	r0, [sp, #16]
 8009a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 814d 	beq.w	8009d16 <_dtoa_r+0xb2e>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	4631      	mov	r1, r6
 8009a80:	220a      	movs	r2, #10
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 fba7 	bl	800a1d6 <__multadd>
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	dc4f      	bgt.n	8009b30 <_dtoa_r+0x948>
 8009a90:	9b06      	ldr	r3, [sp, #24]
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	dd4c      	ble.n	8009b30 <_dtoa_r+0x948>
 8009a96:	e011      	b.n	8009abc <_dtoa_r+0x8d4>
 8009a98:	d0c9      	beq.n	8009a2e <_dtoa_r+0x846>
 8009a9a:	9a05      	ldr	r2, [sp, #20]
 8009a9c:	331c      	adds	r3, #28
 8009a9e:	441a      	add	r2, r3
 8009aa0:	9205      	str	r2, [sp, #20]
 8009aa2:	441d      	add	r5, r3
 8009aa4:	4498      	add	r8, r3
 8009aa6:	e7c2      	b.n	8009a2e <_dtoa_r+0x846>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	e7f6      	b.n	8009a9a <_dtoa_r+0x8b2>
 8009aac:	f1b9 0f00 	cmp.w	r9, #0
 8009ab0:	dc38      	bgt.n	8009b24 <_dtoa_r+0x93c>
 8009ab2:	9b06      	ldr	r3, [sp, #24]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	dd35      	ble.n	8009b24 <_dtoa_r+0x93c>
 8009ab8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009abc:	9b02      	ldr	r3, [sp, #8]
 8009abe:	b963      	cbnz	r3, 8009ada <_dtoa_r+0x8f2>
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	2205      	movs	r2, #5
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fb86 	bl	800a1d6 <__multadd>
 8009aca:	4601      	mov	r1, r0
 8009acc:	4607      	mov	r7, r0
 8009ace:	9804      	ldr	r0, [sp, #16]
 8009ad0:	f000 fd4c 	bl	800a56c <__mcmp>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	f73f adcc 	bgt.w	8009672 <_dtoa_r+0x48a>
 8009ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009adc:	465d      	mov	r5, fp
 8009ade:	ea6f 0a03 	mvn.w	sl, r3
 8009ae2:	f04f 0900 	mov.w	r9, #0
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 fb5d 	bl	800a1a8 <_Bfree>
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	f43f aeb7 	beq.w	8009862 <_dtoa_r+0x67a>
 8009af4:	f1b9 0f00 	cmp.w	r9, #0
 8009af8:	d005      	beq.n	8009b06 <_dtoa_r+0x91e>
 8009afa:	45b1      	cmp	r9, r6
 8009afc:	d003      	beq.n	8009b06 <_dtoa_r+0x91e>
 8009afe:	4649      	mov	r1, r9
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 fb51 	bl	800a1a8 <_Bfree>
 8009b06:	4631      	mov	r1, r6
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 fb4d 	bl	800a1a8 <_Bfree>
 8009b0e:	e6a8      	b.n	8009862 <_dtoa_r+0x67a>
 8009b10:	2700      	movs	r7, #0
 8009b12:	463e      	mov	r6, r7
 8009b14:	e7e1      	b.n	8009ada <_dtoa_r+0x8f2>
 8009b16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009b1a:	463e      	mov	r6, r7
 8009b1c:	e5a9      	b.n	8009672 <_dtoa_r+0x48a>
 8009b1e:	bf00      	nop
 8009b20:	40240000 	.word	0x40240000
 8009b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b26:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 80fa 	beq.w	8009d24 <_dtoa_r+0xb3c>
 8009b30:	2d00      	cmp	r5, #0
 8009b32:	dd05      	ble.n	8009b40 <_dtoa_r+0x958>
 8009b34:	4631      	mov	r1, r6
 8009b36:	462a      	mov	r2, r5
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f000 fcc3 	bl	800a4c4 <__lshift>
 8009b3e:	4606      	mov	r6, r0
 8009b40:	9b07      	ldr	r3, [sp, #28]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d04c      	beq.n	8009be0 <_dtoa_r+0x9f8>
 8009b46:	6871      	ldr	r1, [r6, #4]
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f000 faf9 	bl	800a140 <_Balloc>
 8009b4e:	6932      	ldr	r2, [r6, #16]
 8009b50:	3202      	adds	r2, #2
 8009b52:	4605      	mov	r5, r0
 8009b54:	0092      	lsls	r2, r2, #2
 8009b56:	f106 010c 	add.w	r1, r6, #12
 8009b5a:	300c      	adds	r0, #12
 8009b5c:	f7fe fcea 	bl	8008534 <memcpy>
 8009b60:	2201      	movs	r2, #1
 8009b62:	4629      	mov	r1, r5
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fcad 	bl	800a4c4 <__lshift>
 8009b6a:	9b00      	ldr	r3, [sp, #0]
 8009b6c:	f8cd b014 	str.w	fp, [sp, #20]
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	46b1      	mov	r9, r6
 8009b76:	9307      	str	r3, [sp, #28]
 8009b78:	4606      	mov	r6, r0
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	9804      	ldr	r0, [sp, #16]
 8009b7e:	f7ff faa5 	bl	80090cc <quorem>
 8009b82:	4649      	mov	r1, r9
 8009b84:	4605      	mov	r5, r0
 8009b86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009b8a:	9804      	ldr	r0, [sp, #16]
 8009b8c:	f000 fcee 	bl	800a56c <__mcmp>
 8009b90:	4632      	mov	r2, r6
 8009b92:	9000      	str	r0, [sp, #0]
 8009b94:	4639      	mov	r1, r7
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 fd02 	bl	800a5a0 <__mdiff>
 8009b9c:	68c3      	ldr	r3, [r0, #12]
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	bb03      	cbnz	r3, 8009be4 <_dtoa_r+0x9fc>
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	9008      	str	r0, [sp, #32]
 8009ba6:	9804      	ldr	r0, [sp, #16]
 8009ba8:	f000 fce0 	bl	800a56c <__mcmp>
 8009bac:	9a08      	ldr	r2, [sp, #32]
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	9308      	str	r3, [sp, #32]
 8009bb6:	f000 faf7 	bl	800a1a8 <_Bfree>
 8009bba:	9b08      	ldr	r3, [sp, #32]
 8009bbc:	b9a3      	cbnz	r3, 8009be8 <_dtoa_r+0xa00>
 8009bbe:	9a06      	ldr	r2, [sp, #24]
 8009bc0:	b992      	cbnz	r2, 8009be8 <_dtoa_r+0xa00>
 8009bc2:	9a07      	ldr	r2, [sp, #28]
 8009bc4:	b982      	cbnz	r2, 8009be8 <_dtoa_r+0xa00>
 8009bc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009bca:	d029      	beq.n	8009c20 <_dtoa_r+0xa38>
 8009bcc:	9b00      	ldr	r3, [sp, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	dd01      	ble.n	8009bd6 <_dtoa_r+0x9ee>
 8009bd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009bd6:	9b05      	ldr	r3, [sp, #20]
 8009bd8:	1c5d      	adds	r5, r3, #1
 8009bda:	f883 8000 	strb.w	r8, [r3]
 8009bde:	e782      	b.n	8009ae6 <_dtoa_r+0x8fe>
 8009be0:	4630      	mov	r0, r6
 8009be2:	e7c2      	b.n	8009b6a <_dtoa_r+0x982>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e7e3      	b.n	8009bb0 <_dtoa_r+0x9c8>
 8009be8:	9a00      	ldr	r2, [sp, #0]
 8009bea:	2a00      	cmp	r2, #0
 8009bec:	db04      	blt.n	8009bf8 <_dtoa_r+0xa10>
 8009bee:	d125      	bne.n	8009c3c <_dtoa_r+0xa54>
 8009bf0:	9a06      	ldr	r2, [sp, #24]
 8009bf2:	bb1a      	cbnz	r2, 8009c3c <_dtoa_r+0xa54>
 8009bf4:	9a07      	ldr	r2, [sp, #28]
 8009bf6:	bb0a      	cbnz	r2, 8009c3c <_dtoa_r+0xa54>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	ddec      	ble.n	8009bd6 <_dtoa_r+0x9ee>
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	9904      	ldr	r1, [sp, #16]
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fc5f 	bl	800a4c4 <__lshift>
 8009c06:	4639      	mov	r1, r7
 8009c08:	9004      	str	r0, [sp, #16]
 8009c0a:	f000 fcaf 	bl	800a56c <__mcmp>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	dc03      	bgt.n	8009c1a <_dtoa_r+0xa32>
 8009c12:	d1e0      	bne.n	8009bd6 <_dtoa_r+0x9ee>
 8009c14:	f018 0f01 	tst.w	r8, #1
 8009c18:	d0dd      	beq.n	8009bd6 <_dtoa_r+0x9ee>
 8009c1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c1e:	d1d8      	bne.n	8009bd2 <_dtoa_r+0x9ea>
 8009c20:	9b05      	ldr	r3, [sp, #20]
 8009c22:	9a05      	ldr	r2, [sp, #20]
 8009c24:	1c5d      	adds	r5, r3, #1
 8009c26:	2339      	movs	r3, #57	; 0x39
 8009c28:	7013      	strb	r3, [r2, #0]
 8009c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c2e:	2b39      	cmp	r3, #57	; 0x39
 8009c30:	f105 32ff 	add.w	r2, r5, #4294967295
 8009c34:	d04f      	beq.n	8009cd6 <_dtoa_r+0xaee>
 8009c36:	3301      	adds	r3, #1
 8009c38:	7013      	strb	r3, [r2, #0]
 8009c3a:	e754      	b.n	8009ae6 <_dtoa_r+0x8fe>
 8009c3c:	9a05      	ldr	r2, [sp, #20]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f102 0501 	add.w	r5, r2, #1
 8009c44:	dd06      	ble.n	8009c54 <_dtoa_r+0xa6c>
 8009c46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c4a:	d0e9      	beq.n	8009c20 <_dtoa_r+0xa38>
 8009c4c:	f108 0801 	add.w	r8, r8, #1
 8009c50:	9b05      	ldr	r3, [sp, #20]
 8009c52:	e7c2      	b.n	8009bda <_dtoa_r+0x9f2>
 8009c54:	9a02      	ldr	r2, [sp, #8]
 8009c56:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009c5a:	eba5 030b 	sub.w	r3, r5, fp
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d021      	beq.n	8009ca6 <_dtoa_r+0xabe>
 8009c62:	2300      	movs	r3, #0
 8009c64:	220a      	movs	r2, #10
 8009c66:	9904      	ldr	r1, [sp, #16]
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f000 fab4 	bl	800a1d6 <__multadd>
 8009c6e:	45b1      	cmp	r9, r6
 8009c70:	9004      	str	r0, [sp, #16]
 8009c72:	f04f 0300 	mov.w	r3, #0
 8009c76:	f04f 020a 	mov.w	r2, #10
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	d105      	bne.n	8009c8c <_dtoa_r+0xaa4>
 8009c80:	f000 faa9 	bl	800a1d6 <__multadd>
 8009c84:	4681      	mov	r9, r0
 8009c86:	4606      	mov	r6, r0
 8009c88:	9505      	str	r5, [sp, #20]
 8009c8a:	e776      	b.n	8009b7a <_dtoa_r+0x992>
 8009c8c:	f000 faa3 	bl	800a1d6 <__multadd>
 8009c90:	4631      	mov	r1, r6
 8009c92:	4681      	mov	r9, r0
 8009c94:	2300      	movs	r3, #0
 8009c96:	220a      	movs	r2, #10
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fa9c 	bl	800a1d6 <__multadd>
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	e7f2      	b.n	8009c88 <_dtoa_r+0xaa0>
 8009ca2:	f04f 0900 	mov.w	r9, #0
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	9904      	ldr	r1, [sp, #16]
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fc0a 	bl	800a4c4 <__lshift>
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	9004      	str	r0, [sp, #16]
 8009cb4:	f000 fc5a 	bl	800a56c <__mcmp>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	dcb6      	bgt.n	8009c2a <_dtoa_r+0xa42>
 8009cbc:	d102      	bne.n	8009cc4 <_dtoa_r+0xadc>
 8009cbe:	f018 0f01 	tst.w	r8, #1
 8009cc2:	d1b2      	bne.n	8009c2a <_dtoa_r+0xa42>
 8009cc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cc8:	2b30      	cmp	r3, #48	; 0x30
 8009cca:	f105 32ff 	add.w	r2, r5, #4294967295
 8009cce:	f47f af0a 	bne.w	8009ae6 <_dtoa_r+0x8fe>
 8009cd2:	4615      	mov	r5, r2
 8009cd4:	e7f6      	b.n	8009cc4 <_dtoa_r+0xadc>
 8009cd6:	4593      	cmp	fp, r2
 8009cd8:	d105      	bne.n	8009ce6 <_dtoa_r+0xafe>
 8009cda:	2331      	movs	r3, #49	; 0x31
 8009cdc:	f10a 0a01 	add.w	sl, sl, #1
 8009ce0:	f88b 3000 	strb.w	r3, [fp]
 8009ce4:	e6ff      	b.n	8009ae6 <_dtoa_r+0x8fe>
 8009ce6:	4615      	mov	r5, r2
 8009ce8:	e79f      	b.n	8009c2a <_dtoa_r+0xa42>
 8009cea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009d50 <_dtoa_r+0xb68>
 8009cee:	e007      	b.n	8009d00 <_dtoa_r+0xb18>
 8009cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009d54 <_dtoa_r+0xb6c>
 8009cf6:	b11b      	cbz	r3, 8009d00 <_dtoa_r+0xb18>
 8009cf8:	f10b 0308 	add.w	r3, fp, #8
 8009cfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	4658      	mov	r0, fp
 8009d02:	b017      	add	sp, #92	; 0x5c
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	9b06      	ldr	r3, [sp, #24]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	f77f ae35 	ble.w	800997a <_dtoa_r+0x792>
 8009d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d12:	9307      	str	r3, [sp, #28]
 8009d14:	e649      	b.n	80099aa <_dtoa_r+0x7c2>
 8009d16:	9b02      	ldr	r3, [sp, #8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	dc03      	bgt.n	8009d24 <_dtoa_r+0xb3c>
 8009d1c:	9b06      	ldr	r3, [sp, #24]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	f73f aecc 	bgt.w	8009abc <_dtoa_r+0x8d4>
 8009d24:	465d      	mov	r5, fp
 8009d26:	4639      	mov	r1, r7
 8009d28:	9804      	ldr	r0, [sp, #16]
 8009d2a:	f7ff f9cf 	bl	80090cc <quorem>
 8009d2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009d32:	f805 8b01 	strb.w	r8, [r5], #1
 8009d36:	9a02      	ldr	r2, [sp, #8]
 8009d38:	eba5 030b 	sub.w	r3, r5, fp
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	ddb0      	ble.n	8009ca2 <_dtoa_r+0xaba>
 8009d40:	2300      	movs	r3, #0
 8009d42:	220a      	movs	r2, #10
 8009d44:	9904      	ldr	r1, [sp, #16]
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 fa45 	bl	800a1d6 <__multadd>
 8009d4c:	9004      	str	r0, [sp, #16]
 8009d4e:	e7ea      	b.n	8009d26 <_dtoa_r+0xb3e>
 8009d50:	0800b1e4 	.word	0x0800b1e4
 8009d54:	0800b208 	.word	0x0800b208

08009d58 <__sflush_r>:
 8009d58:	898a      	ldrh	r2, [r1, #12]
 8009d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5e:	4605      	mov	r5, r0
 8009d60:	0710      	lsls	r0, r2, #28
 8009d62:	460c      	mov	r4, r1
 8009d64:	d458      	bmi.n	8009e18 <__sflush_r+0xc0>
 8009d66:	684b      	ldr	r3, [r1, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dc05      	bgt.n	8009d78 <__sflush_r+0x20>
 8009d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	dc02      	bgt.n	8009d78 <__sflush_r+0x20>
 8009d72:	2000      	movs	r0, #0
 8009d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	d0f9      	beq.n	8009d72 <__sflush_r+0x1a>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d84:	682f      	ldr	r7, [r5, #0]
 8009d86:	6a21      	ldr	r1, [r4, #32]
 8009d88:	602b      	str	r3, [r5, #0]
 8009d8a:	d032      	beq.n	8009df2 <__sflush_r+0x9a>
 8009d8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	075a      	lsls	r2, r3, #29
 8009d92:	d505      	bpl.n	8009da0 <__sflush_r+0x48>
 8009d94:	6863      	ldr	r3, [r4, #4]
 8009d96:	1ac0      	subs	r0, r0, r3
 8009d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d9a:	b10b      	cbz	r3, 8009da0 <__sflush_r+0x48>
 8009d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d9e:	1ac0      	subs	r0, r0, r3
 8009da0:	2300      	movs	r3, #0
 8009da2:	4602      	mov	r2, r0
 8009da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009da6:	6a21      	ldr	r1, [r4, #32]
 8009da8:	4628      	mov	r0, r5
 8009daa:	47b0      	blx	r6
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	d106      	bne.n	8009dc0 <__sflush_r+0x68>
 8009db2:	6829      	ldr	r1, [r5, #0]
 8009db4:	291d      	cmp	r1, #29
 8009db6:	d848      	bhi.n	8009e4a <__sflush_r+0xf2>
 8009db8:	4a29      	ldr	r2, [pc, #164]	; (8009e60 <__sflush_r+0x108>)
 8009dba:	40ca      	lsrs	r2, r1
 8009dbc:	07d6      	lsls	r6, r2, #31
 8009dbe:	d544      	bpl.n	8009e4a <__sflush_r+0xf2>
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	6062      	str	r2, [r4, #4]
 8009dc4:	04d9      	lsls	r1, r3, #19
 8009dc6:	6922      	ldr	r2, [r4, #16]
 8009dc8:	6022      	str	r2, [r4, #0]
 8009dca:	d504      	bpl.n	8009dd6 <__sflush_r+0x7e>
 8009dcc:	1c42      	adds	r2, r0, #1
 8009dce:	d101      	bne.n	8009dd4 <__sflush_r+0x7c>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	b903      	cbnz	r3, 8009dd6 <__sflush_r+0x7e>
 8009dd4:	6560      	str	r0, [r4, #84]	; 0x54
 8009dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd8:	602f      	str	r7, [r5, #0]
 8009dda:	2900      	cmp	r1, #0
 8009ddc:	d0c9      	beq.n	8009d72 <__sflush_r+0x1a>
 8009dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009de2:	4299      	cmp	r1, r3
 8009de4:	d002      	beq.n	8009dec <__sflush_r+0x94>
 8009de6:	4628      	mov	r0, r5
 8009de8:	f000 fc94 	bl	800a714 <_free_r>
 8009dec:	2000      	movs	r0, #0
 8009dee:	6360      	str	r0, [r4, #52]	; 0x34
 8009df0:	e7c0      	b.n	8009d74 <__sflush_r+0x1c>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b0      	blx	r6
 8009df8:	1c41      	adds	r1, r0, #1
 8009dfa:	d1c8      	bne.n	8009d8e <__sflush_r+0x36>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0c5      	beq.n	8009d8e <__sflush_r+0x36>
 8009e02:	2b1d      	cmp	r3, #29
 8009e04:	d001      	beq.n	8009e0a <__sflush_r+0xb2>
 8009e06:	2b16      	cmp	r3, #22
 8009e08:	d101      	bne.n	8009e0e <__sflush_r+0xb6>
 8009e0a:	602f      	str	r7, [r5, #0]
 8009e0c:	e7b1      	b.n	8009d72 <__sflush_r+0x1a>
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	e7ad      	b.n	8009d74 <__sflush_r+0x1c>
 8009e18:	690f      	ldr	r7, [r1, #16]
 8009e1a:	2f00      	cmp	r7, #0
 8009e1c:	d0a9      	beq.n	8009d72 <__sflush_r+0x1a>
 8009e1e:	0793      	lsls	r3, r2, #30
 8009e20:	680e      	ldr	r6, [r1, #0]
 8009e22:	bf08      	it	eq
 8009e24:	694b      	ldreq	r3, [r1, #20]
 8009e26:	600f      	str	r7, [r1, #0]
 8009e28:	bf18      	it	ne
 8009e2a:	2300      	movne	r3, #0
 8009e2c:	eba6 0807 	sub.w	r8, r6, r7
 8009e30:	608b      	str	r3, [r1, #8]
 8009e32:	f1b8 0f00 	cmp.w	r8, #0
 8009e36:	dd9c      	ble.n	8009d72 <__sflush_r+0x1a>
 8009e38:	4643      	mov	r3, r8
 8009e3a:	463a      	mov	r2, r7
 8009e3c:	6a21      	ldr	r1, [r4, #32]
 8009e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b0      	blx	r6
 8009e44:	2800      	cmp	r0, #0
 8009e46:	dc06      	bgt.n	8009e56 <__sflush_r+0xfe>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	e78e      	b.n	8009d74 <__sflush_r+0x1c>
 8009e56:	4407      	add	r7, r0
 8009e58:	eba8 0800 	sub.w	r8, r8, r0
 8009e5c:	e7e9      	b.n	8009e32 <__sflush_r+0xda>
 8009e5e:	bf00      	nop
 8009e60:	20400001 	.word	0x20400001

08009e64 <_fflush_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	690b      	ldr	r3, [r1, #16]
 8009e68:	4605      	mov	r5, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	b1db      	cbz	r3, 8009ea6 <_fflush_r+0x42>
 8009e6e:	b118      	cbz	r0, 8009e78 <_fflush_r+0x14>
 8009e70:	6983      	ldr	r3, [r0, #24]
 8009e72:	b90b      	cbnz	r3, 8009e78 <_fflush_r+0x14>
 8009e74:	f000 f860 	bl	8009f38 <__sinit>
 8009e78:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <_fflush_r+0x48>)
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	d109      	bne.n	8009e92 <_fflush_r+0x2e>
 8009e7e:	686c      	ldr	r4, [r5, #4]
 8009e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e84:	b17b      	cbz	r3, 8009ea6 <_fflush_r+0x42>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4628      	mov	r0, r5
 8009e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e8e:	f7ff bf63 	b.w	8009d58 <__sflush_r>
 8009e92:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <_fflush_r+0x4c>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	d101      	bne.n	8009e9c <_fflush_r+0x38>
 8009e98:	68ac      	ldr	r4, [r5, #8]
 8009e9a:	e7f1      	b.n	8009e80 <_fflush_r+0x1c>
 8009e9c:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <_fflush_r+0x50>)
 8009e9e:	429c      	cmp	r4, r3
 8009ea0:	bf08      	it	eq
 8009ea2:	68ec      	ldreq	r4, [r5, #12]
 8009ea4:	e7ec      	b.n	8009e80 <_fflush_r+0x1c>
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	bd38      	pop	{r3, r4, r5, pc}
 8009eaa:	bf00      	nop
 8009eac:	0800b238 	.word	0x0800b238
 8009eb0:	0800b258 	.word	0x0800b258
 8009eb4:	0800b218 	.word	0x0800b218

08009eb8 <std>:
 8009eb8:	2300      	movs	r3, #0
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8009ec2:	6083      	str	r3, [r0, #8]
 8009ec4:	8181      	strh	r1, [r0, #12]
 8009ec6:	6643      	str	r3, [r0, #100]	; 0x64
 8009ec8:	81c2      	strh	r2, [r0, #14]
 8009eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ece:	6183      	str	r3, [r0, #24]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	2208      	movs	r2, #8
 8009ed4:	305c      	adds	r0, #92	; 0x5c
 8009ed6:	f7fe fb38 	bl	800854a <memset>
 8009eda:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <std+0x38>)
 8009edc:	6263      	str	r3, [r4, #36]	; 0x24
 8009ede:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <std+0x3c>)
 8009ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ee2:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <std+0x40>)
 8009ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ee6:	4b05      	ldr	r3, [pc, #20]	; (8009efc <std+0x44>)
 8009ee8:	6224      	str	r4, [r4, #32]
 8009eea:	6323      	str	r3, [r4, #48]	; 0x30
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	bf00      	nop
 8009ef0:	0800ada9 	.word	0x0800ada9
 8009ef4:	0800adcb 	.word	0x0800adcb
 8009ef8:	0800ae03 	.word	0x0800ae03
 8009efc:	0800ae27 	.word	0x0800ae27

08009f00 <_cleanup_r>:
 8009f00:	4901      	ldr	r1, [pc, #4]	; (8009f08 <_cleanup_r+0x8>)
 8009f02:	f000 b885 	b.w	800a010 <_fwalk_reent>
 8009f06:	bf00      	nop
 8009f08:	08009e65 	.word	0x08009e65

08009f0c <__sfmoreglue>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	1e4a      	subs	r2, r1, #1
 8009f10:	2568      	movs	r5, #104	; 0x68
 8009f12:	4355      	muls	r5, r2
 8009f14:	460e      	mov	r6, r1
 8009f16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f1a:	f000 fc49 	bl	800a7b0 <_malloc_r>
 8009f1e:	4604      	mov	r4, r0
 8009f20:	b140      	cbz	r0, 8009f34 <__sfmoreglue+0x28>
 8009f22:	2100      	movs	r1, #0
 8009f24:	e9c0 1600 	strd	r1, r6, [r0]
 8009f28:	300c      	adds	r0, #12
 8009f2a:	60a0      	str	r0, [r4, #8]
 8009f2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f30:	f7fe fb0b 	bl	800854a <memset>
 8009f34:	4620      	mov	r0, r4
 8009f36:	bd70      	pop	{r4, r5, r6, pc}

08009f38 <__sinit>:
 8009f38:	6983      	ldr	r3, [r0, #24]
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	bb33      	cbnz	r3, 8009f8e <__sinit+0x56>
 8009f40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009f44:	6503      	str	r3, [r0, #80]	; 0x50
 8009f46:	4b12      	ldr	r3, [pc, #72]	; (8009f90 <__sinit+0x58>)
 8009f48:	4a12      	ldr	r2, [pc, #72]	; (8009f94 <__sinit+0x5c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6282      	str	r2, [r0, #40]	; 0x28
 8009f4e:	4298      	cmp	r0, r3
 8009f50:	bf04      	itt	eq
 8009f52:	2301      	moveq	r3, #1
 8009f54:	6183      	streq	r3, [r0, #24]
 8009f56:	f000 f81f 	bl	8009f98 <__sfp>
 8009f5a:	6060      	str	r0, [r4, #4]
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f000 f81b 	bl	8009f98 <__sfp>
 8009f62:	60a0      	str	r0, [r4, #8]
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 f817 	bl	8009f98 <__sfp>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	60e0      	str	r0, [r4, #12]
 8009f6e:	2104      	movs	r1, #4
 8009f70:	6860      	ldr	r0, [r4, #4]
 8009f72:	f7ff ffa1 	bl	8009eb8 <std>
 8009f76:	2201      	movs	r2, #1
 8009f78:	2109      	movs	r1, #9
 8009f7a:	68a0      	ldr	r0, [r4, #8]
 8009f7c:	f7ff ff9c 	bl	8009eb8 <std>
 8009f80:	2202      	movs	r2, #2
 8009f82:	2112      	movs	r1, #18
 8009f84:	68e0      	ldr	r0, [r4, #12]
 8009f86:	f7ff ff97 	bl	8009eb8 <std>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	61a3      	str	r3, [r4, #24]
 8009f8e:	bd10      	pop	{r4, pc}
 8009f90:	0800b1d0 	.word	0x0800b1d0
 8009f94:	08009f01 	.word	0x08009f01

08009f98 <__sfp>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <__sfp+0x70>)
 8009f9c:	681e      	ldr	r6, [r3, #0]
 8009f9e:	69b3      	ldr	r3, [r6, #24]
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	b913      	cbnz	r3, 8009faa <__sfp+0x12>
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7ff ffc7 	bl	8009f38 <__sinit>
 8009faa:	3648      	adds	r6, #72	; 0x48
 8009fac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	d503      	bpl.n	8009fbc <__sfp+0x24>
 8009fb4:	6833      	ldr	r3, [r6, #0]
 8009fb6:	b133      	cbz	r3, 8009fc6 <__sfp+0x2e>
 8009fb8:	6836      	ldr	r6, [r6, #0]
 8009fba:	e7f7      	b.n	8009fac <__sfp+0x14>
 8009fbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fc0:	b16d      	cbz	r5, 8009fde <__sfp+0x46>
 8009fc2:	3468      	adds	r4, #104	; 0x68
 8009fc4:	e7f4      	b.n	8009fb0 <__sfp+0x18>
 8009fc6:	2104      	movs	r1, #4
 8009fc8:	4638      	mov	r0, r7
 8009fca:	f7ff ff9f 	bl	8009f0c <__sfmoreglue>
 8009fce:	6030      	str	r0, [r6, #0]
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d1f1      	bne.n	8009fb8 <__sfp+0x20>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	4604      	mov	r4, r0
 8009fda:	4620      	mov	r0, r4
 8009fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fde:	4b0b      	ldr	r3, [pc, #44]	; (800a00c <__sfp+0x74>)
 8009fe0:	6665      	str	r5, [r4, #100]	; 0x64
 8009fe2:	e9c4 5500 	strd	r5, r5, [r4]
 8009fe6:	60a5      	str	r5, [r4, #8]
 8009fe8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009fec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ff8:	f7fe faa7 	bl	800854a <memset>
 8009ffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a004:	e7e9      	b.n	8009fda <__sfp+0x42>
 800a006:	bf00      	nop
 800a008:	0800b1d0 	.word	0x0800b1d0
 800a00c:	ffff0001 	.word	0xffff0001

0800a010 <_fwalk_reent>:
 800a010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a014:	4680      	mov	r8, r0
 800a016:	4689      	mov	r9, r1
 800a018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a01c:	2600      	movs	r6, #0
 800a01e:	b914      	cbnz	r4, 800a026 <_fwalk_reent+0x16>
 800a020:	4630      	mov	r0, r6
 800a022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a026:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a02a:	3f01      	subs	r7, #1
 800a02c:	d501      	bpl.n	800a032 <_fwalk_reent+0x22>
 800a02e:	6824      	ldr	r4, [r4, #0]
 800a030:	e7f5      	b.n	800a01e <_fwalk_reent+0xe>
 800a032:	89ab      	ldrh	r3, [r5, #12]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d907      	bls.n	800a048 <_fwalk_reent+0x38>
 800a038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a03c:	3301      	adds	r3, #1
 800a03e:	d003      	beq.n	800a048 <_fwalk_reent+0x38>
 800a040:	4629      	mov	r1, r5
 800a042:	4640      	mov	r0, r8
 800a044:	47c8      	blx	r9
 800a046:	4306      	orrs	r6, r0
 800a048:	3568      	adds	r5, #104	; 0x68
 800a04a:	e7ee      	b.n	800a02a <_fwalk_reent+0x1a>

0800a04c <_localeconv_r>:
 800a04c:	4b04      	ldr	r3, [pc, #16]	; (800a060 <_localeconv_r+0x14>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6a18      	ldr	r0, [r3, #32]
 800a052:	4b04      	ldr	r3, [pc, #16]	; (800a064 <_localeconv_r+0x18>)
 800a054:	2800      	cmp	r0, #0
 800a056:	bf08      	it	eq
 800a058:	4618      	moveq	r0, r3
 800a05a:	30f0      	adds	r0, #240	; 0xf0
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	2000001c 	.word	0x2000001c
 800a064:	20000080 	.word	0x20000080

0800a068 <__swhatbuf_r>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	460e      	mov	r6, r1
 800a06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a070:	2900      	cmp	r1, #0
 800a072:	b096      	sub	sp, #88	; 0x58
 800a074:	4614      	mov	r4, r2
 800a076:	461d      	mov	r5, r3
 800a078:	da07      	bge.n	800a08a <__swhatbuf_r+0x22>
 800a07a:	2300      	movs	r3, #0
 800a07c:	602b      	str	r3, [r5, #0]
 800a07e:	89b3      	ldrh	r3, [r6, #12]
 800a080:	061a      	lsls	r2, r3, #24
 800a082:	d410      	bmi.n	800a0a6 <__swhatbuf_r+0x3e>
 800a084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a088:	e00e      	b.n	800a0a8 <__swhatbuf_r+0x40>
 800a08a:	466a      	mov	r2, sp
 800a08c:	f000 fef2 	bl	800ae74 <_fstat_r>
 800a090:	2800      	cmp	r0, #0
 800a092:	dbf2      	blt.n	800a07a <__swhatbuf_r+0x12>
 800a094:	9a01      	ldr	r2, [sp, #4]
 800a096:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a09a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a09e:	425a      	negs	r2, r3
 800a0a0:	415a      	adcs	r2, r3
 800a0a2:	602a      	str	r2, [r5, #0]
 800a0a4:	e7ee      	b.n	800a084 <__swhatbuf_r+0x1c>
 800a0a6:	2340      	movs	r3, #64	; 0x40
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	b016      	add	sp, #88	; 0x58
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}

0800a0b0 <__smakebuf_r>:
 800a0b0:	898b      	ldrh	r3, [r1, #12]
 800a0b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0b4:	079d      	lsls	r5, r3, #30
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	d507      	bpl.n	800a0cc <__smakebuf_r+0x1c>
 800a0bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	6123      	str	r3, [r4, #16]
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	6163      	str	r3, [r4, #20]
 800a0c8:	b002      	add	sp, #8
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	ab01      	add	r3, sp, #4
 800a0ce:	466a      	mov	r2, sp
 800a0d0:	f7ff ffca 	bl	800a068 <__swhatbuf_r>
 800a0d4:	9900      	ldr	r1, [sp, #0]
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f000 fb69 	bl	800a7b0 <_malloc_r>
 800a0de:	b948      	cbnz	r0, 800a0f4 <__smakebuf_r+0x44>
 800a0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e4:	059a      	lsls	r2, r3, #22
 800a0e6:	d4ef      	bmi.n	800a0c8 <__smakebuf_r+0x18>
 800a0e8:	f023 0303 	bic.w	r3, r3, #3
 800a0ec:	f043 0302 	orr.w	r3, r3, #2
 800a0f0:	81a3      	strh	r3, [r4, #12]
 800a0f2:	e7e3      	b.n	800a0bc <__smakebuf_r+0xc>
 800a0f4:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <__smakebuf_r+0x7c>)
 800a0f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	6020      	str	r0, [r4, #0]
 800a0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	9b00      	ldr	r3, [sp, #0]
 800a104:	6163      	str	r3, [r4, #20]
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	6120      	str	r0, [r4, #16]
 800a10a:	b15b      	cbz	r3, 800a124 <__smakebuf_r+0x74>
 800a10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a110:	4630      	mov	r0, r6
 800a112:	f000 fec1 	bl	800ae98 <_isatty_r>
 800a116:	b128      	cbz	r0, 800a124 <__smakebuf_r+0x74>
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f023 0303 	bic.w	r3, r3, #3
 800a11e:	f043 0301 	orr.w	r3, r3, #1
 800a122:	81a3      	strh	r3, [r4, #12]
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	431d      	orrs	r5, r3
 800a128:	81a5      	strh	r5, [r4, #12]
 800a12a:	e7cd      	b.n	800a0c8 <__smakebuf_r+0x18>
 800a12c:	08009f01 	.word	0x08009f01

0800a130 <malloc>:
 800a130:	4b02      	ldr	r3, [pc, #8]	; (800a13c <malloc+0xc>)
 800a132:	4601      	mov	r1, r0
 800a134:	6818      	ldr	r0, [r3, #0]
 800a136:	f000 bb3b 	b.w	800a7b0 <_malloc_r>
 800a13a:	bf00      	nop
 800a13c:	2000001c 	.word	0x2000001c

0800a140 <_Balloc>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a144:	4604      	mov	r4, r0
 800a146:	460e      	mov	r6, r1
 800a148:	b93d      	cbnz	r5, 800a15a <_Balloc+0x1a>
 800a14a:	2010      	movs	r0, #16
 800a14c:	f7ff fff0 	bl	800a130 <malloc>
 800a150:	6260      	str	r0, [r4, #36]	; 0x24
 800a152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a156:	6005      	str	r5, [r0, #0]
 800a158:	60c5      	str	r5, [r0, #12]
 800a15a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a15c:	68eb      	ldr	r3, [r5, #12]
 800a15e:	b183      	cbz	r3, 800a182 <_Balloc+0x42>
 800a160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a168:	b9b8      	cbnz	r0, 800a19a <_Balloc+0x5a>
 800a16a:	2101      	movs	r1, #1
 800a16c:	fa01 f506 	lsl.w	r5, r1, r6
 800a170:	1d6a      	adds	r2, r5, #5
 800a172:	0092      	lsls	r2, r2, #2
 800a174:	4620      	mov	r0, r4
 800a176:	f000 fabf 	bl	800a6f8 <_calloc_r>
 800a17a:	b160      	cbz	r0, 800a196 <_Balloc+0x56>
 800a17c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a180:	e00e      	b.n	800a1a0 <_Balloc+0x60>
 800a182:	2221      	movs	r2, #33	; 0x21
 800a184:	2104      	movs	r1, #4
 800a186:	4620      	mov	r0, r4
 800a188:	f000 fab6 	bl	800a6f8 <_calloc_r>
 800a18c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a18e:	60e8      	str	r0, [r5, #12]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e4      	bne.n	800a160 <_Balloc+0x20>
 800a196:	2000      	movs	r0, #0
 800a198:	bd70      	pop	{r4, r5, r6, pc}
 800a19a:	6802      	ldr	r2, [r0, #0]
 800a19c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1a6:	e7f7      	b.n	800a198 <_Balloc+0x58>

0800a1a8 <_Bfree>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	460d      	mov	r5, r1
 800a1b0:	b93c      	cbnz	r4, 800a1c2 <_Bfree+0x1a>
 800a1b2:	2010      	movs	r0, #16
 800a1b4:	f7ff ffbc 	bl	800a130 <malloc>
 800a1b8:	6270      	str	r0, [r6, #36]	; 0x24
 800a1ba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1be:	6004      	str	r4, [r0, #0]
 800a1c0:	60c4      	str	r4, [r0, #12]
 800a1c2:	b13d      	cbz	r5, 800a1d4 <_Bfree+0x2c>
 800a1c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a1c6:	686a      	ldr	r2, [r5, #4]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1ce:	6029      	str	r1, [r5, #0]
 800a1d0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a1d4:	bd70      	pop	{r4, r5, r6, pc}

0800a1d6 <__multadd>:
 800a1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1da:	690d      	ldr	r5, [r1, #16]
 800a1dc:	461f      	mov	r7, r3
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	f101 0c14 	add.w	ip, r1, #20
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f8dc 0000 	ldr.w	r0, [ip]
 800a1ec:	b281      	uxth	r1, r0
 800a1ee:	fb02 7101 	mla	r1, r2, r1, r7
 800a1f2:	0c0f      	lsrs	r7, r1, #16
 800a1f4:	0c00      	lsrs	r0, r0, #16
 800a1f6:	fb02 7000 	mla	r0, r2, r0, r7
 800a1fa:	b289      	uxth	r1, r1
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a202:	429d      	cmp	r5, r3
 800a204:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a208:	f84c 1b04 	str.w	r1, [ip], #4
 800a20c:	dcec      	bgt.n	800a1e8 <__multadd+0x12>
 800a20e:	b1d7      	cbz	r7, 800a246 <__multadd+0x70>
 800a210:	68a3      	ldr	r3, [r4, #8]
 800a212:	42ab      	cmp	r3, r5
 800a214:	dc12      	bgt.n	800a23c <__multadd+0x66>
 800a216:	6861      	ldr	r1, [r4, #4]
 800a218:	4630      	mov	r0, r6
 800a21a:	3101      	adds	r1, #1
 800a21c:	f7ff ff90 	bl	800a140 <_Balloc>
 800a220:	6922      	ldr	r2, [r4, #16]
 800a222:	3202      	adds	r2, #2
 800a224:	f104 010c 	add.w	r1, r4, #12
 800a228:	4680      	mov	r8, r0
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	300c      	adds	r0, #12
 800a22e:	f7fe f981 	bl	8008534 <memcpy>
 800a232:	4621      	mov	r1, r4
 800a234:	4630      	mov	r0, r6
 800a236:	f7ff ffb7 	bl	800a1a8 <_Bfree>
 800a23a:	4644      	mov	r4, r8
 800a23c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a240:	3501      	adds	r5, #1
 800a242:	615f      	str	r7, [r3, #20]
 800a244:	6125      	str	r5, [r4, #16]
 800a246:	4620      	mov	r0, r4
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a24c <__hi0bits>:
 800a24c:	0c02      	lsrs	r2, r0, #16
 800a24e:	0412      	lsls	r2, r2, #16
 800a250:	4603      	mov	r3, r0
 800a252:	b9b2      	cbnz	r2, 800a282 <__hi0bits+0x36>
 800a254:	0403      	lsls	r3, r0, #16
 800a256:	2010      	movs	r0, #16
 800a258:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a25c:	bf04      	itt	eq
 800a25e:	021b      	lsleq	r3, r3, #8
 800a260:	3008      	addeq	r0, #8
 800a262:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a266:	bf04      	itt	eq
 800a268:	011b      	lsleq	r3, r3, #4
 800a26a:	3004      	addeq	r0, #4
 800a26c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a270:	bf04      	itt	eq
 800a272:	009b      	lsleq	r3, r3, #2
 800a274:	3002      	addeq	r0, #2
 800a276:	2b00      	cmp	r3, #0
 800a278:	db06      	blt.n	800a288 <__hi0bits+0x3c>
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	d503      	bpl.n	800a286 <__hi0bits+0x3a>
 800a27e:	3001      	adds	r0, #1
 800a280:	4770      	bx	lr
 800a282:	2000      	movs	r0, #0
 800a284:	e7e8      	b.n	800a258 <__hi0bits+0xc>
 800a286:	2020      	movs	r0, #32
 800a288:	4770      	bx	lr

0800a28a <__lo0bits>:
 800a28a:	6803      	ldr	r3, [r0, #0]
 800a28c:	f013 0207 	ands.w	r2, r3, #7
 800a290:	4601      	mov	r1, r0
 800a292:	d00b      	beq.n	800a2ac <__lo0bits+0x22>
 800a294:	07da      	lsls	r2, r3, #31
 800a296:	d423      	bmi.n	800a2e0 <__lo0bits+0x56>
 800a298:	0798      	lsls	r0, r3, #30
 800a29a:	bf49      	itett	mi
 800a29c:	085b      	lsrmi	r3, r3, #1
 800a29e:	089b      	lsrpl	r3, r3, #2
 800a2a0:	2001      	movmi	r0, #1
 800a2a2:	600b      	strmi	r3, [r1, #0]
 800a2a4:	bf5c      	itt	pl
 800a2a6:	600b      	strpl	r3, [r1, #0]
 800a2a8:	2002      	movpl	r0, #2
 800a2aa:	4770      	bx	lr
 800a2ac:	b298      	uxth	r0, r3
 800a2ae:	b9a8      	cbnz	r0, 800a2dc <__lo0bits+0x52>
 800a2b0:	0c1b      	lsrs	r3, r3, #16
 800a2b2:	2010      	movs	r0, #16
 800a2b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2b8:	bf04      	itt	eq
 800a2ba:	0a1b      	lsreq	r3, r3, #8
 800a2bc:	3008      	addeq	r0, #8
 800a2be:	071a      	lsls	r2, r3, #28
 800a2c0:	bf04      	itt	eq
 800a2c2:	091b      	lsreq	r3, r3, #4
 800a2c4:	3004      	addeq	r0, #4
 800a2c6:	079a      	lsls	r2, r3, #30
 800a2c8:	bf04      	itt	eq
 800a2ca:	089b      	lsreq	r3, r3, #2
 800a2cc:	3002      	addeq	r0, #2
 800a2ce:	07da      	lsls	r2, r3, #31
 800a2d0:	d402      	bmi.n	800a2d8 <__lo0bits+0x4e>
 800a2d2:	085b      	lsrs	r3, r3, #1
 800a2d4:	d006      	beq.n	800a2e4 <__lo0bits+0x5a>
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	600b      	str	r3, [r1, #0]
 800a2da:	4770      	bx	lr
 800a2dc:	4610      	mov	r0, r2
 800a2de:	e7e9      	b.n	800a2b4 <__lo0bits+0x2a>
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	4770      	bx	lr
 800a2e4:	2020      	movs	r0, #32
 800a2e6:	4770      	bx	lr

0800a2e8 <__i2b>:
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	f7ff ff27 	bl	800a140 <_Balloc>
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	6144      	str	r4, [r0, #20]
 800a2f6:	6102      	str	r2, [r0, #16]
 800a2f8:	bd10      	pop	{r4, pc}

0800a2fa <__multiply>:
 800a2fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fe:	4614      	mov	r4, r2
 800a300:	690a      	ldr	r2, [r1, #16]
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	429a      	cmp	r2, r3
 800a306:	bfb8      	it	lt
 800a308:	460b      	movlt	r3, r1
 800a30a:	4688      	mov	r8, r1
 800a30c:	bfbc      	itt	lt
 800a30e:	46a0      	movlt	r8, r4
 800a310:	461c      	movlt	r4, r3
 800a312:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a316:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a31a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a31e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a322:	eb07 0609 	add.w	r6, r7, r9
 800a326:	42b3      	cmp	r3, r6
 800a328:	bfb8      	it	lt
 800a32a:	3101      	addlt	r1, #1
 800a32c:	f7ff ff08 	bl	800a140 <_Balloc>
 800a330:	f100 0514 	add.w	r5, r0, #20
 800a334:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a338:	462b      	mov	r3, r5
 800a33a:	2200      	movs	r2, #0
 800a33c:	4573      	cmp	r3, lr
 800a33e:	d316      	bcc.n	800a36e <__multiply+0x74>
 800a340:	f104 0214 	add.w	r2, r4, #20
 800a344:	f108 0114 	add.w	r1, r8, #20
 800a348:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a34c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	9b00      	ldr	r3, [sp, #0]
 800a354:	9201      	str	r2, [sp, #4]
 800a356:	4293      	cmp	r3, r2
 800a358:	d80c      	bhi.n	800a374 <__multiply+0x7a>
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	dd03      	ble.n	800a366 <__multiply+0x6c>
 800a35e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a362:	2b00      	cmp	r3, #0
 800a364:	d05d      	beq.n	800a422 <__multiply+0x128>
 800a366:	6106      	str	r6, [r0, #16]
 800a368:	b003      	add	sp, #12
 800a36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36e:	f843 2b04 	str.w	r2, [r3], #4
 800a372:	e7e3      	b.n	800a33c <__multiply+0x42>
 800a374:	f8b2 b000 	ldrh.w	fp, [r2]
 800a378:	f1bb 0f00 	cmp.w	fp, #0
 800a37c:	d023      	beq.n	800a3c6 <__multiply+0xcc>
 800a37e:	4689      	mov	r9, r1
 800a380:	46ac      	mov	ip, r5
 800a382:	f04f 0800 	mov.w	r8, #0
 800a386:	f859 4b04 	ldr.w	r4, [r9], #4
 800a38a:	f8dc a000 	ldr.w	sl, [ip]
 800a38e:	b2a3      	uxth	r3, r4
 800a390:	fa1f fa8a 	uxth.w	sl, sl
 800a394:	fb0b a303 	mla	r3, fp, r3, sl
 800a398:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a39c:	f8dc 4000 	ldr.w	r4, [ip]
 800a3a0:	4443      	add	r3, r8
 800a3a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a3a6:	fb0b 840a 	mla	r4, fp, sl, r8
 800a3aa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a3ae:	46e2      	mov	sl, ip
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a3b6:	454f      	cmp	r7, r9
 800a3b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a3bc:	f84a 3b04 	str.w	r3, [sl], #4
 800a3c0:	d82b      	bhi.n	800a41a <__multiply+0x120>
 800a3c2:	f8cc 8004 	str.w	r8, [ip, #4]
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a3cc:	3204      	adds	r2, #4
 800a3ce:	f1ba 0f00 	cmp.w	sl, #0
 800a3d2:	d020      	beq.n	800a416 <__multiply+0x11c>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	4689      	mov	r9, r1
 800a3d8:	46a8      	mov	r8, r5
 800a3da:	f04f 0b00 	mov.w	fp, #0
 800a3de:	f8b9 c000 	ldrh.w	ip, [r9]
 800a3e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a3e6:	fb0a 440c 	mla	r4, sl, ip, r4
 800a3ea:	445c      	add	r4, fp
 800a3ec:	46c4      	mov	ip, r8
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a3f4:	f84c 3b04 	str.w	r3, [ip], #4
 800a3f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a400:	0c1b      	lsrs	r3, r3, #16
 800a402:	fb0a b303 	mla	r3, sl, r3, fp
 800a406:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a40a:	454f      	cmp	r7, r9
 800a40c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a410:	d805      	bhi.n	800a41e <__multiply+0x124>
 800a412:	f8c8 3004 	str.w	r3, [r8, #4]
 800a416:	3504      	adds	r5, #4
 800a418:	e79b      	b.n	800a352 <__multiply+0x58>
 800a41a:	46d4      	mov	ip, sl
 800a41c:	e7b3      	b.n	800a386 <__multiply+0x8c>
 800a41e:	46e0      	mov	r8, ip
 800a420:	e7dd      	b.n	800a3de <__multiply+0xe4>
 800a422:	3e01      	subs	r6, #1
 800a424:	e799      	b.n	800a35a <__multiply+0x60>
	...

0800a428 <__pow5mult>:
 800a428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a42c:	4615      	mov	r5, r2
 800a42e:	f012 0203 	ands.w	r2, r2, #3
 800a432:	4606      	mov	r6, r0
 800a434:	460f      	mov	r7, r1
 800a436:	d007      	beq.n	800a448 <__pow5mult+0x20>
 800a438:	3a01      	subs	r2, #1
 800a43a:	4c21      	ldr	r4, [pc, #132]	; (800a4c0 <__pow5mult+0x98>)
 800a43c:	2300      	movs	r3, #0
 800a43e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a442:	f7ff fec8 	bl	800a1d6 <__multadd>
 800a446:	4607      	mov	r7, r0
 800a448:	10ad      	asrs	r5, r5, #2
 800a44a:	d035      	beq.n	800a4b8 <__pow5mult+0x90>
 800a44c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a44e:	b93c      	cbnz	r4, 800a460 <__pow5mult+0x38>
 800a450:	2010      	movs	r0, #16
 800a452:	f7ff fe6d 	bl	800a130 <malloc>
 800a456:	6270      	str	r0, [r6, #36]	; 0x24
 800a458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a45c:	6004      	str	r4, [r0, #0]
 800a45e:	60c4      	str	r4, [r0, #12]
 800a460:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a468:	b94c      	cbnz	r4, 800a47e <__pow5mult+0x56>
 800a46a:	f240 2171 	movw	r1, #625	; 0x271
 800a46e:	4630      	mov	r0, r6
 800a470:	f7ff ff3a 	bl	800a2e8 <__i2b>
 800a474:	2300      	movs	r3, #0
 800a476:	f8c8 0008 	str.w	r0, [r8, #8]
 800a47a:	4604      	mov	r4, r0
 800a47c:	6003      	str	r3, [r0, #0]
 800a47e:	f04f 0800 	mov.w	r8, #0
 800a482:	07eb      	lsls	r3, r5, #31
 800a484:	d50a      	bpl.n	800a49c <__pow5mult+0x74>
 800a486:	4639      	mov	r1, r7
 800a488:	4622      	mov	r2, r4
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff ff35 	bl	800a2fa <__multiply>
 800a490:	4639      	mov	r1, r7
 800a492:	4681      	mov	r9, r0
 800a494:	4630      	mov	r0, r6
 800a496:	f7ff fe87 	bl	800a1a8 <_Bfree>
 800a49a:	464f      	mov	r7, r9
 800a49c:	106d      	asrs	r5, r5, #1
 800a49e:	d00b      	beq.n	800a4b8 <__pow5mult+0x90>
 800a4a0:	6820      	ldr	r0, [r4, #0]
 800a4a2:	b938      	cbnz	r0, 800a4b4 <__pow5mult+0x8c>
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f7ff ff26 	bl	800a2fa <__multiply>
 800a4ae:	6020      	str	r0, [r4, #0]
 800a4b0:	f8c0 8000 	str.w	r8, [r0]
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	e7e4      	b.n	800a482 <__pow5mult+0x5a>
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4be:	bf00      	nop
 800a4c0:	0800b368 	.word	0x0800b368

0800a4c4 <__lshift>:
 800a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	6849      	ldr	r1, [r1, #4]
 800a4d2:	eb0a 0903 	add.w	r9, sl, r3
 800a4d6:	68a3      	ldr	r3, [r4, #8]
 800a4d8:	4607      	mov	r7, r0
 800a4da:	4616      	mov	r6, r2
 800a4dc:	f109 0501 	add.w	r5, r9, #1
 800a4e0:	42ab      	cmp	r3, r5
 800a4e2:	db32      	blt.n	800a54a <__lshift+0x86>
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f7ff fe2b 	bl	800a140 <_Balloc>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	f100 0114 	add.w	r1, r0, #20
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	4553      	cmp	r3, sl
 800a4f6:	db2b      	blt.n	800a550 <__lshift+0x8c>
 800a4f8:	6920      	ldr	r0, [r4, #16]
 800a4fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4fe:	f104 0314 	add.w	r3, r4, #20
 800a502:	f016 021f 	ands.w	r2, r6, #31
 800a506:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a50a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a50e:	d025      	beq.n	800a55c <__lshift+0x98>
 800a510:	f1c2 0e20 	rsb	lr, r2, #32
 800a514:	2000      	movs	r0, #0
 800a516:	681e      	ldr	r6, [r3, #0]
 800a518:	468a      	mov	sl, r1
 800a51a:	4096      	lsls	r6, r2
 800a51c:	4330      	orrs	r0, r6
 800a51e:	f84a 0b04 	str.w	r0, [sl], #4
 800a522:	f853 0b04 	ldr.w	r0, [r3], #4
 800a526:	459c      	cmp	ip, r3
 800a528:	fa20 f00e 	lsr.w	r0, r0, lr
 800a52c:	d814      	bhi.n	800a558 <__lshift+0x94>
 800a52e:	6048      	str	r0, [r1, #4]
 800a530:	b108      	cbz	r0, 800a536 <__lshift+0x72>
 800a532:	f109 0502 	add.w	r5, r9, #2
 800a536:	3d01      	subs	r5, #1
 800a538:	4638      	mov	r0, r7
 800a53a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a53e:	4621      	mov	r1, r4
 800a540:	f7ff fe32 	bl	800a1a8 <_Bfree>
 800a544:	4640      	mov	r0, r8
 800a546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54a:	3101      	adds	r1, #1
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	e7c7      	b.n	800a4e0 <__lshift+0x1c>
 800a550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a554:	3301      	adds	r3, #1
 800a556:	e7cd      	b.n	800a4f4 <__lshift+0x30>
 800a558:	4651      	mov	r1, sl
 800a55a:	e7dc      	b.n	800a516 <__lshift+0x52>
 800a55c:	3904      	subs	r1, #4
 800a55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a562:	f841 2f04 	str.w	r2, [r1, #4]!
 800a566:	459c      	cmp	ip, r3
 800a568:	d8f9      	bhi.n	800a55e <__lshift+0x9a>
 800a56a:	e7e4      	b.n	800a536 <__lshift+0x72>

0800a56c <__mcmp>:
 800a56c:	6903      	ldr	r3, [r0, #16]
 800a56e:	690a      	ldr	r2, [r1, #16]
 800a570:	1a9b      	subs	r3, r3, r2
 800a572:	b530      	push	{r4, r5, lr}
 800a574:	d10c      	bne.n	800a590 <__mcmp+0x24>
 800a576:	0092      	lsls	r2, r2, #2
 800a578:	3014      	adds	r0, #20
 800a57a:	3114      	adds	r1, #20
 800a57c:	1884      	adds	r4, r0, r2
 800a57e:	4411      	add	r1, r2
 800a580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a588:	4295      	cmp	r5, r2
 800a58a:	d003      	beq.n	800a594 <__mcmp+0x28>
 800a58c:	d305      	bcc.n	800a59a <__mcmp+0x2e>
 800a58e:	2301      	movs	r3, #1
 800a590:	4618      	mov	r0, r3
 800a592:	bd30      	pop	{r4, r5, pc}
 800a594:	42a0      	cmp	r0, r4
 800a596:	d3f3      	bcc.n	800a580 <__mcmp+0x14>
 800a598:	e7fa      	b.n	800a590 <__mcmp+0x24>
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295
 800a59e:	e7f7      	b.n	800a590 <__mcmp+0x24>

0800a5a0 <__mdiff>:
 800a5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	460d      	mov	r5, r1
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	4614      	mov	r4, r2
 800a5ae:	f7ff ffdd 	bl	800a56c <__mcmp>
 800a5b2:	1e06      	subs	r6, r0, #0
 800a5b4:	d108      	bne.n	800a5c8 <__mdiff+0x28>
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	f7ff fdc1 	bl	800a140 <_Balloc>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c8:	bfa4      	itt	ge
 800a5ca:	4623      	movge	r3, r4
 800a5cc:	462c      	movge	r4, r5
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	6861      	ldr	r1, [r4, #4]
 800a5d2:	bfa6      	itte	ge
 800a5d4:	461d      	movge	r5, r3
 800a5d6:	2600      	movge	r6, #0
 800a5d8:	2601      	movlt	r6, #1
 800a5da:	f7ff fdb1 	bl	800a140 <_Balloc>
 800a5de:	692b      	ldr	r3, [r5, #16]
 800a5e0:	60c6      	str	r6, [r0, #12]
 800a5e2:	6926      	ldr	r6, [r4, #16]
 800a5e4:	f105 0914 	add.w	r9, r5, #20
 800a5e8:	f104 0214 	add.w	r2, r4, #20
 800a5ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a5f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a5f4:	f100 0514 	add.w	r5, r0, #20
 800a5f8:	f04f 0e00 	mov.w	lr, #0
 800a5fc:	f852 ab04 	ldr.w	sl, [r2], #4
 800a600:	f859 4b04 	ldr.w	r4, [r9], #4
 800a604:	fa1e f18a 	uxtah	r1, lr, sl
 800a608:	b2a3      	uxth	r3, r4
 800a60a:	1ac9      	subs	r1, r1, r3
 800a60c:	0c23      	lsrs	r3, r4, #16
 800a60e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a612:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a616:	b289      	uxth	r1, r1
 800a618:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a61c:	45c8      	cmp	r8, r9
 800a61e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a622:	4694      	mov	ip, r2
 800a624:	f845 3b04 	str.w	r3, [r5], #4
 800a628:	d8e8      	bhi.n	800a5fc <__mdiff+0x5c>
 800a62a:	45bc      	cmp	ip, r7
 800a62c:	d304      	bcc.n	800a638 <__mdiff+0x98>
 800a62e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a632:	b183      	cbz	r3, 800a656 <__mdiff+0xb6>
 800a634:	6106      	str	r6, [r0, #16]
 800a636:	e7c5      	b.n	800a5c4 <__mdiff+0x24>
 800a638:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a63c:	fa1e f381 	uxtah	r3, lr, r1
 800a640:	141a      	asrs	r2, r3, #16
 800a642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a646:	b29b      	uxth	r3, r3
 800a648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a64c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a650:	f845 3b04 	str.w	r3, [r5], #4
 800a654:	e7e9      	b.n	800a62a <__mdiff+0x8a>
 800a656:	3e01      	subs	r6, #1
 800a658:	e7e9      	b.n	800a62e <__mdiff+0x8e>

0800a65a <__d2b>:
 800a65a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a65e:	460e      	mov	r6, r1
 800a660:	2101      	movs	r1, #1
 800a662:	ec59 8b10 	vmov	r8, r9, d0
 800a666:	4615      	mov	r5, r2
 800a668:	f7ff fd6a 	bl	800a140 <_Balloc>
 800a66c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a670:	4607      	mov	r7, r0
 800a672:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a676:	bb34      	cbnz	r4, 800a6c6 <__d2b+0x6c>
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	f1b8 0300 	subs.w	r3, r8, #0
 800a67e:	d027      	beq.n	800a6d0 <__d2b+0x76>
 800a680:	a802      	add	r0, sp, #8
 800a682:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a686:	f7ff fe00 	bl	800a28a <__lo0bits>
 800a68a:	9900      	ldr	r1, [sp, #0]
 800a68c:	b1f0      	cbz	r0, 800a6cc <__d2b+0x72>
 800a68e:	9a01      	ldr	r2, [sp, #4]
 800a690:	f1c0 0320 	rsb	r3, r0, #32
 800a694:	fa02 f303 	lsl.w	r3, r2, r3
 800a698:	430b      	orrs	r3, r1
 800a69a:	40c2      	lsrs	r2, r0
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	9201      	str	r2, [sp, #4]
 800a6a0:	9b01      	ldr	r3, [sp, #4]
 800a6a2:	61bb      	str	r3, [r7, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	bf14      	ite	ne
 800a6a8:	2102      	movne	r1, #2
 800a6aa:	2101      	moveq	r1, #1
 800a6ac:	6139      	str	r1, [r7, #16]
 800a6ae:	b1c4      	cbz	r4, 800a6e2 <__d2b+0x88>
 800a6b0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a6b4:	4404      	add	r4, r0
 800a6b6:	6034      	str	r4, [r6, #0]
 800a6b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6bc:	6028      	str	r0, [r5, #0]
 800a6be:	4638      	mov	r0, r7
 800a6c0:	b003      	add	sp, #12
 800a6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6ca:	e7d5      	b.n	800a678 <__d2b+0x1e>
 800a6cc:	6179      	str	r1, [r7, #20]
 800a6ce:	e7e7      	b.n	800a6a0 <__d2b+0x46>
 800a6d0:	a801      	add	r0, sp, #4
 800a6d2:	f7ff fdda 	bl	800a28a <__lo0bits>
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	2101      	movs	r1, #1
 800a6dc:	6139      	str	r1, [r7, #16]
 800a6de:	3020      	adds	r0, #32
 800a6e0:	e7e5      	b.n	800a6ae <__d2b+0x54>
 800a6e2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a6e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6ea:	6030      	str	r0, [r6, #0]
 800a6ec:	6918      	ldr	r0, [r3, #16]
 800a6ee:	f7ff fdad 	bl	800a24c <__hi0bits>
 800a6f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a6f6:	e7e1      	b.n	800a6bc <__d2b+0x62>

0800a6f8 <_calloc_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	fb02 f401 	mul.w	r4, r2, r1
 800a6fe:	4621      	mov	r1, r4
 800a700:	f000 f856 	bl	800a7b0 <_malloc_r>
 800a704:	4605      	mov	r5, r0
 800a706:	b118      	cbz	r0, 800a710 <_calloc_r+0x18>
 800a708:	4622      	mov	r2, r4
 800a70a:	2100      	movs	r1, #0
 800a70c:	f7fd ff1d 	bl	800854a <memset>
 800a710:	4628      	mov	r0, r5
 800a712:	bd38      	pop	{r3, r4, r5, pc}

0800a714 <_free_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4605      	mov	r5, r0
 800a718:	2900      	cmp	r1, #0
 800a71a:	d045      	beq.n	800a7a8 <_free_r+0x94>
 800a71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a720:	1f0c      	subs	r4, r1, #4
 800a722:	2b00      	cmp	r3, #0
 800a724:	bfb8      	it	lt
 800a726:	18e4      	addlt	r4, r4, r3
 800a728:	f000 fc03 	bl	800af32 <__malloc_lock>
 800a72c:	4a1f      	ldr	r2, [pc, #124]	; (800a7ac <_free_r+0x98>)
 800a72e:	6813      	ldr	r3, [r2, #0]
 800a730:	4610      	mov	r0, r2
 800a732:	b933      	cbnz	r3, 800a742 <_free_r+0x2e>
 800a734:	6063      	str	r3, [r4, #4]
 800a736:	6014      	str	r4, [r2, #0]
 800a738:	4628      	mov	r0, r5
 800a73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a73e:	f000 bbf9 	b.w	800af34 <__malloc_unlock>
 800a742:	42a3      	cmp	r3, r4
 800a744:	d90c      	bls.n	800a760 <_free_r+0x4c>
 800a746:	6821      	ldr	r1, [r4, #0]
 800a748:	1862      	adds	r2, r4, r1
 800a74a:	4293      	cmp	r3, r2
 800a74c:	bf04      	itt	eq
 800a74e:	681a      	ldreq	r2, [r3, #0]
 800a750:	685b      	ldreq	r3, [r3, #4]
 800a752:	6063      	str	r3, [r4, #4]
 800a754:	bf04      	itt	eq
 800a756:	1852      	addeq	r2, r2, r1
 800a758:	6022      	streq	r2, [r4, #0]
 800a75a:	6004      	str	r4, [r0, #0]
 800a75c:	e7ec      	b.n	800a738 <_free_r+0x24>
 800a75e:	4613      	mov	r3, r2
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	b10a      	cbz	r2, 800a768 <_free_r+0x54>
 800a764:	42a2      	cmp	r2, r4
 800a766:	d9fa      	bls.n	800a75e <_free_r+0x4a>
 800a768:	6819      	ldr	r1, [r3, #0]
 800a76a:	1858      	adds	r0, r3, r1
 800a76c:	42a0      	cmp	r0, r4
 800a76e:	d10b      	bne.n	800a788 <_free_r+0x74>
 800a770:	6820      	ldr	r0, [r4, #0]
 800a772:	4401      	add	r1, r0
 800a774:	1858      	adds	r0, r3, r1
 800a776:	4282      	cmp	r2, r0
 800a778:	6019      	str	r1, [r3, #0]
 800a77a:	d1dd      	bne.n	800a738 <_free_r+0x24>
 800a77c:	6810      	ldr	r0, [r2, #0]
 800a77e:	6852      	ldr	r2, [r2, #4]
 800a780:	605a      	str	r2, [r3, #4]
 800a782:	4401      	add	r1, r0
 800a784:	6019      	str	r1, [r3, #0]
 800a786:	e7d7      	b.n	800a738 <_free_r+0x24>
 800a788:	d902      	bls.n	800a790 <_free_r+0x7c>
 800a78a:	230c      	movs	r3, #12
 800a78c:	602b      	str	r3, [r5, #0]
 800a78e:	e7d3      	b.n	800a738 <_free_r+0x24>
 800a790:	6820      	ldr	r0, [r4, #0]
 800a792:	1821      	adds	r1, r4, r0
 800a794:	428a      	cmp	r2, r1
 800a796:	bf04      	itt	eq
 800a798:	6811      	ldreq	r1, [r2, #0]
 800a79a:	6852      	ldreq	r2, [r2, #4]
 800a79c:	6062      	str	r2, [r4, #4]
 800a79e:	bf04      	itt	eq
 800a7a0:	1809      	addeq	r1, r1, r0
 800a7a2:	6021      	streq	r1, [r4, #0]
 800a7a4:	605c      	str	r4, [r3, #4]
 800a7a6:	e7c7      	b.n	800a738 <_free_r+0x24>
 800a7a8:	bd38      	pop	{r3, r4, r5, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20001170 	.word	0x20001170

0800a7b0 <_malloc_r>:
 800a7b0:	b570      	push	{r4, r5, r6, lr}
 800a7b2:	1ccd      	adds	r5, r1, #3
 800a7b4:	f025 0503 	bic.w	r5, r5, #3
 800a7b8:	3508      	adds	r5, #8
 800a7ba:	2d0c      	cmp	r5, #12
 800a7bc:	bf38      	it	cc
 800a7be:	250c      	movcc	r5, #12
 800a7c0:	2d00      	cmp	r5, #0
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	db01      	blt.n	800a7ca <_malloc_r+0x1a>
 800a7c6:	42a9      	cmp	r1, r5
 800a7c8:	d903      	bls.n	800a7d2 <_malloc_r+0x22>
 800a7ca:	230c      	movs	r3, #12
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	bd70      	pop	{r4, r5, r6, pc}
 800a7d2:	f000 fbae 	bl	800af32 <__malloc_lock>
 800a7d6:	4a21      	ldr	r2, [pc, #132]	; (800a85c <_malloc_r+0xac>)
 800a7d8:	6814      	ldr	r4, [r2, #0]
 800a7da:	4621      	mov	r1, r4
 800a7dc:	b991      	cbnz	r1, 800a804 <_malloc_r+0x54>
 800a7de:	4c20      	ldr	r4, [pc, #128]	; (800a860 <_malloc_r+0xb0>)
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	b91b      	cbnz	r3, 800a7ec <_malloc_r+0x3c>
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f000 facf 	bl	800ad88 <_sbrk_r>
 800a7ea:	6020      	str	r0, [r4, #0]
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f000 faca 	bl	800ad88 <_sbrk_r>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d124      	bne.n	800a842 <_malloc_r+0x92>
 800a7f8:	230c      	movs	r3, #12
 800a7fa:	6033      	str	r3, [r6, #0]
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f000 fb99 	bl	800af34 <__malloc_unlock>
 800a802:	e7e4      	b.n	800a7ce <_malloc_r+0x1e>
 800a804:	680b      	ldr	r3, [r1, #0]
 800a806:	1b5b      	subs	r3, r3, r5
 800a808:	d418      	bmi.n	800a83c <_malloc_r+0x8c>
 800a80a:	2b0b      	cmp	r3, #11
 800a80c:	d90f      	bls.n	800a82e <_malloc_r+0x7e>
 800a80e:	600b      	str	r3, [r1, #0]
 800a810:	50cd      	str	r5, [r1, r3]
 800a812:	18cc      	adds	r4, r1, r3
 800a814:	4630      	mov	r0, r6
 800a816:	f000 fb8d 	bl	800af34 <__malloc_unlock>
 800a81a:	f104 000b 	add.w	r0, r4, #11
 800a81e:	1d23      	adds	r3, r4, #4
 800a820:	f020 0007 	bic.w	r0, r0, #7
 800a824:	1ac3      	subs	r3, r0, r3
 800a826:	d0d3      	beq.n	800a7d0 <_malloc_r+0x20>
 800a828:	425a      	negs	r2, r3
 800a82a:	50e2      	str	r2, [r4, r3]
 800a82c:	e7d0      	b.n	800a7d0 <_malloc_r+0x20>
 800a82e:	428c      	cmp	r4, r1
 800a830:	684b      	ldr	r3, [r1, #4]
 800a832:	bf16      	itet	ne
 800a834:	6063      	strne	r3, [r4, #4]
 800a836:	6013      	streq	r3, [r2, #0]
 800a838:	460c      	movne	r4, r1
 800a83a:	e7eb      	b.n	800a814 <_malloc_r+0x64>
 800a83c:	460c      	mov	r4, r1
 800a83e:	6849      	ldr	r1, [r1, #4]
 800a840:	e7cc      	b.n	800a7dc <_malloc_r+0x2c>
 800a842:	1cc4      	adds	r4, r0, #3
 800a844:	f024 0403 	bic.w	r4, r4, #3
 800a848:	42a0      	cmp	r0, r4
 800a84a:	d005      	beq.n	800a858 <_malloc_r+0xa8>
 800a84c:	1a21      	subs	r1, r4, r0
 800a84e:	4630      	mov	r0, r6
 800a850:	f000 fa9a 	bl	800ad88 <_sbrk_r>
 800a854:	3001      	adds	r0, #1
 800a856:	d0cf      	beq.n	800a7f8 <_malloc_r+0x48>
 800a858:	6025      	str	r5, [r4, #0]
 800a85a:	e7db      	b.n	800a814 <_malloc_r+0x64>
 800a85c:	20001170 	.word	0x20001170
 800a860:	20001174 	.word	0x20001174

0800a864 <__ssputs_r>:
 800a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	688e      	ldr	r6, [r1, #8]
 800a86a:	429e      	cmp	r6, r3
 800a86c:	4682      	mov	sl, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	4690      	mov	r8, r2
 800a872:	4699      	mov	r9, r3
 800a874:	d837      	bhi.n	800a8e6 <__ssputs_r+0x82>
 800a876:	898a      	ldrh	r2, [r1, #12]
 800a878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a87c:	d031      	beq.n	800a8e2 <__ssputs_r+0x7e>
 800a87e:	6825      	ldr	r5, [r4, #0]
 800a880:	6909      	ldr	r1, [r1, #16]
 800a882:	1a6f      	subs	r7, r5, r1
 800a884:	6965      	ldr	r5, [r4, #20]
 800a886:	2302      	movs	r3, #2
 800a888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a88c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a890:	f109 0301 	add.w	r3, r9, #1
 800a894:	443b      	add	r3, r7
 800a896:	429d      	cmp	r5, r3
 800a898:	bf38      	it	cc
 800a89a:	461d      	movcc	r5, r3
 800a89c:	0553      	lsls	r3, r2, #21
 800a89e:	d530      	bpl.n	800a902 <__ssputs_r+0x9e>
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	f7ff ff85 	bl	800a7b0 <_malloc_r>
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	b950      	cbnz	r0, 800a8c0 <__ssputs_r+0x5c>
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	f8ca 3000 	str.w	r3, [sl]
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c0:	463a      	mov	r2, r7
 800a8c2:	6921      	ldr	r1, [r4, #16]
 800a8c4:	f7fd fe36 	bl	8008534 <memcpy>
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	6126      	str	r6, [r4, #16]
 800a8d6:	6165      	str	r5, [r4, #20]
 800a8d8:	443e      	add	r6, r7
 800a8da:	1bed      	subs	r5, r5, r7
 800a8dc:	6026      	str	r6, [r4, #0]
 800a8de:	60a5      	str	r5, [r4, #8]
 800a8e0:	464e      	mov	r6, r9
 800a8e2:	454e      	cmp	r6, r9
 800a8e4:	d900      	bls.n	800a8e8 <__ssputs_r+0x84>
 800a8e6:	464e      	mov	r6, r9
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	4641      	mov	r1, r8
 800a8ec:	6820      	ldr	r0, [r4, #0]
 800a8ee:	f000 fb07 	bl	800af00 <memmove>
 800a8f2:	68a3      	ldr	r3, [r4, #8]
 800a8f4:	1b9b      	subs	r3, r3, r6
 800a8f6:	60a3      	str	r3, [r4, #8]
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	441e      	add	r6, r3
 800a8fc:	6026      	str	r6, [r4, #0]
 800a8fe:	2000      	movs	r0, #0
 800a900:	e7dc      	b.n	800a8bc <__ssputs_r+0x58>
 800a902:	462a      	mov	r2, r5
 800a904:	f000 fb17 	bl	800af36 <_realloc_r>
 800a908:	4606      	mov	r6, r0
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d1e2      	bne.n	800a8d4 <__ssputs_r+0x70>
 800a90e:	6921      	ldr	r1, [r4, #16]
 800a910:	4650      	mov	r0, sl
 800a912:	f7ff feff 	bl	800a714 <_free_r>
 800a916:	e7c8      	b.n	800a8aa <__ssputs_r+0x46>

0800a918 <_svfiprintf_r>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	461d      	mov	r5, r3
 800a91e:	898b      	ldrh	r3, [r1, #12]
 800a920:	061f      	lsls	r7, r3, #24
 800a922:	b09d      	sub	sp, #116	; 0x74
 800a924:	4680      	mov	r8, r0
 800a926:	460c      	mov	r4, r1
 800a928:	4616      	mov	r6, r2
 800a92a:	d50f      	bpl.n	800a94c <_svfiprintf_r+0x34>
 800a92c:	690b      	ldr	r3, [r1, #16]
 800a92e:	b96b      	cbnz	r3, 800a94c <_svfiprintf_r+0x34>
 800a930:	2140      	movs	r1, #64	; 0x40
 800a932:	f7ff ff3d 	bl	800a7b0 <_malloc_r>
 800a936:	6020      	str	r0, [r4, #0]
 800a938:	6120      	str	r0, [r4, #16]
 800a93a:	b928      	cbnz	r0, 800a948 <_svfiprintf_r+0x30>
 800a93c:	230c      	movs	r3, #12
 800a93e:	f8c8 3000 	str.w	r3, [r8]
 800a942:	f04f 30ff 	mov.w	r0, #4294967295
 800a946:	e0c8      	b.n	800aada <_svfiprintf_r+0x1c2>
 800a948:	2340      	movs	r3, #64	; 0x40
 800a94a:	6163      	str	r3, [r4, #20]
 800a94c:	2300      	movs	r3, #0
 800a94e:	9309      	str	r3, [sp, #36]	; 0x24
 800a950:	2320      	movs	r3, #32
 800a952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a956:	2330      	movs	r3, #48	; 0x30
 800a958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a95c:	9503      	str	r5, [sp, #12]
 800a95e:	f04f 0b01 	mov.w	fp, #1
 800a962:	4637      	mov	r7, r6
 800a964:	463d      	mov	r5, r7
 800a966:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a96a:	b10b      	cbz	r3, 800a970 <_svfiprintf_r+0x58>
 800a96c:	2b25      	cmp	r3, #37	; 0x25
 800a96e:	d13e      	bne.n	800a9ee <_svfiprintf_r+0xd6>
 800a970:	ebb7 0a06 	subs.w	sl, r7, r6
 800a974:	d00b      	beq.n	800a98e <_svfiprintf_r+0x76>
 800a976:	4653      	mov	r3, sl
 800a978:	4632      	mov	r2, r6
 800a97a:	4621      	mov	r1, r4
 800a97c:	4640      	mov	r0, r8
 800a97e:	f7ff ff71 	bl	800a864 <__ssputs_r>
 800a982:	3001      	adds	r0, #1
 800a984:	f000 80a4 	beq.w	800aad0 <_svfiprintf_r+0x1b8>
 800a988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98a:	4453      	add	r3, sl
 800a98c:	9309      	str	r3, [sp, #36]	; 0x24
 800a98e:	783b      	ldrb	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 809d 	beq.w	800aad0 <_svfiprintf_r+0x1b8>
 800a996:	2300      	movs	r3, #0
 800a998:	f04f 32ff 	mov.w	r2, #4294967295
 800a99c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	9307      	str	r3, [sp, #28]
 800a9a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9a8:	931a      	str	r3, [sp, #104]	; 0x68
 800a9aa:	462f      	mov	r7, r5
 800a9ac:	2205      	movs	r2, #5
 800a9ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a9b2:	4850      	ldr	r0, [pc, #320]	; (800aaf4 <_svfiprintf_r+0x1dc>)
 800a9b4:	f7f5 fc3c 	bl	8000230 <memchr>
 800a9b8:	9b04      	ldr	r3, [sp, #16]
 800a9ba:	b9d0      	cbnz	r0, 800a9f2 <_svfiprintf_r+0xda>
 800a9bc:	06d9      	lsls	r1, r3, #27
 800a9be:	bf44      	itt	mi
 800a9c0:	2220      	movmi	r2, #32
 800a9c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9c6:	071a      	lsls	r2, r3, #28
 800a9c8:	bf44      	itt	mi
 800a9ca:	222b      	movmi	r2, #43	; 0x2b
 800a9cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9d0:	782a      	ldrb	r2, [r5, #0]
 800a9d2:	2a2a      	cmp	r2, #42	; 0x2a
 800a9d4:	d015      	beq.n	800aa02 <_svfiprintf_r+0xea>
 800a9d6:	9a07      	ldr	r2, [sp, #28]
 800a9d8:	462f      	mov	r7, r5
 800a9da:	2000      	movs	r0, #0
 800a9dc:	250a      	movs	r5, #10
 800a9de:	4639      	mov	r1, r7
 800a9e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e4:	3b30      	subs	r3, #48	; 0x30
 800a9e6:	2b09      	cmp	r3, #9
 800a9e8:	d94d      	bls.n	800aa86 <_svfiprintf_r+0x16e>
 800a9ea:	b1b8      	cbz	r0, 800aa1c <_svfiprintf_r+0x104>
 800a9ec:	e00f      	b.n	800aa0e <_svfiprintf_r+0xf6>
 800a9ee:	462f      	mov	r7, r5
 800a9f0:	e7b8      	b.n	800a964 <_svfiprintf_r+0x4c>
 800a9f2:	4a40      	ldr	r2, [pc, #256]	; (800aaf4 <_svfiprintf_r+0x1dc>)
 800a9f4:	1a80      	subs	r0, r0, r2
 800a9f6:	fa0b f000 	lsl.w	r0, fp, r0
 800a9fa:	4318      	orrs	r0, r3
 800a9fc:	9004      	str	r0, [sp, #16]
 800a9fe:	463d      	mov	r5, r7
 800aa00:	e7d3      	b.n	800a9aa <_svfiprintf_r+0x92>
 800aa02:	9a03      	ldr	r2, [sp, #12]
 800aa04:	1d11      	adds	r1, r2, #4
 800aa06:	6812      	ldr	r2, [r2, #0]
 800aa08:	9103      	str	r1, [sp, #12]
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	db01      	blt.n	800aa12 <_svfiprintf_r+0xfa>
 800aa0e:	9207      	str	r2, [sp, #28]
 800aa10:	e004      	b.n	800aa1c <_svfiprintf_r+0x104>
 800aa12:	4252      	negs	r2, r2
 800aa14:	f043 0302 	orr.w	r3, r3, #2
 800aa18:	9207      	str	r2, [sp, #28]
 800aa1a:	9304      	str	r3, [sp, #16]
 800aa1c:	783b      	ldrb	r3, [r7, #0]
 800aa1e:	2b2e      	cmp	r3, #46	; 0x2e
 800aa20:	d10c      	bne.n	800aa3c <_svfiprintf_r+0x124>
 800aa22:	787b      	ldrb	r3, [r7, #1]
 800aa24:	2b2a      	cmp	r3, #42	; 0x2a
 800aa26:	d133      	bne.n	800aa90 <_svfiprintf_r+0x178>
 800aa28:	9b03      	ldr	r3, [sp, #12]
 800aa2a:	1d1a      	adds	r2, r3, #4
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	9203      	str	r2, [sp, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	bfb8      	it	lt
 800aa34:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa38:	3702      	adds	r7, #2
 800aa3a:	9305      	str	r3, [sp, #20]
 800aa3c:	4d2e      	ldr	r5, [pc, #184]	; (800aaf8 <_svfiprintf_r+0x1e0>)
 800aa3e:	7839      	ldrb	r1, [r7, #0]
 800aa40:	2203      	movs	r2, #3
 800aa42:	4628      	mov	r0, r5
 800aa44:	f7f5 fbf4 	bl	8000230 <memchr>
 800aa48:	b138      	cbz	r0, 800aa5a <_svfiprintf_r+0x142>
 800aa4a:	2340      	movs	r3, #64	; 0x40
 800aa4c:	1b40      	subs	r0, r0, r5
 800aa4e:	fa03 f000 	lsl.w	r0, r3, r0
 800aa52:	9b04      	ldr	r3, [sp, #16]
 800aa54:	4303      	orrs	r3, r0
 800aa56:	3701      	adds	r7, #1
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	7839      	ldrb	r1, [r7, #0]
 800aa5c:	4827      	ldr	r0, [pc, #156]	; (800aafc <_svfiprintf_r+0x1e4>)
 800aa5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa62:	2206      	movs	r2, #6
 800aa64:	1c7e      	adds	r6, r7, #1
 800aa66:	f7f5 fbe3 	bl	8000230 <memchr>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d038      	beq.n	800aae0 <_svfiprintf_r+0x1c8>
 800aa6e:	4b24      	ldr	r3, [pc, #144]	; (800ab00 <_svfiprintf_r+0x1e8>)
 800aa70:	bb13      	cbnz	r3, 800aab8 <_svfiprintf_r+0x1a0>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	3307      	adds	r3, #7
 800aa76:	f023 0307 	bic.w	r3, r3, #7
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	9303      	str	r3, [sp, #12]
 800aa7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa80:	444b      	add	r3, r9
 800aa82:	9309      	str	r3, [sp, #36]	; 0x24
 800aa84:	e76d      	b.n	800a962 <_svfiprintf_r+0x4a>
 800aa86:	fb05 3202 	mla	r2, r5, r2, r3
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	460f      	mov	r7, r1
 800aa8e:	e7a6      	b.n	800a9de <_svfiprintf_r+0xc6>
 800aa90:	2300      	movs	r3, #0
 800aa92:	3701      	adds	r7, #1
 800aa94:	9305      	str	r3, [sp, #20]
 800aa96:	4619      	mov	r1, r3
 800aa98:	250a      	movs	r5, #10
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa0:	3a30      	subs	r2, #48	; 0x30
 800aaa2:	2a09      	cmp	r2, #9
 800aaa4:	d903      	bls.n	800aaae <_svfiprintf_r+0x196>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d0c8      	beq.n	800aa3c <_svfiprintf_r+0x124>
 800aaaa:	9105      	str	r1, [sp, #20]
 800aaac:	e7c6      	b.n	800aa3c <_svfiprintf_r+0x124>
 800aaae:	fb05 2101 	mla	r1, r5, r1, r2
 800aab2:	2301      	movs	r3, #1
 800aab4:	4607      	mov	r7, r0
 800aab6:	e7f0      	b.n	800aa9a <_svfiprintf_r+0x182>
 800aab8:	ab03      	add	r3, sp, #12
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	4622      	mov	r2, r4
 800aabe:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <_svfiprintf_r+0x1ec>)
 800aac0:	a904      	add	r1, sp, #16
 800aac2:	4640      	mov	r0, r8
 800aac4:	f7fd fdde 	bl	8008684 <_printf_float>
 800aac8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aacc:	4681      	mov	r9, r0
 800aace:	d1d6      	bne.n	800aa7e <_svfiprintf_r+0x166>
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	065b      	lsls	r3, r3, #25
 800aad4:	f53f af35 	bmi.w	800a942 <_svfiprintf_r+0x2a>
 800aad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aada:	b01d      	add	sp, #116	; 0x74
 800aadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae0:	ab03      	add	r3, sp, #12
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	4622      	mov	r2, r4
 800aae6:	4b07      	ldr	r3, [pc, #28]	; (800ab04 <_svfiprintf_r+0x1ec>)
 800aae8:	a904      	add	r1, sp, #16
 800aaea:	4640      	mov	r0, r8
 800aaec:	f7fe f880 	bl	8008bf0 <_printf_i>
 800aaf0:	e7ea      	b.n	800aac8 <_svfiprintf_r+0x1b0>
 800aaf2:	bf00      	nop
 800aaf4:	0800b374 	.word	0x0800b374
 800aaf8:	0800b37a 	.word	0x0800b37a
 800aafc:	0800b37e 	.word	0x0800b37e
 800ab00:	08008685 	.word	0x08008685
 800ab04:	0800a865 	.word	0x0800a865

0800ab08 <__sfputc_r>:
 800ab08:	6893      	ldr	r3, [r2, #8]
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	b410      	push	{r4}
 800ab10:	6093      	str	r3, [r2, #8]
 800ab12:	da08      	bge.n	800ab26 <__sfputc_r+0x1e>
 800ab14:	6994      	ldr	r4, [r2, #24]
 800ab16:	42a3      	cmp	r3, r4
 800ab18:	db01      	blt.n	800ab1e <__sfputc_r+0x16>
 800ab1a:	290a      	cmp	r1, #10
 800ab1c:	d103      	bne.n	800ab26 <__sfputc_r+0x1e>
 800ab1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab22:	f7fe ba13 	b.w	8008f4c <__swbuf_r>
 800ab26:	6813      	ldr	r3, [r2, #0]
 800ab28:	1c58      	adds	r0, r3, #1
 800ab2a:	6010      	str	r0, [r2, #0]
 800ab2c:	7019      	strb	r1, [r3, #0]
 800ab2e:	4608      	mov	r0, r1
 800ab30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <__sfputs_r>:
 800ab36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab38:	4606      	mov	r6, r0
 800ab3a:	460f      	mov	r7, r1
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	18d5      	adds	r5, r2, r3
 800ab40:	42ac      	cmp	r4, r5
 800ab42:	d101      	bne.n	800ab48 <__sfputs_r+0x12>
 800ab44:	2000      	movs	r0, #0
 800ab46:	e007      	b.n	800ab58 <__sfputs_r+0x22>
 800ab48:	463a      	mov	r2, r7
 800ab4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f7ff ffda 	bl	800ab08 <__sfputc_r>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d1f3      	bne.n	800ab40 <__sfputs_r+0xa>
 800ab58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab5c <_vfiprintf_r>:
 800ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	460c      	mov	r4, r1
 800ab62:	b09d      	sub	sp, #116	; 0x74
 800ab64:	4617      	mov	r7, r2
 800ab66:	461d      	mov	r5, r3
 800ab68:	4606      	mov	r6, r0
 800ab6a:	b118      	cbz	r0, 800ab74 <_vfiprintf_r+0x18>
 800ab6c:	6983      	ldr	r3, [r0, #24]
 800ab6e:	b90b      	cbnz	r3, 800ab74 <_vfiprintf_r+0x18>
 800ab70:	f7ff f9e2 	bl	8009f38 <__sinit>
 800ab74:	4b7c      	ldr	r3, [pc, #496]	; (800ad68 <_vfiprintf_r+0x20c>)
 800ab76:	429c      	cmp	r4, r3
 800ab78:	d158      	bne.n	800ac2c <_vfiprintf_r+0xd0>
 800ab7a:	6874      	ldr	r4, [r6, #4]
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	0718      	lsls	r0, r3, #28
 800ab80:	d55e      	bpl.n	800ac40 <_vfiprintf_r+0xe4>
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d05b      	beq.n	800ac40 <_vfiprintf_r+0xe4>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab8c:	2320      	movs	r3, #32
 800ab8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab92:	2330      	movs	r3, #48	; 0x30
 800ab94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab98:	9503      	str	r5, [sp, #12]
 800ab9a:	f04f 0b01 	mov.w	fp, #1
 800ab9e:	46b8      	mov	r8, r7
 800aba0:	4645      	mov	r5, r8
 800aba2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aba6:	b10b      	cbz	r3, 800abac <_vfiprintf_r+0x50>
 800aba8:	2b25      	cmp	r3, #37	; 0x25
 800abaa:	d154      	bne.n	800ac56 <_vfiprintf_r+0xfa>
 800abac:	ebb8 0a07 	subs.w	sl, r8, r7
 800abb0:	d00b      	beq.n	800abca <_vfiprintf_r+0x6e>
 800abb2:	4653      	mov	r3, sl
 800abb4:	463a      	mov	r2, r7
 800abb6:	4621      	mov	r1, r4
 800abb8:	4630      	mov	r0, r6
 800abba:	f7ff ffbc 	bl	800ab36 <__sfputs_r>
 800abbe:	3001      	adds	r0, #1
 800abc0:	f000 80c2 	beq.w	800ad48 <_vfiprintf_r+0x1ec>
 800abc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc6:	4453      	add	r3, sl
 800abc8:	9309      	str	r3, [sp, #36]	; 0x24
 800abca:	f898 3000 	ldrb.w	r3, [r8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 80ba 	beq.w	800ad48 <_vfiprintf_r+0x1ec>
 800abd4:	2300      	movs	r3, #0
 800abd6:	f04f 32ff 	mov.w	r2, #4294967295
 800abda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	9307      	str	r3, [sp, #28]
 800abe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abe6:	931a      	str	r3, [sp, #104]	; 0x68
 800abe8:	46a8      	mov	r8, r5
 800abea:	2205      	movs	r2, #5
 800abec:	f818 1b01 	ldrb.w	r1, [r8], #1
 800abf0:	485e      	ldr	r0, [pc, #376]	; (800ad6c <_vfiprintf_r+0x210>)
 800abf2:	f7f5 fb1d 	bl	8000230 <memchr>
 800abf6:	9b04      	ldr	r3, [sp, #16]
 800abf8:	bb78      	cbnz	r0, 800ac5a <_vfiprintf_r+0xfe>
 800abfa:	06d9      	lsls	r1, r3, #27
 800abfc:	bf44      	itt	mi
 800abfe:	2220      	movmi	r2, #32
 800ac00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ac04:	071a      	lsls	r2, r3, #28
 800ac06:	bf44      	itt	mi
 800ac08:	222b      	movmi	r2, #43	; 0x2b
 800ac0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ac0e:	782a      	ldrb	r2, [r5, #0]
 800ac10:	2a2a      	cmp	r2, #42	; 0x2a
 800ac12:	d02a      	beq.n	800ac6a <_vfiprintf_r+0x10e>
 800ac14:	9a07      	ldr	r2, [sp, #28]
 800ac16:	46a8      	mov	r8, r5
 800ac18:	2000      	movs	r0, #0
 800ac1a:	250a      	movs	r5, #10
 800ac1c:	4641      	mov	r1, r8
 800ac1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac22:	3b30      	subs	r3, #48	; 0x30
 800ac24:	2b09      	cmp	r3, #9
 800ac26:	d969      	bls.n	800acfc <_vfiprintf_r+0x1a0>
 800ac28:	b360      	cbz	r0, 800ac84 <_vfiprintf_r+0x128>
 800ac2a:	e024      	b.n	800ac76 <_vfiprintf_r+0x11a>
 800ac2c:	4b50      	ldr	r3, [pc, #320]	; (800ad70 <_vfiprintf_r+0x214>)
 800ac2e:	429c      	cmp	r4, r3
 800ac30:	d101      	bne.n	800ac36 <_vfiprintf_r+0xda>
 800ac32:	68b4      	ldr	r4, [r6, #8]
 800ac34:	e7a2      	b.n	800ab7c <_vfiprintf_r+0x20>
 800ac36:	4b4f      	ldr	r3, [pc, #316]	; (800ad74 <_vfiprintf_r+0x218>)
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	bf08      	it	eq
 800ac3c:	68f4      	ldreq	r4, [r6, #12]
 800ac3e:	e79d      	b.n	800ab7c <_vfiprintf_r+0x20>
 800ac40:	4621      	mov	r1, r4
 800ac42:	4630      	mov	r0, r6
 800ac44:	f7fe f9d4 	bl	8008ff0 <__swsetup_r>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d09d      	beq.n	800ab88 <_vfiprintf_r+0x2c>
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac50:	b01d      	add	sp, #116	; 0x74
 800ac52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac56:	46a8      	mov	r8, r5
 800ac58:	e7a2      	b.n	800aba0 <_vfiprintf_r+0x44>
 800ac5a:	4a44      	ldr	r2, [pc, #272]	; (800ad6c <_vfiprintf_r+0x210>)
 800ac5c:	1a80      	subs	r0, r0, r2
 800ac5e:	fa0b f000 	lsl.w	r0, fp, r0
 800ac62:	4318      	orrs	r0, r3
 800ac64:	9004      	str	r0, [sp, #16]
 800ac66:	4645      	mov	r5, r8
 800ac68:	e7be      	b.n	800abe8 <_vfiprintf_r+0x8c>
 800ac6a:	9a03      	ldr	r2, [sp, #12]
 800ac6c:	1d11      	adds	r1, r2, #4
 800ac6e:	6812      	ldr	r2, [r2, #0]
 800ac70:	9103      	str	r1, [sp, #12]
 800ac72:	2a00      	cmp	r2, #0
 800ac74:	db01      	blt.n	800ac7a <_vfiprintf_r+0x11e>
 800ac76:	9207      	str	r2, [sp, #28]
 800ac78:	e004      	b.n	800ac84 <_vfiprintf_r+0x128>
 800ac7a:	4252      	negs	r2, r2
 800ac7c:	f043 0302 	orr.w	r3, r3, #2
 800ac80:	9207      	str	r2, [sp, #28]
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	f898 3000 	ldrb.w	r3, [r8]
 800ac88:	2b2e      	cmp	r3, #46	; 0x2e
 800ac8a:	d10e      	bne.n	800acaa <_vfiprintf_r+0x14e>
 800ac8c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ac90:	2b2a      	cmp	r3, #42	; 0x2a
 800ac92:	d138      	bne.n	800ad06 <_vfiprintf_r+0x1aa>
 800ac94:	9b03      	ldr	r3, [sp, #12]
 800ac96:	1d1a      	adds	r2, r3, #4
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	9203      	str	r2, [sp, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	bfb8      	it	lt
 800aca0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aca4:	f108 0802 	add.w	r8, r8, #2
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	4d33      	ldr	r5, [pc, #204]	; (800ad78 <_vfiprintf_r+0x21c>)
 800acac:	f898 1000 	ldrb.w	r1, [r8]
 800acb0:	2203      	movs	r2, #3
 800acb2:	4628      	mov	r0, r5
 800acb4:	f7f5 fabc 	bl	8000230 <memchr>
 800acb8:	b140      	cbz	r0, 800accc <_vfiprintf_r+0x170>
 800acba:	2340      	movs	r3, #64	; 0x40
 800acbc:	1b40      	subs	r0, r0, r5
 800acbe:	fa03 f000 	lsl.w	r0, r3, r0
 800acc2:	9b04      	ldr	r3, [sp, #16]
 800acc4:	4303      	orrs	r3, r0
 800acc6:	f108 0801 	add.w	r8, r8, #1
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	f898 1000 	ldrb.w	r1, [r8]
 800acd0:	482a      	ldr	r0, [pc, #168]	; (800ad7c <_vfiprintf_r+0x220>)
 800acd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acd6:	2206      	movs	r2, #6
 800acd8:	f108 0701 	add.w	r7, r8, #1
 800acdc:	f7f5 faa8 	bl	8000230 <memchr>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d037      	beq.n	800ad54 <_vfiprintf_r+0x1f8>
 800ace4:	4b26      	ldr	r3, [pc, #152]	; (800ad80 <_vfiprintf_r+0x224>)
 800ace6:	bb1b      	cbnz	r3, 800ad30 <_vfiprintf_r+0x1d4>
 800ace8:	9b03      	ldr	r3, [sp, #12]
 800acea:	3307      	adds	r3, #7
 800acec:	f023 0307 	bic.w	r3, r3, #7
 800acf0:	3308      	adds	r3, #8
 800acf2:	9303      	str	r3, [sp, #12]
 800acf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf6:	444b      	add	r3, r9
 800acf8:	9309      	str	r3, [sp, #36]	; 0x24
 800acfa:	e750      	b.n	800ab9e <_vfiprintf_r+0x42>
 800acfc:	fb05 3202 	mla	r2, r5, r2, r3
 800ad00:	2001      	movs	r0, #1
 800ad02:	4688      	mov	r8, r1
 800ad04:	e78a      	b.n	800ac1c <_vfiprintf_r+0xc0>
 800ad06:	2300      	movs	r3, #0
 800ad08:	f108 0801 	add.w	r8, r8, #1
 800ad0c:	9305      	str	r3, [sp, #20]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	250a      	movs	r5, #10
 800ad12:	4640      	mov	r0, r8
 800ad14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad18:	3a30      	subs	r2, #48	; 0x30
 800ad1a:	2a09      	cmp	r2, #9
 800ad1c:	d903      	bls.n	800ad26 <_vfiprintf_r+0x1ca>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0c3      	beq.n	800acaa <_vfiprintf_r+0x14e>
 800ad22:	9105      	str	r1, [sp, #20]
 800ad24:	e7c1      	b.n	800acaa <_vfiprintf_r+0x14e>
 800ad26:	fb05 2101 	mla	r1, r5, r1, r2
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	e7f0      	b.n	800ad12 <_vfiprintf_r+0x1b6>
 800ad30:	ab03      	add	r3, sp, #12
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	4622      	mov	r2, r4
 800ad36:	4b13      	ldr	r3, [pc, #76]	; (800ad84 <_vfiprintf_r+0x228>)
 800ad38:	a904      	add	r1, sp, #16
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7fd fca2 	bl	8008684 <_printf_float>
 800ad40:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ad44:	4681      	mov	r9, r0
 800ad46:	d1d5      	bne.n	800acf4 <_vfiprintf_r+0x198>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	065b      	lsls	r3, r3, #25
 800ad4c:	f53f af7e 	bmi.w	800ac4c <_vfiprintf_r+0xf0>
 800ad50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad52:	e77d      	b.n	800ac50 <_vfiprintf_r+0xf4>
 800ad54:	ab03      	add	r3, sp, #12
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	4622      	mov	r2, r4
 800ad5a:	4b0a      	ldr	r3, [pc, #40]	; (800ad84 <_vfiprintf_r+0x228>)
 800ad5c:	a904      	add	r1, sp, #16
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7fd ff46 	bl	8008bf0 <_printf_i>
 800ad64:	e7ec      	b.n	800ad40 <_vfiprintf_r+0x1e4>
 800ad66:	bf00      	nop
 800ad68:	0800b238 	.word	0x0800b238
 800ad6c:	0800b374 	.word	0x0800b374
 800ad70:	0800b258 	.word	0x0800b258
 800ad74:	0800b218 	.word	0x0800b218
 800ad78:	0800b37a 	.word	0x0800b37a
 800ad7c:	0800b37e 	.word	0x0800b37e
 800ad80:	08008685 	.word	0x08008685
 800ad84:	0800ab37 	.word	0x0800ab37

0800ad88 <_sbrk_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4c06      	ldr	r4, [pc, #24]	; (800ada4 <_sbrk_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4605      	mov	r5, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	6023      	str	r3, [r4, #0]
 800ad94:	f7f6 ff86 	bl	8001ca4 <_sbrk>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_sbrk_r+0x1a>
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_sbrk_r+0x1a>
 800ada0:	602b      	str	r3, [r5, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	2000154c 	.word	0x2000154c

0800ada8 <__sread>:
 800ada8:	b510      	push	{r4, lr}
 800adaa:	460c      	mov	r4, r1
 800adac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb0:	f000 f8e8 	bl	800af84 <_read_r>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	bfab      	itete	ge
 800adb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adba:	89a3      	ldrhlt	r3, [r4, #12]
 800adbc:	181b      	addge	r3, r3, r0
 800adbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adc2:	bfac      	ite	ge
 800adc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800adc6:	81a3      	strhlt	r3, [r4, #12]
 800adc8:	bd10      	pop	{r4, pc}

0800adca <__swrite>:
 800adca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adce:	461f      	mov	r7, r3
 800add0:	898b      	ldrh	r3, [r1, #12]
 800add2:	05db      	lsls	r3, r3, #23
 800add4:	4605      	mov	r5, r0
 800add6:	460c      	mov	r4, r1
 800add8:	4616      	mov	r6, r2
 800adda:	d505      	bpl.n	800ade8 <__swrite+0x1e>
 800addc:	2302      	movs	r3, #2
 800adde:	2200      	movs	r2, #0
 800ade0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade4:	f000 f868 	bl	800aeb8 <_lseek_r>
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	4632      	mov	r2, r6
 800adf6:	463b      	mov	r3, r7
 800adf8:	4628      	mov	r0, r5
 800adfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adfe:	f000 b817 	b.w	800ae30 <_write_r>

0800ae02 <__sseek>:
 800ae02:	b510      	push	{r4, lr}
 800ae04:	460c      	mov	r4, r1
 800ae06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0a:	f000 f855 	bl	800aeb8 <_lseek_r>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	bf15      	itete	ne
 800ae14:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae1e:	81a3      	strheq	r3, [r4, #12]
 800ae20:	bf18      	it	ne
 800ae22:	81a3      	strhne	r3, [r4, #12]
 800ae24:	bd10      	pop	{r4, pc}

0800ae26 <__sclose>:
 800ae26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2a:	f000 b813 	b.w	800ae54 <_close_r>
	...

0800ae30 <_write_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	4c07      	ldr	r4, [pc, #28]	; (800ae50 <_write_r+0x20>)
 800ae34:	4605      	mov	r5, r0
 800ae36:	4608      	mov	r0, r1
 800ae38:	4611      	mov	r1, r2
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	6022      	str	r2, [r4, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	f7f6 fedf 	bl	8001c02 <_write>
 800ae44:	1c43      	adds	r3, r0, #1
 800ae46:	d102      	bne.n	800ae4e <_write_r+0x1e>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	b103      	cbz	r3, 800ae4e <_write_r+0x1e>
 800ae4c:	602b      	str	r3, [r5, #0]
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	2000154c 	.word	0x2000154c

0800ae54 <_close_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	4c06      	ldr	r4, [pc, #24]	; (800ae70 <_close_r+0x1c>)
 800ae58:	2300      	movs	r3, #0
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	6023      	str	r3, [r4, #0]
 800ae60:	f7f6 feeb 	bl	8001c3a <_close>
 800ae64:	1c43      	adds	r3, r0, #1
 800ae66:	d102      	bne.n	800ae6e <_close_r+0x1a>
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	b103      	cbz	r3, 800ae6e <_close_r+0x1a>
 800ae6c:	602b      	str	r3, [r5, #0]
 800ae6e:	bd38      	pop	{r3, r4, r5, pc}
 800ae70:	2000154c 	.word	0x2000154c

0800ae74 <_fstat_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4c07      	ldr	r4, [pc, #28]	; (800ae94 <_fstat_r+0x20>)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	4611      	mov	r1, r2
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	f7f6 fee6 	bl	8001c52 <_fstat>
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	d102      	bne.n	800ae90 <_fstat_r+0x1c>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	b103      	cbz	r3, 800ae90 <_fstat_r+0x1c>
 800ae8e:	602b      	str	r3, [r5, #0]
 800ae90:	bd38      	pop	{r3, r4, r5, pc}
 800ae92:	bf00      	nop
 800ae94:	2000154c 	.word	0x2000154c

0800ae98 <_isatty_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4c06      	ldr	r4, [pc, #24]	; (800aeb4 <_isatty_r+0x1c>)
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4605      	mov	r5, r0
 800aea0:	4608      	mov	r0, r1
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	f7f6 fee5 	bl	8001c72 <_isatty>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_isatty_r+0x1a>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_isatty_r+0x1a>
 800aeb0:	602b      	str	r3, [r5, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	2000154c 	.word	0x2000154c

0800aeb8 <_lseek_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4c07      	ldr	r4, [pc, #28]	; (800aed8 <_lseek_r+0x20>)
 800aebc:	4605      	mov	r5, r0
 800aebe:	4608      	mov	r0, r1
 800aec0:	4611      	mov	r1, r2
 800aec2:	2200      	movs	r2, #0
 800aec4:	6022      	str	r2, [r4, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	f7f6 fede 	bl	8001c88 <_lseek>
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	d102      	bne.n	800aed6 <_lseek_r+0x1e>
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	b103      	cbz	r3, 800aed6 <_lseek_r+0x1e>
 800aed4:	602b      	str	r3, [r5, #0]
 800aed6:	bd38      	pop	{r3, r4, r5, pc}
 800aed8:	2000154c 	.word	0x2000154c

0800aedc <__ascii_mbtowc>:
 800aedc:	b082      	sub	sp, #8
 800aede:	b901      	cbnz	r1, 800aee2 <__ascii_mbtowc+0x6>
 800aee0:	a901      	add	r1, sp, #4
 800aee2:	b142      	cbz	r2, 800aef6 <__ascii_mbtowc+0x1a>
 800aee4:	b14b      	cbz	r3, 800aefa <__ascii_mbtowc+0x1e>
 800aee6:	7813      	ldrb	r3, [r2, #0]
 800aee8:	600b      	str	r3, [r1, #0]
 800aeea:	7812      	ldrb	r2, [r2, #0]
 800aeec:	1c10      	adds	r0, r2, #0
 800aeee:	bf18      	it	ne
 800aef0:	2001      	movne	r0, #1
 800aef2:	b002      	add	sp, #8
 800aef4:	4770      	bx	lr
 800aef6:	4610      	mov	r0, r2
 800aef8:	e7fb      	b.n	800aef2 <__ascii_mbtowc+0x16>
 800aefa:	f06f 0001 	mvn.w	r0, #1
 800aefe:	e7f8      	b.n	800aef2 <__ascii_mbtowc+0x16>

0800af00 <memmove>:
 800af00:	4288      	cmp	r0, r1
 800af02:	b510      	push	{r4, lr}
 800af04:	eb01 0302 	add.w	r3, r1, r2
 800af08:	d807      	bhi.n	800af1a <memmove+0x1a>
 800af0a:	1e42      	subs	r2, r0, #1
 800af0c:	4299      	cmp	r1, r3
 800af0e:	d00a      	beq.n	800af26 <memmove+0x26>
 800af10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af14:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af18:	e7f8      	b.n	800af0c <memmove+0xc>
 800af1a:	4283      	cmp	r3, r0
 800af1c:	d9f5      	bls.n	800af0a <memmove+0xa>
 800af1e:	1881      	adds	r1, r0, r2
 800af20:	1ad2      	subs	r2, r2, r3
 800af22:	42d3      	cmn	r3, r2
 800af24:	d100      	bne.n	800af28 <memmove+0x28>
 800af26:	bd10      	pop	{r4, pc}
 800af28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af30:	e7f7      	b.n	800af22 <memmove+0x22>

0800af32 <__malloc_lock>:
 800af32:	4770      	bx	lr

0800af34 <__malloc_unlock>:
 800af34:	4770      	bx	lr

0800af36 <_realloc_r>:
 800af36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af38:	4607      	mov	r7, r0
 800af3a:	4614      	mov	r4, r2
 800af3c:	460e      	mov	r6, r1
 800af3e:	b921      	cbnz	r1, 800af4a <_realloc_r+0x14>
 800af40:	4611      	mov	r1, r2
 800af42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af46:	f7ff bc33 	b.w	800a7b0 <_malloc_r>
 800af4a:	b922      	cbnz	r2, 800af56 <_realloc_r+0x20>
 800af4c:	f7ff fbe2 	bl	800a714 <_free_r>
 800af50:	4625      	mov	r5, r4
 800af52:	4628      	mov	r0, r5
 800af54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af56:	f000 f834 	bl	800afc2 <_malloc_usable_size_r>
 800af5a:	42a0      	cmp	r0, r4
 800af5c:	d20f      	bcs.n	800af7e <_realloc_r+0x48>
 800af5e:	4621      	mov	r1, r4
 800af60:	4638      	mov	r0, r7
 800af62:	f7ff fc25 	bl	800a7b0 <_malloc_r>
 800af66:	4605      	mov	r5, r0
 800af68:	2800      	cmp	r0, #0
 800af6a:	d0f2      	beq.n	800af52 <_realloc_r+0x1c>
 800af6c:	4631      	mov	r1, r6
 800af6e:	4622      	mov	r2, r4
 800af70:	f7fd fae0 	bl	8008534 <memcpy>
 800af74:	4631      	mov	r1, r6
 800af76:	4638      	mov	r0, r7
 800af78:	f7ff fbcc 	bl	800a714 <_free_r>
 800af7c:	e7e9      	b.n	800af52 <_realloc_r+0x1c>
 800af7e:	4635      	mov	r5, r6
 800af80:	e7e7      	b.n	800af52 <_realloc_r+0x1c>
	...

0800af84 <_read_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4c07      	ldr	r4, [pc, #28]	; (800afa4 <_read_r+0x20>)
 800af88:	4605      	mov	r5, r0
 800af8a:	4608      	mov	r0, r1
 800af8c:	4611      	mov	r1, r2
 800af8e:	2200      	movs	r2, #0
 800af90:	6022      	str	r2, [r4, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	f7f6 fe18 	bl	8001bc8 <_read>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_read_r+0x1e>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_read_r+0x1e>
 800afa0:	602b      	str	r3, [r5, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	2000154c 	.word	0x2000154c

0800afa8 <__ascii_wctomb>:
 800afa8:	b149      	cbz	r1, 800afbe <__ascii_wctomb+0x16>
 800afaa:	2aff      	cmp	r2, #255	; 0xff
 800afac:	bf85      	ittet	hi
 800afae:	238a      	movhi	r3, #138	; 0x8a
 800afb0:	6003      	strhi	r3, [r0, #0]
 800afb2:	700a      	strbls	r2, [r1, #0]
 800afb4:	f04f 30ff 	movhi.w	r0, #4294967295
 800afb8:	bf98      	it	ls
 800afba:	2001      	movls	r0, #1
 800afbc:	4770      	bx	lr
 800afbe:	4608      	mov	r0, r1
 800afc0:	4770      	bx	lr

0800afc2 <_malloc_usable_size_r>:
 800afc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afc6:	1f18      	subs	r0, r3, #4
 800afc8:	2b00      	cmp	r3, #0
 800afca:	bfbc      	itt	lt
 800afcc:	580b      	ldrlt	r3, [r1, r0]
 800afce:	18c0      	addlt	r0, r0, r3
 800afd0:	4770      	bx	lr
	...

0800afd4 <_init>:
 800afd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd6:	bf00      	nop
 800afd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afda:	bc08      	pop	{r3}
 800afdc:	469e      	mov	lr, r3
 800afde:	4770      	bx	lr

0800afe0 <_fini>:
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	bf00      	nop
 800afe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe6:	bc08      	pop	{r3}
 800afe8:	469e      	mov	lr, r3
 800afea:	4770      	bx	lr
