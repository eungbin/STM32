
DTS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004680  08004680  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004680  08004680  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004680  08004680  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  080046f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080046f8  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a08b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c59  00000000  00000000  0002a123  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002bd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002c750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a05f  00000000  00000000  0002d058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b63  00000000  00000000  000470b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000935d5  00000000  00000000  0004fc1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e31ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c4  00000000  00000000  000e326c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004580 	.word	0x08004580

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004580 	.word	0x08004580

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	while(HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 30000)) {
 8000228:	46c0      	nop			; (mov r8, r8)
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <__io_putchar+0x24>)
 800022c:	1d39      	adds	r1, r7, #4
 800022e:	4806      	ldr	r0, [pc, #24]	; (8000248 <__io_putchar+0x28>)
 8000230:	2201      	movs	r2, #1
 8000232:	f002 fbb9 	bl	80029a8 <HAL_UART_Transmit>
 8000236:	1e03      	subs	r3, r0, #0
 8000238:	d1f7      	bne.n	800022a <__io_putchar+0xa>

	}

	return ch;
 800023a:	687b      	ldr	r3, [r7, #4]
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}
 8000244:	00007530 	.word	0x00007530
 8000248:	20000108 	.word	0x20000108

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f000 faf4 	bl	800083c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f816 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f000 f8da 	bl	8000410 <MX_GPIO_Init>
  MX_SPI1_Init();
 800025c:	f000 f86a 	bl	8000334 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000260:	f000 f8a6 	bl	80003b0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8000264:	23fa      	movs	r3, #250	; 0xfa
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fb4b 	bl	8000904 <HAL_Delay>
	  HAL_SPI_Receive_IT(&hspi1, receive_spi, 12);
 800026e:	4903      	ldr	r1, [pc, #12]	; (800027c <main+0x30>)
 8000270:	4b03      	ldr	r3, [pc, #12]	; (8000280 <main+0x34>)
 8000272:	220c      	movs	r2, #12
 8000274:	0018      	movs	r0, r3
 8000276:	f001 fcf1 	bl	8001c5c <HAL_SPI_Receive_IT>
	  HAL_Delay(500);
 800027a:	e7f3      	b.n	8000264 <main+0x18>
 800027c:	20000098 	.word	0x20000098
 8000280:	200000a4 	.word	0x200000a4

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b099      	sub	sp, #100	; 0x64
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	242c      	movs	r4, #44	; 0x2c
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2334      	movs	r3, #52	; 0x34
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f003 f9e9 	bl	800366c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	231c      	movs	r3, #28
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	0018      	movs	r0, r3
 80002a0:	2310      	movs	r3, #16
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f003 f9e1 	bl	800366c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002aa:	003b      	movs	r3, r7
 80002ac:	0018      	movs	r0, r3
 80002ae:	231c      	movs	r3, #28
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f003 f9da 	bl	800366c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b8:	0021      	movs	r1, r4
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2201      	movs	r2, #1
 80002c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2210      	movs	r2, #16
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fe0b 	bl	8000ef0 <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002de:	f000 f8e1 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	211c      	movs	r1, #28
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2207      	movs	r2, #7
 80002e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2100      	movs	r1, #0
 8000300:	0018      	movs	r0, r3
 8000302:	f001 f97b 	bl	80015fc <HAL_RCC_ClockConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800030a:	f000 f8cb 	bl	80004a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800030e:	003b      	movs	r3, r7
 8000310:	2202      	movs	r2, #2
 8000312:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000314:	003b      	movs	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031a:	003b      	movs	r3, r7
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fae5 	bl	80018ec <HAL_RCCEx_PeriphCLKConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000326:	f000 f8bd 	bl	80004a4 <Error_Handler>
  }
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b019      	add	sp, #100	; 0x64
 8000330:	bd90      	pop	{r4, r7, pc}
	...

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_SPI1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_SPI1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000340:	2282      	movs	r2, #130	; 0x82
 8000342:	0052      	lsls	r2, r2, #1
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_SPI1_Init+0x74>)
 800034e:	22e0      	movs	r2, #224	; 0xe0
 8000350:	00d2      	lsls	r2, r2, #3
 8000352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_SPI1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_SPI1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_SPI1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000380:	2207      	movs	r2, #7
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <MX_SPI1_Init+0x74>)
 800038c:	2208      	movs	r2, #8
 800038e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000392:	0018      	movs	r0, r3
 8000394:	f001 fbaa 	bl	8001aec <HAL_SPI_Init>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 800039c:	f000 f882 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a0:	46c0      	nop			; (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	200000a4 	.word	0x200000a4
 80003ac:	40013000 	.word	0x40013000

080003b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <MX_USART2_UART_Init+0x5c>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003bc:	2296      	movs	r2, #150	; 0x96
 80003be:	0212      	lsls	r2, r2, #8
 80003c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f002 fa83 	bl	8002900 <HAL_UART_Init>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003fe:	f000 f851 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000108 	.word	0x20000108
 800040c:	40004400 	.word	0x40004400

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_GPIO_Init+0x2c>)
 8000418:	695a      	ldr	r2, [r3, #20]
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_GPIO_Init+0x2c>)
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	0289      	lsls	r1, r1, #10
 8000420:	430a      	orrs	r2, r1
 8000422:	615a      	str	r2, [r3, #20]
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <MX_GPIO_Init+0x2c>)
 8000426:	695a      	ldr	r2, [r3, #20]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	029b      	lsls	r3, r3, #10
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b002      	add	sp, #8
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	40021000 	.word	0x40021000

08000440 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	printf("CallBack_Start\r\n");
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_SPI_RxCpltCallback+0x54>)
 800044a:	0018      	movs	r0, r3
 800044c:	f003 f990 	bl	8003770 <puts>
	if(hspi->Instance == SPI1) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a10      	ldr	r2, [pc, #64]	; (8000498 <HAL_SPI_RxCpltCallback+0x58>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d118      	bne.n	800048c <HAL_SPI_RxCpltCallback+0x4c>
		for(int i=0; i<12; i++) {
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	e00c      	b.n	800047a <HAL_SPI_RxCpltCallback+0x3a>
			printf("%x\r\n", receive_spi[i]);
 8000460:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_SPI_RxCpltCallback+0x5c>)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	18d3      	adds	r3, r2, r3
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	001a      	movs	r2, r3
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <HAL_SPI_RxCpltCallback+0x60>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f003 f904 	bl	800367c <iprintf>
		for(int i=0; i<12; i++) {
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3301      	adds	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b0b      	cmp	r3, #11
 800047e:	ddef      	ble.n	8000460 <HAL_SPI_RxCpltCallback+0x20>
		}
		printf("%x\r\n", receive_spi);
 8000480:	4a06      	ldr	r2, [pc, #24]	; (800049c <HAL_SPI_RxCpltCallback+0x5c>)
 8000482:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <HAL_SPI_RxCpltCallback+0x60>)
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f003 f8f8 	bl	800367c <iprintf>
	}
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b004      	add	sp, #16
 8000492:	bd80      	pop	{r7, pc}
 8000494:	08004598 	.word	0x08004598
 8000498:	40013000 	.word	0x40013000
 800049c:	20000098 	.word	0x20000098
 80004a0:	080045a8 	.word	0x080045a8

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004aa:	e7fe      	b.n	80004aa <Error_Handler+0x6>

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x44>)
 80004b4:	699a      	ldr	r2, [r3, #24]
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <HAL_MspInit+0x44>)
 80004b8:	2101      	movs	r1, #1
 80004ba:	430a      	orrs	r2, r1
 80004bc:	619a      	str	r2, [r3, #24]
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x44>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4013      	ands	r3, r2
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_MspInit+0x44>)
 80004cc:	69da      	ldr	r2, [r3, #28]
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <HAL_MspInit+0x44>)
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	0549      	lsls	r1, r1, #21
 80004d4:	430a      	orrs	r2, r1
 80004d6:	61da      	str	r2, [r3, #28]
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <HAL_MspInit+0x44>)
 80004da:	69da      	ldr	r2, [r3, #28]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	055b      	lsls	r3, r3, #21
 80004e0:	4013      	ands	r3, r2
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	2314      	movs	r3, #20
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	0018      	movs	r0, r3
 8000502:	2314      	movs	r3, #20
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f003 f8b0 	bl	800366c <memset>
  if(hspi->Instance==SPI1)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a20      	ldr	r2, [pc, #128]	; (8000594 <HAL_SPI_MspInit+0xa0>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d13a      	bne.n	800058c <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <HAL_SPI_MspInit+0xa4>)
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <HAL_SPI_MspInit+0xa4>)
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	0149      	lsls	r1, r1, #5
 8000520:	430a      	orrs	r2, r1
 8000522:	619a      	str	r2, [r3, #24]
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <HAL_SPI_MspInit+0xa4>)
 8000526:	699a      	ldr	r2, [r3, #24]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	015b      	lsls	r3, r3, #5
 800052c:	4013      	ands	r3, r2
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <HAL_SPI_MspInit+0xa4>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <HAL_SPI_MspInit+0xa4>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0289      	lsls	r1, r1, #10
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <HAL_SPI_MspInit+0xa4>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	4013      	ands	r3, r2
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800054e:	2114      	movs	r1, #20
 8000550:	187b      	adds	r3, r7, r1
 8000552:	22f0      	movs	r2, #240	; 0xf0
 8000554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2203      	movs	r2, #3
 8000566:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	187a      	adds	r2, r7, r1
 8000570:	2390      	movs	r3, #144	; 0x90
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fb42 	bl	8000c00 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	2019      	movs	r0, #25
 8000582:	f000 fa8d 	bl	8000aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000586:	2019      	movs	r0, #25
 8000588:	f000 fa9f 	bl	8000aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b00a      	add	sp, #40	; 0x28
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40013000 	.word	0x40013000
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	2314      	movs	r3, #20
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	0018      	movs	r0, r3
 80005aa:	2314      	movs	r3, #20
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f003 f85c 	bl	800366c <memset>
  if(huart->Instance==USART2)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <HAL_UART_MspInit+0xa0>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d13a      	bne.n	8000634 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <HAL_UART_MspInit+0xa4>)
 80005c0:	69da      	ldr	r2, [r3, #28]
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <HAL_UART_MspInit+0xa4>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0289      	lsls	r1, r1, #10
 80005c8:	430a      	orrs	r2, r1
 80005ca:	61da      	str	r2, [r3, #28]
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <HAL_UART_MspInit+0xa4>)
 80005ce:	69da      	ldr	r2, [r3, #28]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	029b      	lsls	r3, r3, #10
 80005d4:	4013      	ands	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_UART_MspInit+0xa4>)
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <HAL_UART_MspInit+0xa4>)
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	0289      	lsls	r1, r1, #10
 80005e4:	430a      	orrs	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_UART_MspInit+0xa4>)
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	029b      	lsls	r3, r3, #10
 80005f0:	4013      	ands	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005f6:	2114      	movs	r1, #20
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	220c      	movs	r2, #12
 80005fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2202      	movs	r2, #2
 8000602:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2203      	movs	r2, #3
 800060e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2201      	movs	r2, #1
 8000614:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	187a      	adds	r2, r7, r1
 8000618:	2390      	movs	r3, #144	; 0x90
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f000 faee 	bl	8000c00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	201c      	movs	r0, #28
 800062a:	f000 fa39 	bl	8000aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800062e:	201c      	movs	r0, #28
 8000630:	f000 fa4b 	bl	8000aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b00a      	add	sp, #40	; 0x28
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40004400 	.word	0x40004400
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000668:	f000 f930 	bl	80008cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <SPI1_IRQHandler+0x14>)
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fc7c 	bl	8001f78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	200000a4 	.word	0x200000a4

0800068c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <USART2_IRQHandler+0x14>)
 8000692:	0018      	movs	r0, r3
 8000694:	f002 fa32 	bl	8002afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000108 	.word	0x20000108

080006a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e00a      	b.n	80006cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006b6:	e000      	b.n	80006ba <_read+0x16>
 80006b8:	bf00      	nop
 80006ba:	0001      	movs	r1, r0
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	b2ca      	uxtb	r2, r1
 80006c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3301      	adds	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	dbf0      	blt.n	80006b6 <_read+0x12>
	}

return len;
 80006d4:	687b      	ldr	r3, [r7, #4]
}
 80006d6:	0018      	movs	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	b006      	add	sp, #24
 80006dc:	bd80      	pop	{r7, pc}

080006de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	e009      	b.n	8000704 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	60ba      	str	r2, [r7, #8]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff fd91 	bl	8000220 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3301      	adds	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	dbf1      	blt.n	80006f0 <_write+0x12>
	}
	return len;
 800070c:	687b      	ldr	r3, [r7, #4]
}
 800070e:	0018      	movs	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	b006      	add	sp, #24
 8000714:	bd80      	pop	{r7, pc}

08000716 <_close>:

int _close(int file)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	return -1;
 800071e:	2301      	movs	r3, #1
 8000720:	425b      	negs	r3, r3
}
 8000722:	0018      	movs	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}

0800072a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	0192      	lsls	r2, r2, #6
 800073a:	605a      	str	r2, [r3, #4]
	return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	0018      	movs	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}

08000746 <_isatty>:

int _isatty(int file)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
	return 1;
 800074e:	2301      	movs	r3, #1
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}

08000758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
	return 0;
 8000764:	2300      	movs	r3, #0
}
 8000766:	0018      	movs	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <_sbrk+0x5c>)
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <_sbrk+0x60>)
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <_sbrk+0x64>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <_sbrk+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	d207      	bcs.n	80007b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a0:	f002 ff3a 	bl	8003618 <__errno>
 80007a4:	0003      	movs	r3, r0
 80007a6:	220c      	movs	r2, #12
 80007a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	425b      	negs	r3, r3
 80007ae:	e009      	b.n	80007c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	18d2      	adds	r2, r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <_sbrk+0x64>)
 80007c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b006      	add	sp, #24
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20004000 	.word	0x20004000
 80007d0:	00000400 	.word	0x00000400
 80007d4:	2000008c 	.word	0x2000008c
 80007d8:	20000198 	.word	0x20000198

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000804:	4c0b      	ldr	r4, [pc, #44]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000812:	f7ff ffe3 	bl	80007dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000816:	f002 ff05 	bl	8003624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fd17 	bl	800024c <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800082c:	08004688 	.word	0x08004688
  ldr r2, =_sbss
 8000830:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000834:	20000194 	.word	0x20000194

08000838 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_COMP_IRQHandler>
	...

0800083c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <HAL_Init+0x24>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_Init+0x24>)
 8000846:	2110      	movs	r1, #16
 8000848:	430a      	orrs	r2, r1
 800084a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 f809 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000852:	f7ff fe2b 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_InitTick+0x5c>)
 800086e:	681c      	ldr	r4, [r3, #0]
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_InitTick+0x60>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	0019      	movs	r1, r3
 8000876:	23fa      	movs	r3, #250	; 0xfa
 8000878:	0098      	lsls	r0, r3, #2
 800087a:	f7ff fc45 	bl	8000108 <__udivsi3>
 800087e:	0003      	movs	r3, r0
 8000880:	0019      	movs	r1, r3
 8000882:	0020      	movs	r0, r4
 8000884:	f7ff fc40 	bl	8000108 <__udivsi3>
 8000888:	0003      	movs	r3, r0
 800088a:	0018      	movs	r0, r3
 800088c:	f000 f92d 	bl	8000aea <HAL_SYSTICK_Config>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e00f      	b.n	80008b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b03      	cmp	r3, #3
 800089c:	d80b      	bhi.n	80008b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	2301      	movs	r3, #1
 80008a2:	425b      	negs	r3, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 f8fa 	bl	8000aa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_InitTick+0x64>)
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e000      	b.n	80008b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b003      	add	sp, #12
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000004 	.word	0x20000004

080008cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x1c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	001a      	movs	r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x20>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	18d2      	adds	r2, r2, r3
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <HAL_IncTick+0x20>)
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000008 	.word	0x20000008
 80008ec:	2000018c 	.word	0x2000018c

080008f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <HAL_GetTick+0x10>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	2000018c 	.word	0x2000018c

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff fff0 	bl	80008f0 <HAL_GetTick>
 8000910:	0003      	movs	r3, r0
 8000912:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3301      	adds	r3, #1
 800091c:	d005      	beq.n	800092a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_Delay+0x40>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	001a      	movs	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	189b      	adds	r3, r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	f7ff ffe0 	bl	80008f0 <HAL_GetTick>
 8000930:	0002      	movs	r2, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d8f7      	bhi.n	800092c <HAL_Delay+0x28>
  {
  }
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b004      	add	sp, #16
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000008 	.word	0x20000008

08000948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	0002      	movs	r2, r0
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b7f      	cmp	r3, #127	; 0x7f
 800095a:	d809      	bhi.n	8000970 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	001a      	movs	r2, r3
 8000962:	231f      	movs	r3, #31
 8000964:	401a      	ands	r2, r3
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <__NVIC_EnableIRQ+0x30>)
 8000968:	2101      	movs	r1, #1
 800096a:	4091      	lsls	r1, r2
 800096c:	000a      	movs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
  }
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	0002      	movs	r2, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b7f      	cmp	r3, #127	; 0x7f
 8000990:	d828      	bhi.n	80009e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000992:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <__NVIC_SetPriority+0xd4>)
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	33c0      	adds	r3, #192	; 0xc0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	589b      	ldr	r3, [r3, r2]
 80009a2:	1dfa      	adds	r2, r7, #7
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	0011      	movs	r1, r2
 80009a8:	2203      	movs	r2, #3
 80009aa:	400a      	ands	r2, r1
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	21ff      	movs	r1, #255	; 0xff
 80009b0:	4091      	lsls	r1, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	401a      	ands	r2, r3
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0018      	movs	r0, r3
 80009c8:	2303      	movs	r3, #3
 80009ca:	4003      	ands	r3, r0
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <__NVIC_SetPriority+0xd4>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	430a      	orrs	r2, r1
 80009dc:	33c0      	adds	r3, #192	; 0xc0
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009e2:	e031      	b.n	8000a48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <__NVIC_SetPriority+0xd8>)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0019      	movs	r1, r3
 80009ec:	230f      	movs	r3, #15
 80009ee:	400b      	ands	r3, r1
 80009f0:	3b08      	subs	r3, #8
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	3306      	adds	r3, #6
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	18d3      	adds	r3, r2, r3
 80009fa:	3304      	adds	r3, #4
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	1dfa      	adds	r2, r7, #7
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	0011      	movs	r1, r2
 8000a04:	2203      	movs	r2, #3
 8000a06:	400a      	ands	r2, r1
 8000a08:	00d2      	lsls	r2, r2, #3
 8000a0a:	21ff      	movs	r1, #255	; 0xff
 8000a0c:	4091      	lsls	r1, r2
 8000a0e:	000a      	movs	r2, r1
 8000a10:	43d2      	mvns	r2, r2
 8000a12:	401a      	ands	r2, r3
 8000a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	019b      	lsls	r3, r3, #6
 8000a1a:	22ff      	movs	r2, #255	; 0xff
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0018      	movs	r0, r3
 8000a24:	2303      	movs	r3, #3
 8000a26:	4003      	ands	r3, r0
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <__NVIC_SetPriority+0xd8>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	001c      	movs	r4, r3
 8000a34:	230f      	movs	r3, #15
 8000a36:	4023      	ands	r3, r4
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	3306      	adds	r3, #6
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	18c3      	adds	r3, r0, r3
 8000a44:	3304      	adds	r3, #4
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b003      	add	sp, #12
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <SysTick_Config+0x40>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d901      	bls.n	8000a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e010      	b.n	8000a90 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <SysTick_Config+0x44>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	3a01      	subs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a76:	2301      	movs	r3, #1
 8000a78:	425b      	negs	r3, r3
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff7d 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SysTick_Config+0x44>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x44>)
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	00ffffff 	.word	0x00ffffff
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	210f      	movs	r1, #15
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	1c02      	adds	r2, r0, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff ff5d 	bl	800097c <__NVIC_SetPriority>
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b004      	add	sp, #16
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	0002      	movs	r2, r0
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ff33 	bl	8000948 <__NVIC_EnableIRQ>
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff ffaf 	bl	8000a58 <SysTick_Config>
 8000afa:	0003      	movs	r3, r0
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b002      	add	sp, #8
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2221      	movs	r2, #33	; 0x21
 8000b10:	5c9b      	ldrb	r3, [r3, r2]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d008      	beq.n	8000b2a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2220      	movs	r2, #32
 8000b22:	2100      	movs	r1, #0
 8000b24:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e020      	b.n	8000b6c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	210e      	movs	r1, #14
 8000b36:	438a      	bics	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2101      	movs	r1, #1
 8000b46:	438a      	bics	r2, r1
 8000b48:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b52:	2101      	movs	r1, #1
 8000b54:	4091      	lsls	r1, r2
 8000b56:	000a      	movs	r2, r1
 8000b58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2221      	movs	r2, #33	; 0x21
 8000b5e:	2101      	movs	r1, #1
 8000b60:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2220      	movs	r2, #32
 8000b66:	2100      	movs	r1, #0
 8000b68:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2221      	movs	r2, #33	; 0x21
 8000b88:	5c9b      	ldrb	r3, [r3, r2]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2204      	movs	r2, #4
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b96:	230f      	movs	r3, #15
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e028      	b.n	8000bf2 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	210e      	movs	r1, #14
 8000bac:	438a      	bics	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2101      	movs	r1, #1
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	000a      	movs	r2, r1
 8000bce:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2221      	movs	r2, #33	; 0x21
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2220      	movs	r2, #32
 8000bdc:	2100      	movs	r1, #0
 8000bde:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d004      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	0010      	movs	r0, r2
 8000bf0:	4798      	blx	r3
    } 
  }
  return status;
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	781b      	ldrb	r3, [r3, #0]
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b004      	add	sp, #16
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e155      	b.n	8000ebc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2101      	movs	r1, #1
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	4091      	lsls	r1, r2
 8000c1a:	000a      	movs	r2, r1
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d100      	bne.n	8000c28 <HAL_GPIO_Init+0x28>
 8000c26:	e146      	b.n	8000eb6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d00b      	beq.n	8000c48 <HAL_GPIO_Init+0x48>
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d007      	beq.n	8000c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c3c:	2b11      	cmp	r3, #17
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b12      	cmp	r3, #18
 8000c46:	d130      	bne.n	8000caa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	409a      	lsls	r2, r3
 8000c56:	0013      	movs	r3, r2
 8000c58:	43da      	mvns	r2, r3
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	409a      	lsls	r2, r3
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7e:	2201      	movs	r2, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	2201      	movs	r2, #1
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0xea>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b12      	cmp	r3, #18
 8000ce8:	d123      	bne.n	8000d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	58d3      	ldr	r3, [r2, r3]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	2207      	movs	r2, #7
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	220f      	movs	r2, #15
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	43da      	mvns	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	2107      	movs	r1, #7
 8000d16:	400b      	ands	r3, r1
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	6939      	ldr	r1, [r7, #16]
 8000d30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2203      	movs	r2, #3
 8000d50:	401a      	ands	r2, r3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	055b      	lsls	r3, r3, #21
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d100      	bne.n	8000d74 <HAL_GPIO_Init+0x174>
 8000d72:	e0a0      	b.n	8000eb6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d74:	4b57      	ldr	r3, [pc, #348]	; (8000ed4 <HAL_GPIO_Init+0x2d4>)
 8000d76:	699a      	ldr	r2, [r3, #24]
 8000d78:	4b56      	ldr	r3, [pc, #344]	; (8000ed4 <HAL_GPIO_Init+0x2d4>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	619a      	str	r2, [r3, #24]
 8000d80:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <HAL_GPIO_Init+0x2d4>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	2201      	movs	r2, #1
 8000d86:	4013      	ands	r3, r2
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d8c:	4a52      	ldr	r2, [pc, #328]	; (8000ed8 <HAL_GPIO_Init+0x2d8>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	589b      	ldr	r3, [r3, r2]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	4013      	ands	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	43da      	mvns	r2, r3
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	2390      	movs	r3, #144	; 0x90
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d019      	beq.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a47      	ldr	r2, [pc, #284]	; (8000edc <HAL_GPIO_Init+0x2dc>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x1ea>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a46      	ldr	r2, [pc, #280]	; (8000ee0 <HAL_GPIO_Init+0x2e0>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x1e6>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a45      	ldr	r2, [pc, #276]	; (8000ee4 <HAL_GPIO_Init+0x2e4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x1e2>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a44      	ldr	r2, [pc, #272]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x1de>
 8000dda:	2304      	movs	r3, #4
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x1f0>
 8000dde:	2305      	movs	r3, #5
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x1f0>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x1f0>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x1f0>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x1f0>
 8000dee:	2300      	movs	r3, #0
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	2103      	movs	r1, #3
 8000df4:	400a      	ands	r2, r1
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e00:	4935      	ldr	r1, [pc, #212]	; (8000ed8 <HAL_GPIO_Init+0x2d8>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	025b      	lsls	r3, r3, #9
 8000e26:	4013      	ands	r3, r2
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43da      	mvns	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	4013      	ands	r3, r2
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	035b      	lsls	r3, r3, #13
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43da      	mvns	r2, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	039b      	lsls	r3, r3, #14
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	40da      	lsrs	r2, r3
 8000ec4:	1e13      	subs	r3, r2, #0
 8000ec6:	d000      	beq.n	8000eca <HAL_GPIO_Init+0x2ca>
 8000ec8:	e6a2      	b.n	8000c10 <HAL_GPIO_Init+0x10>
  } 
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b006      	add	sp, #24
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	48000800 	.word	0x48000800
 8000ee4:	48000c00 	.word	0x48000c00
 8000ee8:	48001000 	.word	0x48001000
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d102      	bne.n	8000f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f000 fb76 	bl	80015f0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d100      	bne.n	8000f10 <HAL_RCC_OscConfig+0x20>
 8000f0e:	e08e      	b.n	800102e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f10:	4bc5      	ldr	r3, [pc, #788]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	220c      	movs	r2, #12
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d00e      	beq.n	8000f3a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f1c:	4bc2      	ldr	r3, [pc, #776]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	220c      	movs	r2, #12
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d117      	bne.n	8000f58 <HAL_RCC_OscConfig+0x68>
 8000f28:	4bbf      	ldr	r3, [pc, #764]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	23c0      	movs	r3, #192	; 0xc0
 8000f2e:	025b      	lsls	r3, r3, #9
 8000f30:	401a      	ands	r2, r3
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	025b      	lsls	r3, r3, #9
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d10e      	bne.n	8000f58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3a:	4bbb      	ldr	r3, [pc, #748]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	029b      	lsls	r3, r3, #10
 8000f42:	4013      	ands	r3, r2
 8000f44:	d100      	bne.n	8000f48 <HAL_RCC_OscConfig+0x58>
 8000f46:	e071      	b.n	800102c <HAL_RCC_OscConfig+0x13c>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d000      	beq.n	8000f52 <HAL_RCC_OscConfig+0x62>
 8000f50:	e06c      	b.n	800102c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f000 fb4c 	bl	80015f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d107      	bne.n	8000f70 <HAL_RCC_OscConfig+0x80>
 8000f60:	4bb1      	ldr	r3, [pc, #708]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4bb0      	ldr	r3, [pc, #704]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e02f      	b.n	8000fd0 <HAL_RCC_OscConfig+0xe0>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10c      	bne.n	8000f92 <HAL_RCC_OscConfig+0xa2>
 8000f78:	4bab      	ldr	r3, [pc, #684]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4baa      	ldr	r3, [pc, #680]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	49ab      	ldr	r1, [pc, #684]	; (800122c <HAL_RCC_OscConfig+0x33c>)
 8000f80:	400a      	ands	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	4ba8      	ldr	r3, [pc, #672]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4ba7      	ldr	r3, [pc, #668]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	49a9      	ldr	r1, [pc, #676]	; (8001230 <HAL_RCC_OscConfig+0x340>)
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e01e      	b.n	8000fd0 <HAL_RCC_OscConfig+0xe0>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d10e      	bne.n	8000fb8 <HAL_RCC_OscConfig+0xc8>
 8000f9a:	4ba3      	ldr	r3, [pc, #652]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4ba2      	ldr	r3, [pc, #648]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	02c9      	lsls	r1, r1, #11
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	4b9f      	ldr	r3, [pc, #636]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b9e      	ldr	r3, [pc, #632]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0249      	lsls	r1, r1, #9
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e00b      	b.n	8000fd0 <HAL_RCC_OscConfig+0xe0>
 8000fb8:	4b9b      	ldr	r3, [pc, #620]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b9a      	ldr	r3, [pc, #616]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fbe:	499b      	ldr	r1, [pc, #620]	; (800122c <HAL_RCC_OscConfig+0x33c>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	4b98      	ldr	r3, [pc, #608]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b97      	ldr	r3, [pc, #604]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000fca:	4999      	ldr	r1, [pc, #612]	; (8001230 <HAL_RCC_OscConfig+0x340>)
 8000fcc:	400a      	ands	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d014      	beq.n	8001002 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fc8a 	bl	80008f0 <HAL_GetTick>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fc85 	bl	80008f0 <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b64      	cmp	r3, #100	; 0x64
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e2fd      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff4:	4b8c      	ldr	r3, [pc, #560]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0xf2>
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001002:	f7ff fc75 	bl	80008f0 <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fc70 	bl	80008f0 <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e2e8      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	4b82      	ldr	r3, [pc, #520]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	029b      	lsls	r3, r3, #10
 8001026:	4013      	ands	r3, r2
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0x11c>
 800102a:	e000      	b.n	800102e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2202      	movs	r2, #2
 8001034:	4013      	ands	r3, r2
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0x14a>
 8001038:	e06c      	b.n	8001114 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	220c      	movs	r2, #12
 8001040:	4013      	ands	r3, r2
 8001042:	d00e      	beq.n	8001062 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001044:	4b78      	ldr	r3, [pc, #480]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	220c      	movs	r2, #12
 800104a:	4013      	ands	r3, r2
 800104c:	2b08      	cmp	r3, #8
 800104e:	d11f      	bne.n	8001090 <HAL_RCC_OscConfig+0x1a0>
 8001050:	4b75      	ldr	r3, [pc, #468]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	23c0      	movs	r3, #192	; 0xc0
 8001056:	025b      	lsls	r3, r3, #9
 8001058:	401a      	ands	r2, r3
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	429a      	cmp	r2, r3
 8001060:	d116      	bne.n	8001090 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	4b71      	ldr	r3, [pc, #452]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2202      	movs	r2, #2
 8001068:	4013      	ands	r3, r2
 800106a:	d005      	beq.n	8001078 <HAL_RCC_OscConfig+0x188>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d001      	beq.n	8001078 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e2bb      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	22f8      	movs	r2, #248	; 0xf8
 800107e:	4393      	bics	r3, r2
 8001080:	0019      	movs	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	00da      	lsls	r2, r3, #3
 8001088:	4b67      	ldr	r3, [pc, #412]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e041      	b.n	8001114 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d024      	beq.n	80010e2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001098:	4b63      	ldr	r3, [pc, #396]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b62      	ldr	r3, [pc, #392]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800109e:	2101      	movs	r1, #1
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc24 	bl	80008f0 <HAL_GetTick>
 80010a8:	0003      	movs	r3, r0
 80010aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fc1f 	bl	80008f0 <HAL_GetTick>
 80010b2:	0002      	movs	r2, r0
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e297      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2202      	movs	r2, #2
 80010c6:	4013      	ands	r3, r2
 80010c8:	d0f1      	beq.n	80010ae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b57      	ldr	r3, [pc, #348]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	22f8      	movs	r2, #248	; 0xf8
 80010d0:	4393      	bics	r3, r2
 80010d2:	0019      	movs	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	00da      	lsls	r2, r3, #3
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e018      	b.n	8001114 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b50      	ldr	r3, [pc, #320]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	438a      	bics	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fbff 	bl	80008f0 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fbfa 	bl	80008f0 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e272      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2202      	movs	r2, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d1f1      	bne.n	80010f8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2208      	movs	r2, #8
 800111a:	4013      	ands	r3, r2
 800111c:	d036      	beq.n	800118c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d019      	beq.n	800115a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800112c:	2101      	movs	r1, #1
 800112e:	430a      	orrs	r2, r1
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fbdd 	bl	80008f0 <HAL_GetTick>
 8001136:	0003      	movs	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fbd8 	bl	80008f0 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e250      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d0f1      	beq.n	800113c <HAL_RCC_OscConfig+0x24c>
 8001158:	e018      	b.n	800118c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800115c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001160:	2101      	movs	r1, #1
 8001162:	438a      	bics	r2, r1
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fbc3 	bl	80008f0 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fbbe 	bl	80008f0 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e236      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001182:	4b29      	ldr	r3, [pc, #164]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	2202      	movs	r2, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d1f1      	bne.n	8001170 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2204      	movs	r2, #4
 8001192:	4013      	ands	r3, r2
 8001194:	d100      	bne.n	8001198 <HAL_RCC_OscConfig+0x2a8>
 8001196:	e0b5      	b.n	8001304 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001198:	231f      	movs	r3, #31
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80011a2:	69da      	ldr	r2, [r3, #28]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	055b      	lsls	r3, r3, #21
 80011a8:	4013      	ands	r3, r2
 80011aa:	d111      	bne.n	80011d0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80011ae:	69da      	ldr	r2, [r3, #28]
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	0549      	lsls	r1, r1, #21
 80011b6:	430a      	orrs	r2, r1
 80011b8:	61da      	str	r2, [r3, #28]
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	055b      	lsls	r3, r3, #21
 80011c2:	4013      	ands	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011c8:	231f      	movs	r3, #31
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_RCC_OscConfig+0x344>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4013      	ands	r3, r2
 80011da:	d11a      	bne.n	8001212 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_RCC_OscConfig+0x344>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_RCC_OscConfig+0x344>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0049      	lsls	r1, r1, #1
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fb81 	bl	80008f0 <HAL_GetTick>
 80011ee:	0003      	movs	r3, r0
 80011f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f4:	f7ff fb7c 	bl	80008f0 <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1f4      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_RCC_OscConfig+0x344>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4013      	ands	r3, r2
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10e      	bne.n	8001238 <HAL_RCC_OscConfig+0x348>
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 800121c:	6a1a      	ldr	r2, [r3, #32]
 800121e:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_RCC_OscConfig+0x338>)
 8001220:	2101      	movs	r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	621a      	str	r2, [r3, #32]
 8001226:	e035      	b.n	8001294 <HAL_RCC_OscConfig+0x3a4>
 8001228:	40021000 	.word	0x40021000
 800122c:	fffeffff 	.word	0xfffeffff
 8001230:	fffbffff 	.word	0xfffbffff
 8001234:	40007000 	.word	0x40007000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10c      	bne.n	800125a <HAL_RCC_OscConfig+0x36a>
 8001240:	4bca      	ldr	r3, [pc, #808]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001242:	6a1a      	ldr	r2, [r3, #32]
 8001244:	4bc9      	ldr	r3, [pc, #804]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001246:	2101      	movs	r1, #1
 8001248:	438a      	bics	r2, r1
 800124a:	621a      	str	r2, [r3, #32]
 800124c:	4bc7      	ldr	r3, [pc, #796]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800124e:	6a1a      	ldr	r2, [r3, #32]
 8001250:	4bc6      	ldr	r3, [pc, #792]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001252:	2104      	movs	r1, #4
 8001254:	438a      	bics	r2, r1
 8001256:	621a      	str	r2, [r3, #32]
 8001258:	e01c      	b.n	8001294 <HAL_RCC_OscConfig+0x3a4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x38c>
 8001262:	4bc2      	ldr	r3, [pc, #776]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001264:	6a1a      	ldr	r2, [r3, #32]
 8001266:	4bc1      	ldr	r3, [pc, #772]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001268:	2104      	movs	r1, #4
 800126a:	430a      	orrs	r2, r1
 800126c:	621a      	str	r2, [r3, #32]
 800126e:	4bbf      	ldr	r3, [pc, #764]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001270:	6a1a      	ldr	r2, [r3, #32]
 8001272:	4bbe      	ldr	r3, [pc, #760]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	621a      	str	r2, [r3, #32]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0x3a4>
 800127c:	4bbb      	ldr	r3, [pc, #748]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800127e:	6a1a      	ldr	r2, [r3, #32]
 8001280:	4bba      	ldr	r3, [pc, #744]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001282:	2101      	movs	r1, #1
 8001284:	438a      	bics	r2, r1
 8001286:	621a      	str	r2, [r3, #32]
 8001288:	4bb8      	ldr	r3, [pc, #736]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800128a:	6a1a      	ldr	r2, [r3, #32]
 800128c:	4bb7      	ldr	r3, [pc, #732]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800128e:	2104      	movs	r1, #4
 8001290:	438a      	bics	r2, r1
 8001292:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d014      	beq.n	80012c6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fb28 	bl	80008f0 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a4:	e009      	b.n	80012ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fb23 	bl	80008f0 <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	4aaf      	ldr	r2, [pc, #700]	; (8001570 <HAL_RCC_OscConfig+0x680>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e19a      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ba:	4bac      	ldr	r3, [pc, #688]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3b6>
 80012c4:	e013      	b.n	80012ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fb13 	bl	80008f0 <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ce:	e009      	b.n	80012e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d0:	f7ff fb0e 	bl	80008f0 <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	4aa5      	ldr	r2, [pc, #660]	; (8001570 <HAL_RCC_OscConfig+0x680>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e185      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	4ba1      	ldr	r3, [pc, #644]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	2202      	movs	r2, #2
 80012ea:	4013      	ands	r3, r2
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012ee:	231f      	movs	r3, #31
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f8:	4b9c      	ldr	r3, [pc, #624]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80012fa:	69da      	ldr	r2, [r3, #28]
 80012fc:	4b9b      	ldr	r3, [pc, #620]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80012fe:	499d      	ldr	r1, [pc, #628]	; (8001574 <HAL_RCC_OscConfig+0x684>)
 8001300:	400a      	ands	r2, r1
 8001302:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2210      	movs	r2, #16
 800130a:	4013      	ands	r3, r2
 800130c:	d063      	beq.n	80013d6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d12a      	bne.n	800136c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001316:	4b95      	ldr	r3, [pc, #596]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	4b94      	ldr	r3, [pc, #592]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800131c:	2104      	movs	r1, #4
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001322:	4b92      	ldr	r3, [pc, #584]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001326:	4b91      	ldr	r3, [pc, #580]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001328:	2101      	movs	r1, #1
 800132a:	430a      	orrs	r2, r1
 800132c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fadf 	bl	80008f0 <HAL_GetTick>
 8001332:	0003      	movs	r3, r0
 8001334:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001338:	f7ff fada 	bl	80008f0 <HAL_GetTick>
 800133c:	0002      	movs	r2, r0
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e152      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800134a:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134e:	2202      	movs	r2, #2
 8001350:	4013      	ands	r3, r2
 8001352:	d0f1      	beq.n	8001338 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001354:	4b85      	ldr	r3, [pc, #532]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	22f8      	movs	r2, #248	; 0xf8
 800135a:	4393      	bics	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001366:	430a      	orrs	r2, r1
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
 800136a:	e034      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	3305      	adds	r3, #5
 8001372:	d111      	bne.n	8001398 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001374:	4b7d      	ldr	r3, [pc, #500]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001378:	4b7c      	ldr	r3, [pc, #496]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800137a:	2104      	movs	r1, #4
 800137c:	438a      	bics	r2, r1
 800137e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001380:	4b7a      	ldr	r3, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	22f8      	movs	r2, #248	; 0xf8
 8001386:	4393      	bics	r3, r2
 8001388:	0019      	movs	r1, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	00da      	lsls	r2, r3, #3
 8001390:	4b76      	ldr	r3, [pc, #472]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001392:	430a      	orrs	r2, r1
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
 8001396:	e01e      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001398:	4b74      	ldr	r3, [pc, #464]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800139a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139c:	4b73      	ldr	r3, [pc, #460]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800139e:	2104      	movs	r1, #4
 80013a0:	430a      	orrs	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013a4:	4b71      	ldr	r3, [pc, #452]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a8:	4b70      	ldr	r3, [pc, #448]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	438a      	bics	r2, r1
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fa9e 	bl	80008f0 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013ba:	f7ff fa99 	bl	80008f0 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e111      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013cc:	4b67      	ldr	r3, [pc, #412]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d1f1      	bne.n	80013ba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2220      	movs	r2, #32
 80013dc:	4013      	ands	r3, r2
 80013de:	d05c      	beq.n	800149a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013e0:	4b62      	ldr	r3, [pc, #392]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	220c      	movs	r2, #12
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b0c      	cmp	r3, #12
 80013ea:	d00e      	beq.n	800140a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013ec:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	220c      	movs	r2, #12
 80013f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d114      	bne.n	8001422 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80013f8:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	23c0      	movs	r3, #192	; 0xc0
 80013fe:	025b      	lsls	r3, r3, #9
 8001400:	401a      	ands	r2, r3
 8001402:	23c0      	movs	r3, #192	; 0xc0
 8001404:	025b      	lsls	r3, r3, #9
 8001406:	429a      	cmp	r2, r3
 8001408:	d10b      	bne.n	8001422 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800140a:	4b58      	ldr	r3, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800140c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	4013      	ands	r3, r2
 8001414:	d040      	beq.n	8001498 <HAL_RCC_OscConfig+0x5a8>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d03c      	beq.n	8001498 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0e6      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d01b      	beq.n	8001462 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800142a:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800142c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142e:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	0249      	lsls	r1, r1, #9
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fa5a 	bl	80008f0 <HAL_GetTick>
 800143c:	0003      	movs	r3, r0
 800143e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001442:	f7ff fa55 	bl	80008f0 <HAL_GetTick>
 8001446:	0002      	movs	r2, r0
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0cd      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001454:	4b45      	ldr	r3, [pc, #276]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	025b      	lsls	r3, r3, #9
 800145c:	4013      	ands	r3, r2
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x552>
 8001460:	e01b      	b.n	800149a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001468:	4943      	ldr	r1, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x688>)
 800146a:	400a      	ands	r2, r1
 800146c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fa3f 	bl	80008f0 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001478:	f7ff fa3a 	bl	80008f0 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0b2      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800148c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x588>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001498:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d100      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5b4>
 80014a2:	e0a4      	b.n	80015ee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a4:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	220c      	movs	r2, #12
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d100      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5c2>
 80014b0:	e078      	b.n	80015a4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d14c      	bne.n	8001554 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014c0:	492e      	ldr	r1, [pc, #184]	; (800157c <HAL_RCC_OscConfig+0x68c>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fa13 	bl	80008f0 <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fa0e 	bl	80008f0 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e086      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	049b      	lsls	r3, r3, #18
 80014ea:	4013      	ands	r3, r2
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	220f      	movs	r2, #15
 80014f4:	4393      	bics	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_RCC_OscConfig+0x690>)
 8001508:	4013      	ands	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	431a      	orrs	r2, r3
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	0449      	lsls	r1, r1, #17
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff f9e1 	bl	80008f0 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff f9dc 	bl	80008f0 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e054      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	049b      	lsls	r3, r3, #18
 800154e:	4013      	ands	r3, r2
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x644>
 8001552:	e04c      	b.n	80015ee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_RCC_OscConfig+0x67c>)
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x68c>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff f9c6 	bl	80008f0 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	e015      	b.n	8001596 <HAL_RCC_OscConfig+0x6a6>
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40021000 	.word	0x40021000
 8001570:	00001388 	.word	0x00001388
 8001574:	efffffff 	.word	0xefffffff
 8001578:	fffeffff 	.word	0xfffeffff
 800157c:	feffffff 	.word	0xfeffffff
 8001580:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff f9b4 	bl	80008f0 <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e02c      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_RCC_OscConfig+0x708>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	049b      	lsls	r3, r3, #18
 800159e:	4013      	ands	r3, r2
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x694>
 80015a2:	e024      	b.n	80015ee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e01f      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_OscConfig+0x708>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0x708>)
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	23c0      	movs	r3, #192	; 0xc0
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	401a      	ands	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d10e      	bne.n	80015ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	220f      	movs	r2, #15
 80015d0:	401a      	ands	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	23f0      	movs	r3, #240	; 0xf0
 80015de:	039b      	lsls	r3, r3, #14
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b008      	add	sp, #32
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0bf      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001610:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2201      	movs	r2, #1
 8001616:	4013      	ands	r3, r2
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d911      	bls.n	8001642 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	4393      	bics	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001630:	4b59      	ldr	r3, [pc, #356]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d001      	beq.n	8001642 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0a6      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d015      	beq.n	8001678 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2204      	movs	r2, #4
 8001652:	4013      	ands	r3, r2
 8001654:	d006      	beq.n	8001664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001656:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 800165c:	21e0      	movs	r1, #224	; 0xe0
 800165e:	00c9      	lsls	r1, r1, #3
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b4d      	ldr	r3, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	22f0      	movs	r2, #240	; 0xf0
 800166a:	4393      	bics	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	4013      	ands	r3, r2
 8001680:	d04c      	beq.n	800171c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	029b      	lsls	r3, r3, #10
 8001692:	4013      	ands	r3, r2
 8001694:	d120      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07a      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	049b      	lsls	r3, r3, #18
 80016aa:	4013      	ands	r3, r2
 80016ac:	d114      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06e      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	025b      	lsls	r3, r3, #9
 80016c2:	4013      	ands	r3, r2
 80016c4:	d108      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e062      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e05b      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2203      	movs	r2, #3
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ec:	f7ff f900 	bl	80008f0 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f4:	e009      	b.n	800170a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f6:	f7ff f8fb 	bl	80008f0 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_RCC_ClockConfig+0x1a4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e042      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	220c      	movs	r2, #12
 8001710:	401a      	ands	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	429a      	cmp	r2, r3
 800171a:	d1ec      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4013      	ands	r3, r2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d211      	bcs.n	800174e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	4393      	bics	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_RCC_ClockConfig+0x19c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e020      	b.n	8001790 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2204      	movs	r2, #4
 8001754:	4013      	ands	r3, r2
 8001756:	d009      	beq.n	800176c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <HAL_RCC_ClockConfig+0x1a8>)
 800175e:	4013      	ands	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800176c:	f000 f820 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 8001770:	0001      	movs	r1, r0
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x1a0>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	220f      	movs	r2, #15
 800177a:	4013      	ands	r3, r2
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_RCC_ClockConfig+0x1ac>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	000a      	movs	r2, r1
 8001782:	40da      	lsrs	r2, r3
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x1b0>)
 8001786:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff f86b 	bl	8000864 <HAL_InitTick>
  
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40022000 	.word	0x40022000
 800179c:	40021000 	.word	0x40021000
 80017a0:	00001388 	.word	0x00001388
 80017a4:	fffff8ff 	.word	0xfffff8ff
 80017a8:	080045d0 	.word	0x080045d0
 80017ac:	20000000 	.word	0x20000000

080017b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08f      	sub	sp, #60	; 0x3c
 80017b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017b6:	2314      	movs	r3, #20
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	4a37      	ldr	r2, [pc, #220]	; (8001898 <HAL_RCC_GetSysClockFreq+0xe8>)
 80017bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017be:	c313      	stmia	r3!, {r0, r1, r4}
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4a35      	ldr	r2, [pc, #212]	; (800189c <HAL_RCC_GetSysClockFreq+0xec>)
 80017c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017ca:	c313      	stmia	r3!, {r0, r1, r4}
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	220c      	movs	r2, #12
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d006      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x52>
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d043      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0xd0>
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d144      	bne.n	8001886 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001800:	e044      	b.n	800188c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	0c9b      	lsrs	r3, r3, #18
 8001806:	220f      	movs	r2, #15
 8001808:	4013      	ands	r3, r2
 800180a:	2214      	movs	r2, #20
 800180c:	18ba      	adds	r2, r7, r2
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	220f      	movs	r2, #15
 8001818:	4013      	ands	r3, r2
 800181a:	1d3a      	adds	r2, r7, #4
 800181c:	5cd3      	ldrb	r3, [r2, r3]
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001822:	23c0      	movs	r3, #192	; 0xc0
 8001824:	025b      	lsls	r3, r3, #9
 8001826:	401a      	ands	r2, r3
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	025b      	lsls	r3, r3, #9
 800182c:	429a      	cmp	r2, r3
 800182e:	d109      	bne.n	8001844 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001832:	481c      	ldr	r0, [pc, #112]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001834:	f7fe fc68 	bl	8000108 <__udivsi3>
 8001838:	0003      	movs	r3, r0
 800183a:	001a      	movs	r2, r3
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	4353      	muls	r3, r2
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
 8001842:	e01a      	b.n	800187a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001846:	23c0      	movs	r3, #192	; 0xc0
 8001848:	025b      	lsls	r3, r3, #9
 800184a:	401a      	ands	r2, r3
 800184c:	23c0      	movs	r3, #192	; 0xc0
 800184e:	025b      	lsls	r3, r3, #9
 8001850:	429a      	cmp	r2, r3
 8001852:	d109      	bne.n	8001868 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001856:	4814      	ldr	r0, [pc, #80]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001858:	f7fe fc56 	bl	8000108 <__udivsi3>
 800185c:	0003      	movs	r3, r0
 800185e:	001a      	movs	r2, r3
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	4353      	muls	r3, r2
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
 8001866:	e008      	b.n	800187a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800186c:	f7fe fc4c 	bl	8000108 <__udivsi3>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	4353      	muls	r3, r2
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800187e:	e005      	b.n	800188c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001884:	e002      	b.n	800188c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800188a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b00f      	add	sp, #60	; 0x3c
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	080045b0 	.word	0x080045b0
 800189c:	080045c0 	.word	0x080045c0
 80018a0:	40021000 	.word	0x40021000
 80018a4:	007a1200 	.word	0x007a1200
 80018a8:	02dc6c00 	.word	0x02dc6c00

080018ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <HAL_RCC_GetHCLKFreq+0x10>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	20000000 	.word	0x20000000

080018c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018c4:	f7ff fff2 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018c8:	0001      	movs	r1, r0
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	2207      	movs	r2, #7
 80018d2:	4013      	ands	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	40d9      	lsrs	r1, r3
 80018da:	000b      	movs	r3, r1
}    
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	40021000 	.word	0x40021000
 80018e8:	080045e0 	.word	0x080045e0

080018ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	4013      	ands	r3, r2
 8001906:	d100      	bne.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001908:	e08f      	b.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800190a:	2317      	movs	r3, #23
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001912:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	055b      	lsls	r3, r3, #21
 800191a:	4013      	ands	r3, r2
 800191c:	d111      	bne.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b6c      	ldr	r3, [pc, #432]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	4b6b      	ldr	r3, [pc, #428]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0549      	lsls	r1, r1, #21
 8001928:	430a      	orrs	r2, r1
 800192a:	61da      	str	r2, [r3, #28]
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	055b      	lsls	r3, r3, #21
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	2317      	movs	r3, #23
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b64      	ldr	r3, [pc, #400]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4013      	ands	r3, r2
 800194c:	d11a      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b61      	ldr	r3, [pc, #388]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b60      	ldr	r3, [pc, #384]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	0049      	lsls	r1, r1, #1
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195c:	f7fe ffc8 	bl	80008f0 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	e008      	b.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001966:	f7fe ffc3 	bl	80008f0 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b64      	cmp	r3, #100	; 0x64
 8001972:	d901      	bls.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0a6      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	4b56      	ldr	r3, [pc, #344]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4013      	ands	r3, r2
 8001982:	d0f0      	beq.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001984:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	23c0      	movs	r3, #192	; 0xc0
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d034      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	23c0      	movs	r3, #192	; 0xc0
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d02c      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019a6:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019b0:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019b2:	6a1a      	ldr	r2, [r3, #32]
 80019b4:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0249      	lsls	r1, r1, #9
 80019ba:	430a      	orrs	r2, r1
 80019bc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019c4:	4945      	ldr	r1, [pc, #276]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019ca:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	d013      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7fe ff8a 	bl	80008f0 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	e009      	b.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7fe ff85 	bl	80008f0 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	4a3c      	ldr	r2, [pc, #240]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e067      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	2202      	movs	r2, #2
 80019fc:	4013      	ands	r3, r2
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a10:	430a      	orrs	r2, r1
 8001a12:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a14:	2317      	movs	r3, #23
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a24:	492f      	ldr	r1, [pc, #188]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4013      	ands	r3, r2
 8001a32:	d009      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d009      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	2210      	movs	r2, #16
 8001a76:	4393      	bics	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	029b      	lsls	r3, r3, #10
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d009      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	4393      	bics	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4013      	ands	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	2240      	movs	r2, #64	; 0x40
 8001ab6:	4393      	bics	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b006      	add	sp, #24
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40007000 	.word	0x40007000
 8001ad8:	fffffcff 	.word	0xfffffcff
 8001adc:	fffeffff 	.word	0xfffeffff
 8001ae0:	00001388 	.word	0x00001388
 8001ae4:	efffffff 	.word	0xefffffff
 8001ae8:	fffcffff 	.word	0xfffcffff

08001aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0a8      	b.n	8001c50 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	2382      	movs	r3, #130	; 0x82
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d009      	beq.n	8001b26 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
 8001b18:	e005      	b.n	8001b26 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	225d      	movs	r2, #93	; 0x5d
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	225c      	movs	r2, #92	; 0x5c
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7fe fcd6 	bl	80004f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	225d      	movs	r2, #93	; 0x5d
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	23e0      	movs	r3, #224	; 0xe0
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d902      	bls.n	8001b72 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e002      	b.n	8001b78 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	015b      	lsls	r3, r3, #5
 8001b76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	23f0      	movs	r3, #240	; 0xf0
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d008      	beq.n	8001b96 <HAL_SPI_Init+0xaa>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	23e0      	movs	r3, #224	; 0xe0
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d002      	beq.n	8001b96 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	2382      	movs	r3, #130	; 0x82
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	2384      	movs	r3, #132	; 0x84
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	400b      	ands	r3, r1
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2101      	movs	r1, #1
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6999      	ldr	r1, [r3, #24]
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	400b      	ands	r3, r1
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	2138      	movs	r1, #56	; 0x38
 8001bd2:	400b      	ands	r3, r1
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	400b      	ands	r3, r1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	0011      	movs	r1, r2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2110      	movs	r1, #16
 8001c04:	400b      	ands	r3, r1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	400b      	ands	r3, r1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68d9      	ldr	r1, [r3, #12]
 8001c16:	23f0      	movs	r3, #240	; 0xf0
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	400b      	ands	r3, r1
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	0011      	movs	r1, r2
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	015b      	lsls	r3, r3, #5
 8001c26:	401a      	ands	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4907      	ldr	r1, [pc, #28]	; (8001c58 <HAL_SPI_Init+0x16c>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	225d      	movs	r2, #93	; 0x5d
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b004      	add	sp, #16
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	fffff7ff 	.word	0xfffff7ff

08001c5c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	1dbb      	adds	r3, r7, #6
 8001c68:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c6a:	2317      	movs	r3, #23
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d112      	bne.n	8001ca0 <HAL_SPI_Receive_IT+0x44>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	2382      	movs	r3, #130	; 0x82
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d10c      	bne.n	8001ca0 <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	225d      	movs	r2, #93	; 0x5d
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001c8e:	1dbb      	adds	r3, r7, #6
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f8a4 	bl	8001de4 <HAL_SPI_TransmitReceive_IT>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	e095      	b.n	8001dcc <HAL_SPI_Receive_IT+0x170>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	225c      	movs	r2, #92	; 0x5c
 8001ca4:	5c9b      	ldrb	r3, [r3, r2]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_SPI_Receive_IT+0x52>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e08e      	b.n	8001dcc <HAL_SPI_Receive_IT+0x170>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	225c      	movs	r2, #92	; 0x5c
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	225d      	movs	r2, #93	; 0x5d
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d004      	beq.n	8001ccc <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8001cc2:	2317      	movs	r3, #23
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cca:	e078      	b.n	8001dbe <HAL_SPI_Receive_IT+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_SPI_Receive_IT+0x7e>
 8001cd2:	1dbb      	adds	r3, r7, #6
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 8001cda:	2317      	movs	r3, #23
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ce2:	e06c      	b.n	8001dbe <HAL_SPI_Receive_IT+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	225d      	movs	r2, #93	; 0x5d
 8001ce8:	2104      	movs	r1, #4
 8001cea:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1dba      	adds	r2, r7, #6
 8001cfc:	2144      	movs	r1, #68	; 0x44
 8001cfe:	8812      	ldrh	r2, [r2, #0]
 8001d00:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1dba      	adds	r2, r7, #6
 8001d06:	2146      	movs	r1, #70	; 0x46
 8001d08:	8812      	ldrh	r2, [r2, #0]
 8001d0a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	23e0      	movs	r3, #224	; 0xe0
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d90b      	bls.n	8001d48 <HAL_SPI_Receive_IT+0xec>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4926      	ldr	r1, [pc, #152]	; (8001dd4 <HAL_SPI_Receive_IT+0x178>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a25      	ldr	r2, [pc, #148]	; (8001dd8 <HAL_SPI_Receive_IT+0x17c>)
 8001d44:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d46:	e00b      	b.n	8001d60 <HAL_SPI_Receive_IT+0x104>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	0149      	lsls	r1, r1, #5
 8001d56:	430a      	orrs	r2, r1
 8001d58:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_SPI_Receive_IT+0x180>)
 8001d5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d10f      	bne.n	8001d8c <HAL_SPI_Receive_IT+0x130>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2140      	movs	r1, #64	; 0x40
 8001d78:	438a      	bics	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4916      	ldr	r1, [pc, #88]	; (8001de0 <HAL_SPI_Receive_IT+0x184>)
 8001d88:	400a      	ands	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2160      	movs	r1, #96	; 0x60
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	d008      	beq.n	8001dbc <HAL_SPI_Receive_IT+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2140      	movs	r1, #64	; 0x40
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e000      	b.n	8001dbe <HAL_SPI_Receive_IT+0x162>
  }

error :
 8001dbc:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	225c      	movs	r2, #92	; 0x5c
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001dc6:	2317      	movs	r3, #23
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	781b      	ldrb	r3, [r3, #0]
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b006      	add	sp, #24
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	ffffefff 	.word	0xffffefff
 8001dd8:	08002433 	.word	0x08002433
 8001ddc:	080023e1 	.word	0x080023e1
 8001de0:	ffffbfff 	.word	0xffffbfff

08001de4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	001a      	movs	r2, r3
 8001df2:	1cbb      	adds	r3, r7, #2
 8001df4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001df6:	2317      	movs	r3, #23
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	225c      	movs	r2, #92	; 0x5c
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_SPI_TransmitReceive_IT+0x28>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e0a6      	b.n	8001f5a <HAL_SPI_TransmitReceive_IT+0x176>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	225c      	movs	r2, #92	; 0x5c
 8001e10:	2101      	movs	r1, #1
 8001e12:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e14:	2016      	movs	r0, #22
 8001e16:	183b      	adds	r3, r7, r0
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	215d      	movs	r1, #93	; 0x5d
 8001e1c:	5c52      	ldrb	r2, [r2, r1]
 8001e1e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d012      	beq.n	8001e54 <HAL_SPI_TransmitReceive_IT+0x70>
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	2382      	movs	r3, #130	; 0x82
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d108      	bne.n	8001e4a <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d104      	bne.n	8001e4a <HAL_SPI_TransmitReceive_IT+0x66>
 8001e40:	2316      	movs	r3, #22
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d004      	beq.n	8001e54 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8001e4a:	2317      	movs	r3, #23
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2202      	movs	r2, #2
 8001e50:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e52:	e07b      	b.n	8001f4c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <HAL_SPI_TransmitReceive_IT+0x84>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_SPI_TransmitReceive_IT+0x84>
 8001e60:	1cbb      	adds	r3, r7, #2
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d104      	bne.n	8001e72 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8001e68:	2317      	movs	r3, #23
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e70:	e06c      	b.n	8001f4c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	225d      	movs	r2, #93	; 0x5d
 8001e76:	5c9b      	ldrb	r3, [r3, r2]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d003      	beq.n	8001e86 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	225d      	movs	r2, #93	; 0x5d
 8001e82:	2105      	movs	r1, #5
 8001e84:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1cba      	adds	r2, r7, #2
 8001e96:	8812      	ldrh	r2, [r2, #0]
 8001e98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1cba      	adds	r2, r7, #2
 8001e9e:	8812      	ldrh	r2, [r2, #0]
 8001ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1cba      	adds	r2, r7, #2
 8001eac:	2144      	movs	r1, #68	; 0x44
 8001eae:	8812      	ldrh	r2, [r2, #0]
 8001eb0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1cba      	adds	r2, r7, #2
 8001eb6:	2146      	movs	r1, #70	; 0x46
 8001eb8:	8812      	ldrh	r2, [r2, #0]
 8001eba:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	23e0      	movs	r3, #224	; 0xe0
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d906      	bls.n	8001ed6 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <HAL_SPI_TransmitReceive_IT+0x180>)
 8001ecc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <HAL_SPI_TransmitReceive_IT+0x184>)
 8001ed2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ed4:	e005      	b.n	8001ee2 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <HAL_SPI_TransmitReceive_IT+0x188>)
 8001eda:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8001ee0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	23e0      	movs	r3, #224	; 0xe0
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d803      	bhi.n	8001ef6 <HAL_SPI_TransmitReceive_IT+0x112>
 8001eee:	1cbb      	adds	r3, r7, #2
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d908      	bls.n	8001f08 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	491c      	ldr	r1, [pc, #112]	; (8001f74 <HAL_SPI_TransmitReceive_IT+0x190>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	e008      	b.n	8001f1a <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0149      	lsls	r1, r1, #5
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	21e0      	movs	r1, #224	; 0xe0
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	d008      	beq.n	8001f4a <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2140      	movs	r1, #64	; 0x40
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e000      	b.n	8001f4c <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 8001f4a:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	225c      	movs	r2, #92	; 0x5c
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f54:	2317      	movs	r3, #23
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	781b      	ldrb	r3, [r3, #0]
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b006      	add	sp, #24
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	08002317 	.word	0x08002317
 8001f68:	0800237f 	.word	0x0800237f
 8001f6c:	080021c1 	.word	0x080021c1
 8001f70:	08002283 	.word	0x08002283
 8001f74:	ffffefff 	.word	0xffffefff

08001f78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	099b      	lsrs	r3, r3, #6
 8001f94:	001a      	movs	r2, r3
 8001f96:	2301      	movs	r3, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d10f      	bne.n	8001fbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001fa2:	d00b      	beq.n	8001fbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	001a      	movs	r2, r3
 8001faa:	2301      	movs	r3, #1
 8001fac:	4013      	ands	r3, r2
 8001fae:	d005      	beq.n	8001fbc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	0010      	movs	r0, r2
 8001fb8:	4798      	blx	r3
    return;
 8001fba:	e0d6      	b.n	800216a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d00b      	beq.n	8001fe0 <HAL_SPI_IRQHandler+0x68>
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	09db      	lsrs	r3, r3, #7
 8001fcc:	001a      	movs	r2, r3
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d005      	beq.n	8001fe0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	0010      	movs	r0, r2
 8001fdc:	4798      	blx	r3
    return;
 8001fde:	e0c4      	b.n	800216a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d10c      	bne.n	8002006 <HAL_SPI_IRQHandler+0x8e>
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d106      	bne.n	8002006 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	2301      	movs	r3, #1
 8002000:	4013      	ands	r3, r2
 8002002:	d100      	bne.n	8002006 <HAL_SPI_IRQHandler+0x8e>
 8002004:	e0b1      	b.n	800216a <HAL_SPI_IRQHandler+0x1f2>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	001a      	movs	r2, r3
 800200c:	2301      	movs	r3, #1
 800200e:	4013      	ands	r3, r2
 8002010:	d100      	bne.n	8002014 <HAL_SPI_IRQHandler+0x9c>
 8002012:	e0aa      	b.n	800216a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	001a      	movs	r2, r3
 800201a:	2301      	movs	r3, #1
 800201c:	4013      	ands	r3, r2
 800201e:	d023      	beq.n	8002068 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	225d      	movs	r2, #93	; 0x5d
 8002024:	5c9b      	ldrb	r3, [r3, r2]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d011      	beq.n	8002050 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002030:	2204      	movs	r2, #4
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	e00b      	b.n	8002068 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
        return;
 8002066:	e080      	b.n	800216a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	001a      	movs	r2, r3
 800206e:	2301      	movs	r3, #1
 8002070:	4013      	ands	r3, r2
 8002072:	d014      	beq.n	800209e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	2201      	movs	r2, #1
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	438a      	bics	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	001a      	movs	r2, r3
 80020a4:	2301      	movs	r3, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	d00c      	beq.n	80020c4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	2208      	movs	r2, #8
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d04d      	beq.n	8002168 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	21e0      	movs	r1, #224	; 0xe0
 80020d8:	438a      	bics	r2, r1
 80020da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	225d      	movs	r2, #93	; 0x5d
 80020e0:	2101      	movs	r1, #1
 80020e2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d103      	bne.n	80020f4 <HAL_SPI_IRQHandler+0x17c>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	d032      	beq.n	800215a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2103      	movs	r1, #3
 8002100:	438a      	bics	r2, r1
 8002102:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_SPI_IRQHandler+0x1f8>)
 8002112:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	0018      	movs	r0, r3
 800211a:	f7fe fd2b 	bl	8000b74 <HAL_DMA_Abort_IT>
 800211e:	1e03      	subs	r3, r0, #0
 8002120:	d005      	beq.n	800212e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_SPI_IRQHandler+0x1f8>)
 800213c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	0018      	movs	r0, r3
 8002144:	f7fe fd16 	bl	8000b74 <HAL_DMA_Abort_IT>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d00b      	beq.n	8002164 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002158:	e004      	b.n	8002164 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 f811 	bl	8002184 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002162:	e000      	b.n	8002166 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002164:	46c0      	nop			; (mov r8, r8)
    return;
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46c0      	nop			; (mov r8, r8)
  }
}
 800216a:	46bd      	mov	sp, r7
 800216c:	b008      	add	sp, #32
 800216e:	bd80      	pop	{r7, pc}
 8002170:	08002195 	.word	0x08002195

08002174 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2246      	movs	r2, #70	; 0x46
 80021a6:	2100      	movs	r1, #0
 80021a8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7ff ffe6 	bl	8002184 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bd80      	pop	{r7, pc}

080021c0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2246      	movs	r2, #70	; 0x46
 80021cc:	5a9b      	ldrh	r3, [r3, r2]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d924      	bls.n	800221e <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	b292      	uxth	r2, r2
 80021e0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	1c9a      	adds	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2246      	movs	r2, #70	; 0x46
 80021f0:	5a9b      	ldrh	r3, [r3, r2]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b02      	subs	r3, #2
 80021f6:	b299      	uxth	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2246      	movs	r2, #70	; 0x46
 80021fc:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2246      	movs	r2, #70	; 0x46
 8002202:	5a9b      	ldrh	r3, [r3, r2]
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d120      	bne.n	800224c <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0149      	lsls	r1, r1, #5
 8002218:	430a      	orrs	r2, r1
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	e016      	b.n	800224c <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	330c      	adds	r3, #12
 8002224:	001a      	movs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	7812      	ldrb	r2, [r2, #0]
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2246      	movs	r2, #70	; 0x46
 800223e:	5a9b      	ldrh	r3, [r3, r2]
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b299      	uxth	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2246      	movs	r2, #70	; 0x46
 800224a:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2246      	movs	r2, #70	; 0x46
 8002250:	5a9b      	ldrh	r3, [r3, r2]
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d110      	bne.n	800227a <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2160      	movs	r1, #96	; 0x60
 8002264:	438a      	bics	r2, r1
 8002266:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0018      	movs	r0, r3
 8002276:	f000 facb 	bl	8002810 <SPI_CloseRxTx_ISR>
    }
  }
}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}

08002282 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d912      	bls.n	80022ba <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	1c9a      	adds	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b02      	subs	r3, #2
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022b8:	e012      	b.n	80022e0 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d111      	bne.n	800230e <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2180      	movs	r1, #128	; 0x80
 80022f6:	438a      	bics	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2246      	movs	r2, #70	; 0x46
 80022fe:	5a9b      	ldrh	r3, [r3, r2]
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 fa81 	bl	8002810 <SPI_CloseRxTx_ISR>
    }
  }
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}

08002316 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	b292      	uxth	r2, r2
 800232a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	1c9a      	adds	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2246      	movs	r2, #70	; 0x46
 800233a:	5a9b      	ldrh	r3, [r3, r2]
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b299      	uxth	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2246      	movs	r2, #70	; 0x46
 8002346:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2246      	movs	r2, #70	; 0x46
 800234c:	5a9b      	ldrh	r3, [r3, r2]
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d110      	bne.n	8002376 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2140      	movs	r1, #64	; 0x40
 8002360:	438a      	bics	r2, r1
 8002362:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d103      	bne.n	8002376 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fa4d 	bl	8002810 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b002      	add	sp, #8
 800237c:	bd80      	pop	{r7, pc}

0800237e <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	881a      	ldrh	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	1c9a      	adds	r2, r3, #2
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	438a      	bics	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2246      	movs	r2, #70	; 0x46
 80023c8:	5a9b      	ldrh	r3, [r3, r2]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 fa1c 	bl	8002810 <SPI_CloseRxTx_ISR>
    }
  }
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}

080023e0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	330c      	adds	r3, #12
 80023ee:	001a      	movs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2246      	movs	r2, #70	; 0x46
 8002408:	5a9b      	ldrh	r3, [r3, r2]
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b299      	uxth	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2246      	movs	r2, #70	; 0x46
 8002414:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2246      	movs	r2, #70	; 0x46
 800241a:	5a9b      	ldrh	r3, [r3, r2]
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fa39 	bl	800289c <SPI_CloseRx_ISR>
  }
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}

08002432 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	b292      	uxth	r2, r2
 8002446:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	1c9a      	adds	r2, r3, #2
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2246      	movs	r2, #70	; 0x46
 8002456:	5a9b      	ldrh	r3, [r3, r2]
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b299      	uxth	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2246      	movs	r2, #70	; 0x46
 8002462:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2246      	movs	r2, #70	; 0x46
 8002468:	5a9b      	ldrh	r3, [r3, r2]
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d103      	bne.n	8002478 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 fa12 	bl	800289c <SPI_CloseRx_ISR>
  }
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}

08002480 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002490:	f7fe fa2e 	bl	80008f0 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	18d3      	adds	r3, r2, r3
 800249e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024a0:	f7fe fa26 	bl	80008f0 <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024a8:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	015b      	lsls	r3, r3, #5
 80024ae:	0d1b      	lsrs	r3, r3, #20
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	4353      	muls	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024b6:	e058      	b.n	800256a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	d055      	beq.n	800256a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024be:	f7fe fa17 	bl	80008f0 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d902      	bls.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d142      	bne.n	800255a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	21e0      	movs	r1, #224	; 0xe0
 80024e0:	438a      	bics	r2, r1
 80024e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	2382      	movs	r3, #130	; 0x82
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d113      	bne.n	8002518 <SPI_WaitFlagStateUntilTimeout+0x98>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d005      	beq.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2140      	movs	r1, #64	; 0x40
 8002514:	438a      	bics	r2, r1
 8002516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	019b      	lsls	r3, r3, #6
 8002520:	429a      	cmp	r2, r3
 8002522:	d110      	bne.n	8002546 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	491a      	ldr	r1, [pc, #104]	; (8002598 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002530:	400a      	ands	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	0189      	lsls	r1, r1, #6
 8002542:	430a      	orrs	r2, r1
 8002544:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	225d      	movs	r2, #93	; 0x5d
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	225c      	movs	r2, #92	; 0x5c
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e017      	b.n	800258a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3b01      	subs	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	4013      	ands	r3, r2
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	425a      	negs	r2, r3
 800257a:	4153      	adcs	r3, r2
 800257c:	b2db      	uxtb	r3, r3
 800257e:	001a      	movs	r2, r3
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d197      	bne.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b008      	add	sp, #32
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	20000000 	.word	0x20000000
 8002598:	ffffdfff 	.word	0xffffdfff

0800259c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80025aa:	f7fe f9a1 	bl	80008f0 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	18d3      	adds	r3, r2, r3
 80025b8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025ba:	f7fe f999 	bl	80008f0 <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80025c2:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <SPI_WaitFifoStateUntilTimeout+0x124>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	0013      	movs	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	189b      	adds	r3, r3, r2
 80025cc:	00da      	lsls	r2, r3, #3
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	0d1b      	lsrs	r3, r3, #20
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	4353      	muls	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80025d8:	e064      	b.n	80026a4 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	23c0      	movs	r3, #192	; 0xc0
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <SPI_WaitFifoStateUntilTimeout+0x56>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	d055      	beq.n	80026a4 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025f8:	f7fe f97a 	bl	80008f0 <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	429a      	cmp	r2, r3
 8002606:	d902      	bls.n	800260e <SPI_WaitFifoStateUntilTimeout+0x72>
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d142      	bne.n	8002694 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	21e0      	movs	r1, #224	; 0xe0
 800261a:	438a      	bics	r2, r1
 800261c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	2382      	movs	r3, #130	; 0x82
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	429a      	cmp	r2, r3
 8002628:	d113      	bne.n	8002652 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	429a      	cmp	r2, r3
 8002634:	d005      	beq.n	8002642 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	429a      	cmp	r2, r3
 8002640:	d107      	bne.n	8002652 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2140      	movs	r1, #64	; 0x40
 800264e:	438a      	bics	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	019b      	lsls	r3, r3, #6
 800265a:	429a      	cmp	r2, r3
 800265c:	d110      	bne.n	8002680 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4916      	ldr	r1, [pc, #88]	; (80026c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800266a:	400a      	ands	r2, r1
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0189      	lsls	r1, r1, #6
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	225d      	movs	r2, #93	; 0x5d
 8002684:	2101      	movs	r1, #1
 8002686:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	225c      	movs	r2, #92	; 0x5c
 800268c:	2100      	movs	r1, #0
 800268e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e010      	b.n	80026b6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d192      	bne.n	80025da <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b008      	add	sp, #32
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	20000000 	.word	0x20000000
 80026c4:	ffffdfff 	.word	0xffffdfff

080026c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	2382      	movs	r3, #130	; 0x82
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	429a      	cmp	r2, r3
 80026de:	d113      	bne.n	8002708 <SPI_EndRxTransaction+0x40>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d005      	beq.n	80026f8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d107      	bne.n	8002708 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2140      	movs	r1, #64	; 0x40
 8002704:	438a      	bics	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	0013      	movs	r3, r2
 8002712:	2200      	movs	r2, #0
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	f7ff feb3 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d007      	beq.n	800272e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	2220      	movs	r2, #32
 8002724:	431a      	orrs	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e026      	b.n	800277c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	2382      	movs	r3, #130	; 0x82
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	429a      	cmp	r2, r3
 8002738:	d11f      	bne.n	800277a <SPI_EndRxTransaction+0xb2>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	429a      	cmp	r2, r3
 8002744:	d005      	beq.n	8002752 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	429a      	cmp	r2, r3
 8002750:	d113      	bne.n	800277a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	23c0      	movs	r3, #192	; 0xc0
 8002756:	00d9      	lsls	r1, r3, #3
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	0013      	movs	r3, r2
 8002760:	2200      	movs	r2, #0
 8002762:	f7ff ff1b 	bl	800259c <SPI_WaitFifoStateUntilTimeout>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d007      	beq.n	800277a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276e:	2220      	movs	r2, #32
 8002770:	431a      	orrs	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e000      	b.n	800277c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b004      	add	sp, #16
 8002782:	bd80      	pop	{r7, pc}

08002784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	0159      	lsls	r1, r3, #5
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	0013      	movs	r3, r2
 800279e:	2200      	movs	r2, #0
 80027a0:	f7ff fefc 	bl	800259c <SPI_WaitFifoStateUntilTimeout>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d007      	beq.n	80027b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ac:	2220      	movs	r2, #32
 80027ae:	431a      	orrs	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e027      	b.n	8002808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	0013      	movs	r3, r2
 80027c2:	2200      	movs	r2, #0
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	f7ff fe5b 	bl	8002480 <SPI_WaitFlagStateUntilTimeout>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d007      	beq.n	80027de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d2:	2220      	movs	r2, #32
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e014      	b.n	8002808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	23c0      	movs	r3, #192	; 0xc0
 80027e2:	00d9      	lsls	r1, r3, #3
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	0013      	movs	r3, r2
 80027ec:	2200      	movs	r2, #0
 80027ee:	f7ff fed5 	bl	800259c <SPI_WaitFifoStateUntilTimeout>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d007      	beq.n	8002806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	2220      	movs	r2, #32
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e000      	b.n	8002808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b004      	add	sp, #16
 800280e:	bd80      	pop	{r7, pc}

08002810 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002818:	f7fe f86a 	bl	80008f0 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2120      	movs	r1, #32
 800282c:	438a      	bics	r2, r1
 800282e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2164      	movs	r1, #100	; 0x64
 8002836:	0018      	movs	r0, r3
 8002838:	f7ff ffa4 	bl	8002784 <SPI_EndRxTxTransaction>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d005      	beq.n	800284c <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	2220      	movs	r2, #32
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002850:	2b00      	cmp	r3, #0
 8002852:	d117      	bne.n	8002884 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	225d      	movs	r2, #93	; 0x5d
 8002858:	5c9b      	ldrb	r3, [r3, r2]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b04      	cmp	r3, #4
 800285e:	d108      	bne.n	8002872 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	225d      	movs	r2, #93	; 0x5d
 8002864:	2101      	movs	r1, #1
 8002866:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f7fd fde8 	bl	8000440 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002870:	e010      	b.n	8002894 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	225d      	movs	r2, #93	; 0x5d
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0018      	movs	r0, r3
 800287e:	f7ff fc79 	bl	8002174 <HAL_SPI_TxRxCpltCallback>
}
 8002882:	e007      	b.n	8002894 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	225d      	movs	r2, #93	; 0x5d
 8002888:	2101      	movs	r1, #1
 800288a:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff fc78 	bl	8002184 <HAL_SPI_ErrorCallback>
}
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}

0800289c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2160      	movs	r1, #96	; 0x60
 80028b0:	438a      	bics	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80028b4:	f7fe f81c 	bl	80008f0 <HAL_GetTick>
 80028b8:	0002      	movs	r2, r0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2164      	movs	r1, #100	; 0x64
 80028be:	0018      	movs	r0, r3
 80028c0:	f7ff ff02 	bl	80026c8 <SPI_EndRxTransaction>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d005      	beq.n	80028d4 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	2220      	movs	r2, #32
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	225d      	movs	r2, #93	; 0x5d
 80028d8:	2101      	movs	r1, #1
 80028da:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7fd fdaa 	bl	8000440 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80028ec:	e003      	b.n	80028f6 <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7ff fc47 	bl	8002184 <HAL_SPI_ErrorCallback>
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b002      	add	sp, #8
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e044      	b.n	800299c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2274      	movs	r2, #116	; 0x74
 800291e:	2100      	movs	r1, #0
 8002920:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f7fd fe39 	bl	800059c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2224      	movs	r2, #36	; 0x24
 800292e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	438a      	bics	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0018      	movs	r0, r3
 8002944:	f000 fafe 	bl	8002f44 <UART_SetConfig>
 8002948:	0003      	movs	r3, r0
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e024      	b.n	800299c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 fc75 	bl	800324c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	490d      	ldr	r1, [pc, #52]	; (80029a4 <HAL_UART_Init+0xa4>)
 800296e:	400a      	ands	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	212a      	movs	r1, #42	; 0x2a
 800297e:	438a      	bics	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2101      	movs	r1, #1
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 fd0d 	bl	80033b4 <UART_CheckIdleState>
 800299a:	0003      	movs	r3, r0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	ffffb7ff 	.word	0xffffb7ff

080029a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d000      	beq.n	80029c2 <HAL_UART_Transmit+0x1a>
 80029c0:	e096      	b.n	8002af0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_UART_Transmit+0x28>
 80029c8:	1dbb      	adds	r3, r7, #6
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e08e      	b.n	8002af2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	015b      	lsls	r3, r3, #5
 80029dc:	429a      	cmp	r2, r3
 80029de:	d109      	bne.n	80029f4 <HAL_UART_Transmit+0x4c>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2201      	movs	r2, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	d001      	beq.n	80029f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e07e      	b.n	8002af2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2274      	movs	r2, #116	; 0x74
 80029f8:	5c9b      	ldrb	r3, [r3, r2]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Transmit+0x5a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e077      	b.n	8002af2 <HAL_UART_Transmit+0x14a>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2274      	movs	r2, #116	; 0x74
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a18:	f7fd ff6a 	bl	80008f0 <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1dba      	adds	r2, r7, #6
 8002a24:	2150      	movs	r1, #80	; 0x50
 8002a26:	8812      	ldrh	r2, [r2, #0]
 8002a28:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1dba      	adds	r2, r7, #6
 8002a2e:	2152      	movs	r1, #82	; 0x52
 8002a30:	8812      	ldrh	r2, [r2, #0]
 8002a32:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	015b      	lsls	r3, r3, #5
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d108      	bne.n	8002a52 <HAL_UART_Transmit+0xaa>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d104      	bne.n	8002a52 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	e003      	b.n	8002a5a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2274      	movs	r2, #116	; 0x74
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002a62:	e02d      	b.n	8002ac0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	0013      	movs	r3, r2
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	f000 fce9 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e039      	b.n	8002af2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10b      	bne.n	8002a9c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	881a      	ldrh	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	05d2      	lsls	r2, r2, #23
 8002a8e:	0dd2      	lsrs	r2, r2, #23
 8002a90:	b292      	uxth	r2, r2
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	3302      	adds	r3, #2
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	e008      	b.n	8002aae <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b292      	uxth	r2, r2
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2252      	movs	r2, #82	; 0x52
 8002ab2:	5a9b      	ldrh	r3, [r3, r2]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b299      	uxth	r1, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2252      	movs	r2, #82	; 0x52
 8002abe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2252      	movs	r2, #82	; 0x52
 8002ac4:	5a9b      	ldrh	r3, [r3, r2]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1cb      	bne.n	8002a64 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	0013      	movs	r3, r2
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2140      	movs	r1, #64	; 0x40
 8002ada:	f000 fcb5 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 8002ade:	1e03      	subs	r3, r0, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e005      	b.n	8002af2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
  }
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b008      	add	sp, #32
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4ab5      	ldr	r2, [pc, #724]	; (8002df4 <HAL_UART_IRQHandler+0x2f8>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d112      	bne.n	8002b50 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d00e      	beq.n	8002b50 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2220      	movs	r2, #32
 8002b36:	4013      	ands	r3, r2
 8002b38:	d00a      	beq.n	8002b50 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d100      	bne.n	8002b44 <HAL_UART_IRQHandler+0x48>
 8002b42:	e1d4      	b.n	8002eee <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	4798      	blx	r3
      }
      return;
 8002b4e:	e1ce      	b.n	8002eee <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d100      	bne.n	8002b58 <HAL_UART_IRQHandler+0x5c>
 8002b56:	e0d9      	b.n	8002d0c <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d104      	bne.n	8002b6a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4aa5      	ldr	r2, [pc, #660]	; (8002df8 <HAL_UART_IRQHandler+0x2fc>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	d100      	bne.n	8002b6a <HAL_UART_IRQHandler+0x6e>
 8002b68:	e0d0      	b.n	8002d0c <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d010      	beq.n	8002b94 <HAL_UART_IRQHandler+0x98>
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	589b      	ldr	r3, [r3, r2]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2202      	movs	r2, #2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d00f      	beq.n	8002bbc <HAL_UART_IRQHandler+0xc0>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d00b      	beq.n	8002bbc <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	589b      	ldr	r3, [r3, r2]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d00f      	beq.n	8002be4 <HAL_UART_IRQHandler+0xe8>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	589b      	ldr	r3, [r3, r2]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2208      	movs	r2, #8
 8002be8:	4013      	ands	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d103      	bne.n	8002bfc <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bfa:	d00b      	beq.n	8002c14 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2208      	movs	r2, #8
 8002c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	589b      	ldr	r3, [r3, r2]
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d011      	beq.n	8002c42 <HAL_UART_IRQHandler+0x146>
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	04db      	lsls	r3, r3, #19
 8002c24:	4013      	ands	r3, r2
 8002c26:	d00c      	beq.n	8002c42 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	589b      	ldr	r3, [r3, r2]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	589b      	ldr	r3, [r3, r2]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d100      	bne.n	8002c4e <HAL_UART_IRQHandler+0x152>
 8002c4c:	e151      	b.n	8002ef2 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2220      	movs	r2, #32
 8002c52:	4013      	ands	r3, r2
 8002c54:	d00c      	beq.n	8002c70 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d008      	beq.n	8002c70 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	0010      	movs	r0, r2
 8002c6e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	589b      	ldr	r3, [r3, r2]
 8002c76:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d003      	beq.n	8002c8e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2228      	movs	r2, #40	; 0x28
 8002c8a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c8c:	d033      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f000 fc57 	bl	8003544 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2240      	movs	r2, #64	; 0x40
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d123      	bne.n	8002cec <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d012      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a4e      	ldr	r2, [pc, #312]	; (8002dfc <HAL_UART_IRQHandler+0x300>)
 8002cc2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fd ff53 	bl	8000b74 <HAL_DMA_Abort_IT>
 8002cce:	1e03      	subs	r3, r0, #0
 8002cd0:	d01a      	beq.n	8002d08 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	0018      	movs	r0, r3
 8002cde:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	e012      	b.n	8002d08 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 f919 	bl	8002f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cea:	e00d      	b.n	8002d08 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 f914 	bl	8002f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	e008      	b.n	8002d08 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f90f 	bl	8002f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	2100      	movs	r1, #0
 8002d04:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d06:	e0f4      	b.n	8002ef2 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	46c0      	nop			; (mov r8, r8)
    return;
 8002d0a:	e0f2      	b.n	8002ef2 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d000      	beq.n	8002d16 <HAL_UART_IRQHandler+0x21a>
 8002d14:	e0b7      	b.n	8002e86 <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d100      	bne.n	8002d20 <HAL_UART_IRQHandler+0x224>
 8002d1e:	e0b2      	b.n	8002e86 <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2210      	movs	r2, #16
 8002d24:	4013      	ands	r3, r2
 8002d26:	d100      	bne.n	8002d2a <HAL_UART_IRQHandler+0x22e>
 8002d28:	e0ad      	b.n	8002e86 <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2240      	movs	r2, #64	; 0x40
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d161      	bne.n	8002e04 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	2108      	movs	r1, #8
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002d4e:	187b      	adds	r3, r7, r1
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d100      	bne.n	8002d58 <HAL_UART_IRQHandler+0x25c>
 8002d56:	e0ce      	b.n	8002ef6 <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2258      	movs	r2, #88	; 0x58
 8002d5c:	5a9b      	ldrh	r3, [r3, r2]
 8002d5e:	2208      	movs	r2, #8
 8002d60:	18ba      	adds	r2, r7, r2
 8002d62:	8812      	ldrh	r2, [r2, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d300      	bcc.n	8002d6a <HAL_UART_IRQHandler+0x26e>
 8002d68:	e0c5      	b.n	8002ef6 <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	18ba      	adds	r2, r7, r2
 8002d70:	215a      	movs	r1, #90	; 0x5a
 8002d72:	8812      	ldrh	r2, [r2, #0]
 8002d74:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d02a      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	491d      	ldr	r1, [pc, #116]	; (8002e00 <HAL_UART_IRQHandler+0x304>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	438a      	bics	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	438a      	bics	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7fd fe97 	bl	8000b04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2258      	movs	r2, #88	; 0x58
 8002dda:	5a9a      	ldrh	r2, [r3, r2]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	215a      	movs	r1, #90	; 0x5a
 8002de0:	5a5b      	ldrh	r3, [r3, r1]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0011      	movs	r1, r2
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f89d 	bl	8002f2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002df2:	e080      	b.n	8002ef6 <HAL_UART_IRQHandler+0x3fa>
 8002df4:	0000080f 	.word	0x0000080f
 8002df8:	04000120 	.word	0x04000120
 8002dfc:	080035a5 	.word	0x080035a5
 8002e00:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2258      	movs	r2, #88	; 0x58
 8002e08:	5a99      	ldrh	r1, [r3, r2]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	225a      	movs	r2, #90	; 0x5a
 8002e0e:	5a9b      	ldrh	r3, [r3, r2]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	230a      	movs	r3, #10
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	1a8a      	subs	r2, r1, r2
 8002e18:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	225a      	movs	r2, #90	; 0x5a
 8002e1e:	5a9b      	ldrh	r3, [r3, r2]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d100      	bne.n	8002e28 <HAL_UART_IRQHandler+0x32c>
 8002e26:	e068      	b.n	8002efa <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 8002e28:	230a      	movs	r3, #10
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d063      	beq.n	8002efa <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4932      	ldr	r1, [pc, #200]	; (8002f08 <HAL_UART_IRQHandler+0x40c>)
 8002e3e:	400a      	ands	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	438a      	bics	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2110      	movs	r1, #16
 8002e70:	438a      	bics	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e74:	230a      	movs	r3, #10
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	881a      	ldrh	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	0011      	movs	r1, r2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 f854 	bl	8002f2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e84:	e039      	b.n	8002efa <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	035b      	lsls	r3, r3, #13
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_UART_IRQHandler+0x3b2>
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	03db      	lsls	r3, r3, #15
 8002e96:	4013      	ands	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	0352      	lsls	r2, r2, #13
 8002ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 fbad 	bl	8003606 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eac:	e028      	b.n	8002f00 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2280      	movs	r2, #128	; 0x80
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01b      	beq.n	8002efe <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	0010      	movs	r0, r2
 8002ece:	4798      	blx	r3
    }
    return;
 8002ed0:	e015      	b.n	8002efe <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	2240      	movs	r2, #64	; 0x40
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d012      	beq.n	8002f00 <HAL_UART_IRQHandler+0x404>
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2240      	movs	r2, #64	; 0x40
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00e      	beq.n	8002f00 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f000 fb74 	bl	80035d2 <UART_EndTransmit_IT>
    return;
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	e008      	b.n	8002f00 <HAL_UART_IRQHandler+0x404>
      return;
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	e006      	b.n	8002f00 <HAL_UART_IRQHandler+0x404>
    return;
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	e004      	b.n	8002f00 <HAL_UART_IRQHandler+0x404>
      return;
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	e002      	b.n	8002f00 <HAL_UART_IRQHandler+0x404>
      return;
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	e000      	b.n	8002f00 <HAL_UART_IRQHandler+0x404>
    return;
 8002efe:	46c0      	nop			; (mov r8, r8)
  }

}
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b008      	add	sp, #32
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	fffffedf 	.word	0xfffffedf

08002f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	000a      	movs	r2, r1
 8002f36:	1cbb      	adds	r3, r7, #2
 8002f38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b002      	add	sp, #8
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f4c:	231e      	movs	r3, #30
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4aac      	ldr	r2, [pc, #688]	; (8003224 <UART_SetConfig+0x2e0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4aa7      	ldr	r2, [pc, #668]	; (8003228 <UART_SetConfig+0x2e4>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a9e      	ldr	r2, [pc, #632]	; (800322c <UART_SetConfig+0x2e8>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a9a      	ldr	r2, [pc, #616]	; (8003230 <UART_SetConfig+0x2ec>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d125      	bne.n	8003016 <UART_SetConfig+0xd2>
 8002fca:	4b9a      	ldr	r3, [pc, #616]	; (8003234 <UART_SetConfig+0x2f0>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	2203      	movs	r2, #3
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d00f      	beq.n	8002ff6 <UART_SetConfig+0xb2>
 8002fd6:	d304      	bcc.n	8002fe2 <UART_SetConfig+0x9e>
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d011      	beq.n	8003000 <UART_SetConfig+0xbc>
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d005      	beq.n	8002fec <UART_SetConfig+0xa8>
 8002fe0:	e013      	b.n	800300a <UART_SetConfig+0xc6>
 8002fe2:	231f      	movs	r3, #31
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e064      	b.n	80030b6 <UART_SetConfig+0x172>
 8002fec:	231f      	movs	r3, #31
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e05f      	b.n	80030b6 <UART_SetConfig+0x172>
 8002ff6:	231f      	movs	r3, #31
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e05a      	b.n	80030b6 <UART_SetConfig+0x172>
 8003000:	231f      	movs	r3, #31
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2208      	movs	r2, #8
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e055      	b.n	80030b6 <UART_SetConfig+0x172>
 800300a:	231f      	movs	r3, #31
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	2210      	movs	r2, #16
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	e04f      	b.n	80030b6 <UART_SetConfig+0x172>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a87      	ldr	r2, [pc, #540]	; (8003238 <UART_SetConfig+0x2f4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d132      	bne.n	8003086 <UART_SetConfig+0x142>
 8003020:	4b84      	ldr	r3, [pc, #528]	; (8003234 <UART_SetConfig+0x2f0>)
 8003022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003024:	23c0      	movs	r3, #192	; 0xc0
 8003026:	029b      	lsls	r3, r3, #10
 8003028:	4013      	ands	r3, r2
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	0252      	lsls	r2, r2, #9
 800302e:	4293      	cmp	r3, r2
 8003030:	d019      	beq.n	8003066 <UART_SetConfig+0x122>
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	0252      	lsls	r2, r2, #9
 8003036:	4293      	cmp	r3, r2
 8003038:	d802      	bhi.n	8003040 <UART_SetConfig+0xfc>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <UART_SetConfig+0x10e>
 800303e:	e01c      	b.n	800307a <UART_SetConfig+0x136>
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	0292      	lsls	r2, r2, #10
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <UART_SetConfig+0x12c>
 8003048:	22c0      	movs	r2, #192	; 0xc0
 800304a:	0292      	lsls	r2, r2, #10
 800304c:	4293      	cmp	r3, r2
 800304e:	d005      	beq.n	800305c <UART_SetConfig+0x118>
 8003050:	e013      	b.n	800307a <UART_SetConfig+0x136>
 8003052:	231f      	movs	r3, #31
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e02c      	b.n	80030b6 <UART_SetConfig+0x172>
 800305c:	231f      	movs	r3, #31
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2202      	movs	r2, #2
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e027      	b.n	80030b6 <UART_SetConfig+0x172>
 8003066:	231f      	movs	r3, #31
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2204      	movs	r2, #4
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e022      	b.n	80030b6 <UART_SetConfig+0x172>
 8003070:	231f      	movs	r3, #31
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2208      	movs	r2, #8
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e01d      	b.n	80030b6 <UART_SetConfig+0x172>
 800307a:	231f      	movs	r3, #31
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	2210      	movs	r2, #16
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	e017      	b.n	80030b6 <UART_SetConfig+0x172>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6c      	ldr	r2, [pc, #432]	; (800323c <UART_SetConfig+0x2f8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d104      	bne.n	800309a <UART_SetConfig+0x156>
 8003090:	231f      	movs	r3, #31
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e00d      	b.n	80030b6 <UART_SetConfig+0x172>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a68      	ldr	r2, [pc, #416]	; (8003240 <UART_SetConfig+0x2fc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d104      	bne.n	80030ae <UART_SetConfig+0x16a>
 80030a4:	231f      	movs	r3, #31
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e003      	b.n	80030b6 <UART_SetConfig+0x172>
 80030ae:	231f      	movs	r3, #31
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	2210      	movs	r2, #16
 80030b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	429a      	cmp	r2, r3
 80030c0:	d15c      	bne.n	800317c <UART_SetConfig+0x238>
  {
    switch (clocksource)
 80030c2:	231f      	movs	r3, #31
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d00d      	beq.n	80030e8 <UART_SetConfig+0x1a4>
 80030cc:	dc02      	bgt.n	80030d4 <UART_SetConfig+0x190>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <UART_SetConfig+0x19a>
 80030d2:	e015      	b.n	8003100 <UART_SetConfig+0x1bc>
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d00a      	beq.n	80030ee <UART_SetConfig+0x1aa>
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d00d      	beq.n	80030f8 <UART_SetConfig+0x1b4>
 80030dc:	e010      	b.n	8003100 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030de:	f7fe fbef 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 80030e2:	0003      	movs	r3, r0
 80030e4:	61bb      	str	r3, [r7, #24]
        break;
 80030e6:	e012      	b.n	800310e <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e8:	4b56      	ldr	r3, [pc, #344]	; (8003244 <UART_SetConfig+0x300>)
 80030ea:	61bb      	str	r3, [r7, #24]
        break;
 80030ec:	e00f      	b.n	800310e <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ee:	f7fe fb5f 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 80030f2:	0003      	movs	r3, r0
 80030f4:	61bb      	str	r3, [r7, #24]
        break;
 80030f6:	e00a      	b.n	800310e <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	61bb      	str	r3, [r7, #24]
        break;
 80030fe:	e006      	b.n	800310e <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003104:	231e      	movs	r3, #30
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
        break;
 800310c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d100      	bne.n	8003116 <UART_SetConfig+0x1d2>
 8003114:	e079      	b.n	800320a <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	005a      	lsls	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	18d2      	adds	r2, r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	0019      	movs	r1, r3
 8003128:	0010      	movs	r0, r2
 800312a:	f7fc ffed 	bl	8000108 <__udivsi3>
 800312e:	0003      	movs	r3, r0
 8003130:	b29b      	uxth	r3, r3
 8003132:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	d91b      	bls.n	8003172 <UART_SetConfig+0x22e>
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4a42      	ldr	r2, [pc, #264]	; (8003248 <UART_SetConfig+0x304>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d817      	bhi.n	8003172 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	b29a      	uxth	r2, r3
 8003146:	200e      	movs	r0, #14
 8003148:	183b      	adds	r3, r7, r0
 800314a:	210f      	movs	r1, #15
 800314c:	438a      	bics	r2, r1
 800314e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	b29b      	uxth	r3, r3
 8003156:	2207      	movs	r2, #7
 8003158:	4013      	ands	r3, r2
 800315a:	b299      	uxth	r1, r3
 800315c:	183b      	adds	r3, r7, r0
 800315e:	183a      	adds	r2, r7, r0
 8003160:	8812      	ldrh	r2, [r2, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	183a      	adds	r2, r7, r0
 800316c:	8812      	ldrh	r2, [r2, #0]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e04b      	b.n	800320a <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8003172:	231e      	movs	r3, #30
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	e046      	b.n	800320a <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800317c:	231f      	movs	r3, #31
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d00d      	beq.n	80031a2 <UART_SetConfig+0x25e>
 8003186:	dc02      	bgt.n	800318e <UART_SetConfig+0x24a>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <UART_SetConfig+0x254>
 800318c:	e015      	b.n	80031ba <UART_SetConfig+0x276>
 800318e:	2b04      	cmp	r3, #4
 8003190:	d00a      	beq.n	80031a8 <UART_SetConfig+0x264>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d00d      	beq.n	80031b2 <UART_SetConfig+0x26e>
 8003196:	e010      	b.n	80031ba <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003198:	f7fe fb92 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 800319c:	0003      	movs	r3, r0
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e012      	b.n	80031c8 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <UART_SetConfig+0x300>)
 80031a4:	61bb      	str	r3, [r7, #24]
        break;
 80031a6:	e00f      	b.n	80031c8 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a8:	f7fe fb02 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 80031ac:	0003      	movs	r3, r0
 80031ae:	61bb      	str	r3, [r7, #24]
        break;
 80031b0:	e00a      	b.n	80031c8 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	61bb      	str	r3, [r7, #24]
        break;
 80031b8:	e006      	b.n	80031c8 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031be:	231e      	movs	r3, #30
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
        break;
 80031c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01d      	beq.n	800320a <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	085a      	lsrs	r2, r3, #1
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	18d2      	adds	r2, r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0019      	movs	r1, r3
 80031de:	0010      	movs	r0, r2
 80031e0:	f7fc ff92 	bl	8000108 <__udivsi3>
 80031e4:	0003      	movs	r3, r0
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b0f      	cmp	r3, #15
 80031ee:	d908      	bls.n	8003202 <UART_SetConfig+0x2be>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <UART_SetConfig+0x304>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d804      	bhi.n	8003202 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	e003      	b.n	800320a <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8003202:	231e      	movs	r3, #30
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003216:	231e      	movs	r3, #30
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	781b      	ldrb	r3, [r3, #0]
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b008      	add	sp, #32
 8003222:	bd80      	pop	{r7, pc}
 8003224:	efff69f3 	.word	0xefff69f3
 8003228:	ffffcfff 	.word	0xffffcfff
 800322c:	fffff4ff 	.word	0xfffff4ff
 8003230:	40013800 	.word	0x40013800
 8003234:	40021000 	.word	0x40021000
 8003238:	40004400 	.word	0x40004400
 800323c:	40004800 	.word	0x40004800
 8003240:	40004c00 	.word	0x40004c00
 8003244:	007a1200 	.word	0x007a1200
 8003248:	0000ffff 	.word	0x0000ffff

0800324c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2201      	movs	r2, #1
 800325a:	4013      	ands	r3, r2
 800325c:	d00b      	beq.n	8003276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a4a      	ldr	r2, [pc, #296]	; (8003390 <UART_AdvFeatureConfig+0x144>)
 8003266:	4013      	ands	r3, r2
 8003268:	0019      	movs	r1, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2202      	movs	r2, #2
 800327c:	4013      	ands	r3, r2
 800327e:	d00b      	beq.n	8003298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a43      	ldr	r2, [pc, #268]	; (8003394 <UART_AdvFeatureConfig+0x148>)
 8003288:	4013      	ands	r3, r2
 800328a:	0019      	movs	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2204      	movs	r2, #4
 800329e:	4013      	ands	r3, r2
 80032a0:	d00b      	beq.n	80032ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <UART_AdvFeatureConfig+0x14c>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	0019      	movs	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	2208      	movs	r2, #8
 80032c0:	4013      	ands	r3, r2
 80032c2:	d00b      	beq.n	80032dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a34      	ldr	r2, [pc, #208]	; (800339c <UART_AdvFeatureConfig+0x150>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	2210      	movs	r2, #16
 80032e2:	4013      	ands	r3, r2
 80032e4:	d00b      	beq.n	80032fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <UART_AdvFeatureConfig+0x154>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	0019      	movs	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2220      	movs	r2, #32
 8003304:	4013      	ands	r3, r2
 8003306:	d00b      	beq.n	8003320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <UART_AdvFeatureConfig+0x158>)
 8003310:	4013      	ands	r3, r2
 8003312:	0019      	movs	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	4013      	ands	r3, r2
 8003328:	d01d      	beq.n	8003366 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <UART_AdvFeatureConfig+0x15c>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	035b      	lsls	r3, r3, #13
 800334a:	429a      	cmp	r2, r3
 800334c:	d10b      	bne.n	8003366 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <UART_AdvFeatureConfig+0x160>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	4013      	ands	r3, r2
 800336e:	d00b      	beq.n	8003388 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <UART_AdvFeatureConfig+0x164>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  }
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}
 8003390:	fffdffff 	.word	0xfffdffff
 8003394:	fffeffff 	.word	0xfffeffff
 8003398:	fffbffff 	.word	0xfffbffff
 800339c:	ffff7fff 	.word	0xffff7fff
 80033a0:	ffffefff 	.word	0xffffefff
 80033a4:	ffffdfff 	.word	0xffffdfff
 80033a8:	ffefffff 	.word	0xffefffff
 80033ac:	ff9fffff 	.word	0xff9fffff
 80033b0:	fff7ffff 	.word	0xfff7ffff

080033b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	2100      	movs	r1, #0
 80033c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033c4:	f7fd fa94 	bl	80008f0 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2208      	movs	r2, #8
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d10d      	bne.n	80033f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	0399      	lsls	r1, r3, #14
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4b18      	ldr	r3, [pc, #96]	; (8003444 <UART_CheckIdleState+0x90>)
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	0013      	movs	r3, r2
 80033e8:	2200      	movs	r2, #0
 80033ea:	f000 f82d 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d001      	beq.n	80033f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e022      	b.n	800343c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2204      	movs	r2, #4
 80033fe:	4013      	ands	r3, r2
 8003400:	2b04      	cmp	r3, #4
 8003402:	d10d      	bne.n	8003420 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	03d9      	lsls	r1, r3, #15
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <UART_CheckIdleState+0x90>)
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	0013      	movs	r3, r2
 8003412:	2200      	movs	r2, #0
 8003414:	f000 f818 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 8003418:	1e03      	subs	r3, r0, #0
 800341a:	d001      	beq.n	8003420 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e00d      	b.n	800343c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2274      	movs	r2, #116	; 0x74
 8003436:	2100      	movs	r1, #0
 8003438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b004      	add	sp, #16
 8003442:	bd80      	pop	{r7, pc}
 8003444:	01ffffff 	.word	0x01ffffff

08003448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	1dfb      	adds	r3, r7, #7
 8003456:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003458:	e05e      	b.n	8003518 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	3301      	adds	r3, #1
 800345e:	d05b      	beq.n	8003518 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003460:	f7fd fa46 	bl	80008f0 <HAL_GetTick>
 8003464:	0002      	movs	r2, r0
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d11b      	bne.n	80034ae <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	492f      	ldr	r1, [pc, #188]	; (8003540 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003482:	400a      	ands	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	438a      	bics	r2, r1
 8003494:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2274      	movs	r2, #116	; 0x74
 80034a6:	2100      	movs	r1, #0
 80034a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e044      	b.n	8003538 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2204      	movs	r2, #4
 80034b6:	4013      	ands	r3, r2
 80034b8:	d02e      	beq.n	8003518 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	401a      	ands	r2, r3
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d124      	bne.n	8003518 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2280      	movs	r2, #128	; 0x80
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4917      	ldr	r1, [pc, #92]	; (8003540 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80034e4:	400a      	ands	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2101      	movs	r1, #1
 80034f4:	438a      	bics	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	2120      	movs	r1, #32
 800350a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2274      	movs	r2, #116	; 0x74
 8003510:	2100      	movs	r1, #0
 8003512:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e00f      	b.n	8003538 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	425a      	negs	r2, r3
 8003528:	4153      	adcs	r3, r2
 800352a:	b2db      	uxtb	r3, r3
 800352c:	001a      	movs	r2, r3
 800352e:	1dfb      	adds	r3, r7, #7
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d091      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b004      	add	sp, #16
 800353e:	bd80      	pop	{r7, pc}
 8003540:	fffffe5f 	.word	0xfffffe5f

08003544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4912      	ldr	r1, [pc, #72]	; (80035a0 <UART_EndRxTransfer+0x5c>)
 8003558:	400a      	ands	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	438a      	bics	r2, r1
 800356a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2110      	movs	r1, #16
 8003580:	438a      	bics	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b002      	add	sp, #8
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	fffffedf 	.word	0xfffffedf

080035a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	225a      	movs	r2, #90	; 0x5a
 80035b6:	2100      	movs	r1, #0
 80035b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2252      	movs	r2, #82	; 0x52
 80035be:	2100      	movs	r1, #0
 80035c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7ff fca9 	bl	8002f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2140      	movs	r1, #64	; 0x40
 80035e6:	438a      	bics	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7ff fc87 	bl	8002f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <__errno>:
 8003618:	4b01      	ldr	r3, [pc, #4]	; (8003620 <__errno+0x8>)
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	4770      	bx	lr
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	2000000c 	.word	0x2000000c

08003624 <__libc_init_array>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	2600      	movs	r6, #0
 8003628:	4d0c      	ldr	r5, [pc, #48]	; (800365c <__libc_init_array+0x38>)
 800362a:	4c0d      	ldr	r4, [pc, #52]	; (8003660 <__libc_init_array+0x3c>)
 800362c:	1b64      	subs	r4, r4, r5
 800362e:	10a4      	asrs	r4, r4, #2
 8003630:	42a6      	cmp	r6, r4
 8003632:	d109      	bne.n	8003648 <__libc_init_array+0x24>
 8003634:	2600      	movs	r6, #0
 8003636:	f000 ffa3 	bl	8004580 <_init>
 800363a:	4d0a      	ldr	r5, [pc, #40]	; (8003664 <__libc_init_array+0x40>)
 800363c:	4c0a      	ldr	r4, [pc, #40]	; (8003668 <__libc_init_array+0x44>)
 800363e:	1b64      	subs	r4, r4, r5
 8003640:	10a4      	asrs	r4, r4, #2
 8003642:	42a6      	cmp	r6, r4
 8003644:	d105      	bne.n	8003652 <__libc_init_array+0x2e>
 8003646:	bd70      	pop	{r4, r5, r6, pc}
 8003648:	00b3      	lsls	r3, r6, #2
 800364a:	58eb      	ldr	r3, [r5, r3]
 800364c:	4798      	blx	r3
 800364e:	3601      	adds	r6, #1
 8003650:	e7ee      	b.n	8003630 <__libc_init_array+0xc>
 8003652:	00b3      	lsls	r3, r6, #2
 8003654:	58eb      	ldr	r3, [r5, r3]
 8003656:	4798      	blx	r3
 8003658:	3601      	adds	r6, #1
 800365a:	e7f2      	b.n	8003642 <__libc_init_array+0x1e>
 800365c:	08004680 	.word	0x08004680
 8003660:	08004680 	.word	0x08004680
 8003664:	08004680 	.word	0x08004680
 8003668:	08004684 	.word	0x08004684

0800366c <memset>:
 800366c:	0003      	movs	r3, r0
 800366e:	1812      	adds	r2, r2, r0
 8003670:	4293      	cmp	r3, r2
 8003672:	d100      	bne.n	8003676 <memset+0xa>
 8003674:	4770      	bx	lr
 8003676:	7019      	strb	r1, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	e7f9      	b.n	8003670 <memset+0x4>

0800367c <iprintf>:
 800367c:	b40f      	push	{r0, r1, r2, r3}
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <iprintf+0x30>)
 8003680:	b513      	push	{r0, r1, r4, lr}
 8003682:	681c      	ldr	r4, [r3, #0]
 8003684:	2c00      	cmp	r4, #0
 8003686:	d005      	beq.n	8003694 <iprintf+0x18>
 8003688:	69a3      	ldr	r3, [r4, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <iprintf+0x18>
 800368e:	0020      	movs	r0, r4
 8003690:	f000 fa3c 	bl	8003b0c <__sinit>
 8003694:	ab05      	add	r3, sp, #20
 8003696:	9a04      	ldr	r2, [sp, #16]
 8003698:	68a1      	ldr	r1, [r4, #8]
 800369a:	0020      	movs	r0, r4
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	f000 fc05 	bl	8003eac <_vfiprintf_r>
 80036a2:	bc16      	pop	{r1, r2, r4}
 80036a4:	bc08      	pop	{r3}
 80036a6:	b004      	add	sp, #16
 80036a8:	4718      	bx	r3
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	2000000c 	.word	0x2000000c

080036b0 <_puts_r>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	0005      	movs	r5, r0
 80036b4:	000e      	movs	r6, r1
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d004      	beq.n	80036c4 <_puts_r+0x14>
 80036ba:	6983      	ldr	r3, [r0, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <_puts_r+0x14>
 80036c0:	f000 fa24 	bl	8003b0c <__sinit>
 80036c4:	69ab      	ldr	r3, [r5, #24]
 80036c6:	68ac      	ldr	r4, [r5, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <_puts_r+0x22>
 80036cc:	0028      	movs	r0, r5
 80036ce:	f000 fa1d 	bl	8003b0c <__sinit>
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <_puts_r+0xb4>)
 80036d4:	429c      	cmp	r4, r3
 80036d6:	d10f      	bne.n	80036f8 <_puts_r+0x48>
 80036d8:	686c      	ldr	r4, [r5, #4]
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	071b      	lsls	r3, r3, #28
 80036de:	d502      	bpl.n	80036e6 <_puts_r+0x36>
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d11f      	bne.n	8003726 <_puts_r+0x76>
 80036e6:	0021      	movs	r1, r4
 80036e8:	0028      	movs	r0, r5
 80036ea:	f000 f8a1 	bl	8003830 <__swsetup_r>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d019      	beq.n	8003726 <_puts_r+0x76>
 80036f2:	2001      	movs	r0, #1
 80036f4:	4240      	negs	r0, r0
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <_puts_r+0xb8>)
 80036fa:	429c      	cmp	r4, r3
 80036fc:	d101      	bne.n	8003702 <_puts_r+0x52>
 80036fe:	68ac      	ldr	r4, [r5, #8]
 8003700:	e7eb      	b.n	80036da <_puts_r+0x2a>
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <_puts_r+0xbc>)
 8003704:	429c      	cmp	r4, r3
 8003706:	d1e8      	bne.n	80036da <_puts_r+0x2a>
 8003708:	68ec      	ldr	r4, [r5, #12]
 800370a:	e7e6      	b.n	80036da <_puts_r+0x2a>
 800370c:	3601      	adds	r6, #1
 800370e:	60a3      	str	r3, [r4, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	da04      	bge.n	800371e <_puts_r+0x6e>
 8003714:	69a2      	ldr	r2, [r4, #24]
 8003716:	429a      	cmp	r2, r3
 8003718:	dc16      	bgt.n	8003748 <_puts_r+0x98>
 800371a:	290a      	cmp	r1, #10
 800371c:	d014      	beq.n	8003748 <_puts_r+0x98>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	6022      	str	r2, [r4, #0]
 8003724:	7019      	strb	r1, [r3, #0]
 8003726:	68a3      	ldr	r3, [r4, #8]
 8003728:	7831      	ldrb	r1, [r6, #0]
 800372a:	3b01      	subs	r3, #1
 800372c:	2900      	cmp	r1, #0
 800372e:	d1ed      	bne.n	800370c <_puts_r+0x5c>
 8003730:	60a3      	str	r3, [r4, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	da0f      	bge.n	8003756 <_puts_r+0xa6>
 8003736:	0022      	movs	r2, r4
 8003738:	310a      	adds	r1, #10
 800373a:	0028      	movs	r0, r5
 800373c:	f000 f822 	bl	8003784 <__swbuf_r>
 8003740:	1c43      	adds	r3, r0, #1
 8003742:	d0d6      	beq.n	80036f2 <_puts_r+0x42>
 8003744:	200a      	movs	r0, #10
 8003746:	e7d6      	b.n	80036f6 <_puts_r+0x46>
 8003748:	0022      	movs	r2, r4
 800374a:	0028      	movs	r0, r5
 800374c:	f000 f81a 	bl	8003784 <__swbuf_r>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d1e8      	bne.n	8003726 <_puts_r+0x76>
 8003754:	e7cd      	b.n	80036f2 <_puts_r+0x42>
 8003756:	200a      	movs	r0, #10
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	6022      	str	r2, [r4, #0]
 800375e:	7018      	strb	r0, [r3, #0]
 8003760:	e7c9      	b.n	80036f6 <_puts_r+0x46>
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	0800460c 	.word	0x0800460c
 8003768:	0800462c 	.word	0x0800462c
 800376c:	080045ec 	.word	0x080045ec

08003770 <puts>:
 8003770:	b510      	push	{r4, lr}
 8003772:	4b03      	ldr	r3, [pc, #12]	; (8003780 <puts+0x10>)
 8003774:	0001      	movs	r1, r0
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	f7ff ff9a 	bl	80036b0 <_puts_r>
 800377c:	bd10      	pop	{r4, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	2000000c 	.word	0x2000000c

08003784 <__swbuf_r>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	0005      	movs	r5, r0
 8003788:	000e      	movs	r6, r1
 800378a:	0014      	movs	r4, r2
 800378c:	2800      	cmp	r0, #0
 800378e:	d004      	beq.n	800379a <__swbuf_r+0x16>
 8003790:	6983      	ldr	r3, [r0, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <__swbuf_r+0x16>
 8003796:	f000 f9b9 	bl	8003b0c <__sinit>
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <__swbuf_r+0xa0>)
 800379c:	429c      	cmp	r4, r3
 800379e:	d12d      	bne.n	80037fc <__swbuf_r+0x78>
 80037a0:	686c      	ldr	r4, [r5, #4]
 80037a2:	69a3      	ldr	r3, [r4, #24]
 80037a4:	60a3      	str	r3, [r4, #8]
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	071b      	lsls	r3, r3, #28
 80037aa:	d531      	bpl.n	8003810 <__swbuf_r+0x8c>
 80037ac:	6923      	ldr	r3, [r4, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02e      	beq.n	8003810 <__swbuf_r+0x8c>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	6922      	ldr	r2, [r4, #16]
 80037b6:	b2f7      	uxtb	r7, r6
 80037b8:	1a98      	subs	r0, r3, r2
 80037ba:	6963      	ldr	r3, [r4, #20]
 80037bc:	b2f6      	uxtb	r6, r6
 80037be:	4283      	cmp	r3, r0
 80037c0:	dc05      	bgt.n	80037ce <__swbuf_r+0x4a>
 80037c2:	0021      	movs	r1, r4
 80037c4:	0028      	movs	r0, r5
 80037c6:	f000 f933 	bl	8003a30 <_fflush_r>
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d126      	bne.n	800381c <__swbuf_r+0x98>
 80037ce:	68a3      	ldr	r3, [r4, #8]
 80037d0:	3001      	adds	r0, #1
 80037d2:	3b01      	subs	r3, #1
 80037d4:	60a3      	str	r3, [r4, #8]
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	6022      	str	r2, [r4, #0]
 80037dc:	701f      	strb	r7, [r3, #0]
 80037de:	6963      	ldr	r3, [r4, #20]
 80037e0:	4283      	cmp	r3, r0
 80037e2:	d004      	beq.n	80037ee <__swbuf_r+0x6a>
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	07db      	lsls	r3, r3, #31
 80037e8:	d51a      	bpl.n	8003820 <__swbuf_r+0x9c>
 80037ea:	2e0a      	cmp	r6, #10
 80037ec:	d118      	bne.n	8003820 <__swbuf_r+0x9c>
 80037ee:	0021      	movs	r1, r4
 80037f0:	0028      	movs	r0, r5
 80037f2:	f000 f91d 	bl	8003a30 <_fflush_r>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d012      	beq.n	8003820 <__swbuf_r+0x9c>
 80037fa:	e00f      	b.n	800381c <__swbuf_r+0x98>
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <__swbuf_r+0xa4>)
 80037fe:	429c      	cmp	r4, r3
 8003800:	d101      	bne.n	8003806 <__swbuf_r+0x82>
 8003802:	68ac      	ldr	r4, [r5, #8]
 8003804:	e7cd      	b.n	80037a2 <__swbuf_r+0x1e>
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <__swbuf_r+0xa8>)
 8003808:	429c      	cmp	r4, r3
 800380a:	d1ca      	bne.n	80037a2 <__swbuf_r+0x1e>
 800380c:	68ec      	ldr	r4, [r5, #12]
 800380e:	e7c8      	b.n	80037a2 <__swbuf_r+0x1e>
 8003810:	0021      	movs	r1, r4
 8003812:	0028      	movs	r0, r5
 8003814:	f000 f80c 	bl	8003830 <__swsetup_r>
 8003818:	2800      	cmp	r0, #0
 800381a:	d0ca      	beq.n	80037b2 <__swbuf_r+0x2e>
 800381c:	2601      	movs	r6, #1
 800381e:	4276      	negs	r6, r6
 8003820:	0030      	movs	r0, r6
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003824:	0800460c 	.word	0x0800460c
 8003828:	0800462c 	.word	0x0800462c
 800382c:	080045ec 	.word	0x080045ec

08003830 <__swsetup_r>:
 8003830:	4b36      	ldr	r3, [pc, #216]	; (800390c <__swsetup_r+0xdc>)
 8003832:	b570      	push	{r4, r5, r6, lr}
 8003834:	681d      	ldr	r5, [r3, #0]
 8003836:	0006      	movs	r6, r0
 8003838:	000c      	movs	r4, r1
 800383a:	2d00      	cmp	r5, #0
 800383c:	d005      	beq.n	800384a <__swsetup_r+0x1a>
 800383e:	69ab      	ldr	r3, [r5, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <__swsetup_r+0x1a>
 8003844:	0028      	movs	r0, r5
 8003846:	f000 f961 	bl	8003b0c <__sinit>
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <__swsetup_r+0xe0>)
 800384c:	429c      	cmp	r4, r3
 800384e:	d10f      	bne.n	8003870 <__swsetup_r+0x40>
 8003850:	686c      	ldr	r4, [r5, #4]
 8003852:	230c      	movs	r3, #12
 8003854:	5ee2      	ldrsh	r2, [r4, r3]
 8003856:	b293      	uxth	r3, r2
 8003858:	0719      	lsls	r1, r3, #28
 800385a:	d42d      	bmi.n	80038b8 <__swsetup_r+0x88>
 800385c:	06d9      	lsls	r1, r3, #27
 800385e:	d411      	bmi.n	8003884 <__swsetup_r+0x54>
 8003860:	2309      	movs	r3, #9
 8003862:	2001      	movs	r0, #1
 8003864:	6033      	str	r3, [r6, #0]
 8003866:	3337      	adds	r3, #55	; 0x37
 8003868:	4313      	orrs	r3, r2
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	4240      	negs	r0, r0
 800386e:	bd70      	pop	{r4, r5, r6, pc}
 8003870:	4b28      	ldr	r3, [pc, #160]	; (8003914 <__swsetup_r+0xe4>)
 8003872:	429c      	cmp	r4, r3
 8003874:	d101      	bne.n	800387a <__swsetup_r+0x4a>
 8003876:	68ac      	ldr	r4, [r5, #8]
 8003878:	e7eb      	b.n	8003852 <__swsetup_r+0x22>
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <__swsetup_r+0xe8>)
 800387c:	429c      	cmp	r4, r3
 800387e:	d1e8      	bne.n	8003852 <__swsetup_r+0x22>
 8003880:	68ec      	ldr	r4, [r5, #12]
 8003882:	e7e6      	b.n	8003852 <__swsetup_r+0x22>
 8003884:	075b      	lsls	r3, r3, #29
 8003886:	d513      	bpl.n	80038b0 <__swsetup_r+0x80>
 8003888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800388a:	2900      	cmp	r1, #0
 800388c:	d008      	beq.n	80038a0 <__swsetup_r+0x70>
 800388e:	0023      	movs	r3, r4
 8003890:	3344      	adds	r3, #68	; 0x44
 8003892:	4299      	cmp	r1, r3
 8003894:	d002      	beq.n	800389c <__swsetup_r+0x6c>
 8003896:	0030      	movs	r0, r6
 8003898:	f000 fa38 	bl	8003d0c <_free_r>
 800389c:	2300      	movs	r3, #0
 800389e:	6363      	str	r3, [r4, #52]	; 0x34
 80038a0:	2224      	movs	r2, #36	; 0x24
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	4393      	bics	r3, r2
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	2300      	movs	r3, #0
 80038aa:	6063      	str	r3, [r4, #4]
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	6023      	str	r3, [r4, #0]
 80038b0:	2308      	movs	r3, #8
 80038b2:	89a2      	ldrh	r2, [r4, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	81a3      	strh	r3, [r4, #12]
 80038b8:	6923      	ldr	r3, [r4, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <__swsetup_r+0xa6>
 80038be:	21a0      	movs	r1, #160	; 0xa0
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	0089      	lsls	r1, r1, #2
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	400b      	ands	r3, r1
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <__swsetup_r+0xa6>
 80038ce:	0021      	movs	r1, r4
 80038d0:	0030      	movs	r0, r6
 80038d2:	f000 f9d7 	bl	8003c84 <__smakebuf_r>
 80038d6:	2301      	movs	r3, #1
 80038d8:	89a2      	ldrh	r2, [r4, #12]
 80038da:	4013      	ands	r3, r2
 80038dc:	d011      	beq.n	8003902 <__swsetup_r+0xd2>
 80038de:	2300      	movs	r3, #0
 80038e0:	60a3      	str	r3, [r4, #8]
 80038e2:	6963      	ldr	r3, [r4, #20]
 80038e4:	425b      	negs	r3, r3
 80038e6:	61a3      	str	r3, [r4, #24]
 80038e8:	2000      	movs	r0, #0
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	4283      	cmp	r3, r0
 80038ee:	d1be      	bne.n	800386e <__swsetup_r+0x3e>
 80038f0:	230c      	movs	r3, #12
 80038f2:	5ee2      	ldrsh	r2, [r4, r3]
 80038f4:	0613      	lsls	r3, r2, #24
 80038f6:	d5ba      	bpl.n	800386e <__swsetup_r+0x3e>
 80038f8:	2340      	movs	r3, #64	; 0x40
 80038fa:	4313      	orrs	r3, r2
 80038fc:	81a3      	strh	r3, [r4, #12]
 80038fe:	3801      	subs	r0, #1
 8003900:	e7b5      	b.n	800386e <__swsetup_r+0x3e>
 8003902:	0792      	lsls	r2, r2, #30
 8003904:	d400      	bmi.n	8003908 <__swsetup_r+0xd8>
 8003906:	6963      	ldr	r3, [r4, #20]
 8003908:	60a3      	str	r3, [r4, #8]
 800390a:	e7ed      	b.n	80038e8 <__swsetup_r+0xb8>
 800390c:	2000000c 	.word	0x2000000c
 8003910:	0800460c 	.word	0x0800460c
 8003914:	0800462c 	.word	0x0800462c
 8003918:	080045ec 	.word	0x080045ec

0800391c <__sflush_r>:
 800391c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800391e:	898a      	ldrh	r2, [r1, #12]
 8003920:	0005      	movs	r5, r0
 8003922:	000c      	movs	r4, r1
 8003924:	0713      	lsls	r3, r2, #28
 8003926:	d460      	bmi.n	80039ea <__sflush_r+0xce>
 8003928:	684b      	ldr	r3, [r1, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	dc04      	bgt.n	8003938 <__sflush_r+0x1c>
 800392e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	dc01      	bgt.n	8003938 <__sflush_r+0x1c>
 8003934:	2000      	movs	r0, #0
 8003936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003938:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800393a:	2f00      	cmp	r7, #0
 800393c:	d0fa      	beq.n	8003934 <__sflush_r+0x18>
 800393e:	2300      	movs	r3, #0
 8003940:	682e      	ldr	r6, [r5, #0]
 8003942:	602b      	str	r3, [r5, #0]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	015b      	lsls	r3, r3, #5
 8003948:	6a21      	ldr	r1, [r4, #32]
 800394a:	401a      	ands	r2, r3
 800394c:	d034      	beq.n	80039b8 <__sflush_r+0x9c>
 800394e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	075b      	lsls	r3, r3, #29
 8003954:	d506      	bpl.n	8003964 <__sflush_r+0x48>
 8003956:	6863      	ldr	r3, [r4, #4]
 8003958:	1ac0      	subs	r0, r0, r3
 800395a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <__sflush_r+0x48>
 8003960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003962:	1ac0      	subs	r0, r0, r3
 8003964:	0002      	movs	r2, r0
 8003966:	6a21      	ldr	r1, [r4, #32]
 8003968:	2300      	movs	r3, #0
 800396a:	0028      	movs	r0, r5
 800396c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800396e:	47b8      	blx	r7
 8003970:	89a1      	ldrh	r1, [r4, #12]
 8003972:	1c43      	adds	r3, r0, #1
 8003974:	d106      	bne.n	8003984 <__sflush_r+0x68>
 8003976:	682b      	ldr	r3, [r5, #0]
 8003978:	2b1d      	cmp	r3, #29
 800397a:	d830      	bhi.n	80039de <__sflush_r+0xc2>
 800397c:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <__sflush_r+0x110>)
 800397e:	40da      	lsrs	r2, r3
 8003980:	07d3      	lsls	r3, r2, #31
 8003982:	d52c      	bpl.n	80039de <__sflush_r+0xc2>
 8003984:	2300      	movs	r3, #0
 8003986:	6063      	str	r3, [r4, #4]
 8003988:	6923      	ldr	r3, [r4, #16]
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	04cb      	lsls	r3, r1, #19
 800398e:	d505      	bpl.n	800399c <__sflush_r+0x80>
 8003990:	1c43      	adds	r3, r0, #1
 8003992:	d102      	bne.n	800399a <__sflush_r+0x7e>
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d100      	bne.n	800399c <__sflush_r+0x80>
 800399a:	6560      	str	r0, [r4, #84]	; 0x54
 800399c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800399e:	602e      	str	r6, [r5, #0]
 80039a0:	2900      	cmp	r1, #0
 80039a2:	d0c7      	beq.n	8003934 <__sflush_r+0x18>
 80039a4:	0023      	movs	r3, r4
 80039a6:	3344      	adds	r3, #68	; 0x44
 80039a8:	4299      	cmp	r1, r3
 80039aa:	d002      	beq.n	80039b2 <__sflush_r+0x96>
 80039ac:	0028      	movs	r0, r5
 80039ae:	f000 f9ad 	bl	8003d0c <_free_r>
 80039b2:	2000      	movs	r0, #0
 80039b4:	6360      	str	r0, [r4, #52]	; 0x34
 80039b6:	e7be      	b.n	8003936 <__sflush_r+0x1a>
 80039b8:	2301      	movs	r3, #1
 80039ba:	0028      	movs	r0, r5
 80039bc:	47b8      	blx	r7
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	d1c6      	bne.n	8003950 <__sflush_r+0x34>
 80039c2:	682b      	ldr	r3, [r5, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0c3      	beq.n	8003950 <__sflush_r+0x34>
 80039c8:	2b1d      	cmp	r3, #29
 80039ca:	d001      	beq.n	80039d0 <__sflush_r+0xb4>
 80039cc:	2b16      	cmp	r3, #22
 80039ce:	d101      	bne.n	80039d4 <__sflush_r+0xb8>
 80039d0:	602e      	str	r6, [r5, #0]
 80039d2:	e7af      	b.n	8003934 <__sflush_r+0x18>
 80039d4:	2340      	movs	r3, #64	; 0x40
 80039d6:	89a2      	ldrh	r2, [r4, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	e7ab      	b.n	8003936 <__sflush_r+0x1a>
 80039de:	2340      	movs	r3, #64	; 0x40
 80039e0:	430b      	orrs	r3, r1
 80039e2:	2001      	movs	r0, #1
 80039e4:	81a3      	strh	r3, [r4, #12]
 80039e6:	4240      	negs	r0, r0
 80039e8:	e7a5      	b.n	8003936 <__sflush_r+0x1a>
 80039ea:	690f      	ldr	r7, [r1, #16]
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	d0a1      	beq.n	8003934 <__sflush_r+0x18>
 80039f0:	680b      	ldr	r3, [r1, #0]
 80039f2:	600f      	str	r7, [r1, #0]
 80039f4:	1bdb      	subs	r3, r3, r7
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	2300      	movs	r3, #0
 80039fa:	0792      	lsls	r2, r2, #30
 80039fc:	d100      	bne.n	8003a00 <__sflush_r+0xe4>
 80039fe:	694b      	ldr	r3, [r1, #20]
 8003a00:	60a3      	str	r3, [r4, #8]
 8003a02:	9b01      	ldr	r3, [sp, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	dc00      	bgt.n	8003a0a <__sflush_r+0xee>
 8003a08:	e794      	b.n	8003934 <__sflush_r+0x18>
 8003a0a:	9b01      	ldr	r3, [sp, #4]
 8003a0c:	003a      	movs	r2, r7
 8003a0e:	6a21      	ldr	r1, [r4, #32]
 8003a10:	0028      	movs	r0, r5
 8003a12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a14:	47b0      	blx	r6
 8003a16:	2800      	cmp	r0, #0
 8003a18:	dc03      	bgt.n	8003a22 <__sflush_r+0x106>
 8003a1a:	2340      	movs	r3, #64	; 0x40
 8003a1c:	89a2      	ldrh	r2, [r4, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	e7df      	b.n	80039e2 <__sflush_r+0xc6>
 8003a22:	9b01      	ldr	r3, [sp, #4]
 8003a24:	183f      	adds	r7, r7, r0
 8003a26:	1a1b      	subs	r3, r3, r0
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	e7ea      	b.n	8003a02 <__sflush_r+0xe6>
 8003a2c:	20400001 	.word	0x20400001

08003a30 <_fflush_r>:
 8003a30:	690b      	ldr	r3, [r1, #16]
 8003a32:	b570      	push	{r4, r5, r6, lr}
 8003a34:	0005      	movs	r5, r0
 8003a36:	000c      	movs	r4, r1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <_fflush_r+0x10>
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d004      	beq.n	8003a4e <_fflush_r+0x1e>
 8003a44:	6983      	ldr	r3, [r0, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <_fflush_r+0x1e>
 8003a4a:	f000 f85f 	bl	8003b0c <__sinit>
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <_fflush_r+0x4c>)
 8003a50:	429c      	cmp	r4, r3
 8003a52:	d109      	bne.n	8003a68 <_fflush_r+0x38>
 8003a54:	686c      	ldr	r4, [r5, #4]
 8003a56:	220c      	movs	r2, #12
 8003a58:	5ea3      	ldrsh	r3, [r4, r2]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ee      	beq.n	8003a3c <_fflush_r+0xc>
 8003a5e:	0021      	movs	r1, r4
 8003a60:	0028      	movs	r0, r5
 8003a62:	f7ff ff5b 	bl	800391c <__sflush_r>
 8003a66:	e7ea      	b.n	8003a3e <_fflush_r+0xe>
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <_fflush_r+0x50>)
 8003a6a:	429c      	cmp	r4, r3
 8003a6c:	d101      	bne.n	8003a72 <_fflush_r+0x42>
 8003a6e:	68ac      	ldr	r4, [r5, #8]
 8003a70:	e7f1      	b.n	8003a56 <_fflush_r+0x26>
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <_fflush_r+0x54>)
 8003a74:	429c      	cmp	r4, r3
 8003a76:	d1ee      	bne.n	8003a56 <_fflush_r+0x26>
 8003a78:	68ec      	ldr	r4, [r5, #12]
 8003a7a:	e7ec      	b.n	8003a56 <_fflush_r+0x26>
 8003a7c:	0800460c 	.word	0x0800460c
 8003a80:	0800462c 	.word	0x0800462c
 8003a84:	080045ec 	.word	0x080045ec

08003a88 <std>:
 8003a88:	2300      	movs	r3, #0
 8003a8a:	b510      	push	{r4, lr}
 8003a8c:	0004      	movs	r4, r0
 8003a8e:	6003      	str	r3, [r0, #0]
 8003a90:	6043      	str	r3, [r0, #4]
 8003a92:	6083      	str	r3, [r0, #8]
 8003a94:	8181      	strh	r1, [r0, #12]
 8003a96:	6643      	str	r3, [r0, #100]	; 0x64
 8003a98:	81c2      	strh	r2, [r0, #14]
 8003a9a:	6103      	str	r3, [r0, #16]
 8003a9c:	6143      	str	r3, [r0, #20]
 8003a9e:	6183      	str	r3, [r0, #24]
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	305c      	adds	r0, #92	; 0x5c
 8003aa6:	f7ff fde1 	bl	800366c <memset>
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <std+0x38>)
 8003aac:	6224      	str	r4, [r4, #32]
 8003aae:	6263      	str	r3, [r4, #36]	; 0x24
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <std+0x3c>)
 8003ab2:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <std+0x40>)
 8003ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ab8:	4b04      	ldr	r3, [pc, #16]	; (8003acc <std+0x44>)
 8003aba:	6323      	str	r3, [r4, #48]	; 0x30
 8003abc:	bd10      	pop	{r4, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	080043e9 	.word	0x080043e9
 8003ac4:	08004411 	.word	0x08004411
 8003ac8:	08004449 	.word	0x08004449
 8003acc:	08004475 	.word	0x08004475

08003ad0 <_cleanup_r>:
 8003ad0:	b510      	push	{r4, lr}
 8003ad2:	4902      	ldr	r1, [pc, #8]	; (8003adc <_cleanup_r+0xc>)
 8003ad4:	f000 f88c 	bl	8003bf0 <_fwalk_reent>
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	08003a31 	.word	0x08003a31

08003ae0 <__sfmoreglue>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	2568      	movs	r5, #104	; 0x68
 8003ae4:	1e4a      	subs	r2, r1, #1
 8003ae6:	4355      	muls	r5, r2
 8003ae8:	000e      	movs	r6, r1
 8003aea:	0029      	movs	r1, r5
 8003aec:	3174      	adds	r1, #116	; 0x74
 8003aee:	f000 f957 	bl	8003da0 <_malloc_r>
 8003af2:	1e04      	subs	r4, r0, #0
 8003af4:	d008      	beq.n	8003b08 <__sfmoreglue+0x28>
 8003af6:	2100      	movs	r1, #0
 8003af8:	002a      	movs	r2, r5
 8003afa:	6001      	str	r1, [r0, #0]
 8003afc:	6046      	str	r6, [r0, #4]
 8003afe:	300c      	adds	r0, #12
 8003b00:	60a0      	str	r0, [r4, #8]
 8003b02:	3268      	adds	r2, #104	; 0x68
 8003b04:	f7ff fdb2 	bl	800366c <memset>
 8003b08:	0020      	movs	r0, r4
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}

08003b0c <__sinit>:
 8003b0c:	6983      	ldr	r3, [r0, #24]
 8003b0e:	b513      	push	{r0, r1, r4, lr}
 8003b10:	0004      	movs	r4, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d128      	bne.n	8003b68 <__sinit+0x5c>
 8003b16:	6483      	str	r3, [r0, #72]	; 0x48
 8003b18:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003b1a:	6503      	str	r3, [r0, #80]	; 0x50
 8003b1c:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <__sinit+0x60>)
 8003b1e:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <__sinit+0x64>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6282      	str	r2, [r0, #40]	; 0x28
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	4298      	cmp	r0, r3
 8003b28:	d101      	bne.n	8003b2e <__sinit+0x22>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	6183      	str	r3, [r0, #24]
 8003b2e:	0020      	movs	r0, r4
 8003b30:	f000 f820 	bl	8003b74 <__sfp>
 8003b34:	6060      	str	r0, [r4, #4]
 8003b36:	0020      	movs	r0, r4
 8003b38:	f000 f81c 	bl	8003b74 <__sfp>
 8003b3c:	60a0      	str	r0, [r4, #8]
 8003b3e:	0020      	movs	r0, r4
 8003b40:	f000 f818 	bl	8003b74 <__sfp>
 8003b44:	2200      	movs	r2, #0
 8003b46:	60e0      	str	r0, [r4, #12]
 8003b48:	2104      	movs	r1, #4
 8003b4a:	6860      	ldr	r0, [r4, #4]
 8003b4c:	f7ff ff9c 	bl	8003a88 <std>
 8003b50:	2201      	movs	r2, #1
 8003b52:	2109      	movs	r1, #9
 8003b54:	68a0      	ldr	r0, [r4, #8]
 8003b56:	f7ff ff97 	bl	8003a88 <std>
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	2112      	movs	r1, #18
 8003b5e:	68e0      	ldr	r0, [r4, #12]
 8003b60:	f7ff ff92 	bl	8003a88 <std>
 8003b64:	2301      	movs	r3, #1
 8003b66:	61a3      	str	r3, [r4, #24]
 8003b68:	bd13      	pop	{r0, r1, r4, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	080045e8 	.word	0x080045e8
 8003b70:	08003ad1 	.word	0x08003ad1

08003b74 <__sfp>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <__sfp+0x74>)
 8003b78:	0007      	movs	r7, r0
 8003b7a:	681e      	ldr	r6, [r3, #0]
 8003b7c:	69b3      	ldr	r3, [r6, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <__sfp+0x14>
 8003b82:	0030      	movs	r0, r6
 8003b84:	f7ff ffc2 	bl	8003b0c <__sinit>
 8003b88:	3648      	adds	r6, #72	; 0x48
 8003b8a:	68b4      	ldr	r4, [r6, #8]
 8003b8c:	6873      	ldr	r3, [r6, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	d504      	bpl.n	8003b9c <__sfp+0x28>
 8003b92:	6833      	ldr	r3, [r6, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d007      	beq.n	8003ba8 <__sfp+0x34>
 8003b98:	6836      	ldr	r6, [r6, #0]
 8003b9a:	e7f6      	b.n	8003b8a <__sfp+0x16>
 8003b9c:	220c      	movs	r2, #12
 8003b9e:	5ea5      	ldrsh	r5, [r4, r2]
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	d00d      	beq.n	8003bc0 <__sfp+0x4c>
 8003ba4:	3468      	adds	r4, #104	; 0x68
 8003ba6:	e7f2      	b.n	8003b8e <__sfp+0x1a>
 8003ba8:	2104      	movs	r1, #4
 8003baa:	0038      	movs	r0, r7
 8003bac:	f7ff ff98 	bl	8003ae0 <__sfmoreglue>
 8003bb0:	6030      	str	r0, [r6, #0]
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d1f0      	bne.n	8003b98 <__sfp+0x24>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	0004      	movs	r4, r0
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	0020      	movs	r0, r4
 8003bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc0:	0020      	movs	r0, r4
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <__sfp+0x78>)
 8003bc4:	6665      	str	r5, [r4, #100]	; 0x64
 8003bc6:	6025      	str	r5, [r4, #0]
 8003bc8:	6065      	str	r5, [r4, #4]
 8003bca:	60a5      	str	r5, [r4, #8]
 8003bcc:	60e3      	str	r3, [r4, #12]
 8003bce:	6125      	str	r5, [r4, #16]
 8003bd0:	6165      	str	r5, [r4, #20]
 8003bd2:	61a5      	str	r5, [r4, #24]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	0029      	movs	r1, r5
 8003bd8:	305c      	adds	r0, #92	; 0x5c
 8003bda:	f7ff fd47 	bl	800366c <memset>
 8003bde:	6365      	str	r5, [r4, #52]	; 0x34
 8003be0:	63a5      	str	r5, [r4, #56]	; 0x38
 8003be2:	64a5      	str	r5, [r4, #72]	; 0x48
 8003be4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003be6:	e7e9      	b.n	8003bbc <__sfp+0x48>
 8003be8:	080045e8 	.word	0x080045e8
 8003bec:	ffff0001 	.word	0xffff0001

08003bf0 <_fwalk_reent>:
 8003bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bf2:	0004      	movs	r4, r0
 8003bf4:	0007      	movs	r7, r0
 8003bf6:	2600      	movs	r6, #0
 8003bf8:	9101      	str	r1, [sp, #4]
 8003bfa:	3448      	adds	r4, #72	; 0x48
 8003bfc:	2c00      	cmp	r4, #0
 8003bfe:	d101      	bne.n	8003c04 <_fwalk_reent+0x14>
 8003c00:	0030      	movs	r0, r6
 8003c02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	68a5      	ldr	r5, [r4, #8]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	9b00      	ldr	r3, [sp, #0]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	d501      	bpl.n	8003c16 <_fwalk_reent+0x26>
 8003c12:	6824      	ldr	r4, [r4, #0]
 8003c14:	e7f2      	b.n	8003bfc <_fwalk_reent+0xc>
 8003c16:	89ab      	ldrh	r3, [r5, #12]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d908      	bls.n	8003c2e <_fwalk_reent+0x3e>
 8003c1c:	220e      	movs	r2, #14
 8003c1e:	5eab      	ldrsh	r3, [r5, r2]
 8003c20:	3301      	adds	r3, #1
 8003c22:	d004      	beq.n	8003c2e <_fwalk_reent+0x3e>
 8003c24:	0029      	movs	r1, r5
 8003c26:	0038      	movs	r0, r7
 8003c28:	9b01      	ldr	r3, [sp, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	4306      	orrs	r6, r0
 8003c2e:	3568      	adds	r5, #104	; 0x68
 8003c30:	e7eb      	b.n	8003c0a <_fwalk_reent+0x1a>
	...

08003c34 <__swhatbuf_r>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	000e      	movs	r6, r1
 8003c38:	001d      	movs	r5, r3
 8003c3a:	230e      	movs	r3, #14
 8003c3c:	5ec9      	ldrsh	r1, [r1, r3]
 8003c3e:	b096      	sub	sp, #88	; 0x58
 8003c40:	0014      	movs	r4, r2
 8003c42:	2900      	cmp	r1, #0
 8003c44:	da07      	bge.n	8003c56 <__swhatbuf_r+0x22>
 8003c46:	2300      	movs	r3, #0
 8003c48:	602b      	str	r3, [r5, #0]
 8003c4a:	89b3      	ldrh	r3, [r6, #12]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	d411      	bmi.n	8003c74 <__swhatbuf_r+0x40>
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	e00f      	b.n	8003c76 <__swhatbuf_r+0x42>
 8003c56:	466a      	mov	r2, sp
 8003c58:	f000 fc38 	bl	80044cc <_fstat_r>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	dbf2      	blt.n	8003c46 <__swhatbuf_r+0x12>
 8003c60:	22f0      	movs	r2, #240	; 0xf0
 8003c62:	9b01      	ldr	r3, [sp, #4]
 8003c64:	0212      	lsls	r2, r2, #8
 8003c66:	4013      	ands	r3, r2
 8003c68:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <__swhatbuf_r+0x4c>)
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	425a      	negs	r2, r3
 8003c6e:	4153      	adcs	r3, r2
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	e7ed      	b.n	8003c50 <__swhatbuf_r+0x1c>
 8003c74:	2340      	movs	r3, #64	; 0x40
 8003c76:	2000      	movs	r0, #0
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	b016      	add	sp, #88	; 0x58
 8003c7c:	bd70      	pop	{r4, r5, r6, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	ffffe000 	.word	0xffffe000

08003c84 <__smakebuf_r>:
 8003c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c86:	2602      	movs	r6, #2
 8003c88:	898b      	ldrh	r3, [r1, #12]
 8003c8a:	0005      	movs	r5, r0
 8003c8c:	000c      	movs	r4, r1
 8003c8e:	4233      	tst	r3, r6
 8003c90:	d006      	beq.n	8003ca0 <__smakebuf_r+0x1c>
 8003c92:	0023      	movs	r3, r4
 8003c94:	3347      	adds	r3, #71	; 0x47
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	6123      	str	r3, [r4, #16]
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	6163      	str	r3, [r4, #20]
 8003c9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003ca0:	ab01      	add	r3, sp, #4
 8003ca2:	466a      	mov	r2, sp
 8003ca4:	f7ff ffc6 	bl	8003c34 <__swhatbuf_r>
 8003ca8:	9900      	ldr	r1, [sp, #0]
 8003caa:	0007      	movs	r7, r0
 8003cac:	0028      	movs	r0, r5
 8003cae:	f000 f877 	bl	8003da0 <_malloc_r>
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d108      	bne.n	8003cc8 <__smakebuf_r+0x44>
 8003cb6:	220c      	movs	r2, #12
 8003cb8:	5ea3      	ldrsh	r3, [r4, r2]
 8003cba:	059a      	lsls	r2, r3, #22
 8003cbc:	d4ef      	bmi.n	8003c9e <__smakebuf_r+0x1a>
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	431e      	orrs	r6, r3
 8003cc4:	81a6      	strh	r6, [r4, #12]
 8003cc6:	e7e4      	b.n	8003c92 <__smakebuf_r+0xe>
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <__smakebuf_r+0x84>)
 8003cca:	62ab      	str	r3, [r5, #40]	; 0x28
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	89a2      	ldrh	r2, [r4, #12]
 8003cd0:	6020      	str	r0, [r4, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	81a3      	strh	r3, [r4, #12]
 8003cd6:	9b00      	ldr	r3, [sp, #0]
 8003cd8:	6120      	str	r0, [r4, #16]
 8003cda:	6163      	str	r3, [r4, #20]
 8003cdc:	9b01      	ldr	r3, [sp, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <__smakebuf_r+0x7a>
 8003ce2:	230e      	movs	r3, #14
 8003ce4:	5ee1      	ldrsh	r1, [r4, r3]
 8003ce6:	0028      	movs	r0, r5
 8003ce8:	f000 fc02 	bl	80044f0 <_isatty_r>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d006      	beq.n	8003cfe <__smakebuf_r+0x7a>
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	4393      	bics	r3, r2
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	89a0      	ldrh	r0, [r4, #12]
 8003d00:	4338      	orrs	r0, r7
 8003d02:	81a0      	strh	r0, [r4, #12]
 8003d04:	e7cb      	b.n	8003c9e <__smakebuf_r+0x1a>
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	08003ad1 	.word	0x08003ad1

08003d0c <_free_r>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	0005      	movs	r5, r0
 8003d10:	2900      	cmp	r1, #0
 8003d12:	d010      	beq.n	8003d36 <_free_r+0x2a>
 8003d14:	1f0c      	subs	r4, r1, #4
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	da00      	bge.n	8003d1e <_free_r+0x12>
 8003d1c:	18e4      	adds	r4, r4, r3
 8003d1e:	0028      	movs	r0, r5
 8003d20:	f000 fc17 	bl	8004552 <__malloc_lock>
 8003d24:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <_free_r+0x90>)
 8003d26:	6813      	ldr	r3, [r2, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <_free_r+0x2c>
 8003d2c:	6063      	str	r3, [r4, #4]
 8003d2e:	6014      	str	r4, [r2, #0]
 8003d30:	0028      	movs	r0, r5
 8003d32:	f000 fc0f 	bl	8004554 <__malloc_unlock>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	42a3      	cmp	r3, r4
 8003d3a:	d909      	bls.n	8003d50 <_free_r+0x44>
 8003d3c:	6821      	ldr	r1, [r4, #0]
 8003d3e:	1860      	adds	r0, r4, r1
 8003d40:	4283      	cmp	r3, r0
 8003d42:	d1f3      	bne.n	8003d2c <_free_r+0x20>
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	1841      	adds	r1, r0, r1
 8003d4a:	6021      	str	r1, [r4, #0]
 8003d4c:	e7ee      	b.n	8003d2c <_free_r+0x20>
 8003d4e:	0013      	movs	r3, r2
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	2a00      	cmp	r2, #0
 8003d54:	d001      	beq.n	8003d5a <_free_r+0x4e>
 8003d56:	42a2      	cmp	r2, r4
 8003d58:	d9f9      	bls.n	8003d4e <_free_r+0x42>
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	1858      	adds	r0, r3, r1
 8003d5e:	42a0      	cmp	r0, r4
 8003d60:	d10b      	bne.n	8003d7a <_free_r+0x6e>
 8003d62:	6820      	ldr	r0, [r4, #0]
 8003d64:	1809      	adds	r1, r1, r0
 8003d66:	1858      	adds	r0, r3, r1
 8003d68:	6019      	str	r1, [r3, #0]
 8003d6a:	4282      	cmp	r2, r0
 8003d6c:	d1e0      	bne.n	8003d30 <_free_r+0x24>
 8003d6e:	6810      	ldr	r0, [r2, #0]
 8003d70:	6852      	ldr	r2, [r2, #4]
 8003d72:	1841      	adds	r1, r0, r1
 8003d74:	6019      	str	r1, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	e7da      	b.n	8003d30 <_free_r+0x24>
 8003d7a:	42a0      	cmp	r0, r4
 8003d7c:	d902      	bls.n	8003d84 <_free_r+0x78>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	602b      	str	r3, [r5, #0]
 8003d82:	e7d5      	b.n	8003d30 <_free_r+0x24>
 8003d84:	6821      	ldr	r1, [r4, #0]
 8003d86:	1860      	adds	r0, r4, r1
 8003d88:	4282      	cmp	r2, r0
 8003d8a:	d103      	bne.n	8003d94 <_free_r+0x88>
 8003d8c:	6810      	ldr	r0, [r2, #0]
 8003d8e:	6852      	ldr	r2, [r2, #4]
 8003d90:	1841      	adds	r1, r0, r1
 8003d92:	6021      	str	r1, [r4, #0]
 8003d94:	6062      	str	r2, [r4, #4]
 8003d96:	605c      	str	r4, [r3, #4]
 8003d98:	e7ca      	b.n	8003d30 <_free_r+0x24>
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	20000090 	.word	0x20000090

08003da0 <_malloc_r>:
 8003da0:	2303      	movs	r3, #3
 8003da2:	b570      	push	{r4, r5, r6, lr}
 8003da4:	1ccd      	adds	r5, r1, #3
 8003da6:	439d      	bics	r5, r3
 8003da8:	3508      	adds	r5, #8
 8003daa:	0006      	movs	r6, r0
 8003dac:	2d0c      	cmp	r5, #12
 8003dae:	d21e      	bcs.n	8003dee <_malloc_r+0x4e>
 8003db0:	250c      	movs	r5, #12
 8003db2:	42a9      	cmp	r1, r5
 8003db4:	d81d      	bhi.n	8003df2 <_malloc_r+0x52>
 8003db6:	0030      	movs	r0, r6
 8003db8:	f000 fbcb 	bl	8004552 <__malloc_lock>
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <_malloc_r+0xb4>)
 8003dbe:	6814      	ldr	r4, [r2, #0]
 8003dc0:	0021      	movs	r1, r4
 8003dc2:	2900      	cmp	r1, #0
 8003dc4:	d119      	bne.n	8003dfa <_malloc_r+0x5a>
 8003dc6:	4c24      	ldr	r4, [pc, #144]	; (8003e58 <_malloc_r+0xb8>)
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <_malloc_r+0x36>
 8003dce:	0030      	movs	r0, r6
 8003dd0:	f000 faf8 	bl	80043c4 <_sbrk_r>
 8003dd4:	6020      	str	r0, [r4, #0]
 8003dd6:	0029      	movs	r1, r5
 8003dd8:	0030      	movs	r0, r6
 8003dda:	f000 faf3 	bl	80043c4 <_sbrk_r>
 8003dde:	1c43      	adds	r3, r0, #1
 8003de0:	d12b      	bne.n	8003e3a <_malloc_r+0x9a>
 8003de2:	230c      	movs	r3, #12
 8003de4:	0030      	movs	r0, r6
 8003de6:	6033      	str	r3, [r6, #0]
 8003de8:	f000 fbb4 	bl	8004554 <__malloc_unlock>
 8003dec:	e003      	b.n	8003df6 <_malloc_r+0x56>
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	dadf      	bge.n	8003db2 <_malloc_r+0x12>
 8003df2:	230c      	movs	r3, #12
 8003df4:	6033      	str	r3, [r6, #0]
 8003df6:	2000      	movs	r0, #0
 8003df8:	bd70      	pop	{r4, r5, r6, pc}
 8003dfa:	680b      	ldr	r3, [r1, #0]
 8003dfc:	1b5b      	subs	r3, r3, r5
 8003dfe:	d419      	bmi.n	8003e34 <_malloc_r+0x94>
 8003e00:	2b0b      	cmp	r3, #11
 8003e02:	d903      	bls.n	8003e0c <_malloc_r+0x6c>
 8003e04:	600b      	str	r3, [r1, #0]
 8003e06:	18cc      	adds	r4, r1, r3
 8003e08:	6025      	str	r5, [r4, #0]
 8003e0a:	e003      	b.n	8003e14 <_malloc_r+0x74>
 8003e0c:	684b      	ldr	r3, [r1, #4]
 8003e0e:	428c      	cmp	r4, r1
 8003e10:	d10d      	bne.n	8003e2e <_malloc_r+0x8e>
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	0030      	movs	r0, r6
 8003e16:	f000 fb9d 	bl	8004554 <__malloc_unlock>
 8003e1a:	0020      	movs	r0, r4
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	300b      	adds	r0, #11
 8003e20:	1d23      	adds	r3, r4, #4
 8003e22:	4390      	bics	r0, r2
 8003e24:	1ac3      	subs	r3, r0, r3
 8003e26:	d0e7      	beq.n	8003df8 <_malloc_r+0x58>
 8003e28:	425a      	negs	r2, r3
 8003e2a:	50e2      	str	r2, [r4, r3]
 8003e2c:	e7e4      	b.n	8003df8 <_malloc_r+0x58>
 8003e2e:	6063      	str	r3, [r4, #4]
 8003e30:	000c      	movs	r4, r1
 8003e32:	e7ef      	b.n	8003e14 <_malloc_r+0x74>
 8003e34:	000c      	movs	r4, r1
 8003e36:	6849      	ldr	r1, [r1, #4]
 8003e38:	e7c3      	b.n	8003dc2 <_malloc_r+0x22>
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	1cc4      	adds	r4, r0, #3
 8003e3e:	439c      	bics	r4, r3
 8003e40:	42a0      	cmp	r0, r4
 8003e42:	d0e1      	beq.n	8003e08 <_malloc_r+0x68>
 8003e44:	1a21      	subs	r1, r4, r0
 8003e46:	0030      	movs	r0, r6
 8003e48:	f000 fabc 	bl	80043c4 <_sbrk_r>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d1db      	bne.n	8003e08 <_malloc_r+0x68>
 8003e50:	e7c7      	b.n	8003de2 <_malloc_r+0x42>
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	20000090 	.word	0x20000090
 8003e58:	20000094 	.word	0x20000094

08003e5c <__sfputc_r>:
 8003e5c:	6893      	ldr	r3, [r2, #8]
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	3b01      	subs	r3, #1
 8003e62:	6093      	str	r3, [r2, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	da04      	bge.n	8003e72 <__sfputc_r+0x16>
 8003e68:	6994      	ldr	r4, [r2, #24]
 8003e6a:	42a3      	cmp	r3, r4
 8003e6c:	db07      	blt.n	8003e7e <__sfputc_r+0x22>
 8003e6e:	290a      	cmp	r1, #10
 8003e70:	d005      	beq.n	8003e7e <__sfputc_r+0x22>
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	1c58      	adds	r0, r3, #1
 8003e76:	6010      	str	r0, [r2, #0]
 8003e78:	7019      	strb	r1, [r3, #0]
 8003e7a:	0008      	movs	r0, r1
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	f7ff fc81 	bl	8003784 <__swbuf_r>
 8003e82:	0001      	movs	r1, r0
 8003e84:	e7f9      	b.n	8003e7a <__sfputc_r+0x1e>

08003e86 <__sfputs_r>:
 8003e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e88:	0006      	movs	r6, r0
 8003e8a:	000f      	movs	r7, r1
 8003e8c:	0014      	movs	r4, r2
 8003e8e:	18d5      	adds	r5, r2, r3
 8003e90:	42ac      	cmp	r4, r5
 8003e92:	d101      	bne.n	8003e98 <__sfputs_r+0x12>
 8003e94:	2000      	movs	r0, #0
 8003e96:	e007      	b.n	8003ea8 <__sfputs_r+0x22>
 8003e98:	7821      	ldrb	r1, [r4, #0]
 8003e9a:	003a      	movs	r2, r7
 8003e9c:	0030      	movs	r0, r6
 8003e9e:	f7ff ffdd 	bl	8003e5c <__sfputc_r>
 8003ea2:	3401      	adds	r4, #1
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d1f3      	bne.n	8003e90 <__sfputs_r+0xa>
 8003ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eac <_vfiprintf_r>:
 8003eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eae:	b0a1      	sub	sp, #132	; 0x84
 8003eb0:	9003      	str	r0, [sp, #12]
 8003eb2:	000f      	movs	r7, r1
 8003eb4:	0016      	movs	r6, r2
 8003eb6:	001d      	movs	r5, r3
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d005      	beq.n	8003ec8 <_vfiprintf_r+0x1c>
 8003ebc:	6983      	ldr	r3, [r0, #24]
 8003ebe:	9305      	str	r3, [sp, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <_vfiprintf_r+0x1c>
 8003ec4:	f7ff fe22 	bl	8003b0c <__sinit>
 8003ec8:	4b7b      	ldr	r3, [pc, #492]	; (80040b8 <_vfiprintf_r+0x20c>)
 8003eca:	429f      	cmp	r7, r3
 8003ecc:	d15c      	bne.n	8003f88 <_vfiprintf_r+0xdc>
 8003ece:	9b03      	ldr	r3, [sp, #12]
 8003ed0:	685f      	ldr	r7, [r3, #4]
 8003ed2:	89bb      	ldrh	r3, [r7, #12]
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	d563      	bpl.n	8003fa0 <_vfiprintf_r+0xf4>
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d060      	beq.n	8003fa0 <_vfiprintf_r+0xf4>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	ac08      	add	r4, sp, #32
 8003ee2:	6163      	str	r3, [r4, #20]
 8003ee4:	3320      	adds	r3, #32
 8003ee6:	7663      	strb	r3, [r4, #25]
 8003ee8:	3310      	adds	r3, #16
 8003eea:	76a3      	strb	r3, [r4, #26]
 8003eec:	9507      	str	r5, [sp, #28]
 8003eee:	0035      	movs	r5, r6
 8003ef0:	782b      	ldrb	r3, [r5, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <_vfiprintf_r+0x4e>
 8003ef6:	2b25      	cmp	r3, #37	; 0x25
 8003ef8:	d15c      	bne.n	8003fb4 <_vfiprintf_r+0x108>
 8003efa:	1bab      	subs	r3, r5, r6
 8003efc:	9305      	str	r3, [sp, #20]
 8003efe:	d00c      	beq.n	8003f1a <_vfiprintf_r+0x6e>
 8003f00:	0032      	movs	r2, r6
 8003f02:	0039      	movs	r1, r7
 8003f04:	9803      	ldr	r0, [sp, #12]
 8003f06:	f7ff ffbe 	bl	8003e86 <__sfputs_r>
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	d100      	bne.n	8003f10 <_vfiprintf_r+0x64>
 8003f0e:	e0c4      	b.n	800409a <_vfiprintf_r+0x1ee>
 8003f10:	6962      	ldr	r2, [r4, #20]
 8003f12:	9b05      	ldr	r3, [sp, #20]
 8003f14:	4694      	mov	ip, r2
 8003f16:	4463      	add	r3, ip
 8003f18:	6163      	str	r3, [r4, #20]
 8003f1a:	782b      	ldrb	r3, [r5, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d100      	bne.n	8003f22 <_vfiprintf_r+0x76>
 8003f20:	e0bb      	b.n	800409a <_vfiprintf_r+0x1ee>
 8003f22:	2201      	movs	r2, #1
 8003f24:	2300      	movs	r3, #0
 8003f26:	4252      	negs	r2, r2
 8003f28:	6062      	str	r2, [r4, #4]
 8003f2a:	a904      	add	r1, sp, #16
 8003f2c:	3254      	adds	r2, #84	; 0x54
 8003f2e:	1852      	adds	r2, r2, r1
 8003f30:	1c6e      	adds	r6, r5, #1
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	60e3      	str	r3, [r4, #12]
 8003f36:	60a3      	str	r3, [r4, #8]
 8003f38:	7013      	strb	r3, [r2, #0]
 8003f3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f3c:	7831      	ldrb	r1, [r6, #0]
 8003f3e:	2205      	movs	r2, #5
 8003f40:	485e      	ldr	r0, [pc, #376]	; (80040bc <_vfiprintf_r+0x210>)
 8003f42:	f000 fafb 	bl	800453c <memchr>
 8003f46:	1c75      	adds	r5, r6, #1
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d135      	bne.n	8003fb8 <_vfiprintf_r+0x10c>
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	06d3      	lsls	r3, r2, #27
 8003f50:	d504      	bpl.n	8003f5c <_vfiprintf_r+0xb0>
 8003f52:	2353      	movs	r3, #83	; 0x53
 8003f54:	a904      	add	r1, sp, #16
 8003f56:	185b      	adds	r3, r3, r1
 8003f58:	2120      	movs	r1, #32
 8003f5a:	7019      	strb	r1, [r3, #0]
 8003f5c:	0713      	lsls	r3, r2, #28
 8003f5e:	d504      	bpl.n	8003f6a <_vfiprintf_r+0xbe>
 8003f60:	2353      	movs	r3, #83	; 0x53
 8003f62:	a904      	add	r1, sp, #16
 8003f64:	185b      	adds	r3, r3, r1
 8003f66:	212b      	movs	r1, #43	; 0x2b
 8003f68:	7019      	strb	r1, [r3, #0]
 8003f6a:	7833      	ldrb	r3, [r6, #0]
 8003f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f6e:	d02c      	beq.n	8003fca <_vfiprintf_r+0x11e>
 8003f70:	0035      	movs	r5, r6
 8003f72:	2100      	movs	r1, #0
 8003f74:	200a      	movs	r0, #10
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	782a      	ldrb	r2, [r5, #0]
 8003f7a:	1c6e      	adds	r6, r5, #1
 8003f7c:	3a30      	subs	r2, #48	; 0x30
 8003f7e:	2a09      	cmp	r2, #9
 8003f80:	d964      	bls.n	800404c <_vfiprintf_r+0x1a0>
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d02e      	beq.n	8003fe4 <_vfiprintf_r+0x138>
 8003f86:	e026      	b.n	8003fd6 <_vfiprintf_r+0x12a>
 8003f88:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <_vfiprintf_r+0x214>)
 8003f8a:	429f      	cmp	r7, r3
 8003f8c:	d102      	bne.n	8003f94 <_vfiprintf_r+0xe8>
 8003f8e:	9b03      	ldr	r3, [sp, #12]
 8003f90:	689f      	ldr	r7, [r3, #8]
 8003f92:	e79e      	b.n	8003ed2 <_vfiprintf_r+0x26>
 8003f94:	4b4b      	ldr	r3, [pc, #300]	; (80040c4 <_vfiprintf_r+0x218>)
 8003f96:	429f      	cmp	r7, r3
 8003f98:	d19b      	bne.n	8003ed2 <_vfiprintf_r+0x26>
 8003f9a:	9b03      	ldr	r3, [sp, #12]
 8003f9c:	68df      	ldr	r7, [r3, #12]
 8003f9e:	e798      	b.n	8003ed2 <_vfiprintf_r+0x26>
 8003fa0:	0039      	movs	r1, r7
 8003fa2:	9803      	ldr	r0, [sp, #12]
 8003fa4:	f7ff fc44 	bl	8003830 <__swsetup_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d098      	beq.n	8003ede <_vfiprintf_r+0x32>
 8003fac:	2001      	movs	r0, #1
 8003fae:	4240      	negs	r0, r0
 8003fb0:	b021      	add	sp, #132	; 0x84
 8003fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	e79b      	b.n	8003ef0 <_vfiprintf_r+0x44>
 8003fb8:	4b40      	ldr	r3, [pc, #256]	; (80040bc <_vfiprintf_r+0x210>)
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	1ac0      	subs	r0, r0, r3
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4083      	lsls	r3, r0
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	002e      	movs	r6, r5
 8003fc8:	e7b8      	b.n	8003f3c <_vfiprintf_r+0x90>
 8003fca:	9b07      	ldr	r3, [sp, #28]
 8003fcc:	1d19      	adds	r1, r3, #4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	9107      	str	r1, [sp, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	db01      	blt.n	8003fda <_vfiprintf_r+0x12e>
 8003fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fd8:	e004      	b.n	8003fe4 <_vfiprintf_r+0x138>
 8003fda:	425b      	negs	r3, r3
 8003fdc:	60e3      	str	r3, [r4, #12]
 8003fde:	2302      	movs	r3, #2
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	782b      	ldrb	r3, [r5, #0]
 8003fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe8:	d10a      	bne.n	8004000 <_vfiprintf_r+0x154>
 8003fea:	786b      	ldrb	r3, [r5, #1]
 8003fec:	2b2a      	cmp	r3, #42	; 0x2a
 8003fee:	d135      	bne.n	800405c <_vfiprintf_r+0x1b0>
 8003ff0:	9b07      	ldr	r3, [sp, #28]
 8003ff2:	3502      	adds	r5, #2
 8003ff4:	1d1a      	adds	r2, r3, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	9207      	str	r2, [sp, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	db2b      	blt.n	8004056 <_vfiprintf_r+0x1aa>
 8003ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8004000:	4e31      	ldr	r6, [pc, #196]	; (80040c8 <_vfiprintf_r+0x21c>)
 8004002:	7829      	ldrb	r1, [r5, #0]
 8004004:	2203      	movs	r2, #3
 8004006:	0030      	movs	r0, r6
 8004008:	f000 fa98 	bl	800453c <memchr>
 800400c:	2800      	cmp	r0, #0
 800400e:	d006      	beq.n	800401e <_vfiprintf_r+0x172>
 8004010:	2340      	movs	r3, #64	; 0x40
 8004012:	1b80      	subs	r0, r0, r6
 8004014:	4083      	lsls	r3, r0
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	3501      	adds	r5, #1
 800401a:	4313      	orrs	r3, r2
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	7829      	ldrb	r1, [r5, #0]
 8004020:	2206      	movs	r2, #6
 8004022:	482a      	ldr	r0, [pc, #168]	; (80040cc <_vfiprintf_r+0x220>)
 8004024:	1c6e      	adds	r6, r5, #1
 8004026:	7621      	strb	r1, [r4, #24]
 8004028:	f000 fa88 	bl	800453c <memchr>
 800402c:	2800      	cmp	r0, #0
 800402e:	d03a      	beq.n	80040a6 <_vfiprintf_r+0x1fa>
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <_vfiprintf_r+0x224>)
 8004032:	2b00      	cmp	r3, #0
 8004034:	d125      	bne.n	8004082 <_vfiprintf_r+0x1d6>
 8004036:	2207      	movs	r2, #7
 8004038:	9b07      	ldr	r3, [sp, #28]
 800403a:	3307      	adds	r3, #7
 800403c:	4393      	bics	r3, r2
 800403e:	3308      	adds	r3, #8
 8004040:	9307      	str	r3, [sp, #28]
 8004042:	6963      	ldr	r3, [r4, #20]
 8004044:	9a04      	ldr	r2, [sp, #16]
 8004046:	189b      	adds	r3, r3, r2
 8004048:	6163      	str	r3, [r4, #20]
 800404a:	e750      	b.n	8003eee <_vfiprintf_r+0x42>
 800404c:	4343      	muls	r3, r0
 800404e:	2101      	movs	r1, #1
 8004050:	189b      	adds	r3, r3, r2
 8004052:	0035      	movs	r5, r6
 8004054:	e790      	b.n	8003f78 <_vfiprintf_r+0xcc>
 8004056:	2301      	movs	r3, #1
 8004058:	425b      	negs	r3, r3
 800405a:	e7d0      	b.n	8003ffe <_vfiprintf_r+0x152>
 800405c:	2300      	movs	r3, #0
 800405e:	200a      	movs	r0, #10
 8004060:	001a      	movs	r2, r3
 8004062:	3501      	adds	r5, #1
 8004064:	6063      	str	r3, [r4, #4]
 8004066:	7829      	ldrb	r1, [r5, #0]
 8004068:	1c6e      	adds	r6, r5, #1
 800406a:	3930      	subs	r1, #48	; 0x30
 800406c:	2909      	cmp	r1, #9
 800406e:	d903      	bls.n	8004078 <_vfiprintf_r+0x1cc>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0c5      	beq.n	8004000 <_vfiprintf_r+0x154>
 8004074:	9209      	str	r2, [sp, #36]	; 0x24
 8004076:	e7c3      	b.n	8004000 <_vfiprintf_r+0x154>
 8004078:	4342      	muls	r2, r0
 800407a:	2301      	movs	r3, #1
 800407c:	1852      	adds	r2, r2, r1
 800407e:	0035      	movs	r5, r6
 8004080:	e7f1      	b.n	8004066 <_vfiprintf_r+0x1ba>
 8004082:	ab07      	add	r3, sp, #28
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	003a      	movs	r2, r7
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <_vfiprintf_r+0x228>)
 800408a:	0021      	movs	r1, r4
 800408c:	9803      	ldr	r0, [sp, #12]
 800408e:	e000      	b.n	8004092 <_vfiprintf_r+0x1e6>
 8004090:	bf00      	nop
 8004092:	9004      	str	r0, [sp, #16]
 8004094:	9b04      	ldr	r3, [sp, #16]
 8004096:	3301      	adds	r3, #1
 8004098:	d1d3      	bne.n	8004042 <_vfiprintf_r+0x196>
 800409a:	89bb      	ldrh	r3, [r7, #12]
 800409c:	065b      	lsls	r3, r3, #25
 800409e:	d500      	bpl.n	80040a2 <_vfiprintf_r+0x1f6>
 80040a0:	e784      	b.n	8003fac <_vfiprintf_r+0x100>
 80040a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80040a4:	e784      	b.n	8003fb0 <_vfiprintf_r+0x104>
 80040a6:	ab07      	add	r3, sp, #28
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	003a      	movs	r2, r7
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <_vfiprintf_r+0x228>)
 80040ae:	0021      	movs	r1, r4
 80040b0:	9803      	ldr	r0, [sp, #12]
 80040b2:	f000 f87f 	bl	80041b4 <_printf_i>
 80040b6:	e7ec      	b.n	8004092 <_vfiprintf_r+0x1e6>
 80040b8:	0800460c 	.word	0x0800460c
 80040bc:	0800464c 	.word	0x0800464c
 80040c0:	0800462c 	.word	0x0800462c
 80040c4:	080045ec 	.word	0x080045ec
 80040c8:	08004652 	.word	0x08004652
 80040cc:	08004656 	.word	0x08004656
 80040d0:	00000000 	.word	0x00000000
 80040d4:	08003e87 	.word	0x08003e87

080040d8 <_printf_common>:
 80040d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040da:	0015      	movs	r5, r2
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	688a      	ldr	r2, [r1, #8]
 80040e0:	690b      	ldr	r3, [r1, #16]
 80040e2:	9000      	str	r0, [sp, #0]
 80040e4:	000c      	movs	r4, r1
 80040e6:	4293      	cmp	r3, r2
 80040e8:	da00      	bge.n	80040ec <_printf_common+0x14>
 80040ea:	0013      	movs	r3, r2
 80040ec:	0022      	movs	r2, r4
 80040ee:	602b      	str	r3, [r5, #0]
 80040f0:	3243      	adds	r2, #67	; 0x43
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	2a00      	cmp	r2, #0
 80040f6:	d001      	beq.n	80040fc <_printf_common+0x24>
 80040f8:	3301      	adds	r3, #1
 80040fa:	602b      	str	r3, [r5, #0]
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	069b      	lsls	r3, r3, #26
 8004100:	d502      	bpl.n	8004108 <_printf_common+0x30>
 8004102:	682b      	ldr	r3, [r5, #0]
 8004104:	3302      	adds	r3, #2
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	2706      	movs	r7, #6
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	401f      	ands	r7, r3
 800410e:	d027      	beq.n	8004160 <_printf_common+0x88>
 8004110:	0023      	movs	r3, r4
 8004112:	3343      	adds	r3, #67	; 0x43
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	1e5a      	subs	r2, r3, #1
 8004118:	4193      	sbcs	r3, r2
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	0692      	lsls	r2, r2, #26
 800411e:	d430      	bmi.n	8004182 <_printf_common+0xaa>
 8004120:	0022      	movs	r2, r4
 8004122:	9901      	ldr	r1, [sp, #4]
 8004124:	3243      	adds	r2, #67	; 0x43
 8004126:	9800      	ldr	r0, [sp, #0]
 8004128:	9e08      	ldr	r6, [sp, #32]
 800412a:	47b0      	blx	r6
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d025      	beq.n	800417c <_printf_common+0xa4>
 8004130:	2306      	movs	r3, #6
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	682a      	ldr	r2, [r5, #0]
 8004136:	68e1      	ldr	r1, [r4, #12]
 8004138:	4003      	ands	r3, r0
 800413a:	2500      	movs	r5, #0
 800413c:	2b04      	cmp	r3, #4
 800413e:	d103      	bne.n	8004148 <_printf_common+0x70>
 8004140:	1a8d      	subs	r5, r1, r2
 8004142:	43eb      	mvns	r3, r5
 8004144:	17db      	asrs	r3, r3, #31
 8004146:	401d      	ands	r5, r3
 8004148:	68a3      	ldr	r3, [r4, #8]
 800414a:	6922      	ldr	r2, [r4, #16]
 800414c:	4293      	cmp	r3, r2
 800414e:	dd01      	ble.n	8004154 <_printf_common+0x7c>
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	18ed      	adds	r5, r5, r3
 8004154:	2700      	movs	r7, #0
 8004156:	42bd      	cmp	r5, r7
 8004158:	d120      	bne.n	800419c <_printf_common+0xc4>
 800415a:	2000      	movs	r0, #0
 800415c:	e010      	b.n	8004180 <_printf_common+0xa8>
 800415e:	3701      	adds	r7, #1
 8004160:	68e3      	ldr	r3, [r4, #12]
 8004162:	682a      	ldr	r2, [r5, #0]
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	42bb      	cmp	r3, r7
 8004168:	ddd2      	ble.n	8004110 <_printf_common+0x38>
 800416a:	0022      	movs	r2, r4
 800416c:	2301      	movs	r3, #1
 800416e:	3219      	adds	r2, #25
 8004170:	9901      	ldr	r1, [sp, #4]
 8004172:	9800      	ldr	r0, [sp, #0]
 8004174:	9e08      	ldr	r6, [sp, #32]
 8004176:	47b0      	blx	r6
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d1f0      	bne.n	800415e <_printf_common+0x86>
 800417c:	2001      	movs	r0, #1
 800417e:	4240      	negs	r0, r0
 8004180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004182:	2030      	movs	r0, #48	; 0x30
 8004184:	18e1      	adds	r1, r4, r3
 8004186:	3143      	adds	r1, #67	; 0x43
 8004188:	7008      	strb	r0, [r1, #0]
 800418a:	0021      	movs	r1, r4
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	3145      	adds	r1, #69	; 0x45
 8004190:	7809      	ldrb	r1, [r1, #0]
 8004192:	18a2      	adds	r2, r4, r2
 8004194:	3243      	adds	r2, #67	; 0x43
 8004196:	3302      	adds	r3, #2
 8004198:	7011      	strb	r1, [r2, #0]
 800419a:	e7c1      	b.n	8004120 <_printf_common+0x48>
 800419c:	0022      	movs	r2, r4
 800419e:	2301      	movs	r3, #1
 80041a0:	321a      	adds	r2, #26
 80041a2:	9901      	ldr	r1, [sp, #4]
 80041a4:	9800      	ldr	r0, [sp, #0]
 80041a6:	9e08      	ldr	r6, [sp, #32]
 80041a8:	47b0      	blx	r6
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	d0e6      	beq.n	800417c <_printf_common+0xa4>
 80041ae:	3701      	adds	r7, #1
 80041b0:	e7d1      	b.n	8004156 <_printf_common+0x7e>
	...

080041b4 <_printf_i>:
 80041b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	9204      	str	r2, [sp, #16]
 80041ba:	000a      	movs	r2, r1
 80041bc:	3243      	adds	r2, #67	; 0x43
 80041be:	9305      	str	r3, [sp, #20]
 80041c0:	9003      	str	r0, [sp, #12]
 80041c2:	9202      	str	r2, [sp, #8]
 80041c4:	7e0a      	ldrb	r2, [r1, #24]
 80041c6:	000c      	movs	r4, r1
 80041c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041ca:	2a6e      	cmp	r2, #110	; 0x6e
 80041cc:	d100      	bne.n	80041d0 <_printf_i+0x1c>
 80041ce:	e086      	b.n	80042de <_printf_i+0x12a>
 80041d0:	d81f      	bhi.n	8004212 <_printf_i+0x5e>
 80041d2:	2a63      	cmp	r2, #99	; 0x63
 80041d4:	d033      	beq.n	800423e <_printf_i+0x8a>
 80041d6:	d808      	bhi.n	80041ea <_printf_i+0x36>
 80041d8:	2a00      	cmp	r2, #0
 80041da:	d100      	bne.n	80041de <_printf_i+0x2a>
 80041dc:	e08c      	b.n	80042f8 <_printf_i+0x144>
 80041de:	2a58      	cmp	r2, #88	; 0x58
 80041e0:	d04d      	beq.n	800427e <_printf_i+0xca>
 80041e2:	0025      	movs	r5, r4
 80041e4:	3542      	adds	r5, #66	; 0x42
 80041e6:	702a      	strb	r2, [r5, #0]
 80041e8:	e030      	b.n	800424c <_printf_i+0x98>
 80041ea:	2a64      	cmp	r2, #100	; 0x64
 80041ec:	d001      	beq.n	80041f2 <_printf_i+0x3e>
 80041ee:	2a69      	cmp	r2, #105	; 0x69
 80041f0:	d1f7      	bne.n	80041e2 <_printf_i+0x2e>
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	6825      	ldr	r5, [r4, #0]
 80041f6:	1d0a      	adds	r2, r1, #4
 80041f8:	0628      	lsls	r0, r5, #24
 80041fa:	d529      	bpl.n	8004250 <_printf_i+0x9c>
 80041fc:	6808      	ldr	r0, [r1, #0]
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	2800      	cmp	r0, #0
 8004202:	da03      	bge.n	800420c <_printf_i+0x58>
 8004204:	232d      	movs	r3, #45	; 0x2d
 8004206:	9a02      	ldr	r2, [sp, #8]
 8004208:	4240      	negs	r0, r0
 800420a:	7013      	strb	r3, [r2, #0]
 800420c:	4e6b      	ldr	r6, [pc, #428]	; (80043bc <_printf_i+0x208>)
 800420e:	270a      	movs	r7, #10
 8004210:	e04f      	b.n	80042b2 <_printf_i+0xfe>
 8004212:	2a73      	cmp	r2, #115	; 0x73
 8004214:	d074      	beq.n	8004300 <_printf_i+0x14c>
 8004216:	d808      	bhi.n	800422a <_printf_i+0x76>
 8004218:	2a6f      	cmp	r2, #111	; 0x6f
 800421a:	d01f      	beq.n	800425c <_printf_i+0xa8>
 800421c:	2a70      	cmp	r2, #112	; 0x70
 800421e:	d1e0      	bne.n	80041e2 <_printf_i+0x2e>
 8004220:	2220      	movs	r2, #32
 8004222:	6809      	ldr	r1, [r1, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	6022      	str	r2, [r4, #0]
 8004228:	e003      	b.n	8004232 <_printf_i+0x7e>
 800422a:	2a75      	cmp	r2, #117	; 0x75
 800422c:	d016      	beq.n	800425c <_printf_i+0xa8>
 800422e:	2a78      	cmp	r2, #120	; 0x78
 8004230:	d1d7      	bne.n	80041e2 <_printf_i+0x2e>
 8004232:	0022      	movs	r2, r4
 8004234:	2178      	movs	r1, #120	; 0x78
 8004236:	3245      	adds	r2, #69	; 0x45
 8004238:	7011      	strb	r1, [r2, #0]
 800423a:	4e61      	ldr	r6, [pc, #388]	; (80043c0 <_printf_i+0x20c>)
 800423c:	e022      	b.n	8004284 <_printf_i+0xd0>
 800423e:	0025      	movs	r5, r4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	3542      	adds	r5, #66	; 0x42
 8004244:	1d11      	adds	r1, r2, #4
 8004246:	6019      	str	r1, [r3, #0]
 8004248:	6813      	ldr	r3, [r2, #0]
 800424a:	702b      	strb	r3, [r5, #0]
 800424c:	2301      	movs	r3, #1
 800424e:	e065      	b.n	800431c <_printf_i+0x168>
 8004250:	6808      	ldr	r0, [r1, #0]
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	0669      	lsls	r1, r5, #25
 8004256:	d5d3      	bpl.n	8004200 <_printf_i+0x4c>
 8004258:	b200      	sxth	r0, r0
 800425a:	e7d1      	b.n	8004200 <_printf_i+0x4c>
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	1d08      	adds	r0, r1, #4
 8004262:	6018      	str	r0, [r3, #0]
 8004264:	6808      	ldr	r0, [r1, #0]
 8004266:	062e      	lsls	r6, r5, #24
 8004268:	d505      	bpl.n	8004276 <_printf_i+0xc2>
 800426a:	4e54      	ldr	r6, [pc, #336]	; (80043bc <_printf_i+0x208>)
 800426c:	2708      	movs	r7, #8
 800426e:	2a6f      	cmp	r2, #111	; 0x6f
 8004270:	d01b      	beq.n	80042aa <_printf_i+0xf6>
 8004272:	270a      	movs	r7, #10
 8004274:	e019      	b.n	80042aa <_printf_i+0xf6>
 8004276:	066d      	lsls	r5, r5, #25
 8004278:	d5f7      	bpl.n	800426a <_printf_i+0xb6>
 800427a:	b280      	uxth	r0, r0
 800427c:	e7f5      	b.n	800426a <_printf_i+0xb6>
 800427e:	3145      	adds	r1, #69	; 0x45
 8004280:	4e4e      	ldr	r6, [pc, #312]	; (80043bc <_printf_i+0x208>)
 8004282:	700a      	strb	r2, [r1, #0]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	6822      	ldr	r2, [r4, #0]
 8004288:	1d01      	adds	r1, r0, #4
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	6019      	str	r1, [r3, #0]
 800428e:	0615      	lsls	r5, r2, #24
 8004290:	d521      	bpl.n	80042d6 <_printf_i+0x122>
 8004292:	07d3      	lsls	r3, r2, #31
 8004294:	d502      	bpl.n	800429c <_printf_i+0xe8>
 8004296:	2320      	movs	r3, #32
 8004298:	431a      	orrs	r2, r3
 800429a:	6022      	str	r2, [r4, #0]
 800429c:	2710      	movs	r7, #16
 800429e:	2800      	cmp	r0, #0
 80042a0:	d103      	bne.n	80042aa <_printf_i+0xf6>
 80042a2:	2320      	movs	r3, #32
 80042a4:	6822      	ldr	r2, [r4, #0]
 80042a6:	439a      	bics	r2, r3
 80042a8:	6022      	str	r2, [r4, #0]
 80042aa:	0023      	movs	r3, r4
 80042ac:	2200      	movs	r2, #0
 80042ae:	3343      	adds	r3, #67	; 0x43
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	60a3      	str	r3, [r4, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	db58      	blt.n	800436c <_printf_i+0x1b8>
 80042ba:	2204      	movs	r2, #4
 80042bc:	6821      	ldr	r1, [r4, #0]
 80042be:	4391      	bics	r1, r2
 80042c0:	6021      	str	r1, [r4, #0]
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d154      	bne.n	8004370 <_printf_i+0x1bc>
 80042c6:	9d02      	ldr	r5, [sp, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05a      	beq.n	8004382 <_printf_i+0x1ce>
 80042cc:	0025      	movs	r5, r4
 80042ce:	7833      	ldrb	r3, [r6, #0]
 80042d0:	3542      	adds	r5, #66	; 0x42
 80042d2:	702b      	strb	r3, [r5, #0]
 80042d4:	e055      	b.n	8004382 <_printf_i+0x1ce>
 80042d6:	0655      	lsls	r5, r2, #25
 80042d8:	d5db      	bpl.n	8004292 <_printf_i+0xde>
 80042da:	b280      	uxth	r0, r0
 80042dc:	e7d9      	b.n	8004292 <_printf_i+0xde>
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	680d      	ldr	r5, [r1, #0]
 80042e2:	1d10      	adds	r0, r2, #4
 80042e4:	6949      	ldr	r1, [r1, #20]
 80042e6:	6018      	str	r0, [r3, #0]
 80042e8:	6813      	ldr	r3, [r2, #0]
 80042ea:	062e      	lsls	r6, r5, #24
 80042ec:	d501      	bpl.n	80042f2 <_printf_i+0x13e>
 80042ee:	6019      	str	r1, [r3, #0]
 80042f0:	e002      	b.n	80042f8 <_printf_i+0x144>
 80042f2:	066d      	lsls	r5, r5, #25
 80042f4:	d5fb      	bpl.n	80042ee <_printf_i+0x13a>
 80042f6:	8019      	strh	r1, [r3, #0]
 80042f8:	2300      	movs	r3, #0
 80042fa:	9d02      	ldr	r5, [sp, #8]
 80042fc:	6123      	str	r3, [r4, #16]
 80042fe:	e04f      	b.n	80043a0 <_printf_i+0x1ec>
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	1d11      	adds	r1, r2, #4
 8004304:	6019      	str	r1, [r3, #0]
 8004306:	6815      	ldr	r5, [r2, #0]
 8004308:	2100      	movs	r1, #0
 800430a:	6862      	ldr	r2, [r4, #4]
 800430c:	0028      	movs	r0, r5
 800430e:	f000 f915 	bl	800453c <memchr>
 8004312:	2800      	cmp	r0, #0
 8004314:	d001      	beq.n	800431a <_printf_i+0x166>
 8004316:	1b40      	subs	r0, r0, r5
 8004318:	6060      	str	r0, [r4, #4]
 800431a:	6863      	ldr	r3, [r4, #4]
 800431c:	6123      	str	r3, [r4, #16]
 800431e:	2300      	movs	r3, #0
 8004320:	9a02      	ldr	r2, [sp, #8]
 8004322:	7013      	strb	r3, [r2, #0]
 8004324:	e03c      	b.n	80043a0 <_printf_i+0x1ec>
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	002a      	movs	r2, r5
 800432a:	9904      	ldr	r1, [sp, #16]
 800432c:	9803      	ldr	r0, [sp, #12]
 800432e:	9d05      	ldr	r5, [sp, #20]
 8004330:	47a8      	blx	r5
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	d03e      	beq.n	80043b4 <_printf_i+0x200>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	079b      	lsls	r3, r3, #30
 800433a:	d415      	bmi.n	8004368 <_printf_i+0x1b4>
 800433c:	9b07      	ldr	r3, [sp, #28]
 800433e:	68e0      	ldr	r0, [r4, #12]
 8004340:	4298      	cmp	r0, r3
 8004342:	da39      	bge.n	80043b8 <_printf_i+0x204>
 8004344:	0018      	movs	r0, r3
 8004346:	e037      	b.n	80043b8 <_printf_i+0x204>
 8004348:	0022      	movs	r2, r4
 800434a:	2301      	movs	r3, #1
 800434c:	3219      	adds	r2, #25
 800434e:	9904      	ldr	r1, [sp, #16]
 8004350:	9803      	ldr	r0, [sp, #12]
 8004352:	9e05      	ldr	r6, [sp, #20]
 8004354:	47b0      	blx	r6
 8004356:	1c43      	adds	r3, r0, #1
 8004358:	d02c      	beq.n	80043b4 <_printf_i+0x200>
 800435a:	3501      	adds	r5, #1
 800435c:	68e3      	ldr	r3, [r4, #12]
 800435e:	9a07      	ldr	r2, [sp, #28]
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	42ab      	cmp	r3, r5
 8004364:	dcf0      	bgt.n	8004348 <_printf_i+0x194>
 8004366:	e7e9      	b.n	800433c <_printf_i+0x188>
 8004368:	2500      	movs	r5, #0
 800436a:	e7f7      	b.n	800435c <_printf_i+0x1a8>
 800436c:	2800      	cmp	r0, #0
 800436e:	d0ad      	beq.n	80042cc <_printf_i+0x118>
 8004370:	9d02      	ldr	r5, [sp, #8]
 8004372:	0039      	movs	r1, r7
 8004374:	f7fb ff4e 	bl	8000214 <__aeabi_uidivmod>
 8004378:	5c73      	ldrb	r3, [r6, r1]
 800437a:	3d01      	subs	r5, #1
 800437c:	702b      	strb	r3, [r5, #0]
 800437e:	2800      	cmp	r0, #0
 8004380:	d1f7      	bne.n	8004372 <_printf_i+0x1be>
 8004382:	2f08      	cmp	r7, #8
 8004384:	d109      	bne.n	800439a <_printf_i+0x1e6>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	07db      	lsls	r3, r3, #31
 800438a:	d506      	bpl.n	800439a <_printf_i+0x1e6>
 800438c:	6863      	ldr	r3, [r4, #4]
 800438e:	6922      	ldr	r2, [r4, #16]
 8004390:	4293      	cmp	r3, r2
 8004392:	dc02      	bgt.n	800439a <_printf_i+0x1e6>
 8004394:	2330      	movs	r3, #48	; 0x30
 8004396:	3d01      	subs	r5, #1
 8004398:	702b      	strb	r3, [r5, #0]
 800439a:	9b02      	ldr	r3, [sp, #8]
 800439c:	1b5b      	subs	r3, r3, r5
 800439e:	6123      	str	r3, [r4, #16]
 80043a0:	9b05      	ldr	r3, [sp, #20]
 80043a2:	aa07      	add	r2, sp, #28
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	0021      	movs	r1, r4
 80043a8:	9b04      	ldr	r3, [sp, #16]
 80043aa:	9803      	ldr	r0, [sp, #12]
 80043ac:	f7ff fe94 	bl	80040d8 <_printf_common>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d1b8      	bne.n	8004326 <_printf_i+0x172>
 80043b4:	2001      	movs	r0, #1
 80043b6:	4240      	negs	r0, r0
 80043b8:	b009      	add	sp, #36	; 0x24
 80043ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043bc:	0800465d 	.word	0x0800465d
 80043c0:	0800466e 	.word	0x0800466e

080043c4 <_sbrk_r>:
 80043c4:	2300      	movs	r3, #0
 80043c6:	b570      	push	{r4, r5, r6, lr}
 80043c8:	4c06      	ldr	r4, [pc, #24]	; (80043e4 <_sbrk_r+0x20>)
 80043ca:	0005      	movs	r5, r0
 80043cc:	0008      	movs	r0, r1
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	f7fc f9ce 	bl	8000770 <_sbrk>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d103      	bne.n	80043e0 <_sbrk_r+0x1c>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d000      	beq.n	80043e0 <_sbrk_r+0x1c>
 80043de:	602b      	str	r3, [r5, #0]
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	20000190 	.word	0x20000190

080043e8 <__sread>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	000c      	movs	r4, r1
 80043ec:	250e      	movs	r5, #14
 80043ee:	5f49      	ldrsh	r1, [r1, r5]
 80043f0:	f000 f8b2 	bl	8004558 <_read_r>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	db03      	blt.n	8004400 <__sread+0x18>
 80043f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043fa:	181b      	adds	r3, r3, r0
 80043fc:	6563      	str	r3, [r4, #84]	; 0x54
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	4a02      	ldr	r2, [pc, #8]	; (800440c <__sread+0x24>)
 8004404:	4013      	ands	r3, r2
 8004406:	81a3      	strh	r3, [r4, #12]
 8004408:	e7f9      	b.n	80043fe <__sread+0x16>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	ffffefff 	.word	0xffffefff

08004410 <__swrite>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	001f      	movs	r7, r3
 8004414:	898b      	ldrh	r3, [r1, #12]
 8004416:	0005      	movs	r5, r0
 8004418:	000c      	movs	r4, r1
 800441a:	0016      	movs	r6, r2
 800441c:	05db      	lsls	r3, r3, #23
 800441e:	d505      	bpl.n	800442c <__swrite+0x1c>
 8004420:	230e      	movs	r3, #14
 8004422:	5ec9      	ldrsh	r1, [r1, r3]
 8004424:	2200      	movs	r2, #0
 8004426:	2302      	movs	r3, #2
 8004428:	f000 f874 	bl	8004514 <_lseek_r>
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	4a05      	ldr	r2, [pc, #20]	; (8004444 <__swrite+0x34>)
 8004430:	0028      	movs	r0, r5
 8004432:	4013      	ands	r3, r2
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	0032      	movs	r2, r6
 8004438:	230e      	movs	r3, #14
 800443a:	5ee1      	ldrsh	r1, [r4, r3]
 800443c:	003b      	movs	r3, r7
 800443e:	f000 f81f 	bl	8004480 <_write_r>
 8004442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004444:	ffffefff 	.word	0xffffefff

08004448 <__sseek>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	000c      	movs	r4, r1
 800444c:	250e      	movs	r5, #14
 800444e:	5f49      	ldrsh	r1, [r1, r5]
 8004450:	f000 f860 	bl	8004514 <_lseek_r>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	1c42      	adds	r2, r0, #1
 8004458:	d103      	bne.n	8004462 <__sseek+0x1a>
 800445a:	4a05      	ldr	r2, [pc, #20]	; (8004470 <__sseek+0x28>)
 800445c:	4013      	ands	r3, r2
 800445e:	81a3      	strh	r3, [r4, #12]
 8004460:	bd70      	pop	{r4, r5, r6, pc}
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	0152      	lsls	r2, r2, #5
 8004466:	4313      	orrs	r3, r2
 8004468:	81a3      	strh	r3, [r4, #12]
 800446a:	6560      	str	r0, [r4, #84]	; 0x54
 800446c:	e7f8      	b.n	8004460 <__sseek+0x18>
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	ffffefff 	.word	0xffffefff

08004474 <__sclose>:
 8004474:	b510      	push	{r4, lr}
 8004476:	230e      	movs	r3, #14
 8004478:	5ec9      	ldrsh	r1, [r1, r3]
 800447a:	f000 f815 	bl	80044a8 <_close_r>
 800447e:	bd10      	pop	{r4, pc}

08004480 <_write_r>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	0005      	movs	r5, r0
 8004484:	0008      	movs	r0, r1
 8004486:	0011      	movs	r1, r2
 8004488:	2200      	movs	r2, #0
 800448a:	4c06      	ldr	r4, [pc, #24]	; (80044a4 <_write_r+0x24>)
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	001a      	movs	r2, r3
 8004490:	f7fc f925 	bl	80006de <_write>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d103      	bne.n	80044a0 <_write_r+0x20>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d000      	beq.n	80044a0 <_write_r+0x20>
 800449e:	602b      	str	r3, [r5, #0]
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	20000190 	.word	0x20000190

080044a8 <_close_r>:
 80044a8:	2300      	movs	r3, #0
 80044aa:	b570      	push	{r4, r5, r6, lr}
 80044ac:	4c06      	ldr	r4, [pc, #24]	; (80044c8 <_close_r+0x20>)
 80044ae:	0005      	movs	r5, r0
 80044b0:	0008      	movs	r0, r1
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	f7fc f92f 	bl	8000716 <_close>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d103      	bne.n	80044c4 <_close_r+0x1c>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d000      	beq.n	80044c4 <_close_r+0x1c>
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	bd70      	pop	{r4, r5, r6, pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	20000190 	.word	0x20000190

080044cc <_fstat_r>:
 80044cc:	2300      	movs	r3, #0
 80044ce:	b570      	push	{r4, r5, r6, lr}
 80044d0:	4c06      	ldr	r4, [pc, #24]	; (80044ec <_fstat_r+0x20>)
 80044d2:	0005      	movs	r5, r0
 80044d4:	0008      	movs	r0, r1
 80044d6:	0011      	movs	r1, r2
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	f7fc f926 	bl	800072a <_fstat>
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	d103      	bne.n	80044ea <_fstat_r+0x1e>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d000      	beq.n	80044ea <_fstat_r+0x1e>
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	20000190 	.word	0x20000190

080044f0 <_isatty_r>:
 80044f0:	2300      	movs	r3, #0
 80044f2:	b570      	push	{r4, r5, r6, lr}
 80044f4:	4c06      	ldr	r4, [pc, #24]	; (8004510 <_isatty_r+0x20>)
 80044f6:	0005      	movs	r5, r0
 80044f8:	0008      	movs	r0, r1
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	f7fc f923 	bl	8000746 <_isatty>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d103      	bne.n	800450c <_isatty_r+0x1c>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d000      	beq.n	800450c <_isatty_r+0x1c>
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	bd70      	pop	{r4, r5, r6, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	20000190 	.word	0x20000190

08004514 <_lseek_r>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	0005      	movs	r5, r0
 8004518:	0008      	movs	r0, r1
 800451a:	0011      	movs	r1, r2
 800451c:	2200      	movs	r2, #0
 800451e:	4c06      	ldr	r4, [pc, #24]	; (8004538 <_lseek_r+0x24>)
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	001a      	movs	r2, r3
 8004524:	f7fc f918 	bl	8000758 <_lseek>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d103      	bne.n	8004534 <_lseek_r+0x20>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d000      	beq.n	8004534 <_lseek_r+0x20>
 8004532:	602b      	str	r3, [r5, #0]
 8004534:	bd70      	pop	{r4, r5, r6, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	20000190 	.word	0x20000190

0800453c <memchr>:
 800453c:	b2c9      	uxtb	r1, r1
 800453e:	1882      	adds	r2, r0, r2
 8004540:	4290      	cmp	r0, r2
 8004542:	d101      	bne.n	8004548 <memchr+0xc>
 8004544:	2000      	movs	r0, #0
 8004546:	4770      	bx	lr
 8004548:	7803      	ldrb	r3, [r0, #0]
 800454a:	428b      	cmp	r3, r1
 800454c:	d0fb      	beq.n	8004546 <memchr+0xa>
 800454e:	3001      	adds	r0, #1
 8004550:	e7f6      	b.n	8004540 <memchr+0x4>

08004552 <__malloc_lock>:
 8004552:	4770      	bx	lr

08004554 <__malloc_unlock>:
 8004554:	4770      	bx	lr
	...

08004558 <_read_r>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	0005      	movs	r5, r0
 800455c:	0008      	movs	r0, r1
 800455e:	0011      	movs	r1, r2
 8004560:	2200      	movs	r2, #0
 8004562:	4c06      	ldr	r4, [pc, #24]	; (800457c <_read_r+0x24>)
 8004564:	6022      	str	r2, [r4, #0]
 8004566:	001a      	movs	r2, r3
 8004568:	f7fc f89c 	bl	80006a4 <_read>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d103      	bne.n	8004578 <_read_r+0x20>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d000      	beq.n	8004578 <_read_r+0x20>
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	bd70      	pop	{r4, r5, r6, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	20000190 	.word	0x20000190

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
