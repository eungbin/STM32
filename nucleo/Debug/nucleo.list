
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005104  08005104  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005104  08005104  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005104  08005104  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800510c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000074  08005180  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  08005180  00020730  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111f2  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025c3  00000000  00000000  0003128e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  00033858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  000349f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b4ce  00000000  00000000  00035a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0d6  00000000  00000000  00050f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b05e  00000000  00000000  0005f024  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa082  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004520  00000000  00000000  000fa100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f24 	.word	0x08004f24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004f24 	.word	0x08004f24

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <displayInit>:
 *  		â€¢ MAX_COLUMNS
 * @param	hi2c 	- pointer to the i2c handler
 * @retval	status 	- 0...OK, other...error
 */
uint8_t displayInit(I2C_HandleTypeDef *hi2c)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af02      	add	r7, sp, #8
 8000236:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 8000238:	230f      	movs	r3, #15
 800023a:	18fb      	adds	r3, r7, r3
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]

	_i2cHandler = hi2c;			// pointer for i2c handler is stored in library
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <displayInit+0x80>)
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]

	// create i2c data stream
    uint8_t TransmitData[6] = {SPECIAL_COMMAND,									// special command character
 8000246:	2108      	movs	r1, #8
 8000248:	187b      	adds	r3, r7, r1
 800024a:	22fe      	movs	r2, #254	; 0xfe
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	4b19      	ldr	r3, [pc, #100]	; (80002b4 <displayInit+0x84>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2208      	movs	r2, #8
 8000254:	4313      	orrs	r3, r2
 8000256:	b2da      	uxtb	r2, r3
 8000258:	187b      	adds	r3, r7, r1
 800025a:	705a      	strb	r2, [r3, #1]
 800025c:	187b      	adds	r3, r7, r1
 800025e:	22fe      	movs	r2, #254	; 0xfe
 8000260:	709a      	strb	r2, [r3, #2]
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <displayInit+0x88>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2204      	movs	r2, #4
 8000268:	4313      	orrs	r3, r2
 800026a:	b2da      	uxtb	r2, r3
 800026c:	187b      	adds	r3, r7, r1
 800026e:	70da      	strb	r2, [r3, #3]
 8000270:	187b      	adds	r3, r7, r1
 8000272:	227c      	movs	r2, #124	; 0x7c
 8000274:	711a      	strb	r2, [r3, #4]
 8000276:	187b      	adds	r3, r7, r1
 8000278:	222d      	movs	r2, #45	; 0x2d
 800027a:	715a      	strb	r2, [r3, #5]
							   SETTING_COMMAND, 								// Put LCD into setting mode
							   CLEAR_COMMAND 									// clear display
    						   };

    // transmission of data stream
    if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, TransmitData, sizeof(TransmitData), 100) != HAL_OK)		// transmit data
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <displayInit+0x80>)
 800027e:	6818      	ldr	r0, [r3, #0]
 8000280:	187a      	adds	r2, r7, r1
 8000282:	2364      	movs	r3, #100	; 0x64
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2306      	movs	r3, #6
 8000288:	21e4      	movs	r1, #228	; 0xe4
 800028a:	f001 fb9d 	bl	80019c8 <HAL_I2C_Master_Transmit>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d003      	beq.n	800029a <displayInit+0x6a>
    	retval = LCD_ERROR;
 8000292:	230f      	movs	r3, #15
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 800029a:	2032      	movs	r0, #50	; 0x32
 800029c:	f000 feac 	bl	8000ff8 <HAL_Delay>

    return retval;
 80002a0:	230f      	movs	r3, #15
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	781b      	ldrb	r3, [r3, #0]
}
 80002a6:	0018      	movs	r0, r3
 80002a8:	46bd      	mov	sp, r7
 80002aa:	b004      	add	sp, #16
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	200000a8 	.word	0x200000a8
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000001 	.word	0x20000001

080002bc <displayWriteString>:
 * @param	size  	- length of the string to write
 * @retval	status 	- 0...OK, other...error
 *
 */
uint8_t displayWriteString(char *buffer)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b087      	sub	sp, #28
 80002c0:	af02      	add	r7, sp, #8
 80002c2:	6078      	str	r0, [r7, #4]
	uint8_t retval = LCD_OK;
 80002c4:	230f      	movs	r3, #15
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]

	// transmission of data stream
	if(HAL_I2C_Master_Transmit(_i2cHandler, DISPLAY_ADDRESS1<<1, buffer, strlen(buffer), 100) != HAL_OK)		// transmit data
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <displayWriteString+0x50>)
 80002ce:	681c      	ldr	r4, [r3, #0]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	0018      	movs	r0, r3
 80002d4:	f7ff ff18 	bl	8000108 <strlen>
 80002d8:	0003      	movs	r3, r0
 80002da:	b299      	uxth	r1, r3
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	2364      	movs	r3, #100	; 0x64
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	000b      	movs	r3, r1
 80002e4:	21e4      	movs	r1, #228	; 0xe4
 80002e6:	0020      	movs	r0, r4
 80002e8:	f001 fb6e 	bl	80019c8 <HAL_I2C_Master_Transmit>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d003      	beq.n	80002f8 <displayWriteString+0x3c>
	  retval = LCD_ERROR;
 80002f0:	230f      	movs	r3, #15
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10); //This takes a bit longer
 80002f8:	200a      	movs	r0, #10
 80002fa:	f000 fe7d 	bl	8000ff8 <HAL_Delay>

    return retval;
 80002fe:	230f      	movs	r3, #15
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	781b      	ldrb	r3, [r3, #0]
}
 8000304:	0018      	movs	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	b005      	add	sp, #20
 800030a:	bd90      	pop	{r4, r7, pc}
 800030c:	200000a8 	.word	0x200000a8

08000310 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 8000318:	1d39      	adds	r1, r7, #4
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <__io_putchar+0x20>)
 800031c:	230a      	movs	r3, #10
 800031e:	2201      	movs	r2, #1
 8000320:	f003 f92c 	bl	800357c <HAL_UART_Transmit>

	return 1;
 8000324:	2301      	movs	r3, #1
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b002      	add	sp, #8
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	20000658 	.word	0x20000658

08000334 <__io_getchar>:

int __io_getchar(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <__io_getchar+0x1c>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	0019      	movs	r1, r3
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <__io_getchar+0x20>)
 8000340:	2201      	movs	r2, #1
 8000342:	0018      	movs	r0, r3
 8000344:	f003 f9c3 	bl	80036ce <HAL_UART_Receive_IT>

	return 1;
 8000348:	2301      	movs	r3, #1
}
 800034a:	0018      	movs	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000224 	.word	0x20000224
 8000354:	20000658 	.word	0x20000658

08000358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035c:	f000 fde8 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000360:	f000 f848 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000364:	f000 f9f0 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 8000368:	f000 f9d0 	bl	800070c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800036c:	f000 f96e 	bl	800064c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000370:	f000 f8e8 	bl	8000544 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000374:	f000 f99a 	bl	80006ac <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8000378:	f000 f93a 	bl	80005f0 <MX_TIM16_Init>
  MX_I2C1_Init();
 800037c:	f000 f8a2 	bl	80004c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <main+0x80>)
 8000382:	0018      	movs	r0, r3
 8000384:	f002 fc86 	bl	8002c94 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000388:	4914      	ldr	r1, [pc, #80]	; (80003dc <main+0x84>)
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <main+0x88>)
 800038c:	2201      	movs	r2, #1
 800038e:	0018      	movs	r0, r3
 8000390:	f003 f99d 	bl	80036ce <HAL_UART_Receive_IT>
//	  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, SET);
//	  HAL_Delay(10000);
//	  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, RESET);
//	  HAL_Delay(20000);

	  status_lcd = displayInit(&hi2c1);
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <main+0x8c>)
 8000396:	0018      	movs	r0, r3
 8000398:	f7ff ff4a 	bl	8000230 <displayInit>
 800039c:	0003      	movs	r3, r0
 800039e:	001a      	movs	r2, r3
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <main+0x90>)
 80003a2:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(Sensor_GPIO_Port, Sensor_Pin))
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	009a      	lsls	r2, r3, #2
 80003a8:	2390      	movs	r3, #144	; 0x90
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	0011      	movs	r1, r2
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 fa1e 	bl	80017f0 <HAL_GPIO_ReadPin>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d004      	beq.n	80003c2 <main+0x6a>
		  displayWriteString("Detected!!!");
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <main+0x94>)
 80003ba:	0018      	movs	r0, r3
 80003bc:	f7ff ff7e 	bl	80002bc <displayWriteString>
 80003c0:	e003      	b.n	80003ca <main+0x72>
	  else
		  displayWriteString("No Detected...");
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <main+0x98>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f7ff ff79 	bl	80002bc <displayWriteString>
	  HAL_Delay(500);
 80003ca:	23fa      	movs	r3, #250	; 0xfa
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fe12 	bl	8000ff8 <HAL_Delay>
	  status_lcd = displayInit(&hi2c1);
 80003d4:	e7de      	b.n	8000394 <main+0x3c>
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	20000610 	.word	0x20000610
 80003dc:	20000224 	.word	0x20000224
 80003e0:	20000658 	.word	0x20000658
 80003e4:	20000174 	.word	0x20000174
 80003e8:	20000098 	.word	0x20000098
 80003ec:	08004f3c 	.word	0x08004f3c
 80003f0:	08004f48 	.word	0x08004f48

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b099      	sub	sp, #100	; 0x64
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	242c      	movs	r4, #44	; 0x2c
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2334      	movs	r3, #52	; 0x34
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f004 f8dd 	bl	80045c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040a:	231c      	movs	r3, #28
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	0018      	movs	r0, r3
 8000410:	2310      	movs	r3, #16
 8000412:	001a      	movs	r2, r3
 8000414:	2100      	movs	r1, #0
 8000416:	f004 f8d5 	bl	80045c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041a:	003b      	movs	r3, r7
 800041c:	0018      	movs	r0, r3
 800041e:	231c      	movs	r3, #28
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f004 f8ce 	bl	80045c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000428:	0021      	movs	r1, r4
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2203      	movs	r2, #3
 800042e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2201      	movs	r2, #1
 8000434:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2201      	movs	r2, #1
 800043a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2210      	movs	r2, #16
 8000440:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2202      	movs	r2, #2
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	0252      	lsls	r2, r2, #9
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2280      	movs	r2, #128	; 0x80
 8000454:	0352      	lsls	r2, r2, #13
 8000456:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2200      	movs	r2, #0
 800045c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	187b      	adds	r3, r7, r1
 8000460:	0018      	movs	r0, r3
 8000462:	f001 fdc9 	bl	8001ff8 <HAL_RCC_OscConfig>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800046a:	f000 fa8f 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046e:	211c      	movs	r1, #28
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2207      	movs	r2, #7
 8000474:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2202      	movs	r2, #2
 800047a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2101      	movs	r1, #1
 800048c:	0018      	movs	r0, r3
 800048e:	f002 f939 	bl	8002704 <HAL_RCC_ClockConfig>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000496:	f000 fa79 	bl	800098c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800049a:	003b      	movs	r3, r7
 800049c:	2222      	movs	r2, #34	; 0x22
 800049e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	003b      	movs	r3, r7
 80004ae:	0018      	movs	r0, r3
 80004b0:	f002 faa0 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80004b8:	f000 fa68 	bl	800098c <Error_Handler>
  }
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b019      	add	sp, #100	; 0x64
 80004c2:	bd90      	pop	{r4, r7, pc}

080004c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_I2C1_Init+0x74>)
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <MX_I2C1_Init+0x78>)
 80004cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_I2C1_Init+0x74>)
 80004d0:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <MX_I2C1_Init+0x7c>)
 80004d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_I2C1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <MX_I2C1_Init+0x74>)
 80004dc:	2201      	movs	r2, #1
 80004de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_I2C1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_I2C1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_I2C1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_I2C1_Init+0x74>)
 8000500:	0018      	movs	r0, r3
 8000502:	f001 f9cb 	bl	800189c <HAL_I2C_Init>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800050a:	f000 fa3f 	bl	800098c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <MX_I2C1_Init+0x74>)
 8000510:	2100      	movs	r1, #0
 8000512:	0018      	movs	r0, r3
 8000514:	f001 fcd8 	bl	8001ec8 <HAL_I2CEx_ConfigAnalogFilter>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800051c:	f000 fa36 	bl	800098c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <MX_I2C1_Init+0x74>)
 8000522:	2100      	movs	r1, #0
 8000524:	0018      	movs	r0, r3
 8000526:	f001 fd1b 	bl	8001f60 <HAL_I2CEx_ConfigDigitalFilter>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f000 fa2d 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000174 	.word	0x20000174
 800053c:	40005400 	.word	0x40005400
 8000540:	2000090e 	.word	0x2000090e

08000544 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054a:	2308      	movs	r3, #8
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	0018      	movs	r0, r3
 8000550:	2310      	movs	r3, #16
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f004 f835 	bl	80045c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055a:	003b      	movs	r3, r7
 800055c:	0018      	movs	r0, r3
 800055e:	2308      	movs	r3, #8
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f004 f82e 	bl	80045c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MX_TIM2_Init+0xa0>)
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	05d2      	lsls	r2, r2, #23
 800056e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <MX_TIM2_Init+0xa0>)
 8000572:	4a1d      	ldr	r2, [pc, #116]	; (80005e8 <MX_TIM2_Init+0xa4>)
 8000574:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_TIM2_Init+0xa0>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <MX_TIM2_Init+0xa0>)
 800057e:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <MX_TIM2_Init+0xa8>)
 8000580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_TIM2_Init+0xa0>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_TIM2_Init+0xa0>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_TIM2_Init+0xa0>)
 8000590:	0018      	movs	r0, r3
 8000592:	f002 fb2f 	bl	8002bf4 <HAL_TIM_Base_Init>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800059a:	f000 f9f7 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	2108      	movs	r1, #8
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0152      	lsls	r2, r2, #5
 80005a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005a8:	187a      	adds	r2, r7, r1
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_TIM2_Init+0xa0>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f002 fd22 	bl	8002ff8 <HAL_TIM_ConfigClockSource>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80005b8:	f000 f9e8 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005c8:	003a      	movs	r2, r7
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_TIM2_Init+0xa0>)
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f002 ff12 	bl	80033f8 <HAL_TIMEx_MasterConfigSynchronization>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80005d8:	f000 f9d8 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b006      	add	sp, #24
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000610 	.word	0x20000610
 80005e8:	00008c9f 	.word	0x00008c9f
 80005ec:	00000bb7 	.word	0x00000bb7

080005f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_TIM16_Init+0x4c>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_TIM16_Init+0x50>)
 80005f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32000-1;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_TIM16_Init+0x4c>)
 80005fc:	4a11      	ldr	r2, [pc, #68]	; (8000644 <MX_TIM16_Init+0x54>)
 80005fe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_TIM16_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000-1;
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_TIM16_Init+0x4c>)
 8000608:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <MX_TIM16_Init+0x58>)
 800060a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_TIM16_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_TIM16_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_TIM16_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_TIM16_Init+0x4c>)
 8000620:	0018      	movs	r0, r3
 8000622:	f002 fae7 	bl	8002bf4 <HAL_TIM_Base_Init>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800062a:	f000 f9af 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 800062e:	4b03      	ldr	r3, [pc, #12]	; (800063c <MX_TIM16_Init+0x4c>)
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fb79 	bl	8002d28 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200006e0 	.word	0x200006e0
 8000640:	40014400 	.word	0x40014400
 8000644:	00007cff 	.word	0x00007cff
 8000648:	00001387 	.word	0x00001387

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART2_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000658:	2296      	movs	r2, #150	; 0x96
 800065a:	0212      	lsls	r2, r2, #8
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <MX_USART2_UART_Init+0x58>)
 8000690:	0018      	movs	r0, r3
 8000692:	f002 ff1f 	bl	80034d4 <HAL_UART_Init>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f977 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000658 	.word	0x20000658
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART3_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006b8:	2296      	movs	r2, #150	; 0x96
 80006ba:	0192      	lsls	r2, r2, #6
 80006bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <MX_USART3_UART_Init+0x58>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 feef 	bl	80034d4 <HAL_UART_Init>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f947 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000f0 	.word	0x200000f0
 8000708:	40004800 	.word	0x40004800

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_DMA_Init+0x38>)
 8000714:	695a      	ldr	r2, [r3, #20]
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_DMA_Init+0x38>)
 8000718:	2101      	movs	r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_DMA_Init+0x38>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	2201      	movs	r2, #1
 8000724:	4013      	ands	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	200a      	movs	r0, #10
 8000730:	f000 fd30 	bl	8001194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000734:	200a      	movs	r0, #10
 8000736:	f000 fd42 	bl	80011be <HAL_NVIC_EnableIRQ>

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b08b      	sub	sp, #44	; 0x2c
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	2414      	movs	r4, #20
 8000750:	193b      	adds	r3, r7, r4
 8000752:	0018      	movs	r0, r3
 8000754:	2314      	movs	r3, #20
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f003 ff33 	bl	80045c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b4c      	ldr	r3, [pc, #304]	; (8000890 <MX_GPIO_Init+0x148>)
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	4b4b      	ldr	r3, [pc, #300]	; (8000890 <MX_GPIO_Init+0x148>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0309      	lsls	r1, r1, #12
 8000768:	430a      	orrs	r2, r1
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	4b48      	ldr	r3, [pc, #288]	; (8000890 <MX_GPIO_Init+0x148>)
 800076e:	695a      	ldr	r2, [r3, #20]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	031b      	lsls	r3, r3, #12
 8000774:	4013      	ands	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	4b45      	ldr	r3, [pc, #276]	; (8000890 <MX_GPIO_Init+0x148>)
 800077c:	695a      	ldr	r2, [r3, #20]
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <MX_GPIO_Init+0x148>)
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	03c9      	lsls	r1, r1, #15
 8000784:	430a      	orrs	r2, r1
 8000786:	615a      	str	r2, [r3, #20]
 8000788:	4b41      	ldr	r3, [pc, #260]	; (8000890 <MX_GPIO_Init+0x148>)
 800078a:	695a      	ldr	r2, [r3, #20]
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	03db      	lsls	r3, r3, #15
 8000790:	4013      	ands	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <MX_GPIO_Init+0x148>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	4b3d      	ldr	r3, [pc, #244]	; (8000890 <MX_GPIO_Init+0x148>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0289      	lsls	r1, r1, #10
 80007a0:	430a      	orrs	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <MX_GPIO_Init+0x148>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	029b      	lsls	r3, r3, #10
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_GPIO_Init+0x148>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b36      	ldr	r3, [pc, #216]	; (8000890 <MX_GPIO_Init+0x148>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	02c9      	lsls	r1, r1, #11
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b33      	ldr	r3, [pc, #204]	; (8000890 <MX_GPIO_Init+0x148>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	02db      	lsls	r3, r3, #11
 80007c8:	4013      	ands	r3, r2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|URLED2_Pin, GPIO_PIN_RESET);
 80007ce:	2390      	movs	r3, #144	; 0x90
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	2200      	movs	r2, #0
 80007d4:	2122      	movs	r1, #34	; 0x22
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f827 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80007dc:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 f821 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : URBTN_Pin */
  GPIO_InitStruct.Pin = URBTN_Pin;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	0192      	lsls	r2, r2, #6
 80007ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	4a29      	ldr	r2, [pc, #164]	; (8000898 <MX_GPIO_Init+0x150>)
 80007f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(URBTN_GPIO_Port, &GPIO_InitStruct);
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	4a27      	ldr	r2, [pc, #156]	; (800089c <MX_GPIO_Init+0x154>)
 8000800:	0019      	movs	r1, r3
 8000802:	0010      	movs	r0, r2
 8000804:	f000 fe7c 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 URLED2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|URLED2_Pin;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2222      	movs	r2, #34	; 0x22
 800080c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2201      	movs	r2, #1
 8000812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	193a      	adds	r2, r7, r4
 8000822:	2390      	movs	r3, #144	; 0x90
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fe69 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Pin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 8000842:	193a      	adds	r2, r7, r4
 8000844:	2390      	movs	r3, #144	; 0x90
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fe58 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 8000850:	0021      	movs	r1, r4
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2220      	movs	r2, #32
 8000856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2201      	movs	r2, #1
 800085c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 800086a:	187b      	adds	r3, r7, r1
 800086c:	4a09      	ldr	r2, [pc, #36]	; (8000894 <MX_GPIO_Init+0x14c>)
 800086e:	0019      	movs	r1, r3
 8000870:	0010      	movs	r0, r2
 8000872:	f000 fe45 	bl	8001500 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2007      	movs	r0, #7
 800087c:	f000 fc8a 	bl	8001194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000880:	2007      	movs	r0, #7
 8000882:	f000 fc9c 	bl	80011be <HAL_NVIC_EnableIRQ>

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b00b      	add	sp, #44	; 0x2c
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400
 8000898:	10110000 	.word	0x10110000
 800089c:	48000800 	.word	0x48000800

080008a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	0002      	movs	r2, r0
 80008a8:	1dbb      	adds	r3, r7, #6
 80008aa:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == URBTN_Pin) {
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	881a      	ldrh	r2, [r3, #0]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	019b      	lsls	r3, r3, #6
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d10a      	bne.n	80008ce <HAL_GPIO_EXTI_Callback+0x2e>
    if(led_status == FALSE) {
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_GPIO_EXTI_Callback+0x38>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d103      	bne.n	80008c8 <HAL_GPIO_EXTI_Callback+0x28>
    	led_status = TRUE;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_GPIO_EXTI_Callback+0x38>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
    } else {
    	led_status = FALSE;
    }
  }
}
 80008c6:	e002      	b.n	80008ce <HAL_GPIO_EXTI_Callback+0x2e>
    	led_status = FALSE;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HAL_GPIO_EXTI_Callback+0x38>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000090 	.word	0x20000090

080008dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <HAL_UART_RxCpltCallback+0x88>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d135      	bne.n	800095a <HAL_UART_RxCpltCallback+0x7e>
		printf("Key Press!!!\r\n");
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <HAL_UART_RxCpltCallback+0x8c>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f003 fecf 	bl	8004694 <puts>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80008f6:	491d      	ldr	r1, [pc, #116]	; (800096c <HAL_UART_RxCpltCallback+0x90>)
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <HAL_UART_RxCpltCallback+0x94>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	0018      	movs	r0, r3
 80008fe:	f002 fee6 	bl	80036ce <HAL_UART_Receive_IT>
		buf[list_value] = rx_data;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_UART_RxCpltCallback+0x98>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_RxCpltCallback+0x90>)
 8000908:	7811      	ldrb	r1, [r2, #0]
 800090a:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <HAL_UART_RxCpltCallback+0x9c>)
 800090c:	54d1      	strb	r1, [r2, r3]
		list_value++;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_UART_RxCpltCallback+0x98>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_UART_RxCpltCallback+0x98>)
 8000916:	601a      	str	r2, [r3, #0]
		if(rx_data == 'p') {
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_UART_RxCpltCallback+0x90>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b70      	cmp	r3, #112	; 0x70
 800091e:	d11c      	bne.n	800095a <HAL_UART_RxCpltCallback+0x7e>
			HAL_UART_Transmit(&huart2, &buf, (list_value-1), 1);
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_UART_RxCpltCallback+0x98>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	b29b      	uxth	r3, r3
 8000926:	3b01      	subs	r3, #1
 8000928:	b29a      	uxth	r2, r3
 800092a:	4913      	ldr	r1, [pc, #76]	; (8000978 <HAL_UART_RxCpltCallback+0x9c>)
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <HAL_UART_RxCpltCallback+0x94>)
 800092e:	2301      	movs	r3, #1
 8000930:	f002 fe24 	bl	800357c <HAL_UART_Transmit>
			for(int i=0; i<list_value; i++) {
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	e007      	b.n	800094a <HAL_UART_RxCpltCallback+0x6e>
				buf[i] = 'null';
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_UART_RxCpltCallback+0x9c>)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	226c      	movs	r2, #108	; 0x6c
 8000942:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<list_value; i++) {
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_UART_RxCpltCallback+0x98>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf2      	blt.n	800093a <HAL_UART_RxCpltCallback+0x5e>
			}
			list_value = 0;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_UART_RxCpltCallback+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
//	if(huart->Instance == USART3) {
//		print_MISE();
//		printf("%d\r\n", pm2_5);
//		sprintf(s_pm2_5, "%d", pm2_5);
//	}
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40004400 	.word	0x40004400
 8000968:	08004f58 	.word	0x08004f58
 800096c:	20000224 	.word	0x20000224
 8000970:	20000658 	.word	0x20000658
 8000974:	20000094 	.word	0x20000094
 8000978:	20000228 	.word	0x20000228

0800097c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
	{

	}
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000992:	e7fe      	b.n	8000992 <Error_Handler+0x6>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_MspInit+0x44>)
 800099c:	699a      	ldr	r2, [r3, #24]
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_MspInit+0x44>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	430a      	orrs	r2, r1
 80009a4:	619a      	str	r2, [r3, #24]
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <HAL_MspInit+0x44>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	2201      	movs	r2, #1
 80009ac:	4013      	ands	r3, r2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x44>)
 80009b4:	69da      	ldr	r2, [r3, #28]
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_MspInit+0x44>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0549      	lsls	r1, r1, #21
 80009bc:	430a      	orrs	r2, r1
 80009be:	61da      	str	r2, [r3, #28]
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_MspInit+0x44>)
 80009c2:	69da      	ldr	r2, [r3, #28]
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	055b      	lsls	r3, r3, #21
 80009c8:	4013      	ands	r3, r2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	2314      	movs	r3, #20
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	0018      	movs	r0, r3
 80009ea:	2314      	movs	r3, #20
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f003 fde8 	bl	80045c4 <memset>
  if(hi2c->Instance==I2C1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <HAL_I2C_MspInit+0x90>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d132      	bne.n	8000a64 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_I2C_MspInit+0x94>)
 8000a00:	695a      	ldr	r2, [r3, #20]
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <HAL_I2C_MspInit+0x94>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	02c9      	lsls	r1, r1, #11
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_I2C_MspInit+0x94>)
 8000a0e:	695a      	ldr	r2, [r3, #20]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	02db      	lsls	r3, r3, #11
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a1a:	2114      	movs	r1, #20
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	22c0      	movs	r2, #192	; 0xc0
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2212      	movs	r2, #18
 8000a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2203      	movs	r2, #3
 8000a34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_I2C_MspInit+0x98>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f000 fd5c 	bl	8001500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_I2C_MspInit+0x94>)
 8000a4a:	69da      	ldr	r2, [r3, #28]
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_I2C_MspInit+0x94>)
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	0389      	lsls	r1, r1, #14
 8000a52:	430a      	orrs	r2, r1
 8000a54:	61da      	str	r2, [r3, #28]
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_I2C_MspInit+0x94>)
 8000a58:	69da      	ldr	r2, [r3, #28]
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	039b      	lsls	r3, r3, #14
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b00a      	add	sp, #40	; 0x28
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	40021000 	.word	0x40021000
 8000a74:	48000400 	.word	0x48000400

08000a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d114      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a8e:	69da      	ldr	r2, [r3, #28]
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	61da      	str	r2, [r3, #28]
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	200f      	movs	r0, #15
 8000aaa:	f000 fb73 	bl	8001194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f000 fb85 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000ab4:	e01a      	b.n	8000aec <HAL_TIM_Base_MspInit+0x74>
  else if(htim_base->Instance==TIM16)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_TIM_Base_MspInit+0x80>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d115      	bne.n	8000aec <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_TIM_Base_MspInit+0x7c>)
 8000ac2:	699a      	ldr	r2, [r3, #24]
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_TIM_Base_MspInit+0x7c>)
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0289      	lsls	r1, r1, #10
 8000aca:	430a      	orrs	r2, r1
 8000acc:	619a      	str	r2, [r3, #24]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_TIM_Base_MspInit+0x7c>)
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	029b      	lsls	r3, r3, #10
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2015      	movs	r0, #21
 8000ae2:	f000 fb57 	bl	8001194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000ae6:	2015      	movs	r0, #21
 8000ae8:	f000 fb69 	bl	80011be <HAL_NVIC_EnableIRQ>
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b004      	add	sp, #16
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40014400 	.word	0x40014400

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	231c      	movs	r3, #28
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	0018      	movs	r0, r3
 8000b0a:	2314      	movs	r3, #20
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f003 fd58 	bl	80045c4 <memset>
  if(huart->Instance==USART2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a6a      	ldr	r2, [pc, #424]	; (8000cc4 <HAL_UART_MspInit+0x1c8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d13b      	bne.n	8000b96 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1e:	4b6a      	ldr	r3, [pc, #424]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000b20:	69da      	ldr	r2, [r3, #28]
 8000b22:	4b69      	ldr	r3, [pc, #420]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	0289      	lsls	r1, r1, #10
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	61da      	str	r2, [r3, #28]
 8000b2c:	4b66      	ldr	r3, [pc, #408]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000b2e:	69da      	ldr	r2, [r3, #28]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	029b      	lsls	r3, r3, #10
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b63      	ldr	r3, [pc, #396]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000b3c:	695a      	ldr	r2, [r3, #20]
 8000b3e:	4b62      	ldr	r3, [pc, #392]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0289      	lsls	r1, r1, #10
 8000b44:	430a      	orrs	r2, r1
 8000b46:	615a      	str	r2, [r3, #20]
 8000b48:	4b5f      	ldr	r3, [pc, #380]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000b4a:	695a      	ldr	r2, [r3, #20]
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	029b      	lsls	r3, r3, #10
 8000b50:	4013      	ands	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b56:	211c      	movs	r1, #28
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2202      	movs	r2, #2
 8000b62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2201      	movs	r2, #1
 8000b74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	187a      	adds	r2, r7, r1
 8000b78:	2390      	movs	r3, #144	; 0x90
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 fcbe 	bl	8001500 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	201c      	movs	r0, #28
 8000b8a:	f000 fb03 	bl	8001194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b8e:	201c      	movs	r0, #28
 8000b90:	f000 fb15 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b94:	e092      	b.n	8000cbc <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a4c      	ldr	r2, [pc, #304]	; (8000ccc <HAL_UART_MspInit+0x1d0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d000      	beq.n	8000ba2 <HAL_UART_MspInit+0xa6>
 8000ba0:	e08c      	b.n	8000cbc <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba2:	4b49      	ldr	r3, [pc, #292]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000ba4:	69da      	ldr	r2, [r3, #28]
 8000ba6:	4b48      	ldr	r3, [pc, #288]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	02c9      	lsls	r1, r1, #11
 8000bac:	430a      	orrs	r2, r1
 8000bae:	61da      	str	r2, [r3, #28]
 8000bb0:	4b45      	ldr	r3, [pc, #276]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000bb2:	69da      	ldr	r2, [r3, #28]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	02db      	lsls	r3, r3, #11
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b42      	ldr	r3, [pc, #264]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	02c9      	lsls	r1, r1, #11
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <HAL_UART_MspInit+0x1cc>)
 8000bce:	695a      	ldr	r2, [r3, #20]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	02db      	lsls	r3, r3, #11
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bda:	211c      	movs	r1, #28
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	22c0      	movs	r2, #192	; 0xc0
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2202      	movs	r2, #2
 8000be8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	4a34      	ldr	r2, [pc, #208]	; (8000cd0 <HAL_UART_MspInit+0x1d4>)
 8000c00:	0019      	movs	r1, r3
 8000c02:	0010      	movs	r0, r2
 8000c04:	f000 fc7c 	bl	8001500 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c0a:	4a33      	ldr	r2, [pc, #204]	; (8000cd8 <HAL_UART_MspInit+0x1dc>)
 8000c0c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c2e:	2220      	movs	r2, #32
 8000c30:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 fadc 	bl	80011f8 <HAL_DMA_Init>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000c44:	f7ff fea2 	bl	800098c <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <HAL_UART_MspInit+0x1e0>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <HAL_UART_MspInit+0x1e0>)
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	04c9      	lsls	r1, r1, #19
 8000c52:	430a      	orrs	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c5a:	671a      	str	r2, [r3, #112]	; 0x70
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HAL_UART_MspInit+0x1d8>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000c64:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x1e8>)
 8000c66:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 faaf 	bl	80011f8 <HAL_DMA_Init>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8000c9e:	f7ff fe75 	bl	800098c <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_UART_MspInit+0x1e0>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_UART_MspInit+0x1e0>)
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	04c9      	lsls	r1, r1, #19
 8000cac:	430a      	orrs	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000cb4:	66da      	str	r2, [r3, #108]	; 0x6c
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_UART_MspInit+0x1e4>)
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b00c      	add	sp, #48	; 0x30
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40004400 	.word	0x40004400
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40004800 	.word	0x40004800
 8000cd0:	48000400 	.word	0x48000400
 8000cd4:	200000ac 	.word	0x200000ac
 8000cd8:	40020030 	.word	0x40020030
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	200001e0 	.word	0x200001e0
 8000ce4:	4002001c 	.word	0x4002001c

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f958 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fda0 	bl	8001864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fb26 	bl	8001384 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <DMA1_Channel2_3_IRQHandler+0x20>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 fb22 	bl	8001384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	200001e0 	.word	0x200001e0
 8000d4c:	200000ac 	.word	0x200000ac

08000d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <TIM2_IRQHandler+0x14>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f002 f838 	bl	8002dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000610 	.word	0x20000610

08000d68 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <TIM16_IRQHandler+0x14>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f002 f82c 	bl	8002dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	200006e0 	.word	0x200006e0

08000d80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <USART2_IRQHandler+0x14>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 fcf2 	bl	8003770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	20000658 	.word	0x20000658

08000d98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e00a      	b.n	8000dc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000daa:	f7ff fac3 	bl	8000334 <__io_getchar>
 8000dae:	0001      	movs	r1, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf0      	blt.n	8000daa <_read+0x12>
	}

return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b006      	add	sp, #24
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e009      	b.n	8000df8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff fa8f 	bl	8000310 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbf1      	blt.n	8000de4 <_write+0x12>
	}
	return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b006      	add	sp, #24
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_close>:

int _close(int file)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	return -1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	0192      	lsls	r2, r2, #6
 8000e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_isatty>:

int _isatty(int file)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	return 1;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f003 fb6c 	bl	8004570 <__errno>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	425b      	negs	r3, r3
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	18d2      	adds	r2, r2, r3
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b006      	add	sp, #24
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20004000 	.word	0x20004000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	2000009c 	.word	0x2000009c
 8000ecc:	20000730 	.word	0x20000730

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee2:	490e      	ldr	r1, [pc, #56]	; (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef8:	4c0b      	ldr	r4, [pc, #44]	; (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f06:	f7ff ffe3 	bl	8000ed0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f0a:	f003 fb37 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff fa23 	bl	8000358 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   r0, =_estack
 8000f14:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f20:	0800510c 	.word	0x0800510c
  ldr r2, =_sbss
 8000f24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f28:	20000730 	.word	0x20000730

08000f2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_COMP_IRQHandler>
	...

08000f30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HAL_Init+0x24>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_Init+0x24>)
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 f809 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f46:	f7ff fd25 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_InitTick+0x60>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	0019      	movs	r1, r3
 8000f6a:	23fa      	movs	r3, #250	; 0xfa
 8000f6c:	0098      	lsls	r0, r3, #2
 8000f6e:	f7ff f8d3 	bl	8000118 <__udivsi3>
 8000f72:	0003      	movs	r3, r0
 8000f74:	0019      	movs	r1, r3
 8000f76:	0020      	movs	r0, r4
 8000f78:	f7ff f8ce 	bl	8000118 <__udivsi3>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 f92d 	bl	80011de <HAL_SYSTICK_Config>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e00f      	b.n	8000fac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d80b      	bhi.n	8000faa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	2301      	movs	r3, #1
 8000f96:	425b      	negs	r3, r3
 8000f98:	2200      	movs	r2, #0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 f8fa 	bl	8001194 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_InitTick+0x64>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	2000000c 	.word	0x2000000c
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	001a      	movs	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	18d2      	adds	r2, r2, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	20000728 	.word	0x20000728

08000fe4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <HAL_GetTick+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	20000728 	.word	0x20000728

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff fff0 	bl	8000fe4 <HAL_GetTick>
 8001004:	0003      	movs	r3, r0
 8001006:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3301      	adds	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_Delay+0x40>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	001a      	movs	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	189b      	adds	r3, r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	f7ff ffe0 	bl	8000fe4 <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b004      	add	sp, #16
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000000c 	.word	0x2000000c

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	0002      	movs	r2, r0
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b7f      	cmp	r3, #127	; 0x7f
 800104e:	d809      	bhi.n	8001064 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	001a      	movs	r2, r3
 8001056:	231f      	movs	r3, #31
 8001058:	401a      	ands	r2, r3
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_EnableIRQ+0x30>)
 800105c:	2101      	movs	r1, #1
 800105e:	4091      	lsls	r1, r2
 8001060:	000a      	movs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
  }
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	0002      	movs	r2, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b7f      	cmp	r3, #127	; 0x7f
 8001084:	d828      	bhi.n	80010d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001086:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <__NVIC_SetPriority+0xd4>)
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b25b      	sxtb	r3, r3
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	33c0      	adds	r3, #192	; 0xc0
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	589b      	ldr	r3, [r3, r2]
 8001096:	1dfa      	adds	r2, r7, #7
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	0011      	movs	r1, r2
 800109c:	2203      	movs	r2, #3
 800109e:	400a      	ands	r2, r1
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	21ff      	movs	r1, #255	; 0xff
 80010a4:	4091      	lsls	r1, r2
 80010a6:	000a      	movs	r2, r1
 80010a8:	43d2      	mvns	r2, r2
 80010aa:	401a      	ands	r2, r3
 80010ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	019b      	lsls	r3, r3, #6
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	401a      	ands	r2, r3
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	0018      	movs	r0, r3
 80010bc:	2303      	movs	r3, #3
 80010be:	4003      	ands	r3, r0
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c4:	481f      	ldr	r0, [pc, #124]	; (8001144 <__NVIC_SetPriority+0xd4>)
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	430a      	orrs	r2, r1
 80010d0:	33c0      	adds	r3, #192	; 0xc0
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010d6:	e031      	b.n	800113c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <__NVIC_SetPriority+0xd8>)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	0019      	movs	r1, r3
 80010e0:	230f      	movs	r3, #15
 80010e2:	400b      	ands	r3, r1
 80010e4:	3b08      	subs	r3, #8
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3306      	adds	r3, #6
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	18d3      	adds	r3, r2, r3
 80010ee:	3304      	adds	r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	1dfa      	adds	r2, r7, #7
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	0011      	movs	r1, r2
 80010f8:	2203      	movs	r2, #3
 80010fa:	400a      	ands	r2, r1
 80010fc:	00d2      	lsls	r2, r2, #3
 80010fe:	21ff      	movs	r1, #255	; 0xff
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	43d2      	mvns	r2, r2
 8001106:	401a      	ands	r2, r3
 8001108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	401a      	ands	r2, r3
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	0018      	movs	r0, r3
 8001118:	2303      	movs	r3, #3
 800111a:	4003      	ands	r3, r0
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <__NVIC_SetPriority+0xd8>)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	001c      	movs	r4, r3
 8001128:	230f      	movs	r3, #15
 800112a:	4023      	ands	r3, r4
 800112c:	3b08      	subs	r3, #8
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	430a      	orrs	r2, r1
 8001132:	3306      	adds	r3, #6
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	18c3      	adds	r3, r0, r3
 8001138:	3304      	adds	r3, #4
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b003      	add	sp, #12
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <SysTick_Config+0x40>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e010      	b.n	8001184 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <SysTick_Config+0x44>)
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	3a01      	subs	r2, #1
 8001168:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	2301      	movs	r3, #1
 800116c:	425b      	negs	r3, r3
 800116e:	2103      	movs	r1, #3
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ff7d 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <SysTick_Config+0x44>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x44>)
 800117e:	2207      	movs	r2, #7
 8001180:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001182:	2300      	movs	r3, #0
}
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}
 800118c:	00ffffff 	.word	0x00ffffff
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	210f      	movs	r1, #15
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	1c02      	adds	r2, r0, #0
 80011a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff ff5d 	bl	8001070 <__NVIC_SetPriority>
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	0002      	movs	r2, r0
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff ff33 	bl	800103c <__NVIC_EnableIRQ>
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff ffaf 	bl	800114c <SysTick_Config>
 80011ee:	0003      	movs	r3, r0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e036      	b.n	800127c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2221      	movs	r2, #33	; 0x21
 8001212:	2102      	movs	r1, #2
 8001214:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4a18      	ldr	r2, [pc, #96]	; (8001284 <HAL_DMA_Init+0x8c>)
 8001222:	4013      	ands	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800122e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	0018      	movs	r0, r3
 8001260:	f000 f932 	bl	80014c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2221      	movs	r2, #33	; 0x21
 800126e:	2101      	movs	r1, #1
 8001270:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2220      	movs	r2, #32
 8001276:	2100      	movs	r1, #0
 8001278:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}  
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b004      	add	sp, #16
 8001282:	bd80      	pop	{r7, pc}
 8001284:	ffffc00f 	.word	0xffffc00f

08001288 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2221      	movs	r2, #33	; 0x21
 8001294:	5c9b      	ldrb	r3, [r3, r2]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d008      	beq.n	80012ae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2204      	movs	r2, #4
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e020      	b.n	80012f0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	210e      	movs	r1, #14
 80012ba:	438a      	bics	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	438a      	bics	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d6:	2101      	movs	r1, #1
 80012d8:	4091      	lsls	r1, r2
 80012da:	000a      	movs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2221      	movs	r2, #33	; 0x21
 80012e2:	2101      	movs	r1, #1
 80012e4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2220      	movs	r2, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2221      	movs	r2, #33	; 0x21
 800130c:	5c9b      	ldrb	r3, [r3, r2]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d007      	beq.n	8001324 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2204      	movs	r2, #4
 8001318:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800131a:	230f      	movs	r3, #15
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e028      	b.n	8001376 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	210e      	movs	r1, #14
 8001330:	438a      	bics	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134c:	2101      	movs	r1, #1
 800134e:	4091      	lsls	r1, r2
 8001350:	000a      	movs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2221      	movs	r2, #33	; 0x21
 8001358:	2101      	movs	r1, #1
 800135a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2220      	movs	r2, #32
 8001360:	2100      	movs	r1, #0
 8001362:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	0010      	movs	r0, r2
 8001374:	4798      	blx	r3
    } 
  }
  return status;
 8001376:	230f      	movs	r3, #15
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b004      	add	sp, #16
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	2204      	movs	r2, #4
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4013      	ands	r3, r2
 80013aa:	d024      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x72>
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2204      	movs	r2, #4
 80013b0:	4013      	ands	r3, r2
 80013b2:	d020      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2220      	movs	r2, #32
 80013bc:	4013      	ands	r3, r2
 80013be:	d107      	bne.n	80013d0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2104      	movs	r1, #4
 80013cc:	438a      	bics	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d8:	2104      	movs	r1, #4
 80013da:	4091      	lsls	r1, r2
 80013dc:	000a      	movs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d100      	bne.n	80013ea <HAL_DMA_IRQHandler+0x66>
 80013e8:	e06a      	b.n	80014c0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	0010      	movs	r0, r2
 80013f2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80013f4:	e064      	b.n	80014c0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2202      	movs	r2, #2
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	d02b      	beq.n	800145e <HAL_DMA_IRQHandler+0xda>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2202      	movs	r2, #2
 800140a:	4013      	ands	r3, r2
 800140c:	d027      	beq.n	800145e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2220      	movs	r2, #32
 8001416:	4013      	ands	r3, r2
 8001418:	d10b      	bne.n	8001432 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	210a      	movs	r1, #10
 8001426:	438a      	bics	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2221      	movs	r2, #33	; 0x21
 800142e:	2101      	movs	r1, #1
 8001430:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143a:	2102      	movs	r1, #2
 800143c:	4091      	lsls	r1, r2
 800143e:	000a      	movs	r2, r1
 8001440:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	2100      	movs	r1, #0
 8001448:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	2b00      	cmp	r3, #0
 8001450:	d036      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	0010      	movs	r0, r2
 800145a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800145c:	e030      	b.n	80014c0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2208      	movs	r2, #8
 8001464:	409a      	lsls	r2, r3
 8001466:	0013      	movs	r3, r2
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4013      	ands	r3, r2
 800146c:	d028      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x13c>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2208      	movs	r2, #8
 8001472:	4013      	ands	r3, r2
 8001474:	d024      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	210e      	movs	r1, #14
 8001482:	438a      	bics	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	2101      	movs	r1, #1
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2221      	movs	r2, #33	; 0x21
 80014a0:	2101      	movs	r1, #1
 80014a2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2220      	movs	r2, #32
 80014a8:	2100      	movs	r1, #0
 80014aa:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	0010      	movs	r0, r2
 80014bc:	4798      	blx	r3
    }
   }
}  
 80014be:	e7ff      	b.n	80014c0 <HAL_DMA_IRQHandler+0x13c>
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b004      	add	sp, #16
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <DMA_CalcBaseAndBitshift+0x30>)
 80014d6:	4694      	mov	ip, r2
 80014d8:	4463      	add	r3, ip
 80014da:	2114      	movs	r1, #20
 80014dc:	0018      	movs	r0, r3
 80014de:	f7fe fe1b 	bl	8000118 <__udivsi3>
 80014e2:	0003      	movs	r3, r0
 80014e4:	009a      	lsls	r2, r3, #2
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a03      	ldr	r2, [pc, #12]	; (80014fc <DMA_CalcBaseAndBitshift+0x34>)
 80014ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	bffdfff8 	.word	0xbffdfff8
 80014fc:	40020000 	.word	0x40020000

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	e155      	b.n	80017bc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4091      	lsls	r1, r2
 800151a:	000a      	movs	r2, r1
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d100      	bne.n	8001528 <HAL_GPIO_Init+0x28>
 8001526:	e146      	b.n	80017b6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d00b      	beq.n	8001548 <HAL_GPIO_Init+0x48>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800153c:	2b11      	cmp	r3, #17
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b12      	cmp	r3, #18
 8001546:	d130      	bne.n	80015aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	409a      	lsls	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	43da      	mvns	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	409a      	lsls	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157e:	2201      	movs	r2, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	43da      	mvns	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	2201      	movs	r2, #1
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0xea>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b12      	cmp	r3, #18
 80015e8:	d123      	bne.n	8001632 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	58d3      	ldr	r3, [r2, r3]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2207      	movs	r2, #7
 80015fc:	4013      	ands	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	409a      	lsls	r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	43da      	mvns	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2107      	movs	r1, #7
 8001616:	400b      	ands	r3, r1
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	6939      	ldr	r1, [r7, #16]
 8001630:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	43da      	mvns	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2203      	movs	r2, #3
 8001650:	401a      	ands	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	055b      	lsls	r3, r3, #21
 800166e:	4013      	ands	r3, r2
 8001670:	d100      	bne.n	8001674 <HAL_GPIO_Init+0x174>
 8001672:	e0a0      	b.n	80017b6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001674:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_GPIO_Init+0x2d4>)
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <HAL_GPIO_Init+0x2d4>)
 800167a:	2101      	movs	r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	4b54      	ldr	r3, [pc, #336]	; (80017d4 <HAL_GPIO_Init+0x2d4>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2201      	movs	r2, #1
 8001686:	4013      	ands	r3, r2
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_GPIO_Init+0x2d8>)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	589b      	ldr	r3, [r3, r2]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2203      	movs	r2, #3
 800169e:	4013      	ands	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	409a      	lsls	r2, r3
 80016a6:	0013      	movs	r3, r2
 80016a8:	43da      	mvns	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	2390      	movs	r3, #144	; 0x90
 80016b4:	05db      	lsls	r3, r3, #23
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x1ee>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a47      	ldr	r2, [pc, #284]	; (80017dc <HAL_GPIO_Init+0x2dc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x1ea>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a46      	ldr	r2, [pc, #280]	; (80017e0 <HAL_GPIO_Init+0x2e0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x1e6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a45      	ldr	r2, [pc, #276]	; (80017e4 <HAL_GPIO_Init+0x2e4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x1e2>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <HAL_GPIO_Init+0x2e8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x1de>
 80016da:	2304      	movs	r3, #4
 80016dc:	e008      	b.n	80016f0 <HAL_GPIO_Init+0x1f0>
 80016de:	2305      	movs	r3, #5
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x1f0>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x1f0>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x1f0>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x1f0>
 80016ee:	2300      	movs	r3, #0
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	2103      	movs	r1, #3
 80016f4:	400a      	ands	r2, r1
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	4093      	lsls	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001700:	4935      	ldr	r1, [pc, #212]	; (80017d8 <HAL_GPIO_Init+0x2d8>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43da      	mvns	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4013      	ands	r3, r2
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001738:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43da      	mvns	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	4013      	ands	r3, r2
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	035b      	lsls	r3, r3, #13
 800177a:	4013      	ands	r3, r2
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43da      	mvns	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	039b      	lsls	r3, r3, #14
 80017a4:	4013      	ands	r3, r2
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	40da      	lsrs	r2, r3
 80017c4:	1e13      	subs	r3, r2, #0
 80017c6:	d000      	beq.n	80017ca <HAL_GPIO_Init+0x2ca>
 80017c8:	e6a2      	b.n	8001510 <HAL_GPIO_Init+0x10>
  } 
}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b006      	add	sp, #24
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000
 80017dc:	48000400 	.word	0x48000400
 80017e0:	48000800 	.word	0x48000800
 80017e4:	48000c00 	.word	0x48000c00
 80017e8:	48001000 	.word	0x48001000
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	000a      	movs	r2, r1
 80017fa:	1cbb      	adds	r3, r7, #2
 80017fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	1cba      	adds	r2, r7, #2
 8001804:	8812      	ldrh	r2, [r2, #0]
 8001806:	4013      	ands	r3, r2
 8001808:	d004      	beq.n	8001814 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800180a:	230f      	movs	r3, #15
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e003      	b.n	800181c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001814:	230f      	movs	r3, #15
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800181c:	230f      	movs	r3, #15
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	781b      	ldrb	r3, [r3, #0]
  }
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	0008      	movs	r0, r1
 8001834:	0011      	movs	r1, r2
 8001836:	1cbb      	adds	r3, r7, #2
 8001838:	1c02      	adds	r2, r0, #0
 800183a:	801a      	strh	r2, [r3, #0]
 800183c:	1c7b      	adds	r3, r7, #1
 800183e:	1c0a      	adds	r2, r1, #0
 8001840:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001842:	1c7b      	adds	r3, r7, #1
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184a:	1cbb      	adds	r3, r7, #2
 800184c:	881a      	ldrh	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001852:	e003      	b.n	800185c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001854:	1cbb      	adds	r3, r7, #2
 8001856:	881a      	ldrh	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	0002      	movs	r2, r0
 800186c:	1dbb      	adds	r3, r7, #6
 800186e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	1dba      	adds	r2, r7, #6
 8001876:	8812      	ldrh	r2, [r2, #0]
 8001878:	4013      	ands	r3, r2
 800187a:	d008      	beq.n	800188e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800187e:	1dba      	adds	r2, r7, #6
 8001880:	8812      	ldrh	r2, [r2, #0]
 8001882:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001884:	1dbb      	adds	r3, r7, #6
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff f809 	bl	80008a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e082      	b.n	80019b4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2241      	movs	r2, #65	; 0x41
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d107      	bne.n	80018ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2240      	movs	r2, #64	; 0x40
 80018be:	2100      	movs	r1, #0
 80018c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff f889 	bl	80009dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2241      	movs	r2, #65	; 0x41
 80018ce:	2124      	movs	r1, #36	; 0x24
 80018d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	438a      	bics	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4934      	ldr	r1, [pc, #208]	; (80019bc <HAL_I2C_Init+0x120>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4931      	ldr	r1, [pc, #196]	; (80019c0 <HAL_I2C_Init+0x124>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d108      	bne.n	800191a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0209      	lsls	r1, r1, #8
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	e007      	b.n	800192a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2184      	movs	r1, #132	; 0x84
 8001924:	0209      	lsls	r1, r1, #8
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d104      	bne.n	800193c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	491f      	ldr	r1, [pc, #124]	; (80019c4 <HAL_I2C_Init+0x128>)
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	491a      	ldr	r1, [pc, #104]	; (80019c0 <HAL_I2C_Init+0x124>)
 8001958:	400a      	ands	r2, r1
 800195a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	431a      	orrs	r2, r3
 8001966:	0011      	movs	r1, r2
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	021a      	lsls	r2, r3, #8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69d9      	ldr	r1, [r3, #28]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2241      	movs	r2, #65	; 0x41
 80019a0:	2120      	movs	r1, #32
 80019a2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2242      	movs	r2, #66	; 0x42
 80019ae:	2100      	movs	r1, #0
 80019b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	f0ffffff 	.word	0xf0ffffff
 80019c0:	ffff7fff 	.word	0xffff7fff
 80019c4:	02008000 	.word	0x02008000

080019c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	0008      	movs	r0, r1
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	0019      	movs	r1, r3
 80019d6:	230a      	movs	r3, #10
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	1c02      	adds	r2, r0, #0
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	2308      	movs	r3, #8
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	1c0a      	adds	r2, r1, #0
 80019e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2241      	movs	r2, #65	; 0x41
 80019ea:	5c9b      	ldrb	r3, [r3, r2]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d000      	beq.n	80019f4 <HAL_I2C_Master_Transmit+0x2c>
 80019f2:	e0e7      	b.n	8001bc4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	5c9b      	ldrb	r3, [r3, r2]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_I2C_Master_Transmit+0x3a>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e0e1      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1fe>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2240      	movs	r2, #64	; 0x40
 8001a06:	2101      	movs	r1, #1
 8001a08:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a0a:	f7ff faeb 	bl	8000fe4 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	0219      	lsls	r1, r3, #8
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2319      	movs	r3, #25
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f000 f8fc 	bl	8001c1c <I2C_WaitOnFlagUntilTimeout>
 8001a24:	1e03      	subs	r3, r0, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0cc      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2241      	movs	r2, #65	; 0x41
 8001a30:	2121      	movs	r1, #33	; 0x21
 8001a32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2242      	movs	r2, #66	; 0x42
 8001a38:	2110      	movs	r1, #16
 8001a3a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	18ba      	adds	r2, r7, r2
 8001a4e:	8812      	ldrh	r2, [r2, #0]
 8001a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	2bff      	cmp	r3, #255	; 0xff
 8001a60:	d911      	bls.n	8001a86 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	22ff      	movs	r2, #255	; 0xff
 8001a66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	045c      	lsls	r4, r3, #17
 8001a72:	230a      	movs	r3, #10
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	8819      	ldrh	r1, [r3, #0]
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	4b55      	ldr	r3, [pc, #340]	; (8001bd0 <HAL_I2C_Master_Transmit+0x208>)
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	0023      	movs	r3, r4
 8001a80:	f000 f9ec 	bl	8001e5c <I2C_TransferConfig>
 8001a84:	e075      	b.n	8001b72 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	049c      	lsls	r4, r3, #18
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	8819      	ldrh	r1, [r3, #0]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <HAL_I2C_Master_Transmit+0x208>)
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	0023      	movs	r3, r4
 8001aa8:	f000 f9d8 	bl	8001e5c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001aac:	e061      	b.n	8001b72 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 f8f0 	bl	8001c9a <I2C_WaitOnTXISFlagUntilTimeout>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e081      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03a      	beq.n	8001b72 <HAL_I2C_Master_Transmit+0x1aa>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d136      	bne.n	8001b72 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	f000 f883 	bl	8001c1c <I2C_WaitOnFlagUntilTimeout>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e053      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2bff      	cmp	r3, #255	; 0xff
 8001b26:	d911      	bls.n	8001b4c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	22ff      	movs	r2, #255	; 0xff
 8001b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	045c      	lsls	r4, r3, #17
 8001b38:	230a      	movs	r3, #10
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	8819      	ldrh	r1, [r3, #0]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	0023      	movs	r3, r4
 8001b46:	f000 f989 	bl	8001e5c <I2C_TransferConfig>
 8001b4a:	e012      	b.n	8001b72 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	049c      	lsls	r4, r3, #18
 8001b60:	230a      	movs	r3, #10
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	8819      	ldrh	r1, [r3, #0]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	0023      	movs	r3, r4
 8001b6e:	f000 f975 	bl	8001e5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d198      	bne.n	8001aae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 f8c8 	bl	8001d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b88:	1e03      	subs	r3, r0, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e01a      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2220      	movs	r2, #32
 8001b96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <HAL_I2C_Master_Transmit+0x20c>)
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2241      	movs	r2, #65	; 0x41
 8001bac:	2120      	movs	r1, #32
 8001bae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2242      	movs	r2, #66	; 0x42
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e000      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001bc4:	2302      	movs	r3, #2
  }
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b007      	add	sp, #28
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	80002000 	.word	0x80002000
 8001bd4:	fe00e800 	.word	0xfe00e800

08001bd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d103      	bne.n	8001bf6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d007      	beq.n	8001c14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2101      	movs	r1, #1
 8001c10:	430a      	orrs	r2, r1
 8001c12:	619a      	str	r2, [r3, #24]
  }
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	1dfb      	adds	r3, r7, #7
 8001c2a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c2c:	e021      	b.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	d01e      	beq.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c34:	f7ff f9d6 	bl	8000fe4 <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d302      	bcc.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d113      	bne.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	2220      	movs	r2, #32
 8001c50:	431a      	orrs	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2241      	movs	r2, #65	; 0x41
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2242      	movs	r2, #66	; 0x42
 8001c62:	2100      	movs	r1, #0
 8001c64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2240      	movs	r2, #64	; 0x40
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00f      	b.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	425a      	negs	r2, r3
 8001c82:	4153      	adcs	r3, r2
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	001a      	movs	r2, r3
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d0ce      	beq.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b004      	add	sp, #16
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ca6:	e02b      	b.n	8001d00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 f86e 	bl	8001d90 <I2C_IsAcknowledgeFailed>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d001      	beq.n	8001cbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e029      	b.n	8001d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	d01e      	beq.n	8001d00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc2:	f7ff f98f 	bl	8000fe4 <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d302      	bcc.n	8001cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d113      	bne.n	8001d00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	2220      	movs	r2, #32
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2241      	movs	r2, #65	; 0x41
 8001ce8:	2120      	movs	r1, #32
 8001cea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2242      	movs	r2, #66	; 0x42
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e007      	b.n	8001d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d1cc      	bne.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b004      	add	sp, #16
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d24:	e028      	b.n	8001d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f000 f82f 	bl	8001d90 <I2C_IsAcknowledgeFailed>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e026      	b.n	8001d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3a:	f7ff f953 	bl	8000fe4 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d302      	bcc.n	8001d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d113      	bne.n	8001d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	2220      	movs	r2, #32
 8001d56:	431a      	orrs	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2241      	movs	r2, #65	; 0x41
 8001d60:	2120      	movs	r1, #32
 8001d62:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2242      	movs	r2, #66	; 0x42
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	2100      	movs	r1, #0
 8001d72:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e007      	b.n	8001d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d1cf      	bne.n	8001d26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b004      	add	sp, #16
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2210      	movs	r2, #16
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d151      	bne.n	8001e4e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001daa:	e021      	b.n	8001df0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	3301      	adds	r3, #1
 8001db0:	d01e      	beq.n	8001df0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db2:	f7ff f917 	bl	8000fe4 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d302      	bcc.n	8001dc8 <I2C_IsAcknowledgeFailed+0x38>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d113      	bne.n	8001df0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	2220      	movs	r2, #32
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2241      	movs	r2, #65	; 0x41
 8001dd8:	2120      	movs	r1, #32
 8001dda:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2242      	movs	r2, #66	; 0x42
 8001de0:	2100      	movs	r1, #0
 8001de2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2240      	movs	r2, #64	; 0x40
 8001de8:	2100      	movs	r1, #0
 8001dea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e02f      	b.n	8001e50 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2220      	movs	r2, #32
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d1d6      	bne.n	8001dac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2210      	movs	r2, #16
 8001e04:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff fee1 	bl	8001bd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	490d      	ldr	r1, [pc, #52]	; (8001e58 <I2C_IsAcknowledgeFailed+0xc8>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2241      	movs	r2, #65	; 0x41
 8001e36:	2120      	movs	r1, #32
 8001e38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2242      	movs	r2, #66	; 0x42
 8001e3e:	2100      	movs	r1, #0
 8001e40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	2100      	movs	r1, #0
 8001e48:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	fe00e800 	.word	0xfe00e800

08001e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	0008      	movs	r0, r1
 8001e66:	0011      	movs	r1, r2
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	240a      	movs	r4, #10
 8001e6c:	193b      	adds	r3, r7, r4
 8001e6e:	1c02      	adds	r2, r0, #0
 8001e70:	801a      	strh	r2, [r3, #0]
 8001e72:	2009      	movs	r0, #9
 8001e74:	183b      	adds	r3, r7, r0
 8001e76:	1c0a      	adds	r2, r1, #0
 8001e78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	6a3a      	ldr	r2, [r7, #32]
 8001e82:	0d51      	lsrs	r1, r2, #21
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	00d2      	lsls	r2, r2, #3
 8001e88:	400a      	ands	r2, r1
 8001e8a:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <I2C_TransferConfig+0x68>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	43d2      	mvns	r2, r2
 8001e90:	401a      	ands	r2, r3
 8001e92:	0011      	movs	r1, r2
 8001e94:	193b      	adds	r3, r7, r4
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	059b      	lsls	r3, r3, #22
 8001e9a:	0d9a      	lsrs	r2, r3, #22
 8001e9c:	183b      	adds	r3, r7, r0
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	0418      	lsls	r0, r3, #16
 8001ea2:	23ff      	movs	r3, #255	; 0xff
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	4003      	ands	r3, r0
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b005      	add	sp, #20
 8001ec0:	bd90      	pop	{r4, r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	03ff63ff 	.word	0x03ff63ff

08001ec8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2241      	movs	r2, #65	; 0x41
 8001ed6:	5c9b      	ldrb	r3, [r3, r2]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d138      	bne.n	8001f50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e032      	b.n	8001f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2240      	movs	r2, #64	; 0x40
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2241      	movs	r2, #65	; 0x41
 8001ef8:	2124      	movs	r1, #36	; 0x24
 8001efa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4911      	ldr	r1, [pc, #68]	; (8001f5c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2241      	movs	r2, #65	; 0x41
 8001f40:	2120      	movs	r1, #32
 8001f42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2240      	movs	r2, #64	; 0x40
 8001f48:	2100      	movs	r1, #0
 8001f4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f50:	2302      	movs	r3, #2
  }
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	ffffefff 	.word	0xffffefff

08001f60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2241      	movs	r2, #65	; 0x41
 8001f6e:	5c9b      	ldrb	r3, [r3, r2]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d139      	bne.n	8001fea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	5c9b      	ldrb	r3, [r3, r2]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e033      	b.n	8001fec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	2101      	movs	r1, #1
 8001f8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2241      	movs	r2, #65	; 0x41
 8001f90:	2124      	movs	r1, #36	; 0x24
 8001f92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2241      	movs	r2, #65	; 0x41
 8001fda:	2120      	movs	r1, #32
 8001fdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2240      	movs	r2, #64	; 0x40
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
  }
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	fffff0ff 	.word	0xfffff0ff

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	f000 fb76 	bl	80026f8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2201      	movs	r2, #1
 8002012:	4013      	ands	r3, r2
 8002014:	d100      	bne.n	8002018 <HAL_RCC_OscConfig+0x20>
 8002016:	e08e      	b.n	8002136 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002018:	4bc5      	ldr	r3, [pc, #788]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	220c      	movs	r2, #12
 800201e:	4013      	ands	r3, r2
 8002020:	2b04      	cmp	r3, #4
 8002022:	d00e      	beq.n	8002042 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002024:	4bc2      	ldr	r3, [pc, #776]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	220c      	movs	r2, #12
 800202a:	4013      	ands	r3, r2
 800202c:	2b08      	cmp	r3, #8
 800202e:	d117      	bne.n	8002060 <HAL_RCC_OscConfig+0x68>
 8002030:	4bbf      	ldr	r3, [pc, #764]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	23c0      	movs	r3, #192	; 0xc0
 8002036:	025b      	lsls	r3, r3, #9
 8002038:	401a      	ands	r2, r3
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	025b      	lsls	r3, r3, #9
 800203e:	429a      	cmp	r2, r3
 8002040:	d10e      	bne.n	8002060 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002042:	4bbb      	ldr	r3, [pc, #748]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d100      	bne.n	8002050 <HAL_RCC_OscConfig+0x58>
 800204e:	e071      	b.n	8002134 <HAL_RCC_OscConfig+0x13c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d000      	beq.n	800205a <HAL_RCC_OscConfig+0x62>
 8002058:	e06c      	b.n	8002134 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	f000 fb4c 	bl	80026f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x80>
 8002068:	4bb1      	ldr	r3, [pc, #708]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4bb0      	ldr	r3, [pc, #704]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	0249      	lsls	r1, r1, #9
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e02f      	b.n	80020d8 <HAL_RCC_OscConfig+0xe0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10c      	bne.n	800209a <HAL_RCC_OscConfig+0xa2>
 8002080:	4bab      	ldr	r3, [pc, #684]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4baa      	ldr	r3, [pc, #680]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002086:	49ab      	ldr	r1, [pc, #684]	; (8002334 <HAL_RCC_OscConfig+0x33c>)
 8002088:	400a      	ands	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	4ba8      	ldr	r3, [pc, #672]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4ba7      	ldr	r3, [pc, #668]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002092:	49a9      	ldr	r1, [pc, #676]	; (8002338 <HAL_RCC_OscConfig+0x340>)
 8002094:	400a      	ands	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e01e      	b.n	80020d8 <HAL_RCC_OscConfig+0xe0>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d10e      	bne.n	80020c0 <HAL_RCC_OscConfig+0xc8>
 80020a2:	4ba3      	ldr	r3, [pc, #652]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4ba2      	ldr	r3, [pc, #648]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	02c9      	lsls	r1, r1, #11
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	4b9f      	ldr	r3, [pc, #636]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b9e      	ldr	r3, [pc, #632]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	0249      	lsls	r1, r1, #9
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xe0>
 80020c0:	4b9b      	ldr	r3, [pc, #620]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b9a      	ldr	r3, [pc, #616]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020c6:	499b      	ldr	r1, [pc, #620]	; (8002334 <HAL_RCC_OscConfig+0x33c>)
 80020c8:	400a      	ands	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	4b98      	ldr	r3, [pc, #608]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b97      	ldr	r3, [pc, #604]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020d2:	4999      	ldr	r1, [pc, #612]	; (8002338 <HAL_RCC_OscConfig+0x340>)
 80020d4:	400a      	ands	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d014      	beq.n	800210a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe ff80 	bl	8000fe4 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ea:	f7fe ff7b 	bl	8000fe4 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b64      	cmp	r3, #100	; 0x64
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e2fd      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fc:	4b8c      	ldr	r3, [pc, #560]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	4013      	ands	r3, r2
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0xf2>
 8002108:	e015      	b.n	8002136 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe ff6b 	bl	8000fe4 <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe ff66 	bl	8000fe4 <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e2e8      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b82      	ldr	r3, [pc, #520]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	4013      	ands	r3, r2
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x11c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2202      	movs	r2, #2
 800213c:	4013      	ands	r3, r2
 800213e:	d100      	bne.n	8002142 <HAL_RCC_OscConfig+0x14a>
 8002140:	e06c      	b.n	800221c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002142:	4b7b      	ldr	r3, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	220c      	movs	r2, #12
 8002148:	4013      	ands	r3, r2
 800214a:	d00e      	beq.n	800216a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800214c:	4b78      	ldr	r3, [pc, #480]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	220c      	movs	r2, #12
 8002152:	4013      	ands	r3, r2
 8002154:	2b08      	cmp	r3, #8
 8002156:	d11f      	bne.n	8002198 <HAL_RCC_OscConfig+0x1a0>
 8002158:	4b75      	ldr	r3, [pc, #468]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	23c0      	movs	r3, #192	; 0xc0
 800215e:	025b      	lsls	r3, r3, #9
 8002160:	401a      	ands	r2, r3
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	429a      	cmp	r2, r3
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d005      	beq.n	8002180 <HAL_RCC_OscConfig+0x188>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d001      	beq.n	8002180 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e2bb      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b6b      	ldr	r3, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	22f8      	movs	r2, #248	; 0xf8
 8002186:	4393      	bics	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00da      	lsls	r2, r3, #3
 8002190:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	e041      	b.n	800221c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d024      	beq.n	80021ea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b62      	ldr	r3, [pc, #392]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe ff1a 	bl	8000fe4 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7fe ff15 	bl	8000fe4 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e297      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d0f1      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b57      	ldr	r3, [pc, #348]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	22f8      	movs	r2, #248	; 0xf8
 80021d8:	4393      	bics	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00da      	lsls	r2, r3, #3
 80021e2:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e018      	b.n	800221c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b51      	ldr	r3, [pc, #324]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	438a      	bics	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe fef5 	bl	8000fe4 <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002200:	f7fe fef0 	bl	8000fe4 <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e272      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d1f1      	bne.n	8002200 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2208      	movs	r2, #8
 8002222:	4013      	ands	r3, r2
 8002224:	d036      	beq.n	8002294 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d019      	beq.n	8002262 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002234:	2101      	movs	r1, #1
 8002236:	430a      	orrs	r2, r1
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7fe fed3 	bl	8000fe4 <HAL_GetTick>
 800223e:	0003      	movs	r3, r0
 8002240:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002244:	f7fe fece 	bl	8000fe4 <HAL_GetTick>
 8002248:	0002      	movs	r2, r0
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e250      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2202      	movs	r2, #2
 800225c:	4013      	ands	r3, r2
 800225e:	d0f1      	beq.n	8002244 <HAL_RCC_OscConfig+0x24c>
 8002260:	e018      	b.n	8002294 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002262:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002266:	4b32      	ldr	r3, [pc, #200]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002268:	2101      	movs	r1, #1
 800226a:	438a      	bics	r2, r1
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7fe feb9 	bl	8000fe4 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002278:	f7fe feb4 	bl	8000fe4 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e236      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	2202      	movs	r2, #2
 8002290:	4013      	ands	r3, r2
 8002292:	d1f1      	bne.n	8002278 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2204      	movs	r2, #4
 800229a:	4013      	ands	r3, r2
 800229c:	d100      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2a8>
 800229e:	e0b5      	b.n	800240c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a0:	231f      	movs	r3, #31
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	4013      	ands	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	0549      	lsls	r1, r1, #21
 80022be:	430a      	orrs	r2, r1
 80022c0:	61da      	str	r2, [r3, #28]
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	055b      	lsls	r3, r3, #21
 80022ca:	4013      	ands	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022d0:	231f      	movs	r3, #31
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_RCC_OscConfig+0x344>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	d11a      	bne.n	800231a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_RCC_OscConfig+0x344>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_RCC_OscConfig+0x344>)
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	0049      	lsls	r1, r1, #1
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fe77 	bl	8000fe4 <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fc:	f7fe fe72 	bl	8000fe4 <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1f4      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_OscConfig+0x344>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4013      	ands	r3, r2
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10e      	bne.n	8002340 <HAL_RCC_OscConfig+0x348>
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002324:	6a1a      	ldr	r2, [r3, #32]
 8002326:	4b02      	ldr	r3, [pc, #8]	; (8002330 <HAL_RCC_OscConfig+0x338>)
 8002328:	2101      	movs	r1, #1
 800232a:	430a      	orrs	r2, r1
 800232c:	621a      	str	r2, [r3, #32]
 800232e:	e035      	b.n	800239c <HAL_RCC_OscConfig+0x3a4>
 8002330:	40021000 	.word	0x40021000
 8002334:	fffeffff 	.word	0xfffeffff
 8002338:	fffbffff 	.word	0xfffbffff
 800233c:	40007000 	.word	0x40007000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_OscConfig+0x36a>
 8002348:	4bca      	ldr	r3, [pc, #808]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	4bc9      	ldr	r3, [pc, #804]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800234e:	2101      	movs	r1, #1
 8002350:	438a      	bics	r2, r1
 8002352:	621a      	str	r2, [r3, #32]
 8002354:	4bc7      	ldr	r3, [pc, #796]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	4bc6      	ldr	r3, [pc, #792]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800235a:	2104      	movs	r1, #4
 800235c:	438a      	bics	r2, r1
 800235e:	621a      	str	r2, [r3, #32]
 8002360:	e01c      	b.n	800239c <HAL_RCC_OscConfig+0x3a4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x38c>
 800236a:	4bc2      	ldr	r3, [pc, #776]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	4bc1      	ldr	r3, [pc, #772]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002370:	2104      	movs	r1, #4
 8002372:	430a      	orrs	r2, r1
 8002374:	621a      	str	r2, [r3, #32]
 8002376:	4bbf      	ldr	r3, [pc, #764]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	4bbe      	ldr	r3, [pc, #760]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	621a      	str	r2, [r3, #32]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0x3a4>
 8002384:	4bbb      	ldr	r3, [pc, #748]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	4bba      	ldr	r3, [pc, #744]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	621a      	str	r2, [r3, #32]
 8002390:	4bb8      	ldr	r3, [pc, #736]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	4bb7      	ldr	r3, [pc, #732]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002396:	2104      	movs	r1, #4
 8002398:	438a      	bics	r2, r1
 800239a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d014      	beq.n	80023ce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7fe fe1e 	bl	8000fe4 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	e009      	b.n	80023c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe fe19 	bl	8000fe4 <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4aaf      	ldr	r2, [pc, #700]	; (8002678 <HAL_RCC_OscConfig+0x680>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e19a      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	4bac      	ldr	r3, [pc, #688]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x3b6>
 80023cc:	e013      	b.n	80023f6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fe09 	bl	8000fe4 <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d6:	e009      	b.n	80023ec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7fe fe04 	bl	8000fe4 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	4aa5      	ldr	r2, [pc, #660]	; (8002678 <HAL_RCC_OscConfig+0x680>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e185      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	4ba1      	ldr	r3, [pc, #644]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f6:	231f      	movs	r3, #31
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b9c      	ldr	r3, [pc, #624]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002406:	499d      	ldr	r1, [pc, #628]	; (800267c <HAL_RCC_OscConfig+0x684>)
 8002408:	400a      	ands	r2, r1
 800240a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2210      	movs	r2, #16
 8002412:	4013      	ands	r3, r2
 8002414:	d063      	beq.n	80024de <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d12a      	bne.n	8002474 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800241e:	4b95      	ldr	r3, [pc, #596]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002422:	4b94      	ldr	r3, [pc, #592]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002424:	2104      	movs	r1, #4
 8002426:	430a      	orrs	r2, r1
 8002428:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800242a:	4b92      	ldr	r3, [pc, #584]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800242c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242e:	4b91      	ldr	r3, [pc, #580]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002430:	2101      	movs	r1, #1
 8002432:	430a      	orrs	r2, r1
 8002434:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe fdd5 	bl	8000fe4 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002440:	f7fe fdd0 	bl	8000fe4 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e152      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002452:	4b88      	ldr	r3, [pc, #544]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d0f1      	beq.n	8002440 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800245c:	4b85      	ldr	r3, [pc, #532]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	22f8      	movs	r2, #248	; 0xf8
 8002462:	4393      	bics	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	00da      	lsls	r2, r3, #3
 800246c:	4b81      	ldr	r3, [pc, #516]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800246e:	430a      	orrs	r2, r1
 8002470:	635a      	str	r2, [r3, #52]	; 0x34
 8002472:	e034      	b.n	80024de <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	3305      	adds	r3, #5
 800247a:	d111      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800247c:	4b7d      	ldr	r3, [pc, #500]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800247e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002480:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002482:	2104      	movs	r1, #4
 8002484:	438a      	bics	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002488:	4b7a      	ldr	r3, [pc, #488]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	22f8      	movs	r2, #248	; 0xf8
 800248e:	4393      	bics	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	00da      	lsls	r2, r3, #3
 8002498:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800249a:	430a      	orrs	r2, r1
 800249c:	635a      	str	r2, [r3, #52]	; 0x34
 800249e:	e01e      	b.n	80024de <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024a0:	4b74      	ldr	r3, [pc, #464]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a4:	4b73      	ldr	r3, [pc, #460]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024a6:	2104      	movs	r1, #4
 80024a8:	430a      	orrs	r2, r1
 80024aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024ac:	4b71      	ldr	r3, [pc, #452]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b0:	4b70      	ldr	r3, [pc, #448]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	438a      	bics	r2, r1
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7fe fd94 	bl	8000fe4 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024c2:	f7fe fd8f 	bl	8000fe4 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e111      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024d4:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d8:	2202      	movs	r2, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	d1f1      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2220      	movs	r2, #32
 80024e4:	4013      	ands	r3, r2
 80024e6:	d05c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024e8:	4b62      	ldr	r3, [pc, #392]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	220c      	movs	r2, #12
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b0c      	cmp	r3, #12
 80024f2:	d00e      	beq.n	8002512 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024f4:	4b5f      	ldr	r3, [pc, #380]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	220c      	movs	r2, #12
 80024fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d114      	bne.n	800252a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002500:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	23c0      	movs	r3, #192	; 0xc0
 8002506:	025b      	lsls	r3, r3, #9
 8002508:	401a      	ands	r2, r3
 800250a:	23c0      	movs	r3, #192	; 0xc0
 800250c:	025b      	lsls	r3, r3, #9
 800250e:	429a      	cmp	r2, r3
 8002510:	d10b      	bne.n	800252a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002512:	4b58      	ldr	r3, [pc, #352]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	025b      	lsls	r3, r3, #9
 800251a:	4013      	ands	r3, r2
 800251c:	d040      	beq.n	80025a0 <HAL_RCC_OscConfig+0x5a8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d03c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0e6      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01b      	beq.n	800256a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002536:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0249      	lsls	r1, r1, #9
 800253c:	430a      	orrs	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe fd50 	bl	8000fe4 <HAL_GetTick>
 8002544:	0003      	movs	r3, r0
 8002546:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800254a:	f7fe fd4b 	bl	8000fe4 <HAL_GetTick>
 800254e:	0002      	movs	r2, r0
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0cd      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800255c:	4b45      	ldr	r3, [pc, #276]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800255e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	4013      	ands	r3, r2
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x552>
 8002568:	e01b      	b.n	80025a2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800256a:	4b42      	ldr	r3, [pc, #264]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800256c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002570:	4943      	ldr	r1, [pc, #268]	; (8002680 <HAL_RCC_OscConfig+0x688>)
 8002572:	400a      	ands	r2, r1
 8002574:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7fe fd35 	bl	8000fe4 <HAL_GetTick>
 800257a:	0003      	movs	r3, r0
 800257c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002580:	f7fe fd30 	bl	8000fe4 <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0b2      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002592:	4b38      	ldr	r3, [pc, #224]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	4013      	ands	r3, r2
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x588>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025a0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d100      	bne.n	80025ac <HAL_RCC_OscConfig+0x5b4>
 80025aa:	e0a4      	b.n	80026f6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ac:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	220c      	movs	r2, #12
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d100      	bne.n	80025ba <HAL_RCC_OscConfig+0x5c2>
 80025b8:	e078      	b.n	80026ac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d14c      	bne.n	800265c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025c8:	492e      	ldr	r1, [pc, #184]	; (8002684 <HAL_RCC_OscConfig+0x68c>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fd09 	bl	8000fe4 <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fd04 	bl	8000fe4 <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e086      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	049b      	lsls	r3, r3, #18
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	220f      	movs	r2, #15
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002606:	430a      	orrs	r2, r1
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <HAL_RCC_OscConfig+0x690>)
 8002610:	4013      	ands	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	431a      	orrs	r2, r3
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002620:	430a      	orrs	r2, r1
 8002622:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	0449      	lsls	r1, r1, #17
 800262e:	430a      	orrs	r2, r1
 8002630:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fcd7 	bl	8000fe4 <HAL_GetTick>
 8002636:	0003      	movs	r3, r0
 8002638:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fcd2 	bl	8000fe4 <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e054      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	049b      	lsls	r3, r3, #18
 8002656:	4013      	ands	r3, r2
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x644>
 800265a:	e04c      	b.n	80026f6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_RCC_OscConfig+0x67c>)
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <HAL_RCC_OscConfig+0x68c>)
 8002664:	400a      	ands	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fcbc 	bl	8000fe4 <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x6a6>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	40021000 	.word	0x40021000
 8002678:	00001388 	.word	0x00001388
 800267c:	efffffff 	.word	0xefffffff
 8002680:	fffeffff 	.word	0xfffeffff
 8002684:	feffffff 	.word	0xfeffffff
 8002688:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fcaa 	bl	8000fe4 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e02c      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <HAL_RCC_OscConfig+0x708>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	049b      	lsls	r3, r3, #18
 80026a6:	4013      	ands	r3, r2
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x694>
 80026aa:	e024      	b.n	80026f6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01f      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_RCC_OscConfig+0x708>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x708>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	23c0      	movs	r3, #192	; 0xc0
 80026c8:	025b      	lsls	r3, r3, #9
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d10e      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	220f      	movs	r2, #15
 80026d8:	401a      	ands	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	23f0      	movs	r3, #240	; 0xf0
 80026e6:	039b      	lsls	r3, r3, #14
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b008      	add	sp, #32
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0bf      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d911      	bls.n	800274a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b5e      	ldr	r3, [pc, #376]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2201      	movs	r2, #1
 800272c:	4393      	bics	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	4013      	ands	r3, r2
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d001      	beq.n	800274a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0a6      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d015      	beq.n	8002780 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2204      	movs	r2, #4
 800275a:	4013      	ands	r3, r2
 800275c:	d006      	beq.n	800276c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800275e:	4b51      	ldr	r3, [pc, #324]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002764:	21e0      	movs	r1, #224	; 0xe0
 8002766:	00c9      	lsls	r1, r1, #3
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	22f0      	movs	r2, #240	; 0xf0
 8002772:	4393      	bics	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
 8002788:	d04c      	beq.n	8002824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	4013      	ands	r3, r2
 800279c:	d120      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e07a      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	049b      	lsls	r3, r3, #18
 80027b2:	4013      	ands	r3, r2
 80027b4:	d114      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06e      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027c2:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	025b      	lsls	r3, r3, #9
 80027ca:	4013      	ands	r3, r2
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e062      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2202      	movs	r2, #2
 80027d8:	4013      	ands	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e05b      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2203      	movs	r2, #3
 80027e6:	4393      	bics	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fbf6 	bl	8000fe4 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fc:	e009      	b.n	8002812 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fe:	f7fe fbf1 	bl	8000fe4 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_RCC_ClockConfig+0x1a4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e042      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	220c      	movs	r2, #12
 8002818:	401a      	ands	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d1ec      	bne.n	80027fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002824:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4013      	ands	r3, r2
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d211      	bcs.n	8002856 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2201      	movs	r2, #1
 8002838:	4393      	bics	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_RCC_ClockConfig+0x19c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2201      	movs	r2, #1
 800284a:	4013      	ands	r3, r2
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e020      	b.n	8002898 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2204      	movs	r2, #4
 800285c:	4013      	ands	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a11      	ldr	r2, [pc, #68]	; (80028ac <HAL_RCC_ClockConfig+0x1a8>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002874:	f000 f820 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8002878:	0001      	movs	r1, r0
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1a0>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	220f      	movs	r2, #15
 8002882:	4013      	ands	r3, r2
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1ac>)
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	000a      	movs	r2, r1
 800288a:	40da      	lsrs	r2, r3
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1b0>)
 800288e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe fb61 	bl	8000f58 <HAL_InitTick>
  
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b004      	add	sp, #16
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	00001388 	.word	0x00001388
 80028ac:	fffff8ff 	.word	0xfffff8ff
 80028b0:	08005088 	.word	0x08005088
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b08f      	sub	sp, #60	; 0x3c
 80028bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80028be:	2314      	movs	r3, #20
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	4a37      	ldr	r2, [pc, #220]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xe8>)
 80028c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028c6:	c313      	stmia	r3!, {r0, r1, r4}
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4a35      	ldr	r2, [pc, #212]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xec>)
 80028d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028d2:	c313      	stmia	r3!, {r0, r1, r4}
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e0:	2300      	movs	r3, #0
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80028ec:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	220c      	movs	r2, #12
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d006      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x52>
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d043      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0xd0>
 8002900:	2b04      	cmp	r3, #4
 8002902:	d144      	bne.n	800298e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002908:	e044      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	220f      	movs	r2, #15
 8002910:	4013      	ands	r3, r2
 8002912:	2214      	movs	r2, #20
 8002914:	18ba      	adds	r2, r7, r2
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	220f      	movs	r2, #15
 8002920:	4013      	ands	r3, r2
 8002922:	1d3a      	adds	r2, r7, #4
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292a:	23c0      	movs	r3, #192	; 0xc0
 800292c:	025b      	lsls	r3, r3, #9
 800292e:	401a      	ands	r2, r3
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	025b      	lsls	r3, r3, #9
 8002934:	429a      	cmp	r2, r3
 8002936:	d109      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293a:	481c      	ldr	r0, [pc, #112]	; (80029ac <HAL_RCC_GetSysClockFreq+0xf4>)
 800293c:	f7fd fbec 	bl	8000118 <__udivsi3>
 8002940:	0003      	movs	r3, r0
 8002942:	001a      	movs	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	4353      	muls	r3, r2
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
 800294a:	e01a      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800294c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294e:	23c0      	movs	r3, #192	; 0xc0
 8002950:	025b      	lsls	r3, r3, #9
 8002952:	401a      	ands	r2, r3
 8002954:	23c0      	movs	r3, #192	; 0xc0
 8002956:	025b      	lsls	r3, r3, #9
 8002958:	429a      	cmp	r2, r3
 800295a:	d109      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800295c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800295e:	4814      	ldr	r0, [pc, #80]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002960:	f7fd fbda 	bl	8000118 <__udivsi3>
 8002964:	0003      	movs	r3, r0
 8002966:	001a      	movs	r2, r3
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	4353      	muls	r3, r2
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
 800296e:	e008      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002972:	480e      	ldr	r0, [pc, #56]	; (80029ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002974:	f7fd fbd0 	bl	8000118 <__udivsi3>
 8002978:	0003      	movs	r3, r0
 800297a:	001a      	movs	r2, r3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	4353      	muls	r3, r2
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002986:	e005      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800298c:	e002      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002992:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b00f      	add	sp, #60	; 0x3c
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	08005068 	.word	0x08005068
 80029a4:	08005078 	.word	0x08005078
 80029a8:	40021000 	.word	0x40021000
 80029ac:	007a1200 	.word	0x007a1200
 80029b0:	02dc6c00 	.word	0x02dc6c00

080029b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	20000004 	.word	0x20000004

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80029cc:	f7ff fff2 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029d0:	0001      	movs	r1, r0
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	2207      	movs	r2, #7
 80029da:	4013      	ands	r3, r2
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029de:	5cd3      	ldrb	r3, [r2, r3]
 80029e0:	40d9      	lsrs	r1, r3
 80029e2:	000b      	movs	r3, r1
}    
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	40021000 	.word	0x40021000
 80029f0:	08005098 	.word	0x08005098

080029f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	025b      	lsls	r3, r3, #9
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d100      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a10:	e08f      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a12:	2317      	movs	r3, #23
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	055b      	lsls	r3, r3, #21
 8002a22:	4013      	ands	r3, r2
 8002a24:	d111      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	0549      	lsls	r1, r1, #21
 8002a30:	430a      	orrs	r2, r1
 8002a32:	61da      	str	r2, [r3, #28]
 8002a34:	4b68      	ldr	r3, [pc, #416]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	055b      	lsls	r3, r3, #21
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a42:	2317      	movs	r3, #23
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	d11a      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b60      	ldr	r3, [pc, #384]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	0049      	lsls	r1, r1, #1
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a64:	f7fe fabe 	bl	8000fe4 <HAL_GetTick>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe fab9 	bl	8000fe4 <HAL_GetTick>
 8002a72:	0002      	movs	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	; 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0a6      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b56      	ldr	r3, [pc, #344]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a8c:	4b52      	ldr	r3, [pc, #328]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a8e:	6a1a      	ldr	r2, [r3, #32]
 8002a90:	23c0      	movs	r3, #192	; 0xc0
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d034      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	23c0      	movs	r3, #192	; 0xc0
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d02c      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aae:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4a4b      	ldr	r2, [pc, #300]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ab8:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	0249      	lsls	r1, r1, #9
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac6:	4b44      	ldr	r3, [pc, #272]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002acc:	4945      	ldr	r1, [pc, #276]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fa80 	bl	8000fe4 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae8:	e009      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fe fa7b 	bl	8000fe4 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e067      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	2202      	movs	r2, #2
 8002b04:	4013      	ands	r3, r2
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b08:	4b33      	ldr	r3, [pc, #204]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4a34      	ldr	r2, [pc, #208]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b1c:	2317      	movs	r3, #23
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d105      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b2c:	492f      	ldr	r1, [pc, #188]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d009      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b3c:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	2203      	movs	r2, #3
 8002b42:	4393      	bics	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2202      	movs	r2, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	4013      	ands	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	4393      	bics	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	029b      	lsls	r3, r3, #10
 8002b94:	4013      	ands	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	4393      	bics	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	2240      	movs	r2, #64	; 0x40
 8002bbe:	4393      	bics	r3, r2
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b006      	add	sp, #24
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	fffffcff 	.word	0xfffffcff
 8002be4:	fffeffff 	.word	0xfffeffff
 8002be8:	00001388 	.word	0x00001388
 8002bec:	efffffff 	.word	0xefffffff
 8002bf0:	fffcffff 	.word	0xfffcffff

08002bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e042      	b.n	8002c8c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	223d      	movs	r2, #61	; 0x3d
 8002c0a:	5c9b      	ldrb	r3, [r3, r2]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	223c      	movs	r2, #60	; 0x3c
 8002c16:	2100      	movs	r1, #0
 8002c18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7fd ff2b 	bl	8000a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	223d      	movs	r2, #61	; 0x3d
 8002c26:	2102      	movs	r1, #2
 8002c28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3304      	adds	r3, #4
 8002c32:	0019      	movs	r1, r3
 8002c34:	0010      	movs	r0, r2
 8002c36:	f000 fac5 	bl	80031c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2246      	movs	r2, #70	; 0x46
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223e      	movs	r2, #62	; 0x3e
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	223f      	movs	r2, #63	; 0x3f
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2240      	movs	r2, #64	; 0x40
 8002c56:	2101      	movs	r1, #1
 8002c58:	5499      	strb	r1, [r3, r2]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2241      	movs	r2, #65	; 0x41
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2242      	movs	r2, #66	; 0x42
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2243      	movs	r2, #67	; 0x43
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2244      	movs	r2, #68	; 0x44
 8002c76:	2101      	movs	r1, #1
 8002c78:	5499      	strb	r1, [r3, r2]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2245      	movs	r2, #69	; 0x45
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	223d      	movs	r2, #61	; 0x3d
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b002      	add	sp, #8
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	223d      	movs	r2, #61	; 0x3d
 8002ca0:	5c9b      	ldrb	r3, [r3, r2]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e033      	b.n	8002d14 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	223d      	movs	r2, #61	; 0x3d
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <HAL_TIM_Base_Start+0x88>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00f      	beq.n	8002cde <HAL_TIM_Base_Start+0x4a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	05db      	lsls	r3, r3, #23
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d009      	beq.n	8002cde <HAL_TIM_Base_Start+0x4a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_TIM_Base_Start+0x8c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_TIM_Base_Start+0x4a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <HAL_TIM_Base_Start+0x90>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d111      	bne.n	8002d02 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b06      	cmp	r3, #6
 8002cee:	d010      	beq.n	8002d12 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d00:	e007      	b.n	8002d12 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b004      	add	sp, #16
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40014000 	.word	0x40014000

08002d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	223d      	movs	r2, #61	; 0x3d
 8002d34:	5c9b      	ldrb	r3, [r3, r2]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d001      	beq.n	8002d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e03b      	b.n	8002db8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	223d      	movs	r2, #61	; 0x3d
 8002d44:	2102      	movs	r1, #2
 8002d46:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2101      	movs	r1, #1
 8002d54:	430a      	orrs	r2, r1
 8002d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_TIM_Base_Start_IT+0x98>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00f      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x5a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	05db      	lsls	r3, r3, #23
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d009      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x5a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x5a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d111      	bne.n	8002da6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2207      	movs	r2, #7
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b06      	cmp	r3, #6
 8002d92:	d010      	beq.n	8002db6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2101      	movs	r1, #1
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da4:	e007      	b.n	8002db6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b004      	add	sp, #16
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40014000 	.word	0x40014000

08002dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d124      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2202      	movs	r2, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d11d      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2203      	movs	r2, #3
 8002df6:	4252      	negs	r2, r2
 8002df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2203      	movs	r2, #3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 f9c0 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e007      	b.n	8002e26 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 f9b3 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 f9bf 	bl	80031a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2204      	movs	r2, #4
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d125      	bne.n	8002e86 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2204      	movs	r2, #4
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d11e      	bne.n	8002e86 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	4252      	negs	r2, r2
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	23c0      	movs	r3, #192	; 0xc0
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4013      	ands	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 f993 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 8002e6e:	e007      	b.n	8002e80 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 f986 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f992 	bl	80031a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d124      	bne.n	8002ede <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d11d      	bne.n	8002ede <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2209      	movs	r2, #9
 8002ea8:	4252      	negs	r2, r2
 8002eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 f967 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 8002ec6:	e007      	b.n	8002ed8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 f95a 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 f966 	bl	80031a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d125      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d11e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2211      	movs	r2, #17
 8002f00:	4252      	negs	r2, r2
 8002f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2208      	movs	r2, #8
 8002f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	23c0      	movs	r3, #192	; 0xc0
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d004      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f93a 	bl	8003194 <HAL_TIM_IC_CaptureCallback>
 8002f20:	e007      	b.n	8002f32 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f92d 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 f939 	bl	80031a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10f      	bne.n	8002f66 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d108      	bne.n	8002f66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4252      	negs	r2, r2
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 f907 	bl	8003174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d10f      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b80      	cmp	r3, #128	; 0x80
 8002f80:	d108      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2281      	movs	r2, #129	; 0x81
 8002f88:	4252      	negs	r2, r2
 8002f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 fa98 	bl	80034c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2240      	movs	r2, #64	; 0x40
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d108      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2241      	movs	r2, #65	; 0x41
 8002fb6:	4252      	negs	r2, r2
 8002fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 f8f9 	bl	80031b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d10f      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d108      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2221      	movs	r2, #33	; 0x21
 8002fe4:	4252      	negs	r2, r2
 8002fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 fa62 	bl	80034b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223c      	movs	r2, #60	; 0x3c
 8003006:	5c9b      	ldrb	r3, [r3, r2]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIM_ConfigClockSource+0x18>
 800300c:	2302      	movs	r3, #2
 800300e:	e0ab      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x170>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	223c      	movs	r2, #60	; 0x3c
 8003014:	2101      	movs	r1, #1
 8003016:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	223d      	movs	r2, #61	; 0x3d
 800301c:	2102      	movs	r1, #2
 800301e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2277      	movs	r2, #119	; 0x77
 800302c:	4393      	bics	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a4f      	ldr	r2, [pc, #316]	; (8003170 <HAL_TIM_ConfigClockSource+0x178>)
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d100      	bne.n	800304a <HAL_TIM_ConfigClockSource+0x52>
 8003048:	e06b      	b.n	8003122 <HAL_TIM_ConfigClockSource+0x12a>
 800304a:	d80e      	bhi.n	800306a <HAL_TIM_ConfigClockSource+0x72>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d100      	bne.n	8003052 <HAL_TIM_ConfigClockSource+0x5a>
 8003050:	e077      	b.n	8003142 <HAL_TIM_ConfigClockSource+0x14a>
 8003052:	d803      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x64>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d100      	bne.n	800305a <HAL_TIM_ConfigClockSource+0x62>
 8003058:	e073      	b.n	8003142 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800305a:	e07c      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800305c:	2b20      	cmp	r3, #32
 800305e:	d100      	bne.n	8003062 <HAL_TIM_ConfigClockSource+0x6a>
 8003060:	e06f      	b.n	8003142 <HAL_TIM_ConfigClockSource+0x14a>
 8003062:	2b30      	cmp	r3, #48	; 0x30
 8003064:	d100      	bne.n	8003068 <HAL_TIM_ConfigClockSource+0x70>
 8003066:	e06c      	b.n	8003142 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003068:	e075      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800306a:	2b70      	cmp	r3, #112	; 0x70
 800306c:	d00e      	beq.n	800308c <HAL_TIM_ConfigClockSource+0x94>
 800306e:	d804      	bhi.n	800307a <HAL_TIM_ConfigClockSource+0x82>
 8003070:	2b50      	cmp	r3, #80	; 0x50
 8003072:	d036      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0xea>
 8003074:	2b60      	cmp	r3, #96	; 0x60
 8003076:	d044      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003078:	e06d      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	0152      	lsls	r2, r2, #5
 800307e:	4293      	cmp	r3, r2
 8003080:	d068      	beq.n	8003154 <HAL_TIM_ConfigClockSource+0x15c>
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	0192      	lsls	r2, r2, #6
 8003086:	4293      	cmp	r3, r2
 8003088:	d017      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800308a:	e064      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6899      	ldr	r1, [r3, #8]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f000 f98c 	bl	80033b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2277      	movs	r2, #119	; 0x77
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	609a      	str	r2, [r3, #8]
      break;
 80030b8:	e04d      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6899      	ldr	r1, [r3, #8]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f000 f975 	bl	80033b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	01c9      	lsls	r1, r1, #7
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
      break;
 80030e0:	e039      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	001a      	movs	r2, r3
 80030f0:	f000 f8e8 	bl	80032c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2150      	movs	r1, #80	; 0x50
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 f942 	bl	8003384 <TIM_ITRx_SetConfig>
      break;
 8003100:	e029      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	001a      	movs	r2, r3
 8003110:	f000 f906 	bl	8003320 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2160      	movs	r1, #96	; 0x60
 800311a:	0018      	movs	r0, r3
 800311c:	f000 f932 	bl	8003384 <TIM_ITRx_SetConfig>
      break;
 8003120:	e019      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	001a      	movs	r2, r3
 8003130:	f000 f8c8 	bl	80032c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2140      	movs	r1, #64	; 0x40
 800313a:	0018      	movs	r0, r3
 800313c:	f000 f922 	bl	8003384 <TIM_ITRx_SetConfig>
      break;
 8003140:	e009      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0019      	movs	r1, r3
 800314c:	0010      	movs	r0, r2
 800314e:	f000 f919 	bl	8003384 <TIM_ITRx_SetConfig>
        break;
 8003152:	e000      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003154:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	223d      	movs	r2, #61	; 0x3d
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	223c      	movs	r2, #60	; 0x3c
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b004      	add	sp, #16
 800316e:	bd80      	pop	{r7, pc}
 8003170:	ffff00ff 	.word	0xffff00ff

08003174 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <TIM_Base_SetConfig+0xe4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d008      	beq.n	80031ee <TIM_Base_SetConfig+0x2a>
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	05db      	lsls	r3, r3, #23
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0x2a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a30      	ldr	r2, [pc, #192]	; (80032ac <TIM_Base_SetConfig+0xe8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2270      	movs	r2, #112	; 0x70
 80031f2:	4393      	bics	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <TIM_Base_SetConfig+0xe4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d018      	beq.n	800323a <TIM_Base_SetConfig+0x76>
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	05db      	lsls	r3, r3, #23
 800320e:	429a      	cmp	r2, r3
 8003210:	d013      	beq.n	800323a <TIM_Base_SetConfig+0x76>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <TIM_Base_SetConfig+0xe8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00f      	beq.n	800323a <TIM_Base_SetConfig+0x76>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <TIM_Base_SetConfig+0xec>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00b      	beq.n	800323a <TIM_Base_SetConfig+0x76>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <TIM_Base_SetConfig+0xf0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <TIM_Base_SetConfig+0x76>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <TIM_Base_SetConfig+0xf4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d003      	beq.n	800323a <TIM_Base_SetConfig+0x76>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a21      	ldr	r2, [pc, #132]	; (80032bc <TIM_Base_SetConfig+0xf8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d108      	bne.n	800324c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <TIM_Base_SetConfig+0xfc>)
 800323e:	4013      	ands	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	4393      	bics	r3, r2
 8003252:	001a      	movs	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a0c      	ldr	r2, [pc, #48]	; (80032a8 <TIM_Base_SetConfig+0xe4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00b      	beq.n	8003292 <TIM_Base_SetConfig+0xce>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <TIM_Base_SetConfig+0xf0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <TIM_Base_SetConfig+0xce>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <TIM_Base_SetConfig+0xf4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d003      	beq.n	8003292 <TIM_Base_SetConfig+0xce>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <TIM_Base_SetConfig+0xf8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d103      	bne.n	800329a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	615a      	str	r2, [r3, #20]
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b004      	add	sp, #16
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40012c00 	.word	0x40012c00
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40002000 	.word	0x40002000
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800
 80032c0:	fffffcff 	.word	0xfffffcff

080032c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	2201      	movs	r2, #1
 80032dc:	4393      	bics	r3, r2
 80032de:	001a      	movs	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	22f0      	movs	r2, #240	; 0xf0
 80032ee:	4393      	bics	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	220a      	movs	r2, #10
 8003300:	4393      	bics	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b006      	add	sp, #24
 800331e:	bd80      	pop	{r7, pc}

08003320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	2210      	movs	r2, #16
 8003332:	4393      	bics	r3, r2
 8003334:	001a      	movs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <TIM_TI2_ConfigInputStage+0x60>)
 800334a:	4013      	ands	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	031b      	lsls	r3, r3, #12
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	22a0      	movs	r2, #160	; 0xa0
 800335c:	4393      	bics	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	621a      	str	r2, [r3, #32]
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b006      	add	sp, #24
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	ffff0fff 	.word	0xffff0fff

08003384 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2270      	movs	r2, #112	; 0x70
 8003398:	4393      	bics	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	2207      	movs	r2, #7
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]
}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <TIM_ETR_SetConfig+0x3c>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	021a      	lsls	r2, r3, #8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	431a      	orrs	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4313      	orrs	r3, r2
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	609a      	str	r2, [r3, #8]
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b006      	add	sp, #24
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	ffff00ff 	.word	0xffff00ff

080033f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	223c      	movs	r2, #60	; 0x3c
 8003406:	5c9b      	ldrb	r3, [r3, r2]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800340c:	2302      	movs	r3, #2
 800340e:	e047      	b.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	223c      	movs	r2, #60	; 0x3c
 8003414:	2101      	movs	r1, #1
 8003416:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	223d      	movs	r2, #61	; 0x3d
 800341c:	2102      	movs	r1, #2
 800341e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2270      	movs	r2, #112	; 0x70
 8003434:	4393      	bics	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00f      	beq.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	05db      	lsls	r3, r3, #23
 800345c:	429a      	cmp	r2, r3
 800345e:	d009      	beq.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a11      	ldr	r2, [pc, #68]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10c      	bne.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	4393      	bics	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	223d      	movs	r2, #61	; 0x3d
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	223c      	movs	r2, #60	; 0x3c
 800349a:	2100      	movs	r1, #0
 800349c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40014000 	.word	0x40014000

080034b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e044      	b.n	8003570 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2274      	movs	r2, #116	; 0x74
 80034f2:	2100      	movs	r1, #0
 80034f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7fd faff 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2224      	movs	r2, #36	; 0x24
 8003502:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2101      	movs	r1, #1
 8003510:	438a      	bics	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	0018      	movs	r0, r3
 8003518:	f000 fb46 	bl	8003ba8 <UART_SetConfig>
 800351c:	0003      	movs	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e024      	b.n	8003570 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 fcbd 	bl	8003eb0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	490d      	ldr	r1, [pc, #52]	; (8003578 <HAL_UART_Init+0xa4>)
 8003542:	400a      	ands	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	212a      	movs	r1, #42	; 0x2a
 8003552:	438a      	bics	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2101      	movs	r1, #1
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 fd55 	bl	8004018 <UART_CheckIdleState>
 800356e:	0003      	movs	r3, r0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}
 8003578:	ffffb7ff 	.word	0xffffb7ff

0800357c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	1dbb      	adds	r3, r7, #6
 800358a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003590:	2b20      	cmp	r3, #32
 8003592:	d000      	beq.n	8003596 <HAL_UART_Transmit+0x1a>
 8003594:	e096      	b.n	80036c4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_UART_Transmit+0x28>
 800359c:	1dbb      	adds	r3, r7, #6
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e08e      	b.n	80036c6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	015b      	lsls	r3, r3, #5
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d109      	bne.n	80035c8 <HAL_UART_Transmit+0x4c>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2201      	movs	r2, #1
 80035c0:	4013      	ands	r3, r2
 80035c2:	d001      	beq.n	80035c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e07e      	b.n	80036c6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2274      	movs	r2, #116	; 0x74
 80035cc:	5c9b      	ldrb	r3, [r3, r2]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Transmit+0x5a>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e077      	b.n	80036c6 <HAL_UART_Transmit+0x14a>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2274      	movs	r2, #116	; 0x74
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	2100      	movs	r1, #0
 80035e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2221      	movs	r2, #33	; 0x21
 80035ea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ec:	f7fd fcfa 	bl	8000fe4 <HAL_GetTick>
 80035f0:	0003      	movs	r3, r0
 80035f2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1dba      	adds	r2, r7, #6
 80035f8:	2150      	movs	r1, #80	; 0x50
 80035fa:	8812      	ldrh	r2, [r2, #0]
 80035fc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1dba      	adds	r2, r7, #6
 8003602:	2152      	movs	r1, #82	; 0x52
 8003604:	8812      	ldrh	r2, [r2, #0]
 8003606:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	015b      	lsls	r3, r3, #5
 8003610:	429a      	cmp	r2, r3
 8003612:	d108      	bne.n	8003626 <HAL_UART_Transmit+0xaa>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e003      	b.n	800362e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2274      	movs	r2, #116	; 0x74
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003636:	e02d      	b.n	8003694 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	0013      	movs	r3, r2
 8003642:	2200      	movs	r2, #0
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	f000 fd31 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e039      	b.n	80036c6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10b      	bne.n	8003670 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	05d2      	lsls	r2, r2, #23
 8003662:	0dd2      	lsrs	r2, r2, #23
 8003664:	b292      	uxth	r2, r2
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	3302      	adds	r3, #2
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	e008      	b.n	8003682 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	b292      	uxth	r2, r2
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2252      	movs	r2, #82	; 0x52
 8003686:	5a9b      	ldrh	r3, [r3, r2]
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b299      	uxth	r1, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2252      	movs	r2, #82	; 0x52
 8003692:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2252      	movs	r2, #82	; 0x52
 8003698:	5a9b      	ldrh	r3, [r3, r2]
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1cb      	bne.n	8003638 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	0013      	movs	r3, r2
 80036aa:	2200      	movs	r2, #0
 80036ac:	2140      	movs	r1, #64	; 0x40
 80036ae:	f000 fcfd 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d001      	beq.n	80036ba <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e005      	b.n	80036c6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b008      	add	sp, #32
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d13f      	bne.n	8003764 <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_UART_Receive_IT+0x24>
 80036ea:	1dbb      	adds	r3, r7, #6
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e037      	b.n	8003766 <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	015b      	lsls	r3, r3, #5
 80036fe:	429a      	cmp	r2, r3
 8003700:	d109      	bne.n	8003716 <HAL_UART_Receive_IT+0x48>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2201      	movs	r2, #1
 800370e:	4013      	ands	r3, r2
 8003710:	d001      	beq.n	8003716 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e027      	b.n	8003766 <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2274      	movs	r2, #116	; 0x74
 800371a:	5c9b      	ldrb	r3, [r3, r2]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_UART_Receive_IT+0x56>
 8003720:	2302      	movs	r3, #2
 8003722:	e020      	b.n	8003766 <HAL_UART_Receive_IT+0x98>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2274      	movs	r2, #116	; 0x74
 8003728:	2101      	movs	r1, #1
 800372a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	4013      	ands	r3, r2
 800373e:	d008      	beq.n	8003752 <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	04c9      	lsls	r1, r1, #19
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003752:	1dbb      	adds	r3, r7, #6
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	0018      	movs	r0, r3
 800375c:	f000 fd24 	bl	80041a8 <UART_Start_Receive_IT>
 8003760:	0003      	movs	r3, r0
 8003762:	e000      	b.n	8003766 <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b004      	add	sp, #16
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	4ab5      	ldr	r2, [pc, #724]	; (8003a68 <HAL_UART_IRQHandler+0x2f8>)
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d112      	bne.n	80037c4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2220      	movs	r2, #32
 80037a2:	4013      	ands	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2220      	movs	r2, #32
 80037aa:	4013      	ands	r3, r2
 80037ac:	d00a      	beq.n	80037c4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d100      	bne.n	80037b8 <HAL_UART_IRQHandler+0x48>
 80037b6:	e1d4      	b.n	8003b62 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	0010      	movs	r0, r2
 80037c0:	4798      	blx	r3
      }
      return;
 80037c2:	e1ce      	b.n	8003b62 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d100      	bne.n	80037cc <HAL_UART_IRQHandler+0x5c>
 80037ca:	e0d9      	b.n	8003980 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2201      	movs	r2, #1
 80037d0:	4013      	ands	r3, r2
 80037d2:	d104      	bne.n	80037de <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4aa5      	ldr	r2, [pc, #660]	; (8003a6c <HAL_UART_IRQHandler+0x2fc>)
 80037d8:	4013      	ands	r3, r2
 80037da:	d100      	bne.n	80037de <HAL_UART_IRQHandler+0x6e>
 80037dc:	e0d0      	b.n	8003980 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2201      	movs	r2, #1
 80037e2:	4013      	ands	r3, r2
 80037e4:	d010      	beq.n	8003808 <HAL_UART_IRQHandler+0x98>
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4013      	ands	r3, r2
 80037ee:	d00b      	beq.n	8003808 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2201      	movs	r2, #1
 80037f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	589b      	ldr	r3, [r3, r2]
 80037fe:	2201      	movs	r2, #1
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	2202      	movs	r2, #2
 800380c:	4013      	ands	r3, r2
 800380e:	d00f      	beq.n	8003830 <HAL_UART_IRQHandler+0xc0>
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2201      	movs	r2, #1
 8003814:	4013      	ands	r3, r2
 8003816:	d00b      	beq.n	8003830 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2202      	movs	r2, #2
 800381e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	589b      	ldr	r3, [r3, r2]
 8003826:	2204      	movs	r2, #4
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2204      	movs	r2, #4
 8003834:	4013      	ands	r3, r2
 8003836:	d00f      	beq.n	8003858 <HAL_UART_IRQHandler+0xe8>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2201      	movs	r2, #1
 800383c:	4013      	ands	r3, r2
 800383e:	d00b      	beq.n	8003858 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2204      	movs	r2, #4
 8003846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	589b      	ldr	r3, [r3, r2]
 800384e:	2202      	movs	r2, #2
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2208      	movs	r2, #8
 800385c:	4013      	ands	r3, r2
 800385e:	d013      	beq.n	8003888 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2220      	movs	r2, #32
 8003864:	4013      	ands	r3, r2
 8003866:	d103      	bne.n	8003870 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2201      	movs	r2, #1
 800386c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800386e:	d00b      	beq.n	8003888 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2208      	movs	r2, #8
 8003876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	589b      	ldr	r3, [r3, r2]
 800387e:	2208      	movs	r2, #8
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	4013      	ands	r3, r2
 8003890:	d011      	beq.n	80038b6 <HAL_UART_IRQHandler+0x146>
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	04db      	lsls	r3, r3, #19
 8003898:	4013      	ands	r3, r2
 800389a:	d00c      	beq.n	80038b6 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	589b      	ldr	r3, [r3, r2]
 80038ac:	2220      	movs	r2, #32
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	589b      	ldr	r3, [r3, r2]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d100      	bne.n	80038c2 <HAL_UART_IRQHandler+0x152>
 80038c0:	e151      	b.n	8003b66 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2220      	movs	r2, #32
 80038c6:	4013      	ands	r3, r2
 80038c8:	d00c      	beq.n	80038e4 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2220      	movs	r2, #32
 80038ce:	4013      	ands	r3, r2
 80038d0:	d008      	beq.n	80038e4 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d004      	beq.n	80038e4 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	0010      	movs	r0, r2
 80038e2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	589b      	ldr	r3, [r3, r2]
 80038ea:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d003      	beq.n	8003902 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2228      	movs	r2, #40	; 0x28
 80038fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003900:	d033      	beq.n	800396a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0018      	movs	r0, r3
 8003906:	f000 fcdd 	bl	80042c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2240      	movs	r2, #64	; 0x40
 8003912:	4013      	ands	r3, r2
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d123      	bne.n	8003960 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2140      	movs	r1, #64	; 0x40
 8003924:	438a      	bics	r2, r1
 8003926:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	2b00      	cmp	r3, #0
 800392e:	d012      	beq.n	8003956 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a4e      	ldr	r2, [pc, #312]	; (8003a70 <HAL_UART_IRQHandler+0x300>)
 8003936:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	0018      	movs	r0, r3
 800393e:	f7fd fcdb 	bl	80012f8 <HAL_DMA_Abort_IT>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d01a      	beq.n	800397c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	0018      	movs	r0, r3
 8003952:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	e012      	b.n	800397c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 f911 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395e:	e00d      	b.n	800397c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 f90c 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	e008      	b.n	800397c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	0018      	movs	r0, r3
 800396e:	f000 f907 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	2100      	movs	r1, #0
 8003978:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800397a:	e0f4      	b.n	8003b66 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397c:	46c0      	nop			; (mov r8, r8)
    return;
 800397e:	e0f2      	b.n	8003b66 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003984:	2b01      	cmp	r3, #1
 8003986:	d000      	beq.n	800398a <HAL_UART_IRQHandler+0x21a>
 8003988:	e0b7      	b.n	8003afa <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	2210      	movs	r2, #16
 800398e:	4013      	ands	r3, r2
 8003990:	d100      	bne.n	8003994 <HAL_UART_IRQHandler+0x224>
 8003992:	e0b2      	b.n	8003afa <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2210      	movs	r2, #16
 8003998:	4013      	ands	r3, r2
 800399a:	d100      	bne.n	800399e <HAL_UART_IRQHandler+0x22e>
 800399c:	e0ad      	b.n	8003afa <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2210      	movs	r2, #16
 80039a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d161      	bne.n	8003a78 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	2108      	movs	r1, #8
 80039be:	187b      	adds	r3, r7, r1
 80039c0:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d100      	bne.n	80039cc <HAL_UART_IRQHandler+0x25c>
 80039ca:	e0ce      	b.n	8003b6a <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2258      	movs	r2, #88	; 0x58
 80039d0:	5a9b      	ldrh	r3, [r3, r2]
 80039d2:	2208      	movs	r2, #8
 80039d4:	18ba      	adds	r2, r7, r2
 80039d6:	8812      	ldrh	r2, [r2, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d300      	bcc.n	80039de <HAL_UART_IRQHandler+0x26e>
 80039dc:	e0c5      	b.n	8003b6a <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2208      	movs	r2, #8
 80039e2:	18ba      	adds	r2, r7, r2
 80039e4:	215a      	movs	r1, #90	; 0x5a
 80039e6:	8812      	ldrh	r2, [r2, #0]
 80039e8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d02a      	beq.n	8003a4a <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	491d      	ldr	r1, [pc, #116]	; (8003a74 <HAL_UART_IRQHandler+0x304>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	438a      	bics	r2, r1
 8003a12:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	438a      	bics	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2110      	movs	r1, #16
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7fd fc1f 	bl	8001288 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2258      	movs	r2, #88	; 0x58
 8003a4e:	5a9a      	ldrh	r2, [r3, r2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	215a      	movs	r1, #90	; 0x5a
 8003a54:	5a5b      	ldrh	r3, [r3, r1]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	0011      	movs	r1, r2
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 f895 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a66:	e080      	b.n	8003b6a <HAL_UART_IRQHandler+0x3fa>
 8003a68:	0000080f 	.word	0x0000080f
 8003a6c:	04000120 	.word	0x04000120
 8003a70:	08004325 	.word	0x08004325
 8003a74:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2258      	movs	r2, #88	; 0x58
 8003a7c:	5a99      	ldrh	r1, [r3, r2]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	225a      	movs	r2, #90	; 0x5a
 8003a82:	5a9b      	ldrh	r3, [r3, r2]
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	230a      	movs	r3, #10
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	1a8a      	subs	r2, r1, r2
 8003a8c:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	225a      	movs	r2, #90	; 0x5a
 8003a92:	5a9b      	ldrh	r3, [r3, r2]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d100      	bne.n	8003a9c <HAL_UART_IRQHandler+0x32c>
 8003a9a:	e068      	b.n	8003b6e <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 8003a9c:	230a      	movs	r3, #10
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d063      	beq.n	8003b6e <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4932      	ldr	r1, [pc, #200]	; (8003b7c <HAL_UART_IRQHandler+0x40c>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	438a      	bics	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2110      	movs	r1, #16
 8003ae4:	438a      	bics	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae8:	230a      	movs	r3, #10
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	881a      	ldrh	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0011      	movs	r1, r2
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 f84c 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003af8:	e039      	b.n	8003b6e <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	035b      	lsls	r3, r3, #13
 8003b00:	4013      	ands	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_UART_IRQHandler+0x3b2>
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	03db      	lsls	r3, r3, #15
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2280      	movs	r2, #128	; 0x80
 8003b14:	0352      	lsls	r2, r2, #13
 8003b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 fd20 	bl	8004560 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b20:	e028      	b.n	8003b74 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	2280      	movs	r2, #128	; 0x80
 8003b26:	4013      	ands	r3, r2
 8003b28:	d00d      	beq.n	8003b46 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01b      	beq.n	8003b72 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	0010      	movs	r0, r2
 8003b42:	4798      	blx	r3
    }
    return;
 8003b44:	e015      	b.n	8003b72 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2240      	movs	r2, #64	; 0x40
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d012      	beq.n	8003b74 <HAL_UART_IRQHandler+0x404>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2240      	movs	r2, #64	; 0x40
 8003b52:	4013      	ands	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f000 fbfa 	bl	8004352 <UART_EndTransmit_IT>
    return;
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	e008      	b.n	8003b74 <HAL_UART_IRQHandler+0x404>
      return;
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	e006      	b.n	8003b74 <HAL_UART_IRQHandler+0x404>
    return;
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	e004      	b.n	8003b74 <HAL_UART_IRQHandler+0x404>
      return;
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	e002      	b.n	8003b74 <HAL_UART_IRQHandler+0x404>
      return;
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	e000      	b.n	8003b74 <HAL_UART_IRQHandler+0x404>
    return;
 8003b72:	46c0      	nop			; (mov r8, r8)
  }

}
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b008      	add	sp, #32
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	fffffedf 	.word	0xfffffedf

08003b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b002      	add	sp, #8
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	000a      	movs	r2, r1
 8003b9a:	1cbb      	adds	r3, r7, #2
 8003b9c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b002      	add	sp, #8
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bb0:	231e      	movs	r3, #30
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4aac      	ldr	r2, [pc, #688]	; (8003e88 <UART_SetConfig+0x2e0>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	0019      	movs	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4aa7      	ldr	r2, [pc, #668]	; (8003e8c <UART_SetConfig+0x2e4>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a9e      	ldr	r2, [pc, #632]	; (8003e90 <UART_SetConfig+0x2e8>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a9a      	ldr	r2, [pc, #616]	; (8003e94 <UART_SetConfig+0x2ec>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d125      	bne.n	8003c7a <UART_SetConfig+0xd2>
 8003c2e:	4b9a      	ldr	r3, [pc, #616]	; (8003e98 <UART_SetConfig+0x2f0>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	2203      	movs	r2, #3
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d00f      	beq.n	8003c5a <UART_SetConfig+0xb2>
 8003c3a:	d304      	bcc.n	8003c46 <UART_SetConfig+0x9e>
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d011      	beq.n	8003c64 <UART_SetConfig+0xbc>
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d005      	beq.n	8003c50 <UART_SetConfig+0xa8>
 8003c44:	e013      	b.n	8003c6e <UART_SetConfig+0xc6>
 8003c46:	231f      	movs	r3, #31
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e064      	b.n	8003d1a <UART_SetConfig+0x172>
 8003c50:	231f      	movs	r3, #31
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	2202      	movs	r2, #2
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	e05f      	b.n	8003d1a <UART_SetConfig+0x172>
 8003c5a:	231f      	movs	r3, #31
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	2204      	movs	r2, #4
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e05a      	b.n	8003d1a <UART_SetConfig+0x172>
 8003c64:	231f      	movs	r3, #31
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2208      	movs	r2, #8
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e055      	b.n	8003d1a <UART_SetConfig+0x172>
 8003c6e:	231f      	movs	r3, #31
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2210      	movs	r2, #16
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	e04f      	b.n	8003d1a <UART_SetConfig+0x172>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a87      	ldr	r2, [pc, #540]	; (8003e9c <UART_SetConfig+0x2f4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d132      	bne.n	8003cea <UART_SetConfig+0x142>
 8003c84:	4b84      	ldr	r3, [pc, #528]	; (8003e98 <UART_SetConfig+0x2f0>)
 8003c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c88:	23c0      	movs	r3, #192	; 0xc0
 8003c8a:	029b      	lsls	r3, r3, #10
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2280      	movs	r2, #128	; 0x80
 8003c90:	0252      	lsls	r2, r2, #9
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d019      	beq.n	8003cca <UART_SetConfig+0x122>
 8003c96:	2280      	movs	r2, #128	; 0x80
 8003c98:	0252      	lsls	r2, r2, #9
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d802      	bhi.n	8003ca4 <UART_SetConfig+0xfc>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <UART_SetConfig+0x10e>
 8003ca2:	e01c      	b.n	8003cde <UART_SetConfig+0x136>
 8003ca4:	2280      	movs	r2, #128	; 0x80
 8003ca6:	0292      	lsls	r2, r2, #10
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d013      	beq.n	8003cd4 <UART_SetConfig+0x12c>
 8003cac:	22c0      	movs	r2, #192	; 0xc0
 8003cae:	0292      	lsls	r2, r2, #10
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d005      	beq.n	8003cc0 <UART_SetConfig+0x118>
 8003cb4:	e013      	b.n	8003cde <UART_SetConfig+0x136>
 8003cb6:	231f      	movs	r3, #31
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e02c      	b.n	8003d1a <UART_SetConfig+0x172>
 8003cc0:	231f      	movs	r3, #31
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e027      	b.n	8003d1a <UART_SetConfig+0x172>
 8003cca:	231f      	movs	r3, #31
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2204      	movs	r2, #4
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e022      	b.n	8003d1a <UART_SetConfig+0x172>
 8003cd4:	231f      	movs	r3, #31
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	2208      	movs	r2, #8
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e01d      	b.n	8003d1a <UART_SetConfig+0x172>
 8003cde:	231f      	movs	r3, #31
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	e017      	b.n	8003d1a <UART_SetConfig+0x172>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a6c      	ldr	r2, [pc, #432]	; (8003ea0 <UART_SetConfig+0x2f8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d104      	bne.n	8003cfe <UART_SetConfig+0x156>
 8003cf4:	231f      	movs	r3, #31
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e00d      	b.n	8003d1a <UART_SetConfig+0x172>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a68      	ldr	r2, [pc, #416]	; (8003ea4 <UART_SetConfig+0x2fc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d104      	bne.n	8003d12 <UART_SetConfig+0x16a>
 8003d08:	231f      	movs	r3, #31
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e003      	b.n	8003d1a <UART_SetConfig+0x172>
 8003d12:	231f      	movs	r3, #31
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2210      	movs	r2, #16
 8003d18:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d15c      	bne.n	8003de0 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8003d26:	231f      	movs	r3, #31
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d00d      	beq.n	8003d4c <UART_SetConfig+0x1a4>
 8003d30:	dc02      	bgt.n	8003d38 <UART_SetConfig+0x190>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <UART_SetConfig+0x19a>
 8003d36:	e015      	b.n	8003d64 <UART_SetConfig+0x1bc>
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d00a      	beq.n	8003d52 <UART_SetConfig+0x1aa>
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d00d      	beq.n	8003d5c <UART_SetConfig+0x1b4>
 8003d40:	e010      	b.n	8003d64 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d42:	f7fe fe41 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003d46:	0003      	movs	r3, r0
 8003d48:	61bb      	str	r3, [r7, #24]
        break;
 8003d4a:	e012      	b.n	8003d72 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d4c:	4b56      	ldr	r3, [pc, #344]	; (8003ea8 <UART_SetConfig+0x300>)
 8003d4e:	61bb      	str	r3, [r7, #24]
        break;
 8003d50:	e00f      	b.n	8003d72 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d52:	f7fe fdb1 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8003d56:	0003      	movs	r3, r0
 8003d58:	61bb      	str	r3, [r7, #24]
        break;
 8003d5a:	e00a      	b.n	8003d72 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	61bb      	str	r3, [r7, #24]
        break;
 8003d62:	e006      	b.n	8003d72 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d68:	231e      	movs	r3, #30
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
        break;
 8003d70:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d100      	bne.n	8003d7a <UART_SetConfig+0x1d2>
 8003d78:	e079      	b.n	8003e6e <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	005a      	lsls	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	18d2      	adds	r2, r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	0010      	movs	r0, r2
 8003d8e:	f7fc f9c3 	bl	8000118 <__udivsi3>
 8003d92:	0003      	movs	r3, r0
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	d91b      	bls.n	8003dd6 <UART_SetConfig+0x22e>
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4a42      	ldr	r2, [pc, #264]	; (8003eac <UART_SetConfig+0x304>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d817      	bhi.n	8003dd6 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	200e      	movs	r0, #14
 8003dac:	183b      	adds	r3, r7, r0
 8003dae:	210f      	movs	r1, #15
 8003db0:	438a      	bics	r2, r1
 8003db2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2207      	movs	r2, #7
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	b299      	uxth	r1, r3
 8003dc0:	183b      	adds	r3, r7, r0
 8003dc2:	183a      	adds	r2, r7, r0
 8003dc4:	8812      	ldrh	r2, [r2, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	183a      	adds	r2, r7, r0
 8003dd0:	8812      	ldrh	r2, [r2, #0]
 8003dd2:	60da      	str	r2, [r3, #12]
 8003dd4:	e04b      	b.n	8003e6e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8003dd6:	231e      	movs	r3, #30
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e046      	b.n	8003e6e <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003de0:	231f      	movs	r3, #31
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d00d      	beq.n	8003e06 <UART_SetConfig+0x25e>
 8003dea:	dc02      	bgt.n	8003df2 <UART_SetConfig+0x24a>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <UART_SetConfig+0x254>
 8003df0:	e015      	b.n	8003e1e <UART_SetConfig+0x276>
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d00a      	beq.n	8003e0c <UART_SetConfig+0x264>
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d00d      	beq.n	8003e16 <UART_SetConfig+0x26e>
 8003dfa:	e010      	b.n	8003e1e <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f7fe fde4 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003e00:	0003      	movs	r3, r0
 8003e02:	61bb      	str	r3, [r7, #24]
        break;
 8003e04:	e012      	b.n	8003e2c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e06:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <UART_SetConfig+0x300>)
 8003e08:	61bb      	str	r3, [r7, #24]
        break;
 8003e0a:	e00f      	b.n	8003e2c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0c:	f7fe fd54 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8003e10:	0003      	movs	r3, r0
 8003e12:	61bb      	str	r3, [r7, #24]
        break;
 8003e14:	e00a      	b.n	8003e2c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	61bb      	str	r3, [r7, #24]
        break;
 8003e1c:	e006      	b.n	8003e2c <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e22:	231e      	movs	r3, #30
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
        break;
 8003e2a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01d      	beq.n	8003e6e <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	085a      	lsrs	r2, r3, #1
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	18d2      	adds	r2, r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	0019      	movs	r1, r3
 8003e42:	0010      	movs	r0, r2
 8003e44:	f7fc f968 	bl	8000118 <__udivsi3>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b0f      	cmp	r3, #15
 8003e52:	d908      	bls.n	8003e66 <UART_SetConfig+0x2be>
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4a15      	ldr	r2, [pc, #84]	; (8003eac <UART_SetConfig+0x304>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d804      	bhi.n	8003e66 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	e003      	b.n	8003e6e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8003e66:	231e      	movs	r3, #30
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e7a:	231e      	movs	r3, #30
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	781b      	ldrb	r3, [r3, #0]
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b008      	add	sp, #32
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	efff69f3 	.word	0xefff69f3
 8003e8c:	ffffcfff 	.word	0xffffcfff
 8003e90:	fffff4ff 	.word	0xfffff4ff
 8003e94:	40013800 	.word	0x40013800
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40004400 	.word	0x40004400
 8003ea0:	40004800 	.word	0x40004800
 8003ea4:	40004c00 	.word	0x40004c00
 8003ea8:	007a1200 	.word	0x007a1200
 8003eac:	0000ffff 	.word	0x0000ffff

08003eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a4a      	ldr	r2, [pc, #296]	; (8003ff4 <UART_AdvFeatureConfig+0x144>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	2202      	movs	r2, #2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4a43      	ldr	r2, [pc, #268]	; (8003ff8 <UART_AdvFeatureConfig+0x148>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	0019      	movs	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2204      	movs	r2, #4
 8003f02:	4013      	ands	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <UART_AdvFeatureConfig+0x14c>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	2208      	movs	r2, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a34      	ldr	r2, [pc, #208]	; (8004000 <UART_AdvFeatureConfig+0x150>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	2210      	movs	r2, #16
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <UART_AdvFeatureConfig+0x154>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2220      	movs	r2, #32
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4a25      	ldr	r2, [pc, #148]	; (8004008 <UART_AdvFeatureConfig+0x158>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <UART_AdvFeatureConfig+0x15c>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	0019      	movs	r1, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	035b      	lsls	r3, r3, #13
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d10b      	bne.n	8003fca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a15      	ldr	r2, [pc, #84]	; (8004010 <UART_AdvFeatureConfig+0x160>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <UART_AdvFeatureConfig+0x164>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	fffdffff 	.word	0xfffdffff
 8003ff8:	fffeffff 	.word	0xfffeffff
 8003ffc:	fffbffff 	.word	0xfffbffff
 8004000:	ffff7fff 	.word	0xffff7fff
 8004004:	ffffefff 	.word	0xffffefff
 8004008:	ffffdfff 	.word	0xffffdfff
 800400c:	ffefffff 	.word	0xffefffff
 8004010:	ff9fffff 	.word	0xff9fffff
 8004014:	fff7ffff 	.word	0xfff7ffff

08004018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af02      	add	r7, sp, #8
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	2100      	movs	r1, #0
 8004026:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004028:	f7fc ffdc 	bl	8000fe4 <HAL_GetTick>
 800402c:	0003      	movs	r3, r0
 800402e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2208      	movs	r2, #8
 8004038:	4013      	ands	r3, r2
 800403a:	2b08      	cmp	r3, #8
 800403c:	d10d      	bne.n	800405a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	0399      	lsls	r1, r3, #14
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <UART_CheckIdleState+0x90>)
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	0013      	movs	r3, r2
 800404c:	2200      	movs	r2, #0
 800404e:	f000 f82d 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d001      	beq.n	800405a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e022      	b.n	80040a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2204      	movs	r2, #4
 8004062:	4013      	ands	r3, r2
 8004064:	2b04      	cmp	r3, #4
 8004066:	d10d      	bne.n	8004084 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	03d9      	lsls	r1, r3, #15
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <UART_CheckIdleState+0x90>)
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	0013      	movs	r3, r2
 8004076:	2200      	movs	r2, #0
 8004078:	f000 f818 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d001      	beq.n	8004084 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e00d      	b.n	80040a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2274      	movs	r2, #116	; 0x74
 800409a:	2100      	movs	r1, #0
 800409c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b004      	add	sp, #16
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	01ffffff 	.word	0x01ffffff

080040ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	1dfb      	adds	r3, r7, #7
 80040ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040bc:	e05e      	b.n	800417c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3301      	adds	r3, #1
 80040c2:	d05b      	beq.n	800417c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c4:	f7fc ff8e 	bl	8000fe4 <HAL_GetTick>
 80040c8:	0002      	movs	r2, r0
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d302      	bcc.n	80040da <UART_WaitOnFlagUntilTimeout+0x2e>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d11b      	bne.n	8004112 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	492f      	ldr	r1, [pc, #188]	; (80041a4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2101      	movs	r1, #1
 80040f6:	438a      	bics	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2274      	movs	r2, #116	; 0x74
 800410a:	2100      	movs	r1, #0
 800410c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e044      	b.n	800419c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2204      	movs	r2, #4
 800411a:	4013      	ands	r3, r2
 800411c:	d02e      	beq.n	800417c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	401a      	ands	r2, r3
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	429a      	cmp	r2, r3
 8004130:	d124      	bne.n	800417c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	0112      	lsls	r2, r2, #4
 800413a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4917      	ldr	r1, [pc, #92]	; (80041a4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004148:	400a      	ands	r2, r1
 800414a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2101      	movs	r1, #1
 8004158:	438a      	bics	r2, r1
 800415a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	2120      	movs	r1, #32
 800416e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2274      	movs	r2, #116	; 0x74
 8004174:	2100      	movs	r1, #0
 8004176:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e00f      	b.n	800419c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	425a      	negs	r2, r3
 800418c:	4153      	adcs	r3, r2
 800418e:	b2db      	uxtb	r3, r3
 8004190:	001a      	movs	r2, r3
 8004192:	1dfb      	adds	r3, r7, #7
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d091      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b004      	add	sp, #16
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	fffffe5f 	.word	0xfffffe5f

080041a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	1dbb      	adds	r3, r7, #6
 80041b4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1dba      	adds	r2, r7, #6
 80041c0:	2158      	movs	r1, #88	; 0x58
 80041c2:	8812      	ldrh	r2, [r2, #0]
 80041c4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1dba      	adds	r2, r7, #6
 80041ca:	215a      	movs	r1, #90	; 0x5a
 80041cc:	8812      	ldrh	r2, [r2, #0]
 80041ce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	015b      	lsls	r3, r3, #5
 80041de:	429a      	cmp	r2, r3
 80041e0:	d10d      	bne.n	80041fe <UART_Start_Receive_IT+0x56>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <UART_Start_Receive_IT+0x4c>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	225c      	movs	r2, #92	; 0x5c
 80041ee:	4932      	ldr	r1, [pc, #200]	; (80042b8 <UART_Start_Receive_IT+0x110>)
 80041f0:	5299      	strh	r1, [r3, r2]
 80041f2:	e02e      	b.n	8004252 <UART_Start_Receive_IT+0xaa>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	225c      	movs	r2, #92	; 0x5c
 80041f8:	21ff      	movs	r1, #255	; 0xff
 80041fa:	5299      	strh	r1, [r3, r2]
 80041fc:	e029      	b.n	8004252 <UART_Start_Receive_IT+0xaa>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <UART_Start_Receive_IT+0x7a>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d104      	bne.n	8004218 <UART_Start_Receive_IT+0x70>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	225c      	movs	r2, #92	; 0x5c
 8004212:	21ff      	movs	r1, #255	; 0xff
 8004214:	5299      	strh	r1, [r3, r2]
 8004216:	e01c      	b.n	8004252 <UART_Start_Receive_IT+0xaa>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	225c      	movs	r2, #92	; 0x5c
 800421c:	217f      	movs	r1, #127	; 0x7f
 800421e:	5299      	strh	r1, [r3, r2]
 8004220:	e017      	b.n	8004252 <UART_Start_Receive_IT+0xaa>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	055b      	lsls	r3, r3, #21
 800422a:	429a      	cmp	r2, r3
 800422c:	d10d      	bne.n	800424a <UART_Start_Receive_IT+0xa2>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <UART_Start_Receive_IT+0x98>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	225c      	movs	r2, #92	; 0x5c
 800423a:	217f      	movs	r1, #127	; 0x7f
 800423c:	5299      	strh	r1, [r3, r2]
 800423e:	e008      	b.n	8004252 <UART_Start_Receive_IT+0xaa>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	225c      	movs	r2, #92	; 0x5c
 8004244:	213f      	movs	r1, #63	; 0x3f
 8004246:	5299      	strh	r1, [r3, r2]
 8004248:	e003      	b.n	8004252 <UART_Start_Receive_IT+0xaa>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	225c      	movs	r2, #92	; 0x5c
 800424e:	2100      	movs	r1, #0
 8004250:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2280      	movs	r2, #128	; 0x80
 8004256:	2100      	movs	r1, #0
 8004258:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2222      	movs	r2, #34	; 0x22
 800425e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2101      	movs	r1, #1
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	015b      	lsls	r3, r3, #5
 8004278:	429a      	cmp	r2, r3
 800427a:	d107      	bne.n	800428c <UART_Start_Receive_IT+0xe4>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <UART_Start_Receive_IT+0x114>)
 8004288:	665a      	str	r2, [r3, #100]	; 0x64
 800428a:	e002      	b.n	8004292 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <UART_Start_Receive_IT+0x118>)
 8004290:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2274      	movs	r2, #116	; 0x74
 8004296:	2100      	movs	r1, #0
 8004298:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2190      	movs	r1, #144	; 0x90
 80042a6:	0049      	lsls	r1, r1, #1
 80042a8:	430a      	orrs	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b004      	add	sp, #16
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	000001ff 	.word	0x000001ff
 80042bc:	08004475 	.word	0x08004475
 80042c0:	08004389 	.word	0x08004389

080042c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4912      	ldr	r1, [pc, #72]	; (8004320 <UART_EndRxTransfer+0x5c>)
 80042d8:	400a      	ands	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2101      	movs	r1, #1
 80042e8:	438a      	bics	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d107      	bne.n	8004304 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2110      	movs	r1, #16
 8004300:	438a      	bics	r2, r1
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b002      	add	sp, #8
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	fffffedf 	.word	0xfffffedf

08004324 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	225a      	movs	r2, #90	; 0x5a
 8004336:	2100      	movs	r1, #0
 8004338:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2252      	movs	r2, #82	; 0x52
 800433e:	2100      	movs	r1, #0
 8004340:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	0018      	movs	r0, r3
 8004346:	f7ff fc1b 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b004      	add	sp, #16
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2140      	movs	r1, #64	; 0x40
 8004366:	438a      	bics	r2, r1
 8004368:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0018      	movs	r0, r3
 800437a:	f7fc faff 	bl	800097c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b002      	add	sp, #8
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004390:	230e      	movs	r3, #14
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	215c      	movs	r1, #92	; 0x5c
 8004398:	5a52      	ldrh	r2, [r2, r1]
 800439a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a0:	2b22      	cmp	r3, #34	; 0x22
 80043a2:	d158      	bne.n	8004456 <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	210c      	movs	r1, #12
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80043ae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043b0:	187b      	adds	r3, r7, r1
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	230e      	movs	r3, #14
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b2d9      	uxtb	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	400a      	ands	r2, r1
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	225a      	movs	r2, #90	; 0x5a
 80043d6:	5a9b      	ldrh	r3, [r3, r2]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b299      	uxth	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	225a      	movs	r2, #90	; 0x5a
 80043e2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	225a      	movs	r2, #90	; 0x5a
 80043e8:	5a9b      	ldrh	r3, [r3, r2]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d13a      	bne.n	8004466 <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	491d      	ldr	r1, [pc, #116]	; (8004470 <UART_RxISR_8BIT+0xe8>)
 80043fc:	400a      	ands	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2101      	movs	r1, #1
 800440c:	438a      	bics	r2, r1
 800440e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004420:	2b01      	cmp	r3, #1
 8004422:	d110      	bne.n	8004446 <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2110      	movs	r1, #16
 8004430:	438a      	bics	r2, r1
 8004432:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2258      	movs	r2, #88	; 0x58
 8004438:	5a9a      	ldrh	r2, [r3, r2]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0011      	movs	r1, r2
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff fba6 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
 8004444:	e003      	b.n	800444e <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f7fc fa47 	bl	80008dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004454:	e007      	b.n	8004466 <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2108      	movs	r1, #8
 8004462:	430a      	orrs	r2, r1
 8004464:	619a      	str	r2, [r3, #24]
}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	46bd      	mov	sp, r7
 800446a:	b004      	add	sp, #16
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	fffffedf 	.word	0xfffffedf

08004474 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800447c:	230e      	movs	r3, #14
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	215c      	movs	r1, #92	; 0x5c
 8004484:	5a52      	ldrh	r2, [r2, r1]
 8004486:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800448c:	2b22      	cmp	r3, #34	; 0x22
 800448e:	d158      	bne.n	8004542 <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	210c      	movs	r1, #12
 8004496:	187b      	adds	r3, r7, r1
 8004498:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800449a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	220e      	movs	r2, #14
 80044a6:	18ba      	adds	r2, r7, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	8812      	ldrh	r2, [r2, #0]
 80044ac:	4013      	ands	r3, r2
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	1c9a      	adds	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	225a      	movs	r2, #90	; 0x5a
 80044c2:	5a9b      	ldrh	r3, [r3, r2]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b299      	uxth	r1, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	225a      	movs	r2, #90	; 0x5a
 80044ce:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	225a      	movs	r2, #90	; 0x5a
 80044d4:	5a9b      	ldrh	r3, [r3, r2]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d13a      	bne.n	8004552 <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	491d      	ldr	r1, [pc, #116]	; (800455c <UART_RxISR_16BIT+0xe8>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2101      	movs	r1, #1
 80044f8:	438a      	bics	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	2b01      	cmp	r3, #1
 800450e:	d110      	bne.n	8004532 <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2110      	movs	r1, #16
 800451c:	438a      	bics	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2258      	movs	r2, #88	; 0x58
 8004524:	5a9a      	ldrh	r2, [r3, r2]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0011      	movs	r1, r2
 800452a:	0018      	movs	r0, r3
 800452c:	f7ff fb30 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
 8004530:	e003      	b.n	800453a <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f7fc f9d1 	bl	80008dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004540:	e007      	b.n	8004552 <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2108      	movs	r1, #8
 800454e:	430a      	orrs	r2, r1
 8004550:	619a      	str	r2, [r3, #24]
}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	46bd      	mov	sp, r7
 8004556:	b004      	add	sp, #16
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	fffffedf 	.word	0xfffffedf

08004560 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b002      	add	sp, #8
 800456e:	bd80      	pop	{r7, pc}

08004570 <__errno>:
 8004570:	4b01      	ldr	r3, [pc, #4]	; (8004578 <__errno+0x8>)
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	4770      	bx	lr
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	20000010 	.word	0x20000010

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	2600      	movs	r6, #0
 8004580:	4d0c      	ldr	r5, [pc, #48]	; (80045b4 <__libc_init_array+0x38>)
 8004582:	4c0d      	ldr	r4, [pc, #52]	; (80045b8 <__libc_init_array+0x3c>)
 8004584:	1b64      	subs	r4, r4, r5
 8004586:	10a4      	asrs	r4, r4, #2
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	2600      	movs	r6, #0
 800458e:	f000 fcc9 	bl	8004f24 <_init>
 8004592:	4d0a      	ldr	r5, [pc, #40]	; (80045bc <__libc_init_array+0x40>)
 8004594:	4c0a      	ldr	r4, [pc, #40]	; (80045c0 <__libc_init_array+0x44>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	00b3      	lsls	r3, r6, #2
 80045a2:	58eb      	ldr	r3, [r5, r3]
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	00b3      	lsls	r3, r6, #2
 80045ac:	58eb      	ldr	r3, [r5, r3]
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	08005104 	.word	0x08005104
 80045b8:	08005104 	.word	0x08005104
 80045bc:	08005104 	.word	0x08005104
 80045c0:	08005108 	.word	0x08005108

080045c4 <memset>:
 80045c4:	0003      	movs	r3, r0
 80045c6:	1812      	adds	r2, r2, r0
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d100      	bne.n	80045ce <memset+0xa>
 80045cc:	4770      	bx	lr
 80045ce:	7019      	strb	r1, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	e7f9      	b.n	80045c8 <memset+0x4>

080045d4 <_puts_r>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	0005      	movs	r5, r0
 80045d8:	000e      	movs	r6, r1
 80045da:	2800      	cmp	r0, #0
 80045dc:	d004      	beq.n	80045e8 <_puts_r+0x14>
 80045de:	6983      	ldr	r3, [r0, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <_puts_r+0x14>
 80045e4:	f000 fa24 	bl	8004a30 <__sinit>
 80045e8:	69ab      	ldr	r3, [r5, #24]
 80045ea:	68ac      	ldr	r4, [r5, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <_puts_r+0x22>
 80045f0:	0028      	movs	r0, r5
 80045f2:	f000 fa1d 	bl	8004a30 <__sinit>
 80045f6:	4b24      	ldr	r3, [pc, #144]	; (8004688 <_puts_r+0xb4>)
 80045f8:	429c      	cmp	r4, r3
 80045fa:	d10f      	bne.n	800461c <_puts_r+0x48>
 80045fc:	686c      	ldr	r4, [r5, #4]
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	d502      	bpl.n	800460a <_puts_r+0x36>
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11f      	bne.n	800464a <_puts_r+0x76>
 800460a:	0021      	movs	r1, r4
 800460c:	0028      	movs	r0, r5
 800460e:	f000 f8a1 	bl	8004754 <__swsetup_r>
 8004612:	2800      	cmp	r0, #0
 8004614:	d019      	beq.n	800464a <_puts_r+0x76>
 8004616:	2001      	movs	r0, #1
 8004618:	4240      	negs	r0, r0
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	4b1b      	ldr	r3, [pc, #108]	; (800468c <_puts_r+0xb8>)
 800461e:	429c      	cmp	r4, r3
 8004620:	d101      	bne.n	8004626 <_puts_r+0x52>
 8004622:	68ac      	ldr	r4, [r5, #8]
 8004624:	e7eb      	b.n	80045fe <_puts_r+0x2a>
 8004626:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <_puts_r+0xbc>)
 8004628:	429c      	cmp	r4, r3
 800462a:	d1e8      	bne.n	80045fe <_puts_r+0x2a>
 800462c:	68ec      	ldr	r4, [r5, #12]
 800462e:	e7e6      	b.n	80045fe <_puts_r+0x2a>
 8004630:	3601      	adds	r6, #1
 8004632:	60a3      	str	r3, [r4, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	da04      	bge.n	8004642 <_puts_r+0x6e>
 8004638:	69a2      	ldr	r2, [r4, #24]
 800463a:	429a      	cmp	r2, r3
 800463c:	dc16      	bgt.n	800466c <_puts_r+0x98>
 800463e:	290a      	cmp	r1, #10
 8004640:	d014      	beq.n	800466c <_puts_r+0x98>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	7019      	strb	r1, [r3, #0]
 800464a:	68a3      	ldr	r3, [r4, #8]
 800464c:	7831      	ldrb	r1, [r6, #0]
 800464e:	3b01      	subs	r3, #1
 8004650:	2900      	cmp	r1, #0
 8004652:	d1ed      	bne.n	8004630 <_puts_r+0x5c>
 8004654:	60a3      	str	r3, [r4, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	da0f      	bge.n	800467a <_puts_r+0xa6>
 800465a:	0022      	movs	r2, r4
 800465c:	310a      	adds	r1, #10
 800465e:	0028      	movs	r0, r5
 8004660:	f000 f822 	bl	80046a8 <__swbuf_r>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d0d6      	beq.n	8004616 <_puts_r+0x42>
 8004668:	200a      	movs	r0, #10
 800466a:	e7d6      	b.n	800461a <_puts_r+0x46>
 800466c:	0022      	movs	r2, r4
 800466e:	0028      	movs	r0, r5
 8004670:	f000 f81a 	bl	80046a8 <__swbuf_r>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d1e8      	bne.n	800464a <_puts_r+0x76>
 8004678:	e7cd      	b.n	8004616 <_puts_r+0x42>
 800467a:	200a      	movs	r0, #10
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	6022      	str	r2, [r4, #0]
 8004682:	7018      	strb	r0, [r3, #0]
 8004684:	e7c9      	b.n	800461a <_puts_r+0x46>
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	080050c4 	.word	0x080050c4
 800468c:	080050e4 	.word	0x080050e4
 8004690:	080050a4 	.word	0x080050a4

08004694 <puts>:
 8004694:	b510      	push	{r4, lr}
 8004696:	4b03      	ldr	r3, [pc, #12]	; (80046a4 <puts+0x10>)
 8004698:	0001      	movs	r1, r0
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	f7ff ff9a 	bl	80045d4 <_puts_r>
 80046a0:	bd10      	pop	{r4, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	20000010 	.word	0x20000010

080046a8 <__swbuf_r>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	0005      	movs	r5, r0
 80046ac:	000e      	movs	r6, r1
 80046ae:	0014      	movs	r4, r2
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d004      	beq.n	80046be <__swbuf_r+0x16>
 80046b4:	6983      	ldr	r3, [r0, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <__swbuf_r+0x16>
 80046ba:	f000 f9b9 	bl	8004a30 <__sinit>
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <__swbuf_r+0xa0>)
 80046c0:	429c      	cmp	r4, r3
 80046c2:	d12d      	bne.n	8004720 <__swbuf_r+0x78>
 80046c4:	686c      	ldr	r4, [r5, #4]
 80046c6:	69a3      	ldr	r3, [r4, #24]
 80046c8:	60a3      	str	r3, [r4, #8]
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	071b      	lsls	r3, r3, #28
 80046ce:	d531      	bpl.n	8004734 <__swbuf_r+0x8c>
 80046d0:	6923      	ldr	r3, [r4, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d02e      	beq.n	8004734 <__swbuf_r+0x8c>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	6922      	ldr	r2, [r4, #16]
 80046da:	b2f7      	uxtb	r7, r6
 80046dc:	1a98      	subs	r0, r3, r2
 80046de:	6963      	ldr	r3, [r4, #20]
 80046e0:	b2f6      	uxtb	r6, r6
 80046e2:	4283      	cmp	r3, r0
 80046e4:	dc05      	bgt.n	80046f2 <__swbuf_r+0x4a>
 80046e6:	0021      	movs	r1, r4
 80046e8:	0028      	movs	r0, r5
 80046ea:	f000 f933 	bl	8004954 <_fflush_r>
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d126      	bne.n	8004740 <__swbuf_r+0x98>
 80046f2:	68a3      	ldr	r3, [r4, #8]
 80046f4:	3001      	adds	r0, #1
 80046f6:	3b01      	subs	r3, #1
 80046f8:	60a3      	str	r3, [r4, #8]
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	6022      	str	r2, [r4, #0]
 8004700:	701f      	strb	r7, [r3, #0]
 8004702:	6963      	ldr	r3, [r4, #20]
 8004704:	4283      	cmp	r3, r0
 8004706:	d004      	beq.n	8004712 <__swbuf_r+0x6a>
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	07db      	lsls	r3, r3, #31
 800470c:	d51a      	bpl.n	8004744 <__swbuf_r+0x9c>
 800470e:	2e0a      	cmp	r6, #10
 8004710:	d118      	bne.n	8004744 <__swbuf_r+0x9c>
 8004712:	0021      	movs	r1, r4
 8004714:	0028      	movs	r0, r5
 8004716:	f000 f91d 	bl	8004954 <_fflush_r>
 800471a:	2800      	cmp	r0, #0
 800471c:	d012      	beq.n	8004744 <__swbuf_r+0x9c>
 800471e:	e00f      	b.n	8004740 <__swbuf_r+0x98>
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <__swbuf_r+0xa4>)
 8004722:	429c      	cmp	r4, r3
 8004724:	d101      	bne.n	800472a <__swbuf_r+0x82>
 8004726:	68ac      	ldr	r4, [r5, #8]
 8004728:	e7cd      	b.n	80046c6 <__swbuf_r+0x1e>
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <__swbuf_r+0xa8>)
 800472c:	429c      	cmp	r4, r3
 800472e:	d1ca      	bne.n	80046c6 <__swbuf_r+0x1e>
 8004730:	68ec      	ldr	r4, [r5, #12]
 8004732:	e7c8      	b.n	80046c6 <__swbuf_r+0x1e>
 8004734:	0021      	movs	r1, r4
 8004736:	0028      	movs	r0, r5
 8004738:	f000 f80c 	bl	8004754 <__swsetup_r>
 800473c:	2800      	cmp	r0, #0
 800473e:	d0ca      	beq.n	80046d6 <__swbuf_r+0x2e>
 8004740:	2601      	movs	r6, #1
 8004742:	4276      	negs	r6, r6
 8004744:	0030      	movs	r0, r6
 8004746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004748:	080050c4 	.word	0x080050c4
 800474c:	080050e4 	.word	0x080050e4
 8004750:	080050a4 	.word	0x080050a4

08004754 <__swsetup_r>:
 8004754:	4b36      	ldr	r3, [pc, #216]	; (8004830 <__swsetup_r+0xdc>)
 8004756:	b570      	push	{r4, r5, r6, lr}
 8004758:	681d      	ldr	r5, [r3, #0]
 800475a:	0006      	movs	r6, r0
 800475c:	000c      	movs	r4, r1
 800475e:	2d00      	cmp	r5, #0
 8004760:	d005      	beq.n	800476e <__swsetup_r+0x1a>
 8004762:	69ab      	ldr	r3, [r5, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <__swsetup_r+0x1a>
 8004768:	0028      	movs	r0, r5
 800476a:	f000 f961 	bl	8004a30 <__sinit>
 800476e:	4b31      	ldr	r3, [pc, #196]	; (8004834 <__swsetup_r+0xe0>)
 8004770:	429c      	cmp	r4, r3
 8004772:	d10f      	bne.n	8004794 <__swsetup_r+0x40>
 8004774:	686c      	ldr	r4, [r5, #4]
 8004776:	230c      	movs	r3, #12
 8004778:	5ee2      	ldrsh	r2, [r4, r3]
 800477a:	b293      	uxth	r3, r2
 800477c:	0719      	lsls	r1, r3, #28
 800477e:	d42d      	bmi.n	80047dc <__swsetup_r+0x88>
 8004780:	06d9      	lsls	r1, r3, #27
 8004782:	d411      	bmi.n	80047a8 <__swsetup_r+0x54>
 8004784:	2309      	movs	r3, #9
 8004786:	2001      	movs	r0, #1
 8004788:	6033      	str	r3, [r6, #0]
 800478a:	3337      	adds	r3, #55	; 0x37
 800478c:	4313      	orrs	r3, r2
 800478e:	81a3      	strh	r3, [r4, #12]
 8004790:	4240      	negs	r0, r0
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	4b28      	ldr	r3, [pc, #160]	; (8004838 <__swsetup_r+0xe4>)
 8004796:	429c      	cmp	r4, r3
 8004798:	d101      	bne.n	800479e <__swsetup_r+0x4a>
 800479a:	68ac      	ldr	r4, [r5, #8]
 800479c:	e7eb      	b.n	8004776 <__swsetup_r+0x22>
 800479e:	4b27      	ldr	r3, [pc, #156]	; (800483c <__swsetup_r+0xe8>)
 80047a0:	429c      	cmp	r4, r3
 80047a2:	d1e8      	bne.n	8004776 <__swsetup_r+0x22>
 80047a4:	68ec      	ldr	r4, [r5, #12]
 80047a6:	e7e6      	b.n	8004776 <__swsetup_r+0x22>
 80047a8:	075b      	lsls	r3, r3, #29
 80047aa:	d513      	bpl.n	80047d4 <__swsetup_r+0x80>
 80047ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ae:	2900      	cmp	r1, #0
 80047b0:	d008      	beq.n	80047c4 <__swsetup_r+0x70>
 80047b2:	0023      	movs	r3, r4
 80047b4:	3344      	adds	r3, #68	; 0x44
 80047b6:	4299      	cmp	r1, r3
 80047b8:	d002      	beq.n	80047c0 <__swsetup_r+0x6c>
 80047ba:	0030      	movs	r0, r6
 80047bc:	f000 fa38 	bl	8004c30 <_free_r>
 80047c0:	2300      	movs	r3, #0
 80047c2:	6363      	str	r3, [r4, #52]	; 0x34
 80047c4:	2224      	movs	r2, #36	; 0x24
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	4393      	bics	r3, r2
 80047ca:	81a3      	strh	r3, [r4, #12]
 80047cc:	2300      	movs	r3, #0
 80047ce:	6063      	str	r3, [r4, #4]
 80047d0:	6923      	ldr	r3, [r4, #16]
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	2308      	movs	r3, #8
 80047d6:	89a2      	ldrh	r2, [r4, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <__swsetup_r+0xa6>
 80047e2:	21a0      	movs	r1, #160	; 0xa0
 80047e4:	2280      	movs	r2, #128	; 0x80
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	0089      	lsls	r1, r1, #2
 80047ea:	0092      	lsls	r2, r2, #2
 80047ec:	400b      	ands	r3, r1
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d003      	beq.n	80047fa <__swsetup_r+0xa6>
 80047f2:	0021      	movs	r1, r4
 80047f4:	0030      	movs	r0, r6
 80047f6:	f000 f9d7 	bl	8004ba8 <__smakebuf_r>
 80047fa:	2301      	movs	r3, #1
 80047fc:	89a2      	ldrh	r2, [r4, #12]
 80047fe:	4013      	ands	r3, r2
 8004800:	d011      	beq.n	8004826 <__swsetup_r+0xd2>
 8004802:	2300      	movs	r3, #0
 8004804:	60a3      	str	r3, [r4, #8]
 8004806:	6963      	ldr	r3, [r4, #20]
 8004808:	425b      	negs	r3, r3
 800480a:	61a3      	str	r3, [r4, #24]
 800480c:	2000      	movs	r0, #0
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	4283      	cmp	r3, r0
 8004812:	d1be      	bne.n	8004792 <__swsetup_r+0x3e>
 8004814:	230c      	movs	r3, #12
 8004816:	5ee2      	ldrsh	r2, [r4, r3]
 8004818:	0613      	lsls	r3, r2, #24
 800481a:	d5ba      	bpl.n	8004792 <__swsetup_r+0x3e>
 800481c:	2340      	movs	r3, #64	; 0x40
 800481e:	4313      	orrs	r3, r2
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	3801      	subs	r0, #1
 8004824:	e7b5      	b.n	8004792 <__swsetup_r+0x3e>
 8004826:	0792      	lsls	r2, r2, #30
 8004828:	d400      	bmi.n	800482c <__swsetup_r+0xd8>
 800482a:	6963      	ldr	r3, [r4, #20]
 800482c:	60a3      	str	r3, [r4, #8]
 800482e:	e7ed      	b.n	800480c <__swsetup_r+0xb8>
 8004830:	20000010 	.word	0x20000010
 8004834:	080050c4 	.word	0x080050c4
 8004838:	080050e4 	.word	0x080050e4
 800483c:	080050a4 	.word	0x080050a4

08004840 <__sflush_r>:
 8004840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004842:	898a      	ldrh	r2, [r1, #12]
 8004844:	0005      	movs	r5, r0
 8004846:	000c      	movs	r4, r1
 8004848:	0713      	lsls	r3, r2, #28
 800484a:	d460      	bmi.n	800490e <__sflush_r+0xce>
 800484c:	684b      	ldr	r3, [r1, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	dc04      	bgt.n	800485c <__sflush_r+0x1c>
 8004852:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	dc01      	bgt.n	800485c <__sflush_r+0x1c>
 8004858:	2000      	movs	r0, #0
 800485a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800485c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800485e:	2f00      	cmp	r7, #0
 8004860:	d0fa      	beq.n	8004858 <__sflush_r+0x18>
 8004862:	2300      	movs	r3, #0
 8004864:	682e      	ldr	r6, [r5, #0]
 8004866:	602b      	str	r3, [r5, #0]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	015b      	lsls	r3, r3, #5
 800486c:	6a21      	ldr	r1, [r4, #32]
 800486e:	401a      	ands	r2, r3
 8004870:	d034      	beq.n	80048dc <__sflush_r+0x9c>
 8004872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	075b      	lsls	r3, r3, #29
 8004878:	d506      	bpl.n	8004888 <__sflush_r+0x48>
 800487a:	6863      	ldr	r3, [r4, #4]
 800487c:	1ac0      	subs	r0, r0, r3
 800487e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <__sflush_r+0x48>
 8004884:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004886:	1ac0      	subs	r0, r0, r3
 8004888:	0002      	movs	r2, r0
 800488a:	6a21      	ldr	r1, [r4, #32]
 800488c:	2300      	movs	r3, #0
 800488e:	0028      	movs	r0, r5
 8004890:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004892:	47b8      	blx	r7
 8004894:	89a1      	ldrh	r1, [r4, #12]
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	d106      	bne.n	80048a8 <__sflush_r+0x68>
 800489a:	682b      	ldr	r3, [r5, #0]
 800489c:	2b1d      	cmp	r3, #29
 800489e:	d830      	bhi.n	8004902 <__sflush_r+0xc2>
 80048a0:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <__sflush_r+0x110>)
 80048a2:	40da      	lsrs	r2, r3
 80048a4:	07d3      	lsls	r3, r2, #31
 80048a6:	d52c      	bpl.n	8004902 <__sflush_r+0xc2>
 80048a8:	2300      	movs	r3, #0
 80048aa:	6063      	str	r3, [r4, #4]
 80048ac:	6923      	ldr	r3, [r4, #16]
 80048ae:	6023      	str	r3, [r4, #0]
 80048b0:	04cb      	lsls	r3, r1, #19
 80048b2:	d505      	bpl.n	80048c0 <__sflush_r+0x80>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <__sflush_r+0x7e>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d100      	bne.n	80048c0 <__sflush_r+0x80>
 80048be:	6560      	str	r0, [r4, #84]	; 0x54
 80048c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048c2:	602e      	str	r6, [r5, #0]
 80048c4:	2900      	cmp	r1, #0
 80048c6:	d0c7      	beq.n	8004858 <__sflush_r+0x18>
 80048c8:	0023      	movs	r3, r4
 80048ca:	3344      	adds	r3, #68	; 0x44
 80048cc:	4299      	cmp	r1, r3
 80048ce:	d002      	beq.n	80048d6 <__sflush_r+0x96>
 80048d0:	0028      	movs	r0, r5
 80048d2:	f000 f9ad 	bl	8004c30 <_free_r>
 80048d6:	2000      	movs	r0, #0
 80048d8:	6360      	str	r0, [r4, #52]	; 0x34
 80048da:	e7be      	b.n	800485a <__sflush_r+0x1a>
 80048dc:	2301      	movs	r3, #1
 80048de:	0028      	movs	r0, r5
 80048e0:	47b8      	blx	r7
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	d1c6      	bne.n	8004874 <__sflush_r+0x34>
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0c3      	beq.n	8004874 <__sflush_r+0x34>
 80048ec:	2b1d      	cmp	r3, #29
 80048ee:	d001      	beq.n	80048f4 <__sflush_r+0xb4>
 80048f0:	2b16      	cmp	r3, #22
 80048f2:	d101      	bne.n	80048f8 <__sflush_r+0xb8>
 80048f4:	602e      	str	r6, [r5, #0]
 80048f6:	e7af      	b.n	8004858 <__sflush_r+0x18>
 80048f8:	2340      	movs	r3, #64	; 0x40
 80048fa:	89a2      	ldrh	r2, [r4, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	81a3      	strh	r3, [r4, #12]
 8004900:	e7ab      	b.n	800485a <__sflush_r+0x1a>
 8004902:	2340      	movs	r3, #64	; 0x40
 8004904:	430b      	orrs	r3, r1
 8004906:	2001      	movs	r0, #1
 8004908:	81a3      	strh	r3, [r4, #12]
 800490a:	4240      	negs	r0, r0
 800490c:	e7a5      	b.n	800485a <__sflush_r+0x1a>
 800490e:	690f      	ldr	r7, [r1, #16]
 8004910:	2f00      	cmp	r7, #0
 8004912:	d0a1      	beq.n	8004858 <__sflush_r+0x18>
 8004914:	680b      	ldr	r3, [r1, #0]
 8004916:	600f      	str	r7, [r1, #0]
 8004918:	1bdb      	subs	r3, r3, r7
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	2300      	movs	r3, #0
 800491e:	0792      	lsls	r2, r2, #30
 8004920:	d100      	bne.n	8004924 <__sflush_r+0xe4>
 8004922:	694b      	ldr	r3, [r1, #20]
 8004924:	60a3      	str	r3, [r4, #8]
 8004926:	9b01      	ldr	r3, [sp, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	dc00      	bgt.n	800492e <__sflush_r+0xee>
 800492c:	e794      	b.n	8004858 <__sflush_r+0x18>
 800492e:	9b01      	ldr	r3, [sp, #4]
 8004930:	003a      	movs	r2, r7
 8004932:	6a21      	ldr	r1, [r4, #32]
 8004934:	0028      	movs	r0, r5
 8004936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004938:	47b0      	blx	r6
 800493a:	2800      	cmp	r0, #0
 800493c:	dc03      	bgt.n	8004946 <__sflush_r+0x106>
 800493e:	2340      	movs	r3, #64	; 0x40
 8004940:	89a2      	ldrh	r2, [r4, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	e7df      	b.n	8004906 <__sflush_r+0xc6>
 8004946:	9b01      	ldr	r3, [sp, #4]
 8004948:	183f      	adds	r7, r7, r0
 800494a:	1a1b      	subs	r3, r3, r0
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	e7ea      	b.n	8004926 <__sflush_r+0xe6>
 8004950:	20400001 	.word	0x20400001

08004954 <_fflush_r>:
 8004954:	690b      	ldr	r3, [r1, #16]
 8004956:	b570      	push	{r4, r5, r6, lr}
 8004958:	0005      	movs	r5, r0
 800495a:	000c      	movs	r4, r1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <_fflush_r+0x10>
 8004960:	2000      	movs	r0, #0
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	2800      	cmp	r0, #0
 8004966:	d004      	beq.n	8004972 <_fflush_r+0x1e>
 8004968:	6983      	ldr	r3, [r0, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <_fflush_r+0x1e>
 800496e:	f000 f85f 	bl	8004a30 <__sinit>
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <_fflush_r+0x4c>)
 8004974:	429c      	cmp	r4, r3
 8004976:	d109      	bne.n	800498c <_fflush_r+0x38>
 8004978:	686c      	ldr	r4, [r5, #4]
 800497a:	220c      	movs	r2, #12
 800497c:	5ea3      	ldrsh	r3, [r4, r2]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ee      	beq.n	8004960 <_fflush_r+0xc>
 8004982:	0021      	movs	r1, r4
 8004984:	0028      	movs	r0, r5
 8004986:	f7ff ff5b 	bl	8004840 <__sflush_r>
 800498a:	e7ea      	b.n	8004962 <_fflush_r+0xe>
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <_fflush_r+0x50>)
 800498e:	429c      	cmp	r4, r3
 8004990:	d101      	bne.n	8004996 <_fflush_r+0x42>
 8004992:	68ac      	ldr	r4, [r5, #8]
 8004994:	e7f1      	b.n	800497a <_fflush_r+0x26>
 8004996:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <_fflush_r+0x54>)
 8004998:	429c      	cmp	r4, r3
 800499a:	d1ee      	bne.n	800497a <_fflush_r+0x26>
 800499c:	68ec      	ldr	r4, [r5, #12]
 800499e:	e7ec      	b.n	800497a <_fflush_r+0x26>
 80049a0:	080050c4 	.word	0x080050c4
 80049a4:	080050e4 	.word	0x080050e4
 80049a8:	080050a4 	.word	0x080050a4

080049ac <std>:
 80049ac:	2300      	movs	r3, #0
 80049ae:	b510      	push	{r4, lr}
 80049b0:	0004      	movs	r4, r0
 80049b2:	6003      	str	r3, [r0, #0]
 80049b4:	6043      	str	r3, [r0, #4]
 80049b6:	6083      	str	r3, [r0, #8]
 80049b8:	8181      	strh	r1, [r0, #12]
 80049ba:	6643      	str	r3, [r0, #100]	; 0x64
 80049bc:	81c2      	strh	r2, [r0, #14]
 80049be:	6103      	str	r3, [r0, #16]
 80049c0:	6143      	str	r3, [r0, #20]
 80049c2:	6183      	str	r3, [r0, #24]
 80049c4:	0019      	movs	r1, r3
 80049c6:	2208      	movs	r2, #8
 80049c8:	305c      	adds	r0, #92	; 0x5c
 80049ca:	f7ff fdfb 	bl	80045c4 <memset>
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <std+0x38>)
 80049d0:	6224      	str	r4, [r4, #32]
 80049d2:	6263      	str	r3, [r4, #36]	; 0x24
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <std+0x3c>)
 80049d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <std+0x40>)
 80049da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049dc:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <std+0x44>)
 80049de:	6323      	str	r3, [r4, #48]	; 0x30
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	08004da5 	.word	0x08004da5
 80049e8:	08004dcd 	.word	0x08004dcd
 80049ec:	08004e05 	.word	0x08004e05
 80049f0:	08004e31 	.word	0x08004e31

080049f4 <_cleanup_r>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	4902      	ldr	r1, [pc, #8]	; (8004a00 <_cleanup_r+0xc>)
 80049f8:	f000 f88c 	bl	8004b14 <_fwalk_reent>
 80049fc:	bd10      	pop	{r4, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	08004955 	.word	0x08004955

08004a04 <__sfmoreglue>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	2568      	movs	r5, #104	; 0x68
 8004a08:	1e4a      	subs	r2, r1, #1
 8004a0a:	4355      	muls	r5, r2
 8004a0c:	000e      	movs	r6, r1
 8004a0e:	0029      	movs	r1, r5
 8004a10:	3174      	adds	r1, #116	; 0x74
 8004a12:	f000 f957 	bl	8004cc4 <_malloc_r>
 8004a16:	1e04      	subs	r4, r0, #0
 8004a18:	d008      	beq.n	8004a2c <__sfmoreglue+0x28>
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	002a      	movs	r2, r5
 8004a1e:	6001      	str	r1, [r0, #0]
 8004a20:	6046      	str	r6, [r0, #4]
 8004a22:	300c      	adds	r0, #12
 8004a24:	60a0      	str	r0, [r4, #8]
 8004a26:	3268      	adds	r2, #104	; 0x68
 8004a28:	f7ff fdcc 	bl	80045c4 <memset>
 8004a2c:	0020      	movs	r0, r4
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}

08004a30 <__sinit>:
 8004a30:	6983      	ldr	r3, [r0, #24]
 8004a32:	b513      	push	{r0, r1, r4, lr}
 8004a34:	0004      	movs	r4, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d128      	bne.n	8004a8c <__sinit+0x5c>
 8004a3a:	6483      	str	r3, [r0, #72]	; 0x48
 8004a3c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004a3e:	6503      	str	r3, [r0, #80]	; 0x50
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <__sinit+0x60>)
 8004a42:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <__sinit+0x64>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6282      	str	r2, [r0, #40]	; 0x28
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	4298      	cmp	r0, r3
 8004a4c:	d101      	bne.n	8004a52 <__sinit+0x22>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	6183      	str	r3, [r0, #24]
 8004a52:	0020      	movs	r0, r4
 8004a54:	f000 f820 	bl	8004a98 <__sfp>
 8004a58:	6060      	str	r0, [r4, #4]
 8004a5a:	0020      	movs	r0, r4
 8004a5c:	f000 f81c 	bl	8004a98 <__sfp>
 8004a60:	60a0      	str	r0, [r4, #8]
 8004a62:	0020      	movs	r0, r4
 8004a64:	f000 f818 	bl	8004a98 <__sfp>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	60e0      	str	r0, [r4, #12]
 8004a6c:	2104      	movs	r1, #4
 8004a6e:	6860      	ldr	r0, [r4, #4]
 8004a70:	f7ff ff9c 	bl	80049ac <std>
 8004a74:	2201      	movs	r2, #1
 8004a76:	2109      	movs	r1, #9
 8004a78:	68a0      	ldr	r0, [r4, #8]
 8004a7a:	f7ff ff97 	bl	80049ac <std>
 8004a7e:	2202      	movs	r2, #2
 8004a80:	2112      	movs	r1, #18
 8004a82:	68e0      	ldr	r0, [r4, #12]
 8004a84:	f7ff ff92 	bl	80049ac <std>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	61a3      	str	r3, [r4, #24]
 8004a8c:	bd13      	pop	{r0, r1, r4, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	080050a0 	.word	0x080050a0
 8004a94:	080049f5 	.word	0x080049f5

08004a98 <__sfp>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <__sfp+0x74>)
 8004a9c:	0007      	movs	r7, r0
 8004a9e:	681e      	ldr	r6, [r3, #0]
 8004aa0:	69b3      	ldr	r3, [r6, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d102      	bne.n	8004aac <__sfp+0x14>
 8004aa6:	0030      	movs	r0, r6
 8004aa8:	f7ff ffc2 	bl	8004a30 <__sinit>
 8004aac:	3648      	adds	r6, #72	; 0x48
 8004aae:	68b4      	ldr	r4, [r6, #8]
 8004ab0:	6873      	ldr	r3, [r6, #4]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	d504      	bpl.n	8004ac0 <__sfp+0x28>
 8004ab6:	6833      	ldr	r3, [r6, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <__sfp+0x34>
 8004abc:	6836      	ldr	r6, [r6, #0]
 8004abe:	e7f6      	b.n	8004aae <__sfp+0x16>
 8004ac0:	220c      	movs	r2, #12
 8004ac2:	5ea5      	ldrsh	r5, [r4, r2]
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	d00d      	beq.n	8004ae4 <__sfp+0x4c>
 8004ac8:	3468      	adds	r4, #104	; 0x68
 8004aca:	e7f2      	b.n	8004ab2 <__sfp+0x1a>
 8004acc:	2104      	movs	r1, #4
 8004ace:	0038      	movs	r0, r7
 8004ad0:	f7ff ff98 	bl	8004a04 <__sfmoreglue>
 8004ad4:	6030      	str	r0, [r6, #0]
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d1f0      	bne.n	8004abc <__sfp+0x24>
 8004ada:	230c      	movs	r3, #12
 8004adc:	0004      	movs	r4, r0
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	0020      	movs	r0, r4
 8004ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ae4:	0020      	movs	r0, r4
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <__sfp+0x78>)
 8004ae8:	6665      	str	r5, [r4, #100]	; 0x64
 8004aea:	6025      	str	r5, [r4, #0]
 8004aec:	6065      	str	r5, [r4, #4]
 8004aee:	60a5      	str	r5, [r4, #8]
 8004af0:	60e3      	str	r3, [r4, #12]
 8004af2:	6125      	str	r5, [r4, #16]
 8004af4:	6165      	str	r5, [r4, #20]
 8004af6:	61a5      	str	r5, [r4, #24]
 8004af8:	2208      	movs	r2, #8
 8004afa:	0029      	movs	r1, r5
 8004afc:	305c      	adds	r0, #92	; 0x5c
 8004afe:	f7ff fd61 	bl	80045c4 <memset>
 8004b02:	6365      	str	r5, [r4, #52]	; 0x34
 8004b04:	63a5      	str	r5, [r4, #56]	; 0x38
 8004b06:	64a5      	str	r5, [r4, #72]	; 0x48
 8004b08:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004b0a:	e7e9      	b.n	8004ae0 <__sfp+0x48>
 8004b0c:	080050a0 	.word	0x080050a0
 8004b10:	ffff0001 	.word	0xffff0001

08004b14 <_fwalk_reent>:
 8004b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b16:	0004      	movs	r4, r0
 8004b18:	0007      	movs	r7, r0
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	9101      	str	r1, [sp, #4]
 8004b1e:	3448      	adds	r4, #72	; 0x48
 8004b20:	2c00      	cmp	r4, #0
 8004b22:	d101      	bne.n	8004b28 <_fwalk_reent+0x14>
 8004b24:	0030      	movs	r0, r6
 8004b26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b28:	6863      	ldr	r3, [r4, #4]
 8004b2a:	68a5      	ldr	r5, [r4, #8]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	9b00      	ldr	r3, [sp, #0]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	d501      	bpl.n	8004b3a <_fwalk_reent+0x26>
 8004b36:	6824      	ldr	r4, [r4, #0]
 8004b38:	e7f2      	b.n	8004b20 <_fwalk_reent+0xc>
 8004b3a:	89ab      	ldrh	r3, [r5, #12]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d908      	bls.n	8004b52 <_fwalk_reent+0x3e>
 8004b40:	220e      	movs	r2, #14
 8004b42:	5eab      	ldrsh	r3, [r5, r2]
 8004b44:	3301      	adds	r3, #1
 8004b46:	d004      	beq.n	8004b52 <_fwalk_reent+0x3e>
 8004b48:	0029      	movs	r1, r5
 8004b4a:	0038      	movs	r0, r7
 8004b4c:	9b01      	ldr	r3, [sp, #4]
 8004b4e:	4798      	blx	r3
 8004b50:	4306      	orrs	r6, r0
 8004b52:	3568      	adds	r5, #104	; 0x68
 8004b54:	e7eb      	b.n	8004b2e <_fwalk_reent+0x1a>
	...

08004b58 <__swhatbuf_r>:
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	000e      	movs	r6, r1
 8004b5c:	001d      	movs	r5, r3
 8004b5e:	230e      	movs	r3, #14
 8004b60:	5ec9      	ldrsh	r1, [r1, r3]
 8004b62:	b096      	sub	sp, #88	; 0x58
 8004b64:	0014      	movs	r4, r2
 8004b66:	2900      	cmp	r1, #0
 8004b68:	da07      	bge.n	8004b7a <__swhatbuf_r+0x22>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	89b3      	ldrh	r3, [r6, #12]
 8004b70:	061b      	lsls	r3, r3, #24
 8004b72:	d411      	bmi.n	8004b98 <__swhatbuf_r+0x40>
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	e00f      	b.n	8004b9a <__swhatbuf_r+0x42>
 8004b7a:	466a      	mov	r2, sp
 8004b7c:	f000 f984 	bl	8004e88 <_fstat_r>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	dbf2      	blt.n	8004b6a <__swhatbuf_r+0x12>
 8004b84:	22f0      	movs	r2, #240	; 0xf0
 8004b86:	9b01      	ldr	r3, [sp, #4]
 8004b88:	0212      	lsls	r2, r2, #8
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	4a05      	ldr	r2, [pc, #20]	; (8004ba4 <__swhatbuf_r+0x4c>)
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	425a      	negs	r2, r3
 8004b92:	4153      	adcs	r3, r2
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	e7ed      	b.n	8004b74 <__swhatbuf_r+0x1c>
 8004b98:	2340      	movs	r3, #64	; 0x40
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	b016      	add	sp, #88	; 0x58
 8004ba0:	bd70      	pop	{r4, r5, r6, pc}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	ffffe000 	.word	0xffffe000

08004ba8 <__smakebuf_r>:
 8004ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004baa:	2602      	movs	r6, #2
 8004bac:	898b      	ldrh	r3, [r1, #12]
 8004bae:	0005      	movs	r5, r0
 8004bb0:	000c      	movs	r4, r1
 8004bb2:	4233      	tst	r3, r6
 8004bb4:	d006      	beq.n	8004bc4 <__smakebuf_r+0x1c>
 8004bb6:	0023      	movs	r3, r4
 8004bb8:	3347      	adds	r3, #71	; 0x47
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	6163      	str	r3, [r4, #20]
 8004bc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004bc4:	ab01      	add	r3, sp, #4
 8004bc6:	466a      	mov	r2, sp
 8004bc8:	f7ff ffc6 	bl	8004b58 <__swhatbuf_r>
 8004bcc:	9900      	ldr	r1, [sp, #0]
 8004bce:	0007      	movs	r7, r0
 8004bd0:	0028      	movs	r0, r5
 8004bd2:	f000 f877 	bl	8004cc4 <_malloc_r>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d108      	bne.n	8004bec <__smakebuf_r+0x44>
 8004bda:	220c      	movs	r2, #12
 8004bdc:	5ea3      	ldrsh	r3, [r4, r2]
 8004bde:	059a      	lsls	r2, r3, #22
 8004be0:	d4ef      	bmi.n	8004bc2 <__smakebuf_r+0x1a>
 8004be2:	2203      	movs	r2, #3
 8004be4:	4393      	bics	r3, r2
 8004be6:	431e      	orrs	r6, r3
 8004be8:	81a6      	strh	r6, [r4, #12]
 8004bea:	e7e4      	b.n	8004bb6 <__smakebuf_r+0xe>
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <__smakebuf_r+0x84>)
 8004bee:	62ab      	str	r3, [r5, #40]	; 0x28
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	89a2      	ldrh	r2, [r4, #12]
 8004bf4:	6020      	str	r0, [r4, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	9b00      	ldr	r3, [sp, #0]
 8004bfc:	6120      	str	r0, [r4, #16]
 8004bfe:	6163      	str	r3, [r4, #20]
 8004c00:	9b01      	ldr	r3, [sp, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <__smakebuf_r+0x7a>
 8004c06:	230e      	movs	r3, #14
 8004c08:	5ee1      	ldrsh	r1, [r4, r3]
 8004c0a:	0028      	movs	r0, r5
 8004c0c:	f000 f94e 	bl	8004eac <_isatty_r>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d006      	beq.n	8004c22 <__smakebuf_r+0x7a>
 8004c14:	2203      	movs	r2, #3
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	4393      	bics	r3, r2
 8004c1a:	001a      	movs	r2, r3
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	89a0      	ldrh	r0, [r4, #12]
 8004c24:	4338      	orrs	r0, r7
 8004c26:	81a0      	strh	r0, [r4, #12]
 8004c28:	e7cb      	b.n	8004bc2 <__smakebuf_r+0x1a>
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	080049f5 	.word	0x080049f5

08004c30 <_free_r>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	0005      	movs	r5, r0
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d010      	beq.n	8004c5a <_free_r+0x2a>
 8004c38:	1f0c      	subs	r4, r1, #4
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da00      	bge.n	8004c42 <_free_r+0x12>
 8004c40:	18e4      	adds	r4, r4, r3
 8004c42:	0028      	movs	r0, r5
 8004c44:	f000 f958 	bl	8004ef8 <__malloc_lock>
 8004c48:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <_free_r+0x90>)
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d105      	bne.n	8004c5c <_free_r+0x2c>
 8004c50:	6063      	str	r3, [r4, #4]
 8004c52:	6014      	str	r4, [r2, #0]
 8004c54:	0028      	movs	r0, r5
 8004c56:	f000 f950 	bl	8004efa <__malloc_unlock>
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	d909      	bls.n	8004c74 <_free_r+0x44>
 8004c60:	6821      	ldr	r1, [r4, #0]
 8004c62:	1860      	adds	r0, r4, r1
 8004c64:	4283      	cmp	r3, r0
 8004c66:	d1f3      	bne.n	8004c50 <_free_r+0x20>
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	1841      	adds	r1, r0, r1
 8004c6e:	6021      	str	r1, [r4, #0]
 8004c70:	e7ee      	b.n	8004c50 <_free_r+0x20>
 8004c72:	0013      	movs	r3, r2
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	2a00      	cmp	r2, #0
 8004c78:	d001      	beq.n	8004c7e <_free_r+0x4e>
 8004c7a:	42a2      	cmp	r2, r4
 8004c7c:	d9f9      	bls.n	8004c72 <_free_r+0x42>
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	1858      	adds	r0, r3, r1
 8004c82:	42a0      	cmp	r0, r4
 8004c84:	d10b      	bne.n	8004c9e <_free_r+0x6e>
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	1809      	adds	r1, r1, r0
 8004c8a:	1858      	adds	r0, r3, r1
 8004c8c:	6019      	str	r1, [r3, #0]
 8004c8e:	4282      	cmp	r2, r0
 8004c90:	d1e0      	bne.n	8004c54 <_free_r+0x24>
 8004c92:	6810      	ldr	r0, [r2, #0]
 8004c94:	6852      	ldr	r2, [r2, #4]
 8004c96:	1841      	adds	r1, r0, r1
 8004c98:	6019      	str	r1, [r3, #0]
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	e7da      	b.n	8004c54 <_free_r+0x24>
 8004c9e:	42a0      	cmp	r0, r4
 8004ca0:	d902      	bls.n	8004ca8 <_free_r+0x78>
 8004ca2:	230c      	movs	r3, #12
 8004ca4:	602b      	str	r3, [r5, #0]
 8004ca6:	e7d5      	b.n	8004c54 <_free_r+0x24>
 8004ca8:	6821      	ldr	r1, [r4, #0]
 8004caa:	1860      	adds	r0, r4, r1
 8004cac:	4282      	cmp	r2, r0
 8004cae:	d103      	bne.n	8004cb8 <_free_r+0x88>
 8004cb0:	6810      	ldr	r0, [r2, #0]
 8004cb2:	6852      	ldr	r2, [r2, #4]
 8004cb4:	1841      	adds	r1, r0, r1
 8004cb6:	6021      	str	r1, [r4, #0]
 8004cb8:	6062      	str	r2, [r4, #4]
 8004cba:	605c      	str	r4, [r3, #4]
 8004cbc:	e7ca      	b.n	8004c54 <_free_r+0x24>
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	200000a0 	.word	0x200000a0

08004cc4 <_malloc_r>:
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	b570      	push	{r4, r5, r6, lr}
 8004cc8:	1ccd      	adds	r5, r1, #3
 8004cca:	439d      	bics	r5, r3
 8004ccc:	3508      	adds	r5, #8
 8004cce:	0006      	movs	r6, r0
 8004cd0:	2d0c      	cmp	r5, #12
 8004cd2:	d21e      	bcs.n	8004d12 <_malloc_r+0x4e>
 8004cd4:	250c      	movs	r5, #12
 8004cd6:	42a9      	cmp	r1, r5
 8004cd8:	d81d      	bhi.n	8004d16 <_malloc_r+0x52>
 8004cda:	0030      	movs	r0, r6
 8004cdc:	f000 f90c 	bl	8004ef8 <__malloc_lock>
 8004ce0:	4a25      	ldr	r2, [pc, #148]	; (8004d78 <_malloc_r+0xb4>)
 8004ce2:	6814      	ldr	r4, [r2, #0]
 8004ce4:	0021      	movs	r1, r4
 8004ce6:	2900      	cmp	r1, #0
 8004ce8:	d119      	bne.n	8004d1e <_malloc_r+0x5a>
 8004cea:	4c24      	ldr	r4, [pc, #144]	; (8004d7c <_malloc_r+0xb8>)
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <_malloc_r+0x36>
 8004cf2:	0030      	movs	r0, r6
 8004cf4:	f000 f844 	bl	8004d80 <_sbrk_r>
 8004cf8:	6020      	str	r0, [r4, #0]
 8004cfa:	0029      	movs	r1, r5
 8004cfc:	0030      	movs	r0, r6
 8004cfe:	f000 f83f 	bl	8004d80 <_sbrk_r>
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	d12b      	bne.n	8004d5e <_malloc_r+0x9a>
 8004d06:	230c      	movs	r3, #12
 8004d08:	0030      	movs	r0, r6
 8004d0a:	6033      	str	r3, [r6, #0]
 8004d0c:	f000 f8f5 	bl	8004efa <__malloc_unlock>
 8004d10:	e003      	b.n	8004d1a <_malloc_r+0x56>
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	dadf      	bge.n	8004cd6 <_malloc_r+0x12>
 8004d16:	230c      	movs	r3, #12
 8004d18:	6033      	str	r3, [r6, #0]
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	bd70      	pop	{r4, r5, r6, pc}
 8004d1e:	680b      	ldr	r3, [r1, #0]
 8004d20:	1b5b      	subs	r3, r3, r5
 8004d22:	d419      	bmi.n	8004d58 <_malloc_r+0x94>
 8004d24:	2b0b      	cmp	r3, #11
 8004d26:	d903      	bls.n	8004d30 <_malloc_r+0x6c>
 8004d28:	600b      	str	r3, [r1, #0]
 8004d2a:	18cc      	adds	r4, r1, r3
 8004d2c:	6025      	str	r5, [r4, #0]
 8004d2e:	e003      	b.n	8004d38 <_malloc_r+0x74>
 8004d30:	684b      	ldr	r3, [r1, #4]
 8004d32:	428c      	cmp	r4, r1
 8004d34:	d10d      	bne.n	8004d52 <_malloc_r+0x8e>
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	0030      	movs	r0, r6
 8004d3a:	f000 f8de 	bl	8004efa <__malloc_unlock>
 8004d3e:	0020      	movs	r0, r4
 8004d40:	2207      	movs	r2, #7
 8004d42:	300b      	adds	r0, #11
 8004d44:	1d23      	adds	r3, r4, #4
 8004d46:	4390      	bics	r0, r2
 8004d48:	1ac3      	subs	r3, r0, r3
 8004d4a:	d0e7      	beq.n	8004d1c <_malloc_r+0x58>
 8004d4c:	425a      	negs	r2, r3
 8004d4e:	50e2      	str	r2, [r4, r3]
 8004d50:	e7e4      	b.n	8004d1c <_malloc_r+0x58>
 8004d52:	6063      	str	r3, [r4, #4]
 8004d54:	000c      	movs	r4, r1
 8004d56:	e7ef      	b.n	8004d38 <_malloc_r+0x74>
 8004d58:	000c      	movs	r4, r1
 8004d5a:	6849      	ldr	r1, [r1, #4]
 8004d5c:	e7c3      	b.n	8004ce6 <_malloc_r+0x22>
 8004d5e:	2303      	movs	r3, #3
 8004d60:	1cc4      	adds	r4, r0, #3
 8004d62:	439c      	bics	r4, r3
 8004d64:	42a0      	cmp	r0, r4
 8004d66:	d0e1      	beq.n	8004d2c <_malloc_r+0x68>
 8004d68:	1a21      	subs	r1, r4, r0
 8004d6a:	0030      	movs	r0, r6
 8004d6c:	f000 f808 	bl	8004d80 <_sbrk_r>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d1db      	bne.n	8004d2c <_malloc_r+0x68>
 8004d74:	e7c7      	b.n	8004d06 <_malloc_r+0x42>
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	200000a0 	.word	0x200000a0
 8004d7c:	200000a4 	.word	0x200000a4

08004d80 <_sbrk_r>:
 8004d80:	2300      	movs	r3, #0
 8004d82:	b570      	push	{r4, r5, r6, lr}
 8004d84:	4c06      	ldr	r4, [pc, #24]	; (8004da0 <_sbrk_r+0x20>)
 8004d86:	0005      	movs	r5, r0
 8004d88:	0008      	movs	r0, r1
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	f7fc f86a 	bl	8000e64 <_sbrk>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d103      	bne.n	8004d9c <_sbrk_r+0x1c>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d000      	beq.n	8004d9c <_sbrk_r+0x1c>
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	2000072c 	.word	0x2000072c

08004da4 <__sread>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	000c      	movs	r4, r1
 8004da8:	250e      	movs	r5, #14
 8004daa:	5f49      	ldrsh	r1, [r1, r5]
 8004dac:	f000 f8a6 	bl	8004efc <_read_r>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	db03      	blt.n	8004dbc <__sread+0x18>
 8004db4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004db6:	181b      	adds	r3, r3, r0
 8004db8:	6563      	str	r3, [r4, #84]	; 0x54
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	4a02      	ldr	r2, [pc, #8]	; (8004dc8 <__sread+0x24>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	e7f9      	b.n	8004dba <__sread+0x16>
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	ffffefff 	.word	0xffffefff

08004dcc <__swrite>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	001f      	movs	r7, r3
 8004dd0:	898b      	ldrh	r3, [r1, #12]
 8004dd2:	0005      	movs	r5, r0
 8004dd4:	000c      	movs	r4, r1
 8004dd6:	0016      	movs	r6, r2
 8004dd8:	05db      	lsls	r3, r3, #23
 8004dda:	d505      	bpl.n	8004de8 <__swrite+0x1c>
 8004ddc:	230e      	movs	r3, #14
 8004dde:	5ec9      	ldrsh	r1, [r1, r3]
 8004de0:	2200      	movs	r2, #0
 8004de2:	2302      	movs	r3, #2
 8004de4:	f000 f874 	bl	8004ed0 <_lseek_r>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <__swrite+0x34>)
 8004dec:	0028      	movs	r0, r5
 8004dee:	4013      	ands	r3, r2
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	0032      	movs	r2, r6
 8004df4:	230e      	movs	r3, #14
 8004df6:	5ee1      	ldrsh	r1, [r4, r3]
 8004df8:	003b      	movs	r3, r7
 8004dfa:	f000 f81f 	bl	8004e3c <_write_r>
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e00:	ffffefff 	.word	0xffffefff

08004e04 <__sseek>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	000c      	movs	r4, r1
 8004e08:	250e      	movs	r5, #14
 8004e0a:	5f49      	ldrsh	r1, [r1, r5]
 8004e0c:	f000 f860 	bl	8004ed0 <_lseek_r>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	1c42      	adds	r2, r0, #1
 8004e14:	d103      	bne.n	8004e1e <__sseek+0x1a>
 8004e16:	4a05      	ldr	r2, [pc, #20]	; (8004e2c <__sseek+0x28>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	bd70      	pop	{r4, r5, r6, pc}
 8004e1e:	2280      	movs	r2, #128	; 0x80
 8004e20:	0152      	lsls	r2, r2, #5
 8004e22:	4313      	orrs	r3, r2
 8004e24:	81a3      	strh	r3, [r4, #12]
 8004e26:	6560      	str	r0, [r4, #84]	; 0x54
 8004e28:	e7f8      	b.n	8004e1c <__sseek+0x18>
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	ffffefff 	.word	0xffffefff

08004e30 <__sclose>:
 8004e30:	b510      	push	{r4, lr}
 8004e32:	230e      	movs	r3, #14
 8004e34:	5ec9      	ldrsh	r1, [r1, r3]
 8004e36:	f000 f815 	bl	8004e64 <_close_r>
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <_write_r>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	0005      	movs	r5, r0
 8004e40:	0008      	movs	r0, r1
 8004e42:	0011      	movs	r1, r2
 8004e44:	2200      	movs	r2, #0
 8004e46:	4c06      	ldr	r4, [pc, #24]	; (8004e60 <_write_r+0x24>)
 8004e48:	6022      	str	r2, [r4, #0]
 8004e4a:	001a      	movs	r2, r3
 8004e4c:	f7fb ffc1 	bl	8000dd2 <_write>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d103      	bne.n	8004e5c <_write_r+0x20>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d000      	beq.n	8004e5c <_write_r+0x20>
 8004e5a:	602b      	str	r3, [r5, #0]
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	2000072c 	.word	0x2000072c

08004e64 <_close_r>:
 8004e64:	2300      	movs	r3, #0
 8004e66:	b570      	push	{r4, r5, r6, lr}
 8004e68:	4c06      	ldr	r4, [pc, #24]	; (8004e84 <_close_r+0x20>)
 8004e6a:	0005      	movs	r5, r0
 8004e6c:	0008      	movs	r0, r1
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	f7fb ffcb 	bl	8000e0a <_close>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	d103      	bne.n	8004e80 <_close_r+0x1c>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d000      	beq.n	8004e80 <_close_r+0x1c>
 8004e7e:	602b      	str	r3, [r5, #0]
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	2000072c 	.word	0x2000072c

08004e88 <_fstat_r>:
 8004e88:	2300      	movs	r3, #0
 8004e8a:	b570      	push	{r4, r5, r6, lr}
 8004e8c:	4c06      	ldr	r4, [pc, #24]	; (8004ea8 <_fstat_r+0x20>)
 8004e8e:	0005      	movs	r5, r0
 8004e90:	0008      	movs	r0, r1
 8004e92:	0011      	movs	r1, r2
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	f7fb ffc2 	bl	8000e1e <_fstat>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	d103      	bne.n	8004ea6 <_fstat_r+0x1e>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d000      	beq.n	8004ea6 <_fstat_r+0x1e>
 8004ea4:	602b      	str	r3, [r5, #0]
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	2000072c 	.word	0x2000072c

08004eac <_isatty_r>:
 8004eac:	2300      	movs	r3, #0
 8004eae:	b570      	push	{r4, r5, r6, lr}
 8004eb0:	4c06      	ldr	r4, [pc, #24]	; (8004ecc <_isatty_r+0x20>)
 8004eb2:	0005      	movs	r5, r0
 8004eb4:	0008      	movs	r0, r1
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	f7fb ffbf 	bl	8000e3a <_isatty>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d103      	bne.n	8004ec8 <_isatty_r+0x1c>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d000      	beq.n	8004ec8 <_isatty_r+0x1c>
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	2000072c 	.word	0x2000072c

08004ed0 <_lseek_r>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	0005      	movs	r5, r0
 8004ed4:	0008      	movs	r0, r1
 8004ed6:	0011      	movs	r1, r2
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4c06      	ldr	r4, [pc, #24]	; (8004ef4 <_lseek_r+0x24>)
 8004edc:	6022      	str	r2, [r4, #0]
 8004ede:	001a      	movs	r2, r3
 8004ee0:	f7fb ffb4 	bl	8000e4c <_lseek>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d103      	bne.n	8004ef0 <_lseek_r+0x20>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d000      	beq.n	8004ef0 <_lseek_r+0x20>
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	2000072c 	.word	0x2000072c

08004ef8 <__malloc_lock>:
 8004ef8:	4770      	bx	lr

08004efa <__malloc_unlock>:
 8004efa:	4770      	bx	lr

08004efc <_read_r>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	0005      	movs	r5, r0
 8004f00:	0008      	movs	r0, r1
 8004f02:	0011      	movs	r1, r2
 8004f04:	2200      	movs	r2, #0
 8004f06:	4c06      	ldr	r4, [pc, #24]	; (8004f20 <_read_r+0x24>)
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	001a      	movs	r2, r3
 8004f0c:	f7fb ff44 	bl	8000d98 <_read>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d103      	bne.n	8004f1c <_read_r+0x20>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d000      	beq.n	8004f1c <_read_r+0x20>
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	bd70      	pop	{r4, r5, r6, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	2000072c 	.word	0x2000072c

08004f24 <_init>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr

08004f30 <_fini>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr
