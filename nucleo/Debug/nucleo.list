
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005674  08005674  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005674  08005674  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005674  08005674  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800567c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000078  080056f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  080056f4  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5c1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f69  00000000  00000000  0002d661  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  0002f5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb0  00000000  00000000  00030358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000035e9  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3fc  00000000  00000000  000345f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099963  00000000  00000000  0003f9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003760  00000000  00000000  000d93cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005474 	.word	0x08005474

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005474 	.word	0x08005474

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 800023c:	1d39      	adds	r1, r7, #4
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <__io_putchar+0x20>)
 8000240:	230a      	movs	r3, #10
 8000242:	2201      	movs	r2, #1
 8000244:	f002 fef0 	bl	8003028 <HAL_UART_Transmit>

	return 1;
 8000248:	2301      	movs	r3, #1
}
 800024a:	0018      	movs	r0, r3
 800024c:	46bd      	mov	sp, r7
 800024e:	b002      	add	sp, #8
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	20000608 	.word	0x20000608

08000258 <__io_getchar>:

int __io_getchar(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <__io_getchar+0x1c>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	0019      	movs	r1, r3
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <__io_getchar+0x20>)
 8000264:	2201      	movs	r2, #1
 8000266:	0018      	movs	r0, r3
 8000268:	f002 fff6 	bl	8003258 <HAL_UART_Receive_IT>

	return 1;
 800026c:	2301      	movs	r3, #1
}
 800026e:	0018      	movs	r0, r3
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	200001d4 	.word	0x200001d4
 8000278:	20000608 	.word	0x20000608

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000280:	f000 ff06 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f836 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 f996 	bl	80005b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800028c:	f000 f976 	bl	800057c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f914 	bl	80004bc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000294:	f000 f88e 	bl	80003b4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000298:	f000 f940 	bl	800051c <MX_USART3_UART_Init>
  MX_TIM16_Init();
 800029c:	f000 f8e0 	bl	8000460 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <main+0x5c>)
 80002a2:	0018      	movs	r0, r3
 80002a4:	f002 fa4c 	bl	8002740 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <main+0x60>)
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <main+0x64>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 ffd2 	bl	8003258 <HAL_UART_Receive_IT>

  if(HAL_UART_Receive_DMA(&huart3,mise_buffer,32)!=HAL_OK)
 80002b4:	490b      	ldr	r1, [pc, #44]	; (80002e4 <main+0x68>)
 80002b6:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <main+0x6c>)
 80002b8:	2220      	movs	r2, #32
 80002ba:	0018      	movs	r0, r3
 80002bc:	f003 f81c 	bl	80032f8 <HAL_UART_Receive_DMA>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d003      	beq.n	80002cc <main+0x50>
  {
  	  printf("fail\r\n");
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <main+0x70>)
 80002c6:	0018      	movs	r0, r3
 80002c8:	f004 f9cc 	bl	8004664 <puts>
  }


  write_MISE("Passive");
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <main+0x74>)
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fb6e 	bl	80009b0 <write_MISE>
//  HAL_Delay(2000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <main+0x58>
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	200005c0 	.word	0x200005c0
 80002dc:	200001d4 	.word	0x200001d4
 80002e0:	20000608 	.word	0x20000608
 80002e4:	20000170 	.word	0x20000170
 80002e8:	200000ec 	.word	0x200000ec
 80002ec:	0800548c 	.word	0x0800548c
 80002f0:	08005494 	.word	0x08005494

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b099      	sub	sp, #100	; 0x64
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	242c      	movs	r4, #44	; 0x2c
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	0018      	movs	r0, r3
 8000300:	2334      	movs	r3, #52	; 0x34
 8000302:	001a      	movs	r2, r3
 8000304:	2100      	movs	r1, #0
 8000306:	f004 f92b 	bl	8004560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030a:	231c      	movs	r3, #28
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	0018      	movs	r0, r3
 8000310:	2310      	movs	r3, #16
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f004 f923 	bl	8004560 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031a:	003b      	movs	r3, r7
 800031c:	0018      	movs	r0, r3
 800031e:	231c      	movs	r3, #28
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f004 f91c 	bl	8004560 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000328:	0021      	movs	r1, r4
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2201      	movs	r2, #1
 8000334:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2202      	movs	r2, #2
 800033a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	0252      	lsls	r2, r2, #9
 8000342:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2280      	movs	r2, #128	; 0x80
 8000348:	0352      	lsls	r2, r2, #13
 800034a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2200      	movs	r2, #0
 8000350:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	187b      	adds	r3, r7, r1
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fba5 	bl	8001aa4 <HAL_RCC_OscConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800035e:	f000 fc13 	bl	8000b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	211c      	movs	r1, #28
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2207      	movs	r2, #7
 8000368:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2202      	movs	r2, #2
 800036e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2101      	movs	r1, #1
 8000380:	0018      	movs	r0, r3
 8000382:	f001 ff15 	bl	80021b0 <HAL_RCC_ClockConfig>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800038a:	f000 fbfd 	bl	8000b88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800038e:	003b      	movs	r3, r7
 8000390:	2202      	movs	r2, #2
 8000392:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000394:	003b      	movs	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039a:	003b      	movs	r3, r7
 800039c:	0018      	movs	r0, r3
 800039e:	f002 f87f 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003a6:	f000 fbef 	bl	8000b88 <Error_Handler>
  }
}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b019      	add	sp, #100	; 0x64
 80003b0:	bd90      	pop	{r4, r7, pc}
	...

080003b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ba:	2308      	movs	r3, #8
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	0018      	movs	r0, r3
 80003c0:	2310      	movs	r3, #16
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f004 f8cb 	bl	8004560 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ca:	003b      	movs	r3, r7
 80003cc:	0018      	movs	r0, r3
 80003ce:	2308      	movs	r3, #8
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f004 f8c4 	bl	8004560 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_TIM2_Init+0xa0>)
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	05d2      	lsls	r2, r2, #23
 80003de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_TIM2_Init+0xa0>)
 80003e2:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <MX_TIM2_Init+0xa4>)
 80003e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_TIM2_Init+0xa0>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_TIM2_Init+0xa0>)
 80003ee:	4a1b      	ldr	r2, [pc, #108]	; (800045c <MX_TIM2_Init+0xa8>)
 80003f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_TIM2_Init+0xa0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_TIM2_Init+0xa0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_TIM2_Init+0xa0>)
 8000400:	0018      	movs	r0, r3
 8000402:	f002 f94d 	bl	80026a0 <HAL_TIM_Base_Init>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800040a:	f000 fbbd 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040e:	2108      	movs	r1, #8
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	0152      	lsls	r2, r2, #5
 8000416:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000418:	187a      	adds	r2, r7, r1
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_TIM2_Init+0xa0>)
 800041c:	0011      	movs	r1, r2
 800041e:	0018      	movs	r0, r3
 8000420:	f002 fb40 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000428:	f000 fbae 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042c:	003b      	movs	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000432:	003b      	movs	r3, r7
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000438:	003a      	movs	r2, r7
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_TIM2_Init+0xa0>)
 800043c:	0011      	movs	r1, r2
 800043e:	0018      	movs	r0, r3
 8000440:	f002 fd30 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000448:	f000 fb9e 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b006      	add	sp, #24
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200005c0 	.word	0x200005c0
 8000458:	00008c9f 	.word	0x00008c9f
 800045c:	00000bb7 	.word	0x00000bb7

08000460 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_TIM16_Init+0x4c>)
 8000466:	4a12      	ldr	r2, [pc, #72]	; (80004b0 <MX_TIM16_Init+0x50>)
 8000468:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32000-1;
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_TIM16_Init+0x4c>)
 800046c:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <MX_TIM16_Init+0x54>)
 800046e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_TIM16_Init+0x4c>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000-1;
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <MX_TIM16_Init+0x4c>)
 8000478:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <MX_TIM16_Init+0x58>)
 800047a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_TIM16_Init+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <MX_TIM16_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_TIM16_Init+0x4c>)
 800048a:	2200      	movs	r2, #0
 800048c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800048e:	4b07      	ldr	r3, [pc, #28]	; (80004ac <MX_TIM16_Init+0x4c>)
 8000490:	0018      	movs	r0, r3
 8000492:	f002 f905 	bl	80026a0 <HAL_TIM_Base_Init>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800049a:	f000 fb75 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 800049e:	4b03      	ldr	r3, [pc, #12]	; (80004ac <MX_TIM16_Init+0x4c>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 f997 	bl	80027d4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000690 	.word	0x20000690
 80004b0:	40014400 	.word	0x40014400
 80004b4:	00007cff 	.word	0x00007cff
 80004b8:	00001387 	.word	0x00001387

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004c2:	4a15      	ldr	r2, [pc, #84]	; (8000518 <MX_USART2_UART_Init+0x5c>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004c8:	2296      	movs	r2, #150	; 0x96
 80004ca:	0212      	lsls	r2, r2, #8
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <MX_USART2_UART_Init+0x58>)
 8000500:	0018      	movs	r0, r3
 8000502:	f002 fd3d 	bl	8002f80 <HAL_UART_Init>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800050a:	f000 fb3d 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000608 	.word	0x20000608
 8000518:	40004400 	.word	0x40004400

0800051c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_USART3_UART_Init+0x58>)
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <MX_USART3_UART_Init+0x5c>)
 8000524:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_USART3_UART_Init+0x58>)
 8000528:	2296      	movs	r2, #150	; 0x96
 800052a:	0192      	lsls	r2, r2, #6
 800052c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_USART3_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_USART3_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_USART3_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_USART3_UART_Init+0x58>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_USART3_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_USART3_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_USART3_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_USART3_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <MX_USART3_UART_Init+0x58>)
 8000560:	0018      	movs	r0, r3
 8000562:	f002 fd0d 	bl	8002f80 <HAL_UART_Init>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800056a:	f000 fb0d 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000ec 	.word	0x200000ec
 8000578:	40004800 	.word	0x40004800

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_DMA_Init+0x38>)
 8000584:	695a      	ldr	r2, [r3, #20]
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_DMA_Init+0x38>)
 8000588:	2101      	movs	r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	615a      	str	r2, [r3, #20]
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_DMA_Init+0x38>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	2201      	movs	r2, #1
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	200a      	movs	r0, #10
 80005a0:	f000 fe86 	bl	80012b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80005a4:	200a      	movs	r0, #10
 80005a6:	f000 fe98 	bl	80012da <HAL_NVIC_EnableIRQ>

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b002      	add	sp, #8
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b08b      	sub	sp, #44	; 0x2c
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	2414      	movs	r4, #20
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f003 ffc9 	bl	8004560 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b41      	ldr	r3, [pc, #260]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005d0:	695a      	ldr	r2, [r3, #20]
 80005d2:	4b40      	ldr	r3, [pc, #256]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0309      	lsls	r1, r1, #12
 80005d8:	430a      	orrs	r2, r1
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	4b3d      	ldr	r3, [pc, #244]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005de:	695a      	ldr	r2, [r3, #20]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	031b      	lsls	r3, r3, #12
 80005e4:	4013      	ands	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ea:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	03c9      	lsls	r1, r1, #15
 80005f4:	430a      	orrs	r2, r1
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	03db      	lsls	r3, r3, #15
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <MX_GPIO_Init+0x11c>)
 8000608:	695a      	ldr	r2, [r3, #20]
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_GPIO_Init+0x11c>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0289      	lsls	r1, r1, #10
 8000610:	430a      	orrs	r2, r1
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <MX_GPIO_Init+0x11c>)
 8000616:	695a      	ldr	r2, [r3, #20]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	029b      	lsls	r3, r3, #10
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_GPIO_Init+0x11c>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_GPIO_Init+0x11c>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	02c9      	lsls	r1, r1, #11
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_GPIO_Init+0x11c>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	02db      	lsls	r3, r3, #11
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|URLED2_Pin, GPIO_PIN_RESET);
 800063e:	2390      	movs	r3, #144	; 0x90
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	2200      	movs	r2, #0
 8000644:	2122      	movs	r1, #34	; 0x22
 8000646:	0018      	movs	r0, r3
 8000648:	f001 f9f2 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : URBTN_Pin */
  GPIO_InitStruct.Pin = URBTN_Pin;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	0192      	lsls	r2, r2, #6
 8000652:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <MX_GPIO_Init+0x120>)
 8000658:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(URBTN_GPIO_Port, &GPIO_InitStruct);
 8000660:	193b      	adds	r3, r7, r4
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <MX_GPIO_Init+0x124>)
 8000664:	0019      	movs	r1, r3
 8000666:	0010      	movs	r0, r2
 8000668:	f001 f86a 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 URLED2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|URLED2_Pin;
 800066c:	0021      	movs	r1, r4
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2222      	movs	r2, #34	; 0x22
 8000672:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2201      	movs	r2, #1
 8000678:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	000c      	movs	r4, r1
 8000688:	187a      	adds	r2, r7, r1
 800068a:	2390      	movs	r3, #144	; 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f001 f855 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Pin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 80006ac:	187a      	adds	r2, r7, r1
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 f843 	bl	8001740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2007      	movs	r0, #7
 80006c0:	f000 fdf6 	bl	80012b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006c4:	2007      	movs	r0, #7
 80006c6:	f000 fe08 	bl	80012da <HAL_NVIC_EnableIRQ>

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b00b      	add	sp, #44	; 0x2c
 80006d0:	bd90      	pop	{r4, r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40021000 	.word	0x40021000
 80006d8:	10110000 	.word	0x10110000
 80006dc:	48000800 	.word	0x48000800

080006e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == URBTN_Pin) {
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	881a      	ldrh	r2, [r3, #0]
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	019b      	lsls	r3, r3, #6
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d10a      	bne.n	800070e <HAL_GPIO_EXTI_Callback+0x2e>
    if(led_status == FALSE) {
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <HAL_GPIO_EXTI_Callback+0x38>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d103      	bne.n	8000708 <HAL_GPIO_EXTI_Callback+0x28>
    	led_status = TRUE;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_GPIO_EXTI_Callback+0x38>)
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]
    } else {
    	led_status = FALSE;
    }
  }
}
 8000706:	e002      	b.n	800070e <HAL_GPIO_EXTI_Callback+0x2e>
    	led_status = FALSE;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <HAL_GPIO_EXTI_Callback+0x38>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	20000094 	.word	0x20000094

0800071c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d135      	bne.n	800079a <HAL_UART_RxCpltCallback+0x7e>
		printf("Key Press!!!\r\n");
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <HAL_UART_RxCpltCallback+0x98>)
 8000730:	0018      	movs	r0, r3
 8000732:	f003 ff97 	bl	8004664 <puts>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000736:	4920      	ldr	r1, [pc, #128]	; (80007b8 <HAL_UART_RxCpltCallback+0x9c>)
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <HAL_UART_RxCpltCallback+0xa0>)
 800073a:	2201      	movs	r2, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f002 fd8b 	bl	8003258 <HAL_UART_Receive_IT>
		buf[list_value] = rx_data;
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <HAL_UART_RxCpltCallback+0xa4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <HAL_UART_RxCpltCallback+0x9c>)
 8000748:	7811      	ldrb	r1, [r2, #0]
 800074a:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <HAL_UART_RxCpltCallback+0xa8>)
 800074c:	54d1      	strb	r1, [r2, r3]
		list_value++;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <HAL_UART_RxCpltCallback+0xa4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <HAL_UART_RxCpltCallback+0xa4>)
 8000756:	601a      	str	r2, [r3, #0]
		if(rx_data == 'p') {
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_UART_RxCpltCallback+0x9c>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b70      	cmp	r3, #112	; 0x70
 800075e:	d11c      	bne.n	800079a <HAL_UART_RxCpltCallback+0x7e>
			HAL_UART_Transmit(&huart2, &buf, (list_value-1), 1);
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_UART_RxCpltCallback+0xa4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
 8000766:	3b01      	subs	r3, #1
 8000768:	b29a      	uxth	r2, r3
 800076a:	4916      	ldr	r1, [pc, #88]	; (80007c4 <HAL_UART_RxCpltCallback+0xa8>)
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <HAL_UART_RxCpltCallback+0xa0>)
 800076e:	2301      	movs	r3, #1
 8000770:	f002 fc5a 	bl	8003028 <HAL_UART_Transmit>
			for(int i=0; i<list_value; i++) {
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e007      	b.n	800078a <HAL_UART_RxCpltCallback+0x6e>
				buf[i] = 'null';
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <HAL_UART_RxCpltCallback+0xa8>)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	18d3      	adds	r3, r2, r3
 8000780:	226c      	movs	r2, #108	; 0x6c
 8000782:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<list_value; i++) {
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <HAL_UART_RxCpltCallback+0xa4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	429a      	cmp	r2, r3
 8000792:	dbf2      	blt.n	800077a <HAL_UART_RxCpltCallback+0x5e>
			}
			list_value = 0;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_UART_RxCpltCallback+0xa4>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
		}
//		HAL_UART_Transmit(&huart2, &rx_data, 1, 1);
	}

	if(huart->Instance == USART3) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_UART_RxCpltCallback+0xac>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d101      	bne.n	80007a8 <HAL_UART_RxCpltCallback+0x8c>
		print_MISE();
 80007a4:	f000 f81a 	bl	80007dc <print_MISE>
	}
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b004      	add	sp, #16
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40004400 	.word	0x40004400
 80007b4:	0800549c 	.word	0x0800549c
 80007b8:	200001d4 	.word	0x200001d4
 80007bc:	20000608 	.word	0x20000608
 80007c0:	20000098 	.word	0x20000098
 80007c4:	200001d8 	.word	0x200001d8
 80007c8:	40004800 	.word	0x40004800

080007cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
	{

	}
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b002      	add	sp, #8
 80007da:	bd80      	pop	{r7, pc}

080007dc <print_MISE>:
//	}
//
//}

void print_MISE(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 80007e2:	1dbb      	adds	r3, r7, #6
 80007e4:	2200      	movs	r2, #0
 80007e6:	801a      	strh	r2, [r3, #0]

	check_byte_receive=mise_buffer[30]<<8|mise_buffer[31];
 80007e8:	4b67      	ldr	r3, [pc, #412]	; (8000988 <print_MISE+0x1ac>)
 80007ea:	7f9b      	ldrb	r3, [r3, #30]
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	4b65      	ldr	r3, [pc, #404]	; (8000988 <print_MISE+0x1ac>)
 80007f2:	7fdb      	ldrb	r3, [r3, #31]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	1cbb      	adds	r3, r7, #2
 80007fc:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<30;i++)
 80007fe:	1d7b      	adds	r3, r7, #5
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e00e      	b.n	8000824 <print_MISE+0x48>
	{
		check_byte_calculate+=mise_buffer[i];
 8000806:	1d7b      	adds	r3, r7, #5
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4a5f      	ldr	r2, [pc, #380]	; (8000988 <print_MISE+0x1ac>)
 800080c:	5cd3      	ldrb	r3, [r2, r3]
 800080e:	b299      	uxth	r1, r3
 8000810:	1dbb      	adds	r3, r7, #6
 8000812:	1dba      	adds	r2, r7, #6
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	188a      	adds	r2, r1, r2
 8000818:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<30;i++)
 800081a:	1d7b      	adds	r3, r7, #5
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	1d7b      	adds	r3, r7, #5
 8000820:	3201      	adds	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	1d7b      	adds	r3, r7, #5
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b1d      	cmp	r3, #29
 800082a:	d9ec      	bls.n	8000806 <print_MISE+0x2a>
	}

	if(check_byte_receive==check_byte_calculate)
 800082c:	1cba      	adds	r2, r7, #2
 800082e:	1dbb      	adds	r3, r7, #6
 8000830:	8812      	ldrh	r2, [r2, #0]
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	429a      	cmp	r2, r3
 8000836:	d000      	beq.n	800083a <print_MISE+0x5e>
 8000838:	e0a1      	b.n	800097e <print_MISE+0x1a2>
	{
		printf("PM1.0 : %d	",(combine_value=(mise_buffer[10]<<8)|mise_buffer[11]));
 800083a:	4b53      	ldr	r3, [pc, #332]	; (8000988 <print_MISE+0x1ac>)
 800083c:	7a9b      	ldrb	r3, [r3, #10]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b51      	ldr	r3, [pc, #324]	; (8000988 <print_MISE+0x1ac>)
 8000844:	7adb      	ldrb	r3, [r3, #11]
 8000846:	b21b      	sxth	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b21a      	sxth	r2, r3
 800084c:	003b      	movs	r3, r7
 800084e:	801a      	strh	r2, [r3, #0]
 8000850:	003b      	movs	r3, r7
 8000852:	881a      	ldrh	r2, [r3, #0]
 8000854:	4b4d      	ldr	r3, [pc, #308]	; (800098c <print_MISE+0x1b0>)
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f003 fe89 	bl	8004570 <iprintf>
		printf("PM2.5 : %d	",(combine_value=(mise_buffer[12]<<8)|mise_buffer[13]));
 800085e:	4b4a      	ldr	r3, [pc, #296]	; (8000988 <print_MISE+0x1ac>)
 8000860:	7b1b      	ldrb	r3, [r3, #12]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b48      	ldr	r3, [pc, #288]	; (8000988 <print_MISE+0x1ac>)
 8000868:	7b5b      	ldrb	r3, [r3, #13]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	003b      	movs	r3, r7
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	003b      	movs	r3, r7
 8000876:	881a      	ldrh	r2, [r3, #0]
 8000878:	4b45      	ldr	r3, [pc, #276]	; (8000990 <print_MISE+0x1b4>)
 800087a:	0011      	movs	r1, r2
 800087c:	0018      	movs	r0, r3
 800087e:	f003 fe77 	bl	8004570 <iprintf>
		printf("PM10 : %d	",(combine_value=(mise_buffer[14]<<8)|mise_buffer[15]));
 8000882:	4b41      	ldr	r3, [pc, #260]	; (8000988 <print_MISE+0x1ac>)
 8000884:	7b9b      	ldrb	r3, [r3, #14]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	b21a      	sxth	r2, r3
 800088a:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <print_MISE+0x1ac>)
 800088c:	7bdb      	ldrb	r3, [r3, #15]
 800088e:	b21b      	sxth	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b21a      	sxth	r2, r3
 8000894:	003b      	movs	r3, r7
 8000896:	801a      	strh	r2, [r3, #0]
 8000898:	003b      	movs	r3, r7
 800089a:	881a      	ldrh	r2, [r3, #0]
 800089c:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <print_MISE+0x1b8>)
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f003 fe65 	bl	8004570 <iprintf>
		printf("0.3um : %d	",(combine_value=(mise_buffer[16]<<8)|mise_buffer[17]));
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <print_MISE+0x1ac>)
 80008a8:	7c1b      	ldrb	r3, [r3, #16]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	4b36      	ldr	r3, [pc, #216]	; (8000988 <print_MISE+0x1ac>)
 80008b0:	7c5b      	ldrb	r3, [r3, #17]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	003b      	movs	r3, r7
 80008ba:	801a      	strh	r2, [r3, #0]
 80008bc:	003b      	movs	r3, r7
 80008be:	881a      	ldrh	r2, [r3, #0]
 80008c0:	4b35      	ldr	r3, [pc, #212]	; (8000998 <print_MISE+0x1bc>)
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f003 fe53 	bl	8004570 <iprintf>
		printf("0.5um : %d	",(combine_value=(mise_buffer[18]<<8)|mise_buffer[19]));
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <print_MISE+0x1ac>)
 80008cc:	7c9b      	ldrb	r3, [r3, #18]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <print_MISE+0x1ac>)
 80008d4:	7cdb      	ldrb	r3, [r3, #19]
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	b21a      	sxth	r2, r3
 80008dc:	003b      	movs	r3, r7
 80008de:	801a      	strh	r2, [r3, #0]
 80008e0:	003b      	movs	r3, r7
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	4b2d      	ldr	r3, [pc, #180]	; (800099c <print_MISE+0x1c0>)
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f003 fe41 	bl	8004570 <iprintf>
		printf("1.0um : %d	",(combine_value=(mise_buffer[20]<<8)|mise_buffer[21]));
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <print_MISE+0x1ac>)
 80008f0:	7d1b      	ldrb	r3, [r3, #20]
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	b21a      	sxth	r2, r3
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <print_MISE+0x1ac>)
 80008f8:	7d5b      	ldrb	r3, [r3, #21]
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21a      	sxth	r2, r3
 8000900:	003b      	movs	r3, r7
 8000902:	801a      	strh	r2, [r3, #0]
 8000904:	003b      	movs	r3, r7
 8000906:	881a      	ldrh	r2, [r3, #0]
 8000908:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <print_MISE+0x1c4>)
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f003 fe2f 	bl	8004570 <iprintf>
		printf("2.5um : %d	",(combine_value=(mise_buffer[22]<<8)|mise_buffer[23]));
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <print_MISE+0x1ac>)
 8000914:	7d9b      	ldrb	r3, [r3, #22]
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	b21a      	sxth	r2, r3
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <print_MISE+0x1ac>)
 800091c:	7ddb      	ldrb	r3, [r3, #23]
 800091e:	b21b      	sxth	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b21a      	sxth	r2, r3
 8000924:	003b      	movs	r3, r7
 8000926:	801a      	strh	r2, [r3, #0]
 8000928:	003b      	movs	r3, r7
 800092a:	881a      	ldrh	r2, [r3, #0]
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <print_MISE+0x1c8>)
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f003 fe1d 	bl	8004570 <iprintf>
		printf("5.0um : %d	",(combine_value=(mise_buffer[24]<<8)|mise_buffer[25]));
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <print_MISE+0x1ac>)
 8000938:	7e1b      	ldrb	r3, [r3, #24]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21a      	sxth	r2, r3
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <print_MISE+0x1ac>)
 8000940:	7e5b      	ldrb	r3, [r3, #25]
 8000942:	b21b      	sxth	r3, r3
 8000944:	4313      	orrs	r3, r2
 8000946:	b21a      	sxth	r2, r3
 8000948:	003b      	movs	r3, r7
 800094a:	801a      	strh	r2, [r3, #0]
 800094c:	003b      	movs	r3, r7
 800094e:	881a      	ldrh	r2, [r3, #0]
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <print_MISE+0x1cc>)
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f003 fe0b 	bl	8004570 <iprintf>
		printf("10.0um : %d\r\n",(combine_value=(mise_buffer[26]<<8)|mise_buffer[27]));
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <print_MISE+0x1ac>)
 800095c:	7e9b      	ldrb	r3, [r3, #26]
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	b21a      	sxth	r2, r3
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <print_MISE+0x1ac>)
 8000964:	7edb      	ldrb	r3, [r3, #27]
 8000966:	b21b      	sxth	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b21a      	sxth	r2, r3
 800096c:	003b      	movs	r3, r7
 800096e:	801a      	strh	r2, [r3, #0]
 8000970:	003b      	movs	r3, r7
 8000972:	881a      	ldrh	r2, [r3, #0]
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <print_MISE+0x1d0>)
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f003 fdf9 	bl	8004570 <iprintf>
	}
	else
	{
	}
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	20000170 	.word	0x20000170
 800098c:	080054ac 	.word	0x080054ac
 8000990:	080054b8 	.word	0x080054b8
 8000994:	080054c4 	.word	0x080054c4
 8000998:	080054d0 	.word	0x080054d0
 800099c:	080054dc 	.word	0x080054dc
 80009a0:	080054e8 	.word	0x080054e8
 80009a4:	080054f4 	.word	0x080054f4
 80009a8:	08005500 	.word	0x08005500
 80009ac:	0800550c 	.word	0x0800550c

080009b0 <write_MISE>:

void write_MISE(char* cmd)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	uint16_t verify_byte=0;
 80009b8:	230e      	movs	r3, #14
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	801a      	strh	r2, [r3, #0]

	printf("Enter the write_MISE\r\n");
 80009c0:	4b63      	ldr	r3, [pc, #396]	; (8000b50 <write_MISE+0x1a0>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f003 fe4e 	bl	8004664 <puts>

	if(strcmp(cmd,"Read")==0)
 80009c8:	4a62      	ldr	r2, [pc, #392]	; (8000b54 <write_MISE+0x1a4>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff fb9a 	bl	8000108 <strcmp>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d10d      	bne.n	80009f4 <write_MISE+0x44>
	{
		mise_send_buffer[2]=0xe2;
 80009d8:	4b5f      	ldr	r3, [pc, #380]	; (8000b58 <write_MISE+0x1a8>)
 80009da:	22e2      	movs	r2, #226	; 0xe2
 80009dc:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 80009de:	4b5e      	ldr	r3, [pc, #376]	; (8000b58 <write_MISE+0x1a8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x00;
 80009e4:	4b5c      	ldr	r3, [pc, #368]	; (8000b58 <write_MISE+0x1a8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	711a      	strb	r2, [r3, #4]
		printf("if's Read\r\n");
 80009ea:	4b5c      	ldr	r3, [pc, #368]	; (8000b5c <write_MISE+0x1ac>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f003 fe39 	bl	8004664 <puts>
 80009f2:	e056      	b.n	8000aa2 <write_MISE+0xf2>
	}
	else if(strcmp(cmd,"Passive")==0)
 80009f4:	4a5a      	ldr	r2, [pc, #360]	; (8000b60 <write_MISE+0x1b0>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fb84 	bl	8000108 <strcmp>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d10d      	bne.n	8000a20 <write_MISE+0x70>
	{
		mise_send_buffer[2]=0xe1;
 8000a04:	4b54      	ldr	r3, [pc, #336]	; (8000b58 <write_MISE+0x1a8>)
 8000a06:	22e1      	movs	r2, #225	; 0xe1
 8000a08:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 8000a0a:	4b53      	ldr	r3, [pc, #332]	; (8000b58 <write_MISE+0x1a8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x00;
 8000a10:	4b51      	ldr	r3, [pc, #324]	; (8000b58 <write_MISE+0x1a8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	711a      	strb	r2, [r3, #4]
		printf("if's Passive\r\n");
 8000a16:	4b53      	ldr	r3, [pc, #332]	; (8000b64 <write_MISE+0x1b4>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f003 fe23 	bl	8004664 <puts>
 8000a1e:	e040      	b.n	8000aa2 <write_MISE+0xf2>
	}
	else if(strcmp(cmd,"Active")==0)
 8000a20:	4a51      	ldr	r2, [pc, #324]	; (8000b68 <write_MISE+0x1b8>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	0011      	movs	r1, r2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff fb6e 	bl	8000108 <strcmp>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d10d      	bne.n	8000a4c <write_MISE+0x9c>
	{
		mise_send_buffer[2]=0xe1;
 8000a30:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <write_MISE+0x1a8>)
 8000a32:	22e1      	movs	r2, #225	; 0xe1
 8000a34:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 8000a36:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <write_MISE+0x1a8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x01;
 8000a3c:	4b46      	ldr	r3, [pc, #280]	; (8000b58 <write_MISE+0x1a8>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	711a      	strb	r2, [r3, #4]
		printf("if's Active\r\n");
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <write_MISE+0x1bc>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f003 fe0d 	bl	8004664 <puts>
 8000a4a:	e02a      	b.n	8000aa2 <write_MISE+0xf2>

	}
	else if(strcmp(cmd,"Sleep")==0)
 8000a4c:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <write_MISE+0x1c0>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	0011      	movs	r1, r2
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff fb58 	bl	8000108 <strcmp>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d10d      	bne.n	8000a78 <write_MISE+0xc8>
	{
		mise_send_buffer[2]=0xe4;
 8000a5c:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <write_MISE+0x1a8>)
 8000a5e:	22e4      	movs	r2, #228	; 0xe4
 8000a60:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 8000a62:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <write_MISE+0x1a8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x00;
 8000a68:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <write_MISE+0x1a8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	711a      	strb	r2, [r3, #4]
		printf("if's Sleep\r\n");
 8000a6e:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <write_MISE+0x1c4>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f003 fdf7 	bl	8004664 <puts>
 8000a76:	e014      	b.n	8000aa2 <write_MISE+0xf2>
	}
	else if(strcmp(cmd,"WakeUp")==0)
 8000a78:	4a3f      	ldr	r2, [pc, #252]	; (8000b78 <write_MISE+0x1c8>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fb42 	bl	8000108 <strcmp>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d10c      	bne.n	8000aa2 <write_MISE+0xf2>
	{
		mise_send_buffer[2]=0xe4;
 8000a88:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <write_MISE+0x1a8>)
 8000a8a:	22e4      	movs	r2, #228	; 0xe4
 8000a8c:	709a      	strb	r2, [r3, #2]
		mise_send_buffer[3]=0x00;
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <write_MISE+0x1a8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	70da      	strb	r2, [r3, #3]
		mise_send_buffer[4]=0x01;
 8000a94:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <write_MISE+0x1a8>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	711a      	strb	r2, [r3, #4]
		printf("if's WakeUp\r\n");
 8000a9a:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <write_MISE+0x1cc>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f003 fde1 	bl	8004664 <puts>
	}
	for(uint8_t i=0;i<5;i++)
 8000aa2:	230d      	movs	r3, #13
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e010      	b.n	8000ace <write_MISE+0x11e>
	{
		verify_byte+=mise_send_buffer[i];
 8000aac:	200d      	movs	r0, #13
 8000aae:	183b      	adds	r3, r7, r0
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4a29      	ldr	r2, [pc, #164]	; (8000b58 <write_MISE+0x1a8>)
 8000ab4:	5cd3      	ldrb	r3, [r2, r3]
 8000ab6:	b299      	uxth	r1, r3
 8000ab8:	220e      	movs	r2, #14
 8000aba:	18bb      	adds	r3, r7, r2
 8000abc:	18ba      	adds	r2, r7, r2
 8000abe:	8812      	ldrh	r2, [r2, #0]
 8000ac0:	188a      	adds	r2, r1, r2
 8000ac2:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0;i<5;i++)
 8000ac4:	183b      	adds	r3, r7, r0
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	183b      	adds	r3, r7, r0
 8000aca:	3201      	adds	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	230d      	movs	r3, #13
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d9e9      	bls.n	8000aac <write_MISE+0xfc>
	}
	mise_send_buffer[5]=verify_byte>>8;
 8000ad8:	210e      	movs	r1, #14
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <write_MISE+0x1a8>)
 8000ae6:	715a      	strb	r2, [r3, #5]
	mise_send_buffer[6]=verify_byte;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <write_MISE+0x1a8>)
 8000af0:	719a      	strb	r2, [r3, #6]

	while(HAL_UART_GetState(&huart3)!=HAL_UART_STATE_READY)
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <write_MISE+0x1d0>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 fe71 	bl	80037de <HAL_UART_GetState>
 8000afc:	0003      	movs	r3, r0
 8000afe:	2b20      	cmp	r3, #32
 8000b00:	d1f8      	bne.n	8000af4 <write_MISE+0x144>
	{
	}

	if(HAL_UART_Transmit_IT(&huart3,(uint8_t*)mise_send_buffer,7)!=HAL_OK)
 8000b02:	4915      	ldr	r1, [pc, #84]	; (8000b58 <write_MISE+0x1a8>)
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <write_MISE+0x1d0>)
 8000b06:	2207      	movs	r2, #7
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f002 fb37 	bl	800317c <HAL_UART_Transmit_IT>
	{

	}
	if(strcmp(cmd,"Read")==0)
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <write_MISE+0x1a4>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff faf7 	bl	8000108 <strcmp>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d10d      	bne.n	8000b3a <write_MISE+0x18a>
	{
		while(HAL_UART_GetState(&huart3)!=HAL_UART_STATE_READY)
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <write_MISE+0x1d0>)
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 fe5b 	bl	80037de <HAL_UART_GetState>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	2b20      	cmp	r3, #32
 8000b2c:	d1f8      	bne.n	8000b20 <write_MISE+0x170>
		{
		}
		if(HAL_UART_Receive_IT(&huart3,mise_send_buffer, 32)!=HAL_OK)
 8000b2e:	490a      	ldr	r1, [pc, #40]	; (8000b58 <write_MISE+0x1a8>)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <write_MISE+0x1d0>)
 8000b32:	2220      	movs	r2, #32
 8000b34:	0018      	movs	r0, r3
 8000b36:	f002 fb8f 	bl	8003258 <HAL_UART_Receive_IT>
		{

		}
	}

	printf("%d\r\n", mise_send_buffer);
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <write_MISE+0x1a8>)
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <write_MISE+0x1d4>)
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f003 fd15 	bl	8004570 <iprintf>
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	0800551c 	.word	0x0800551c
 8000b54:	08005534 	.word	0x08005534
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	0800553c 	.word	0x0800553c
 8000b60:	08005494 	.word	0x08005494
 8000b64:	08005548 	.word	0x08005548
 8000b68:	08005558 	.word	0x08005558
 8000b6c:	08005560 	.word	0x08005560
 8000b70:	08005570 	.word	0x08005570
 8000b74:	08005578 	.word	0x08005578
 8000b78:	08005584 	.word	0x08005584
 8000b7c:	0800558c 	.word	0x0800558c
 8000b80:	200000ec 	.word	0x200000ec
 8000b84:	0800559c 	.word	0x0800559c

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <Error_Handler+0x6>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	619a      	str	r2, [r3, #24]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	69da      	ldr	r2, [r3, #28]
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	0549      	lsls	r1, r1, #21
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	61da      	str	r2, [r3, #28]
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bbe:	69da      	ldr	r2, [r3, #28]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	055b      	lsls	r3, r3, #21
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	05db      	lsls	r3, r3, #23
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d114      	bne.n	8000c16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_TIM_Base_MspInit+0x7c>)
 8000bee:	69da      	ldr	r2, [r3, #28]
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_TIM_Base_MspInit+0x7c>)
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	61da      	str	r2, [r3, #28]
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_TIM_Base_MspInit+0x7c>)
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	200f      	movs	r0, #15
 8000c0a:	f000 fb51 	bl	80012b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 fb63 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c14:	e01a      	b.n	8000c4c <HAL_TIM_Base_MspInit+0x74>
  else if(htim_base->Instance==TIM16)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_TIM_Base_MspInit+0x80>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d115      	bne.n	8000c4c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_TIM_Base_MspInit+0x7c>)
 8000c22:	699a      	ldr	r2, [r3, #24]
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_TIM_Base_MspInit+0x7c>)
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	0289      	lsls	r1, r1, #10
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	619a      	str	r2, [r3, #24]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_TIM_Base_MspInit+0x7c>)
 8000c30:	699a      	ldr	r2, [r3, #24]
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	029b      	lsls	r3, r3, #10
 8000c36:	4013      	ands	r3, r2
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2015      	movs	r0, #21
 8000c42:	f000 fb35 	bl	80012b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000c46:	2015      	movs	r0, #21
 8000c48:	f000 fb47 	bl	80012da <HAL_NVIC_EnableIRQ>
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40014400 	.word	0x40014400

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	231c      	movs	r3, #28
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	0018      	movs	r0, r3
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f003 fc76 	bl	8004560 <memset>
  if(huart->Instance==USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a6a      	ldr	r2, [pc, #424]	; (8000e24 <HAL_UART_MspInit+0x1c8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d13b      	bne.n	8000cf6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	4b6a      	ldr	r3, [pc, #424]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000c80:	69da      	ldr	r2, [r3, #28]
 8000c82:	4b69      	ldr	r3, [pc, #420]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	0289      	lsls	r1, r1, #10
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	61da      	str	r2, [r3, #28]
 8000c8c:	4b66      	ldr	r3, [pc, #408]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000c8e:	69da      	ldr	r2, [r3, #28]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	029b      	lsls	r3, r3, #10
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b63      	ldr	r3, [pc, #396]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	4b62      	ldr	r3, [pc, #392]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	0289      	lsls	r1, r1, #10
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	615a      	str	r2, [r3, #20]
 8000ca8:	4b5f      	ldr	r3, [pc, #380]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000caa:	695a      	ldr	r2, [r3, #20]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb6:	211c      	movs	r1, #28
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	187a      	adds	r2, r7, r1
 8000cd8:	2390      	movs	r3, #144	; 0x90
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	0011      	movs	r1, r2
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 fd2e 	bl	8001740 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	201c      	movs	r0, #28
 8000cea:	f000 fae1 	bl	80012b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cee:	201c      	movs	r0, #28
 8000cf0:	f000 faf3 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf4:	e092      	b.n	8000e1c <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a4c      	ldr	r2, [pc, #304]	; (8000e2c <HAL_UART_MspInit+0x1d0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d000      	beq.n	8000d02 <HAL_UART_MspInit+0xa6>
 8000d00:	e08c      	b.n	8000e1c <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	4b48      	ldr	r3, [pc, #288]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	02c9      	lsls	r1, r1, #11
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	61da      	str	r2, [r3, #28]
 8000d10:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000d12:	69da      	ldr	r2, [r3, #28]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	02db      	lsls	r3, r3, #11
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b42      	ldr	r3, [pc, #264]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	02c9      	lsls	r1, r1, #11
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <HAL_UART_MspInit+0x1cc>)
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	02db      	lsls	r3, r3, #11
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d3a:	211c      	movs	r1, #28
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	22c0      	movs	r2, #192	; 0xc0
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2202      	movs	r2, #2
 8000d48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2203      	movs	r2, #3
 8000d54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2204      	movs	r2, #4
 8000d5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	4a34      	ldr	r2, [pc, #208]	; (8000e30 <HAL_UART_MspInit+0x1d4>)
 8000d60:	0019      	movs	r1, r3
 8000d62:	0010      	movs	r0, r2
 8000d64:	f000 fcec 	bl	8001740 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000d6a:	4a33      	ldr	r2, [pc, #204]	; (8000e38 <HAL_UART_MspInit+0x1dc>)
 8000d6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6e:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000d8e:	2220      	movs	r2, #32
 8000d90:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 faba 	bl	8001314 <HAL_DMA_Init>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000da4:	f7ff fef0 	bl	8000b88 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_UART_MspInit+0x1e0>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <HAL_UART_MspInit+0x1e0>)
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	04c9      	lsls	r1, r1, #19
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000dba:	671a      	str	r2, [r3, #112]	; 0x70
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_UART_MspInit+0x1d8>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000dc4:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <HAL_UART_MspInit+0x1e8>)
 8000dc6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000dca:	2210      	movs	r2, #16
 8000dcc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f000 fa8d 	bl	8001314 <HAL_DMA_Init>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8000dfe:	f7ff fec3 	bl	8000b88 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_UART_MspInit+0x1e0>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_UART_MspInit+0x1e0>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	04c9      	lsls	r1, r1, #19
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000e14:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_UART_MspInit+0x1e4>)
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b00c      	add	sp, #48	; 0x30
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40004400 	.word	0x40004400
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40004800 	.word	0x40004800
 8000e30:	48000400 	.word	0x48000400
 8000e34:	200000a8 	.word	0x200000a8
 8000e38:	40020030 	.word	0x40020030
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	20000190 	.word	0x20000190
 8000e44:	4002001c 	.word	0x4002001c

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 f958 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 fdf4 	bl	8001a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fb6a 	bl	800156c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <DMA1_Channel2_3_IRQHandler+0x20>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 fb66 	bl	800156c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	20000190 	.word	0x20000190
 8000eac:	200000a8 	.word	0x200000a8

08000eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <TIM2_IRQHandler+0x14>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 fcde 	bl	8002878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	200005c0 	.word	0x200005c0

08000ec8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <TIM16_IRQHandler+0x14>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 fcd2 	bl	8002878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	20000690 	.word	0x20000690

08000ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <USART2_IRQHandler+0x14>)
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f002 fa56 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000608 	.word	0x20000608

08000ef8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00a      	b.n	8000f20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f0a:	f7ff f9a5 	bl	8000258 <__io_getchar>
 8000f0e:	0001      	movs	r1, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf0      	blt.n	8000f0a <_read+0x12>
	}

return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b006      	add	sp, #24
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e009      	b.n	8000f58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff f971 	bl	8000234 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf1      	blt.n	8000f44 <_write+0x12>
	}
	return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b006      	add	sp, #24
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_close>:

int _close(int file)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	return -1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	425b      	negs	r3, r3
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	0192      	lsls	r2, r2, #6
 8000f8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_isatty>:

int _isatty(int file)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	18d3      	adds	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f003 fa8a 	bl	800450c <__errno>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	425b      	negs	r3, r3
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	18d2      	adds	r2, r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b006      	add	sp, #24
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20004000 	.word	0x20004000
 8001024:	00000400 	.word	0x00000400
 8001028:	2000009c 	.word	0x2000009c
 800102c:	200006e0 	.word	0x200006e0

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490e      	ldr	r1, [pc, #56]	; (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0b      	ldr	r4, [pc, #44]	; (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001066:	f7ff ffe3 	bl	8001030 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800106a:	f003 fa55 	bl	8004518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106e:	f7ff f905 	bl	800027c <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   r0, =_estack
 8001074:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001080:	0800567c 	.word	0x0800567c
  ldr r2, =_sbss
 8001084:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001088:	200006e0 	.word	0x200006e0

0800108c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_COMP_IRQHandler>
	...

08001090 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <HAL_Init+0x24>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_Init+0x24>)
 800109a:	2110      	movs	r1, #16
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 f809 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a6:	f7ff fd73 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40022000 	.word	0x40022000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_InitTick+0x5c>)
 80010c2:	681c      	ldr	r4, [r3, #0]
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_InitTick+0x60>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	0019      	movs	r1, r3
 80010ca:	23fa      	movs	r3, #250	; 0xfa
 80010cc:	0098      	lsls	r0, r3, #2
 80010ce:	f7ff f825 	bl	800011c <__udivsi3>
 80010d2:	0003      	movs	r3, r0
 80010d4:	0019      	movs	r1, r3
 80010d6:	0020      	movs	r0, r4
 80010d8:	f7ff f820 	bl	800011c <__udivsi3>
 80010dc:	0003      	movs	r3, r0
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 f90b 	bl	80012fa <HAL_SYSTICK_Config>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d001      	beq.n	80010ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e00f      	b.n	800110c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d80b      	bhi.n	800110a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	2301      	movs	r3, #1
 80010f6:	425b      	negs	r3, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 f8d8 	bl	80012b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_InitTick+0x64>)
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b003      	add	sp, #12
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	20000008 	.word	0x20000008
 8001118:	20000010 	.word	0x20000010
 800111c:	2000000c 	.word	0x2000000c

08001120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x1c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	001a      	movs	r2, r3
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_IncTick+0x20>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	18d2      	adds	r2, r2, r3
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_IncTick+0x20>)
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	20000010 	.word	0x20000010
 8001140:	200006d8 	.word	0x200006d8

08001144 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <HAL_GetTick+0x10>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	200006d8 	.word	0x200006d8

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	0002      	movs	r2, r0
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b7f      	cmp	r3, #127	; 0x7f
 800116a:	d809      	bhi.n	8001180 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	001a      	movs	r2, r3
 8001172:	231f      	movs	r3, #31
 8001174:	401a      	ands	r2, r3
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_EnableIRQ+0x30>)
 8001178:	2101      	movs	r1, #1
 800117a:	4091      	lsls	r1, r2
 800117c:	000a      	movs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
  }
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	0002      	movs	r2, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b7f      	cmp	r3, #127	; 0x7f
 80011a0:	d828      	bhi.n	80011f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a2:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <__NVIC_SetPriority+0xd4>)
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	33c0      	adds	r3, #192	; 0xc0
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	589b      	ldr	r3, [r3, r2]
 80011b2:	1dfa      	adds	r2, r7, #7
 80011b4:	7812      	ldrb	r2, [r2, #0]
 80011b6:	0011      	movs	r1, r2
 80011b8:	2203      	movs	r2, #3
 80011ba:	400a      	ands	r2, r1
 80011bc:	00d2      	lsls	r2, r2, #3
 80011be:	21ff      	movs	r1, #255	; 0xff
 80011c0:	4091      	lsls	r1, r2
 80011c2:	000a      	movs	r2, r1
 80011c4:	43d2      	mvns	r2, r2
 80011c6:	401a      	ands	r2, r3
 80011c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	019b      	lsls	r3, r3, #6
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	401a      	ands	r2, r3
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	0018      	movs	r0, r3
 80011d8:	2303      	movs	r3, #3
 80011da:	4003      	ands	r3, r0
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e0:	481f      	ldr	r0, [pc, #124]	; (8001260 <__NVIC_SetPriority+0xd4>)
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	430a      	orrs	r2, r1
 80011ec:	33c0      	adds	r3, #192	; 0xc0
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011f2:	e031      	b.n	8001258 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f4:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <__NVIC_SetPriority+0xd8>)
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	0019      	movs	r1, r3
 80011fc:	230f      	movs	r3, #15
 80011fe:	400b      	ands	r3, r1
 8001200:	3b08      	subs	r3, #8
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3306      	adds	r3, #6
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	18d3      	adds	r3, r2, r3
 800120a:	3304      	adds	r3, #4
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	1dfa      	adds	r2, r7, #7
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	0011      	movs	r1, r2
 8001214:	2203      	movs	r2, #3
 8001216:	400a      	ands	r2, r1
 8001218:	00d2      	lsls	r2, r2, #3
 800121a:	21ff      	movs	r1, #255	; 0xff
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	43d2      	mvns	r2, r2
 8001222:	401a      	ands	r2, r3
 8001224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	22ff      	movs	r2, #255	; 0xff
 800122c:	401a      	ands	r2, r3
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	0018      	movs	r0, r3
 8001234:	2303      	movs	r3, #3
 8001236:	4003      	ands	r3, r0
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <__NVIC_SetPriority+0xd8>)
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	001c      	movs	r4, r3
 8001244:	230f      	movs	r3, #15
 8001246:	4023      	ands	r3, r4
 8001248:	3b08      	subs	r3, #8
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	430a      	orrs	r2, r1
 800124e:	3306      	adds	r3, #6
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	18c3      	adds	r3, r0, r3
 8001254:	3304      	adds	r3, #4
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b003      	add	sp, #12
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <SysTick_Config+0x40>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d901      	bls.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e010      	b.n	80012a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <SysTick_Config+0x44>)
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	3a01      	subs	r2, #1
 8001284:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	2301      	movs	r3, #1
 8001288:	425b      	negs	r3, r3
 800128a:	2103      	movs	r1, #3
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ff7d 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SysTick_Config+0x44>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x44>)
 800129a:	2207      	movs	r2, #7
 800129c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129e:	2300      	movs	r3, #0
}
 80012a0:	0018      	movs	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	00ffffff 	.word	0x00ffffff
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	210f      	movs	r1, #15
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	1c02      	adds	r2, r0, #0
 80012c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	0002      	movs	r2, r0
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff ff33 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ffaf 	bl	8001268 <SysTick_Config>
 800130a:	0003      	movs	r3, r0
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b002      	add	sp, #8
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e036      	b.n	8001398 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2221      	movs	r2, #33	; 0x21
 800132e:	2102      	movs	r1, #2
 8001330:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <HAL_DMA_Init+0x8c>)
 800133e:	4013      	ands	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800134a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f9c4 	bl	8001708 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2221      	movs	r2, #33	; 0x21
 800138a:	2101      	movs	r1, #1
 800138c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2220      	movs	r2, #32
 8001392:	2100      	movs	r1, #0
 8001394:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}  
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b004      	add	sp, #16
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	ffffc00f 	.word	0xffffc00f

080013a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013b2:	2317      	movs	r3, #23
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2220      	movs	r2, #32
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_DMA_Start_IT+0x24>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e04f      	b.n	8001468 <HAL_DMA_Start_IT+0xc4>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2220      	movs	r2, #32
 80013cc:	2101      	movs	r1, #1
 80013ce:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2221      	movs	r2, #33	; 0x21
 80013d4:	5c9b      	ldrb	r3, [r3, r2]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d13a      	bne.n	8001452 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2221      	movs	r2, #33	; 0x21
 80013e0:	2102      	movs	r1, #2
 80013e2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	438a      	bics	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 f955 	bl	80016b0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	2b00      	cmp	r3, #0
 800140c:	d008      	beq.n	8001420 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	210e      	movs	r1, #14
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e00f      	b.n	8001440 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	210a      	movs	r1, #10
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2104      	movs	r1, #4
 800143c:	438a      	bics	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2101      	movs	r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e007      	b.n	8001462 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2220      	movs	r2, #32
 8001456:	2100      	movs	r1, #0
 8001458:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800145a:	2317      	movs	r3, #23
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2202      	movs	r2, #2
 8001460:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001462:	2317      	movs	r3, #23
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	781b      	ldrb	r3, [r3, #0]
} 
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b006      	add	sp, #24
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2221      	movs	r2, #33	; 0x21
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d008      	beq.n	8001496 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2204      	movs	r2, #4
 8001488:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2220      	movs	r2, #32
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e020      	b.n	80014d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	210e      	movs	r1, #14
 80014a2:	438a      	bics	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	438a      	bics	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014be:	2101      	movs	r1, #1
 80014c0:	4091      	lsls	r1, r2
 80014c2:	000a      	movs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2221      	movs	r2, #33	; 0x21
 80014ca:	2101      	movs	r1, #1
 80014cc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2220      	movs	r2, #32
 80014d2:	2100      	movs	r1, #0
 80014d4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e8:	230f      	movs	r3, #15
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2221      	movs	r2, #33	; 0x21
 80014f4:	5c9b      	ldrb	r3, [r3, r2]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d007      	beq.n	800150c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2204      	movs	r2, #4
 8001500:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001502:	230f      	movs	r3, #15
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	e028      	b.n	800155e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	210e      	movs	r1, #14
 8001518:	438a      	bics	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2101      	movs	r1, #1
 8001528:	438a      	bics	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001534:	2101      	movs	r1, #1
 8001536:	4091      	lsls	r1, r2
 8001538:	000a      	movs	r2, r1
 800153a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2221      	movs	r2, #33	; 0x21
 8001540:	2101      	movs	r1, #1
 8001542:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	2100      	movs	r1, #0
 800154a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	0010      	movs	r0, r2
 800155c:	4798      	blx	r3
    } 
  }
  return status;
 800155e:	230f      	movs	r3, #15
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	781b      	ldrb	r3, [r3, #0]
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	b004      	add	sp, #16
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	2204      	movs	r2, #4
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	d024      	beq.n	80015de <HAL_DMA_IRQHandler+0x72>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2204      	movs	r2, #4
 8001598:	4013      	ands	r3, r2
 800159a:	d020      	beq.n	80015de <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2220      	movs	r2, #32
 80015a4:	4013      	ands	r3, r2
 80015a6:	d107      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2104      	movs	r1, #4
 80015b4:	438a      	bics	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c0:	2104      	movs	r1, #4
 80015c2:	4091      	lsls	r1, r2
 80015c4:	000a      	movs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d100      	bne.n	80015d2 <HAL_DMA_IRQHandler+0x66>
 80015d0:	e06a      	b.n	80016a8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	0010      	movs	r0, r2
 80015da:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80015dc:	e064      	b.n	80016a8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	2202      	movs	r2, #2
 80015e4:	409a      	lsls	r2, r3
 80015e6:	0013      	movs	r3, r2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	d02b      	beq.n	8001646 <HAL_DMA_IRQHandler+0xda>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2202      	movs	r2, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d027      	beq.n	8001646 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2220      	movs	r2, #32
 80015fe:	4013      	ands	r3, r2
 8001600:	d10b      	bne.n	800161a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	210a      	movs	r1, #10
 800160e:	438a      	bics	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2221      	movs	r2, #33	; 0x21
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	2102      	movs	r1, #2
 8001624:	4091      	lsls	r1, r2
 8001626:	000a      	movs	r2, r1
 8001628:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2220      	movs	r2, #32
 800162e:	2100      	movs	r1, #0
 8001630:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	2b00      	cmp	r3, #0
 8001638:	d036      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	0010      	movs	r0, r2
 8001642:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001644:	e030      	b.n	80016a8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	2208      	movs	r2, #8
 800164c:	409a      	lsls	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	d028      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x13c>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2208      	movs	r2, #8
 800165a:	4013      	ands	r3, r2
 800165c:	d024      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	210e      	movs	r1, #14
 800166a:	438a      	bics	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001676:	2101      	movs	r1, #1
 8001678:	4091      	lsls	r1, r2
 800167a:	000a      	movs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2221      	movs	r2, #33	; 0x21
 8001688:	2101      	movs	r1, #1
 800168a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	2100      	movs	r1, #0
 8001692:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	0010      	movs	r0, r2
 80016a4:	4798      	blx	r3
    }
   }
}  
 80016a6:	e7ff      	b.n	80016a8 <HAL_DMA_IRQHandler+0x13c>
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b004      	add	sp, #16
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c6:	2101      	movs	r1, #1
 80016c8:	4091      	lsls	r1, r2
 80016ca:	000a      	movs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d108      	bne.n	80016f0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016ee:	e007      	b.n	8001700 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	60da      	str	r2, [r3, #12]
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b004      	add	sp, #16
 8001706:	bd80      	pop	{r7, pc}

08001708 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a08      	ldr	r2, [pc, #32]	; (8001738 <DMA_CalcBaseAndBitshift+0x30>)
 8001716:	4694      	mov	ip, r2
 8001718:	4463      	add	r3, ip
 800171a:	2114      	movs	r1, #20
 800171c:	0018      	movs	r0, r3
 800171e:	f7fe fcfd 	bl	800011c <__udivsi3>
 8001722:	0003      	movs	r3, r0
 8001724:	009a      	lsls	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <DMA_CalcBaseAndBitshift+0x34>)
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}
 8001738:	bffdfff8 	.word	0xbffdfff8
 800173c:	40020000 	.word	0x40020000

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174e:	e155      	b.n	80019fc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4091      	lsls	r1, r2
 800175a:	000a      	movs	r2, r1
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d100      	bne.n	8001768 <HAL_GPIO_Init+0x28>
 8001766:	e146      	b.n	80019f6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d00b      	beq.n	8001788 <HAL_GPIO_Init+0x48>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177c:	2b11      	cmp	r3, #17
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b12      	cmp	r3, #18
 8001786:	d130      	bne.n	80017ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	409a      	lsls	r2, r3
 8001796:	0013      	movs	r3, r2
 8001798:	43da      	mvns	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017be:	2201      	movs	r2, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	43da      	mvns	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	2201      	movs	r2, #1
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
 80017dc:	0013      	movs	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0xea>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b12      	cmp	r3, #18
 8001828:	d123      	bne.n	8001872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	58d3      	ldr	r3, [r2, r3]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2207      	movs	r2, #7
 800183c:	4013      	ands	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2107      	movs	r1, #7
 8001856:	400b      	ands	r3, r1
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	6939      	ldr	r1, [r7, #16]
 8001870:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	409a      	lsls	r2, r3
 8001880:	0013      	movs	r3, r2
 8001882:	43da      	mvns	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	401a      	ands	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	055b      	lsls	r3, r3, #21
 80018ae:	4013      	ands	r3, r2
 80018b0:	d100      	bne.n	80018b4 <HAL_GPIO_Init+0x174>
 80018b2:	e0a0      	b.n	80019f6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b4:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <HAL_GPIO_Init+0x2d4>)
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <HAL_GPIO_Init+0x2d4>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	430a      	orrs	r2, r1
 80018be:	619a      	str	r2, [r3, #24]
 80018c0:	4b54      	ldr	r3, [pc, #336]	; (8001a14 <HAL_GPIO_Init+0x2d4>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_GPIO_Init+0x2d8>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	589b      	ldr	r3, [r3, r2]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2203      	movs	r2, #3
 80018de:	4013      	ands	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	409a      	lsls	r2, r3
 80018e6:	0013      	movs	r3, r2
 80018e8:	43da      	mvns	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	2390      	movs	r3, #144	; 0x90
 80018f4:	05db      	lsls	r3, r3, #23
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x1ee>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a47      	ldr	r2, [pc, #284]	; (8001a1c <HAL_GPIO_Init+0x2dc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x1ea>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a46      	ldr	r2, [pc, #280]	; (8001a20 <HAL_GPIO_Init+0x2e0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x1e6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a45      	ldr	r2, [pc, #276]	; (8001a24 <HAL_GPIO_Init+0x2e4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x1e2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a44      	ldr	r2, [pc, #272]	; (8001a28 <HAL_GPIO_Init+0x2e8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x1de>
 800191a:	2304      	movs	r3, #4
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x1f0>
 800191e:	2305      	movs	r3, #5
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x1f0>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x1f0>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x1f0>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x1f0>
 800192e:	2300      	movs	r3, #0
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	2103      	movs	r1, #3
 8001934:	400a      	ands	r2, r1
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001940:	4935      	ldr	r1, [pc, #212]	; (8001a18 <HAL_GPIO_Init+0x2d8>)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43da      	mvns	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	025b      	lsls	r3, r3, #9
 8001966:	4013      	ands	r3, r2
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001972:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001978:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43da      	mvns	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	029b      	lsls	r3, r3, #10
 8001990:	4013      	ands	r3, r2
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43da      	mvns	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	035b      	lsls	r3, r3, #13
 80019ba:	4013      	ands	r3, r2
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43da      	mvns	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	039b      	lsls	r3, r3, #14
 80019e4:	4013      	ands	r3, r2
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	40da      	lsrs	r2, r3
 8001a04:	1e13      	subs	r3, r2, #0
 8001a06:	d000      	beq.n	8001a0a <HAL_GPIO_Init+0x2ca>
 8001a08:	e6a2      	b.n	8001750 <HAL_GPIO_Init+0x10>
  } 
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b006      	add	sp, #24
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	48000800 	.word	0x48000800
 8001a24:	48000c00 	.word	0x48000c00
 8001a28:	48001000 	.word	0x48001000
 8001a2c:	40010400 	.word	0x40010400

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	0008      	movs	r0, r1
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	1cbb      	adds	r3, r7, #2
 8001a3e:	1c02      	adds	r2, r0, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	1c7b      	adds	r3, r7, #1
 8001a44:	1c0a      	adds	r2, r1, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a48:	1c7b      	adds	r3, r7, #1
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d004      	beq.n	8001a5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a50:	1cbb      	adds	r3, r7, #2
 8001a52:	881a      	ldrh	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5a:	1cbb      	adds	r3, r7, #2
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b002      	add	sp, #8
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	0002      	movs	r2, r0
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	1dba      	adds	r2, r7, #6
 8001a7e:	8812      	ldrh	r2, [r2, #0]
 8001a80:	4013      	ands	r3, r2
 8001a82:	d008      	beq.n	8001a96 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a86:	1dba      	adds	r2, r7, #6
 8001a88:	8812      	ldrh	r2, [r2, #0]
 8001a8a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a8c:	1dbb      	adds	r3, r7, #6
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7fe fe25 	bl	80006e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f000 fb76 	bl	80021a4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x20>
 8001ac2:	e08e      	b.n	8001be2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ac4:	4bc5      	ldr	r3, [pc, #788]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	220c      	movs	r2, #12
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d00e      	beq.n	8001aee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad0:	4bc2      	ldr	r3, [pc, #776]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d117      	bne.n	8001b0c <HAL_RCC_OscConfig+0x68>
 8001adc:	4bbf      	ldr	r3, [pc, #764]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	23c0      	movs	r3, #192	; 0xc0
 8001ae2:	025b      	lsls	r3, r3, #9
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	025b      	lsls	r3, r3, #9
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d10e      	bne.n	8001b0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aee:	4bbb      	ldr	r3, [pc, #748]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	4013      	ands	r3, r2
 8001af8:	d100      	bne.n	8001afc <HAL_RCC_OscConfig+0x58>
 8001afa:	e071      	b.n	8001be0 <HAL_RCC_OscConfig+0x13c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d000      	beq.n	8001b06 <HAL_RCC_OscConfig+0x62>
 8001b04:	e06c      	b.n	8001be0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f000 fb4c 	bl	80021a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_OscConfig+0x80>
 8001b14:	4bb1      	ldr	r3, [pc, #708]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4bb0      	ldr	r3, [pc, #704]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	0249      	lsls	r1, r1, #9
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e02f      	b.n	8001b84 <HAL_RCC_OscConfig+0xe0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0xa2>
 8001b2c:	4bab      	ldr	r3, [pc, #684]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4baa      	ldr	r3, [pc, #680]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b32:	49ab      	ldr	r1, [pc, #684]	; (8001de0 <HAL_RCC_OscConfig+0x33c>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4ba8      	ldr	r3, [pc, #672]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4ba7      	ldr	r3, [pc, #668]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b3e:	49a9      	ldr	r1, [pc, #676]	; (8001de4 <HAL_RCC_OscConfig+0x340>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e01e      	b.n	8001b84 <HAL_RCC_OscConfig+0xe0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d10e      	bne.n	8001b6c <HAL_RCC_OscConfig+0xc8>
 8001b4e:	4ba3      	ldr	r3, [pc, #652]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4ba2      	ldr	r3, [pc, #648]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	02c9      	lsls	r1, r1, #11
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	4b9f      	ldr	r3, [pc, #636]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b9e      	ldr	r3, [pc, #632]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	0249      	lsls	r1, r1, #9
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0xe0>
 8001b6c:	4b9b      	ldr	r3, [pc, #620]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b9a      	ldr	r3, [pc, #616]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b72:	499b      	ldr	r1, [pc, #620]	; (8001de0 <HAL_RCC_OscConfig+0x33c>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4b98      	ldr	r3, [pc, #608]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b97      	ldr	r3, [pc, #604]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b7e:	4999      	ldr	r1, [pc, #612]	; (8001de4 <HAL_RCC_OscConfig+0x340>)
 8001b80:	400a      	ands	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d014      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fada 	bl	8001144 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b96:	f7ff fad5 	bl	8001144 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e2fd      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba8:	4b8c      	ldr	r3, [pc, #560]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	029b      	lsls	r3, r3, #10
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0xf2>
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fac5 	bl	8001144 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fac0 	bl	8001144 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e2e8      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b82      	ldr	r3, [pc, #520]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	029b      	lsls	r3, r3, #10
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x11c>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d100      	bne.n	8001bee <HAL_RCC_OscConfig+0x14a>
 8001bec:	e06c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bee:	4b7b      	ldr	r3, [pc, #492]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d00e      	beq.n	8001c16 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bf8:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d11f      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1a0>
 8001c04:	4b75      	ldr	r3, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	23c0      	movs	r3, #192	; 0xc0
 8001c0a:	025b      	lsls	r3, r3, #9
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	4b71      	ldr	r3, [pc, #452]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_OscConfig+0x188>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e2bb      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b6b      	ldr	r3, [pc, #428]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	22f8      	movs	r2, #248	; 0xf8
 8001c32:	4393      	bics	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00da      	lsls	r2, r3, #3
 8001c3c:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	e041      	b.n	8001cc8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d024      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b62      	ldr	r3, [pc, #392]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fa74 	bl	8001144 <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fa6f 	bl	8001144 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e297      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d0f1      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	22f8      	movs	r2, #248	; 0xf8
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	00da      	lsls	r2, r3, #3
 8001c8e:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e018      	b.n	8001cc8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b51      	ldr	r3, [pc, #324]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	438a      	bics	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fa4f 	bl	8001144 <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fa4a 	bl	8001144 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e272      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d1f1      	bne.n	8001cac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d036      	beq.n	8001d40 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d019      	beq.n	8001d0e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fa2d 	bl	8001144 <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fa28 	bl	8001144 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e250      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d0f1      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x24c>
 8001d0c:	e018      	b.n	8001d40 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	438a      	bics	r2, r1
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff fa13 	bl	8001144 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff fa0e 	bl	8001144 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e236      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d1f1      	bne.n	8001d24 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	4013      	ands	r3, r2
 8001d48:	d100      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2a8>
 8001d4a:	e0b5      	b.n	8001eb8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4c:	231f      	movs	r3, #31
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d56:	69da      	ldr	r2, [r3, #28]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	055b      	lsls	r3, r3, #21
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d111      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0549      	lsls	r1, r1, #21
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	61da      	str	r2, [r3, #28]
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	055b      	lsls	r3, r3, #21
 8001d76:	4013      	ands	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d7c:	231f      	movs	r3, #31
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d11a      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	0049      	lsls	r1, r1, #1
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f9d1 	bl	8001144 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da8:	f7ff f9cc 	bl	8001144 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1f4      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10e      	bne.n	8001dec <HAL_RCC_OscConfig+0x348>
 8001dce:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001dd0:	6a1a      	ldr	r2, [r3, #32]
 8001dd2:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	621a      	str	r2, [r3, #32]
 8001dda:	e035      	b.n	8001e48 <HAL_RCC_OscConfig+0x3a4>
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	fffeffff 	.word	0xfffeffff
 8001de4:	fffbffff 	.word	0xfffbffff
 8001de8:	40007000 	.word	0x40007000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x36a>
 8001df4:	4bca      	ldr	r3, [pc, #808]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	4bc9      	ldr	r3, [pc, #804]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	621a      	str	r2, [r3, #32]
 8001e00:	4bc7      	ldr	r3, [pc, #796]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	4bc6      	ldr	r3, [pc, #792]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e06:	2104      	movs	r1, #4
 8001e08:	438a      	bics	r2, r1
 8001e0a:	621a      	str	r2, [r3, #32]
 8001e0c:	e01c      	b.n	8001e48 <HAL_RCC_OscConfig+0x3a4>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x38c>
 8001e16:	4bc2      	ldr	r3, [pc, #776]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	4bc1      	ldr	r3, [pc, #772]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	621a      	str	r2, [r3, #32]
 8001e22:	4bbf      	ldr	r3, [pc, #764]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e24:	6a1a      	ldr	r2, [r3, #32]
 8001e26:	4bbe      	ldr	r3, [pc, #760]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	621a      	str	r2, [r3, #32]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0x3a4>
 8001e30:	4bbb      	ldr	r3, [pc, #748]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	4bba      	ldr	r3, [pc, #744]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	438a      	bics	r2, r1
 8001e3a:	621a      	str	r2, [r3, #32]
 8001e3c:	4bb8      	ldr	r3, [pc, #736]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e3e:	6a1a      	ldr	r2, [r3, #32]
 8001e40:	4bb7      	ldr	r3, [pc, #732]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e42:	2104      	movs	r1, #4
 8001e44:	438a      	bics	r2, r1
 8001e46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d014      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7ff f978 	bl	8001144 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e009      	b.n	8001e6e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7ff f973 	bl	8001144 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	4aaf      	ldr	r2, [pc, #700]	; (8002124 <HAL_RCC_OscConfig+0x680>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e19a      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	4bac      	ldr	r3, [pc, #688]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x3b6>
 8001e78:	e013      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f963 	bl	8001144 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e82:	e009      	b.n	8001e98 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff f95e 	bl	8001144 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	4aa5      	ldr	r2, [pc, #660]	; (8002124 <HAL_RCC_OscConfig+0x680>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e185      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	4ba1      	ldr	r3, [pc, #644]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ea2:	231f      	movs	r3, #31
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b9c      	ldr	r3, [pc, #624]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	4b9b      	ldr	r3, [pc, #620]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	499d      	ldr	r1, [pc, #628]	; (8002128 <HAL_RCC_OscConfig+0x684>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d12a      	bne.n	8001f20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eca:	4b95      	ldr	r3, [pc, #596]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ece:	4b94      	ldr	r3, [pc, #592]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ed6:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eda:	4b91      	ldr	r3, [pc, #580]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f92f 	bl	8001144 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eec:	f7ff f92a 	bl	8001144 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e152      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001efe:	4b88      	ldr	r3, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0f1      	beq.n	8001eec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f08:	4b85      	ldr	r3, [pc, #532]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	22f8      	movs	r2, #248	; 0xf8
 8001f0e:	4393      	bics	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	00da      	lsls	r2, r3, #3
 8001f18:	4b81      	ldr	r3, [pc, #516]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1e:	e034      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	3305      	adds	r3, #5
 8001f26:	d111      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f28:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2c:	4b7c      	ldr	r3, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f2e:	2104      	movs	r1, #4
 8001f30:	438a      	bics	r2, r1
 8001f32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f34:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	22f8      	movs	r2, #248	; 0xf8
 8001f3a:	4393      	bics	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	00da      	lsls	r2, r3, #3
 8001f44:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4a:	e01e      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f4c:	4b74      	ldr	r3, [pc, #464]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f50:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f52:	2104      	movs	r1, #4
 8001f54:	430a      	orrs	r2, r1
 8001f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f58:	4b71      	ldr	r3, [pc, #452]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f5c:	4b70      	ldr	r3, [pc, #448]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	438a      	bics	r2, r1
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f64:	f7ff f8ee 	bl	8001144 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f6e:	f7ff f8e9 	bl	8001144 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e111      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f80:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f1      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	4013      	ands	r3, r2
 8001f92:	d05c      	beq.n	800204e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f94:	4b62      	ldr	r3, [pc, #392]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	220c      	movs	r2, #12
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d00e      	beq.n	8001fbe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001fa0:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	220c      	movs	r2, #12
 8001fa6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d114      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001fac:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	23c0      	movs	r3, #192	; 0xc0
 8001fb2:	025b      	lsls	r3, r3, #9
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	23c0      	movs	r3, #192	; 0xc0
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fbe:	4b58      	ldr	r3, [pc, #352]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d040      	beq.n	800204c <HAL_RCC_OscConfig+0x5a8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d03c      	beq.n	800204c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0e6      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01b      	beq.n	8002016 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fde:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0249      	lsls	r1, r1, #9
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff f8aa 	bl	8001144 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ff6:	f7ff f8a5 	bl	8001144 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0cd      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002008:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800200a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	025b      	lsls	r3, r3, #9
 8002010:	4013      	ands	r3, r2
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x552>
 8002014:	e01b      	b.n	800204e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002016:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800201c:	4943      	ldr	r1, [pc, #268]	; (800212c <HAL_RCC_OscConfig+0x688>)
 800201e:	400a      	ands	r2, r1
 8002020:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff f88f 	bl	8001144 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800202c:	f7ff f88a 	bl	8001144 <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0b2      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	025b      	lsls	r3, r3, #9
 8002046:	4013      	ands	r3, r2
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x588>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800204c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	d100      	bne.n	8002058 <HAL_RCC_OscConfig+0x5b4>
 8002056:	e0a4      	b.n	80021a2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	220c      	movs	r2, #12
 800205e:	4013      	ands	r3, r2
 8002060:	2b08      	cmp	r3, #8
 8002062:	d100      	bne.n	8002066 <HAL_RCC_OscConfig+0x5c2>
 8002064:	e078      	b.n	8002158 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	2b02      	cmp	r3, #2
 800206c:	d14c      	bne.n	8002108 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002074:	492e      	ldr	r1, [pc, #184]	; (8002130 <HAL_RCC_OscConfig+0x68c>)
 8002076:	400a      	ands	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff f863 	bl	8001144 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff f85e 	bl	8001144 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e086      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	049b      	lsls	r3, r3, #18
 800209e:	4013      	ands	r3, r2
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	220f      	movs	r2, #15
 80020a8:	4393      	bics	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_RCC_OscConfig+0x690>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	431a      	orrs	r2, r3
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	0449      	lsls	r1, r1, #17
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff f831 	bl	8001144 <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff f82c 	bl	8001144 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e054      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	049b      	lsls	r3, r3, #18
 8002102:	4013      	ands	r3, r2
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x644>
 8002106:	e04c      	b.n	80021a2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800210e:	4908      	ldr	r1, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x68c>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff f816 	bl	8001144 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x6a6>
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	00001388 	.word	0x00001388
 8002128:	efffffff 	.word	0xefffffff
 800212c:	fffeffff 	.word	0xfffeffff
 8002130:	feffffff 	.word	0xfeffffff
 8002134:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7ff f804 	bl	8001144 <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e02c      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_RCC_OscConfig+0x708>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	049b      	lsls	r3, r3, #18
 8002152:	4013      	ands	r3, r2
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x694>
 8002156:	e024      	b.n	80021a2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e01f      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_OscConfig+0x708>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_OscConfig+0x708>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	23c0      	movs	r3, #192	; 0xc0
 8002174:	025b      	lsls	r3, r3, #9
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	429a      	cmp	r2, r3
 800217e:	d10e      	bne.n	800219e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	220f      	movs	r2, #15
 8002184:	401a      	ands	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d107      	bne.n	800219e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	23f0      	movs	r3, #240	; 0xf0
 8002192:	039b      	lsls	r3, r3, #14
 8002194:	401a      	ands	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b008      	add	sp, #32
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000

080021b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0bf      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d911      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b5e      	ldr	r3, [pc, #376]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4393      	bics	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	4b5b      	ldr	r3, [pc, #364]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0a6      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2202      	movs	r2, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d015      	beq.n	800222c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2204      	movs	r2, #4
 8002206:	4013      	ands	r3, r2
 8002208:	d006      	beq.n	8002218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800220a:	4b51      	ldr	r3, [pc, #324]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002210:	21e0      	movs	r1, #224	; 0xe0
 8002212:	00c9      	lsls	r1, r1, #3
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	22f0      	movs	r2, #240	; 0xf0
 800221e:	4393      	bics	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	d04c      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b44      	ldr	r3, [pc, #272]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	4013      	ands	r3, r2
 8002248:	d120      	bne.n	800228c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e07a      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002256:	4b3e      	ldr	r3, [pc, #248]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	049b      	lsls	r3, r3, #18
 800225e:	4013      	ands	r3, r2
 8002260:	d114      	bne.n	800228c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e06e      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	025b      	lsls	r3, r3, #9
 8002276:	4013      	ands	r3, r2
 8002278:	d108      	bne.n	800228c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e062      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e05b      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2203      	movs	r2, #3
 8002292:	4393      	bics	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a0:	f7fe ff50 	bl	8001144 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a8:	e009      	b.n	80022be <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022aa:	f7fe ff4b 	bl	8001144 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_RCC_ClockConfig+0x1a4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e042      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	220c      	movs	r2, #12
 80022c4:	401a      	ands	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1ec      	bne.n	80022aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2201      	movs	r2, #1
 80022d6:	4013      	ands	r3, r2
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d211      	bcs.n	8002302 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2201      	movs	r2, #1
 80022e4:	4393      	bics	r3, r2
 80022e6:	0019      	movs	r1, r3
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e020      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d009      	beq.n	8002320 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_RCC_ClockConfig+0x1a8>)
 8002312:	4013      	ands	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002320:	f000 f820 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8002324:	0001      	movs	r1, r0
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	220f      	movs	r2, #15
 800232e:	4013      	ands	r3, r2
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <HAL_RCC_ClockConfig+0x1ac>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	000a      	movs	r2, r1
 8002336:	40da      	lsrs	r2, r3
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1b0>)
 800233a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800233c:	2000      	movs	r0, #0
 800233e:	f7fe febb 	bl	80010b8 <HAL_InitTick>
  
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b004      	add	sp, #16
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40022000 	.word	0x40022000
 8002350:	40021000 	.word	0x40021000
 8002354:	00001388 	.word	0x00001388
 8002358:	fffff8ff 	.word	0xfffff8ff
 800235c:	080055c4 	.word	0x080055c4
 8002360:	20000008 	.word	0x20000008

08002364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b08f      	sub	sp, #60	; 0x3c
 8002368:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800236a:	2314      	movs	r3, #20
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	4a37      	ldr	r2, [pc, #220]	; (800244c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002370:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002372:	c313      	stmia	r3!, {r0, r1, r4}
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	4a35      	ldr	r2, [pc, #212]	; (8002450 <HAL_RCC_GetSysClockFreq+0xec>)
 800237c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800237e:	c313      	stmia	r3!, {r0, r1, r4}
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002388:	2300      	movs	r3, #0
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
 800238c:	2300      	movs	r3, #0
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf0>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	220c      	movs	r2, #12
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d006      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x52>
 80023a8:	2b0c      	cmp	r3, #12
 80023aa:	d043      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0xd0>
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d144      	bne.n	800243a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023b4:	e044      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	220f      	movs	r2, #15
 80023bc:	4013      	ands	r3, r2
 80023be:	2214      	movs	r2, #20
 80023c0:	18ba      	adds	r2, r7, r2
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_RCC_GetSysClockFreq+0xf0>)
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	220f      	movs	r2, #15
 80023cc:	4013      	ands	r3, r2
 80023ce:	1d3a      	adds	r2, r7, #4
 80023d0:	5cd3      	ldrb	r3, [r2, r3]
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	025b      	lsls	r3, r3, #9
 80023da:	401a      	ands	r2, r3
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	025b      	lsls	r3, r3, #9
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d109      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e6:	481c      	ldr	r0, [pc, #112]	; (8002458 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023e8:	f7fd fe98 	bl	800011c <__udivsi3>
 80023ec:	0003      	movs	r3, r0
 80023ee:	001a      	movs	r2, r3
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	4353      	muls	r3, r2
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
 80023f6:	e01a      	b.n	800242e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80023f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fa:	23c0      	movs	r3, #192	; 0xc0
 80023fc:	025b      	lsls	r3, r3, #9
 80023fe:	401a      	ands	r2, r3
 8002400:	23c0      	movs	r3, #192	; 0xc0
 8002402:	025b      	lsls	r3, r3, #9
 8002404:	429a      	cmp	r2, r3
 8002406:	d109      	bne.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800240a:	4814      	ldr	r0, [pc, #80]	; (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 800240c:	f7fd fe86 	bl	800011c <__udivsi3>
 8002410:	0003      	movs	r3, r0
 8002412:	001a      	movs	r2, r3
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	4353      	muls	r3, r2
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
 800241a:	e008      	b.n	800242e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800241c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800241e:	480e      	ldr	r0, [pc, #56]	; (8002458 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002420:	f7fd fe7c 	bl	800011c <__udivsi3>
 8002424:	0003      	movs	r3, r0
 8002426:	001a      	movs	r2, r3
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	4353      	muls	r3, r2
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800242e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002432:	e005      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002438:	e002      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_RCC_GetSysClockFreq+0xf4>)
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800243e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b00f      	add	sp, #60	; 0x3c
 8002448:	bd90      	pop	{r4, r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	080055a4 	.word	0x080055a4
 8002450:	080055b4 	.word	0x080055b4
 8002454:	40021000 	.word	0x40021000
 8002458:	007a1200 	.word	0x007a1200
 800245c:	02dc6c00 	.word	0x02dc6c00

08002460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <HAL_RCC_GetHCLKFreq+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	20000008 	.word	0x20000008

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002478:	f7ff fff2 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 800247c:	0001      	movs	r1, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	2207      	movs	r2, #7
 8002486:	4013      	ands	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_RCC_GetPCLK1Freq+0x28>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	40d9      	lsrs	r1, r3
 800248e:	000b      	movs	r3, r1
}    
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	40021000 	.word	0x40021000
 800249c:	080055d4 	.word	0x080055d4

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	025b      	lsls	r3, r3, #9
 80024b8:	4013      	ands	r3, r2
 80024ba:	d100      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80024bc:	e08f      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2317      	movs	r3, #23
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b6f      	ldr	r3, [pc, #444]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	055b      	lsls	r3, r3, #21
 80024ce:	4013      	ands	r3, r2
 80024d0:	d111      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	4b6c      	ldr	r3, [pc, #432]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	4b6b      	ldr	r3, [pc, #428]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	0549      	lsls	r1, r1, #21
 80024dc:	430a      	orrs	r2, r1
 80024de:	61da      	str	r2, [r3, #28]
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	055b      	lsls	r3, r3, #21
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2317      	movs	r3, #23
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f6:	4b64      	ldr	r3, [pc, #400]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	d11a      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002502:	4b61      	ldr	r3, [pc, #388]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b60      	ldr	r3, [pc, #384]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	0049      	lsls	r1, r1, #1
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002510:	f7fe fe18 	bl	8001144 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	e008      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7fe fe13 	bl	8001144 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	; 0x64
 8002526:	d901      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0a6      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	4b56      	ldr	r3, [pc, #344]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4013      	ands	r3, r2
 8002536:	d0f0      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002538:	4b52      	ldr	r3, [pc, #328]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	23c0      	movs	r3, #192	; 0xc0
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d034      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4013      	ands	r3, r2
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	429a      	cmp	r2, r3
 8002558:	d02c      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800255a:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a4b      	ldr	r2, [pc, #300]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002566:	6a1a      	ldr	r2, [r3, #32]
 8002568:	4b46      	ldr	r3, [pc, #280]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0249      	lsls	r1, r1, #9
 800256e:	430a      	orrs	r2, r1
 8002570:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002572:	4b44      	ldr	r3, [pc, #272]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002574:	6a1a      	ldr	r2, [r3, #32]
 8002576:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002578:	4945      	ldr	r1, [pc, #276]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800257a:	400a      	ands	r2, r1
 800257c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800257e:	4b41      	ldr	r3, [pc, #260]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	4013      	ands	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe fdda 	bl	8001144 <HAL_GetTick>
 8002590:	0003      	movs	r3, r0
 8002592:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002594:	e009      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe fdd5 	bl	8001144 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	4a3c      	ldr	r2, [pc, #240]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e067      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	2202      	movs	r2, #2
 80025b0:	4013      	ands	r3, r2
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025c8:	2317      	movs	r3, #23
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025d8:	492f      	ldr	r1, [pc, #188]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025da:	400a      	ands	r2, r1
 80025dc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	d009      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e8:	4b26      	ldr	r3, [pc, #152]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	2203      	movs	r2, #3
 80025ee:	4393      	bics	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025f8:	430a      	orrs	r2, r1
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002606:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800260c:	4013      	ands	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002616:	430a      	orrs	r2, r1
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2220      	movs	r2, #32
 8002620:	4013      	ands	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	2210      	movs	r2, #16
 800262a:	4393      	bics	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002634:	430a      	orrs	r2, r1
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	4013      	ands	r3, r2
 8002642:	d009      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	4393      	bics	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002654:	430a      	orrs	r2, r1
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4013      	ands	r3, r2
 8002662:	d009      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	2240      	movs	r2, #64	; 0x40
 800266a:	4393      	bics	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002674:	430a      	orrs	r2, r1
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b006      	add	sp, #24
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	fffffcff 	.word	0xfffffcff
 8002690:	fffeffff 	.word	0xfffeffff
 8002694:	00001388 	.word	0x00001388
 8002698:	efffffff 	.word	0xefffffff
 800269c:	fffcffff 	.word	0xfffcffff

080026a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e042      	b.n	8002738 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	223d      	movs	r2, #61	; 0x3d
 80026b6:	5c9b      	ldrb	r3, [r3, r2]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d107      	bne.n	80026ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	223c      	movs	r2, #60	; 0x3c
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7fe fa85 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	223d      	movs	r2, #61	; 0x3d
 80026d2:	2102      	movs	r1, #2
 80026d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	0019      	movs	r1, r3
 80026e0:	0010      	movs	r0, r2
 80026e2:	f000 fac5 	bl	8002c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2246      	movs	r2, #70	; 0x46
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	223e      	movs	r2, #62	; 0x3e
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223f      	movs	r2, #63	; 0x3f
 80026fa:	2101      	movs	r1, #1
 80026fc:	5499      	strb	r1, [r3, r2]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2240      	movs	r2, #64	; 0x40
 8002702:	2101      	movs	r1, #1
 8002704:	5499      	strb	r1, [r3, r2]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2241      	movs	r2, #65	; 0x41
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2242      	movs	r2, #66	; 0x42
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2243      	movs	r2, #67	; 0x43
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2244      	movs	r2, #68	; 0x44
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2245      	movs	r2, #69	; 0x45
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	223d      	movs	r2, #61	; 0x3d
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	223d      	movs	r2, #61	; 0x3d
 800274c:	5c9b      	ldrb	r3, [r3, r2]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d001      	beq.n	8002758 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e033      	b.n	80027c0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	223d      	movs	r2, #61	; 0x3d
 800275c:	2102      	movs	r1, #2
 800275e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_TIM_Base_Start+0x88>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00f      	beq.n	800278a <HAL_TIM_Base_Start+0x4a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	05db      	lsls	r3, r3, #23
 8002772:	429a      	cmp	r2, r3
 8002774:	d009      	beq.n	800278a <HAL_TIM_Base_Start+0x4a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <HAL_TIM_Base_Start+0x8c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_TIM_Base_Start+0x4a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_TIM_Base_Start+0x90>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2207      	movs	r2, #7
 8002792:	4013      	ands	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b06      	cmp	r3, #6
 800279a:	d010      	beq.n	80027be <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2101      	movs	r1, #1
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ac:	e007      	b.n	80027be <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40014000 	.word	0x40014000

080027d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	223d      	movs	r2, #61	; 0x3d
 80027e0:	5c9b      	ldrb	r3, [r3, r2]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d001      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e03b      	b.n	8002864 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	223d      	movs	r2, #61	; 0x3d
 80027f0:	2102      	movs	r1, #2
 80027f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2101      	movs	r1, #1
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a18      	ldr	r2, [pc, #96]	; (800286c <HAL_TIM_Base_Start_IT+0x98>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00f      	beq.n	800282e <HAL_TIM_Base_Start_IT+0x5a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	05db      	lsls	r3, r3, #23
 8002816:	429a      	cmp	r2, r3
 8002818:	d009      	beq.n	800282e <HAL_TIM_Base_Start_IT+0x5a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a14      	ldr	r2, [pc, #80]	; (8002870 <HAL_TIM_Base_Start_IT+0x9c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_TIM_Base_Start_IT+0x5a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_TIM_Base_Start_IT+0xa0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d111      	bne.n	8002852 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2207      	movs	r2, #7
 8002836:	4013      	ands	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b06      	cmp	r3, #6
 800283e:	d010      	beq.n	8002862 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2101      	movs	r1, #1
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002850:	e007      	b.n	8002862 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2101      	movs	r1, #1
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b004      	add	sp, #16
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40000400 	.word	0x40000400
 8002874:	40014000 	.word	0x40014000

08002878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2202      	movs	r2, #2
 8002888:	4013      	ands	r3, r2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d124      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2202      	movs	r2, #2
 8002896:	4013      	ands	r3, r2
 8002898:	2b02      	cmp	r3, #2
 800289a:	d11d      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2203      	movs	r2, #3
 80028a2:	4252      	negs	r2, r2
 80028a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2203      	movs	r2, #3
 80028b4:	4013      	ands	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f9c0 	bl	8002c40 <HAL_TIM_IC_CaptureCallback>
 80028c0:	e007      	b.n	80028d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f9b3 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 f9bf 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2204      	movs	r2, #4
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d125      	bne.n	8002932 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2204      	movs	r2, #4
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d11e      	bne.n	8002932 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2205      	movs	r2, #5
 80028fa:	4252      	negs	r2, r2
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2202      	movs	r2, #2
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	23c0      	movs	r3, #192	; 0xc0
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4013      	ands	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 f993 	bl	8002c40 <HAL_TIM_IC_CaptureCallback>
 800291a:	e007      	b.n	800292c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0018      	movs	r0, r3
 8002920:	f000 f986 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 f992 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2208      	movs	r2, #8
 800293a:	4013      	ands	r3, r2
 800293c:	2b08      	cmp	r3, #8
 800293e:	d124      	bne.n	800298a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2208      	movs	r2, #8
 8002948:	4013      	ands	r3, r2
 800294a:	2b08      	cmp	r3, #8
 800294c:	d11d      	bne.n	800298a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2209      	movs	r2, #9
 8002954:	4252      	negs	r2, r2
 8002956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2204      	movs	r2, #4
 800295c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2203      	movs	r2, #3
 8002966:	4013      	ands	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0018      	movs	r0, r3
 800296e:	f000 f967 	bl	8002c40 <HAL_TIM_IC_CaptureCallback>
 8002972:	e007      	b.n	8002984 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 f95a 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	0018      	movs	r0, r3
 8002980:	f000 f966 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2210      	movs	r2, #16
 8002992:	4013      	ands	r3, r2
 8002994:	2b10      	cmp	r3, #16
 8002996:	d125      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2210      	movs	r2, #16
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d11e      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2211      	movs	r2, #17
 80029ac:	4252      	negs	r2, r2
 80029ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2208      	movs	r2, #8
 80029b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	23c0      	movs	r3, #192	; 0xc0
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4013      	ands	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f93a 	bl	8002c40 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e007      	b.n	80029de <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 f92d 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 f939 	bl	8002c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2201      	movs	r2, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d10f      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d108      	bne.n	8002a12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2202      	movs	r2, #2
 8002a06:	4252      	negs	r2, r2
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 f907 	bl	8002c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d10f      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b80      	cmp	r3, #128	; 0x80
 8002a2c:	d108      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2281      	movs	r2, #129	; 0x81
 8002a34:	4252      	negs	r2, r2
 8002a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fa98 	bl	8002f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d10f      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d108      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2241      	movs	r2, #65	; 0x41
 8002a62:	4252      	negs	r2, r2
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 f8f9 	bl	8002c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2220      	movs	r2, #32
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d10f      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d108      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2221      	movs	r2, #33	; 0x21
 8002a90:	4252      	negs	r2, r2
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 fa62 	bl	8002f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	223c      	movs	r2, #60	; 0x3c
 8002ab2:	5c9b      	ldrb	r3, [r3, r2]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_TIM_ConfigClockSource+0x18>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e0ab      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x170>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	223c      	movs	r2, #60	; 0x3c
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	223d      	movs	r2, #61	; 0x3d
 8002ac8:	2102      	movs	r1, #2
 8002aca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2277      	movs	r2, #119	; 0x77
 8002ad8:	4393      	bics	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a4f      	ldr	r2, [pc, #316]	; (8002c1c <HAL_TIM_ConfigClockSource+0x178>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d100      	bne.n	8002af6 <HAL_TIM_ConfigClockSource+0x52>
 8002af4:	e06b      	b.n	8002bce <HAL_TIM_ConfigClockSource+0x12a>
 8002af6:	d80e      	bhi.n	8002b16 <HAL_TIM_ConfigClockSource+0x72>
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d100      	bne.n	8002afe <HAL_TIM_ConfigClockSource+0x5a>
 8002afc:	e077      	b.n	8002bee <HAL_TIM_ConfigClockSource+0x14a>
 8002afe:	d803      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x64>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d100      	bne.n	8002b06 <HAL_TIM_ConfigClockSource+0x62>
 8002b04:	e073      	b.n	8002bee <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b06:	e07c      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d100      	bne.n	8002b0e <HAL_TIM_ConfigClockSource+0x6a>
 8002b0c:	e06f      	b.n	8002bee <HAL_TIM_ConfigClockSource+0x14a>
 8002b0e:	2b30      	cmp	r3, #48	; 0x30
 8002b10:	d100      	bne.n	8002b14 <HAL_TIM_ConfigClockSource+0x70>
 8002b12:	e06c      	b.n	8002bee <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002b14:	e075      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002b16:	2b70      	cmp	r3, #112	; 0x70
 8002b18:	d00e      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0x94>
 8002b1a:	d804      	bhi.n	8002b26 <HAL_TIM_ConfigClockSource+0x82>
 8002b1c:	2b50      	cmp	r3, #80	; 0x50
 8002b1e:	d036      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xea>
 8002b20:	2b60      	cmp	r3, #96	; 0x60
 8002b22:	d044      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002b24:	e06d      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	0152      	lsls	r2, r2, #5
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d068      	beq.n	8002c00 <HAL_TIM_ConfigClockSource+0x15c>
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	0192      	lsls	r2, r2, #6
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d017      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002b36:	e064      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6899      	ldr	r1, [r3, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f000 f98c 	bl	8002e64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2277      	movs	r2, #119	; 0x77
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]
      break;
 8002b64:	e04d      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f000 f975 	bl	8002e64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	01c9      	lsls	r1, r1, #7
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e039      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	001a      	movs	r2, r3
 8002b9c:	f000 f8e8 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2150      	movs	r1, #80	; 0x50
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 f942 	bl	8002e30 <TIM_ITRx_SetConfig>
      break;
 8002bac:	e029      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	001a      	movs	r2, r3
 8002bbc:	f000 f906 	bl	8002dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2160      	movs	r1, #96	; 0x60
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 f932 	bl	8002e30 <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e019      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	001a      	movs	r2, r3
 8002bdc:	f000 f8c8 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2140      	movs	r1, #64	; 0x40
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f922 	bl	8002e30 <TIM_ITRx_SetConfig>
      break;
 8002bec:	e009      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	0010      	movs	r0, r2
 8002bfa:	f000 f919 	bl	8002e30 <TIM_ITRx_SetConfig>
        break;
 8002bfe:	e000      	b.n	8002c02 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002c00:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	223d      	movs	r2, #61	; 0x3d
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223c      	movs	r2, #60	; 0x3c
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b004      	add	sp, #16
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	ffff00ff 	.word	0xffff00ff

08002c20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <TIM_Base_SetConfig+0xe4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d008      	beq.n	8002c9a <TIM_Base_SetConfig+0x2a>
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	05db      	lsls	r3, r3, #23
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d003      	beq.n	8002c9a <TIM_Base_SetConfig+0x2a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a30      	ldr	r2, [pc, #192]	; (8002d58 <TIM_Base_SetConfig+0xe8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d108      	bne.n	8002cac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2270      	movs	r2, #112	; 0x70
 8002c9e:	4393      	bics	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <TIM_Base_SetConfig+0xe4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d018      	beq.n	8002ce6 <TIM_Base_SetConfig+0x76>
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	05db      	lsls	r3, r3, #23
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d013      	beq.n	8002ce6 <TIM_Base_SetConfig+0x76>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <TIM_Base_SetConfig+0xe8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00f      	beq.n	8002ce6 <TIM_Base_SetConfig+0x76>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <TIM_Base_SetConfig+0xec>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00b      	beq.n	8002ce6 <TIM_Base_SetConfig+0x76>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <TIM_Base_SetConfig+0xf0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d007      	beq.n	8002ce6 <TIM_Base_SetConfig+0x76>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <TIM_Base_SetConfig+0xf4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <TIM_Base_SetConfig+0x76>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <TIM_Base_SetConfig+0xf8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d108      	bne.n	8002cf8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <TIM_Base_SetConfig+0xfc>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	001a      	movs	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <TIM_Base_SetConfig+0xe4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_Base_SetConfig+0xce>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a0d      	ldr	r2, [pc, #52]	; (8002d60 <TIM_Base_SetConfig+0xf0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_Base_SetConfig+0xce>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <TIM_Base_SetConfig+0xf4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_Base_SetConfig+0xce>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <TIM_Base_SetConfig+0xf8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d103      	bne.n	8002d46 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	615a      	str	r2, [r3, #20]
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40002000 	.word	0x40002000
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40014400 	.word	0x40014400
 8002d68:	40014800 	.word	0x40014800
 8002d6c:	fffffcff 	.word	0xfffffcff

08002d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	2201      	movs	r2, #1
 8002d88:	4393      	bics	r3, r2
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	22f0      	movs	r2, #240	; 0xf0
 8002d9a:	4393      	bics	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	220a      	movs	r2, #10
 8002dac:	4393      	bics	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	621a      	str	r2, [r3, #32]
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b006      	add	sp, #24
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	4393      	bics	r3, r2
 8002de0:	001a      	movs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <TIM_TI2_ConfigInputStage+0x60>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	031b      	lsls	r3, r3, #12
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	22a0      	movs	r2, #160	; 0xa0
 8002e08:	4393      	bics	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	621a      	str	r2, [r3, #32]
}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b006      	add	sp, #24
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	ffff0fff 	.word	0xffff0fff

08002e30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2270      	movs	r2, #112	; 0x70
 8002e44:	4393      	bics	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	2207      	movs	r2, #7
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	609a      	str	r2, [r3, #8]
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b004      	add	sp, #16
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <TIM_ETR_SetConfig+0x3c>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	021a      	lsls	r2, r3, #8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b006      	add	sp, #24
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	ffff00ff 	.word	0xffff00ff

08002ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	223c      	movs	r2, #60	; 0x3c
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e047      	b.n	8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	223c      	movs	r2, #60	; 0x3c
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	223d      	movs	r2, #61	; 0x3d
 8002ec8:	2102      	movs	r1, #2
 8002eca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2270      	movs	r2, #112	; 0x70
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00f      	beq.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d009      	beq.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a10      	ldr	r2, [pc, #64]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10c      	bne.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	4393      	bics	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	223d      	movs	r2, #61	; 0x3d
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	223c      	movs	r2, #60	; 0x3c
 8002f46:	2100      	movs	r1, #0
 8002f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b004      	add	sp, #16
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40014000 	.word	0x40014000

08002f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e044      	b.n	800301c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2274      	movs	r2, #116	; 0x74
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fd fe59 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2224      	movs	r2, #36	; 0x24
 8002fae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 fc1c 	bl	8003800 <UART_SetConfig>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e024      	b.n	800301c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fd93 	bl	8003b08 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	490d      	ldr	r1, [pc, #52]	; (8003024 <HAL_UART_Init+0xa4>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	212a      	movs	r1, #42	; 0x2a
 8002ffe:	438a      	bics	r2, r1
 8003000:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fe2b 	bl	8003c70 <UART_CheckIdleState>
 800301a:	0003      	movs	r3, r0
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	ffffb7ff 	.word	0xffffb7ff

08003028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	1dbb      	adds	r3, r7, #6
 8003036:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303c:	2b20      	cmp	r3, #32
 800303e:	d000      	beq.n	8003042 <HAL_UART_Transmit+0x1a>
 8003040:	e096      	b.n	8003170 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_UART_Transmit+0x28>
 8003048:	1dbb      	adds	r3, r7, #6
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e08e      	b.n	8003172 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	429a      	cmp	r2, r3
 800305e:	d109      	bne.n	8003074 <HAL_UART_Transmit+0x4c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2201      	movs	r2, #1
 800306c:	4013      	ands	r3, r2
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e07e      	b.n	8003172 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2274      	movs	r2, #116	; 0x74
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_UART_Transmit+0x5a>
 800307e:	2302      	movs	r3, #2
 8003080:	e077      	b.n	8003172 <HAL_UART_Transmit+0x14a>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2274      	movs	r2, #116	; 0x74
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	2100      	movs	r1, #0
 8003090:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2221      	movs	r2, #33	; 0x21
 8003096:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003098:	f7fe f854 	bl	8001144 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1dba      	adds	r2, r7, #6
 80030a4:	2150      	movs	r1, #80	; 0x50
 80030a6:	8812      	ldrh	r2, [r2, #0]
 80030a8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1dba      	adds	r2, r7, #6
 80030ae:	2152      	movs	r1, #82	; 0x52
 80030b0:	8812      	ldrh	r2, [r2, #0]
 80030b2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	015b      	lsls	r3, r3, #5
 80030bc:	429a      	cmp	r2, r3
 80030be:	d108      	bne.n	80030d2 <HAL_UART_Transmit+0xaa>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d104      	bne.n	80030d2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	e003      	b.n	80030da <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2274      	movs	r2, #116	; 0x74
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80030e2:	e02d      	b.n	8003140 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	0013      	movs	r3, r2
 80030ee:	2200      	movs	r2, #0
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	f000 fe07 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d001      	beq.n	80030fe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e039      	b.n	8003172 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	05d2      	lsls	r2, r2, #23
 800310e:	0dd2      	lsrs	r2, r2, #23
 8003110:	b292      	uxth	r2, r2
 8003112:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	3302      	adds	r3, #2
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	e008      	b.n	800312e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b292      	uxth	r2, r2
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3301      	adds	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2252      	movs	r2, #82	; 0x52
 8003132:	5a9b      	ldrh	r3, [r3, r2]
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b299      	uxth	r1, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2252      	movs	r2, #82	; 0x52
 800313e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2252      	movs	r2, #82	; 0x52
 8003144:	5a9b      	ldrh	r3, [r3, r2]
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1cb      	bne.n	80030e4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	0013      	movs	r3, r2
 8003156:	2200      	movs	r2, #0
 8003158:	2140      	movs	r1, #64	; 0x40
 800315a:	f000 fdd3 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d001      	beq.n	8003166 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e005      	b.n	8003172 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b008      	add	sp, #32
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	1dbb      	adds	r3, r7, #6
 8003188:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318e:	2b20      	cmp	r3, #32
 8003190:	d159      	bne.n	8003246 <HAL_UART_Transmit_IT+0xca>
  {
    if ((pData == NULL) || (Size == 0U))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_UART_Transmit_IT+0x24>
 8003198:	1dbb      	adds	r3, r7, #6
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e051      	b.n	8003248 <HAL_UART_Transmit_IT+0xcc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	015b      	lsls	r3, r3, #5
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d109      	bne.n	80031c4 <HAL_UART_Transmit_IT+0x48>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2201      	movs	r2, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	d001      	beq.n	80031c4 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e041      	b.n	8003248 <HAL_UART_Transmit_IT+0xcc>
      }
    }

    __HAL_LOCK(huart);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2274      	movs	r2, #116	; 0x74
 80031c8:	5c9b      	ldrb	r3, [r3, r2]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Transmit_IT+0x56>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e03a      	b.n	8003248 <HAL_UART_Transmit_IT+0xcc>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2274      	movs	r2, #116	; 0x74
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1dba      	adds	r2, r7, #6
 80031e4:	2150      	movs	r1, #80	; 0x50
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1dba      	adds	r2, r7, #6
 80031ee:	2152      	movs	r1, #82	; 0x52
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2280      	movs	r2, #128	; 0x80
 80031fe:	2100      	movs	r1, #0
 8003200:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2221      	movs	r2, #33	; 0x21
 8003206:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	015b      	lsls	r3, r3, #5
 8003210:	429a      	cmp	r2, r3
 8003212:	d107      	bne.n	8003224 <HAL_UART_Transmit_IT+0xa8>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <HAL_UART_Transmit_IT+0xa8>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <HAL_UART_Transmit_IT+0xd4>)
 8003220:	669a      	str	r2, [r3, #104]	; 0x68
 8003222:	e002      	b.n	800322a <HAL_UART_Transmit_IT+0xae>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <HAL_UART_Transmit_IT+0xd8>)
 8003228:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2274      	movs	r2, #116	; 0x74
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_UART_Transmit_IT+0xcc>
  }
  else
  {
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
  }
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b004      	add	sp, #16
 800324e:	bd80      	pop	{r7, pc}
 8003250:	08004279 	.word	0x08004279
 8003254:	08004209 	.word	0x08004209

08003258 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	1dbb      	adds	r3, r7, #6
 8003264:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800326a:	2b20      	cmp	r3, #32
 800326c:	d13f      	bne.n	80032ee <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_UART_Receive_IT+0x24>
 8003274:	1dbb      	adds	r3, r7, #6
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e037      	b.n	80032f0 <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	015b      	lsls	r3, r3, #5
 8003288:	429a      	cmp	r2, r3
 800328a:	d109      	bne.n	80032a0 <HAL_UART_Receive_IT+0x48>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2201      	movs	r2, #1
 8003298:	4013      	ands	r3, r2
 800329a:	d001      	beq.n	80032a0 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e027      	b.n	80032f0 <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2274      	movs	r2, #116	; 0x74
 80032a4:	5c9b      	ldrb	r3, [r3, r2]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Receive_IT+0x56>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e020      	b.n	80032f0 <HAL_UART_Receive_IT+0x98>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2274      	movs	r2, #116	; 0x74
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	4013      	ands	r3, r2
 80032c8:	d008      	beq.n	80032dc <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	04c9      	lsls	r1, r1, #19
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80032dc:	1dbb      	adds	r3, r7, #6
 80032de:	881a      	ldrh	r2, [r3, #0]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 fd8b 	bl	8003e00 <UART_Start_Receive_IT>
 80032ea:	0003      	movs	r3, r0
 80032ec:	e000      	b.n	80032f0 <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
  }
}
 80032f0:	0018      	movs	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b004      	add	sp, #16
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	1dbb      	adds	r3, r7, #6
 8003304:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800330a:	2b20      	cmp	r3, #32
 800330c:	d13f      	bne.n	800338e <HAL_UART_Receive_DMA+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_UART_Receive_DMA+0x24>
 8003314:	1dbb      	adds	r3, r7, #6
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e037      	b.n	8003390 <HAL_UART_Receive_DMA+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	015b      	lsls	r3, r3, #5
 8003328:	429a      	cmp	r2, r3
 800332a:	d109      	bne.n	8003340 <HAL_UART_Receive_DMA+0x48>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2201      	movs	r2, #1
 8003338:	4013      	ands	r3, r2
 800333a:	d001      	beq.n	8003340 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e027      	b.n	8003390 <HAL_UART_Receive_DMA+0x98>
      }
    }

    __HAL_LOCK(huart);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2274      	movs	r2, #116	; 0x74
 8003344:	5c9b      	ldrb	r3, [r3, r2]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_UART_Receive_DMA+0x56>
 800334a:	2302      	movs	r3, #2
 800334c:	e020      	b.n	8003390 <HAL_UART_Receive_DMA+0x98>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2274      	movs	r2, #116	; 0x74
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	4013      	ands	r3, r2
 8003368:	d008      	beq.n	800337c <HAL_UART_Receive_DMA+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	04c9      	lsls	r1, r1, #19
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800337c:	1dbb      	adds	r3, r7, #6
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0018      	movs	r0, r3
 8003386:	f000 fdc9 	bl	8003f1c <UART_Start_Receive_DMA>
 800338a:	0003      	movs	r3, r0
 800338c:	e000      	b.n	8003390 <HAL_UART_Receive_DMA+0x98>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b004      	add	sp, #16
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4ab5      	ldr	r2, [pc, #724]	; (8003690 <HAL_UART_IRQHandler+0x2f8>)
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d112      	bne.n	80033ec <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2220      	movs	r2, #32
 80033ca:	4013      	ands	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2220      	movs	r2, #32
 80033d2:	4013      	ands	r3, r2
 80033d4:	d00a      	beq.n	80033ec <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d100      	bne.n	80033e0 <HAL_UART_IRQHandler+0x48>
 80033de:	e1d4      	b.n	800378a <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	0010      	movs	r0, r2
 80033e8:	4798      	blx	r3
      }
      return;
 80033ea:	e1ce      	b.n	800378a <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d100      	bne.n	80033f4 <HAL_UART_IRQHandler+0x5c>
 80033f2:	e0d9      	b.n	80035a8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2201      	movs	r2, #1
 80033f8:	4013      	ands	r3, r2
 80033fa:	d104      	bne.n	8003406 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	4aa5      	ldr	r2, [pc, #660]	; (8003694 <HAL_UART_IRQHandler+0x2fc>)
 8003400:	4013      	ands	r3, r2
 8003402:	d100      	bne.n	8003406 <HAL_UART_IRQHandler+0x6e>
 8003404:	e0d0      	b.n	80035a8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2201      	movs	r2, #1
 800340a:	4013      	ands	r3, r2
 800340c:	d010      	beq.n	8003430 <HAL_UART_IRQHandler+0x98>
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4013      	ands	r3, r2
 8003416:	d00b      	beq.n	8003430 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	589b      	ldr	r3, [r3, r2]
 8003426:	2201      	movs	r2, #1
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2202      	movs	r2, #2
 8003434:	4013      	ands	r3, r2
 8003436:	d00f      	beq.n	8003458 <HAL_UART_IRQHandler+0xc0>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2201      	movs	r2, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2202      	movs	r2, #2
 8003446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	589b      	ldr	r3, [r3, r2]
 800344e:	2204      	movs	r2, #4
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2204      	movs	r2, #4
 800345c:	4013      	ands	r3, r2
 800345e:	d00f      	beq.n	8003480 <HAL_UART_IRQHandler+0xe8>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2201      	movs	r2, #1
 8003464:	4013      	ands	r3, r2
 8003466:	d00b      	beq.n	8003480 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2204      	movs	r2, #4
 800346e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	589b      	ldr	r3, [r3, r2]
 8003476:	2202      	movs	r2, #2
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2208      	movs	r2, #8
 8003484:	4013      	ands	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2220      	movs	r2, #32
 800348c:	4013      	ands	r3, r2
 800348e:	d103      	bne.n	8003498 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2201      	movs	r2, #1
 8003494:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003496:	d00b      	beq.n	80034b0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2208      	movs	r2, #8
 800349e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	589b      	ldr	r3, [r3, r2]
 80034a6:	2208      	movs	r2, #8
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	4013      	ands	r3, r2
 80034b8:	d011      	beq.n	80034de <HAL_UART_IRQHandler+0x146>
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	04db      	lsls	r3, r3, #19
 80034c0:	4013      	ands	r3, r2
 80034c2:	d00c      	beq.n	80034de <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	0112      	lsls	r2, r2, #4
 80034cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	589b      	ldr	r3, [r3, r2]
 80034d4:	2220      	movs	r2, #32
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	589b      	ldr	r3, [r3, r2]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d100      	bne.n	80034ea <HAL_UART_IRQHandler+0x152>
 80034e8:	e151      	b.n	800378e <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	2220      	movs	r2, #32
 80034ee:	4013      	ands	r3, r2
 80034f0:	d00c      	beq.n	800350c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2220      	movs	r2, #32
 80034f6:	4013      	ands	r3, r2
 80034f8:	d008      	beq.n	800350c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	0010      	movs	r0, r2
 800350a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	589b      	ldr	r3, [r3, r2]
 8003512:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2240      	movs	r2, #64	; 0x40
 800351c:	4013      	ands	r3, r2
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d003      	beq.n	800352a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2228      	movs	r2, #40	; 0x28
 8003526:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003528:	d033      	beq.n	8003592 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0018      	movs	r0, r3
 800352e:	f000 fd77 	bl	8004020 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2240      	movs	r2, #64	; 0x40
 800353a:	4013      	ands	r3, r2
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d123      	bne.n	8003588 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2140      	movs	r1, #64	; 0x40
 800354c:	438a      	bics	r2, r1
 800354e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	4a4e      	ldr	r2, [pc, #312]	; (8003698 <HAL_UART_IRQHandler+0x300>)
 800355e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	0018      	movs	r0, r3
 8003566:	f7fd ffbb 	bl	80014e0 <HAL_DMA_Abort_IT>
 800356a:	1e03      	subs	r3, r0, #0
 800356c:	d01a      	beq.n	80035a4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	0018      	movs	r0, r3
 800357a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	e012      	b.n	80035a4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 f919 	bl	80037b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003586:	e00d      	b.n	80035a4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f914 	bl	80037b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003590:	e008      	b.n	80035a4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 f90f 	bl	80037b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	2100      	movs	r1, #0
 80035a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80035a2:	e0f4      	b.n	800378e <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	46c0      	nop			; (mov r8, r8)
    return;
 80035a6:	e0f2      	b.n	800378e <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d000      	beq.n	80035b2 <HAL_UART_IRQHandler+0x21a>
 80035b0:	e0b7      	b.n	8003722 <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2210      	movs	r2, #16
 80035b6:	4013      	ands	r3, r2
 80035b8:	d100      	bne.n	80035bc <HAL_UART_IRQHandler+0x224>
 80035ba:	e0b2      	b.n	8003722 <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2210      	movs	r2, #16
 80035c0:	4013      	ands	r3, r2
 80035c2:	d100      	bne.n	80035c6 <HAL_UART_IRQHandler+0x22e>
 80035c4:	e0ad      	b.n	8003722 <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2210      	movs	r2, #16
 80035cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2240      	movs	r2, #64	; 0x40
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d161      	bne.n	80036a0 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	2108      	movs	r1, #8
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d100      	bne.n	80035f4 <HAL_UART_IRQHandler+0x25c>
 80035f2:	e0ce      	b.n	8003792 <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2258      	movs	r2, #88	; 0x58
 80035f8:	5a9b      	ldrh	r3, [r3, r2]
 80035fa:	2208      	movs	r2, #8
 80035fc:	18ba      	adds	r2, r7, r2
 80035fe:	8812      	ldrh	r2, [r2, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d300      	bcc.n	8003606 <HAL_UART_IRQHandler+0x26e>
 8003604:	e0c5      	b.n	8003792 <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2208      	movs	r2, #8
 800360a:	18ba      	adds	r2, r7, r2
 800360c:	215a      	movs	r1, #90	; 0x5a
 800360e:	8812      	ldrh	r2, [r2, #0]
 8003610:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2b20      	cmp	r3, #32
 800361a:	d02a      	beq.n	8003672 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	491d      	ldr	r1, [pc, #116]	; (800369c <HAL_UART_IRQHandler+0x304>)
 8003628:	400a      	ands	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	438a      	bics	r2, r1
 800363a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2140      	movs	r1, #64	; 0x40
 8003648:	438a      	bics	r2, r1
 800364a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2110      	movs	r1, #16
 8003664:	438a      	bics	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	0018      	movs	r0, r3
 800366e:	f7fd feff 	bl	8001470 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2258      	movs	r2, #88	; 0x58
 8003676:	5a9a      	ldrh	r2, [r3, r2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	215a      	movs	r1, #90	; 0x5a
 800367c:	5a5b      	ldrh	r3, [r3, r1]
 800367e:	b29b      	uxth	r3, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0011      	movs	r1, r2
 8003688:	0018      	movs	r0, r3
 800368a:	f000 f89d 	bl	80037c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800368e:	e080      	b.n	8003792 <HAL_UART_IRQHandler+0x3fa>
 8003690:	0000080f 	.word	0x0000080f
 8003694:	04000120 	.word	0x04000120
 8003698:	080041db 	.word	0x080041db
 800369c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2258      	movs	r2, #88	; 0x58
 80036a4:	5a99      	ldrh	r1, [r3, r2]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	225a      	movs	r2, #90	; 0x5a
 80036aa:	5a9b      	ldrh	r3, [r3, r2]
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	230a      	movs	r3, #10
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	1a8a      	subs	r2, r1, r2
 80036b4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	225a      	movs	r2, #90	; 0x5a
 80036ba:	5a9b      	ldrh	r3, [r3, r2]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d100      	bne.n	80036c4 <HAL_UART_IRQHandler+0x32c>
 80036c2:	e068      	b.n	8003796 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 80036c4:	230a      	movs	r3, #10
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d063      	beq.n	8003796 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4932      	ldr	r1, [pc, #200]	; (80037a4 <HAL_UART_IRQHandler+0x40c>)
 80036da:	400a      	ands	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	438a      	bics	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2110      	movs	r1, #16
 800370c:	438a      	bics	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003710:	230a      	movs	r3, #10
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	0011      	movs	r1, r2
 800371a:	0018      	movs	r0, r3
 800371c:	f000 f854 	bl	80037c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003720:	e039      	b.n	8003796 <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	035b      	lsls	r3, r3, #13
 8003728:	4013      	ands	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_UART_IRQHandler+0x3b2>
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	03db      	lsls	r3, r3, #15
 8003732:	4013      	ands	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	0352      	lsls	r2, r2, #13
 800373e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0018      	movs	r0, r3
 8003744:	f000 feda 	bl	80044fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003748:	e028      	b.n	800379c <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	4013      	ands	r3, r2
 8003750:	d00d      	beq.n	800376e <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2280      	movs	r2, #128	; 0x80
 8003756:	4013      	ands	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01b      	beq.n	800379a <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	0010      	movs	r0, r2
 800376a:	4798      	blx	r3
    }
    return;
 800376c:	e015      	b.n	800379a <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	4013      	ands	r3, r2
 8003774:	d012      	beq.n	800379c <HAL_UART_IRQHandler+0x404>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2240      	movs	r2, #64	; 0x40
 800377a:	4013      	ands	r3, r2
 800377c:	d00e      	beq.n	800379c <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 fdb5 	bl	80042f0 <UART_EndTransmit_IT>
    return;
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	e008      	b.n	800379c <HAL_UART_IRQHandler+0x404>
      return;
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	e006      	b.n	800379c <HAL_UART_IRQHandler+0x404>
    return;
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	e004      	b.n	800379c <HAL_UART_IRQHandler+0x404>
      return;
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	e002      	b.n	800379c <HAL_UART_IRQHandler+0x404>
      return;
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	e000      	b.n	800379c <HAL_UART_IRQHandler+0x404>
    return;
 800379a:	46c0      	nop			; (mov r8, r8)
  }

}
 800379c:	46bd      	mov	sp, r7
 800379e:	b008      	add	sp, #32
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	fffffedf 	.word	0xfffffedf

080037a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	000a      	movs	r2, r1
 80037d2:	1cbb      	adds	r3, r7, #2
 80037d4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b002      	add	sp, #8
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ea:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b004      	add	sp, #16
 80037fe:	bd80      	pop	{r7, pc}

08003800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003808:	231e      	movs	r3, #30
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4aac      	ldr	r2, [pc, #688]	; (8003ae0 <UART_SetConfig+0x2e0>)
 8003830:	4013      	ands	r3, r2
 8003832:	0019      	movs	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4aa7      	ldr	r2, [pc, #668]	; (8003ae4 <UART_SetConfig+0x2e4>)
 8003846:	4013      	ands	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a9e      	ldr	r2, [pc, #632]	; (8003ae8 <UART_SetConfig+0x2e8>)
 800386e:	4013      	ands	r3, r2
 8003870:	0019      	movs	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a9a      	ldr	r2, [pc, #616]	; (8003aec <UART_SetConfig+0x2ec>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d125      	bne.n	80038d2 <UART_SetConfig+0xd2>
 8003886:	4b9a      	ldr	r3, [pc, #616]	; (8003af0 <UART_SetConfig+0x2f0>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	2203      	movs	r2, #3
 800388c:	4013      	ands	r3, r2
 800388e:	2b01      	cmp	r3, #1
 8003890:	d00f      	beq.n	80038b2 <UART_SetConfig+0xb2>
 8003892:	d304      	bcc.n	800389e <UART_SetConfig+0x9e>
 8003894:	2b02      	cmp	r3, #2
 8003896:	d011      	beq.n	80038bc <UART_SetConfig+0xbc>
 8003898:	2b03      	cmp	r3, #3
 800389a:	d005      	beq.n	80038a8 <UART_SetConfig+0xa8>
 800389c:	e013      	b.n	80038c6 <UART_SetConfig+0xc6>
 800389e:	231f      	movs	r3, #31
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e064      	b.n	8003972 <UART_SetConfig+0x172>
 80038a8:	231f      	movs	r3, #31
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2202      	movs	r2, #2
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	e05f      	b.n	8003972 <UART_SetConfig+0x172>
 80038b2:	231f      	movs	r3, #31
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2204      	movs	r2, #4
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e05a      	b.n	8003972 <UART_SetConfig+0x172>
 80038bc:	231f      	movs	r3, #31
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	2208      	movs	r2, #8
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	e055      	b.n	8003972 <UART_SetConfig+0x172>
 80038c6:	231f      	movs	r3, #31
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2210      	movs	r2, #16
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	e04f      	b.n	8003972 <UART_SetConfig+0x172>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a87      	ldr	r2, [pc, #540]	; (8003af4 <UART_SetConfig+0x2f4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d132      	bne.n	8003942 <UART_SetConfig+0x142>
 80038dc:	4b84      	ldr	r3, [pc, #528]	; (8003af0 <UART_SetConfig+0x2f0>)
 80038de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e0:	23c0      	movs	r3, #192	; 0xc0
 80038e2:	029b      	lsls	r3, r3, #10
 80038e4:	4013      	ands	r3, r2
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	0252      	lsls	r2, r2, #9
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d019      	beq.n	8003922 <UART_SetConfig+0x122>
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	0252      	lsls	r2, r2, #9
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d802      	bhi.n	80038fc <UART_SetConfig+0xfc>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <UART_SetConfig+0x10e>
 80038fa:	e01c      	b.n	8003936 <UART_SetConfig+0x136>
 80038fc:	2280      	movs	r2, #128	; 0x80
 80038fe:	0292      	lsls	r2, r2, #10
 8003900:	4293      	cmp	r3, r2
 8003902:	d013      	beq.n	800392c <UART_SetConfig+0x12c>
 8003904:	22c0      	movs	r2, #192	; 0xc0
 8003906:	0292      	lsls	r2, r2, #10
 8003908:	4293      	cmp	r3, r2
 800390a:	d005      	beq.n	8003918 <UART_SetConfig+0x118>
 800390c:	e013      	b.n	8003936 <UART_SetConfig+0x136>
 800390e:	231f      	movs	r3, #31
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e02c      	b.n	8003972 <UART_SetConfig+0x172>
 8003918:	231f      	movs	r3, #31
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	2202      	movs	r2, #2
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e027      	b.n	8003972 <UART_SetConfig+0x172>
 8003922:	231f      	movs	r3, #31
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	2204      	movs	r2, #4
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e022      	b.n	8003972 <UART_SetConfig+0x172>
 800392c:	231f      	movs	r3, #31
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	2208      	movs	r2, #8
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	e01d      	b.n	8003972 <UART_SetConfig+0x172>
 8003936:	231f      	movs	r3, #31
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	2210      	movs	r2, #16
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	e017      	b.n	8003972 <UART_SetConfig+0x172>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6c      	ldr	r2, [pc, #432]	; (8003af8 <UART_SetConfig+0x2f8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d104      	bne.n	8003956 <UART_SetConfig+0x156>
 800394c:	231f      	movs	r3, #31
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e00d      	b.n	8003972 <UART_SetConfig+0x172>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a68      	ldr	r2, [pc, #416]	; (8003afc <UART_SetConfig+0x2fc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d104      	bne.n	800396a <UART_SetConfig+0x16a>
 8003960:	231f      	movs	r3, #31
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e003      	b.n	8003972 <UART_SetConfig+0x172>
 800396a:	231f      	movs	r3, #31
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2210      	movs	r2, #16
 8003970:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	429a      	cmp	r2, r3
 800397c:	d15c      	bne.n	8003a38 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 800397e:	231f      	movs	r3, #31
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d00d      	beq.n	80039a4 <UART_SetConfig+0x1a4>
 8003988:	dc02      	bgt.n	8003990 <UART_SetConfig+0x190>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <UART_SetConfig+0x19a>
 800398e:	e015      	b.n	80039bc <UART_SetConfig+0x1bc>
 8003990:	2b04      	cmp	r3, #4
 8003992:	d00a      	beq.n	80039aa <UART_SetConfig+0x1aa>
 8003994:	2b08      	cmp	r3, #8
 8003996:	d00d      	beq.n	80039b4 <UART_SetConfig+0x1b4>
 8003998:	e010      	b.n	80039bc <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800399a:	f7fe fd6b 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 800399e:	0003      	movs	r3, r0
 80039a0:	61bb      	str	r3, [r7, #24]
        break;
 80039a2:	e012      	b.n	80039ca <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a4:	4b56      	ldr	r3, [pc, #344]	; (8003b00 <UART_SetConfig+0x300>)
 80039a6:	61bb      	str	r3, [r7, #24]
        break;
 80039a8:	e00f      	b.n	80039ca <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039aa:	f7fe fcdb 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 80039ae:	0003      	movs	r3, r0
 80039b0:	61bb      	str	r3, [r7, #24]
        break;
 80039b2:	e00a      	b.n	80039ca <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	61bb      	str	r3, [r7, #24]
        break;
 80039ba:	e006      	b.n	80039ca <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039c0:	231e      	movs	r3, #30
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	2201      	movs	r2, #1
 80039c6:	701a      	strb	r2, [r3, #0]
        break;
 80039c8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d100      	bne.n	80039d2 <UART_SetConfig+0x1d2>
 80039d0:	e079      	b.n	8003ac6 <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	005a      	lsls	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	18d2      	adds	r2, r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	0019      	movs	r1, r3
 80039e4:	0010      	movs	r0, r2
 80039e6:	f7fc fb99 	bl	800011c <__udivsi3>
 80039ea:	0003      	movs	r3, r0
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b0f      	cmp	r3, #15
 80039f4:	d91b      	bls.n	8003a2e <UART_SetConfig+0x22e>
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <UART_SetConfig+0x304>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d817      	bhi.n	8003a2e <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	200e      	movs	r0, #14
 8003a04:	183b      	adds	r3, r7, r0
 8003a06:	210f      	movs	r1, #15
 8003a08:	438a      	bics	r2, r1
 8003a0a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2207      	movs	r2, #7
 8003a14:	4013      	ands	r3, r2
 8003a16:	b299      	uxth	r1, r3
 8003a18:	183b      	adds	r3, r7, r0
 8003a1a:	183a      	adds	r2, r7, r0
 8003a1c:	8812      	ldrh	r2, [r2, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	183a      	adds	r2, r7, r0
 8003a28:	8812      	ldrh	r2, [r2, #0]
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	e04b      	b.n	8003ac6 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8003a2e:	231e      	movs	r3, #30
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e046      	b.n	8003ac6 <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a38:	231f      	movs	r3, #31
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d00d      	beq.n	8003a5e <UART_SetConfig+0x25e>
 8003a42:	dc02      	bgt.n	8003a4a <UART_SetConfig+0x24a>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <UART_SetConfig+0x254>
 8003a48:	e015      	b.n	8003a76 <UART_SetConfig+0x276>
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d00a      	beq.n	8003a64 <UART_SetConfig+0x264>
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d00d      	beq.n	8003a6e <UART_SetConfig+0x26e>
 8003a52:	e010      	b.n	8003a76 <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a54:	f7fe fd0e 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	61bb      	str	r3, [r7, #24]
        break;
 8003a5c:	e012      	b.n	8003a84 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <UART_SetConfig+0x300>)
 8003a60:	61bb      	str	r3, [r7, #24]
        break;
 8003a62:	e00f      	b.n	8003a84 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a64:	f7fe fc7e 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	61bb      	str	r3, [r7, #24]
        break;
 8003a6c:	e00a      	b.n	8003a84 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	61bb      	str	r3, [r7, #24]
        break;
 8003a74:	e006      	b.n	8003a84 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a7a:	231e      	movs	r3, #30
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
        break;
 8003a82:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01d      	beq.n	8003ac6 <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	085a      	lsrs	r2, r3, #1
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	18d2      	adds	r2, r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0019      	movs	r1, r3
 8003a9a:	0010      	movs	r0, r2
 8003a9c:	f7fc fb3e 	bl	800011c <__udivsi3>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b0f      	cmp	r3, #15
 8003aaa:	d908      	bls.n	8003abe <UART_SetConfig+0x2be>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4a15      	ldr	r2, [pc, #84]	; (8003b04 <UART_SetConfig+0x304>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d804      	bhi.n	8003abe <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	60da      	str	r2, [r3, #12]
 8003abc:	e003      	b.n	8003ac6 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8003abe:	231e      	movs	r3, #30
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ad2:	231e      	movs	r3, #30
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	781b      	ldrb	r3, [r3, #0]
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b008      	add	sp, #32
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	efff69f3 	.word	0xefff69f3
 8003ae4:	ffffcfff 	.word	0xffffcfff
 8003ae8:	fffff4ff 	.word	0xfffff4ff
 8003aec:	40013800 	.word	0x40013800
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40004400 	.word	0x40004400
 8003af8:	40004800 	.word	0x40004800
 8003afc:	40004c00 	.word	0x40004c00
 8003b00:	007a1200 	.word	0x007a1200
 8003b04:	0000ffff 	.word	0x0000ffff

08003b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	2201      	movs	r2, #1
 8003b16:	4013      	ands	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a4a      	ldr	r2, [pc, #296]	; (8003c4c <UART_AdvFeatureConfig+0x144>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	2202      	movs	r2, #2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a43      	ldr	r2, [pc, #268]	; (8003c50 <UART_AdvFeatureConfig+0x148>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a3b      	ldr	r2, [pc, #236]	; (8003c54 <UART_AdvFeatureConfig+0x14c>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	0019      	movs	r1, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <UART_AdvFeatureConfig+0x150>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <UART_AdvFeatureConfig+0x154>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	0019      	movs	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	4a25      	ldr	r2, [pc, #148]	; (8003c60 <UART_AdvFeatureConfig+0x158>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	0019      	movs	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	2240      	movs	r2, #64	; 0x40
 8003be2:	4013      	ands	r3, r2
 8003be4:	d01d      	beq.n	8003c22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <UART_AdvFeatureConfig+0x15c>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c02:	2380      	movs	r3, #128	; 0x80
 8003c04:	035b      	lsls	r3, r3, #13
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d10b      	bne.n	8003c22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <UART_AdvFeatureConfig+0x160>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	0019      	movs	r1, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d00b      	beq.n	8003c44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4a0e      	ldr	r2, [pc, #56]	; (8003c6c <UART_AdvFeatureConfig+0x164>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	0019      	movs	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	fffdffff 	.word	0xfffdffff
 8003c50:	fffeffff 	.word	0xfffeffff
 8003c54:	fffbffff 	.word	0xfffbffff
 8003c58:	ffff7fff 	.word	0xffff7fff
 8003c5c:	ffffefff 	.word	0xffffefff
 8003c60:	ffffdfff 	.word	0xffffdfff
 8003c64:	ffefffff 	.word	0xffefffff
 8003c68:	ff9fffff 	.word	0xff9fffff
 8003c6c:	fff7ffff 	.word	0xfff7ffff

08003c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2280      	movs	r2, #128	; 0x80
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c80:	f7fd fa60 	bl	8001144 <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2208      	movs	r2, #8
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d10d      	bne.n	8003cb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	0399      	lsls	r1, r3, #14
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <UART_CheckIdleState+0x90>)
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	0013      	movs	r3, r2
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f000 f82d 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003caa:	1e03      	subs	r3, r0, #0
 8003cac:	d001      	beq.n	8003cb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e022      	b.n	8003cf8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d10d      	bne.n	8003cdc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	03d9      	lsls	r1, r3, #15
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <UART_CheckIdleState+0x90>)
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	0013      	movs	r3, r2
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f000 f818 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003cd4:	1e03      	subs	r3, r0, #0
 8003cd6:	d001      	beq.n	8003cdc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e00d      	b.n	8003cf8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2274      	movs	r2, #116	; 0x74
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b004      	add	sp, #16
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	01ffffff 	.word	0x01ffffff

08003d04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	1dfb      	adds	r3, r7, #7
 8003d12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d14:	e05e      	b.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	d05b      	beq.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1c:	f7fd fa12 	bl	8001144 <HAL_GetTick>
 8003d20:	0002      	movs	r2, r0
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11b      	bne.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	492f      	ldr	r1, [pc, #188]	; (8003dfc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003d3e:	400a      	ands	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	438a      	bics	r2, r1
 8003d50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2274      	movs	r2, #116	; 0x74
 8003d62:	2100      	movs	r1, #0
 8003d64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e044      	b.n	8003df4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2204      	movs	r2, #4
 8003d72:	4013      	ands	r3, r2
 8003d74:	d02e      	beq.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	401a      	ands	r2, r3
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d124      	bne.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	0112      	lsls	r2, r2, #4
 8003d92:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4917      	ldr	r1, [pc, #92]	; (8003dfc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003da0:	400a      	ands	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	2120      	movs	r1, #32
 8003dc6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2274      	movs	r2, #116	; 0x74
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e00f      	b.n	8003df4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	425a      	negs	r2, r3
 8003de4:	4153      	adcs	r3, r2
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	001a      	movs	r2, r3
 8003dea:	1dfb      	adds	r3, r7, #7
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d091      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	0018      	movs	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b004      	add	sp, #16
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	fffffe5f 	.word	0xfffffe5f

08003e00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	1dbb      	adds	r3, r7, #6
 8003e0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1dba      	adds	r2, r7, #6
 8003e18:	2158      	movs	r1, #88	; 0x58
 8003e1a:	8812      	ldrh	r2, [r2, #0]
 8003e1c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1dba      	adds	r2, r7, #6
 8003e22:	215a      	movs	r1, #90	; 0x5a
 8003e24:	8812      	ldrh	r2, [r2, #0]
 8003e26:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	015b      	lsls	r3, r3, #5
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d10d      	bne.n	8003e56 <UART_Start_Receive_IT+0x56>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d104      	bne.n	8003e4c <UART_Start_Receive_IT+0x4c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	225c      	movs	r2, #92	; 0x5c
 8003e46:	4932      	ldr	r1, [pc, #200]	; (8003f10 <UART_Start_Receive_IT+0x110>)
 8003e48:	5299      	strh	r1, [r3, r2]
 8003e4a:	e02e      	b.n	8003eaa <UART_Start_Receive_IT+0xaa>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	225c      	movs	r2, #92	; 0x5c
 8003e50:	21ff      	movs	r1, #255	; 0xff
 8003e52:	5299      	strh	r1, [r3, r2]
 8003e54:	e029      	b.n	8003eaa <UART_Start_Receive_IT+0xaa>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <UART_Start_Receive_IT+0x7a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <UART_Start_Receive_IT+0x70>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	225c      	movs	r2, #92	; 0x5c
 8003e6a:	21ff      	movs	r1, #255	; 0xff
 8003e6c:	5299      	strh	r1, [r3, r2]
 8003e6e:	e01c      	b.n	8003eaa <UART_Start_Receive_IT+0xaa>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	225c      	movs	r2, #92	; 0x5c
 8003e74:	217f      	movs	r1, #127	; 0x7f
 8003e76:	5299      	strh	r1, [r3, r2]
 8003e78:	e017      	b.n	8003eaa <UART_Start_Receive_IT+0xaa>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	055b      	lsls	r3, r3, #21
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d10d      	bne.n	8003ea2 <UART_Start_Receive_IT+0xa2>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d104      	bne.n	8003e98 <UART_Start_Receive_IT+0x98>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	225c      	movs	r2, #92	; 0x5c
 8003e92:	217f      	movs	r1, #127	; 0x7f
 8003e94:	5299      	strh	r1, [r3, r2]
 8003e96:	e008      	b.n	8003eaa <UART_Start_Receive_IT+0xaa>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	225c      	movs	r2, #92	; 0x5c
 8003e9c:	213f      	movs	r1, #63	; 0x3f
 8003e9e:	5299      	strh	r1, [r3, r2]
 8003ea0:	e003      	b.n	8003eaa <UART_Start_Receive_IT+0xaa>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	225c      	movs	r2, #92	; 0x5c
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	2100      	movs	r1, #0
 8003eb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2222      	movs	r2, #34	; 0x22
 8003eb6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	015b      	lsls	r3, r3, #5
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d107      	bne.n	8003ee4 <UART_Start_Receive_IT+0xe4>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <UART_Start_Receive_IT+0x114>)
 8003ee0:	665a      	str	r2, [r3, #100]	; 0x64
 8003ee2:	e002      	b.n	8003eea <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <UART_Start_Receive_IT+0x118>)
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2274      	movs	r2, #116	; 0x74
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2190      	movs	r1, #144	; 0x90
 8003efe:	0049      	lsls	r1, r1, #1
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	000001ff 	.word	0x000001ff
 8003f14:	08004411 	.word	0x08004411
 8003f18:	08004325 	.word	0x08004325

08003f1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	1dbb      	adds	r3, r7, #6
 8003f28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1dba      	adds	r2, r7, #6
 8003f34:	2158      	movs	r1, #88	; 0x58
 8003f36:	8812      	ldrh	r2, [r2, #0]
 8003f38:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	2100      	movs	r1, #0
 8003f40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2222      	movs	r2, #34	; 0x22
 8003f46:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02b      	beq.n	8003fa8 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a25      	ldr	r2, [pc, #148]	; (8003fec <UART_Start_Receive_DMA+0xd0>)
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <UART_Start_Receive_DMA+0xd4>)
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <UART_Start_Receive_DMA+0xd8>)
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3324      	adds	r3, #36	; 0x24
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	001a      	movs	r2, r3
 8003f82:	1dbb      	adds	r3, r7, #6
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	f7fd fa0d 	bl	80013a4 <HAL_DMA_Start_IT>
 8003f8a:	1e03      	subs	r3, r0, #0
 8003f8c:	d00c      	beq.n	8003fa8 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	2110      	movs	r1, #16
 8003f94:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2274      	movs	r2, #116	; 0x74
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e01d      	b.n	8003fe4 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2274      	movs	r2, #116	; 0x74
 8003fac:	2100      	movs	r1, #0
 8003fae:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2180      	movs	r1, #128	; 0x80
 8003fbc:	0049      	lsls	r1, r1, #1
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2101      	movs	r1, #1
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2140      	movs	r1, #64	; 0x40
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b004      	add	sp, #16
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	08004081 	.word	0x08004081
 8003ff0:	0800411d 	.word	0x0800411d
 8003ff4:	08004159 	.word	0x08004159

08003ff8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	21c0      	movs	r1, #192	; 0xc0
 800400c:	438a      	bics	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	46bd      	mov	sp, r7
 800401a:	b002      	add	sp, #8
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4912      	ldr	r1, [pc, #72]	; (800407c <UART_EndRxTransfer+0x5c>)
 8004034:	400a      	ands	r2, r1
 8004036:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2101      	movs	r1, #1
 8004044:	438a      	bics	r2, r1
 8004046:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2110      	movs	r1, #16
 800405c:	438a      	bics	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b002      	add	sp, #8
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	fffffedf 	.word	0xfffffedf

08004080 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b20      	cmp	r3, #32
 8004094:	d02a      	beq.n	80040ec <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	225a      	movs	r2, #90	; 0x5a
 800409a:	2100      	movs	r1, #0
 800409c:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	491b      	ldr	r1, [pc, #108]	; (8004118 <UART_DMAReceiveCplt+0x98>)
 80040aa:	400a      	ands	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	438a      	bics	r2, r1
 80040bc:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2140      	movs	r1, #64	; 0x40
 80040ca:	438a      	bics	r2, r1
 80040cc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d107      	bne.n	80040ec <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2110      	movs	r1, #16
 80040e8:	438a      	bics	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d108      	bne.n	8004106 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2258      	movs	r2, #88	; 0x58
 80040f8:	5a9a      	ldrh	r2, [r3, r2]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	0011      	movs	r1, r2
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff fb62 	bl	80037c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004104:	e003      	b.n	800410e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	0018      	movs	r0, r3
 800410a:	f7fc fb07 	bl	800071c <HAL_UART_RxCpltCallback>
}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	46bd      	mov	sp, r7
 8004112:	b004      	add	sp, #16
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	fffffeff 	.word	0xfffffeff

0800411c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10a      	bne.n	8004148 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2258      	movs	r2, #88	; 0x58
 8004136:	5a9b      	ldrh	r3, [r3, r2]
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	0011      	movs	r1, r2
 8004140:	0018      	movs	r0, r3
 8004142:	f7ff fb41 	bl	80037c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004146:	e003      	b.n	8004150 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	0018      	movs	r0, r3
 800414c:	f7ff fb2c 	bl	80037a8 <HAL_UART_RxHalfCpltCallback>
}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b004      	add	sp, #16
 8004156:	bd80      	pop	{r7, pc}

08004158 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800416a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004170:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	4013      	ands	r3, r2
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d10a      	bne.n	8004196 <UART_DMAError+0x3e>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b21      	cmp	r3, #33	; 0x21
 8004184:	d107      	bne.n	8004196 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2252      	movs	r2, #82	; 0x52
 800418a:	2100      	movs	r1, #0
 800418c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	0018      	movs	r0, r3
 8004192:	f7ff ff31 	bl	8003ff8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2240      	movs	r2, #64	; 0x40
 800419e:	4013      	ands	r3, r2
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d10a      	bne.n	80041ba <UART_DMAError+0x62>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b22      	cmp	r3, #34	; 0x22
 80041a8:	d107      	bne.n	80041ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	225a      	movs	r2, #90	; 0x5a
 80041ae:	2100      	movs	r1, #0
 80041b0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7ff ff33 	bl	8004020 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2280      	movs	r2, #128	; 0x80
 80041be:	589b      	ldr	r3, [r3, r2]
 80041c0:	2210      	movs	r2, #16
 80041c2:	431a      	orrs	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7ff faf3 	bl	80037b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b006      	add	sp, #24
 80041d8:	bd80      	pop	{r7, pc}

080041da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	225a      	movs	r2, #90	; 0x5a
 80041ec:	2100      	movs	r1, #0
 80041ee:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2252      	movs	r2, #82	; 0x52
 80041f4:	2100      	movs	r1, #0
 80041f6:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7ff fadc 	bl	80037b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bd80      	pop	{r7, pc}

08004208 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004214:	2b21      	cmp	r3, #33	; 0x21
 8004216:	d12b      	bne.n	8004270 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2252      	movs	r2, #82	; 0x52
 800421c:	5a9b      	ldrh	r3, [r3, r2]
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d110      	bne.n	8004246 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2180      	movs	r1, #128	; 0x80
 8004230:	438a      	bics	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2140      	movs	r1, #64	; 0x40
 8004240:	430a      	orrs	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004244:	e014      	b.n	8004270 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	781a      	ldrb	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	b292      	uxth	r2, r2
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2252      	movs	r2, #82	; 0x52
 8004262:	5a9b      	ldrh	r3, [r3, r2]
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b299      	uxth	r1, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2252      	movs	r2, #82	; 0x52
 800426e:	5299      	strh	r1, [r3, r2]
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004284:	2b21      	cmp	r3, #33	; 0x21
 8004286:	d12f      	bne.n	80042e8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2252      	movs	r2, #82	; 0x52
 800428c:	5a9b      	ldrh	r3, [r3, r2]
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d110      	bne.n	80042b6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	438a      	bics	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2140      	movs	r1, #64	; 0x40
 80042b0:	430a      	orrs	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80042b4:	e018      	b.n	80042e8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	881a      	ldrh	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	05d2      	lsls	r2, r2, #23
 80042c6:	0dd2      	lsrs	r2, r2, #23
 80042c8:	b292      	uxth	r2, r2
 80042ca:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	1c9a      	adds	r2, r3, #2
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2252      	movs	r2, #82	; 0x52
 80042da:	5a9b      	ldrh	r3, [r3, r2]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b299      	uxth	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2252      	movs	r2, #82	; 0x52
 80042e6:	5299      	strh	r1, [r3, r2]
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b004      	add	sp, #16
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2140      	movs	r1, #64	; 0x40
 8004304:	438a      	bics	r2, r1
 8004306:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0018      	movs	r0, r3
 8004318:	f7fc fa58 	bl	80007cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800432c:	230e      	movs	r3, #14
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	215c      	movs	r1, #92	; 0x5c
 8004334:	5a52      	ldrh	r2, [r2, r1]
 8004336:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433c:	2b22      	cmp	r3, #34	; 0x22
 800433e:	d158      	bne.n	80043f2 <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	210c      	movs	r1, #12
 8004346:	187b      	adds	r3, r7, r1
 8004348:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800434a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800434c:	187b      	adds	r3, r7, r1
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	230e      	movs	r3, #14
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b2d9      	uxtb	r1, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	400a      	ands	r2, r1
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	225a      	movs	r2, #90	; 0x5a
 8004372:	5a9b      	ldrh	r3, [r3, r2]
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b299      	uxth	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	225a      	movs	r2, #90	; 0x5a
 800437e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	225a      	movs	r2, #90	; 0x5a
 8004384:	5a9b      	ldrh	r3, [r3, r2]
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d13a      	bne.n	8004402 <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	491d      	ldr	r1, [pc, #116]	; (800440c <UART_RxISR_8BIT+0xe8>)
 8004398:	400a      	ands	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2101      	movs	r1, #1
 80043a8:	438a      	bics	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d110      	bne.n	80043e2 <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2110      	movs	r1, #16
 80043cc:	438a      	bics	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2258      	movs	r2, #88	; 0x58
 80043d4:	5a9a      	ldrh	r2, [r3, r2]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f7ff f9f4 	bl	80037c8 <HAL_UARTEx_RxEventCallback>
 80043e0:	e003      	b.n	80043ea <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0018      	movs	r0, r3
 80043e6:	f7fc f999 	bl	800071c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043f0:	e007      	b.n	8004402 <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2108      	movs	r1, #8
 80043fe:	430a      	orrs	r2, r1
 8004400:	619a      	str	r2, [r3, #24]
}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	46bd      	mov	sp, r7
 8004406:	b004      	add	sp, #16
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	fffffedf 	.word	0xfffffedf

08004410 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004418:	230e      	movs	r3, #14
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	215c      	movs	r1, #92	; 0x5c
 8004420:	5a52      	ldrh	r2, [r2, r1]
 8004422:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004428:	2b22      	cmp	r3, #34	; 0x22
 800442a:	d158      	bne.n	80044de <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	210c      	movs	r1, #12
 8004432:	187b      	adds	r3, r7, r1
 8004434:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004436:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800443e:	187b      	adds	r3, r7, r1
 8004440:	220e      	movs	r2, #14
 8004442:	18ba      	adds	r2, r7, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	8812      	ldrh	r2, [r2, #0]
 8004448:	4013      	ands	r3, r2
 800444a:	b29a      	uxth	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	225a      	movs	r2, #90	; 0x5a
 800445e:	5a9b      	ldrh	r3, [r3, r2]
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b299      	uxth	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	225a      	movs	r2, #90	; 0x5a
 800446a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	225a      	movs	r2, #90	; 0x5a
 8004470:	5a9b      	ldrh	r3, [r3, r2]
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d13a      	bne.n	80044ee <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	491d      	ldr	r1, [pc, #116]	; (80044f8 <UART_RxISR_16BIT+0xe8>)
 8004484:	400a      	ands	r2, r1
 8004486:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2101      	movs	r1, #1
 8004494:	438a      	bics	r2, r1
 8004496:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d110      	bne.n	80044ce <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2110      	movs	r1, #16
 80044b8:	438a      	bics	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2258      	movs	r2, #88	; 0x58
 80044c0:	5a9a      	ldrh	r2, [r3, r2]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0011      	movs	r1, r2
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7ff f97e 	bl	80037c8 <HAL_UARTEx_RxEventCallback>
 80044cc:	e003      	b.n	80044d6 <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7fc f923 	bl	800071c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044dc:	e007      	b.n	80044ee <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2108      	movs	r1, #8
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]
}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b004      	add	sp, #16
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	fffffedf 	.word	0xfffffedf

080044fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004504:	46c0      	nop			; (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}

0800450c <__errno>:
 800450c:	4b01      	ldr	r3, [pc, #4]	; (8004514 <__errno+0x8>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	4770      	bx	lr
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	20000014 	.word	0x20000014

08004518 <__libc_init_array>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	2600      	movs	r6, #0
 800451c:	4d0c      	ldr	r5, [pc, #48]	; (8004550 <__libc_init_array+0x38>)
 800451e:	4c0d      	ldr	r4, [pc, #52]	; (8004554 <__libc_init_array+0x3c>)
 8004520:	1b64      	subs	r4, r4, r5
 8004522:	10a4      	asrs	r4, r4, #2
 8004524:	42a6      	cmp	r6, r4
 8004526:	d109      	bne.n	800453c <__libc_init_array+0x24>
 8004528:	2600      	movs	r6, #0
 800452a:	f000 ffa3 	bl	8005474 <_init>
 800452e:	4d0a      	ldr	r5, [pc, #40]	; (8004558 <__libc_init_array+0x40>)
 8004530:	4c0a      	ldr	r4, [pc, #40]	; (800455c <__libc_init_array+0x44>)
 8004532:	1b64      	subs	r4, r4, r5
 8004534:	10a4      	asrs	r4, r4, #2
 8004536:	42a6      	cmp	r6, r4
 8004538:	d105      	bne.n	8004546 <__libc_init_array+0x2e>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	00b3      	lsls	r3, r6, #2
 800453e:	58eb      	ldr	r3, [r5, r3]
 8004540:	4798      	blx	r3
 8004542:	3601      	adds	r6, #1
 8004544:	e7ee      	b.n	8004524 <__libc_init_array+0xc>
 8004546:	00b3      	lsls	r3, r6, #2
 8004548:	58eb      	ldr	r3, [r5, r3]
 800454a:	4798      	blx	r3
 800454c:	3601      	adds	r6, #1
 800454e:	e7f2      	b.n	8004536 <__libc_init_array+0x1e>
 8004550:	08005674 	.word	0x08005674
 8004554:	08005674 	.word	0x08005674
 8004558:	08005674 	.word	0x08005674
 800455c:	08005678 	.word	0x08005678

08004560 <memset>:
 8004560:	0003      	movs	r3, r0
 8004562:	1812      	adds	r2, r2, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	7019      	strb	r1, [r3, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <iprintf>:
 8004570:	b40f      	push	{r0, r1, r2, r3}
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <iprintf+0x30>)
 8004574:	b513      	push	{r0, r1, r4, lr}
 8004576:	681c      	ldr	r4, [r3, #0]
 8004578:	2c00      	cmp	r4, #0
 800457a:	d005      	beq.n	8004588 <iprintf+0x18>
 800457c:	69a3      	ldr	r3, [r4, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <iprintf+0x18>
 8004582:	0020      	movs	r0, r4
 8004584:	f000 fa3c 	bl	8004a00 <__sinit>
 8004588:	ab05      	add	r3, sp, #20
 800458a:	9a04      	ldr	r2, [sp, #16]
 800458c:	68a1      	ldr	r1, [r4, #8]
 800458e:	0020      	movs	r0, r4
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	f000 fc05 	bl	8004da0 <_vfiprintf_r>
 8004596:	bc16      	pop	{r1, r2, r4}
 8004598:	bc08      	pop	{r3}
 800459a:	b004      	add	sp, #16
 800459c:	4718      	bx	r3
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	20000014 	.word	0x20000014

080045a4 <_puts_r>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	0005      	movs	r5, r0
 80045a8:	000e      	movs	r6, r1
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d004      	beq.n	80045b8 <_puts_r+0x14>
 80045ae:	6983      	ldr	r3, [r0, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <_puts_r+0x14>
 80045b4:	f000 fa24 	bl	8004a00 <__sinit>
 80045b8:	69ab      	ldr	r3, [r5, #24]
 80045ba:	68ac      	ldr	r4, [r5, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <_puts_r+0x22>
 80045c0:	0028      	movs	r0, r5
 80045c2:	f000 fa1d 	bl	8004a00 <__sinit>
 80045c6:	4b24      	ldr	r3, [pc, #144]	; (8004658 <_puts_r+0xb4>)
 80045c8:	429c      	cmp	r4, r3
 80045ca:	d10f      	bne.n	80045ec <_puts_r+0x48>
 80045cc:	686c      	ldr	r4, [r5, #4]
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	071b      	lsls	r3, r3, #28
 80045d2:	d502      	bpl.n	80045da <_puts_r+0x36>
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d11f      	bne.n	800461a <_puts_r+0x76>
 80045da:	0021      	movs	r1, r4
 80045dc:	0028      	movs	r0, r5
 80045de:	f000 f8a1 	bl	8004724 <__swsetup_r>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d019      	beq.n	800461a <_puts_r+0x76>
 80045e6:	2001      	movs	r0, #1
 80045e8:	4240      	negs	r0, r0
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <_puts_r+0xb8>)
 80045ee:	429c      	cmp	r4, r3
 80045f0:	d101      	bne.n	80045f6 <_puts_r+0x52>
 80045f2:	68ac      	ldr	r4, [r5, #8]
 80045f4:	e7eb      	b.n	80045ce <_puts_r+0x2a>
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <_puts_r+0xbc>)
 80045f8:	429c      	cmp	r4, r3
 80045fa:	d1e8      	bne.n	80045ce <_puts_r+0x2a>
 80045fc:	68ec      	ldr	r4, [r5, #12]
 80045fe:	e7e6      	b.n	80045ce <_puts_r+0x2a>
 8004600:	3601      	adds	r6, #1
 8004602:	60a3      	str	r3, [r4, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	da04      	bge.n	8004612 <_puts_r+0x6e>
 8004608:	69a2      	ldr	r2, [r4, #24]
 800460a:	429a      	cmp	r2, r3
 800460c:	dc16      	bgt.n	800463c <_puts_r+0x98>
 800460e:	290a      	cmp	r1, #10
 8004610:	d014      	beq.n	800463c <_puts_r+0x98>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	6022      	str	r2, [r4, #0]
 8004618:	7019      	strb	r1, [r3, #0]
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	7831      	ldrb	r1, [r6, #0]
 800461e:	3b01      	subs	r3, #1
 8004620:	2900      	cmp	r1, #0
 8004622:	d1ed      	bne.n	8004600 <_puts_r+0x5c>
 8004624:	60a3      	str	r3, [r4, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	da0f      	bge.n	800464a <_puts_r+0xa6>
 800462a:	0022      	movs	r2, r4
 800462c:	310a      	adds	r1, #10
 800462e:	0028      	movs	r0, r5
 8004630:	f000 f822 	bl	8004678 <__swbuf_r>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d0d6      	beq.n	80045e6 <_puts_r+0x42>
 8004638:	200a      	movs	r0, #10
 800463a:	e7d6      	b.n	80045ea <_puts_r+0x46>
 800463c:	0022      	movs	r2, r4
 800463e:	0028      	movs	r0, r5
 8004640:	f000 f81a 	bl	8004678 <__swbuf_r>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d1e8      	bne.n	800461a <_puts_r+0x76>
 8004648:	e7cd      	b.n	80045e6 <_puts_r+0x42>
 800464a:	200a      	movs	r0, #10
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	6022      	str	r2, [r4, #0]
 8004652:	7018      	strb	r0, [r3, #0]
 8004654:	e7c9      	b.n	80045ea <_puts_r+0x46>
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	08005600 	.word	0x08005600
 800465c:	08005620 	.word	0x08005620
 8004660:	080055e0 	.word	0x080055e0

08004664 <puts>:
 8004664:	b510      	push	{r4, lr}
 8004666:	4b03      	ldr	r3, [pc, #12]	; (8004674 <puts+0x10>)
 8004668:	0001      	movs	r1, r0
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	f7ff ff9a 	bl	80045a4 <_puts_r>
 8004670:	bd10      	pop	{r4, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	20000014 	.word	0x20000014

08004678 <__swbuf_r>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	0005      	movs	r5, r0
 800467c:	000e      	movs	r6, r1
 800467e:	0014      	movs	r4, r2
 8004680:	2800      	cmp	r0, #0
 8004682:	d004      	beq.n	800468e <__swbuf_r+0x16>
 8004684:	6983      	ldr	r3, [r0, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <__swbuf_r+0x16>
 800468a:	f000 f9b9 	bl	8004a00 <__sinit>
 800468e:	4b22      	ldr	r3, [pc, #136]	; (8004718 <__swbuf_r+0xa0>)
 8004690:	429c      	cmp	r4, r3
 8004692:	d12d      	bne.n	80046f0 <__swbuf_r+0x78>
 8004694:	686c      	ldr	r4, [r5, #4]
 8004696:	69a3      	ldr	r3, [r4, #24]
 8004698:	60a3      	str	r3, [r4, #8]
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	d531      	bpl.n	8004704 <__swbuf_r+0x8c>
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02e      	beq.n	8004704 <__swbuf_r+0x8c>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	6922      	ldr	r2, [r4, #16]
 80046aa:	b2f7      	uxtb	r7, r6
 80046ac:	1a98      	subs	r0, r3, r2
 80046ae:	6963      	ldr	r3, [r4, #20]
 80046b0:	b2f6      	uxtb	r6, r6
 80046b2:	4283      	cmp	r3, r0
 80046b4:	dc05      	bgt.n	80046c2 <__swbuf_r+0x4a>
 80046b6:	0021      	movs	r1, r4
 80046b8:	0028      	movs	r0, r5
 80046ba:	f000 f933 	bl	8004924 <_fflush_r>
 80046be:	2800      	cmp	r0, #0
 80046c0:	d126      	bne.n	8004710 <__swbuf_r+0x98>
 80046c2:	68a3      	ldr	r3, [r4, #8]
 80046c4:	3001      	adds	r0, #1
 80046c6:	3b01      	subs	r3, #1
 80046c8:	60a3      	str	r3, [r4, #8]
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	6022      	str	r2, [r4, #0]
 80046d0:	701f      	strb	r7, [r3, #0]
 80046d2:	6963      	ldr	r3, [r4, #20]
 80046d4:	4283      	cmp	r3, r0
 80046d6:	d004      	beq.n	80046e2 <__swbuf_r+0x6a>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	07db      	lsls	r3, r3, #31
 80046dc:	d51a      	bpl.n	8004714 <__swbuf_r+0x9c>
 80046de:	2e0a      	cmp	r6, #10
 80046e0:	d118      	bne.n	8004714 <__swbuf_r+0x9c>
 80046e2:	0021      	movs	r1, r4
 80046e4:	0028      	movs	r0, r5
 80046e6:	f000 f91d 	bl	8004924 <_fflush_r>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d012      	beq.n	8004714 <__swbuf_r+0x9c>
 80046ee:	e00f      	b.n	8004710 <__swbuf_r+0x98>
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <__swbuf_r+0xa4>)
 80046f2:	429c      	cmp	r4, r3
 80046f4:	d101      	bne.n	80046fa <__swbuf_r+0x82>
 80046f6:	68ac      	ldr	r4, [r5, #8]
 80046f8:	e7cd      	b.n	8004696 <__swbuf_r+0x1e>
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <__swbuf_r+0xa8>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	d1ca      	bne.n	8004696 <__swbuf_r+0x1e>
 8004700:	68ec      	ldr	r4, [r5, #12]
 8004702:	e7c8      	b.n	8004696 <__swbuf_r+0x1e>
 8004704:	0021      	movs	r1, r4
 8004706:	0028      	movs	r0, r5
 8004708:	f000 f80c 	bl	8004724 <__swsetup_r>
 800470c:	2800      	cmp	r0, #0
 800470e:	d0ca      	beq.n	80046a6 <__swbuf_r+0x2e>
 8004710:	2601      	movs	r6, #1
 8004712:	4276      	negs	r6, r6
 8004714:	0030      	movs	r0, r6
 8004716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004718:	08005600 	.word	0x08005600
 800471c:	08005620 	.word	0x08005620
 8004720:	080055e0 	.word	0x080055e0

08004724 <__swsetup_r>:
 8004724:	4b36      	ldr	r3, [pc, #216]	; (8004800 <__swsetup_r+0xdc>)
 8004726:	b570      	push	{r4, r5, r6, lr}
 8004728:	681d      	ldr	r5, [r3, #0]
 800472a:	0006      	movs	r6, r0
 800472c:	000c      	movs	r4, r1
 800472e:	2d00      	cmp	r5, #0
 8004730:	d005      	beq.n	800473e <__swsetup_r+0x1a>
 8004732:	69ab      	ldr	r3, [r5, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d102      	bne.n	800473e <__swsetup_r+0x1a>
 8004738:	0028      	movs	r0, r5
 800473a:	f000 f961 	bl	8004a00 <__sinit>
 800473e:	4b31      	ldr	r3, [pc, #196]	; (8004804 <__swsetup_r+0xe0>)
 8004740:	429c      	cmp	r4, r3
 8004742:	d10f      	bne.n	8004764 <__swsetup_r+0x40>
 8004744:	686c      	ldr	r4, [r5, #4]
 8004746:	230c      	movs	r3, #12
 8004748:	5ee2      	ldrsh	r2, [r4, r3]
 800474a:	b293      	uxth	r3, r2
 800474c:	0719      	lsls	r1, r3, #28
 800474e:	d42d      	bmi.n	80047ac <__swsetup_r+0x88>
 8004750:	06d9      	lsls	r1, r3, #27
 8004752:	d411      	bmi.n	8004778 <__swsetup_r+0x54>
 8004754:	2309      	movs	r3, #9
 8004756:	2001      	movs	r0, #1
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	3337      	adds	r3, #55	; 0x37
 800475c:	4313      	orrs	r3, r2
 800475e:	81a3      	strh	r3, [r4, #12]
 8004760:	4240      	negs	r0, r0
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	4b28      	ldr	r3, [pc, #160]	; (8004808 <__swsetup_r+0xe4>)
 8004766:	429c      	cmp	r4, r3
 8004768:	d101      	bne.n	800476e <__swsetup_r+0x4a>
 800476a:	68ac      	ldr	r4, [r5, #8]
 800476c:	e7eb      	b.n	8004746 <__swsetup_r+0x22>
 800476e:	4b27      	ldr	r3, [pc, #156]	; (800480c <__swsetup_r+0xe8>)
 8004770:	429c      	cmp	r4, r3
 8004772:	d1e8      	bne.n	8004746 <__swsetup_r+0x22>
 8004774:	68ec      	ldr	r4, [r5, #12]
 8004776:	e7e6      	b.n	8004746 <__swsetup_r+0x22>
 8004778:	075b      	lsls	r3, r3, #29
 800477a:	d513      	bpl.n	80047a4 <__swsetup_r+0x80>
 800477c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800477e:	2900      	cmp	r1, #0
 8004780:	d008      	beq.n	8004794 <__swsetup_r+0x70>
 8004782:	0023      	movs	r3, r4
 8004784:	3344      	adds	r3, #68	; 0x44
 8004786:	4299      	cmp	r1, r3
 8004788:	d002      	beq.n	8004790 <__swsetup_r+0x6c>
 800478a:	0030      	movs	r0, r6
 800478c:	f000 fa38 	bl	8004c00 <_free_r>
 8004790:	2300      	movs	r3, #0
 8004792:	6363      	str	r3, [r4, #52]	; 0x34
 8004794:	2224      	movs	r2, #36	; 0x24
 8004796:	89a3      	ldrh	r3, [r4, #12]
 8004798:	4393      	bics	r3, r2
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	2300      	movs	r3, #0
 800479e:	6063      	str	r3, [r4, #4]
 80047a0:	6923      	ldr	r3, [r4, #16]
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	2308      	movs	r3, #8
 80047a6:	89a2      	ldrh	r2, [r4, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	81a3      	strh	r3, [r4, #12]
 80047ac:	6923      	ldr	r3, [r4, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <__swsetup_r+0xa6>
 80047b2:	21a0      	movs	r1, #160	; 0xa0
 80047b4:	2280      	movs	r2, #128	; 0x80
 80047b6:	89a3      	ldrh	r3, [r4, #12]
 80047b8:	0089      	lsls	r1, r1, #2
 80047ba:	0092      	lsls	r2, r2, #2
 80047bc:	400b      	ands	r3, r1
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <__swsetup_r+0xa6>
 80047c2:	0021      	movs	r1, r4
 80047c4:	0030      	movs	r0, r6
 80047c6:	f000 f9d7 	bl	8004b78 <__smakebuf_r>
 80047ca:	2301      	movs	r3, #1
 80047cc:	89a2      	ldrh	r2, [r4, #12]
 80047ce:	4013      	ands	r3, r2
 80047d0:	d011      	beq.n	80047f6 <__swsetup_r+0xd2>
 80047d2:	2300      	movs	r3, #0
 80047d4:	60a3      	str	r3, [r4, #8]
 80047d6:	6963      	ldr	r3, [r4, #20]
 80047d8:	425b      	negs	r3, r3
 80047da:	61a3      	str	r3, [r4, #24]
 80047dc:	2000      	movs	r0, #0
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	4283      	cmp	r3, r0
 80047e2:	d1be      	bne.n	8004762 <__swsetup_r+0x3e>
 80047e4:	230c      	movs	r3, #12
 80047e6:	5ee2      	ldrsh	r2, [r4, r3]
 80047e8:	0613      	lsls	r3, r2, #24
 80047ea:	d5ba      	bpl.n	8004762 <__swsetup_r+0x3e>
 80047ec:	2340      	movs	r3, #64	; 0x40
 80047ee:	4313      	orrs	r3, r2
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	3801      	subs	r0, #1
 80047f4:	e7b5      	b.n	8004762 <__swsetup_r+0x3e>
 80047f6:	0792      	lsls	r2, r2, #30
 80047f8:	d400      	bmi.n	80047fc <__swsetup_r+0xd8>
 80047fa:	6963      	ldr	r3, [r4, #20]
 80047fc:	60a3      	str	r3, [r4, #8]
 80047fe:	e7ed      	b.n	80047dc <__swsetup_r+0xb8>
 8004800:	20000014 	.word	0x20000014
 8004804:	08005600 	.word	0x08005600
 8004808:	08005620 	.word	0x08005620
 800480c:	080055e0 	.word	0x080055e0

08004810 <__sflush_r>:
 8004810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004812:	898a      	ldrh	r2, [r1, #12]
 8004814:	0005      	movs	r5, r0
 8004816:	000c      	movs	r4, r1
 8004818:	0713      	lsls	r3, r2, #28
 800481a:	d460      	bmi.n	80048de <__sflush_r+0xce>
 800481c:	684b      	ldr	r3, [r1, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	dc04      	bgt.n	800482c <__sflush_r+0x1c>
 8004822:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	dc01      	bgt.n	800482c <__sflush_r+0x1c>
 8004828:	2000      	movs	r0, #0
 800482a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800482c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800482e:	2f00      	cmp	r7, #0
 8004830:	d0fa      	beq.n	8004828 <__sflush_r+0x18>
 8004832:	2300      	movs	r3, #0
 8004834:	682e      	ldr	r6, [r5, #0]
 8004836:	602b      	str	r3, [r5, #0]
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	015b      	lsls	r3, r3, #5
 800483c:	6a21      	ldr	r1, [r4, #32]
 800483e:	401a      	ands	r2, r3
 8004840:	d034      	beq.n	80048ac <__sflush_r+0x9c>
 8004842:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	075b      	lsls	r3, r3, #29
 8004848:	d506      	bpl.n	8004858 <__sflush_r+0x48>
 800484a:	6863      	ldr	r3, [r4, #4]
 800484c:	1ac0      	subs	r0, r0, r3
 800484e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <__sflush_r+0x48>
 8004854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004856:	1ac0      	subs	r0, r0, r3
 8004858:	0002      	movs	r2, r0
 800485a:	6a21      	ldr	r1, [r4, #32]
 800485c:	2300      	movs	r3, #0
 800485e:	0028      	movs	r0, r5
 8004860:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004862:	47b8      	blx	r7
 8004864:	89a1      	ldrh	r1, [r4, #12]
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d106      	bne.n	8004878 <__sflush_r+0x68>
 800486a:	682b      	ldr	r3, [r5, #0]
 800486c:	2b1d      	cmp	r3, #29
 800486e:	d830      	bhi.n	80048d2 <__sflush_r+0xc2>
 8004870:	4a2b      	ldr	r2, [pc, #172]	; (8004920 <__sflush_r+0x110>)
 8004872:	40da      	lsrs	r2, r3
 8004874:	07d3      	lsls	r3, r2, #31
 8004876:	d52c      	bpl.n	80048d2 <__sflush_r+0xc2>
 8004878:	2300      	movs	r3, #0
 800487a:	6063      	str	r3, [r4, #4]
 800487c:	6923      	ldr	r3, [r4, #16]
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	04cb      	lsls	r3, r1, #19
 8004882:	d505      	bpl.n	8004890 <__sflush_r+0x80>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <__sflush_r+0x7e>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d100      	bne.n	8004890 <__sflush_r+0x80>
 800488e:	6560      	str	r0, [r4, #84]	; 0x54
 8004890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004892:	602e      	str	r6, [r5, #0]
 8004894:	2900      	cmp	r1, #0
 8004896:	d0c7      	beq.n	8004828 <__sflush_r+0x18>
 8004898:	0023      	movs	r3, r4
 800489a:	3344      	adds	r3, #68	; 0x44
 800489c:	4299      	cmp	r1, r3
 800489e:	d002      	beq.n	80048a6 <__sflush_r+0x96>
 80048a0:	0028      	movs	r0, r5
 80048a2:	f000 f9ad 	bl	8004c00 <_free_r>
 80048a6:	2000      	movs	r0, #0
 80048a8:	6360      	str	r0, [r4, #52]	; 0x34
 80048aa:	e7be      	b.n	800482a <__sflush_r+0x1a>
 80048ac:	2301      	movs	r3, #1
 80048ae:	0028      	movs	r0, r5
 80048b0:	47b8      	blx	r7
 80048b2:	1c43      	adds	r3, r0, #1
 80048b4:	d1c6      	bne.n	8004844 <__sflush_r+0x34>
 80048b6:	682b      	ldr	r3, [r5, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0c3      	beq.n	8004844 <__sflush_r+0x34>
 80048bc:	2b1d      	cmp	r3, #29
 80048be:	d001      	beq.n	80048c4 <__sflush_r+0xb4>
 80048c0:	2b16      	cmp	r3, #22
 80048c2:	d101      	bne.n	80048c8 <__sflush_r+0xb8>
 80048c4:	602e      	str	r6, [r5, #0]
 80048c6:	e7af      	b.n	8004828 <__sflush_r+0x18>
 80048c8:	2340      	movs	r3, #64	; 0x40
 80048ca:	89a2      	ldrh	r2, [r4, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	e7ab      	b.n	800482a <__sflush_r+0x1a>
 80048d2:	2340      	movs	r3, #64	; 0x40
 80048d4:	430b      	orrs	r3, r1
 80048d6:	2001      	movs	r0, #1
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	4240      	negs	r0, r0
 80048dc:	e7a5      	b.n	800482a <__sflush_r+0x1a>
 80048de:	690f      	ldr	r7, [r1, #16]
 80048e0:	2f00      	cmp	r7, #0
 80048e2:	d0a1      	beq.n	8004828 <__sflush_r+0x18>
 80048e4:	680b      	ldr	r3, [r1, #0]
 80048e6:	600f      	str	r7, [r1, #0]
 80048e8:	1bdb      	subs	r3, r3, r7
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	2300      	movs	r3, #0
 80048ee:	0792      	lsls	r2, r2, #30
 80048f0:	d100      	bne.n	80048f4 <__sflush_r+0xe4>
 80048f2:	694b      	ldr	r3, [r1, #20]
 80048f4:	60a3      	str	r3, [r4, #8]
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	dc00      	bgt.n	80048fe <__sflush_r+0xee>
 80048fc:	e794      	b.n	8004828 <__sflush_r+0x18>
 80048fe:	9b01      	ldr	r3, [sp, #4]
 8004900:	003a      	movs	r2, r7
 8004902:	6a21      	ldr	r1, [r4, #32]
 8004904:	0028      	movs	r0, r5
 8004906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004908:	47b0      	blx	r6
 800490a:	2800      	cmp	r0, #0
 800490c:	dc03      	bgt.n	8004916 <__sflush_r+0x106>
 800490e:	2340      	movs	r3, #64	; 0x40
 8004910:	89a2      	ldrh	r2, [r4, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	e7df      	b.n	80048d6 <__sflush_r+0xc6>
 8004916:	9b01      	ldr	r3, [sp, #4]
 8004918:	183f      	adds	r7, r7, r0
 800491a:	1a1b      	subs	r3, r3, r0
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	e7ea      	b.n	80048f6 <__sflush_r+0xe6>
 8004920:	20400001 	.word	0x20400001

08004924 <_fflush_r>:
 8004924:	690b      	ldr	r3, [r1, #16]
 8004926:	b570      	push	{r4, r5, r6, lr}
 8004928:	0005      	movs	r5, r0
 800492a:	000c      	movs	r4, r1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <_fflush_r+0x10>
 8004930:	2000      	movs	r0, #0
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	2800      	cmp	r0, #0
 8004936:	d004      	beq.n	8004942 <_fflush_r+0x1e>
 8004938:	6983      	ldr	r3, [r0, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <_fflush_r+0x1e>
 800493e:	f000 f85f 	bl	8004a00 <__sinit>
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <_fflush_r+0x4c>)
 8004944:	429c      	cmp	r4, r3
 8004946:	d109      	bne.n	800495c <_fflush_r+0x38>
 8004948:	686c      	ldr	r4, [r5, #4]
 800494a:	220c      	movs	r2, #12
 800494c:	5ea3      	ldrsh	r3, [r4, r2]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ee      	beq.n	8004930 <_fflush_r+0xc>
 8004952:	0021      	movs	r1, r4
 8004954:	0028      	movs	r0, r5
 8004956:	f7ff ff5b 	bl	8004810 <__sflush_r>
 800495a:	e7ea      	b.n	8004932 <_fflush_r+0xe>
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <_fflush_r+0x50>)
 800495e:	429c      	cmp	r4, r3
 8004960:	d101      	bne.n	8004966 <_fflush_r+0x42>
 8004962:	68ac      	ldr	r4, [r5, #8]
 8004964:	e7f1      	b.n	800494a <_fflush_r+0x26>
 8004966:	4b04      	ldr	r3, [pc, #16]	; (8004978 <_fflush_r+0x54>)
 8004968:	429c      	cmp	r4, r3
 800496a:	d1ee      	bne.n	800494a <_fflush_r+0x26>
 800496c:	68ec      	ldr	r4, [r5, #12]
 800496e:	e7ec      	b.n	800494a <_fflush_r+0x26>
 8004970:	08005600 	.word	0x08005600
 8004974:	08005620 	.word	0x08005620
 8004978:	080055e0 	.word	0x080055e0

0800497c <std>:
 800497c:	2300      	movs	r3, #0
 800497e:	b510      	push	{r4, lr}
 8004980:	0004      	movs	r4, r0
 8004982:	6003      	str	r3, [r0, #0]
 8004984:	6043      	str	r3, [r0, #4]
 8004986:	6083      	str	r3, [r0, #8]
 8004988:	8181      	strh	r1, [r0, #12]
 800498a:	6643      	str	r3, [r0, #100]	; 0x64
 800498c:	81c2      	strh	r2, [r0, #14]
 800498e:	6103      	str	r3, [r0, #16]
 8004990:	6143      	str	r3, [r0, #20]
 8004992:	6183      	str	r3, [r0, #24]
 8004994:	0019      	movs	r1, r3
 8004996:	2208      	movs	r2, #8
 8004998:	305c      	adds	r0, #92	; 0x5c
 800499a:	f7ff fde1 	bl	8004560 <memset>
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <std+0x38>)
 80049a0:	6224      	str	r4, [r4, #32]
 80049a2:	6263      	str	r3, [r4, #36]	; 0x24
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <std+0x3c>)
 80049a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <std+0x40>)
 80049aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <std+0x44>)
 80049ae:	6323      	str	r3, [r4, #48]	; 0x30
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	080052dd 	.word	0x080052dd
 80049b8:	08005305 	.word	0x08005305
 80049bc:	0800533d 	.word	0x0800533d
 80049c0:	08005369 	.word	0x08005369

080049c4 <_cleanup_r>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4902      	ldr	r1, [pc, #8]	; (80049d0 <_cleanup_r+0xc>)
 80049c8:	f000 f88c 	bl	8004ae4 <_fwalk_reent>
 80049cc:	bd10      	pop	{r4, pc}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	08004925 	.word	0x08004925

080049d4 <__sfmoreglue>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	2568      	movs	r5, #104	; 0x68
 80049d8:	1e4a      	subs	r2, r1, #1
 80049da:	4355      	muls	r5, r2
 80049dc:	000e      	movs	r6, r1
 80049de:	0029      	movs	r1, r5
 80049e0:	3174      	adds	r1, #116	; 0x74
 80049e2:	f000 f957 	bl	8004c94 <_malloc_r>
 80049e6:	1e04      	subs	r4, r0, #0
 80049e8:	d008      	beq.n	80049fc <__sfmoreglue+0x28>
 80049ea:	2100      	movs	r1, #0
 80049ec:	002a      	movs	r2, r5
 80049ee:	6001      	str	r1, [r0, #0]
 80049f0:	6046      	str	r6, [r0, #4]
 80049f2:	300c      	adds	r0, #12
 80049f4:	60a0      	str	r0, [r4, #8]
 80049f6:	3268      	adds	r2, #104	; 0x68
 80049f8:	f7ff fdb2 	bl	8004560 <memset>
 80049fc:	0020      	movs	r0, r4
 80049fe:	bd70      	pop	{r4, r5, r6, pc}

08004a00 <__sinit>:
 8004a00:	6983      	ldr	r3, [r0, #24]
 8004a02:	b513      	push	{r0, r1, r4, lr}
 8004a04:	0004      	movs	r4, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d128      	bne.n	8004a5c <__sinit+0x5c>
 8004a0a:	6483      	str	r3, [r0, #72]	; 0x48
 8004a0c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004a0e:	6503      	str	r3, [r0, #80]	; 0x50
 8004a10:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <__sinit+0x60>)
 8004a12:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <__sinit+0x64>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6282      	str	r2, [r0, #40]	; 0x28
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	4298      	cmp	r0, r3
 8004a1c:	d101      	bne.n	8004a22 <__sinit+0x22>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	6183      	str	r3, [r0, #24]
 8004a22:	0020      	movs	r0, r4
 8004a24:	f000 f820 	bl	8004a68 <__sfp>
 8004a28:	6060      	str	r0, [r4, #4]
 8004a2a:	0020      	movs	r0, r4
 8004a2c:	f000 f81c 	bl	8004a68 <__sfp>
 8004a30:	60a0      	str	r0, [r4, #8]
 8004a32:	0020      	movs	r0, r4
 8004a34:	f000 f818 	bl	8004a68 <__sfp>
 8004a38:	2200      	movs	r2, #0
 8004a3a:	60e0      	str	r0, [r4, #12]
 8004a3c:	2104      	movs	r1, #4
 8004a3e:	6860      	ldr	r0, [r4, #4]
 8004a40:	f7ff ff9c 	bl	800497c <std>
 8004a44:	2201      	movs	r2, #1
 8004a46:	2109      	movs	r1, #9
 8004a48:	68a0      	ldr	r0, [r4, #8]
 8004a4a:	f7ff ff97 	bl	800497c <std>
 8004a4e:	2202      	movs	r2, #2
 8004a50:	2112      	movs	r1, #18
 8004a52:	68e0      	ldr	r0, [r4, #12]
 8004a54:	f7ff ff92 	bl	800497c <std>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	61a3      	str	r3, [r4, #24]
 8004a5c:	bd13      	pop	{r0, r1, r4, pc}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	080055dc 	.word	0x080055dc
 8004a64:	080049c5 	.word	0x080049c5

08004a68 <__sfp>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <__sfp+0x74>)
 8004a6c:	0007      	movs	r7, r0
 8004a6e:	681e      	ldr	r6, [r3, #0]
 8004a70:	69b3      	ldr	r3, [r6, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <__sfp+0x14>
 8004a76:	0030      	movs	r0, r6
 8004a78:	f7ff ffc2 	bl	8004a00 <__sinit>
 8004a7c:	3648      	adds	r6, #72	; 0x48
 8004a7e:	68b4      	ldr	r4, [r6, #8]
 8004a80:	6873      	ldr	r3, [r6, #4]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	d504      	bpl.n	8004a90 <__sfp+0x28>
 8004a86:	6833      	ldr	r3, [r6, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <__sfp+0x34>
 8004a8c:	6836      	ldr	r6, [r6, #0]
 8004a8e:	e7f6      	b.n	8004a7e <__sfp+0x16>
 8004a90:	220c      	movs	r2, #12
 8004a92:	5ea5      	ldrsh	r5, [r4, r2]
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	d00d      	beq.n	8004ab4 <__sfp+0x4c>
 8004a98:	3468      	adds	r4, #104	; 0x68
 8004a9a:	e7f2      	b.n	8004a82 <__sfp+0x1a>
 8004a9c:	2104      	movs	r1, #4
 8004a9e:	0038      	movs	r0, r7
 8004aa0:	f7ff ff98 	bl	80049d4 <__sfmoreglue>
 8004aa4:	6030      	str	r0, [r6, #0]
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d1f0      	bne.n	8004a8c <__sfp+0x24>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	0004      	movs	r4, r0
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	0020      	movs	r0, r4
 8004ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab4:	0020      	movs	r0, r4
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <__sfp+0x78>)
 8004ab8:	6665      	str	r5, [r4, #100]	; 0x64
 8004aba:	6025      	str	r5, [r4, #0]
 8004abc:	6065      	str	r5, [r4, #4]
 8004abe:	60a5      	str	r5, [r4, #8]
 8004ac0:	60e3      	str	r3, [r4, #12]
 8004ac2:	6125      	str	r5, [r4, #16]
 8004ac4:	6165      	str	r5, [r4, #20]
 8004ac6:	61a5      	str	r5, [r4, #24]
 8004ac8:	2208      	movs	r2, #8
 8004aca:	0029      	movs	r1, r5
 8004acc:	305c      	adds	r0, #92	; 0x5c
 8004ace:	f7ff fd47 	bl	8004560 <memset>
 8004ad2:	6365      	str	r5, [r4, #52]	; 0x34
 8004ad4:	63a5      	str	r5, [r4, #56]	; 0x38
 8004ad6:	64a5      	str	r5, [r4, #72]	; 0x48
 8004ad8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004ada:	e7e9      	b.n	8004ab0 <__sfp+0x48>
 8004adc:	080055dc 	.word	0x080055dc
 8004ae0:	ffff0001 	.word	0xffff0001

08004ae4 <_fwalk_reent>:
 8004ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ae6:	0004      	movs	r4, r0
 8004ae8:	0007      	movs	r7, r0
 8004aea:	2600      	movs	r6, #0
 8004aec:	9101      	str	r1, [sp, #4]
 8004aee:	3448      	adds	r4, #72	; 0x48
 8004af0:	2c00      	cmp	r4, #0
 8004af2:	d101      	bne.n	8004af8 <_fwalk_reent+0x14>
 8004af4:	0030      	movs	r0, r6
 8004af6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004af8:	6863      	ldr	r3, [r4, #4]
 8004afa:	68a5      	ldr	r5, [r4, #8]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	9b00      	ldr	r3, [sp, #0]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	d501      	bpl.n	8004b0a <_fwalk_reent+0x26>
 8004b06:	6824      	ldr	r4, [r4, #0]
 8004b08:	e7f2      	b.n	8004af0 <_fwalk_reent+0xc>
 8004b0a:	89ab      	ldrh	r3, [r5, #12]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d908      	bls.n	8004b22 <_fwalk_reent+0x3e>
 8004b10:	220e      	movs	r2, #14
 8004b12:	5eab      	ldrsh	r3, [r5, r2]
 8004b14:	3301      	adds	r3, #1
 8004b16:	d004      	beq.n	8004b22 <_fwalk_reent+0x3e>
 8004b18:	0029      	movs	r1, r5
 8004b1a:	0038      	movs	r0, r7
 8004b1c:	9b01      	ldr	r3, [sp, #4]
 8004b1e:	4798      	blx	r3
 8004b20:	4306      	orrs	r6, r0
 8004b22:	3568      	adds	r5, #104	; 0x68
 8004b24:	e7eb      	b.n	8004afe <_fwalk_reent+0x1a>
	...

08004b28 <__swhatbuf_r>:
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	000e      	movs	r6, r1
 8004b2c:	001d      	movs	r5, r3
 8004b2e:	230e      	movs	r3, #14
 8004b30:	5ec9      	ldrsh	r1, [r1, r3]
 8004b32:	b096      	sub	sp, #88	; 0x58
 8004b34:	0014      	movs	r4, r2
 8004b36:	2900      	cmp	r1, #0
 8004b38:	da07      	bge.n	8004b4a <__swhatbuf_r+0x22>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	89b3      	ldrh	r3, [r6, #12]
 8004b40:	061b      	lsls	r3, r3, #24
 8004b42:	d411      	bmi.n	8004b68 <__swhatbuf_r+0x40>
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	e00f      	b.n	8004b6a <__swhatbuf_r+0x42>
 8004b4a:	466a      	mov	r2, sp
 8004b4c:	f000 fc38 	bl	80053c0 <_fstat_r>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	dbf2      	blt.n	8004b3a <__swhatbuf_r+0x12>
 8004b54:	22f0      	movs	r2, #240	; 0xf0
 8004b56:	9b01      	ldr	r3, [sp, #4]
 8004b58:	0212      	lsls	r2, r2, #8
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <__swhatbuf_r+0x4c>)
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	425a      	negs	r2, r3
 8004b62:	4153      	adcs	r3, r2
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	e7ed      	b.n	8004b44 <__swhatbuf_r+0x1c>
 8004b68:	2340      	movs	r3, #64	; 0x40
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	b016      	add	sp, #88	; 0x58
 8004b70:	bd70      	pop	{r4, r5, r6, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	ffffe000 	.word	0xffffe000

08004b78 <__smakebuf_r>:
 8004b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b7a:	2602      	movs	r6, #2
 8004b7c:	898b      	ldrh	r3, [r1, #12]
 8004b7e:	0005      	movs	r5, r0
 8004b80:	000c      	movs	r4, r1
 8004b82:	4233      	tst	r3, r6
 8004b84:	d006      	beq.n	8004b94 <__smakebuf_r+0x1c>
 8004b86:	0023      	movs	r3, r4
 8004b88:	3347      	adds	r3, #71	; 0x47
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	2301      	movs	r3, #1
 8004b90:	6163      	str	r3, [r4, #20]
 8004b92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004b94:	ab01      	add	r3, sp, #4
 8004b96:	466a      	mov	r2, sp
 8004b98:	f7ff ffc6 	bl	8004b28 <__swhatbuf_r>
 8004b9c:	9900      	ldr	r1, [sp, #0]
 8004b9e:	0007      	movs	r7, r0
 8004ba0:	0028      	movs	r0, r5
 8004ba2:	f000 f877 	bl	8004c94 <_malloc_r>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d108      	bne.n	8004bbc <__smakebuf_r+0x44>
 8004baa:	220c      	movs	r2, #12
 8004bac:	5ea3      	ldrsh	r3, [r4, r2]
 8004bae:	059a      	lsls	r2, r3, #22
 8004bb0:	d4ef      	bmi.n	8004b92 <__smakebuf_r+0x1a>
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	4393      	bics	r3, r2
 8004bb6:	431e      	orrs	r6, r3
 8004bb8:	81a6      	strh	r6, [r4, #12]
 8004bba:	e7e4      	b.n	8004b86 <__smakebuf_r+0xe>
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <__smakebuf_r+0x84>)
 8004bbe:	62ab      	str	r3, [r5, #40]	; 0x28
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	89a2      	ldrh	r2, [r4, #12]
 8004bc4:	6020      	str	r0, [r4, #0]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	9b00      	ldr	r3, [sp, #0]
 8004bcc:	6120      	str	r0, [r4, #16]
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	9b01      	ldr	r3, [sp, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00d      	beq.n	8004bf2 <__smakebuf_r+0x7a>
 8004bd6:	230e      	movs	r3, #14
 8004bd8:	5ee1      	ldrsh	r1, [r4, r3]
 8004bda:	0028      	movs	r0, r5
 8004bdc:	f000 fc02 	bl	80053e4 <_isatty_r>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d006      	beq.n	8004bf2 <__smakebuf_r+0x7a>
 8004be4:	2203      	movs	r2, #3
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	4393      	bics	r3, r2
 8004bea:	001a      	movs	r2, r3
 8004bec:	2301      	movs	r3, #1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	81a3      	strh	r3, [r4, #12]
 8004bf2:	89a0      	ldrh	r0, [r4, #12]
 8004bf4:	4338      	orrs	r0, r7
 8004bf6:	81a0      	strh	r0, [r4, #12]
 8004bf8:	e7cb      	b.n	8004b92 <__smakebuf_r+0x1a>
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	080049c5 	.word	0x080049c5

08004c00 <_free_r>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	0005      	movs	r5, r0
 8004c04:	2900      	cmp	r1, #0
 8004c06:	d010      	beq.n	8004c2a <_free_r+0x2a>
 8004c08:	1f0c      	subs	r4, r1, #4
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	da00      	bge.n	8004c12 <_free_r+0x12>
 8004c10:	18e4      	adds	r4, r4, r3
 8004c12:	0028      	movs	r0, r5
 8004c14:	f000 fc17 	bl	8005446 <__malloc_lock>
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <_free_r+0x90>)
 8004c1a:	6813      	ldr	r3, [r2, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <_free_r+0x2c>
 8004c20:	6063      	str	r3, [r4, #4]
 8004c22:	6014      	str	r4, [r2, #0]
 8004c24:	0028      	movs	r0, r5
 8004c26:	f000 fc0f 	bl	8005448 <__malloc_unlock>
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	d909      	bls.n	8004c44 <_free_r+0x44>
 8004c30:	6821      	ldr	r1, [r4, #0]
 8004c32:	1860      	adds	r0, r4, r1
 8004c34:	4283      	cmp	r3, r0
 8004c36:	d1f3      	bne.n	8004c20 <_free_r+0x20>
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	1841      	adds	r1, r0, r1
 8004c3e:	6021      	str	r1, [r4, #0]
 8004c40:	e7ee      	b.n	8004c20 <_free_r+0x20>
 8004c42:	0013      	movs	r3, r2
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	2a00      	cmp	r2, #0
 8004c48:	d001      	beq.n	8004c4e <_free_r+0x4e>
 8004c4a:	42a2      	cmp	r2, r4
 8004c4c:	d9f9      	bls.n	8004c42 <_free_r+0x42>
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	1858      	adds	r0, r3, r1
 8004c52:	42a0      	cmp	r0, r4
 8004c54:	d10b      	bne.n	8004c6e <_free_r+0x6e>
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	1809      	adds	r1, r1, r0
 8004c5a:	1858      	adds	r0, r3, r1
 8004c5c:	6019      	str	r1, [r3, #0]
 8004c5e:	4282      	cmp	r2, r0
 8004c60:	d1e0      	bne.n	8004c24 <_free_r+0x24>
 8004c62:	6810      	ldr	r0, [r2, #0]
 8004c64:	6852      	ldr	r2, [r2, #4]
 8004c66:	1841      	adds	r1, r0, r1
 8004c68:	6019      	str	r1, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	e7da      	b.n	8004c24 <_free_r+0x24>
 8004c6e:	42a0      	cmp	r0, r4
 8004c70:	d902      	bls.n	8004c78 <_free_r+0x78>
 8004c72:	230c      	movs	r3, #12
 8004c74:	602b      	str	r3, [r5, #0]
 8004c76:	e7d5      	b.n	8004c24 <_free_r+0x24>
 8004c78:	6821      	ldr	r1, [r4, #0]
 8004c7a:	1860      	adds	r0, r4, r1
 8004c7c:	4282      	cmp	r2, r0
 8004c7e:	d103      	bne.n	8004c88 <_free_r+0x88>
 8004c80:	6810      	ldr	r0, [r2, #0]
 8004c82:	6852      	ldr	r2, [r2, #4]
 8004c84:	1841      	adds	r1, r0, r1
 8004c86:	6021      	str	r1, [r4, #0]
 8004c88:	6062      	str	r2, [r4, #4]
 8004c8a:	605c      	str	r4, [r3, #4]
 8004c8c:	e7ca      	b.n	8004c24 <_free_r+0x24>
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	200000a0 	.word	0x200000a0

08004c94 <_malloc_r>:
 8004c94:	2303      	movs	r3, #3
 8004c96:	b570      	push	{r4, r5, r6, lr}
 8004c98:	1ccd      	adds	r5, r1, #3
 8004c9a:	439d      	bics	r5, r3
 8004c9c:	3508      	adds	r5, #8
 8004c9e:	0006      	movs	r6, r0
 8004ca0:	2d0c      	cmp	r5, #12
 8004ca2:	d21e      	bcs.n	8004ce2 <_malloc_r+0x4e>
 8004ca4:	250c      	movs	r5, #12
 8004ca6:	42a9      	cmp	r1, r5
 8004ca8:	d81d      	bhi.n	8004ce6 <_malloc_r+0x52>
 8004caa:	0030      	movs	r0, r6
 8004cac:	f000 fbcb 	bl	8005446 <__malloc_lock>
 8004cb0:	4a25      	ldr	r2, [pc, #148]	; (8004d48 <_malloc_r+0xb4>)
 8004cb2:	6814      	ldr	r4, [r2, #0]
 8004cb4:	0021      	movs	r1, r4
 8004cb6:	2900      	cmp	r1, #0
 8004cb8:	d119      	bne.n	8004cee <_malloc_r+0x5a>
 8004cba:	4c24      	ldr	r4, [pc, #144]	; (8004d4c <_malloc_r+0xb8>)
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <_malloc_r+0x36>
 8004cc2:	0030      	movs	r0, r6
 8004cc4:	f000 faf8 	bl	80052b8 <_sbrk_r>
 8004cc8:	6020      	str	r0, [r4, #0]
 8004cca:	0029      	movs	r1, r5
 8004ccc:	0030      	movs	r0, r6
 8004cce:	f000 faf3 	bl	80052b8 <_sbrk_r>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	d12b      	bne.n	8004d2e <_malloc_r+0x9a>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	0030      	movs	r0, r6
 8004cda:	6033      	str	r3, [r6, #0]
 8004cdc:	f000 fbb4 	bl	8005448 <__malloc_unlock>
 8004ce0:	e003      	b.n	8004cea <_malloc_r+0x56>
 8004ce2:	2d00      	cmp	r5, #0
 8004ce4:	dadf      	bge.n	8004ca6 <_malloc_r+0x12>
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	6033      	str	r3, [r6, #0]
 8004cea:	2000      	movs	r0, #0
 8004cec:	bd70      	pop	{r4, r5, r6, pc}
 8004cee:	680b      	ldr	r3, [r1, #0]
 8004cf0:	1b5b      	subs	r3, r3, r5
 8004cf2:	d419      	bmi.n	8004d28 <_malloc_r+0x94>
 8004cf4:	2b0b      	cmp	r3, #11
 8004cf6:	d903      	bls.n	8004d00 <_malloc_r+0x6c>
 8004cf8:	600b      	str	r3, [r1, #0]
 8004cfa:	18cc      	adds	r4, r1, r3
 8004cfc:	6025      	str	r5, [r4, #0]
 8004cfe:	e003      	b.n	8004d08 <_malloc_r+0x74>
 8004d00:	684b      	ldr	r3, [r1, #4]
 8004d02:	428c      	cmp	r4, r1
 8004d04:	d10d      	bne.n	8004d22 <_malloc_r+0x8e>
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	0030      	movs	r0, r6
 8004d0a:	f000 fb9d 	bl	8005448 <__malloc_unlock>
 8004d0e:	0020      	movs	r0, r4
 8004d10:	2207      	movs	r2, #7
 8004d12:	300b      	adds	r0, #11
 8004d14:	1d23      	adds	r3, r4, #4
 8004d16:	4390      	bics	r0, r2
 8004d18:	1ac3      	subs	r3, r0, r3
 8004d1a:	d0e7      	beq.n	8004cec <_malloc_r+0x58>
 8004d1c:	425a      	negs	r2, r3
 8004d1e:	50e2      	str	r2, [r4, r3]
 8004d20:	e7e4      	b.n	8004cec <_malloc_r+0x58>
 8004d22:	6063      	str	r3, [r4, #4]
 8004d24:	000c      	movs	r4, r1
 8004d26:	e7ef      	b.n	8004d08 <_malloc_r+0x74>
 8004d28:	000c      	movs	r4, r1
 8004d2a:	6849      	ldr	r1, [r1, #4]
 8004d2c:	e7c3      	b.n	8004cb6 <_malloc_r+0x22>
 8004d2e:	2303      	movs	r3, #3
 8004d30:	1cc4      	adds	r4, r0, #3
 8004d32:	439c      	bics	r4, r3
 8004d34:	42a0      	cmp	r0, r4
 8004d36:	d0e1      	beq.n	8004cfc <_malloc_r+0x68>
 8004d38:	1a21      	subs	r1, r4, r0
 8004d3a:	0030      	movs	r0, r6
 8004d3c:	f000 fabc 	bl	80052b8 <_sbrk_r>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	d1db      	bne.n	8004cfc <_malloc_r+0x68>
 8004d44:	e7c7      	b.n	8004cd6 <_malloc_r+0x42>
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	200000a0 	.word	0x200000a0
 8004d4c:	200000a4 	.word	0x200000a4

08004d50 <__sfputc_r>:
 8004d50:	6893      	ldr	r3, [r2, #8]
 8004d52:	b510      	push	{r4, lr}
 8004d54:	3b01      	subs	r3, #1
 8004d56:	6093      	str	r3, [r2, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	da04      	bge.n	8004d66 <__sfputc_r+0x16>
 8004d5c:	6994      	ldr	r4, [r2, #24]
 8004d5e:	42a3      	cmp	r3, r4
 8004d60:	db07      	blt.n	8004d72 <__sfputc_r+0x22>
 8004d62:	290a      	cmp	r1, #10
 8004d64:	d005      	beq.n	8004d72 <__sfputc_r+0x22>
 8004d66:	6813      	ldr	r3, [r2, #0]
 8004d68:	1c58      	adds	r0, r3, #1
 8004d6a:	6010      	str	r0, [r2, #0]
 8004d6c:	7019      	strb	r1, [r3, #0]
 8004d6e:	0008      	movs	r0, r1
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	f7ff fc81 	bl	8004678 <__swbuf_r>
 8004d76:	0001      	movs	r1, r0
 8004d78:	e7f9      	b.n	8004d6e <__sfputc_r+0x1e>

08004d7a <__sfputs_r>:
 8004d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7c:	0006      	movs	r6, r0
 8004d7e:	000f      	movs	r7, r1
 8004d80:	0014      	movs	r4, r2
 8004d82:	18d5      	adds	r5, r2, r3
 8004d84:	42ac      	cmp	r4, r5
 8004d86:	d101      	bne.n	8004d8c <__sfputs_r+0x12>
 8004d88:	2000      	movs	r0, #0
 8004d8a:	e007      	b.n	8004d9c <__sfputs_r+0x22>
 8004d8c:	7821      	ldrb	r1, [r4, #0]
 8004d8e:	003a      	movs	r2, r7
 8004d90:	0030      	movs	r0, r6
 8004d92:	f7ff ffdd 	bl	8004d50 <__sfputc_r>
 8004d96:	3401      	adds	r4, #1
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d1f3      	bne.n	8004d84 <__sfputs_r+0xa>
 8004d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004da0 <_vfiprintf_r>:
 8004da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da2:	b0a1      	sub	sp, #132	; 0x84
 8004da4:	9003      	str	r0, [sp, #12]
 8004da6:	000f      	movs	r7, r1
 8004da8:	0016      	movs	r6, r2
 8004daa:	001d      	movs	r5, r3
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d005      	beq.n	8004dbc <_vfiprintf_r+0x1c>
 8004db0:	6983      	ldr	r3, [r0, #24]
 8004db2:	9305      	str	r3, [sp, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <_vfiprintf_r+0x1c>
 8004db8:	f7ff fe22 	bl	8004a00 <__sinit>
 8004dbc:	4b7b      	ldr	r3, [pc, #492]	; (8004fac <_vfiprintf_r+0x20c>)
 8004dbe:	429f      	cmp	r7, r3
 8004dc0:	d15c      	bne.n	8004e7c <_vfiprintf_r+0xdc>
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	685f      	ldr	r7, [r3, #4]
 8004dc6:	89bb      	ldrh	r3, [r7, #12]
 8004dc8:	071b      	lsls	r3, r3, #28
 8004dca:	d563      	bpl.n	8004e94 <_vfiprintf_r+0xf4>
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d060      	beq.n	8004e94 <_vfiprintf_r+0xf4>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	ac08      	add	r4, sp, #32
 8004dd6:	6163      	str	r3, [r4, #20]
 8004dd8:	3320      	adds	r3, #32
 8004dda:	7663      	strb	r3, [r4, #25]
 8004ddc:	3310      	adds	r3, #16
 8004dde:	76a3      	strb	r3, [r4, #26]
 8004de0:	9507      	str	r5, [sp, #28]
 8004de2:	0035      	movs	r5, r6
 8004de4:	782b      	ldrb	r3, [r5, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <_vfiprintf_r+0x4e>
 8004dea:	2b25      	cmp	r3, #37	; 0x25
 8004dec:	d15c      	bne.n	8004ea8 <_vfiprintf_r+0x108>
 8004dee:	1bab      	subs	r3, r5, r6
 8004df0:	9305      	str	r3, [sp, #20]
 8004df2:	d00c      	beq.n	8004e0e <_vfiprintf_r+0x6e>
 8004df4:	0032      	movs	r2, r6
 8004df6:	0039      	movs	r1, r7
 8004df8:	9803      	ldr	r0, [sp, #12]
 8004dfa:	f7ff ffbe 	bl	8004d7a <__sfputs_r>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d100      	bne.n	8004e04 <_vfiprintf_r+0x64>
 8004e02:	e0c4      	b.n	8004f8e <_vfiprintf_r+0x1ee>
 8004e04:	6962      	ldr	r2, [r4, #20]
 8004e06:	9b05      	ldr	r3, [sp, #20]
 8004e08:	4694      	mov	ip, r2
 8004e0a:	4463      	add	r3, ip
 8004e0c:	6163      	str	r3, [r4, #20]
 8004e0e:	782b      	ldrb	r3, [r5, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d100      	bne.n	8004e16 <_vfiprintf_r+0x76>
 8004e14:	e0bb      	b.n	8004f8e <_vfiprintf_r+0x1ee>
 8004e16:	2201      	movs	r2, #1
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4252      	negs	r2, r2
 8004e1c:	6062      	str	r2, [r4, #4]
 8004e1e:	a904      	add	r1, sp, #16
 8004e20:	3254      	adds	r2, #84	; 0x54
 8004e22:	1852      	adds	r2, r2, r1
 8004e24:	1c6e      	adds	r6, r5, #1
 8004e26:	6023      	str	r3, [r4, #0]
 8004e28:	60e3      	str	r3, [r4, #12]
 8004e2a:	60a3      	str	r3, [r4, #8]
 8004e2c:	7013      	strb	r3, [r2, #0]
 8004e2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e30:	7831      	ldrb	r1, [r6, #0]
 8004e32:	2205      	movs	r2, #5
 8004e34:	485e      	ldr	r0, [pc, #376]	; (8004fb0 <_vfiprintf_r+0x210>)
 8004e36:	f000 fafb 	bl	8005430 <memchr>
 8004e3a:	1c75      	adds	r5, r6, #1
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d135      	bne.n	8004eac <_vfiprintf_r+0x10c>
 8004e40:	6822      	ldr	r2, [r4, #0]
 8004e42:	06d3      	lsls	r3, r2, #27
 8004e44:	d504      	bpl.n	8004e50 <_vfiprintf_r+0xb0>
 8004e46:	2353      	movs	r3, #83	; 0x53
 8004e48:	a904      	add	r1, sp, #16
 8004e4a:	185b      	adds	r3, r3, r1
 8004e4c:	2120      	movs	r1, #32
 8004e4e:	7019      	strb	r1, [r3, #0]
 8004e50:	0713      	lsls	r3, r2, #28
 8004e52:	d504      	bpl.n	8004e5e <_vfiprintf_r+0xbe>
 8004e54:	2353      	movs	r3, #83	; 0x53
 8004e56:	a904      	add	r1, sp, #16
 8004e58:	185b      	adds	r3, r3, r1
 8004e5a:	212b      	movs	r1, #43	; 0x2b
 8004e5c:	7019      	strb	r1, [r3, #0]
 8004e5e:	7833      	ldrb	r3, [r6, #0]
 8004e60:	2b2a      	cmp	r3, #42	; 0x2a
 8004e62:	d02c      	beq.n	8004ebe <_vfiprintf_r+0x11e>
 8004e64:	0035      	movs	r5, r6
 8004e66:	2100      	movs	r1, #0
 8004e68:	200a      	movs	r0, #10
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	782a      	ldrb	r2, [r5, #0]
 8004e6e:	1c6e      	adds	r6, r5, #1
 8004e70:	3a30      	subs	r2, #48	; 0x30
 8004e72:	2a09      	cmp	r2, #9
 8004e74:	d964      	bls.n	8004f40 <_vfiprintf_r+0x1a0>
 8004e76:	2900      	cmp	r1, #0
 8004e78:	d02e      	beq.n	8004ed8 <_vfiprintf_r+0x138>
 8004e7a:	e026      	b.n	8004eca <_vfiprintf_r+0x12a>
 8004e7c:	4b4d      	ldr	r3, [pc, #308]	; (8004fb4 <_vfiprintf_r+0x214>)
 8004e7e:	429f      	cmp	r7, r3
 8004e80:	d102      	bne.n	8004e88 <_vfiprintf_r+0xe8>
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	689f      	ldr	r7, [r3, #8]
 8004e86:	e79e      	b.n	8004dc6 <_vfiprintf_r+0x26>
 8004e88:	4b4b      	ldr	r3, [pc, #300]	; (8004fb8 <_vfiprintf_r+0x218>)
 8004e8a:	429f      	cmp	r7, r3
 8004e8c:	d19b      	bne.n	8004dc6 <_vfiprintf_r+0x26>
 8004e8e:	9b03      	ldr	r3, [sp, #12]
 8004e90:	68df      	ldr	r7, [r3, #12]
 8004e92:	e798      	b.n	8004dc6 <_vfiprintf_r+0x26>
 8004e94:	0039      	movs	r1, r7
 8004e96:	9803      	ldr	r0, [sp, #12]
 8004e98:	f7ff fc44 	bl	8004724 <__swsetup_r>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d098      	beq.n	8004dd2 <_vfiprintf_r+0x32>
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	4240      	negs	r0, r0
 8004ea4:	b021      	add	sp, #132	; 0x84
 8004ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea8:	3501      	adds	r5, #1
 8004eaa:	e79b      	b.n	8004de4 <_vfiprintf_r+0x44>
 8004eac:	4b40      	ldr	r3, [pc, #256]	; (8004fb0 <_vfiprintf_r+0x210>)
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	1ac0      	subs	r0, r0, r3
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4083      	lsls	r3, r0
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	002e      	movs	r6, r5
 8004ebc:	e7b8      	b.n	8004e30 <_vfiprintf_r+0x90>
 8004ebe:	9b07      	ldr	r3, [sp, #28]
 8004ec0:	1d19      	adds	r1, r3, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	9107      	str	r1, [sp, #28]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	db01      	blt.n	8004ece <_vfiprintf_r+0x12e>
 8004eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ecc:	e004      	b.n	8004ed8 <_vfiprintf_r+0x138>
 8004ece:	425b      	negs	r3, r3
 8004ed0:	60e3      	str	r3, [r4, #12]
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	782b      	ldrb	r3, [r5, #0]
 8004eda:	2b2e      	cmp	r3, #46	; 0x2e
 8004edc:	d10a      	bne.n	8004ef4 <_vfiprintf_r+0x154>
 8004ede:	786b      	ldrb	r3, [r5, #1]
 8004ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee2:	d135      	bne.n	8004f50 <_vfiprintf_r+0x1b0>
 8004ee4:	9b07      	ldr	r3, [sp, #28]
 8004ee6:	3502      	adds	r5, #2
 8004ee8:	1d1a      	adds	r2, r3, #4
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	9207      	str	r2, [sp, #28]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	db2b      	blt.n	8004f4a <_vfiprintf_r+0x1aa>
 8004ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef4:	4e31      	ldr	r6, [pc, #196]	; (8004fbc <_vfiprintf_r+0x21c>)
 8004ef6:	7829      	ldrb	r1, [r5, #0]
 8004ef8:	2203      	movs	r2, #3
 8004efa:	0030      	movs	r0, r6
 8004efc:	f000 fa98 	bl	8005430 <memchr>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d006      	beq.n	8004f12 <_vfiprintf_r+0x172>
 8004f04:	2340      	movs	r3, #64	; 0x40
 8004f06:	1b80      	subs	r0, r0, r6
 8004f08:	4083      	lsls	r3, r0
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	3501      	adds	r5, #1
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	7829      	ldrb	r1, [r5, #0]
 8004f14:	2206      	movs	r2, #6
 8004f16:	482a      	ldr	r0, [pc, #168]	; (8004fc0 <_vfiprintf_r+0x220>)
 8004f18:	1c6e      	adds	r6, r5, #1
 8004f1a:	7621      	strb	r1, [r4, #24]
 8004f1c:	f000 fa88 	bl	8005430 <memchr>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d03a      	beq.n	8004f9a <_vfiprintf_r+0x1fa>
 8004f24:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <_vfiprintf_r+0x224>)
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d125      	bne.n	8004f76 <_vfiprintf_r+0x1d6>
 8004f2a:	2207      	movs	r2, #7
 8004f2c:	9b07      	ldr	r3, [sp, #28]
 8004f2e:	3307      	adds	r3, #7
 8004f30:	4393      	bics	r3, r2
 8004f32:	3308      	adds	r3, #8
 8004f34:	9307      	str	r3, [sp, #28]
 8004f36:	6963      	ldr	r3, [r4, #20]
 8004f38:	9a04      	ldr	r2, [sp, #16]
 8004f3a:	189b      	adds	r3, r3, r2
 8004f3c:	6163      	str	r3, [r4, #20]
 8004f3e:	e750      	b.n	8004de2 <_vfiprintf_r+0x42>
 8004f40:	4343      	muls	r3, r0
 8004f42:	2101      	movs	r1, #1
 8004f44:	189b      	adds	r3, r3, r2
 8004f46:	0035      	movs	r5, r6
 8004f48:	e790      	b.n	8004e6c <_vfiprintf_r+0xcc>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	425b      	negs	r3, r3
 8004f4e:	e7d0      	b.n	8004ef2 <_vfiprintf_r+0x152>
 8004f50:	2300      	movs	r3, #0
 8004f52:	200a      	movs	r0, #10
 8004f54:	001a      	movs	r2, r3
 8004f56:	3501      	adds	r5, #1
 8004f58:	6063      	str	r3, [r4, #4]
 8004f5a:	7829      	ldrb	r1, [r5, #0]
 8004f5c:	1c6e      	adds	r6, r5, #1
 8004f5e:	3930      	subs	r1, #48	; 0x30
 8004f60:	2909      	cmp	r1, #9
 8004f62:	d903      	bls.n	8004f6c <_vfiprintf_r+0x1cc>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0c5      	beq.n	8004ef4 <_vfiprintf_r+0x154>
 8004f68:	9209      	str	r2, [sp, #36]	; 0x24
 8004f6a:	e7c3      	b.n	8004ef4 <_vfiprintf_r+0x154>
 8004f6c:	4342      	muls	r2, r0
 8004f6e:	2301      	movs	r3, #1
 8004f70:	1852      	adds	r2, r2, r1
 8004f72:	0035      	movs	r5, r6
 8004f74:	e7f1      	b.n	8004f5a <_vfiprintf_r+0x1ba>
 8004f76:	ab07      	add	r3, sp, #28
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	003a      	movs	r2, r7
 8004f7c:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <_vfiprintf_r+0x228>)
 8004f7e:	0021      	movs	r1, r4
 8004f80:	9803      	ldr	r0, [sp, #12]
 8004f82:	e000      	b.n	8004f86 <_vfiprintf_r+0x1e6>
 8004f84:	bf00      	nop
 8004f86:	9004      	str	r0, [sp, #16]
 8004f88:	9b04      	ldr	r3, [sp, #16]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	d1d3      	bne.n	8004f36 <_vfiprintf_r+0x196>
 8004f8e:	89bb      	ldrh	r3, [r7, #12]
 8004f90:	065b      	lsls	r3, r3, #25
 8004f92:	d500      	bpl.n	8004f96 <_vfiprintf_r+0x1f6>
 8004f94:	e784      	b.n	8004ea0 <_vfiprintf_r+0x100>
 8004f96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f98:	e784      	b.n	8004ea4 <_vfiprintf_r+0x104>
 8004f9a:	ab07      	add	r3, sp, #28
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	003a      	movs	r2, r7
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <_vfiprintf_r+0x228>)
 8004fa2:	0021      	movs	r1, r4
 8004fa4:	9803      	ldr	r0, [sp, #12]
 8004fa6:	f000 f87f 	bl	80050a8 <_printf_i>
 8004faa:	e7ec      	b.n	8004f86 <_vfiprintf_r+0x1e6>
 8004fac:	08005600 	.word	0x08005600
 8004fb0:	08005640 	.word	0x08005640
 8004fb4:	08005620 	.word	0x08005620
 8004fb8:	080055e0 	.word	0x080055e0
 8004fbc:	08005646 	.word	0x08005646
 8004fc0:	0800564a 	.word	0x0800564a
 8004fc4:	00000000 	.word	0x00000000
 8004fc8:	08004d7b 	.word	0x08004d7b

08004fcc <_printf_common>:
 8004fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fce:	0015      	movs	r5, r2
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	688a      	ldr	r2, [r1, #8]
 8004fd4:	690b      	ldr	r3, [r1, #16]
 8004fd6:	9000      	str	r0, [sp, #0]
 8004fd8:	000c      	movs	r4, r1
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	da00      	bge.n	8004fe0 <_printf_common+0x14>
 8004fde:	0013      	movs	r3, r2
 8004fe0:	0022      	movs	r2, r4
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	3243      	adds	r2, #67	; 0x43
 8004fe6:	7812      	ldrb	r2, [r2, #0]
 8004fe8:	2a00      	cmp	r2, #0
 8004fea:	d001      	beq.n	8004ff0 <_printf_common+0x24>
 8004fec:	3301      	adds	r3, #1
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	069b      	lsls	r3, r3, #26
 8004ff4:	d502      	bpl.n	8004ffc <_printf_common+0x30>
 8004ff6:	682b      	ldr	r3, [r5, #0]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	602b      	str	r3, [r5, #0]
 8004ffc:	2706      	movs	r7, #6
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	401f      	ands	r7, r3
 8005002:	d027      	beq.n	8005054 <_printf_common+0x88>
 8005004:	0023      	movs	r3, r4
 8005006:	3343      	adds	r3, #67	; 0x43
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	1e5a      	subs	r2, r3, #1
 800500c:	4193      	sbcs	r3, r2
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	0692      	lsls	r2, r2, #26
 8005012:	d430      	bmi.n	8005076 <_printf_common+0xaa>
 8005014:	0022      	movs	r2, r4
 8005016:	9901      	ldr	r1, [sp, #4]
 8005018:	3243      	adds	r2, #67	; 0x43
 800501a:	9800      	ldr	r0, [sp, #0]
 800501c:	9e08      	ldr	r6, [sp, #32]
 800501e:	47b0      	blx	r6
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d025      	beq.n	8005070 <_printf_common+0xa4>
 8005024:	2306      	movs	r3, #6
 8005026:	6820      	ldr	r0, [r4, #0]
 8005028:	682a      	ldr	r2, [r5, #0]
 800502a:	68e1      	ldr	r1, [r4, #12]
 800502c:	4003      	ands	r3, r0
 800502e:	2500      	movs	r5, #0
 8005030:	2b04      	cmp	r3, #4
 8005032:	d103      	bne.n	800503c <_printf_common+0x70>
 8005034:	1a8d      	subs	r5, r1, r2
 8005036:	43eb      	mvns	r3, r5
 8005038:	17db      	asrs	r3, r3, #31
 800503a:	401d      	ands	r5, r3
 800503c:	68a3      	ldr	r3, [r4, #8]
 800503e:	6922      	ldr	r2, [r4, #16]
 8005040:	4293      	cmp	r3, r2
 8005042:	dd01      	ble.n	8005048 <_printf_common+0x7c>
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	18ed      	adds	r5, r5, r3
 8005048:	2700      	movs	r7, #0
 800504a:	42bd      	cmp	r5, r7
 800504c:	d120      	bne.n	8005090 <_printf_common+0xc4>
 800504e:	2000      	movs	r0, #0
 8005050:	e010      	b.n	8005074 <_printf_common+0xa8>
 8005052:	3701      	adds	r7, #1
 8005054:	68e3      	ldr	r3, [r4, #12]
 8005056:	682a      	ldr	r2, [r5, #0]
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	42bb      	cmp	r3, r7
 800505c:	ddd2      	ble.n	8005004 <_printf_common+0x38>
 800505e:	0022      	movs	r2, r4
 8005060:	2301      	movs	r3, #1
 8005062:	3219      	adds	r2, #25
 8005064:	9901      	ldr	r1, [sp, #4]
 8005066:	9800      	ldr	r0, [sp, #0]
 8005068:	9e08      	ldr	r6, [sp, #32]
 800506a:	47b0      	blx	r6
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d1f0      	bne.n	8005052 <_printf_common+0x86>
 8005070:	2001      	movs	r0, #1
 8005072:	4240      	negs	r0, r0
 8005074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005076:	2030      	movs	r0, #48	; 0x30
 8005078:	18e1      	adds	r1, r4, r3
 800507a:	3143      	adds	r1, #67	; 0x43
 800507c:	7008      	strb	r0, [r1, #0]
 800507e:	0021      	movs	r1, r4
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	3145      	adds	r1, #69	; 0x45
 8005084:	7809      	ldrb	r1, [r1, #0]
 8005086:	18a2      	adds	r2, r4, r2
 8005088:	3243      	adds	r2, #67	; 0x43
 800508a:	3302      	adds	r3, #2
 800508c:	7011      	strb	r1, [r2, #0]
 800508e:	e7c1      	b.n	8005014 <_printf_common+0x48>
 8005090:	0022      	movs	r2, r4
 8005092:	2301      	movs	r3, #1
 8005094:	321a      	adds	r2, #26
 8005096:	9901      	ldr	r1, [sp, #4]
 8005098:	9800      	ldr	r0, [sp, #0]
 800509a:	9e08      	ldr	r6, [sp, #32]
 800509c:	47b0      	blx	r6
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	d0e6      	beq.n	8005070 <_printf_common+0xa4>
 80050a2:	3701      	adds	r7, #1
 80050a4:	e7d1      	b.n	800504a <_printf_common+0x7e>
	...

080050a8 <_printf_i>:
 80050a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	9204      	str	r2, [sp, #16]
 80050ae:	000a      	movs	r2, r1
 80050b0:	3243      	adds	r2, #67	; 0x43
 80050b2:	9305      	str	r3, [sp, #20]
 80050b4:	9003      	str	r0, [sp, #12]
 80050b6:	9202      	str	r2, [sp, #8]
 80050b8:	7e0a      	ldrb	r2, [r1, #24]
 80050ba:	000c      	movs	r4, r1
 80050bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050be:	2a6e      	cmp	r2, #110	; 0x6e
 80050c0:	d100      	bne.n	80050c4 <_printf_i+0x1c>
 80050c2:	e086      	b.n	80051d2 <_printf_i+0x12a>
 80050c4:	d81f      	bhi.n	8005106 <_printf_i+0x5e>
 80050c6:	2a63      	cmp	r2, #99	; 0x63
 80050c8:	d033      	beq.n	8005132 <_printf_i+0x8a>
 80050ca:	d808      	bhi.n	80050de <_printf_i+0x36>
 80050cc:	2a00      	cmp	r2, #0
 80050ce:	d100      	bne.n	80050d2 <_printf_i+0x2a>
 80050d0:	e08c      	b.n	80051ec <_printf_i+0x144>
 80050d2:	2a58      	cmp	r2, #88	; 0x58
 80050d4:	d04d      	beq.n	8005172 <_printf_i+0xca>
 80050d6:	0025      	movs	r5, r4
 80050d8:	3542      	adds	r5, #66	; 0x42
 80050da:	702a      	strb	r2, [r5, #0]
 80050dc:	e030      	b.n	8005140 <_printf_i+0x98>
 80050de:	2a64      	cmp	r2, #100	; 0x64
 80050e0:	d001      	beq.n	80050e6 <_printf_i+0x3e>
 80050e2:	2a69      	cmp	r2, #105	; 0x69
 80050e4:	d1f7      	bne.n	80050d6 <_printf_i+0x2e>
 80050e6:	6819      	ldr	r1, [r3, #0]
 80050e8:	6825      	ldr	r5, [r4, #0]
 80050ea:	1d0a      	adds	r2, r1, #4
 80050ec:	0628      	lsls	r0, r5, #24
 80050ee:	d529      	bpl.n	8005144 <_printf_i+0x9c>
 80050f0:	6808      	ldr	r0, [r1, #0]
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	2800      	cmp	r0, #0
 80050f6:	da03      	bge.n	8005100 <_printf_i+0x58>
 80050f8:	232d      	movs	r3, #45	; 0x2d
 80050fa:	9a02      	ldr	r2, [sp, #8]
 80050fc:	4240      	negs	r0, r0
 80050fe:	7013      	strb	r3, [r2, #0]
 8005100:	4e6b      	ldr	r6, [pc, #428]	; (80052b0 <_printf_i+0x208>)
 8005102:	270a      	movs	r7, #10
 8005104:	e04f      	b.n	80051a6 <_printf_i+0xfe>
 8005106:	2a73      	cmp	r2, #115	; 0x73
 8005108:	d074      	beq.n	80051f4 <_printf_i+0x14c>
 800510a:	d808      	bhi.n	800511e <_printf_i+0x76>
 800510c:	2a6f      	cmp	r2, #111	; 0x6f
 800510e:	d01f      	beq.n	8005150 <_printf_i+0xa8>
 8005110:	2a70      	cmp	r2, #112	; 0x70
 8005112:	d1e0      	bne.n	80050d6 <_printf_i+0x2e>
 8005114:	2220      	movs	r2, #32
 8005116:	6809      	ldr	r1, [r1, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	6022      	str	r2, [r4, #0]
 800511c:	e003      	b.n	8005126 <_printf_i+0x7e>
 800511e:	2a75      	cmp	r2, #117	; 0x75
 8005120:	d016      	beq.n	8005150 <_printf_i+0xa8>
 8005122:	2a78      	cmp	r2, #120	; 0x78
 8005124:	d1d7      	bne.n	80050d6 <_printf_i+0x2e>
 8005126:	0022      	movs	r2, r4
 8005128:	2178      	movs	r1, #120	; 0x78
 800512a:	3245      	adds	r2, #69	; 0x45
 800512c:	7011      	strb	r1, [r2, #0]
 800512e:	4e61      	ldr	r6, [pc, #388]	; (80052b4 <_printf_i+0x20c>)
 8005130:	e022      	b.n	8005178 <_printf_i+0xd0>
 8005132:	0025      	movs	r5, r4
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	3542      	adds	r5, #66	; 0x42
 8005138:	1d11      	adds	r1, r2, #4
 800513a:	6019      	str	r1, [r3, #0]
 800513c:	6813      	ldr	r3, [r2, #0]
 800513e:	702b      	strb	r3, [r5, #0]
 8005140:	2301      	movs	r3, #1
 8005142:	e065      	b.n	8005210 <_printf_i+0x168>
 8005144:	6808      	ldr	r0, [r1, #0]
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	0669      	lsls	r1, r5, #25
 800514a:	d5d3      	bpl.n	80050f4 <_printf_i+0x4c>
 800514c:	b200      	sxth	r0, r0
 800514e:	e7d1      	b.n	80050f4 <_printf_i+0x4c>
 8005150:	6819      	ldr	r1, [r3, #0]
 8005152:	6825      	ldr	r5, [r4, #0]
 8005154:	1d08      	adds	r0, r1, #4
 8005156:	6018      	str	r0, [r3, #0]
 8005158:	6808      	ldr	r0, [r1, #0]
 800515a:	062e      	lsls	r6, r5, #24
 800515c:	d505      	bpl.n	800516a <_printf_i+0xc2>
 800515e:	4e54      	ldr	r6, [pc, #336]	; (80052b0 <_printf_i+0x208>)
 8005160:	2708      	movs	r7, #8
 8005162:	2a6f      	cmp	r2, #111	; 0x6f
 8005164:	d01b      	beq.n	800519e <_printf_i+0xf6>
 8005166:	270a      	movs	r7, #10
 8005168:	e019      	b.n	800519e <_printf_i+0xf6>
 800516a:	066d      	lsls	r5, r5, #25
 800516c:	d5f7      	bpl.n	800515e <_printf_i+0xb6>
 800516e:	b280      	uxth	r0, r0
 8005170:	e7f5      	b.n	800515e <_printf_i+0xb6>
 8005172:	3145      	adds	r1, #69	; 0x45
 8005174:	4e4e      	ldr	r6, [pc, #312]	; (80052b0 <_printf_i+0x208>)
 8005176:	700a      	strb	r2, [r1, #0]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	1d01      	adds	r1, r0, #4
 800517e:	6800      	ldr	r0, [r0, #0]
 8005180:	6019      	str	r1, [r3, #0]
 8005182:	0615      	lsls	r5, r2, #24
 8005184:	d521      	bpl.n	80051ca <_printf_i+0x122>
 8005186:	07d3      	lsls	r3, r2, #31
 8005188:	d502      	bpl.n	8005190 <_printf_i+0xe8>
 800518a:	2320      	movs	r3, #32
 800518c:	431a      	orrs	r2, r3
 800518e:	6022      	str	r2, [r4, #0]
 8005190:	2710      	movs	r7, #16
 8005192:	2800      	cmp	r0, #0
 8005194:	d103      	bne.n	800519e <_printf_i+0xf6>
 8005196:	2320      	movs	r3, #32
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	439a      	bics	r2, r3
 800519c:	6022      	str	r2, [r4, #0]
 800519e:	0023      	movs	r3, r4
 80051a0:	2200      	movs	r2, #0
 80051a2:	3343      	adds	r3, #67	; 0x43
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	db58      	blt.n	8005260 <_printf_i+0x1b8>
 80051ae:	2204      	movs	r2, #4
 80051b0:	6821      	ldr	r1, [r4, #0]
 80051b2:	4391      	bics	r1, r2
 80051b4:	6021      	str	r1, [r4, #0]
 80051b6:	2800      	cmp	r0, #0
 80051b8:	d154      	bne.n	8005264 <_printf_i+0x1bc>
 80051ba:	9d02      	ldr	r5, [sp, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05a      	beq.n	8005276 <_printf_i+0x1ce>
 80051c0:	0025      	movs	r5, r4
 80051c2:	7833      	ldrb	r3, [r6, #0]
 80051c4:	3542      	adds	r5, #66	; 0x42
 80051c6:	702b      	strb	r3, [r5, #0]
 80051c8:	e055      	b.n	8005276 <_printf_i+0x1ce>
 80051ca:	0655      	lsls	r5, r2, #25
 80051cc:	d5db      	bpl.n	8005186 <_printf_i+0xde>
 80051ce:	b280      	uxth	r0, r0
 80051d0:	e7d9      	b.n	8005186 <_printf_i+0xde>
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	680d      	ldr	r5, [r1, #0]
 80051d6:	1d10      	adds	r0, r2, #4
 80051d8:	6949      	ldr	r1, [r1, #20]
 80051da:	6018      	str	r0, [r3, #0]
 80051dc:	6813      	ldr	r3, [r2, #0]
 80051de:	062e      	lsls	r6, r5, #24
 80051e0:	d501      	bpl.n	80051e6 <_printf_i+0x13e>
 80051e2:	6019      	str	r1, [r3, #0]
 80051e4:	e002      	b.n	80051ec <_printf_i+0x144>
 80051e6:	066d      	lsls	r5, r5, #25
 80051e8:	d5fb      	bpl.n	80051e2 <_printf_i+0x13a>
 80051ea:	8019      	strh	r1, [r3, #0]
 80051ec:	2300      	movs	r3, #0
 80051ee:	9d02      	ldr	r5, [sp, #8]
 80051f0:	6123      	str	r3, [r4, #16]
 80051f2:	e04f      	b.n	8005294 <_printf_i+0x1ec>
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	1d11      	adds	r1, r2, #4
 80051f8:	6019      	str	r1, [r3, #0]
 80051fa:	6815      	ldr	r5, [r2, #0]
 80051fc:	2100      	movs	r1, #0
 80051fe:	6862      	ldr	r2, [r4, #4]
 8005200:	0028      	movs	r0, r5
 8005202:	f000 f915 	bl	8005430 <memchr>
 8005206:	2800      	cmp	r0, #0
 8005208:	d001      	beq.n	800520e <_printf_i+0x166>
 800520a:	1b40      	subs	r0, r0, r5
 800520c:	6060      	str	r0, [r4, #4]
 800520e:	6863      	ldr	r3, [r4, #4]
 8005210:	6123      	str	r3, [r4, #16]
 8005212:	2300      	movs	r3, #0
 8005214:	9a02      	ldr	r2, [sp, #8]
 8005216:	7013      	strb	r3, [r2, #0]
 8005218:	e03c      	b.n	8005294 <_printf_i+0x1ec>
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	002a      	movs	r2, r5
 800521e:	9904      	ldr	r1, [sp, #16]
 8005220:	9803      	ldr	r0, [sp, #12]
 8005222:	9d05      	ldr	r5, [sp, #20]
 8005224:	47a8      	blx	r5
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d03e      	beq.n	80052a8 <_printf_i+0x200>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	079b      	lsls	r3, r3, #30
 800522e:	d415      	bmi.n	800525c <_printf_i+0x1b4>
 8005230:	9b07      	ldr	r3, [sp, #28]
 8005232:	68e0      	ldr	r0, [r4, #12]
 8005234:	4298      	cmp	r0, r3
 8005236:	da39      	bge.n	80052ac <_printf_i+0x204>
 8005238:	0018      	movs	r0, r3
 800523a:	e037      	b.n	80052ac <_printf_i+0x204>
 800523c:	0022      	movs	r2, r4
 800523e:	2301      	movs	r3, #1
 8005240:	3219      	adds	r2, #25
 8005242:	9904      	ldr	r1, [sp, #16]
 8005244:	9803      	ldr	r0, [sp, #12]
 8005246:	9e05      	ldr	r6, [sp, #20]
 8005248:	47b0      	blx	r6
 800524a:	1c43      	adds	r3, r0, #1
 800524c:	d02c      	beq.n	80052a8 <_printf_i+0x200>
 800524e:	3501      	adds	r5, #1
 8005250:	68e3      	ldr	r3, [r4, #12]
 8005252:	9a07      	ldr	r2, [sp, #28]
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	42ab      	cmp	r3, r5
 8005258:	dcf0      	bgt.n	800523c <_printf_i+0x194>
 800525a:	e7e9      	b.n	8005230 <_printf_i+0x188>
 800525c:	2500      	movs	r5, #0
 800525e:	e7f7      	b.n	8005250 <_printf_i+0x1a8>
 8005260:	2800      	cmp	r0, #0
 8005262:	d0ad      	beq.n	80051c0 <_printf_i+0x118>
 8005264:	9d02      	ldr	r5, [sp, #8]
 8005266:	0039      	movs	r1, r7
 8005268:	f7fa ffde 	bl	8000228 <__aeabi_uidivmod>
 800526c:	5c73      	ldrb	r3, [r6, r1]
 800526e:	3d01      	subs	r5, #1
 8005270:	702b      	strb	r3, [r5, #0]
 8005272:	2800      	cmp	r0, #0
 8005274:	d1f7      	bne.n	8005266 <_printf_i+0x1be>
 8005276:	2f08      	cmp	r7, #8
 8005278:	d109      	bne.n	800528e <_printf_i+0x1e6>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	07db      	lsls	r3, r3, #31
 800527e:	d506      	bpl.n	800528e <_printf_i+0x1e6>
 8005280:	6863      	ldr	r3, [r4, #4]
 8005282:	6922      	ldr	r2, [r4, #16]
 8005284:	4293      	cmp	r3, r2
 8005286:	dc02      	bgt.n	800528e <_printf_i+0x1e6>
 8005288:	2330      	movs	r3, #48	; 0x30
 800528a:	3d01      	subs	r5, #1
 800528c:	702b      	strb	r3, [r5, #0]
 800528e:	9b02      	ldr	r3, [sp, #8]
 8005290:	1b5b      	subs	r3, r3, r5
 8005292:	6123      	str	r3, [r4, #16]
 8005294:	9b05      	ldr	r3, [sp, #20]
 8005296:	aa07      	add	r2, sp, #28
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	0021      	movs	r1, r4
 800529c:	9b04      	ldr	r3, [sp, #16]
 800529e:	9803      	ldr	r0, [sp, #12]
 80052a0:	f7ff fe94 	bl	8004fcc <_printf_common>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d1b8      	bne.n	800521a <_printf_i+0x172>
 80052a8:	2001      	movs	r0, #1
 80052aa:	4240      	negs	r0, r0
 80052ac:	b009      	add	sp, #36	; 0x24
 80052ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b0:	08005651 	.word	0x08005651
 80052b4:	08005662 	.word	0x08005662

080052b8 <_sbrk_r>:
 80052b8:	2300      	movs	r3, #0
 80052ba:	b570      	push	{r4, r5, r6, lr}
 80052bc:	4c06      	ldr	r4, [pc, #24]	; (80052d8 <_sbrk_r+0x20>)
 80052be:	0005      	movs	r5, r0
 80052c0:	0008      	movs	r0, r1
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	f7fb fe7e 	bl	8000fc4 <_sbrk>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d103      	bne.n	80052d4 <_sbrk_r+0x1c>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d000      	beq.n	80052d4 <_sbrk_r+0x1c>
 80052d2:	602b      	str	r3, [r5, #0]
 80052d4:	bd70      	pop	{r4, r5, r6, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	200006dc 	.word	0x200006dc

080052dc <__sread>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	000c      	movs	r4, r1
 80052e0:	250e      	movs	r5, #14
 80052e2:	5f49      	ldrsh	r1, [r1, r5]
 80052e4:	f000 f8b2 	bl	800544c <_read_r>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	db03      	blt.n	80052f4 <__sread+0x18>
 80052ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052ee:	181b      	adds	r3, r3, r0
 80052f0:	6563      	str	r3, [r4, #84]	; 0x54
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	4a02      	ldr	r2, [pc, #8]	; (8005300 <__sread+0x24>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	81a3      	strh	r3, [r4, #12]
 80052fc:	e7f9      	b.n	80052f2 <__sread+0x16>
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	ffffefff 	.word	0xffffefff

08005304 <__swrite>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	001f      	movs	r7, r3
 8005308:	898b      	ldrh	r3, [r1, #12]
 800530a:	0005      	movs	r5, r0
 800530c:	000c      	movs	r4, r1
 800530e:	0016      	movs	r6, r2
 8005310:	05db      	lsls	r3, r3, #23
 8005312:	d505      	bpl.n	8005320 <__swrite+0x1c>
 8005314:	230e      	movs	r3, #14
 8005316:	5ec9      	ldrsh	r1, [r1, r3]
 8005318:	2200      	movs	r2, #0
 800531a:	2302      	movs	r3, #2
 800531c:	f000 f874 	bl	8005408 <_lseek_r>
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	4a05      	ldr	r2, [pc, #20]	; (8005338 <__swrite+0x34>)
 8005324:	0028      	movs	r0, r5
 8005326:	4013      	ands	r3, r2
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	0032      	movs	r2, r6
 800532c:	230e      	movs	r3, #14
 800532e:	5ee1      	ldrsh	r1, [r4, r3]
 8005330:	003b      	movs	r3, r7
 8005332:	f000 f81f 	bl	8005374 <_write_r>
 8005336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005338:	ffffefff 	.word	0xffffefff

0800533c <__sseek>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	000c      	movs	r4, r1
 8005340:	250e      	movs	r5, #14
 8005342:	5f49      	ldrsh	r1, [r1, r5]
 8005344:	f000 f860 	bl	8005408 <_lseek_r>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	1c42      	adds	r2, r0, #1
 800534c:	d103      	bne.n	8005356 <__sseek+0x1a>
 800534e:	4a05      	ldr	r2, [pc, #20]	; (8005364 <__sseek+0x28>)
 8005350:	4013      	ands	r3, r2
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	bd70      	pop	{r4, r5, r6, pc}
 8005356:	2280      	movs	r2, #128	; 0x80
 8005358:	0152      	lsls	r2, r2, #5
 800535a:	4313      	orrs	r3, r2
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	6560      	str	r0, [r4, #84]	; 0x54
 8005360:	e7f8      	b.n	8005354 <__sseek+0x18>
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	ffffefff 	.word	0xffffefff

08005368 <__sclose>:
 8005368:	b510      	push	{r4, lr}
 800536a:	230e      	movs	r3, #14
 800536c:	5ec9      	ldrsh	r1, [r1, r3]
 800536e:	f000 f815 	bl	800539c <_close_r>
 8005372:	bd10      	pop	{r4, pc}

08005374 <_write_r>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	0005      	movs	r5, r0
 8005378:	0008      	movs	r0, r1
 800537a:	0011      	movs	r1, r2
 800537c:	2200      	movs	r2, #0
 800537e:	4c06      	ldr	r4, [pc, #24]	; (8005398 <_write_r+0x24>)
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	001a      	movs	r2, r3
 8005384:	f7fb fdd5 	bl	8000f32 <_write>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d103      	bne.n	8005394 <_write_r+0x20>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d000      	beq.n	8005394 <_write_r+0x20>
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	bd70      	pop	{r4, r5, r6, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	200006dc 	.word	0x200006dc

0800539c <_close_r>:
 800539c:	2300      	movs	r3, #0
 800539e:	b570      	push	{r4, r5, r6, lr}
 80053a0:	4c06      	ldr	r4, [pc, #24]	; (80053bc <_close_r+0x20>)
 80053a2:	0005      	movs	r5, r0
 80053a4:	0008      	movs	r0, r1
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	f7fb fddf 	bl	8000f6a <_close>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d103      	bne.n	80053b8 <_close_r+0x1c>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d000      	beq.n	80053b8 <_close_r+0x1c>
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	bd70      	pop	{r4, r5, r6, pc}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	200006dc 	.word	0x200006dc

080053c0 <_fstat_r>:
 80053c0:	2300      	movs	r3, #0
 80053c2:	b570      	push	{r4, r5, r6, lr}
 80053c4:	4c06      	ldr	r4, [pc, #24]	; (80053e0 <_fstat_r+0x20>)
 80053c6:	0005      	movs	r5, r0
 80053c8:	0008      	movs	r0, r1
 80053ca:	0011      	movs	r1, r2
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	f7fb fdd6 	bl	8000f7e <_fstat>
 80053d2:	1c43      	adds	r3, r0, #1
 80053d4:	d103      	bne.n	80053de <_fstat_r+0x1e>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d000      	beq.n	80053de <_fstat_r+0x1e>
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	200006dc 	.word	0x200006dc

080053e4 <_isatty_r>:
 80053e4:	2300      	movs	r3, #0
 80053e6:	b570      	push	{r4, r5, r6, lr}
 80053e8:	4c06      	ldr	r4, [pc, #24]	; (8005404 <_isatty_r+0x20>)
 80053ea:	0005      	movs	r5, r0
 80053ec:	0008      	movs	r0, r1
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	f7fb fdd3 	bl	8000f9a <_isatty>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d103      	bne.n	8005400 <_isatty_r+0x1c>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d000      	beq.n	8005400 <_isatty_r+0x1c>
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	bd70      	pop	{r4, r5, r6, pc}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	200006dc 	.word	0x200006dc

08005408 <_lseek_r>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	0005      	movs	r5, r0
 800540c:	0008      	movs	r0, r1
 800540e:	0011      	movs	r1, r2
 8005410:	2200      	movs	r2, #0
 8005412:	4c06      	ldr	r4, [pc, #24]	; (800542c <_lseek_r+0x24>)
 8005414:	6022      	str	r2, [r4, #0]
 8005416:	001a      	movs	r2, r3
 8005418:	f7fb fdc8 	bl	8000fac <_lseek>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d103      	bne.n	8005428 <_lseek_r+0x20>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d000      	beq.n	8005428 <_lseek_r+0x20>
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	bd70      	pop	{r4, r5, r6, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	200006dc 	.word	0x200006dc

08005430 <memchr>:
 8005430:	b2c9      	uxtb	r1, r1
 8005432:	1882      	adds	r2, r0, r2
 8005434:	4290      	cmp	r0, r2
 8005436:	d101      	bne.n	800543c <memchr+0xc>
 8005438:	2000      	movs	r0, #0
 800543a:	4770      	bx	lr
 800543c:	7803      	ldrb	r3, [r0, #0]
 800543e:	428b      	cmp	r3, r1
 8005440:	d0fb      	beq.n	800543a <memchr+0xa>
 8005442:	3001      	adds	r0, #1
 8005444:	e7f6      	b.n	8005434 <memchr+0x4>

08005446 <__malloc_lock>:
 8005446:	4770      	bx	lr

08005448 <__malloc_unlock>:
 8005448:	4770      	bx	lr
	...

0800544c <_read_r>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	0005      	movs	r5, r0
 8005450:	0008      	movs	r0, r1
 8005452:	0011      	movs	r1, r2
 8005454:	2200      	movs	r2, #0
 8005456:	4c06      	ldr	r4, [pc, #24]	; (8005470 <_read_r+0x24>)
 8005458:	6022      	str	r2, [r4, #0]
 800545a:	001a      	movs	r2, r3
 800545c:	f7fb fd4c 	bl	8000ef8 <_read>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d103      	bne.n	800546c <_read_r+0x20>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d000      	beq.n	800546c <_read_r+0x20>
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	bd70      	pop	{r4, r5, r6, pc}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	200006dc 	.word	0x200006dc

08005474 <_init>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr

08005480 <_fini>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr
