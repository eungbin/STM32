
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000485c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac8  08004ac8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004ac8  08004ac8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ac8  08004ac8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000070  08004b40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  08004b40  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104f0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002398  00000000  00000000  00030588  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001078  00000000  00000000  00032920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  00033998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003a45  00000000  00000000  00034918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d757  00000000  00000000  0003835d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ad8b  00000000  00000000  00045ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e083f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000412c  00000000  00000000  000e08bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004904 	.word	0x08004904

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004904 	.word	0x08004904

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 8000228:	1d39      	adds	r1, r7, #4
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <__io_putchar+0x20>)
 800022c:	230a      	movs	r3, #10
 800022e:	2201      	movs	r2, #1
 8000230:	f002 fe94 	bl	8002f5c <HAL_UART_Transmit>

	return 1;
 8000234:	2301      	movs	r3, #1
}
 8000236:	0018      	movs	r0, r3
 8000238:	46bd      	mov	sp, r7
 800023a:	b002      	add	sp, #8
 800023c:	bd80      	pop	{r7, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	2000064c 	.word	0x2000064c

08000244 <__io_getchar>:

int __io_getchar(void) {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <__io_getchar+0x1c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	0019      	movs	r1, r3
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <__io_getchar+0x20>)
 8000250:	2201      	movs	r2, #1
 8000252:	0018      	movs	r0, r3
 8000254:	f002 ff2b 	bl	80030ae <HAL_UART_Receive_IT>

	return 1;
 8000258:	2301      	movs	r3, #1
}
 800025a:	0018      	movs	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000218 	.word	0x20000218
 8000264:	2000064c 	.word	0x2000064c

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fdec 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f84a 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f9f2 	bl	800065c <MX_GPIO_Init>
  MX_DMA_Init();
 8000278:	f000 f9d2 	bl	8000620 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800027c:	f000 f970 	bl	8000560 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000280:	f000 f8ea 	bl	8000458 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000284:	f000 f99c 	bl	80005c0 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8000288:	f000 f93c 	bl	8000504 <MX_TIM16_Init>
  MX_I2C1_Init();
 800028c:	f000 f8a4 	bl	80003d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <main+0x88>)
 8000292:	0018      	movs	r0, r3
 8000294:	f002 f9ee 	bl	8002674 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000298:	4916      	ldr	r1, [pc, #88]	; (80002f4 <main+0x8c>)
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <main+0x90>)
 800029c:	2201      	movs	r2, #1
 800029e:	0018      	movs	r0, r3
 80002a0:	f002 ff05 	bl	80030ae <HAL_UART_Receive_IT>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, SET);
 80002a4:	4b15      	ldr	r3, [pc, #84]	; (80002fc <main+0x94>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	2120      	movs	r1, #32
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 fa2c 	bl	8001708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, SET);
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	00d9      	lsls	r1, r3, #3
 80002b4:	2390      	movs	r3, #144	; 0x90
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	2201      	movs	r2, #1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 fa24 	bl	8001708 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <main+0x98>)
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 fe24 	bl	8000f10 <HAL_Delay>
	  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, RESET);
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <main+0x94>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	2120      	movs	r1, #32
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fa1a 	bl	8001708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, RESET);
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	00d9      	lsls	r1, r3, #3
 80002d8:	2390      	movs	r3, #144	; 0x90
 80002da:	05db      	lsls	r3, r3, #23
 80002dc:	2200      	movs	r2, #0
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 fa12 	bl	8001708 <HAL_GPIO_WritePin>
	  HAL_Delay(20000);
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <main+0x9c>)
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 fe12 	bl	8000f10 <HAL_Delay>
	  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, SET);
 80002ec:	e7da      	b.n	80002a4 <main+0x3c>
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	20000604 	.word	0x20000604
 80002f4:	20000218 	.word	0x20000218
 80002f8:	2000064c 	.word	0x2000064c
 80002fc:	48000400 	.word	0x48000400
 8000300:	00001388 	.word	0x00001388
 8000304:	00004e20 	.word	0x00004e20

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b099      	sub	sp, #100	; 0x64
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	242c      	movs	r4, #44	; 0x2c
 8000310:	193b      	adds	r3, r7, r4
 8000312:	0018      	movs	r0, r3
 8000314:	2334      	movs	r3, #52	; 0x34
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f003 fe43 	bl	8003fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031e:	231c      	movs	r3, #28
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	0018      	movs	r0, r3
 8000324:	2310      	movs	r3, #16
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f003 fe3b 	bl	8003fa4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032e:	003b      	movs	r3, r7
 8000330:	0018      	movs	r0, r3
 8000332:	231c      	movs	r3, #28
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f003 fe34 	bl	8003fa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800033c:	0021      	movs	r1, r4
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2203      	movs	r2, #3
 8000342:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2201      	movs	r2, #1
 8000348:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2201      	movs	r2, #1
 800034e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2210      	movs	r2, #16
 8000354:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2202      	movs	r2, #2
 800035a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	0252      	lsls	r2, r2, #9
 8000362:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	0352      	lsls	r2, r2, #13
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2200      	movs	r2, #0
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	187b      	adds	r3, r7, r1
 8000374:	0018      	movs	r0, r3
 8000376:	f001 fb2f 	bl	80019d8 <HAL_RCC_OscConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800037e:	f000 fa91 	bl	80008a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	211c      	movs	r1, #28
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2207      	movs	r2, #7
 8000388:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	2202      	movs	r2, #2
 800038e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2101      	movs	r1, #1
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 fe9f 	bl	80020e4 <HAL_RCC_ClockConfig>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003aa:	f000 fa7b 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80003ae:	003b      	movs	r3, r7
 80003b0:	2222      	movs	r2, #34	; 0x22
 80003b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003b4:	003b      	movs	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003ba:	003b      	movs	r3, r7
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	003b      	movs	r3, r7
 80003c2:	0018      	movs	r0, r3
 80003c4:	f002 f806 	bl	80023d4 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80003cc:	f000 fa6a 	bl	80008a4 <Error_Handler>
  }
}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b019      	add	sp, #100	; 0x64
 80003d6:	bd90      	pop	{r4, r7, pc}

080003d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <MX_I2C1_Init+0x74>)
 80003de:	4a1c      	ldr	r2, [pc, #112]	; (8000450 <MX_I2C1_Init+0x78>)
 80003e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_I2C1_Init+0x74>)
 80003e4:	4a1b      	ldr	r2, [pc, #108]	; (8000454 <MX_I2C1_Init+0x7c>)
 80003e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <MX_I2C1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_I2C1_Init+0x74>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_I2C1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_I2C1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_I2C1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_I2C1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_I2C1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_I2C1_Init+0x74>)
 8000414:	0018      	movs	r0, r3
 8000416:	f001 f9b1 	bl	800177c <HAL_I2C_Init>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800041e:	f000 fa41 	bl	80008a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <MX_I2C1_Init+0x74>)
 8000424:	2100      	movs	r1, #0
 8000426:	0018      	movs	r0, r3
 8000428:	f001 fa3e 	bl	80018a8 <HAL_I2CEx_ConfigAnalogFilter>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000430:	f000 fa38 	bl	80008a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <MX_I2C1_Init+0x74>)
 8000436:	2100      	movs	r1, #0
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fa81 	bl	8001940 <HAL_I2CEx_ConfigDigitalFilter>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000442:	f000 fa2f 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000168 	.word	0x20000168
 8000450:	40005400 	.word	0x40005400
 8000454:	2000090e 	.word	0x2000090e

08000458 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045e:	2308      	movs	r3, #8
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	0018      	movs	r0, r3
 8000464:	2310      	movs	r3, #16
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f003 fd9b 	bl	8003fa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046e:	003b      	movs	r3, r7
 8000470:	0018      	movs	r0, r3
 8000472:	2308      	movs	r3, #8
 8000474:	001a      	movs	r2, r3
 8000476:	2100      	movs	r1, #0
 8000478:	f003 fd94 	bl	8003fa4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <MX_TIM2_Init+0xa0>)
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	05d2      	lsls	r2, r2, #23
 8000482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000484:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <MX_TIM2_Init+0xa0>)
 8000486:	4a1d      	ldr	r2, [pc, #116]	; (80004fc <MX_TIM2_Init+0xa4>)
 8000488:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_TIM2_Init+0xa0>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <MX_TIM2_Init+0xa0>)
 8000492:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <MX_TIM2_Init+0xa8>)
 8000494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_TIM2_Init+0xa0>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_TIM2_Init+0xa0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_TIM2_Init+0xa0>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 f895 	bl	80025d4 <HAL_TIM_Base_Init>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80004ae:	f000 f9f9 	bl	80008a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b2:	2108      	movs	r1, #8
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	0152      	lsls	r2, r2, #5
 80004ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_TIM2_Init+0xa0>)
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 fa88 	bl	80029d8 <HAL_TIM_ConfigClockSource>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80004cc:	f000 f9ea 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	003b      	movs	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004dc:	003a      	movs	r2, r7
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_TIM2_Init+0xa0>)
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 fc78 	bl	8002dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004ec:	f000 f9da 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000604 	.word	0x20000604
 80004fc:	00008c9f 	.word	0x00008c9f
 8000500:	00000bb7 	.word	0x00000bb7

08000504 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_TIM16_Init+0x4c>)
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <MX_TIM16_Init+0x50>)
 800050c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32000-1;
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_TIM16_Init+0x4c>)
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <MX_TIM16_Init+0x54>)
 8000512:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_TIM16_Init+0x4c>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000-1;
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_TIM16_Init+0x4c>)
 800051c:	4a0f      	ldr	r2, [pc, #60]	; (800055c <MX_TIM16_Init+0x58>)
 800051e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_TIM16_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_TIM16_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_TIM16_Init+0x4c>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_TIM16_Init+0x4c>)
 8000534:	0018      	movs	r0, r3
 8000536:	f002 f84d 	bl	80025d4 <HAL_TIM_Base_Init>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800053e:	f000 f9b1 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000542:	4b03      	ldr	r3, [pc, #12]	; (8000550 <MX_TIM16_Init+0x4c>)
 8000544:	0018      	movs	r0, r3
 8000546:	f002 f8df 	bl	8002708 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM16_Init 2 */

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200006d4 	.word	0x200006d4
 8000554:	40014400 	.word	0x40014400
 8000558:	00007cff 	.word	0x00007cff
 800055c:	00001387 	.word	0x00001387

08000560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 8000566:	4a15      	ldr	r2, [pc, #84]	; (80005bc <MX_USART2_UART_Init+0x5c>)
 8000568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 800056c:	2296      	movs	r2, #150	; 0x96
 800056e:	0212      	lsls	r2, r2, #8
 8000570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 8000586:	220c      	movs	r2, #12
 8000588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 800059e:	2200      	movs	r2, #0
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MX_USART2_UART_Init+0x58>)
 80005a4:	0018      	movs	r0, r3
 80005a6:	f002 fc85 	bl	8002eb4 <HAL_UART_Init>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ae:	f000 f979 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000064c 	.word	0x2000064c
 80005bc:	40004400 	.word	0x40004400

080005c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005c6:	4a15      	ldr	r2, [pc, #84]	; (800061c <MX_USART3_UART_Init+0x5c>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005cc:	2296      	movs	r2, #150	; 0x96
 80005ce:	0192      	lsls	r2, r2, #6
 80005d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART3_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <MX_USART3_UART_Init+0x58>)
 8000604:	0018      	movs	r0, r3
 8000606:	f002 fc55 	bl	8002eb4 <HAL_UART_Init>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800060e:	f000 f949 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000e4 	.word	0x200000e4
 800061c:	40004800 	.word	0x40004800

08000620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_DMA_Init+0x38>)
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_DMA_Init+0x38>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	615a      	str	r2, [r3, #20]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_DMA_Init+0x38>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	200a      	movs	r0, #10
 8000644:	f000 fd32 	bl	80010ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000648:	200a      	movs	r0, #10
 800064a:	f000 fd44 	bl	80010d6 <HAL_NVIC_EnableIRQ>

}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	40021000 	.word	0x40021000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b08b      	sub	sp, #44	; 0x2c
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	2414      	movs	r4, #20
 8000664:	193b      	adds	r3, r7, r4
 8000666:	0018      	movs	r0, r3
 8000668:	2314      	movs	r3, #20
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f003 fc99 	bl	8003fa4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b4c      	ldr	r3, [pc, #304]	; (80007a4 <MX_GPIO_Init+0x148>)
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <MX_GPIO_Init+0x148>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	0309      	lsls	r1, r1, #12
 800067c:	430a      	orrs	r2, r1
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	4b48      	ldr	r3, [pc, #288]	; (80007a4 <MX_GPIO_Init+0x148>)
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	031b      	lsls	r3, r3, #12
 8000688:	4013      	ands	r3, r2
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068e:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <MX_GPIO_Init+0x148>)
 8000690:	695a      	ldr	r2, [r3, #20]
 8000692:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <MX_GPIO_Init+0x148>)
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	03c9      	lsls	r1, r1, #15
 8000698:	430a      	orrs	r2, r1
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <MX_GPIO_Init+0x148>)
 800069e:	695a      	ldr	r2, [r3, #20]
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	03db      	lsls	r3, r3, #15
 80006a4:	4013      	ands	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <MX_GPIO_Init+0x148>)
 80006ac:	695a      	ldr	r2, [r3, #20]
 80006ae:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <MX_GPIO_Init+0x148>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0289      	lsls	r1, r1, #10
 80006b4:	430a      	orrs	r2, r1
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <MX_GPIO_Init+0x148>)
 80006ba:	695a      	ldr	r2, [r3, #20]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	029b      	lsls	r3, r3, #10
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <MX_GPIO_Init+0x148>)
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <MX_GPIO_Init+0x148>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	02c9      	lsls	r1, r1, #11
 80006d0:	430a      	orrs	r2, r1
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <MX_GPIO_Init+0x148>)
 80006d6:	695a      	ldr	r2, [r3, #20]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	02db      	lsls	r3, r3, #11
 80006dc:	4013      	ands	r3, r2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|URLED2_Pin|Relay2_Pin, GPIO_PIN_RESET);
 80006e2:	4931      	ldr	r1, [pc, #196]	; (80007a8 <MX_GPIO_Init+0x14c>)
 80006e4:	2390      	movs	r3, #144	; 0x90
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2200      	movs	r2, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f80c 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80006f0:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <MX_GPIO_Init+0x150>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	2120      	movs	r1, #32
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 f806 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : URBTN_Pin */
  GPIO_InitStruct.Pin = URBTN_Pin;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0192      	lsls	r2, r2, #6
 8000702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <MX_GPIO_Init+0x154>)
 8000708:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(URBTN_GPIO_Port, &GPIO_InitStruct);
 8000710:	193b      	adds	r3, r7, r4
 8000712:	4a28      	ldr	r2, [pc, #160]	; (80007b4 <MX_GPIO_Init+0x158>)
 8000714:	0019      	movs	r1, r3
 8000716:	0010      	movs	r0, r2
 8000718:	f000 fe7e 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 URLED2_Pin Relay2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|URLED2_Pin|Relay2_Pin;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <MX_GPIO_Init+0x14c>)
 8000720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2201      	movs	r2, #1
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	193a      	adds	r2, r7, r4
 8000736:	2390      	movs	r3, #144	; 0x90
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fe6b 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Pin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 8000756:	193a      	adds	r2, r7, r4
 8000758:	2390      	movs	r3, #144	; 0x90
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	0011      	movs	r1, r2
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fe5a 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 8000764:	0021      	movs	r1, r4
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2220      	movs	r2, #32
 800076a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2201      	movs	r2, #1
 8000770:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 800077e:	187b      	adds	r3, r7, r1
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <MX_GPIO_Init+0x150>)
 8000782:	0019      	movs	r1, r3
 8000784:	0010      	movs	r0, r2
 8000786:	f000 fe47 	bl	8001418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2007      	movs	r0, #7
 8000790:	f000 fc8c 	bl	80010ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000794:	2007      	movs	r0, #7
 8000796:	f000 fc9e 	bl	80010d6 <HAL_NVIC_EnableIRQ>

}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b00b      	add	sp, #44	; 0x2c
 80007a0:	bd90      	pop	{r4, r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000
 80007a8:	00000422 	.word	0x00000422
 80007ac:	48000400 	.word	0x48000400
 80007b0:	10110000 	.word	0x10110000
 80007b4:	48000800 	.word	0x48000800

080007b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	1dbb      	adds	r3, r7, #6
 80007c2:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == URBTN_Pin) {
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	881a      	ldrh	r2, [r3, #0]
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	019b      	lsls	r3, r3, #6
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d10a      	bne.n	80007e6 <HAL_GPIO_EXTI_Callback+0x2e>
    if(led_status == FALSE) {
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d103      	bne.n	80007e0 <HAL_GPIO_EXTI_Callback+0x28>
    	led_status = TRUE;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80007da:	2201      	movs	r2, #1
 80007dc:	601a      	str	r2, [r3, #0]
    } else {
    	led_status = FALSE;
    }
  }
}
 80007de:	e002      	b.n	80007e6 <HAL_GPIO_EXTI_Callback+0x2e>
    	led_status = FALSE;
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	2000008c 	.word	0x2000008c

080007f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1e      	ldr	r2, [pc, #120]	; (800087c <HAL_UART_RxCpltCallback+0x88>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d135      	bne.n	8000872 <HAL_UART_RxCpltCallback+0x7e>
		printf("Key Press!!!\r\n");
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <HAL_UART_RxCpltCallback+0x8c>)
 8000808:	0018      	movs	r0, r3
 800080a:	f003 fc33 	bl	8004074 <puts>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800080e:	491d      	ldr	r1, [pc, #116]	; (8000884 <HAL_UART_RxCpltCallback+0x90>)
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <HAL_UART_RxCpltCallback+0x94>)
 8000812:	2201      	movs	r2, #1
 8000814:	0018      	movs	r0, r3
 8000816:	f002 fc4a 	bl	80030ae <HAL_UART_Receive_IT>
		buf[list_value] = rx_data;
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <HAL_UART_RxCpltCallback+0x98>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_UART_RxCpltCallback+0x90>)
 8000820:	7811      	ldrb	r1, [r2, #0]
 8000822:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <HAL_UART_RxCpltCallback+0x9c>)
 8000824:	54d1      	strb	r1, [r2, r3]
		list_value++;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_UART_RxCpltCallback+0x98>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_UART_RxCpltCallback+0x98>)
 800082e:	601a      	str	r2, [r3, #0]
		if(rx_data == 'p') {
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_UART_RxCpltCallback+0x90>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b70      	cmp	r3, #112	; 0x70
 8000836:	d11c      	bne.n	8000872 <HAL_UART_RxCpltCallback+0x7e>
			HAL_UART_Transmit(&huart2, &buf, (list_value-1), 1);
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_UART_RxCpltCallback+0x98>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	3b01      	subs	r3, #1
 8000840:	b29a      	uxth	r2, r3
 8000842:	4913      	ldr	r1, [pc, #76]	; (8000890 <HAL_UART_RxCpltCallback+0x9c>)
 8000844:	4810      	ldr	r0, [pc, #64]	; (8000888 <HAL_UART_RxCpltCallback+0x94>)
 8000846:	2301      	movs	r3, #1
 8000848:	f002 fb88 	bl	8002f5c <HAL_UART_Transmit>
			for(int i=0; i<list_value; i++) {
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e007      	b.n	8000862 <HAL_UART_RxCpltCallback+0x6e>
				buf[i] = 'null';
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_UART_RxCpltCallback+0x9c>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	18d3      	adds	r3, r2, r3
 8000858:	226c      	movs	r2, #108	; 0x6c
 800085a:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<list_value; i++) {
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3301      	adds	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_UART_RxCpltCallback+0x98>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	dbf2      	blt.n	8000852 <HAL_UART_RxCpltCallback+0x5e>
			}
			list_value = 0;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <HAL_UART_RxCpltCallback+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
//	if(huart->Instance == USART3) {
//		print_MISE();
//		printf("%d\r\n", pm2_5);
//		sprintf(s_pm2_5, "%d", pm2_5);
//	}
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b004      	add	sp, #16
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40004400 	.word	0x40004400
 8000880:	0800491c 	.word	0x0800491c
 8000884:	20000218 	.word	0x20000218
 8000888:	2000064c 	.word	0x2000064c
 800088c:	20000090 	.word	0x20000090
 8000890:	2000021c 	.word	0x2000021c

08000894 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
	{

	}
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008aa:	e7fe      	b.n	80008aa <Error_Handler+0x6>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x44>)
 80008b4:	699a      	ldr	r2, [r3, #24]
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_MspInit+0x44>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	619a      	str	r2, [r3, #24]
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x44>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x44>)
 80008cc:	69da      	ldr	r2, [r3, #28]
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_MspInit+0x44>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0549      	lsls	r1, r1, #21
 80008d4:	430a      	orrs	r2, r1
 80008d6:	61da      	str	r2, [r3, #28]
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_MspInit+0x44>)
 80008da:	69da      	ldr	r2, [r3, #28]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	055b      	lsls	r3, r3, #21
 80008e0:	4013      	ands	r3, r2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	2314      	movs	r3, #20
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	0018      	movs	r0, r3
 8000902:	2314      	movs	r3, #20
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f003 fb4c 	bl	8003fa4 <memset>
  if(hi2c->Instance==I2C1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <HAL_I2C_MspInit+0x90>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d132      	bne.n	800097c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <HAL_I2C_MspInit+0x94>)
 8000918:	695a      	ldr	r2, [r3, #20]
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_I2C_MspInit+0x94>)
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	02c9      	lsls	r1, r1, #11
 8000920:	430a      	orrs	r2, r1
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_I2C_MspInit+0x94>)
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	02db      	lsls	r3, r3, #11
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000932:	2114      	movs	r1, #20
 8000934:	187b      	adds	r3, r7, r1
 8000936:	22c0      	movs	r2, #192	; 0xc0
 8000938:	0092      	lsls	r2, r2, #2
 800093a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2212      	movs	r2, #18
 8000940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2201      	movs	r2, #1
 8000946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2203      	movs	r2, #3
 800094c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2201      	movs	r2, #1
 8000952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	187b      	adds	r3, r7, r1
 8000956:	4a0d      	ldr	r2, [pc, #52]	; (800098c <HAL_I2C_MspInit+0x98>)
 8000958:	0019      	movs	r1, r3
 800095a:	0010      	movs	r0, r2
 800095c:	f000 fd5c 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_I2C_MspInit+0x94>)
 8000962:	69da      	ldr	r2, [r3, #28]
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_I2C_MspInit+0x94>)
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	0389      	lsls	r1, r1, #14
 800096a:	430a      	orrs	r2, r1
 800096c:	61da      	str	r2, [r3, #28]
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_I2C_MspInit+0x94>)
 8000970:	69da      	ldr	r2, [r3, #28]
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	039b      	lsls	r3, r3, #14
 8000976:	4013      	ands	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b00a      	add	sp, #40	; 0x28
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40005400 	.word	0x40005400
 8000988:	40021000 	.word	0x40021000
 800098c:	48000400 	.word	0x48000400

08000990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d114      	bne.n	80009ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_TIM_Base_MspInit+0x7c>)
 80009a6:	69da      	ldr	r2, [r3, #28]
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_TIM_Base_MspInit+0x7c>)
 80009aa:	2101      	movs	r1, #1
 80009ac:	430a      	orrs	r2, r1
 80009ae:	61da      	str	r2, [r3, #28]
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_TIM_Base_MspInit+0x7c>)
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	2201      	movs	r2, #1
 80009b6:	4013      	ands	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	200f      	movs	r0, #15
 80009c2:	f000 fb73 	bl	80010ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009c6:	200f      	movs	r0, #15
 80009c8:	f000 fb85 	bl	80010d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80009cc:	e01a      	b.n	8000a04 <HAL_TIM_Base_MspInit+0x74>
  else if(htim_base->Instance==TIM16)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_TIM_Base_MspInit+0x80>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d115      	bne.n	8000a04 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_TIM_Base_MspInit+0x7c>)
 80009da:	699a      	ldr	r2, [r3, #24]
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_TIM_Base_MspInit+0x7c>)
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	0289      	lsls	r1, r1, #10
 80009e2:	430a      	orrs	r2, r1
 80009e4:	619a      	str	r2, [r3, #24]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_TIM_Base_MspInit+0x7c>)
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	029b      	lsls	r3, r3, #10
 80009ee:	4013      	ands	r3, r2
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2015      	movs	r0, #21
 80009fa:	f000 fb57 	bl	80010ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80009fe:	2015      	movs	r0, #21
 8000a00:	f000 fb69 	bl	80010d6 <HAL_NVIC_EnableIRQ>
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b004      	add	sp, #16
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40014400 	.word	0x40014400

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	231c      	movs	r3, #28
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	0018      	movs	r0, r3
 8000a22:	2314      	movs	r3, #20
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f003 fabc 	bl	8003fa4 <memset>
  if(huart->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a6a      	ldr	r2, [pc, #424]	; (8000bdc <HAL_UART_MspInit+0x1c8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d13b      	bne.n	8000aae <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000a38:	69da      	ldr	r2, [r3, #28]
 8000a3a:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0289      	lsls	r1, r1, #10
 8000a40:	430a      	orrs	r2, r1
 8000a42:	61da      	str	r2, [r3, #28]
 8000a44:	4b66      	ldr	r3, [pc, #408]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	029b      	lsls	r3, r3, #10
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b63      	ldr	r3, [pc, #396]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	4b62      	ldr	r3, [pc, #392]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	0289      	lsls	r1, r1, #10
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b5f      	ldr	r3, [pc, #380]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	029b      	lsls	r3, r3, #10
 8000a68:	4013      	ands	r3, r2
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a6e:	211c      	movs	r1, #28
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2202      	movs	r2, #2
 8000a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2203      	movs	r2, #3
 8000a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	187a      	adds	r2, r7, r1
 8000a90:	2390      	movs	r3, #144	; 0x90
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fcbe 	bl	8001418 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	201c      	movs	r0, #28
 8000aa2:	f000 fb03 	bl	80010ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa6:	201c      	movs	r0, #28
 8000aa8:	f000 fb15 	bl	80010d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aac:	e092      	b.n	8000bd4 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a4c      	ldr	r2, [pc, #304]	; (8000be4 <HAL_UART_MspInit+0x1d0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d000      	beq.n	8000aba <HAL_UART_MspInit+0xa6>
 8000ab8:	e08c      	b.n	8000bd4 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aba:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000abc:	69da      	ldr	r2, [r3, #28]
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	02c9      	lsls	r1, r1, #11
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	61da      	str	r2, [r3, #28]
 8000ac8:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000aca:	69da      	ldr	r2, [r3, #28]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	02db      	lsls	r3, r3, #11
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	4b41      	ldr	r3, [pc, #260]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	02c9      	lsls	r1, r1, #11
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	4b3e      	ldr	r3, [pc, #248]	; (8000be0 <HAL_UART_MspInit+0x1cc>)
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	02db      	lsls	r3, r3, #11
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000af2:	211c      	movs	r1, #28
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	22c0      	movs	r2, #192	; 0xc0
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2202      	movs	r2, #2
 8000b00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2204      	movs	r2, #4
 8000b12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	4a34      	ldr	r2, [pc, #208]	; (8000be8 <HAL_UART_MspInit+0x1d4>)
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0010      	movs	r0, r2
 8000b1c:	f000 fc7c 	bl	8001418 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000b20:	4b32      	ldr	r3, [pc, #200]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b22:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <HAL_UART_MspInit+0x1dc>)
 8000b24:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b26:	4b31      	ldr	r3, [pc, #196]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b38:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b46:	2220      	movs	r2, #32
 8000b48:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 fadc 	bl	8001110 <HAL_DMA_Init>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000b5c:	f7ff fea2 	bl	80008a4 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <HAL_UART_MspInit+0x1e0>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <HAL_UART_MspInit+0x1e0>)
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	04c9      	lsls	r1, r1, #19
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b72:	671a      	str	r2, [r3, #112]	; 0x70
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_UART_MspInit+0x1d8>)
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000b7c:	4a1f      	ldr	r2, [pc, #124]	; (8000bfc <HAL_UART_MspInit+0x1e8>)
 8000b7e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000b82:	2210      	movs	r2, #16
 8000b84:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 faaf 	bl	8001110 <HAL_DMA_Init>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8000bb6:	f7ff fe75 	bl	80008a4 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_UART_MspInit+0x1e0>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_UART_MspInit+0x1e0>)
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	04c9      	lsls	r1, r1, #19
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000bcc:	66da      	str	r2, [r3, #108]	; 0x6c
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_UART_MspInit+0x1e4>)
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b00c      	add	sp, #48	; 0x30
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40004800 	.word	0x40004800
 8000be8:	48000400 	.word	0x48000400
 8000bec:	200000a0 	.word	0x200000a0
 8000bf0:	40020030 	.word	0x40020030
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	200001d4 	.word	0x200001d4
 8000bfc:	4002001c 	.word	0x4002001c

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f958 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fd84 	bl	8001744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fb26 	bl	800129c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fb22 	bl	800129c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	200001d4 	.word	0x200001d4
 8000c64:	200000a0 	.word	0x200000a0

08000c68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <TIM2_IRQHandler+0x14>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f001 fd9c 	bl	80027ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	20000604 	.word	0x20000604

08000c80 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <TIM16_IRQHandler+0x14>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 fd90 	bl	80027ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	200006d4 	.word	0x200006d4

08000c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <USART2_IRQHandler+0x14>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f002 fa56 	bl	8003150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	2000064c 	.word	0x2000064c

08000cb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00a      	b.n	8000cd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cc2:	f7ff fabf 	bl	8000244 <__io_getchar>
 8000cc6:	0001      	movs	r1, r0
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	b2ca      	uxtb	r2, r1
 8000cd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf0      	blt.n	8000cc2 <_read+0x12>
	}

return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b006      	add	sp, #24
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e009      	b.n	8000d10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff fa8b 	bl	8000220 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf1      	blt.n	8000cfc <_write+0x12>
	}
	return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b006      	add	sp, #24
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_close>:

int _close(int file)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	return -1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	425b      	negs	r3, r3
}
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	605a      	str	r2, [r3, #4]
	return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_isatty>:

int _isatty(int file)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
	return 1;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	0018      	movs	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	18d3      	adds	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f003 f8d0 	bl	8003f50 <__errno>
 8000db0:	0003      	movs	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	425b      	negs	r3, r3
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	18d2      	adds	r2, r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b006      	add	sp, #24
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20004000 	.word	0x20004000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	20000094 	.word	0x20000094
 8000de4:	20000728 	.word	0x20000728

08000de8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e10:	4c0b      	ldr	r4, [pc, #44]	; (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e1e:	f7ff ffe3 	bl	8000de8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e22:	f003 f89b 	bl	8003f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e26:	f7ff fa1f 	bl	8000268 <main>

08000e2a <LoopForever>:

LoopForever:
    b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   r0, =_estack
 8000e2c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e38:	08004ad0 	.word	0x08004ad0
  ldr r2, =_sbss
 8000e3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e40:	20000724 	.word	0x20000724

08000e44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_COMP_IRQHandler>
	...

08000e48 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <HAL_Init+0x24>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_Init+0x24>)
 8000e52:	2110      	movs	r1, #16
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 f809 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5e:	f7ff fd25 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_InitTick+0x5c>)
 8000e7a:	681c      	ldr	r4, [r3, #0]
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_InitTick+0x60>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	0019      	movs	r1, r3
 8000e82:	23fa      	movs	r3, #250	; 0xfa
 8000e84:	0098      	lsls	r0, r3, #2
 8000e86:	f7ff f93f 	bl	8000108 <__udivsi3>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	0020      	movs	r0, r4
 8000e90:	f7ff f93a 	bl	8000108 <__udivsi3>
 8000e94:	0003      	movs	r3, r0
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 f92d 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e9c:	1e03      	subs	r3, r0, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e00f      	b.n	8000ec4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d80b      	bhi.n	8000ec2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	2301      	movs	r3, #1
 8000eae:	425b      	negs	r3, r3
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f8fa 	bl	80010ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_InitTick+0x64>)
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b003      	add	sp, #12
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	18d2      	adds	r2, r2, r3
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_IncTick+0x20>)
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	2000071c 	.word	0x2000071c

08000efc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <HAL_GetTick+0x10>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	2000071c 	.word	0x2000071c

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff fff0 	bl	8000efc <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_Delay+0x40>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	001a      	movs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	189b      	adds	r3, r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	f7ff ffe0 	bl	8000efc <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b004      	add	sp, #16
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b7f      	cmp	r3, #127	; 0x7f
 8000f66:	d809      	bhi.n	8000f7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	231f      	movs	r3, #31
 8000f70:	401a      	ands	r2, r3
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_EnableIRQ+0x30>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	4091      	lsls	r1, r2
 8000f78:	000a      	movs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
  }
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	0002      	movs	r2, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f9c:	d828      	bhi.n	8000ff0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9e:	4a2f      	ldr	r2, [pc, #188]	; (800105c <__NVIC_SetPriority+0xd4>)
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	33c0      	adds	r3, #192	; 0xc0
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	589b      	ldr	r3, [r3, r2]
 8000fae:	1dfa      	adds	r2, r7, #7
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	00d2      	lsls	r2, r2, #3
 8000fba:	21ff      	movs	r1, #255	; 0xff
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	000a      	movs	r2, r1
 8000fc0:	43d2      	mvns	r2, r2
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	22ff      	movs	r2, #255	; 0xff
 8000fcc:	401a      	ands	r2, r3
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	4003      	ands	r3, r0
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fdc:	481f      	ldr	r0, [pc, #124]	; (800105c <__NVIC_SetPriority+0xd4>)
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	33c0      	adds	r3, #192	; 0xc0
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fee:	e031      	b.n	8001054 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <__NVIC_SetPriority+0xd8>)
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	3b08      	subs	r3, #8
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3306      	adds	r3, #6
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	18d3      	adds	r3, r2, r3
 8001006:	3304      	adds	r3, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	1dfa      	adds	r2, r7, #7
 800100c:	7812      	ldrb	r2, [r2, #0]
 800100e:	0011      	movs	r1, r2
 8001010:	2203      	movs	r2, #3
 8001012:	400a      	ands	r2, r1
 8001014:	00d2      	lsls	r2, r2, #3
 8001016:	21ff      	movs	r1, #255	; 0xff
 8001018:	4091      	lsls	r1, r2
 800101a:	000a      	movs	r2, r1
 800101c:	43d2      	mvns	r2, r2
 800101e:	401a      	ands	r2, r3
 8001020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	22ff      	movs	r2, #255	; 0xff
 8001028:	401a      	ands	r2, r3
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	0018      	movs	r0, r3
 8001030:	2303      	movs	r3, #3
 8001032:	4003      	ands	r3, r0
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <__NVIC_SetPriority+0xd8>)
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	001c      	movs	r4, r3
 8001040:	230f      	movs	r3, #15
 8001042:	4023      	ands	r3, r4
 8001044:	3b08      	subs	r3, #8
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	430a      	orrs	r2, r1
 800104a:	3306      	adds	r3, #6
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	18c3      	adds	r3, r0, r3
 8001050:	3304      	adds	r3, #4
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b003      	add	sp, #12
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <SysTick_Config+0x40>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d901      	bls.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e010      	b.n	800109c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <SysTick_Config+0x44>)
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	3a01      	subs	r2, #1
 8001080:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	2301      	movs	r3, #1
 8001084:	425b      	negs	r3, r3
 8001086:	2103      	movs	r1, #3
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ff7d 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <SysTick_Config+0x44>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x44>)
 8001096:	2207      	movs	r2, #7
 8001098:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109a:	2300      	movs	r3, #0
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b002      	add	sp, #8
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	00ffffff 	.word	0x00ffffff
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	210f      	movs	r1, #15
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	1c02      	adds	r2, r0, #0
 80010bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff ff5d 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b004      	add	sp, #16
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	0002      	movs	r2, r0
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ff33 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff ffaf 	bl	8001064 <SysTick_Config>
 8001106:	0003      	movs	r3, r0
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e036      	b.n	8001194 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2221      	movs	r2, #33	; 0x21
 800112a:	2102      	movs	r1, #2
 800112c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a18      	ldr	r2, [pc, #96]	; (800119c <HAL_DMA_Init+0x8c>)
 800113a:	4013      	ands	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	0018      	movs	r0, r3
 8001178:	f000 f932 	bl	80013e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2221      	movs	r2, #33	; 0x21
 8001186:	2101      	movs	r1, #1
 8001188:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2220      	movs	r2, #32
 800118e:	2100      	movs	r1, #0
 8001190:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}  
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	b004      	add	sp, #16
 800119a:	bd80      	pop	{r7, pc}
 800119c:	ffffc00f 	.word	0xffffc00f

080011a0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2221      	movs	r2, #33	; 0x21
 80011ac:	5c9b      	ldrb	r3, [r3, r2]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d008      	beq.n	80011c6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2204      	movs	r2, #4
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2220      	movs	r2, #32
 80011be:	2100      	movs	r1, #0
 80011c0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e020      	b.n	8001208 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	210e      	movs	r1, #14
 80011d2:	438a      	bics	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	438a      	bics	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ee:	2101      	movs	r1, #1
 80011f0:	4091      	lsls	r1, r2
 80011f2:	000a      	movs	r2, r1
 80011f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2221      	movs	r2, #33	; 0x21
 80011fa:	2101      	movs	r1, #1
 80011fc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2220      	movs	r2, #32
 8001202:	2100      	movs	r1, #0
 8001204:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001218:	230f      	movs	r3, #15
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2221      	movs	r2, #33	; 0x21
 8001224:	5c9b      	ldrb	r3, [r3, r2]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d007      	beq.n	800123c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2204      	movs	r2, #4
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001232:	230f      	movs	r3, #15
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e028      	b.n	800128e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	210e      	movs	r1, #14
 8001248:	438a      	bics	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2101      	movs	r1, #1
 8001258:	438a      	bics	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001264:	2101      	movs	r1, #1
 8001266:	4091      	lsls	r1, r2
 8001268:	000a      	movs	r2, r1
 800126a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2221      	movs	r2, #33	; 0x21
 8001270:	2101      	movs	r1, #1
 8001272:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2220      	movs	r2, #32
 8001278:	2100      	movs	r1, #0
 800127a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	0010      	movs	r0, r2
 800128c:	4798      	blx	r3
    } 
  }
  return status;
 800128e:	230f      	movs	r3, #15
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	781b      	ldrb	r3, [r3, #0]
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b004      	add	sp, #16
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	2204      	movs	r2, #4
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4013      	ands	r3, r2
 80012c2:	d024      	beq.n	800130e <HAL_DMA_IRQHandler+0x72>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2204      	movs	r2, #4
 80012c8:	4013      	ands	r3, r2
 80012ca:	d020      	beq.n	800130e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2220      	movs	r2, #32
 80012d4:	4013      	ands	r3, r2
 80012d6:	d107      	bne.n	80012e8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2104      	movs	r1, #4
 80012e4:	438a      	bics	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f0:	2104      	movs	r1, #4
 80012f2:	4091      	lsls	r1, r2
 80012f4:	000a      	movs	r2, r1
 80012f6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d100      	bne.n	8001302 <HAL_DMA_IRQHandler+0x66>
 8001300:	e06a      	b.n	80013d8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	0010      	movs	r0, r2
 800130a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800130c:	e064      	b.n	80013d8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2202      	movs	r2, #2
 8001314:	409a      	lsls	r2, r3
 8001316:	0013      	movs	r3, r2
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4013      	ands	r3, r2
 800131c:	d02b      	beq.n	8001376 <HAL_DMA_IRQHandler+0xda>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2202      	movs	r2, #2
 8001322:	4013      	ands	r3, r2
 8001324:	d027      	beq.n	8001376 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2220      	movs	r2, #32
 800132e:	4013      	ands	r3, r2
 8001330:	d10b      	bne.n	800134a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	210a      	movs	r1, #10
 800133e:	438a      	bics	r2, r1
 8001340:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2221      	movs	r2, #33	; 0x21
 8001346:	2101      	movs	r1, #1
 8001348:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001352:	2102      	movs	r1, #2
 8001354:	4091      	lsls	r1, r2
 8001356:	000a      	movs	r2, r1
 8001358:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2220      	movs	r2, #32
 800135e:	2100      	movs	r1, #0
 8001360:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	2b00      	cmp	r3, #0
 8001368:	d036      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	0010      	movs	r0, r2
 8001372:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001374:	e030      	b.n	80013d8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2208      	movs	r2, #8
 800137c:	409a      	lsls	r2, r3
 800137e:	0013      	movs	r3, r2
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4013      	ands	r3, r2
 8001384:	d028      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x13c>
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2208      	movs	r2, #8
 800138a:	4013      	ands	r3, r2
 800138c:	d024      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	210e      	movs	r1, #14
 800139a:	438a      	bics	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a6:	2101      	movs	r1, #1
 80013a8:	4091      	lsls	r1, r2
 80013aa:	000a      	movs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2221      	movs	r2, #33	; 0x21
 80013b8:	2101      	movs	r1, #1
 80013ba:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2220      	movs	r2, #32
 80013c0:	2100      	movs	r1, #0
 80013c2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	0010      	movs	r0, r2
 80013d4:	4798      	blx	r3
    }
   }
}  
 80013d6:	e7ff      	b.n	80013d8 <HAL_DMA_IRQHandler+0x13c>
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b004      	add	sp, #16
 80013de:	bd80      	pop	{r7, pc}

080013e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <DMA_CalcBaseAndBitshift+0x30>)
 80013ee:	4694      	mov	ip, r2
 80013f0:	4463      	add	r3, ip
 80013f2:	2114      	movs	r1, #20
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7fe fe87 	bl	8000108 <__udivsi3>
 80013fa:	0003      	movs	r3, r0
 80013fc:	009a      	lsls	r2, r3, #2
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <DMA_CalcBaseAndBitshift+0x34>)
 8001406:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}
 8001410:	bffdfff8 	.word	0xbffdfff8
 8001414:	40020000 	.word	0x40020000

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	e155      	b.n	80016d4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2101      	movs	r1, #1
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4091      	lsls	r1, r2
 8001432:	000a      	movs	r2, r1
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d100      	bne.n	8001440 <HAL_GPIO_Init+0x28>
 800143e:	e146      	b.n	80016ce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d00b      	beq.n	8001460 <HAL_GPIO_Init+0x48>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001454:	2b11      	cmp	r3, #17
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b12      	cmp	r3, #18
 800145e:	d130      	bne.n	80014c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	409a      	lsls	r2, r3
 800146e:	0013      	movs	r3, r2
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	409a      	lsls	r2, r3
 8001482:	0013      	movs	r3, r2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001496:	2201      	movs	r2, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	2201      	movs	r2, #1
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	43da      	mvns	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0xea>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b12      	cmp	r3, #18
 8001500:	d123      	bne.n	800154a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	58d3      	ldr	r3, [r2, r3]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2207      	movs	r2, #7
 8001514:	4013      	ands	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2107      	movs	r1, #7
 800152e:	400b      	ands	r3, r1
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	08da      	lsrs	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3208      	adds	r2, #8
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	6939      	ldr	r1, [r7, #16]
 8001548:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	43da      	mvns	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2203      	movs	r2, #3
 8001568:	401a      	ands	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	055b      	lsls	r3, r3, #21
 8001586:	4013      	ands	r3, r2
 8001588:	d100      	bne.n	800158c <HAL_GPIO_Init+0x174>
 800158a:	e0a0      	b.n	80016ce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158c:	4b57      	ldr	r3, [pc, #348]	; (80016ec <HAL_GPIO_Init+0x2d4>)
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_GPIO_Init+0x2d4>)
 8001592:	2101      	movs	r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	619a      	str	r2, [r3, #24]
 8001598:	4b54      	ldr	r3, [pc, #336]	; (80016ec <HAL_GPIO_Init+0x2d4>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2201      	movs	r2, #1
 800159e:	4013      	ands	r3, r2
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_GPIO_Init+0x2d8>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	589b      	ldr	r3, [r3, r2]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4013      	ands	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	409a      	lsls	r2, r3
 80015be:	0013      	movs	r3, r2
 80015c0:	43da      	mvns	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	2390      	movs	r3, #144	; 0x90
 80015cc:	05db      	lsls	r3, r3, #23
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d019      	beq.n	8001606 <HAL_GPIO_Init+0x1ee>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a47      	ldr	r2, [pc, #284]	; (80016f4 <HAL_GPIO_Init+0x2dc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0x1ea>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a46      	ldr	r2, [pc, #280]	; (80016f8 <HAL_GPIO_Init+0x2e0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d00d      	beq.n	80015fe <HAL_GPIO_Init+0x1e6>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a45      	ldr	r2, [pc, #276]	; (80016fc <HAL_GPIO_Init+0x2e4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d007      	beq.n	80015fa <HAL_GPIO_Init+0x1e2>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a44      	ldr	r2, [pc, #272]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_GPIO_Init+0x1de>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e008      	b.n	8001608 <HAL_GPIO_Init+0x1f0>
 80015f6:	2305      	movs	r3, #5
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x1f0>
 80015fa:	2303      	movs	r3, #3
 80015fc:	e004      	b.n	8001608 <HAL_GPIO_Init+0x1f0>
 80015fe:	2302      	movs	r3, #2
 8001600:	e002      	b.n	8001608 <HAL_GPIO_Init+0x1f0>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_GPIO_Init+0x1f0>
 8001606:	2300      	movs	r3, #0
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	2103      	movs	r1, #3
 800160c:	400a      	ands	r2, r1
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	4093      	lsls	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001618:	4935      	ldr	r1, [pc, #212]	; (80016f0 <HAL_GPIO_Init+0x2d8>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	025b      	lsls	r3, r3, #9
 800163e:	4013      	ands	r3, r2
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43da      	mvns	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	029b      	lsls	r3, r3, #10
 8001668:	4013      	ands	r3, r2
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	035b      	lsls	r3, r3, #13
 8001692:	4013      	ands	r3, r2
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43da      	mvns	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	039b      	lsls	r3, r3, #14
 80016bc:	4013      	ands	r3, r2
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	40da      	lsrs	r2, r3
 80016dc:	1e13      	subs	r3, r2, #0
 80016de:	d000      	beq.n	80016e2 <HAL_GPIO_Init+0x2ca>
 80016e0:	e6a2      	b.n	8001428 <HAL_GPIO_Init+0x10>
  } 
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b006      	add	sp, #24
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	48000800 	.word	0x48000800
 80016fc:	48000c00 	.word	0x48000c00
 8001700:	48001000 	.word	0x48001000
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	0008      	movs	r0, r1
 8001712:	0011      	movs	r1, r2
 8001714:	1cbb      	adds	r3, r7, #2
 8001716:	1c02      	adds	r2, r0, #0
 8001718:	801a      	strh	r2, [r3, #0]
 800171a:	1c7b      	adds	r3, r7, #1
 800171c:	1c0a      	adds	r2, r1, #0
 800171e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001720:	1c7b      	adds	r3, r7, #1
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001728:	1cbb      	adds	r3, r7, #2
 800172a:	881a      	ldrh	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001730:	e003      	b.n	800173a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001732:	1cbb      	adds	r3, r7, #2
 8001734:	881a      	ldrh	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	0002      	movs	r2, r0
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	1dba      	adds	r2, r7, #6
 8001756:	8812      	ldrh	r2, [r2, #0]
 8001758:	4013      	ands	r3, r2
 800175a:	d008      	beq.n	800176e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800175e:	1dba      	adds	r2, r7, #6
 8001760:	8812      	ldrh	r2, [r2, #0]
 8001762:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001764:	1dbb      	adds	r3, r7, #6
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff f825 	bl	80007b8 <HAL_GPIO_EXTI_Callback>
  }
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b002      	add	sp, #8
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e082      	b.n	8001894 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2241      	movs	r2, #65	; 0x41
 8001792:	5c9b      	ldrb	r3, [r3, r2]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d107      	bne.n	80017aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2240      	movs	r2, #64	; 0x40
 800179e:	2100      	movs	r1, #0
 80017a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff f8a5 	bl	80008f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2241      	movs	r2, #65	; 0x41
 80017ae:	2124      	movs	r1, #36	; 0x24
 80017b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	438a      	bics	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4934      	ldr	r1, [pc, #208]	; (800189c <HAL_I2C_Init+0x120>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4931      	ldr	r1, [pc, #196]	; (80018a0 <HAL_I2C_Init+0x124>)
 80017dc:	400a      	ands	r2, r1
 80017de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d108      	bne.n	80017fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	0209      	lsls	r1, r1, #8
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	e007      	b.n	800180a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2184      	movs	r1, #132	; 0x84
 8001804:	0209      	lsls	r1, r1, #8
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d104      	bne.n	800181c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	491f      	ldr	r1, [pc, #124]	; (80018a4 <HAL_I2C_Init+0x128>)
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	491a      	ldr	r1, [pc, #104]	; (80018a0 <HAL_I2C_Init+0x124>)
 8001838:	400a      	ands	r2, r1
 800183a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	431a      	orrs	r2, r3
 8001846:	0011      	movs	r1, r2
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	021a      	lsls	r2, r3, #8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69d9      	ldr	r1, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2241      	movs	r2, #65	; 0x41
 8001880:	2120      	movs	r1, #32
 8001882:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2242      	movs	r2, #66	; 0x42
 800188e:	2100      	movs	r1, #0
 8001890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}
 800189c:	f0ffffff 	.word	0xf0ffffff
 80018a0:	ffff7fff 	.word	0xffff7fff
 80018a4:	02008000 	.word	0x02008000

080018a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2241      	movs	r2, #65	; 0x41
 80018b6:	5c9b      	ldrb	r3, [r3, r2]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	d138      	bne.n	8001930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2240      	movs	r2, #64	; 0x40
 80018c2:	5c9b      	ldrb	r3, [r3, r2]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e032      	b.n	8001932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	2101      	movs	r1, #1
 80018d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2241      	movs	r2, #65	; 0x41
 80018d8:	2124      	movs	r1, #36	; 0x24
 80018da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2101      	movs	r1, #1
 80018e8:	438a      	bics	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2101      	movs	r1, #1
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2241      	movs	r2, #65	; 0x41
 8001920:	2120      	movs	r1, #32
 8001922:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2240      	movs	r2, #64	; 0x40
 8001928:	2100      	movs	r1, #0
 800192a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e000      	b.n	8001932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001930:	2302      	movs	r3, #2
  }
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	ffffefff 	.word	0xffffefff

08001940 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2241      	movs	r2, #65	; 0x41
 800194e:	5c9b      	ldrb	r3, [r3, r2]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b20      	cmp	r3, #32
 8001954:	d139      	bne.n	80019ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2240      	movs	r2, #64	; 0x40
 800195a:	5c9b      	ldrb	r3, [r3, r2]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001960:	2302      	movs	r3, #2
 8001962:	e033      	b.n	80019cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2240      	movs	r2, #64	; 0x40
 8001968:	2101      	movs	r1, #1
 800196a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2241      	movs	r2, #65	; 0x41
 8001970:	2124      	movs	r1, #36	; 0x24
 8001972:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2101      	movs	r1, #1
 8001980:	438a      	bics	r2, r1
 8001982:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2101      	movs	r1, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2241      	movs	r2, #65	; 0x41
 80019ba:	2120      	movs	r1, #32
 80019bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2240      	movs	r2, #64	; 0x40
 80019c2:	2100      	movs	r1, #0
 80019c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
  }
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	fffff0ff 	.word	0xfffff0ff

080019d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f000 fb76 	bl	80020d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2201      	movs	r2, #1
 80019f2:	4013      	ands	r3, r2
 80019f4:	d100      	bne.n	80019f8 <HAL_RCC_OscConfig+0x20>
 80019f6:	e08e      	b.n	8001b16 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019f8:	4bc5      	ldr	r3, [pc, #788]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	220c      	movs	r2, #12
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d00e      	beq.n	8001a22 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a04:	4bc2      	ldr	r3, [pc, #776]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	220c      	movs	r2, #12
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d117      	bne.n	8001a40 <HAL_RCC_OscConfig+0x68>
 8001a10:	4bbf      	ldr	r3, [pc, #764]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	025b      	lsls	r3, r3, #9
 8001a18:	401a      	ands	r2, r3
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d10e      	bne.n	8001a40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a22:	4bbb      	ldr	r3, [pc, #748]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	029b      	lsls	r3, r3, #10
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d100      	bne.n	8001a30 <HAL_RCC_OscConfig+0x58>
 8001a2e:	e071      	b.n	8001b14 <HAL_RCC_OscConfig+0x13c>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d000      	beq.n	8001a3a <HAL_RCC_OscConfig+0x62>
 8001a38:	e06c      	b.n	8001b14 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f000 fb4c 	bl	80020d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x80>
 8001a48:	4bb1      	ldr	r3, [pc, #708]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4bb0      	ldr	r3, [pc, #704]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	0249      	lsls	r1, r1, #9
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	e02f      	b.n	8001ab8 <HAL_RCC_OscConfig+0xe0>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10c      	bne.n	8001a7a <HAL_RCC_OscConfig+0xa2>
 8001a60:	4bab      	ldr	r3, [pc, #684]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4baa      	ldr	r3, [pc, #680]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a66:	49ab      	ldr	r1, [pc, #684]	; (8001d14 <HAL_RCC_OscConfig+0x33c>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4ba8      	ldr	r3, [pc, #672]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4ba7      	ldr	r3, [pc, #668]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a72:	49a9      	ldr	r1, [pc, #676]	; (8001d18 <HAL_RCC_OscConfig+0x340>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e01e      	b.n	8001ab8 <HAL_RCC_OscConfig+0xe0>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	d10e      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xc8>
 8001a82:	4ba3      	ldr	r3, [pc, #652]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4ba2      	ldr	r3, [pc, #648]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	02c9      	lsls	r1, r1, #11
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	4b9f      	ldr	r3, [pc, #636]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b9e      	ldr	r3, [pc, #632]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	0249      	lsls	r1, r1, #9
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xe0>
 8001aa0:	4b9b      	ldr	r3, [pc, #620]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b9a      	ldr	r3, [pc, #616]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001aa6:	499b      	ldr	r1, [pc, #620]	; (8001d14 <HAL_RCC_OscConfig+0x33c>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	4b98      	ldr	r3, [pc, #608]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b97      	ldr	r3, [pc, #604]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001ab2:	4999      	ldr	r1, [pc, #612]	; (8001d18 <HAL_RCC_OscConfig+0x340>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d014      	beq.n	8001aea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fa1c 	bl	8000efc <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aca:	f7ff fa17 	bl	8000efc <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e2fd      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001adc:	4b8c      	ldr	r3, [pc, #560]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	029b      	lsls	r3, r3, #10
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0xf2>
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff fa07 	bl	8000efc <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fa02 	bl	8000efc <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e2e8      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	4b82      	ldr	r3, [pc, #520]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	029b      	lsls	r3, r3, #10
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x11c>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_OscConfig+0x14a>
 8001b20:	e06c      	b.n	8001bfc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b22:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	220c      	movs	r2, #12
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d00e      	beq.n	8001b4a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	220c      	movs	r2, #12
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d11f      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1a0>
 8001b38:	4b75      	ldr	r3, [pc, #468]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	23c0      	movs	r3, #192	; 0xc0
 8001b3e:	025b      	lsls	r3, r3, #9
 8001b40:	401a      	ands	r2, r3
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d116      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	4b71      	ldr	r3, [pc, #452]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_OscConfig+0x188>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e2bb      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b6b      	ldr	r3, [pc, #428]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	22f8      	movs	r2, #248	; 0xf8
 8001b66:	4393      	bics	r3, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00da      	lsls	r2, r3, #3
 8001b70:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	e041      	b.n	8001bfc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d024      	beq.n	8001bca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b80:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f9b6 	bl	8000efc <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b96:	f7ff f9b1 	bl	8000efc <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e297      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2202      	movs	r2, #2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d0f1      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	22f8      	movs	r2, #248	; 0xf8
 8001bb8:	4393      	bics	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	00da      	lsls	r2, r3, #3
 8001bc2:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e018      	b.n	8001bfc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bca:	4b51      	ldr	r3, [pc, #324]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	438a      	bics	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff f991 	bl	8000efc <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff f98c 	bl	8000efc <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e272      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d1f1      	bne.n	8001be0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2208      	movs	r2, #8
 8001c02:	4013      	ands	r3, r2
 8001c04:	d036      	beq.n	8001c74 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d019      	beq.n	8001c42 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0e:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001c14:	2101      	movs	r1, #1
 8001c16:	430a      	orrs	r2, r1
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff f96f 	bl	8000efc <HAL_GetTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff f96a 	bl	8000efc <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e250      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d0f1      	beq.n	8001c24 <HAL_RCC_OscConfig+0x24c>
 8001c40:	e018      	b.n	8001c74 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c42:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	438a      	bics	r2, r1
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f955 	bl	8000efc <HAL_GetTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff f950 	bl	8000efc <HAL_GetTick>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e236      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	2202      	movs	r2, #2
 8001c70:	4013      	ands	r3, r2
 8001c72:	d1f1      	bne.n	8001c58 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <HAL_RCC_OscConfig+0x2a8>
 8001c7e:	e0b5      	b.n	8001dec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c80:	231f      	movs	r3, #31
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	055b      	lsls	r3, r3, #21
 8001c90:	4013      	ands	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	0549      	lsls	r1, r1, #21
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	61da      	str	r2, [r3, #28]
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	055b      	lsls	r3, r3, #21
 8001caa:	4013      	ands	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cb0:	231f      	movs	r3, #31
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_RCC_OscConfig+0x344>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d11a      	bne.n	8001cfa <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_RCC_OscConfig+0x344>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_RCC_OscConfig+0x344>)
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	0049      	lsls	r1, r1, #1
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f913 	bl	8000efc <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cdc:	f7ff f90e 	bl	8000efc <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1f4      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_OscConfig+0x344>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10e      	bne.n	8001d20 <HAL_RCC_OscConfig+0x348>
 8001d02:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001d04:	6a1a      	ldr	r2, [r3, #32]
 8001d06:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	621a      	str	r2, [r3, #32]
 8001d0e:	e035      	b.n	8001d7c <HAL_RCC_OscConfig+0x3a4>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	fffeffff 	.word	0xfffeffff
 8001d18:	fffbffff 	.word	0xfffbffff
 8001d1c:	40007000 	.word	0x40007000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x36a>
 8001d28:	4bca      	ldr	r3, [pc, #808]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	4bc9      	ldr	r3, [pc, #804]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d2e:	2101      	movs	r1, #1
 8001d30:	438a      	bics	r2, r1
 8001d32:	621a      	str	r2, [r3, #32]
 8001d34:	4bc7      	ldr	r3, [pc, #796]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d36:	6a1a      	ldr	r2, [r3, #32]
 8001d38:	4bc6      	ldr	r3, [pc, #792]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	621a      	str	r2, [r3, #32]
 8001d40:	e01c      	b.n	8001d7c <HAL_RCC_OscConfig+0x3a4>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x38c>
 8001d4a:	4bc2      	ldr	r3, [pc, #776]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d4c:	6a1a      	ldr	r2, [r3, #32]
 8001d4e:	4bc1      	ldr	r3, [pc, #772]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d50:	2104      	movs	r1, #4
 8001d52:	430a      	orrs	r2, r1
 8001d54:	621a      	str	r2, [r3, #32]
 8001d56:	4bbf      	ldr	r3, [pc, #764]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d58:	6a1a      	ldr	r2, [r3, #32]
 8001d5a:	4bbe      	ldr	r3, [pc, #760]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	621a      	str	r2, [r3, #32]
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0x3a4>
 8001d64:	4bbb      	ldr	r3, [pc, #748]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d66:	6a1a      	ldr	r2, [r3, #32]
 8001d68:	4bba      	ldr	r3, [pc, #744]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	621a      	str	r2, [r3, #32]
 8001d70:	4bb8      	ldr	r3, [pc, #736]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d72:	6a1a      	ldr	r2, [r3, #32]
 8001d74:	4bb7      	ldr	r3, [pc, #732]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001d76:	2104      	movs	r1, #4
 8001d78:	438a      	bics	r2, r1
 8001d7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d014      	beq.n	8001dae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7ff f8ba 	bl	8000efc <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	e009      	b.n	8001da2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7ff f8b5 	bl	8000efc <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4aaf      	ldr	r2, [pc, #700]	; (8002058 <HAL_RCC_OscConfig+0x680>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e19a      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da2:	4bac      	ldr	r3, [pc, #688]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x3b6>
 8001dac:	e013      	b.n	8001dd6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f8a5 	bl	8000efc <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db6:	e009      	b.n	8001dcc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7ff f8a0 	bl	8000efc <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	4aa5      	ldr	r2, [pc, #660]	; (8002058 <HAL_RCC_OscConfig+0x680>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e185      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dcc:	4ba1      	ldr	r3, [pc, #644]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dd6:	231f      	movs	r3, #31
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de0:	4b9c      	ldr	r3, [pc, #624]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	4b9b      	ldr	r3, [pc, #620]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001de6:	499d      	ldr	r1, [pc, #628]	; (800205c <HAL_RCC_OscConfig+0x684>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2210      	movs	r2, #16
 8001df2:	4013      	ands	r3, r2
 8001df4:	d063      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d12a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dfe:	4b95      	ldr	r3, [pc, #596]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e02:	4b94      	ldr	r3, [pc, #592]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e04:	2104      	movs	r1, #4
 8001e06:	430a      	orrs	r2, r1
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e0a:	4b92      	ldr	r3, [pc, #584]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e0e:	4b91      	ldr	r3, [pc, #580]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff f871 	bl	8000efc <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e20:	f7ff f86c 	bl	8000efc <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e152      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f1      	beq.n	8001e20 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e3c:	4b85      	ldr	r3, [pc, #532]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e40:	22f8      	movs	r2, #248	; 0xf8
 8001e42:	4393      	bics	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	00da      	lsls	r2, r3, #3
 8001e4c:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
 8001e52:	e034      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	3305      	adds	r3, #5
 8001e5a:	d111      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e60:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e62:	2104      	movs	r1, #4
 8001e64:	438a      	bics	r2, r1
 8001e66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e68:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	22f8      	movs	r2, #248	; 0xf8
 8001e6e:	4393      	bics	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	00da      	lsls	r2, r3, #3
 8001e78:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e7e:	e01e      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e80:	4b74      	ldr	r3, [pc, #464]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e84:	4b73      	ldr	r3, [pc, #460]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e86:	2104      	movs	r1, #4
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e8c:	4b71      	ldr	r3, [pc, #452]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e90:	4b70      	ldr	r3, [pc, #448]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	438a      	bics	r2, r1
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff f830 	bl	8000efc <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ea2:	f7ff f82b 	bl	8000efc <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e111      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001eb4:	4b67      	ldr	r3, [pc, #412]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d1f1      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d05c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ec8:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	220c      	movs	r2, #12
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ed4:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	220c      	movs	r2, #12
 8001eda:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d114      	bne.n	8001f0a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ee0:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	23c0      	movs	r3, #192	; 0xc0
 8001ee6:	025b      	lsls	r3, r3, #9
 8001ee8:	401a      	ands	r2, r3
 8001eea:	23c0      	movs	r3, #192	; 0xc0
 8001eec:	025b      	lsls	r3, r3, #9
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d10b      	bne.n	8001f0a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ef2:	4b58      	ldr	r3, [pc, #352]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	025b      	lsls	r3, r3, #9
 8001efa:	4013      	ands	r3, r2
 8001efc:	d040      	beq.n	8001f80 <HAL_RCC_OscConfig+0x5a8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d03c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0e6      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f12:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f16:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	0249      	lsls	r1, r1, #9
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe ffec 	bl	8000efc <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f2a:	f7fe ffe7 	bl	8000efc <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0cd      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f3c:	4b45      	ldr	r3, [pc, #276]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	4013      	ands	r3, r2
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x552>
 8001f48:	e01b      	b.n	8001f82 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f4a:	4b42      	ldr	r3, [pc, #264]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	4943      	ldr	r1, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x688>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe ffd1 	bl	8000efc <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f60:	f7fe ffcc 	bl	8000efc <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0b2      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f72:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	025b      	lsls	r3, r3, #9
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x588>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f80:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d100      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5b4>
 8001f8a:	e0a4      	b.n	80020d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	220c      	movs	r2, #12
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d100      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5c2>
 8001f98:	e078      	b.n	800208c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d14c      	bne.n	800203c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	492e      	ldr	r1, [pc, #184]	; (8002064 <HAL_RCC_OscConfig+0x68c>)
 8001faa:	400a      	ands	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7fe ffa5 	bl	8000efc <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe ffa0 	bl	8000efc <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e086      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	049b      	lsls	r3, r3, #18
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	220f      	movs	r2, #15
 8001fdc:	4393      	bics	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_RCC_OscConfig+0x690>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8002000:	430a      	orrs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	0449      	lsls	r1, r1, #17
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe ff73 	bl	8000efc <HAL_GetTick>
 8002016:	0003      	movs	r3, r0
 8002018:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe ff6e 	bl	8000efc <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e054      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	049b      	lsls	r3, r3, #18
 8002036:	4013      	ands	r3, r2
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x644>
 800203a:	e04c      	b.n	80020d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_RCC_OscConfig+0x67c>)
 8002042:	4908      	ldr	r1, [pc, #32]	; (8002064 <HAL_RCC_OscConfig+0x68c>)
 8002044:	400a      	ands	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe ff58 	bl	8000efc <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x6a6>
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	40021000 	.word	0x40021000
 8002058:	00001388 	.word	0x00001388
 800205c:	efffffff 	.word	0xefffffff
 8002060:	fffeffff 	.word	0xfffeffff
 8002064:	feffffff 	.word	0xfeffffff
 8002068:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe ff46 	bl	8000efc <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e02c      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_RCC_OscConfig+0x708>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	049b      	lsls	r3, r3, #18
 8002086:	4013      	ands	r3, r2
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x694>
 800208a:	e024      	b.n	80020d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e01f      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_RCC_OscConfig+0x708>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCC_OscConfig+0x708>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	23c0      	movs	r3, #192	; 0xc0
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	401a      	ands	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d10e      	bne.n	80020d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	220f      	movs	r2, #15
 80020b8:	401a      	ands	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	23f0      	movs	r3, #240	; 0xf0
 80020c6:	039b      	lsls	r3, r3, #14
 80020c8:	401a      	ands	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b008      	add	sp, #32
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0bf      	b.n	8002278 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b61      	ldr	r3, [pc, #388]	; (8002280 <HAL_RCC_ClockConfig+0x19c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d911      	bls.n	800212a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <HAL_RCC_ClockConfig+0x19c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2201      	movs	r2, #1
 800210c:	4393      	bics	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <HAL_RCC_ClockConfig+0x19c>)
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_ClockConfig+0x19c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0a6      	b.n	8002278 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2202      	movs	r2, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d015      	beq.n	8002160 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2204      	movs	r2, #4
 800213a:	4013      	ands	r3, r2
 800213c:	d006      	beq.n	800214c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800213e:	4b51      	ldr	r3, [pc, #324]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4b50      	ldr	r3, [pc, #320]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 8002144:	21e0      	movs	r1, #224	; 0xe0
 8002146:	00c9      	lsls	r1, r1, #3
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	22f0      	movs	r2, #240	; 0xf0
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	4b4a      	ldr	r3, [pc, #296]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	d04c      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b44      	ldr	r3, [pc, #272]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	029b      	lsls	r3, r3, #10
 800217a:	4013      	ands	r3, r2
 800217c:	d120      	bne.n	80021c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07a      	b.n	8002278 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	049b      	lsls	r3, r3, #18
 8002192:	4013      	ands	r3, r2
 8002194:	d114      	bne.n	80021c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06e      	b.n	8002278 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 80021a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	025b      	lsls	r3, r3, #9
 80021aa:	4013      	ands	r3, r2
 80021ac:	d108      	bne.n	80021c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e062      	b.n	8002278 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b34      	ldr	r3, [pc, #208]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2202      	movs	r2, #2
 80021b8:	4013      	ands	r3, r2
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e05b      	b.n	8002278 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c0:	4b30      	ldr	r3, [pc, #192]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2203      	movs	r2, #3
 80021c6:	4393      	bics	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7fe fe92 	bl	8000efc <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021dc:	e009      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021de:	f7fe fe8d 	bl	8000efc <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	4a27      	ldr	r2, [pc, #156]	; (8002288 <HAL_RCC_ClockConfig+0x1a4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e042      	b.n	8002278 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	220c      	movs	r2, #12
 80021f8:	401a      	ands	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1ec      	bne.n	80021de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_RCC_ClockConfig+0x19c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	4013      	ands	r3, r2
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d211      	bcs.n	8002236 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_RCC_ClockConfig+0x19c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	4393      	bics	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_RCC_ClockConfig+0x19c>)
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_RCC_ClockConfig+0x19c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2201      	movs	r2, #1
 800222a:	4013      	ands	r3, r2
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d001      	beq.n	8002236 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e020      	b.n	8002278 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2204      	movs	r2, #4
 800223c:	4013      	ands	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_RCC_ClockConfig+0x1a8>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002254:	f000 f820 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002258:	0001      	movs	r1, r0
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x1a0>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	220f      	movs	r2, #15
 8002262:	4013      	ands	r3, r2
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_RCC_ClockConfig+0x1ac>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	000a      	movs	r2, r1
 800226a:	40da      	lsrs	r2, r3
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_ClockConfig+0x1b0>)
 800226e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002270:	2000      	movs	r0, #0
 8002272:	f7fe fdfd 	bl	8000e70 <HAL_InitTick>
  
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40022000 	.word	0x40022000
 8002284:	40021000 	.word	0x40021000
 8002288:	00001388 	.word	0x00001388
 800228c:	fffff8ff 	.word	0xfffff8ff
 8002290:	08004a4c 	.word	0x08004a4c
 8002294:	20000000 	.word	0x20000000

08002298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b08f      	sub	sp, #60	; 0x3c
 800229c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800229e:	2314      	movs	r3, #20
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	4a37      	ldr	r2, [pc, #220]	; (8002380 <HAL_RCC_GetSysClockFreq+0xe8>)
 80022a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022a6:	c313      	stmia	r3!, {r0, r1, r4}
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4a35      	ldr	r2, [pc, #212]	; (8002384 <HAL_RCC_GetSysClockFreq+0xec>)
 80022b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022b2:	c313      	stmia	r3!, {r0, r1, r4}
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c0:	2300      	movs	r3, #0
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80022cc:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCC_GetSysClockFreq+0xf0>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	220c      	movs	r2, #12
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d006      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x52>
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d043      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0xd0>
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d144      	bne.n	800236e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_RCC_GetSysClockFreq+0xf4>)
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e8:	e044      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	0c9b      	lsrs	r3, r3, #18
 80022ee:	220f      	movs	r2, #15
 80022f0:	4013      	ands	r3, r2
 80022f2:	2214      	movs	r2, #20
 80022f4:	18ba      	adds	r2, r7, r2
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022fa:	4b23      	ldr	r3, [pc, #140]	; (8002388 <HAL_RCC_GetSysClockFreq+0xf0>)
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	220f      	movs	r2, #15
 8002300:	4013      	ands	r3, r2
 8002302:	1d3a      	adds	r2, r7, #4
 8002304:	5cd3      	ldrb	r3, [r2, r3]
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230a:	23c0      	movs	r3, #192	; 0xc0
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	401a      	ands	r2, r3
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	025b      	lsls	r3, r3, #9
 8002314:	429a      	cmp	r2, r3
 8002316:	d109      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800231a:	481c      	ldr	r0, [pc, #112]	; (800238c <HAL_RCC_GetSysClockFreq+0xf4>)
 800231c:	f7fd fef4 	bl	8000108 <__udivsi3>
 8002320:	0003      	movs	r3, r0
 8002322:	001a      	movs	r2, r3
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	4353      	muls	r3, r2
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
 800232a:	e01a      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800232c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800232e:	23c0      	movs	r3, #192	; 0xc0
 8002330:	025b      	lsls	r3, r3, #9
 8002332:	401a      	ands	r2, r3
 8002334:	23c0      	movs	r3, #192	; 0xc0
 8002336:	025b      	lsls	r3, r3, #9
 8002338:	429a      	cmp	r2, r3
 800233a:	d109      	bne.n	8002350 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800233c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800233e:	4814      	ldr	r0, [pc, #80]	; (8002390 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002340:	f7fd fee2 	bl	8000108 <__udivsi3>
 8002344:	0003      	movs	r3, r0
 8002346:	001a      	movs	r2, r3
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	4353      	muls	r3, r2
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
 800234e:	e008      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002352:	480e      	ldr	r0, [pc, #56]	; (800238c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002354:	f7fd fed8 	bl	8000108 <__udivsi3>
 8002358:	0003      	movs	r3, r0
 800235a:	001a      	movs	r2, r3
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	4353      	muls	r3, r2
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002364:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002366:	e005      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_GetSysClockFreq+0xf8>)
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800236c:	e002      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002372:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b00f      	add	sp, #60	; 0x3c
 800237c:	bd90      	pop	{r4, r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	08004a2c 	.word	0x08004a2c
 8002384:	08004a3c 	.word	0x08004a3c
 8002388:	40021000 	.word	0x40021000
 800238c:	007a1200 	.word	0x007a1200
 8002390:	02dc6c00 	.word	0x02dc6c00

08002394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	20000000 	.word	0x20000000

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80023ac:	f7ff fff2 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b0:	0001      	movs	r1, r0
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	2207      	movs	r2, #7
 80023ba:	4013      	ands	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	40d9      	lsrs	r1, r3
 80023c2:	000b      	movs	r3, r1
}    
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	40021000 	.word	0x40021000
 80023d0:	08004a5c 	.word	0x08004a5c

080023d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	4013      	ands	r3, r2
 80023ee:	d100      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80023f0:	e08f      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2317      	movs	r3, #23
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	055b      	lsls	r3, r3, #21
 8002402:	4013      	ands	r3, r2
 8002404:	d111      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b6c      	ldr	r3, [pc, #432]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	0549      	lsls	r1, r1, #21
 8002410:	430a      	orrs	r2, r1
 8002412:	61da      	str	r2, [r3, #28]
 8002414:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2317      	movs	r3, #23
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	4b64      	ldr	r3, [pc, #400]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4013      	ands	r3, r2
 8002434:	d11a      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002436:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b60      	ldr	r3, [pc, #384]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0049      	lsls	r1, r1, #1
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002444:	f7fe fd5a 	bl	8000efc <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7fe fd55 	bl	8000efc <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0a6      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b56      	ldr	r3, [pc, #344]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4013      	ands	r3, r2
 800246a:	d0f0      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800246c:	4b52      	ldr	r3, [pc, #328]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	23c0      	movs	r3, #192	; 0xc0
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d034      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	23c0      	movs	r3, #192	; 0xc0
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4013      	ands	r3, r2
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	429a      	cmp	r2, r3
 800248c:	d02c      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002498:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	0249      	lsls	r1, r1, #9
 80024a2:	430a      	orrs	r2, r1
 80024a4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024ac:	4945      	ldr	r1, [pc, #276]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80024ae:	400a      	ands	r2, r1
 80024b0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	d013      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fd1c 	bl	8000efc <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	e009      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fd17 	bl	8000efc <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	4a3c      	ldr	r2, [pc, #240]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e067      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	2202      	movs	r2, #2
 80024e4:	4013      	ands	r3, r2
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e8:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a34      	ldr	r2, [pc, #208]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024f8:	430a      	orrs	r2, r1
 80024fa:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024fc:	2317      	movs	r3, #23
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002508:	69da      	ldr	r2, [r3, #28]
 800250a:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800250c:	492f      	ldr	r1, [pc, #188]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800250e:	400a      	ands	r2, r1
 8002510:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	2203      	movs	r2, #3
 8002522:	4393      	bics	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800252c:	430a      	orrs	r2, r1
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2202      	movs	r2, #2
 8002536:	4013      	ands	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800253a:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a24      	ldr	r2, [pc, #144]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002540:	4013      	ands	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800254a:	430a      	orrs	r2, r1
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	4013      	ands	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	2210      	movs	r2, #16
 800255e:	4393      	bics	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002568:	430a      	orrs	r2, r1
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	029b      	lsls	r3, r3, #10
 8002574:	4013      	ands	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	4393      	bics	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002588:	430a      	orrs	r2, r1
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4013      	ands	r3, r2
 8002596:	d009      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	4393      	bics	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025a8:	430a      	orrs	r2, r1
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b006      	add	sp, #24
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
 80025c0:	fffffcff 	.word	0xfffffcff
 80025c4:	fffeffff 	.word	0xfffeffff
 80025c8:	00001388 	.word	0x00001388
 80025cc:	efffffff 	.word	0xefffffff
 80025d0:	fffcffff 	.word	0xfffcffff

080025d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e042      	b.n	800266c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	223d      	movs	r2, #61	; 0x3d
 80025ea:	5c9b      	ldrb	r3, [r3, r2]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223c      	movs	r2, #60	; 0x3c
 80025f6:	2100      	movs	r1, #0
 80025f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7fe f9c7 	bl	8000990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223d      	movs	r2, #61	; 0x3d
 8002606:	2102      	movs	r1, #2
 8002608:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	0019      	movs	r1, r3
 8002614:	0010      	movs	r0, r2
 8002616:	f000 fac5 	bl	8002ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2246      	movs	r2, #70	; 0x46
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	223e      	movs	r2, #62	; 0x3e
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	223f      	movs	r2, #63	; 0x3f
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2240      	movs	r2, #64	; 0x40
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2241      	movs	r2, #65	; 0x41
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2242      	movs	r2, #66	; 0x42
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2243      	movs	r2, #67	; 0x43
 800264e:	2101      	movs	r1, #1
 8002650:	5499      	strb	r1, [r3, r2]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2244      	movs	r2, #68	; 0x44
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2245      	movs	r2, #69	; 0x45
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223d      	movs	r2, #61	; 0x3d
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	223d      	movs	r2, #61	; 0x3d
 8002680:	5c9b      	ldrb	r3, [r3, r2]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d001      	beq.n	800268c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e033      	b.n	80026f4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	223d      	movs	r2, #61	; 0x3d
 8002690:	2102      	movs	r1, #2
 8002692:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a18      	ldr	r2, [pc, #96]	; (80026fc <HAL_TIM_Base_Start+0x88>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00f      	beq.n	80026be <HAL_TIM_Base_Start+0x4a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d009      	beq.n	80026be <HAL_TIM_Base_Start+0x4a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <HAL_TIM_Base_Start+0x8c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d004      	beq.n	80026be <HAL_TIM_Base_Start+0x4a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a12      	ldr	r2, [pc, #72]	; (8002704 <HAL_TIM_Base_Start+0x90>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d111      	bne.n	80026e2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2207      	movs	r2, #7
 80026c6:	4013      	ands	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b06      	cmp	r3, #6
 80026ce:	d010      	beq.n	80026f2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2101      	movs	r1, #1
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	e007      	b.n	80026f2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b004      	add	sp, #16
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40012c00 	.word	0x40012c00
 8002700:	40000400 	.word	0x40000400
 8002704:	40014000 	.word	0x40014000

08002708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223d      	movs	r2, #61	; 0x3d
 8002714:	5c9b      	ldrb	r3, [r3, r2]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d001      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e03b      	b.n	8002798 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	223d      	movs	r2, #61	; 0x3d
 8002724:	2102      	movs	r1, #2
 8002726:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2101      	movs	r1, #1
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_TIM_Base_Start_IT+0x98>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00f      	beq.n	8002762 <HAL_TIM_Base_Start_IT+0x5a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	05db      	lsls	r3, r3, #23
 800274a:	429a      	cmp	r2, r3
 800274c:	d009      	beq.n	8002762 <HAL_TIM_Base_Start_IT+0x5a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d004      	beq.n	8002762 <HAL_TIM_Base_Start_IT+0x5a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d111      	bne.n	8002786 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2207      	movs	r2, #7
 800276a:	4013      	ands	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b06      	cmp	r3, #6
 8002772:	d010      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	e007      	b.n	8002796 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b004      	add	sp, #16
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40014000 	.word	0x40014000

080027ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d124      	bne.n	800280c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2202      	movs	r2, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d11d      	bne.n	800280c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2203      	movs	r2, #3
 80027d6:	4252      	negs	r2, r2
 80027d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2203      	movs	r2, #3
 80027e8:	4013      	ands	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 f9c0 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e007      	b.n	8002806 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 f9b3 	bl	8002b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 f9bf 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2204      	movs	r2, #4
 8002814:	4013      	ands	r3, r2
 8002816:	2b04      	cmp	r3, #4
 8002818:	d125      	bne.n	8002866 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2204      	movs	r2, #4
 8002822:	4013      	ands	r3, r2
 8002824:	2b04      	cmp	r3, #4
 8002826:	d11e      	bne.n	8002866 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2205      	movs	r2, #5
 800282e:	4252      	negs	r2, r2
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	23c0      	movs	r3, #192	; 0xc0
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4013      	ands	r3, r2
 8002844:	d004      	beq.n	8002850 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0018      	movs	r0, r3
 800284a:	f000 f993 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 800284e:	e007      	b.n	8002860 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0018      	movs	r0, r3
 8002854:	f000 f986 	bl	8002b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f992 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2208      	movs	r2, #8
 800286e:	4013      	ands	r3, r2
 8002870:	2b08      	cmp	r3, #8
 8002872:	d124      	bne.n	80028be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2208      	movs	r2, #8
 800287c:	4013      	ands	r3, r2
 800287e:	2b08      	cmp	r3, #8
 8002880:	d11d      	bne.n	80028be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2209      	movs	r2, #9
 8002888:	4252      	negs	r2, r2
 800288a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2204      	movs	r2, #4
 8002890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	2203      	movs	r2, #3
 800289a:	4013      	ands	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 f967 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 80028a6:	e007      	b.n	80028b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 f95a 	bl	8002b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 f966 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2210      	movs	r2, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d125      	bne.n	8002918 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2210      	movs	r2, #16
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d11e      	bne.n	8002918 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2211      	movs	r2, #17
 80028e0:	4252      	negs	r2, r2
 80028e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2208      	movs	r2, #8
 80028e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	23c0      	movs	r3, #192	; 0xc0
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4013      	ands	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 f93a 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 8002900:	e007      	b.n	8002912 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 f92d 	bl	8002b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 f939 	bl	8002b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2201      	movs	r2, #1
 8002920:	4013      	ands	r3, r2
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10f      	bne.n	8002946 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	4013      	ands	r3, r2
 8002930:	2b01      	cmp	r3, #1
 8002932:	d108      	bne.n	8002946 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2202      	movs	r2, #2
 800293a:	4252      	negs	r2, r2
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	0018      	movs	r0, r3
 8002942:	f000 f907 	bl	8002b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	4013      	ands	r3, r2
 8002950:	2b80      	cmp	r3, #128	; 0x80
 8002952:	d10f      	bne.n	8002974 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	4013      	ands	r3, r2
 800295e:	2b80      	cmp	r3, #128	; 0x80
 8002960:	d108      	bne.n	8002974 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2281      	movs	r2, #129	; 0x81
 8002968:	4252      	negs	r2, r2
 800296a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 fa98 	bl	8002ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2240      	movs	r2, #64	; 0x40
 800297c:	4013      	ands	r3, r2
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d10f      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2240      	movs	r2, #64	; 0x40
 800298a:	4013      	ands	r3, r2
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d108      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2241      	movs	r2, #65	; 0x41
 8002996:	4252      	negs	r2, r2
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0018      	movs	r0, r3
 800299e:	f000 f8f9 	bl	8002b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2220      	movs	r2, #32
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d10f      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d108      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2221      	movs	r2, #33	; 0x21
 80029c4:	4252      	negs	r2, r2
 80029c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fa62 	bl	8002e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	223c      	movs	r2, #60	; 0x3c
 80029e6:	5c9b      	ldrb	r3, [r3, r2]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_TIM_ConfigClockSource+0x18>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e0ab      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x170>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	223c      	movs	r2, #60	; 0x3c
 80029f4:	2101      	movs	r1, #1
 80029f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	223d      	movs	r2, #61	; 0x3d
 80029fc:	2102      	movs	r1, #2
 80029fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2277      	movs	r2, #119	; 0x77
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a4f      	ldr	r2, [pc, #316]	; (8002b50 <HAL_TIM_ConfigClockSource+0x178>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d100      	bne.n	8002a2a <HAL_TIM_ConfigClockSource+0x52>
 8002a28:	e06b      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x12a>
 8002a2a:	d80e      	bhi.n	8002a4a <HAL_TIM_ConfigClockSource+0x72>
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d100      	bne.n	8002a32 <HAL_TIM_ConfigClockSource+0x5a>
 8002a30:	e077      	b.n	8002b22 <HAL_TIM_ConfigClockSource+0x14a>
 8002a32:	d803      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x64>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d100      	bne.n	8002a3a <HAL_TIM_ConfigClockSource+0x62>
 8002a38:	e073      	b.n	8002b22 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a3a:	e07c      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d100      	bne.n	8002a42 <HAL_TIM_ConfigClockSource+0x6a>
 8002a40:	e06f      	b.n	8002b22 <HAL_TIM_ConfigClockSource+0x14a>
 8002a42:	2b30      	cmp	r3, #48	; 0x30
 8002a44:	d100      	bne.n	8002a48 <HAL_TIM_ConfigClockSource+0x70>
 8002a46:	e06c      	b.n	8002b22 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002a48:	e075      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002a4a:	2b70      	cmp	r3, #112	; 0x70
 8002a4c:	d00e      	beq.n	8002a6c <HAL_TIM_ConfigClockSource+0x94>
 8002a4e:	d804      	bhi.n	8002a5a <HAL_TIM_ConfigClockSource+0x82>
 8002a50:	2b50      	cmp	r3, #80	; 0x50
 8002a52:	d036      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0xea>
 8002a54:	2b60      	cmp	r3, #96	; 0x60
 8002a56:	d044      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002a58:	e06d      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	0152      	lsls	r2, r2, #5
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d068      	beq.n	8002b34 <HAL_TIM_ConfigClockSource+0x15c>
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	0192      	lsls	r2, r2, #6
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d017      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002a6a:	e064      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6899      	ldr	r1, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f000 f98c 	bl	8002d98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2277      	movs	r2, #119	; 0x77
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
      break;
 8002a98:	e04d      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6899      	ldr	r1, [r3, #8]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f000 f975 	bl	8002d98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2180      	movs	r1, #128	; 0x80
 8002aba:	01c9      	lsls	r1, r1, #7
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
      break;
 8002ac0:	e039      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	001a      	movs	r2, r3
 8002ad0:	f000 f8e8 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2150      	movs	r1, #80	; 0x50
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 f942 	bl	8002d64 <TIM_ITRx_SetConfig>
      break;
 8002ae0:	e029      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	001a      	movs	r2, r3
 8002af0:	f000 f906 	bl	8002d00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2160      	movs	r1, #96	; 0x60
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 f932 	bl	8002d64 <TIM_ITRx_SetConfig>
      break;
 8002b00:	e019      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	001a      	movs	r2, r3
 8002b10:	f000 f8c8 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2140      	movs	r1, #64	; 0x40
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 f922 	bl	8002d64 <TIM_ITRx_SetConfig>
      break;
 8002b20:	e009      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	f000 f919 	bl	8002d64 <TIM_ITRx_SetConfig>
        break;
 8002b32:	e000      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002b34:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	223d      	movs	r2, #61	; 0x3d
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	223c      	movs	r2, #60	; 0x3c
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	ffff00ff 	.word	0xffff00ff

08002b54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a34      	ldr	r2, [pc, #208]	; (8002c88 <TIM_Base_SetConfig+0xe4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d008      	beq.n	8002bce <TIM_Base_SetConfig+0x2a>
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	05db      	lsls	r3, r3, #23
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d003      	beq.n	8002bce <TIM_Base_SetConfig+0x2a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a30      	ldr	r2, [pc, #192]	; (8002c8c <TIM_Base_SetConfig+0xe8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d108      	bne.n	8002be0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2270      	movs	r2, #112	; 0x70
 8002bd2:	4393      	bics	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <TIM_Base_SetConfig+0xe4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d018      	beq.n	8002c1a <TIM_Base_SetConfig+0x76>
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	05db      	lsls	r3, r3, #23
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d013      	beq.n	8002c1a <TIM_Base_SetConfig+0x76>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <TIM_Base_SetConfig+0xe8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00f      	beq.n	8002c1a <TIM_Base_SetConfig+0x76>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <TIM_Base_SetConfig+0xec>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00b      	beq.n	8002c1a <TIM_Base_SetConfig+0x76>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a23      	ldr	r2, [pc, #140]	; (8002c94 <TIM_Base_SetConfig+0xf0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <TIM_Base_SetConfig+0x76>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <TIM_Base_SetConfig+0xf4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d003      	beq.n	8002c1a <TIM_Base_SetConfig+0x76>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <TIM_Base_SetConfig+0xf8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <TIM_Base_SetConfig+0xfc>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	4393      	bics	r3, r2
 8002c32:	001a      	movs	r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <TIM_Base_SetConfig+0xe4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00b      	beq.n	8002c72 <TIM_Base_SetConfig+0xce>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <TIM_Base_SetConfig+0xf0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d007      	beq.n	8002c72 <TIM_Base_SetConfig+0xce>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <TIM_Base_SetConfig+0xf4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d003      	beq.n	8002c72 <TIM_Base_SetConfig+0xce>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <TIM_Base_SetConfig+0xf8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d103      	bne.n	8002c7a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	615a      	str	r2, [r3, #20]
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b004      	add	sp, #16
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40002000 	.word	0x40002000
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40014800 	.word	0x40014800
 8002ca0:	fffffcff 	.word	0xfffffcff

08002ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	22f0      	movs	r2, #240	; 0xf0
 8002cce:	4393      	bics	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	220a      	movs	r2, #10
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	621a      	str	r2, [r3, #32]
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b006      	add	sp, #24
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	2210      	movs	r2, #16
 8002d12:	4393      	bics	r3, r2
 8002d14:	001a      	movs	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	4a0d      	ldr	r2, [pc, #52]	; (8002d60 <TIM_TI2_ConfigInputStage+0x60>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	031b      	lsls	r3, r3, #12
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	22a0      	movs	r2, #160	; 0xa0
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b006      	add	sp, #24
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	ffff0fff 	.word	0xffff0fff

08002d64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2270      	movs	r2, #112	; 0x70
 8002d78:	4393      	bics	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	2207      	movs	r2, #7
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	609a      	str	r2, [r3, #8]
}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <TIM_ETR_SetConfig+0x3c>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b006      	add	sp, #24
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	ffff00ff 	.word	0xffff00ff

08002dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	223c      	movs	r2, #60	; 0x3c
 8002de6:	5c9b      	ldrb	r3, [r3, r2]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e047      	b.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	223c      	movs	r2, #60	; 0x3c
 8002df4:	2101      	movs	r1, #1
 8002df6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	223d      	movs	r2, #61	; 0x3d
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2270      	movs	r2, #112	; 0x70
 8002e14:	4393      	bics	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00f      	beq.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	05db      	lsls	r3, r3, #23
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d009      	beq.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10c      	bne.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	4393      	bics	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	223d      	movs	r2, #61	; 0x3d
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	223c      	movs	r2, #60	; 0x3c
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b004      	add	sp, #16
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	40014000 	.word	0x40014000

08002e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e044      	b.n	8002f50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d107      	bne.n	8002ede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2274      	movs	r2, #116	; 0x74
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fd fd9b 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2224      	movs	r2, #36	; 0x24
 8002ee2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2101      	movs	r1, #1
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 fb46 	bl	8003588 <UART_SetConfig>
 8002efc:	0003      	movs	r3, r0
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e024      	b.n	8002f50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 fcbd 	bl	8003890 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	490d      	ldr	r1, [pc, #52]	; (8002f58 <HAL_UART_Init+0xa4>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	212a      	movs	r1, #42	; 0x2a
 8002f32:	438a      	bics	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2101      	movs	r1, #1
 8002f42:	430a      	orrs	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 fd55 	bl	80039f8 <UART_CheckIdleState>
 8002f4e:	0003      	movs	r3, r0
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	ffffb7ff 	.word	0xffffb7ff

08002f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	1dbb      	adds	r3, r7, #6
 8002f6a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d000      	beq.n	8002f76 <HAL_UART_Transmit+0x1a>
 8002f74:	e096      	b.n	80030a4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_UART_Transmit+0x28>
 8002f7c:	1dbb      	adds	r3, r7, #6
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e08e      	b.n	80030a6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	015b      	lsls	r3, r3, #5
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d109      	bne.n	8002fa8 <HAL_UART_Transmit+0x4c>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d001      	beq.n	8002fa8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e07e      	b.n	80030a6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2274      	movs	r2, #116	; 0x74
 8002fac:	5c9b      	ldrb	r3, [r3, r2]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Transmit+0x5a>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e077      	b.n	80030a6 <HAL_UART_Transmit+0x14a>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2274      	movs	r2, #116	; 0x74
 8002fba:	2101      	movs	r1, #1
 8002fbc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2221      	movs	r2, #33	; 0x21
 8002fca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fcc:	f7fd ff96 	bl	8000efc <HAL_GetTick>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1dba      	adds	r2, r7, #6
 8002fd8:	2150      	movs	r1, #80	; 0x50
 8002fda:	8812      	ldrh	r2, [r2, #0]
 8002fdc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1dba      	adds	r2, r7, #6
 8002fe2:	2152      	movs	r1, #82	; 0x52
 8002fe4:	8812      	ldrh	r2, [r2, #0]
 8002fe6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	015b      	lsls	r3, r3, #5
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d108      	bne.n	8003006 <HAL_UART_Transmit+0xaa>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d104      	bne.n	8003006 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	e003      	b.n	800300e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2274      	movs	r2, #116	; 0x74
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003016:	e02d      	b.n	8003074 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	0013      	movs	r3, r2
 8003022:	2200      	movs	r2, #0
 8003024:	2180      	movs	r1, #128	; 0x80
 8003026:	f000 fd31 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 800302a:	1e03      	subs	r3, r0, #0
 800302c:	d001      	beq.n	8003032 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e039      	b.n	80030a6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	881a      	ldrh	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	05d2      	lsls	r2, r2, #23
 8003042:	0dd2      	lsrs	r2, r2, #23
 8003044:	b292      	uxth	r2, r2
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	3302      	adds	r3, #2
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	e008      	b.n	8003062 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b292      	uxth	r2, r2
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2252      	movs	r2, #82	; 0x52
 8003066:	5a9b      	ldrh	r3, [r3, r2]
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b299      	uxth	r1, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2252      	movs	r2, #82	; 0x52
 8003072:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2252      	movs	r2, #82	; 0x52
 8003078:	5a9b      	ldrh	r3, [r3, r2]
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1cb      	bne.n	8003018 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	0013      	movs	r3, r2
 800308a:	2200      	movs	r2, #0
 800308c:	2140      	movs	r1, #64	; 0x40
 800308e:	f000 fcfd 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d001      	beq.n	800309a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e005      	b.n	80030a6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e000      	b.n	80030a6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
  }
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b008      	add	sp, #32
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	1dbb      	adds	r3, r7, #6
 80030ba:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d13f      	bne.n	8003144 <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_UART_Receive_IT+0x24>
 80030ca:	1dbb      	adds	r3, r7, #6
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e037      	b.n	8003146 <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	429a      	cmp	r2, r3
 80030e0:	d109      	bne.n	80030f6 <HAL_UART_Receive_IT+0x48>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2201      	movs	r2, #1
 80030ee:	4013      	ands	r3, r2
 80030f0:	d001      	beq.n	80030f6 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e027      	b.n	8003146 <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2274      	movs	r2, #116	; 0x74
 80030fa:	5c9b      	ldrb	r3, [r3, r2]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_UART_Receive_IT+0x56>
 8003100:	2302      	movs	r3, #2
 8003102:	e020      	b.n	8003146 <HAL_UART_Receive_IT+0x98>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2274      	movs	r2, #116	; 0x74
 8003108:	2101      	movs	r1, #1
 800310a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	4013      	ands	r3, r2
 800311e:	d008      	beq.n	8003132 <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	04c9      	lsls	r1, r1, #19
 800312e:	430a      	orrs	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003132:	1dbb      	adds	r3, r7, #6
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	0018      	movs	r0, r3
 800313c:	f000 fd24 	bl	8003b88 <UART_Start_Receive_IT>
 8003140:	0003      	movs	r3, r0
 8003142:	e000      	b.n	8003146 <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b004      	add	sp, #16
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	4ab5      	ldr	r2, [pc, #724]	; (8003448 <HAL_UART_IRQHandler+0x2f8>)
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d112      	bne.n	80031a4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2220      	movs	r2, #32
 8003182:	4013      	ands	r3, r2
 8003184:	d00e      	beq.n	80031a4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2220      	movs	r2, #32
 800318a:	4013      	ands	r3, r2
 800318c:	d00a      	beq.n	80031a4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003192:	2b00      	cmp	r3, #0
 8003194:	d100      	bne.n	8003198 <HAL_UART_IRQHandler+0x48>
 8003196:	e1d4      	b.n	8003542 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	0010      	movs	r0, r2
 80031a0:	4798      	blx	r3
      }
      return;
 80031a2:	e1ce      	b.n	8003542 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d100      	bne.n	80031ac <HAL_UART_IRQHandler+0x5c>
 80031aa:	e0d9      	b.n	8003360 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2201      	movs	r2, #1
 80031b0:	4013      	ands	r3, r2
 80031b2:	d104      	bne.n	80031be <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	4aa5      	ldr	r2, [pc, #660]	; (800344c <HAL_UART_IRQHandler+0x2fc>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	d100      	bne.n	80031be <HAL_UART_IRQHandler+0x6e>
 80031bc:	e0d0      	b.n	8003360 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2201      	movs	r2, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	d010      	beq.n	80031e8 <HAL_UART_IRQHandler+0x98>
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4013      	ands	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	589b      	ldr	r3, [r3, r2]
 80031de:	2201      	movs	r2, #1
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	d00f      	beq.n	8003210 <HAL_UART_IRQHandler+0xc0>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2201      	movs	r2, #1
 80031f4:	4013      	ands	r3, r2
 80031f6:	d00b      	beq.n	8003210 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2202      	movs	r2, #2
 80031fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	589b      	ldr	r3, [r3, r2]
 8003206:	2204      	movs	r2, #4
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2204      	movs	r2, #4
 8003214:	4013      	ands	r3, r2
 8003216:	d00f      	beq.n	8003238 <HAL_UART_IRQHandler+0xe8>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	d00b      	beq.n	8003238 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2204      	movs	r2, #4
 8003226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	589b      	ldr	r3, [r3, r2]
 800322e:	2202      	movs	r2, #2
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2208      	movs	r2, #8
 800323c:	4013      	ands	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2220      	movs	r2, #32
 8003244:	4013      	ands	r3, r2
 8003246:	d103      	bne.n	8003250 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2201      	movs	r2, #1
 800324c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800324e:	d00b      	beq.n	8003268 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2208      	movs	r2, #8
 8003256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	589b      	ldr	r3, [r3, r2]
 800325e:	2208      	movs	r2, #8
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	4013      	ands	r3, r2
 8003270:	d011      	beq.n	8003296 <HAL_UART_IRQHandler+0x146>
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	04db      	lsls	r3, r3, #19
 8003278:	4013      	ands	r3, r2
 800327a:	d00c      	beq.n	8003296 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	589b      	ldr	r3, [r3, r2]
 800328c:	2220      	movs	r2, #32
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	589b      	ldr	r3, [r3, r2]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d100      	bne.n	80032a2 <HAL_UART_IRQHandler+0x152>
 80032a0:	e151      	b.n	8003546 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2220      	movs	r2, #32
 80032a6:	4013      	ands	r3, r2
 80032a8:	d00c      	beq.n	80032c4 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2220      	movs	r2, #32
 80032ae:	4013      	ands	r3, r2
 80032b0:	d008      	beq.n	80032c4 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d004      	beq.n	80032c4 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	0010      	movs	r0, r2
 80032c2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2280      	movs	r2, #128	; 0x80
 80032c8:	589b      	ldr	r3, [r3, r2]
 80032ca:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2240      	movs	r2, #64	; 0x40
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d003      	beq.n	80032e2 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2228      	movs	r2, #40	; 0x28
 80032de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032e0:	d033      	beq.n	800334a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 fcdd 	bl	8003ca4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2240      	movs	r2, #64	; 0x40
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d123      	bne.n	8003340 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2140      	movs	r1, #64	; 0x40
 8003304:	438a      	bics	r2, r1
 8003306:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	2b00      	cmp	r3, #0
 800330e:	d012      	beq.n	8003336 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a4e      	ldr	r2, [pc, #312]	; (8003450 <HAL_UART_IRQHandler+0x300>)
 8003316:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	0018      	movs	r0, r3
 800331e:	f7fd ff77 	bl	8001210 <HAL_DMA_Abort_IT>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d01a      	beq.n	800335c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	0018      	movs	r0, r3
 8003332:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	e012      	b.n	800335c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	0018      	movs	r0, r3
 800333a:	f000 f911 	bl	8003560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333e:	e00d      	b.n	800335c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f90c 	bl	8003560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003348:	e008      	b.n	800335c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 f907 	bl	8003560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	2100      	movs	r1, #0
 8003358:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800335a:	e0f4      	b.n	8003546 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	46c0      	nop			; (mov r8, r8)
    return;
 800335e:	e0f2      	b.n	8003546 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003364:	2b01      	cmp	r3, #1
 8003366:	d000      	beq.n	800336a <HAL_UART_IRQHandler+0x21a>
 8003368:	e0b7      	b.n	80034da <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	2210      	movs	r2, #16
 800336e:	4013      	ands	r3, r2
 8003370:	d100      	bne.n	8003374 <HAL_UART_IRQHandler+0x224>
 8003372:	e0b2      	b.n	80034da <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2210      	movs	r2, #16
 8003378:	4013      	ands	r3, r2
 800337a:	d100      	bne.n	800337e <HAL_UART_IRQHandler+0x22e>
 800337c:	e0ad      	b.n	80034da <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2210      	movs	r2, #16
 8003384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2240      	movs	r2, #64	; 0x40
 800338e:	4013      	ands	r3, r2
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d161      	bne.n	8003458 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	2108      	movs	r1, #8
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80033a2:	187b      	adds	r3, r7, r1
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d100      	bne.n	80033ac <HAL_UART_IRQHandler+0x25c>
 80033aa:	e0ce      	b.n	800354a <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2258      	movs	r2, #88	; 0x58
 80033b0:	5a9b      	ldrh	r3, [r3, r2]
 80033b2:	2208      	movs	r2, #8
 80033b4:	18ba      	adds	r2, r7, r2
 80033b6:	8812      	ldrh	r2, [r2, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d300      	bcc.n	80033be <HAL_UART_IRQHandler+0x26e>
 80033bc:	e0c5      	b.n	800354a <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2208      	movs	r2, #8
 80033c2:	18ba      	adds	r2, r7, r2
 80033c4:	215a      	movs	r1, #90	; 0x5a
 80033c6:	8812      	ldrh	r2, [r2, #0]
 80033c8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d02a      	beq.n	800342a <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	491d      	ldr	r1, [pc, #116]	; (8003454 <HAL_UART_IRQHandler+0x304>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	438a      	bics	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2140      	movs	r1, #64	; 0x40
 8003400:	438a      	bics	r2, r1
 8003402:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2110      	movs	r1, #16
 800341c:	438a      	bics	r2, r1
 800341e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	0018      	movs	r0, r3
 8003426:	f7fd febb 	bl	80011a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2258      	movs	r2, #88	; 0x58
 800342e:	5a9a      	ldrh	r2, [r3, r2]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	215a      	movs	r1, #90	; 0x5a
 8003434:	5a5b      	ldrh	r3, [r3, r1]
 8003436:	b29b      	uxth	r3, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	0011      	movs	r1, r2
 8003440:	0018      	movs	r0, r3
 8003442:	f000 f895 	bl	8003570 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003446:	e080      	b.n	800354a <HAL_UART_IRQHandler+0x3fa>
 8003448:	0000080f 	.word	0x0000080f
 800344c:	04000120 	.word	0x04000120
 8003450:	08003d05 	.word	0x08003d05
 8003454:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2258      	movs	r2, #88	; 0x58
 800345c:	5a99      	ldrh	r1, [r3, r2]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	225a      	movs	r2, #90	; 0x5a
 8003462:	5a9b      	ldrh	r3, [r3, r2]
 8003464:	b29a      	uxth	r2, r3
 8003466:	230a      	movs	r3, #10
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	1a8a      	subs	r2, r1, r2
 800346c:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	225a      	movs	r2, #90	; 0x5a
 8003472:	5a9b      	ldrh	r3, [r3, r2]
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d100      	bne.n	800347c <HAL_UART_IRQHandler+0x32c>
 800347a:	e068      	b.n	800354e <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 800347c:	230a      	movs	r3, #10
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4932      	ldr	r1, [pc, #200]	; (800355c <HAL_UART_IRQHandler+0x40c>)
 8003492:	400a      	ands	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	438a      	bics	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2110      	movs	r1, #16
 80034c4:	438a      	bics	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034c8:	230a      	movs	r3, #10
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0011      	movs	r1, r2
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f84c 	bl	8003570 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034d8:	e039      	b.n	800354e <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	035b      	lsls	r3, r3, #13
 80034e0:	4013      	ands	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_UART_IRQHandler+0x3b2>
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	03db      	lsls	r3, r3, #15
 80034ea:	4013      	ands	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	0352      	lsls	r2, r2, #13
 80034f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 fd20 	bl	8003f40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003500:	e028      	b.n	8003554 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	2280      	movs	r2, #128	; 0x80
 8003506:	4013      	ands	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	4013      	ands	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01b      	beq.n	8003552 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	0010      	movs	r0, r2
 8003522:	4798      	blx	r3
    }
    return;
 8003524:	e015      	b.n	8003552 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	4013      	ands	r3, r2
 800352c:	d012      	beq.n	8003554 <HAL_UART_IRQHandler+0x404>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2240      	movs	r2, #64	; 0x40
 8003532:	4013      	ands	r3, r2
 8003534:	d00e      	beq.n	8003554 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	0018      	movs	r0, r3
 800353a:	f000 fbfa 	bl	8003d32 <UART_EndTransmit_IT>
    return;
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	e008      	b.n	8003554 <HAL_UART_IRQHandler+0x404>
      return;
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	e006      	b.n	8003554 <HAL_UART_IRQHandler+0x404>
    return;
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	e004      	b.n	8003554 <HAL_UART_IRQHandler+0x404>
      return;
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	e002      	b.n	8003554 <HAL_UART_IRQHandler+0x404>
      return;
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	e000      	b.n	8003554 <HAL_UART_IRQHandler+0x404>
    return;
 8003552:	46c0      	nop			; (mov r8, r8)
  }

}
 8003554:	46bd      	mov	sp, r7
 8003556:	b008      	add	sp, #32
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	fffffedf 	.word	0xfffffedf

08003560 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	000a      	movs	r2, r1
 800357a:	1cbb      	adds	r3, r7, #2
 800357c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b002      	add	sp, #8
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003590:	231e      	movs	r3, #30
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4aac      	ldr	r2, [pc, #688]	; (8003868 <UART_SetConfig+0x2e0>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4aa7      	ldr	r2, [pc, #668]	; (800386c <UART_SetConfig+0x2e4>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	0019      	movs	r1, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a9e      	ldr	r2, [pc, #632]	; (8003870 <UART_SetConfig+0x2e8>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	0019      	movs	r1, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a9a      	ldr	r2, [pc, #616]	; (8003874 <UART_SetConfig+0x2ec>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d125      	bne.n	800365a <UART_SetConfig+0xd2>
 800360e:	4b9a      	ldr	r3, [pc, #616]	; (8003878 <UART_SetConfig+0x2f0>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	2203      	movs	r2, #3
 8003614:	4013      	ands	r3, r2
 8003616:	2b01      	cmp	r3, #1
 8003618:	d00f      	beq.n	800363a <UART_SetConfig+0xb2>
 800361a:	d304      	bcc.n	8003626 <UART_SetConfig+0x9e>
 800361c:	2b02      	cmp	r3, #2
 800361e:	d011      	beq.n	8003644 <UART_SetConfig+0xbc>
 8003620:	2b03      	cmp	r3, #3
 8003622:	d005      	beq.n	8003630 <UART_SetConfig+0xa8>
 8003624:	e013      	b.n	800364e <UART_SetConfig+0xc6>
 8003626:	231f      	movs	r3, #31
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e064      	b.n	80036fa <UART_SetConfig+0x172>
 8003630:	231f      	movs	r3, #31
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	2202      	movs	r2, #2
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	e05f      	b.n	80036fa <UART_SetConfig+0x172>
 800363a:	231f      	movs	r3, #31
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	2204      	movs	r2, #4
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e05a      	b.n	80036fa <UART_SetConfig+0x172>
 8003644:	231f      	movs	r3, #31
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	2208      	movs	r2, #8
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e055      	b.n	80036fa <UART_SetConfig+0x172>
 800364e:	231f      	movs	r3, #31
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	2210      	movs	r2, #16
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	e04f      	b.n	80036fa <UART_SetConfig+0x172>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a87      	ldr	r2, [pc, #540]	; (800387c <UART_SetConfig+0x2f4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d132      	bne.n	80036ca <UART_SetConfig+0x142>
 8003664:	4b84      	ldr	r3, [pc, #528]	; (8003878 <UART_SetConfig+0x2f0>)
 8003666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003668:	23c0      	movs	r3, #192	; 0xc0
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	4013      	ands	r3, r2
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	0252      	lsls	r2, r2, #9
 8003672:	4293      	cmp	r3, r2
 8003674:	d019      	beq.n	80036aa <UART_SetConfig+0x122>
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	0252      	lsls	r2, r2, #9
 800367a:	4293      	cmp	r3, r2
 800367c:	d802      	bhi.n	8003684 <UART_SetConfig+0xfc>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <UART_SetConfig+0x10e>
 8003682:	e01c      	b.n	80036be <UART_SetConfig+0x136>
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	0292      	lsls	r2, r2, #10
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <UART_SetConfig+0x12c>
 800368c:	22c0      	movs	r2, #192	; 0xc0
 800368e:	0292      	lsls	r2, r2, #10
 8003690:	4293      	cmp	r3, r2
 8003692:	d005      	beq.n	80036a0 <UART_SetConfig+0x118>
 8003694:	e013      	b.n	80036be <UART_SetConfig+0x136>
 8003696:	231f      	movs	r3, #31
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e02c      	b.n	80036fa <UART_SetConfig+0x172>
 80036a0:	231f      	movs	r3, #31
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2202      	movs	r2, #2
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e027      	b.n	80036fa <UART_SetConfig+0x172>
 80036aa:	231f      	movs	r3, #31
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	2204      	movs	r2, #4
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e022      	b.n	80036fa <UART_SetConfig+0x172>
 80036b4:	231f      	movs	r3, #31
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2208      	movs	r2, #8
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e01d      	b.n	80036fa <UART_SetConfig+0x172>
 80036be:	231f      	movs	r3, #31
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	2210      	movs	r2, #16
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	e017      	b.n	80036fa <UART_SetConfig+0x172>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6c      	ldr	r2, [pc, #432]	; (8003880 <UART_SetConfig+0x2f8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d104      	bne.n	80036de <UART_SetConfig+0x156>
 80036d4:	231f      	movs	r3, #31
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e00d      	b.n	80036fa <UART_SetConfig+0x172>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a68      	ldr	r2, [pc, #416]	; (8003884 <UART_SetConfig+0x2fc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d104      	bne.n	80036f2 <UART_SetConfig+0x16a>
 80036e8:	231f      	movs	r3, #31
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e003      	b.n	80036fa <UART_SetConfig+0x172>
 80036f2:	231f      	movs	r3, #31
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2210      	movs	r2, #16
 80036f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	429a      	cmp	r2, r3
 8003704:	d15c      	bne.n	80037c0 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8003706:	231f      	movs	r3, #31
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d00d      	beq.n	800372c <UART_SetConfig+0x1a4>
 8003710:	dc02      	bgt.n	8003718 <UART_SetConfig+0x190>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <UART_SetConfig+0x19a>
 8003716:	e015      	b.n	8003744 <UART_SetConfig+0x1bc>
 8003718:	2b04      	cmp	r3, #4
 800371a:	d00a      	beq.n	8003732 <UART_SetConfig+0x1aa>
 800371c:	2b08      	cmp	r3, #8
 800371e:	d00d      	beq.n	800373c <UART_SetConfig+0x1b4>
 8003720:	e010      	b.n	8003744 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003722:	f7fe fe41 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8003726:	0003      	movs	r3, r0
 8003728:	61bb      	str	r3, [r7, #24]
        break;
 800372a:	e012      	b.n	8003752 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800372c:	4b56      	ldr	r3, [pc, #344]	; (8003888 <UART_SetConfig+0x300>)
 800372e:	61bb      	str	r3, [r7, #24]
        break;
 8003730:	e00f      	b.n	8003752 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003732:	f7fe fdb1 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8003736:	0003      	movs	r3, r0
 8003738:	61bb      	str	r3, [r7, #24]
        break;
 800373a:	e00a      	b.n	8003752 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	61bb      	str	r3, [r7, #24]
        break;
 8003742:	e006      	b.n	8003752 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003748:	231e      	movs	r3, #30
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
        break;
 8003750:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d100      	bne.n	800375a <UART_SetConfig+0x1d2>
 8003758:	e079      	b.n	800384e <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	005a      	lsls	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	0019      	movs	r1, r3
 800376c:	0010      	movs	r0, r2
 800376e:	f7fc fccb 	bl	8000108 <__udivsi3>
 8003772:	0003      	movs	r3, r0
 8003774:	b29b      	uxth	r3, r3
 8003776:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b0f      	cmp	r3, #15
 800377c:	d91b      	bls.n	80037b6 <UART_SetConfig+0x22e>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4a42      	ldr	r2, [pc, #264]	; (800388c <UART_SetConfig+0x304>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d817      	bhi.n	80037b6 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	b29a      	uxth	r2, r3
 800378a:	200e      	movs	r0, #14
 800378c:	183b      	adds	r3, r7, r0
 800378e:	210f      	movs	r1, #15
 8003790:	438a      	bics	r2, r1
 8003792:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	b29b      	uxth	r3, r3
 800379a:	2207      	movs	r2, #7
 800379c:	4013      	ands	r3, r2
 800379e:	b299      	uxth	r1, r3
 80037a0:	183b      	adds	r3, r7, r0
 80037a2:	183a      	adds	r2, r7, r0
 80037a4:	8812      	ldrh	r2, [r2, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	183a      	adds	r2, r7, r0
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	60da      	str	r2, [r3, #12]
 80037b4:	e04b      	b.n	800384e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 80037b6:	231e      	movs	r3, #30
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e046      	b.n	800384e <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c0:	231f      	movs	r3, #31
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d00d      	beq.n	80037e6 <UART_SetConfig+0x25e>
 80037ca:	dc02      	bgt.n	80037d2 <UART_SetConfig+0x24a>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <UART_SetConfig+0x254>
 80037d0:	e015      	b.n	80037fe <UART_SetConfig+0x276>
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d00a      	beq.n	80037ec <UART_SetConfig+0x264>
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d00d      	beq.n	80037f6 <UART_SetConfig+0x26e>
 80037da:	e010      	b.n	80037fe <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037dc:	f7fe fde4 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 80037e0:	0003      	movs	r3, r0
 80037e2:	61bb      	str	r3, [r7, #24]
        break;
 80037e4:	e012      	b.n	800380c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e6:	4b28      	ldr	r3, [pc, #160]	; (8003888 <UART_SetConfig+0x300>)
 80037e8:	61bb      	str	r3, [r7, #24]
        break;
 80037ea:	e00f      	b.n	800380c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ec:	f7fe fd54 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 80037f0:	0003      	movs	r3, r0
 80037f2:	61bb      	str	r3, [r7, #24]
        break;
 80037f4:	e00a      	b.n	800380c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	61bb      	str	r3, [r7, #24]
        break;
 80037fc:	e006      	b.n	800380c <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003802:	231e      	movs	r3, #30
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
        break;
 800380a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01d      	beq.n	800384e <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	085a      	lsrs	r2, r3, #1
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	18d2      	adds	r2, r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	0019      	movs	r1, r3
 8003822:	0010      	movs	r0, r2
 8003824:	f7fc fc70 	bl	8000108 <__udivsi3>
 8003828:	0003      	movs	r3, r0
 800382a:	b29b      	uxth	r3, r3
 800382c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b0f      	cmp	r3, #15
 8003832:	d908      	bls.n	8003846 <UART_SetConfig+0x2be>
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4a15      	ldr	r2, [pc, #84]	; (800388c <UART_SetConfig+0x304>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d804      	bhi.n	8003846 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	e003      	b.n	800384e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8003846:	231e      	movs	r3, #30
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800385a:	231e      	movs	r3, #30
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	781b      	ldrb	r3, [r3, #0]
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b008      	add	sp, #32
 8003866:	bd80      	pop	{r7, pc}
 8003868:	efff69f3 	.word	0xefff69f3
 800386c:	ffffcfff 	.word	0xffffcfff
 8003870:	fffff4ff 	.word	0xfffff4ff
 8003874:	40013800 	.word	0x40013800
 8003878:	40021000 	.word	0x40021000
 800387c:	40004400 	.word	0x40004400
 8003880:	40004800 	.word	0x40004800
 8003884:	40004c00 	.word	0x40004c00
 8003888:	007a1200 	.word	0x007a1200
 800388c:	0000ffff 	.word	0x0000ffff

08003890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2201      	movs	r2, #1
 800389e:	4013      	ands	r3, r2
 80038a0:	d00b      	beq.n	80038ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4a4a      	ldr	r2, [pc, #296]	; (80039d4 <UART_AdvFeatureConfig+0x144>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	0019      	movs	r1, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2202      	movs	r2, #2
 80038c0:	4013      	ands	r3, r2
 80038c2:	d00b      	beq.n	80038dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a43      	ldr	r2, [pc, #268]	; (80039d8 <UART_AdvFeatureConfig+0x148>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	0019      	movs	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2204      	movs	r2, #4
 80038e2:	4013      	ands	r3, r2
 80038e4:	d00b      	beq.n	80038fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a3b      	ldr	r2, [pc, #236]	; (80039dc <UART_AdvFeatureConfig+0x14c>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	0019      	movs	r1, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	2208      	movs	r2, #8
 8003904:	4013      	ands	r3, r2
 8003906:	d00b      	beq.n	8003920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4a34      	ldr	r2, [pc, #208]	; (80039e0 <UART_AdvFeatureConfig+0x150>)
 8003910:	4013      	ands	r3, r2
 8003912:	0019      	movs	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2210      	movs	r2, #16
 8003926:	4013      	ands	r3, r2
 8003928:	d00b      	beq.n	8003942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <UART_AdvFeatureConfig+0x154>)
 8003932:	4013      	ands	r3, r2
 8003934:	0019      	movs	r1, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	2220      	movs	r2, #32
 8003948:	4013      	ands	r3, r2
 800394a:	d00b      	beq.n	8003964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <UART_AdvFeatureConfig+0x158>)
 8003954:	4013      	ands	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	2240      	movs	r2, #64	; 0x40
 800396a:	4013      	ands	r3, r2
 800396c:	d01d      	beq.n	80039aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <UART_AdvFeatureConfig+0x15c>)
 8003976:	4013      	ands	r3, r2
 8003978:	0019      	movs	r1, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	035b      	lsls	r3, r3, #13
 800398e:	429a      	cmp	r2, r3
 8003990:	d10b      	bne.n	80039aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <UART_AdvFeatureConfig+0x160>)
 800399a:	4013      	ands	r3, r2
 800399c:	0019      	movs	r1, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	4013      	ands	r3, r2
 80039b2:	d00b      	beq.n	80039cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <UART_AdvFeatureConfig+0x164>)
 80039bc:	4013      	ands	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b002      	add	sp, #8
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	fffdffff 	.word	0xfffdffff
 80039d8:	fffeffff 	.word	0xfffeffff
 80039dc:	fffbffff 	.word	0xfffbffff
 80039e0:	ffff7fff 	.word	0xffff7fff
 80039e4:	ffffefff 	.word	0xffffefff
 80039e8:	ffffdfff 	.word	0xffffdfff
 80039ec:	ffefffff 	.word	0xffefffff
 80039f0:	ff9fffff 	.word	0xff9fffff
 80039f4:	fff7ffff 	.word	0xfff7ffff

080039f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	2100      	movs	r1, #0
 8003a06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a08:	f7fd fa78 	bl	8000efc <HAL_GetTick>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2208      	movs	r2, #8
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d10d      	bne.n	8003a3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	0399      	lsls	r1, r3, #14
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <UART_CheckIdleState+0x90>)
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	0013      	movs	r3, r2
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f000 f82d 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8003a32:	1e03      	subs	r3, r0, #0
 8003a34:	d001      	beq.n	8003a3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e022      	b.n	8003a80 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2204      	movs	r2, #4
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d10d      	bne.n	8003a64 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	03d9      	lsls	r1, r3, #15
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <UART_CheckIdleState+0x90>)
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	0013      	movs	r3, r2
 8003a56:	2200      	movs	r2, #0
 8003a58:	f000 f818 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d001      	beq.n	8003a64 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e00d      	b.n	8003a80 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2274      	movs	r2, #116	; 0x74
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b004      	add	sp, #16
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	01ffffff 	.word	0x01ffffff

08003a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	1dfb      	adds	r3, r7, #7
 8003a9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9c:	e05e      	b.n	8003b5c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	d05b      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa4:	f7fd fa2a 	bl	8000efc <HAL_GetTick>
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d302      	bcc.n	8003aba <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11b      	bne.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	492f      	ldr	r1, [pc, #188]	; (8003b84 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	438a      	bics	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2274      	movs	r2, #116	; 0x74
 8003aea:	2100      	movs	r1, #0
 8003aec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e044      	b.n	8003b7c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2204      	movs	r2, #4
 8003afa:	4013      	ands	r3, r2
 8003afc:	d02e      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	401a      	ands	r2, r3
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d124      	bne.n	8003b5c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2280      	movs	r2, #128	; 0x80
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4917      	ldr	r1, [pc, #92]	; (8003b84 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2101      	movs	r1, #1
 8003b38:	438a      	bics	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	2120      	movs	r1, #32
 8003b4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2274      	movs	r2, #116	; 0x74
 8003b54:	2100      	movs	r1, #0
 8003b56:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e00f      	b.n	8003b7c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	425a      	negs	r2, r3
 8003b6c:	4153      	adcs	r3, r2
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	001a      	movs	r2, r3
 8003b72:	1dfb      	adds	r3, r7, #7
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d091      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b004      	add	sp, #16
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	fffffe5f 	.word	0xfffffe5f

08003b88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	1dbb      	adds	r3, r7, #6
 8003b94:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1dba      	adds	r2, r7, #6
 8003ba0:	2158      	movs	r1, #88	; 0x58
 8003ba2:	8812      	ldrh	r2, [r2, #0]
 8003ba4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	215a      	movs	r1, #90	; 0x5a
 8003bac:	8812      	ldrh	r2, [r2, #0]
 8003bae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	015b      	lsls	r3, r3, #5
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10d      	bne.n	8003bde <UART_Start_Receive_IT+0x56>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <UART_Start_Receive_IT+0x4c>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	225c      	movs	r2, #92	; 0x5c
 8003bce:	4932      	ldr	r1, [pc, #200]	; (8003c98 <UART_Start_Receive_IT+0x110>)
 8003bd0:	5299      	strh	r1, [r3, r2]
 8003bd2:	e02e      	b.n	8003c32 <UART_Start_Receive_IT+0xaa>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	225c      	movs	r2, #92	; 0x5c
 8003bd8:	21ff      	movs	r1, #255	; 0xff
 8003bda:	5299      	strh	r1, [r3, r2]
 8003bdc:	e029      	b.n	8003c32 <UART_Start_Receive_IT+0xaa>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <UART_Start_Receive_IT+0x7a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <UART_Start_Receive_IT+0x70>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	225c      	movs	r2, #92	; 0x5c
 8003bf2:	21ff      	movs	r1, #255	; 0xff
 8003bf4:	5299      	strh	r1, [r3, r2]
 8003bf6:	e01c      	b.n	8003c32 <UART_Start_Receive_IT+0xaa>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	225c      	movs	r2, #92	; 0x5c
 8003bfc:	217f      	movs	r1, #127	; 0x7f
 8003bfe:	5299      	strh	r1, [r3, r2]
 8003c00:	e017      	b.n	8003c32 <UART_Start_Receive_IT+0xaa>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	055b      	lsls	r3, r3, #21
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d10d      	bne.n	8003c2a <UART_Start_Receive_IT+0xa2>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <UART_Start_Receive_IT+0x98>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	225c      	movs	r2, #92	; 0x5c
 8003c1a:	217f      	movs	r1, #127	; 0x7f
 8003c1c:	5299      	strh	r1, [r3, r2]
 8003c1e:	e008      	b.n	8003c32 <UART_Start_Receive_IT+0xaa>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	225c      	movs	r2, #92	; 0x5c
 8003c24:	213f      	movs	r1, #63	; 0x3f
 8003c26:	5299      	strh	r1, [r3, r2]
 8003c28:	e003      	b.n	8003c32 <UART_Start_Receive_IT+0xaa>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	225c      	movs	r2, #92	; 0x5c
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	2100      	movs	r1, #0
 8003c38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2222      	movs	r2, #34	; 0x22
 8003c3e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	015b      	lsls	r3, r3, #5
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d107      	bne.n	8003c6c <UART_Start_Receive_IT+0xe4>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <UART_Start_Receive_IT+0x114>)
 8003c68:	665a      	str	r2, [r3, #100]	; 0x64
 8003c6a:	e002      	b.n	8003c72 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ca0 <UART_Start_Receive_IT+0x118>)
 8003c70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2274      	movs	r2, #116	; 0x74
 8003c76:	2100      	movs	r1, #0
 8003c78:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2190      	movs	r1, #144	; 0x90
 8003c86:	0049      	lsls	r1, r1, #1
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b004      	add	sp, #16
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	000001ff 	.word	0x000001ff
 8003c9c:	08003e55 	.word	0x08003e55
 8003ca0:	08003d69 	.word	0x08003d69

08003ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4912      	ldr	r1, [pc, #72]	; (8003d00 <UART_EndRxTransfer+0x5c>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	438a      	bics	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2110      	movs	r1, #16
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b002      	add	sp, #8
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	fffffedf 	.word	0xfffffedf

08003d04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	225a      	movs	r2, #90	; 0x5a
 8003d16:	2100      	movs	r1, #0
 8003d18:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2252      	movs	r2, #82	; 0x52
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff fc1b 	bl	8003560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2140      	movs	r1, #64	; 0x40
 8003d46:	438a      	bics	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7fc fd9b 	bl	8000894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b002      	add	sp, #8
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d70:	230e      	movs	r3, #14
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	215c      	movs	r1, #92	; 0x5c
 8003d78:	5a52      	ldrh	r2, [r2, r1]
 8003d7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d80:	2b22      	cmp	r3, #34	; 0x22
 8003d82:	d158      	bne.n	8003e36 <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	210c      	movs	r1, #12
 8003d8a:	187b      	adds	r3, r7, r1
 8003d8c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003d8e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	230e      	movs	r3, #14
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b2d9      	uxtb	r1, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da2:	400a      	ands	r2, r1
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	225a      	movs	r2, #90	; 0x5a
 8003db6:	5a9b      	ldrh	r3, [r3, r2]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b299      	uxth	r1, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	225a      	movs	r2, #90	; 0x5a
 8003dc2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	225a      	movs	r2, #90	; 0x5a
 8003dc8:	5a9b      	ldrh	r3, [r3, r2]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d13a      	bne.n	8003e46 <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	491d      	ldr	r1, [pc, #116]	; (8003e50 <UART_RxISR_8BIT+0xe8>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2101      	movs	r1, #1
 8003dec:	438a      	bics	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d110      	bne.n	8003e26 <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2110      	movs	r1, #16
 8003e10:	438a      	bics	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2258      	movs	r2, #88	; 0x58
 8003e18:	5a9a      	ldrh	r2, [r3, r2]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0011      	movs	r1, r2
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f7ff fba6 	bl	8003570 <HAL_UARTEx_RxEventCallback>
 8003e24:	e003      	b.n	8003e2e <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7fc fce3 	bl	80007f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e34:	e007      	b.n	8003e46 <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2108      	movs	r1, #8
 8003e42:	430a      	orrs	r2, r1
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b004      	add	sp, #16
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	fffffedf 	.word	0xfffffedf

08003e54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e5c:	230e      	movs	r3, #14
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	215c      	movs	r1, #92	; 0x5c
 8003e64:	5a52      	ldrh	r2, [r2, r1]
 8003e66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e6c:	2b22      	cmp	r3, #34	; 0x22
 8003e6e:	d158      	bne.n	8003f22 <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	210c      	movs	r1, #12
 8003e76:	187b      	adds	r3, r7, r1
 8003e78:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003e7a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	220e      	movs	r2, #14
 8003e86:	18ba      	adds	r2, r7, r2
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	8812      	ldrh	r2, [r2, #0]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	225a      	movs	r2, #90	; 0x5a
 8003ea2:	5a9b      	ldrh	r3, [r3, r2]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b299      	uxth	r1, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	225a      	movs	r2, #90	; 0x5a
 8003eae:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	225a      	movs	r2, #90	; 0x5a
 8003eb4:	5a9b      	ldrh	r3, [r3, r2]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d13a      	bne.n	8003f32 <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	491d      	ldr	r1, [pc, #116]	; (8003f3c <UART_RxISR_16BIT+0xe8>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	438a      	bics	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d110      	bne.n	8003f12 <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2110      	movs	r1, #16
 8003efc:	438a      	bics	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2258      	movs	r2, #88	; 0x58
 8003f04:	5a9a      	ldrh	r2, [r3, r2]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0011      	movs	r1, r2
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7ff fb30 	bl	8003570 <HAL_UARTEx_RxEventCallback>
 8003f10:	e003      	b.n	8003f1a <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fc fc6d 	bl	80007f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f20:	e007      	b.n	8003f32 <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2108      	movs	r1, #8
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	619a      	str	r2, [r3, #24]
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b004      	add	sp, #16
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	fffffedf 	.word	0xfffffedf

08003f40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <__errno>:
 8003f50:	4b01      	ldr	r3, [pc, #4]	; (8003f58 <__errno+0x8>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	4770      	bx	lr
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	2000000c 	.word	0x2000000c

08003f5c <__libc_init_array>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	2600      	movs	r6, #0
 8003f60:	4d0c      	ldr	r5, [pc, #48]	; (8003f94 <__libc_init_array+0x38>)
 8003f62:	4c0d      	ldr	r4, [pc, #52]	; (8003f98 <__libc_init_array+0x3c>)
 8003f64:	1b64      	subs	r4, r4, r5
 8003f66:	10a4      	asrs	r4, r4, #2
 8003f68:	42a6      	cmp	r6, r4
 8003f6a:	d109      	bne.n	8003f80 <__libc_init_array+0x24>
 8003f6c:	2600      	movs	r6, #0
 8003f6e:	f000 fcc9 	bl	8004904 <_init>
 8003f72:	4d0a      	ldr	r5, [pc, #40]	; (8003f9c <__libc_init_array+0x40>)
 8003f74:	4c0a      	ldr	r4, [pc, #40]	; (8003fa0 <__libc_init_array+0x44>)
 8003f76:	1b64      	subs	r4, r4, r5
 8003f78:	10a4      	asrs	r4, r4, #2
 8003f7a:	42a6      	cmp	r6, r4
 8003f7c:	d105      	bne.n	8003f8a <__libc_init_array+0x2e>
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	00b3      	lsls	r3, r6, #2
 8003f82:	58eb      	ldr	r3, [r5, r3]
 8003f84:	4798      	blx	r3
 8003f86:	3601      	adds	r6, #1
 8003f88:	e7ee      	b.n	8003f68 <__libc_init_array+0xc>
 8003f8a:	00b3      	lsls	r3, r6, #2
 8003f8c:	58eb      	ldr	r3, [r5, r3]
 8003f8e:	4798      	blx	r3
 8003f90:	3601      	adds	r6, #1
 8003f92:	e7f2      	b.n	8003f7a <__libc_init_array+0x1e>
 8003f94:	08004ac8 	.word	0x08004ac8
 8003f98:	08004ac8 	.word	0x08004ac8
 8003f9c:	08004ac8 	.word	0x08004ac8
 8003fa0:	08004acc 	.word	0x08004acc

08003fa4 <memset>:
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	1812      	adds	r2, r2, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d100      	bne.n	8003fae <memset+0xa>
 8003fac:	4770      	bx	lr
 8003fae:	7019      	strb	r1, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	e7f9      	b.n	8003fa8 <memset+0x4>

08003fb4 <_puts_r>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	0005      	movs	r5, r0
 8003fb8:	000e      	movs	r6, r1
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d004      	beq.n	8003fc8 <_puts_r+0x14>
 8003fbe:	6983      	ldr	r3, [r0, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <_puts_r+0x14>
 8003fc4:	f000 fa24 	bl	8004410 <__sinit>
 8003fc8:	69ab      	ldr	r3, [r5, #24]
 8003fca:	68ac      	ldr	r4, [r5, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <_puts_r+0x22>
 8003fd0:	0028      	movs	r0, r5
 8003fd2:	f000 fa1d 	bl	8004410 <__sinit>
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <_puts_r+0xb4>)
 8003fd8:	429c      	cmp	r4, r3
 8003fda:	d10f      	bne.n	8003ffc <_puts_r+0x48>
 8003fdc:	686c      	ldr	r4, [r5, #4]
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	d502      	bpl.n	8003fea <_puts_r+0x36>
 8003fe4:	6923      	ldr	r3, [r4, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d11f      	bne.n	800402a <_puts_r+0x76>
 8003fea:	0021      	movs	r1, r4
 8003fec:	0028      	movs	r0, r5
 8003fee:	f000 f8a1 	bl	8004134 <__swsetup_r>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d019      	beq.n	800402a <_puts_r+0x76>
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	4240      	negs	r0, r0
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <_puts_r+0xb8>)
 8003ffe:	429c      	cmp	r4, r3
 8004000:	d101      	bne.n	8004006 <_puts_r+0x52>
 8004002:	68ac      	ldr	r4, [r5, #8]
 8004004:	e7eb      	b.n	8003fde <_puts_r+0x2a>
 8004006:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <_puts_r+0xbc>)
 8004008:	429c      	cmp	r4, r3
 800400a:	d1e8      	bne.n	8003fde <_puts_r+0x2a>
 800400c:	68ec      	ldr	r4, [r5, #12]
 800400e:	e7e6      	b.n	8003fde <_puts_r+0x2a>
 8004010:	3601      	adds	r6, #1
 8004012:	60a3      	str	r3, [r4, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	da04      	bge.n	8004022 <_puts_r+0x6e>
 8004018:	69a2      	ldr	r2, [r4, #24]
 800401a:	429a      	cmp	r2, r3
 800401c:	dc16      	bgt.n	800404c <_puts_r+0x98>
 800401e:	290a      	cmp	r1, #10
 8004020:	d014      	beq.n	800404c <_puts_r+0x98>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	6022      	str	r2, [r4, #0]
 8004028:	7019      	strb	r1, [r3, #0]
 800402a:	68a3      	ldr	r3, [r4, #8]
 800402c:	7831      	ldrb	r1, [r6, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	2900      	cmp	r1, #0
 8004032:	d1ed      	bne.n	8004010 <_puts_r+0x5c>
 8004034:	60a3      	str	r3, [r4, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	da0f      	bge.n	800405a <_puts_r+0xa6>
 800403a:	0022      	movs	r2, r4
 800403c:	310a      	adds	r1, #10
 800403e:	0028      	movs	r0, r5
 8004040:	f000 f822 	bl	8004088 <__swbuf_r>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d0d6      	beq.n	8003ff6 <_puts_r+0x42>
 8004048:	200a      	movs	r0, #10
 800404a:	e7d6      	b.n	8003ffa <_puts_r+0x46>
 800404c:	0022      	movs	r2, r4
 800404e:	0028      	movs	r0, r5
 8004050:	f000 f81a 	bl	8004088 <__swbuf_r>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d1e8      	bne.n	800402a <_puts_r+0x76>
 8004058:	e7cd      	b.n	8003ff6 <_puts_r+0x42>
 800405a:	200a      	movs	r0, #10
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	6022      	str	r2, [r4, #0]
 8004062:	7018      	strb	r0, [r3, #0]
 8004064:	e7c9      	b.n	8003ffa <_puts_r+0x46>
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	08004a88 	.word	0x08004a88
 800406c:	08004aa8 	.word	0x08004aa8
 8004070:	08004a68 	.word	0x08004a68

08004074 <puts>:
 8004074:	b510      	push	{r4, lr}
 8004076:	4b03      	ldr	r3, [pc, #12]	; (8004084 <puts+0x10>)
 8004078:	0001      	movs	r1, r0
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	f7ff ff9a 	bl	8003fb4 <_puts_r>
 8004080:	bd10      	pop	{r4, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	2000000c 	.word	0x2000000c

08004088 <__swbuf_r>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	0005      	movs	r5, r0
 800408c:	000e      	movs	r6, r1
 800408e:	0014      	movs	r4, r2
 8004090:	2800      	cmp	r0, #0
 8004092:	d004      	beq.n	800409e <__swbuf_r+0x16>
 8004094:	6983      	ldr	r3, [r0, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <__swbuf_r+0x16>
 800409a:	f000 f9b9 	bl	8004410 <__sinit>
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <__swbuf_r+0xa0>)
 80040a0:	429c      	cmp	r4, r3
 80040a2:	d12d      	bne.n	8004100 <__swbuf_r+0x78>
 80040a4:	686c      	ldr	r4, [r5, #4]
 80040a6:	69a3      	ldr	r3, [r4, #24]
 80040a8:	60a3      	str	r3, [r4, #8]
 80040aa:	89a3      	ldrh	r3, [r4, #12]
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	d531      	bpl.n	8004114 <__swbuf_r+0x8c>
 80040b0:	6923      	ldr	r3, [r4, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d02e      	beq.n	8004114 <__swbuf_r+0x8c>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	6922      	ldr	r2, [r4, #16]
 80040ba:	b2f7      	uxtb	r7, r6
 80040bc:	1a98      	subs	r0, r3, r2
 80040be:	6963      	ldr	r3, [r4, #20]
 80040c0:	b2f6      	uxtb	r6, r6
 80040c2:	4283      	cmp	r3, r0
 80040c4:	dc05      	bgt.n	80040d2 <__swbuf_r+0x4a>
 80040c6:	0021      	movs	r1, r4
 80040c8:	0028      	movs	r0, r5
 80040ca:	f000 f933 	bl	8004334 <_fflush_r>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d126      	bne.n	8004120 <__swbuf_r+0x98>
 80040d2:	68a3      	ldr	r3, [r4, #8]
 80040d4:	3001      	adds	r0, #1
 80040d6:	3b01      	subs	r3, #1
 80040d8:	60a3      	str	r3, [r4, #8]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	6022      	str	r2, [r4, #0]
 80040e0:	701f      	strb	r7, [r3, #0]
 80040e2:	6963      	ldr	r3, [r4, #20]
 80040e4:	4283      	cmp	r3, r0
 80040e6:	d004      	beq.n	80040f2 <__swbuf_r+0x6a>
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	07db      	lsls	r3, r3, #31
 80040ec:	d51a      	bpl.n	8004124 <__swbuf_r+0x9c>
 80040ee:	2e0a      	cmp	r6, #10
 80040f0:	d118      	bne.n	8004124 <__swbuf_r+0x9c>
 80040f2:	0021      	movs	r1, r4
 80040f4:	0028      	movs	r0, r5
 80040f6:	f000 f91d 	bl	8004334 <_fflush_r>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d012      	beq.n	8004124 <__swbuf_r+0x9c>
 80040fe:	e00f      	b.n	8004120 <__swbuf_r+0x98>
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <__swbuf_r+0xa4>)
 8004102:	429c      	cmp	r4, r3
 8004104:	d101      	bne.n	800410a <__swbuf_r+0x82>
 8004106:	68ac      	ldr	r4, [r5, #8]
 8004108:	e7cd      	b.n	80040a6 <__swbuf_r+0x1e>
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <__swbuf_r+0xa8>)
 800410c:	429c      	cmp	r4, r3
 800410e:	d1ca      	bne.n	80040a6 <__swbuf_r+0x1e>
 8004110:	68ec      	ldr	r4, [r5, #12]
 8004112:	e7c8      	b.n	80040a6 <__swbuf_r+0x1e>
 8004114:	0021      	movs	r1, r4
 8004116:	0028      	movs	r0, r5
 8004118:	f000 f80c 	bl	8004134 <__swsetup_r>
 800411c:	2800      	cmp	r0, #0
 800411e:	d0ca      	beq.n	80040b6 <__swbuf_r+0x2e>
 8004120:	2601      	movs	r6, #1
 8004122:	4276      	negs	r6, r6
 8004124:	0030      	movs	r0, r6
 8004126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004128:	08004a88 	.word	0x08004a88
 800412c:	08004aa8 	.word	0x08004aa8
 8004130:	08004a68 	.word	0x08004a68

08004134 <__swsetup_r>:
 8004134:	4b36      	ldr	r3, [pc, #216]	; (8004210 <__swsetup_r+0xdc>)
 8004136:	b570      	push	{r4, r5, r6, lr}
 8004138:	681d      	ldr	r5, [r3, #0]
 800413a:	0006      	movs	r6, r0
 800413c:	000c      	movs	r4, r1
 800413e:	2d00      	cmp	r5, #0
 8004140:	d005      	beq.n	800414e <__swsetup_r+0x1a>
 8004142:	69ab      	ldr	r3, [r5, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <__swsetup_r+0x1a>
 8004148:	0028      	movs	r0, r5
 800414a:	f000 f961 	bl	8004410 <__sinit>
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <__swsetup_r+0xe0>)
 8004150:	429c      	cmp	r4, r3
 8004152:	d10f      	bne.n	8004174 <__swsetup_r+0x40>
 8004154:	686c      	ldr	r4, [r5, #4]
 8004156:	230c      	movs	r3, #12
 8004158:	5ee2      	ldrsh	r2, [r4, r3]
 800415a:	b293      	uxth	r3, r2
 800415c:	0719      	lsls	r1, r3, #28
 800415e:	d42d      	bmi.n	80041bc <__swsetup_r+0x88>
 8004160:	06d9      	lsls	r1, r3, #27
 8004162:	d411      	bmi.n	8004188 <__swsetup_r+0x54>
 8004164:	2309      	movs	r3, #9
 8004166:	2001      	movs	r0, #1
 8004168:	6033      	str	r3, [r6, #0]
 800416a:	3337      	adds	r3, #55	; 0x37
 800416c:	4313      	orrs	r3, r2
 800416e:	81a3      	strh	r3, [r4, #12]
 8004170:	4240      	negs	r0, r0
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	4b28      	ldr	r3, [pc, #160]	; (8004218 <__swsetup_r+0xe4>)
 8004176:	429c      	cmp	r4, r3
 8004178:	d101      	bne.n	800417e <__swsetup_r+0x4a>
 800417a:	68ac      	ldr	r4, [r5, #8]
 800417c:	e7eb      	b.n	8004156 <__swsetup_r+0x22>
 800417e:	4b27      	ldr	r3, [pc, #156]	; (800421c <__swsetup_r+0xe8>)
 8004180:	429c      	cmp	r4, r3
 8004182:	d1e8      	bne.n	8004156 <__swsetup_r+0x22>
 8004184:	68ec      	ldr	r4, [r5, #12]
 8004186:	e7e6      	b.n	8004156 <__swsetup_r+0x22>
 8004188:	075b      	lsls	r3, r3, #29
 800418a:	d513      	bpl.n	80041b4 <__swsetup_r+0x80>
 800418c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800418e:	2900      	cmp	r1, #0
 8004190:	d008      	beq.n	80041a4 <__swsetup_r+0x70>
 8004192:	0023      	movs	r3, r4
 8004194:	3344      	adds	r3, #68	; 0x44
 8004196:	4299      	cmp	r1, r3
 8004198:	d002      	beq.n	80041a0 <__swsetup_r+0x6c>
 800419a:	0030      	movs	r0, r6
 800419c:	f000 fa38 	bl	8004610 <_free_r>
 80041a0:	2300      	movs	r3, #0
 80041a2:	6363      	str	r3, [r4, #52]	; 0x34
 80041a4:	2224      	movs	r2, #36	; 0x24
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	4393      	bics	r3, r2
 80041aa:	81a3      	strh	r3, [r4, #12]
 80041ac:	2300      	movs	r3, #0
 80041ae:	6063      	str	r3, [r4, #4]
 80041b0:	6923      	ldr	r3, [r4, #16]
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	2308      	movs	r3, #8
 80041b6:	89a2      	ldrh	r2, [r4, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	6923      	ldr	r3, [r4, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <__swsetup_r+0xa6>
 80041c2:	21a0      	movs	r1, #160	; 0xa0
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	0089      	lsls	r1, r1, #2
 80041ca:	0092      	lsls	r2, r2, #2
 80041cc:	400b      	ands	r3, r1
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <__swsetup_r+0xa6>
 80041d2:	0021      	movs	r1, r4
 80041d4:	0030      	movs	r0, r6
 80041d6:	f000 f9d7 	bl	8004588 <__smakebuf_r>
 80041da:	2301      	movs	r3, #1
 80041dc:	89a2      	ldrh	r2, [r4, #12]
 80041de:	4013      	ands	r3, r2
 80041e0:	d011      	beq.n	8004206 <__swsetup_r+0xd2>
 80041e2:	2300      	movs	r3, #0
 80041e4:	60a3      	str	r3, [r4, #8]
 80041e6:	6963      	ldr	r3, [r4, #20]
 80041e8:	425b      	negs	r3, r3
 80041ea:	61a3      	str	r3, [r4, #24]
 80041ec:	2000      	movs	r0, #0
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	4283      	cmp	r3, r0
 80041f2:	d1be      	bne.n	8004172 <__swsetup_r+0x3e>
 80041f4:	230c      	movs	r3, #12
 80041f6:	5ee2      	ldrsh	r2, [r4, r3]
 80041f8:	0613      	lsls	r3, r2, #24
 80041fa:	d5ba      	bpl.n	8004172 <__swsetup_r+0x3e>
 80041fc:	2340      	movs	r3, #64	; 0x40
 80041fe:	4313      	orrs	r3, r2
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	3801      	subs	r0, #1
 8004204:	e7b5      	b.n	8004172 <__swsetup_r+0x3e>
 8004206:	0792      	lsls	r2, r2, #30
 8004208:	d400      	bmi.n	800420c <__swsetup_r+0xd8>
 800420a:	6963      	ldr	r3, [r4, #20]
 800420c:	60a3      	str	r3, [r4, #8]
 800420e:	e7ed      	b.n	80041ec <__swsetup_r+0xb8>
 8004210:	2000000c 	.word	0x2000000c
 8004214:	08004a88 	.word	0x08004a88
 8004218:	08004aa8 	.word	0x08004aa8
 800421c:	08004a68 	.word	0x08004a68

08004220 <__sflush_r>:
 8004220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004222:	898a      	ldrh	r2, [r1, #12]
 8004224:	0005      	movs	r5, r0
 8004226:	000c      	movs	r4, r1
 8004228:	0713      	lsls	r3, r2, #28
 800422a:	d460      	bmi.n	80042ee <__sflush_r+0xce>
 800422c:	684b      	ldr	r3, [r1, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	dc04      	bgt.n	800423c <__sflush_r+0x1c>
 8004232:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	dc01      	bgt.n	800423c <__sflush_r+0x1c>
 8004238:	2000      	movs	r0, #0
 800423a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800423c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800423e:	2f00      	cmp	r7, #0
 8004240:	d0fa      	beq.n	8004238 <__sflush_r+0x18>
 8004242:	2300      	movs	r3, #0
 8004244:	682e      	ldr	r6, [r5, #0]
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	015b      	lsls	r3, r3, #5
 800424c:	6a21      	ldr	r1, [r4, #32]
 800424e:	401a      	ands	r2, r3
 8004250:	d034      	beq.n	80042bc <__sflush_r+0x9c>
 8004252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	075b      	lsls	r3, r3, #29
 8004258:	d506      	bpl.n	8004268 <__sflush_r+0x48>
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	1ac0      	subs	r0, r0, r3
 800425e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <__sflush_r+0x48>
 8004264:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004266:	1ac0      	subs	r0, r0, r3
 8004268:	0002      	movs	r2, r0
 800426a:	6a21      	ldr	r1, [r4, #32]
 800426c:	2300      	movs	r3, #0
 800426e:	0028      	movs	r0, r5
 8004270:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004272:	47b8      	blx	r7
 8004274:	89a1      	ldrh	r1, [r4, #12]
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	d106      	bne.n	8004288 <__sflush_r+0x68>
 800427a:	682b      	ldr	r3, [r5, #0]
 800427c:	2b1d      	cmp	r3, #29
 800427e:	d830      	bhi.n	80042e2 <__sflush_r+0xc2>
 8004280:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <__sflush_r+0x110>)
 8004282:	40da      	lsrs	r2, r3
 8004284:	07d3      	lsls	r3, r2, #31
 8004286:	d52c      	bpl.n	80042e2 <__sflush_r+0xc2>
 8004288:	2300      	movs	r3, #0
 800428a:	6063      	str	r3, [r4, #4]
 800428c:	6923      	ldr	r3, [r4, #16]
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	04cb      	lsls	r3, r1, #19
 8004292:	d505      	bpl.n	80042a0 <__sflush_r+0x80>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	d102      	bne.n	800429e <__sflush_r+0x7e>
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d100      	bne.n	80042a0 <__sflush_r+0x80>
 800429e:	6560      	str	r0, [r4, #84]	; 0x54
 80042a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042a2:	602e      	str	r6, [r5, #0]
 80042a4:	2900      	cmp	r1, #0
 80042a6:	d0c7      	beq.n	8004238 <__sflush_r+0x18>
 80042a8:	0023      	movs	r3, r4
 80042aa:	3344      	adds	r3, #68	; 0x44
 80042ac:	4299      	cmp	r1, r3
 80042ae:	d002      	beq.n	80042b6 <__sflush_r+0x96>
 80042b0:	0028      	movs	r0, r5
 80042b2:	f000 f9ad 	bl	8004610 <_free_r>
 80042b6:	2000      	movs	r0, #0
 80042b8:	6360      	str	r0, [r4, #52]	; 0x34
 80042ba:	e7be      	b.n	800423a <__sflush_r+0x1a>
 80042bc:	2301      	movs	r3, #1
 80042be:	0028      	movs	r0, r5
 80042c0:	47b8      	blx	r7
 80042c2:	1c43      	adds	r3, r0, #1
 80042c4:	d1c6      	bne.n	8004254 <__sflush_r+0x34>
 80042c6:	682b      	ldr	r3, [r5, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0c3      	beq.n	8004254 <__sflush_r+0x34>
 80042cc:	2b1d      	cmp	r3, #29
 80042ce:	d001      	beq.n	80042d4 <__sflush_r+0xb4>
 80042d0:	2b16      	cmp	r3, #22
 80042d2:	d101      	bne.n	80042d8 <__sflush_r+0xb8>
 80042d4:	602e      	str	r6, [r5, #0]
 80042d6:	e7af      	b.n	8004238 <__sflush_r+0x18>
 80042d8:	2340      	movs	r3, #64	; 0x40
 80042da:	89a2      	ldrh	r2, [r4, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	81a3      	strh	r3, [r4, #12]
 80042e0:	e7ab      	b.n	800423a <__sflush_r+0x1a>
 80042e2:	2340      	movs	r3, #64	; 0x40
 80042e4:	430b      	orrs	r3, r1
 80042e6:	2001      	movs	r0, #1
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	4240      	negs	r0, r0
 80042ec:	e7a5      	b.n	800423a <__sflush_r+0x1a>
 80042ee:	690f      	ldr	r7, [r1, #16]
 80042f0:	2f00      	cmp	r7, #0
 80042f2:	d0a1      	beq.n	8004238 <__sflush_r+0x18>
 80042f4:	680b      	ldr	r3, [r1, #0]
 80042f6:	600f      	str	r7, [r1, #0]
 80042f8:	1bdb      	subs	r3, r3, r7
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	2300      	movs	r3, #0
 80042fe:	0792      	lsls	r2, r2, #30
 8004300:	d100      	bne.n	8004304 <__sflush_r+0xe4>
 8004302:	694b      	ldr	r3, [r1, #20]
 8004304:	60a3      	str	r3, [r4, #8]
 8004306:	9b01      	ldr	r3, [sp, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	dc00      	bgt.n	800430e <__sflush_r+0xee>
 800430c:	e794      	b.n	8004238 <__sflush_r+0x18>
 800430e:	9b01      	ldr	r3, [sp, #4]
 8004310:	003a      	movs	r2, r7
 8004312:	6a21      	ldr	r1, [r4, #32]
 8004314:	0028      	movs	r0, r5
 8004316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004318:	47b0      	blx	r6
 800431a:	2800      	cmp	r0, #0
 800431c:	dc03      	bgt.n	8004326 <__sflush_r+0x106>
 800431e:	2340      	movs	r3, #64	; 0x40
 8004320:	89a2      	ldrh	r2, [r4, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	e7df      	b.n	80042e6 <__sflush_r+0xc6>
 8004326:	9b01      	ldr	r3, [sp, #4]
 8004328:	183f      	adds	r7, r7, r0
 800432a:	1a1b      	subs	r3, r3, r0
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	e7ea      	b.n	8004306 <__sflush_r+0xe6>
 8004330:	20400001 	.word	0x20400001

08004334 <_fflush_r>:
 8004334:	690b      	ldr	r3, [r1, #16]
 8004336:	b570      	push	{r4, r5, r6, lr}
 8004338:	0005      	movs	r5, r0
 800433a:	000c      	movs	r4, r1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <_fflush_r+0x10>
 8004340:	2000      	movs	r0, #0
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	2800      	cmp	r0, #0
 8004346:	d004      	beq.n	8004352 <_fflush_r+0x1e>
 8004348:	6983      	ldr	r3, [r0, #24]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <_fflush_r+0x1e>
 800434e:	f000 f85f 	bl	8004410 <__sinit>
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <_fflush_r+0x4c>)
 8004354:	429c      	cmp	r4, r3
 8004356:	d109      	bne.n	800436c <_fflush_r+0x38>
 8004358:	686c      	ldr	r4, [r5, #4]
 800435a:	220c      	movs	r2, #12
 800435c:	5ea3      	ldrsh	r3, [r4, r2]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ee      	beq.n	8004340 <_fflush_r+0xc>
 8004362:	0021      	movs	r1, r4
 8004364:	0028      	movs	r0, r5
 8004366:	f7ff ff5b 	bl	8004220 <__sflush_r>
 800436a:	e7ea      	b.n	8004342 <_fflush_r+0xe>
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <_fflush_r+0x50>)
 800436e:	429c      	cmp	r4, r3
 8004370:	d101      	bne.n	8004376 <_fflush_r+0x42>
 8004372:	68ac      	ldr	r4, [r5, #8]
 8004374:	e7f1      	b.n	800435a <_fflush_r+0x26>
 8004376:	4b04      	ldr	r3, [pc, #16]	; (8004388 <_fflush_r+0x54>)
 8004378:	429c      	cmp	r4, r3
 800437a:	d1ee      	bne.n	800435a <_fflush_r+0x26>
 800437c:	68ec      	ldr	r4, [r5, #12]
 800437e:	e7ec      	b.n	800435a <_fflush_r+0x26>
 8004380:	08004a88 	.word	0x08004a88
 8004384:	08004aa8 	.word	0x08004aa8
 8004388:	08004a68 	.word	0x08004a68

0800438c <std>:
 800438c:	2300      	movs	r3, #0
 800438e:	b510      	push	{r4, lr}
 8004390:	0004      	movs	r4, r0
 8004392:	6003      	str	r3, [r0, #0]
 8004394:	6043      	str	r3, [r0, #4]
 8004396:	6083      	str	r3, [r0, #8]
 8004398:	8181      	strh	r1, [r0, #12]
 800439a:	6643      	str	r3, [r0, #100]	; 0x64
 800439c:	81c2      	strh	r2, [r0, #14]
 800439e:	6103      	str	r3, [r0, #16]
 80043a0:	6143      	str	r3, [r0, #20]
 80043a2:	6183      	str	r3, [r0, #24]
 80043a4:	0019      	movs	r1, r3
 80043a6:	2208      	movs	r2, #8
 80043a8:	305c      	adds	r0, #92	; 0x5c
 80043aa:	f7ff fdfb 	bl	8003fa4 <memset>
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <std+0x38>)
 80043b0:	6224      	str	r4, [r4, #32]
 80043b2:	6263      	str	r3, [r4, #36]	; 0x24
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <std+0x3c>)
 80043b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <std+0x40>)
 80043ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <std+0x44>)
 80043be:	6323      	str	r3, [r4, #48]	; 0x30
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	08004785 	.word	0x08004785
 80043c8:	080047ad 	.word	0x080047ad
 80043cc:	080047e5 	.word	0x080047e5
 80043d0:	08004811 	.word	0x08004811

080043d4 <_cleanup_r>:
 80043d4:	b510      	push	{r4, lr}
 80043d6:	4902      	ldr	r1, [pc, #8]	; (80043e0 <_cleanup_r+0xc>)
 80043d8:	f000 f88c 	bl	80044f4 <_fwalk_reent>
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	08004335 	.word	0x08004335

080043e4 <__sfmoreglue>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	2568      	movs	r5, #104	; 0x68
 80043e8:	1e4a      	subs	r2, r1, #1
 80043ea:	4355      	muls	r5, r2
 80043ec:	000e      	movs	r6, r1
 80043ee:	0029      	movs	r1, r5
 80043f0:	3174      	adds	r1, #116	; 0x74
 80043f2:	f000 f957 	bl	80046a4 <_malloc_r>
 80043f6:	1e04      	subs	r4, r0, #0
 80043f8:	d008      	beq.n	800440c <__sfmoreglue+0x28>
 80043fa:	2100      	movs	r1, #0
 80043fc:	002a      	movs	r2, r5
 80043fe:	6001      	str	r1, [r0, #0]
 8004400:	6046      	str	r6, [r0, #4]
 8004402:	300c      	adds	r0, #12
 8004404:	60a0      	str	r0, [r4, #8]
 8004406:	3268      	adds	r2, #104	; 0x68
 8004408:	f7ff fdcc 	bl	8003fa4 <memset>
 800440c:	0020      	movs	r0, r4
 800440e:	bd70      	pop	{r4, r5, r6, pc}

08004410 <__sinit>:
 8004410:	6983      	ldr	r3, [r0, #24]
 8004412:	b513      	push	{r0, r1, r4, lr}
 8004414:	0004      	movs	r4, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d128      	bne.n	800446c <__sinit+0x5c>
 800441a:	6483      	str	r3, [r0, #72]	; 0x48
 800441c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800441e:	6503      	str	r3, [r0, #80]	; 0x50
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <__sinit+0x60>)
 8004422:	4a14      	ldr	r2, [pc, #80]	; (8004474 <__sinit+0x64>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6282      	str	r2, [r0, #40]	; 0x28
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	4298      	cmp	r0, r3
 800442c:	d101      	bne.n	8004432 <__sinit+0x22>
 800442e:	2301      	movs	r3, #1
 8004430:	6183      	str	r3, [r0, #24]
 8004432:	0020      	movs	r0, r4
 8004434:	f000 f820 	bl	8004478 <__sfp>
 8004438:	6060      	str	r0, [r4, #4]
 800443a:	0020      	movs	r0, r4
 800443c:	f000 f81c 	bl	8004478 <__sfp>
 8004440:	60a0      	str	r0, [r4, #8]
 8004442:	0020      	movs	r0, r4
 8004444:	f000 f818 	bl	8004478 <__sfp>
 8004448:	2200      	movs	r2, #0
 800444a:	60e0      	str	r0, [r4, #12]
 800444c:	2104      	movs	r1, #4
 800444e:	6860      	ldr	r0, [r4, #4]
 8004450:	f7ff ff9c 	bl	800438c <std>
 8004454:	2201      	movs	r2, #1
 8004456:	2109      	movs	r1, #9
 8004458:	68a0      	ldr	r0, [r4, #8]
 800445a:	f7ff ff97 	bl	800438c <std>
 800445e:	2202      	movs	r2, #2
 8004460:	2112      	movs	r1, #18
 8004462:	68e0      	ldr	r0, [r4, #12]
 8004464:	f7ff ff92 	bl	800438c <std>
 8004468:	2301      	movs	r3, #1
 800446a:	61a3      	str	r3, [r4, #24]
 800446c:	bd13      	pop	{r0, r1, r4, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	08004a64 	.word	0x08004a64
 8004474:	080043d5 	.word	0x080043d5

08004478 <__sfp>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <__sfp+0x74>)
 800447c:	0007      	movs	r7, r0
 800447e:	681e      	ldr	r6, [r3, #0]
 8004480:	69b3      	ldr	r3, [r6, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <__sfp+0x14>
 8004486:	0030      	movs	r0, r6
 8004488:	f7ff ffc2 	bl	8004410 <__sinit>
 800448c:	3648      	adds	r6, #72	; 0x48
 800448e:	68b4      	ldr	r4, [r6, #8]
 8004490:	6873      	ldr	r3, [r6, #4]
 8004492:	3b01      	subs	r3, #1
 8004494:	d504      	bpl.n	80044a0 <__sfp+0x28>
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <__sfp+0x34>
 800449c:	6836      	ldr	r6, [r6, #0]
 800449e:	e7f6      	b.n	800448e <__sfp+0x16>
 80044a0:	220c      	movs	r2, #12
 80044a2:	5ea5      	ldrsh	r5, [r4, r2]
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	d00d      	beq.n	80044c4 <__sfp+0x4c>
 80044a8:	3468      	adds	r4, #104	; 0x68
 80044aa:	e7f2      	b.n	8004492 <__sfp+0x1a>
 80044ac:	2104      	movs	r1, #4
 80044ae:	0038      	movs	r0, r7
 80044b0:	f7ff ff98 	bl	80043e4 <__sfmoreglue>
 80044b4:	6030      	str	r0, [r6, #0]
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d1f0      	bne.n	800449c <__sfp+0x24>
 80044ba:	230c      	movs	r3, #12
 80044bc:	0004      	movs	r4, r0
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	0020      	movs	r0, r4
 80044c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c4:	0020      	movs	r0, r4
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <__sfp+0x78>)
 80044c8:	6665      	str	r5, [r4, #100]	; 0x64
 80044ca:	6025      	str	r5, [r4, #0]
 80044cc:	6065      	str	r5, [r4, #4]
 80044ce:	60a5      	str	r5, [r4, #8]
 80044d0:	60e3      	str	r3, [r4, #12]
 80044d2:	6125      	str	r5, [r4, #16]
 80044d4:	6165      	str	r5, [r4, #20]
 80044d6:	61a5      	str	r5, [r4, #24]
 80044d8:	2208      	movs	r2, #8
 80044da:	0029      	movs	r1, r5
 80044dc:	305c      	adds	r0, #92	; 0x5c
 80044de:	f7ff fd61 	bl	8003fa4 <memset>
 80044e2:	6365      	str	r5, [r4, #52]	; 0x34
 80044e4:	63a5      	str	r5, [r4, #56]	; 0x38
 80044e6:	64a5      	str	r5, [r4, #72]	; 0x48
 80044e8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80044ea:	e7e9      	b.n	80044c0 <__sfp+0x48>
 80044ec:	08004a64 	.word	0x08004a64
 80044f0:	ffff0001 	.word	0xffff0001

080044f4 <_fwalk_reent>:
 80044f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044f6:	0004      	movs	r4, r0
 80044f8:	0007      	movs	r7, r0
 80044fa:	2600      	movs	r6, #0
 80044fc:	9101      	str	r1, [sp, #4]
 80044fe:	3448      	adds	r4, #72	; 0x48
 8004500:	2c00      	cmp	r4, #0
 8004502:	d101      	bne.n	8004508 <_fwalk_reent+0x14>
 8004504:	0030      	movs	r0, r6
 8004506:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	68a5      	ldr	r5, [r4, #8]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	9b00      	ldr	r3, [sp, #0]
 8004510:	3b01      	subs	r3, #1
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	d501      	bpl.n	800451a <_fwalk_reent+0x26>
 8004516:	6824      	ldr	r4, [r4, #0]
 8004518:	e7f2      	b.n	8004500 <_fwalk_reent+0xc>
 800451a:	89ab      	ldrh	r3, [r5, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d908      	bls.n	8004532 <_fwalk_reent+0x3e>
 8004520:	220e      	movs	r2, #14
 8004522:	5eab      	ldrsh	r3, [r5, r2]
 8004524:	3301      	adds	r3, #1
 8004526:	d004      	beq.n	8004532 <_fwalk_reent+0x3e>
 8004528:	0029      	movs	r1, r5
 800452a:	0038      	movs	r0, r7
 800452c:	9b01      	ldr	r3, [sp, #4]
 800452e:	4798      	blx	r3
 8004530:	4306      	orrs	r6, r0
 8004532:	3568      	adds	r5, #104	; 0x68
 8004534:	e7eb      	b.n	800450e <_fwalk_reent+0x1a>
	...

08004538 <__swhatbuf_r>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	000e      	movs	r6, r1
 800453c:	001d      	movs	r5, r3
 800453e:	230e      	movs	r3, #14
 8004540:	5ec9      	ldrsh	r1, [r1, r3]
 8004542:	b096      	sub	sp, #88	; 0x58
 8004544:	0014      	movs	r4, r2
 8004546:	2900      	cmp	r1, #0
 8004548:	da07      	bge.n	800455a <__swhatbuf_r+0x22>
 800454a:	2300      	movs	r3, #0
 800454c:	602b      	str	r3, [r5, #0]
 800454e:	89b3      	ldrh	r3, [r6, #12]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	d411      	bmi.n	8004578 <__swhatbuf_r+0x40>
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	e00f      	b.n	800457a <__swhatbuf_r+0x42>
 800455a:	466a      	mov	r2, sp
 800455c:	f000 f984 	bl	8004868 <_fstat_r>
 8004560:	2800      	cmp	r0, #0
 8004562:	dbf2      	blt.n	800454a <__swhatbuf_r+0x12>
 8004564:	22f0      	movs	r2, #240	; 0xf0
 8004566:	9b01      	ldr	r3, [sp, #4]
 8004568:	0212      	lsls	r2, r2, #8
 800456a:	4013      	ands	r3, r2
 800456c:	4a05      	ldr	r2, [pc, #20]	; (8004584 <__swhatbuf_r+0x4c>)
 800456e:	189b      	adds	r3, r3, r2
 8004570:	425a      	negs	r2, r3
 8004572:	4153      	adcs	r3, r2
 8004574:	602b      	str	r3, [r5, #0]
 8004576:	e7ed      	b.n	8004554 <__swhatbuf_r+0x1c>
 8004578:	2340      	movs	r3, #64	; 0x40
 800457a:	2000      	movs	r0, #0
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	b016      	add	sp, #88	; 0x58
 8004580:	bd70      	pop	{r4, r5, r6, pc}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	ffffe000 	.word	0xffffe000

08004588 <__smakebuf_r>:
 8004588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800458a:	2602      	movs	r6, #2
 800458c:	898b      	ldrh	r3, [r1, #12]
 800458e:	0005      	movs	r5, r0
 8004590:	000c      	movs	r4, r1
 8004592:	4233      	tst	r3, r6
 8004594:	d006      	beq.n	80045a4 <__smakebuf_r+0x1c>
 8004596:	0023      	movs	r3, r4
 8004598:	3347      	adds	r3, #71	; 0x47
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	6123      	str	r3, [r4, #16]
 800459e:	2301      	movs	r3, #1
 80045a0:	6163      	str	r3, [r4, #20]
 80045a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80045a4:	ab01      	add	r3, sp, #4
 80045a6:	466a      	mov	r2, sp
 80045a8:	f7ff ffc6 	bl	8004538 <__swhatbuf_r>
 80045ac:	9900      	ldr	r1, [sp, #0]
 80045ae:	0007      	movs	r7, r0
 80045b0:	0028      	movs	r0, r5
 80045b2:	f000 f877 	bl	80046a4 <_malloc_r>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d108      	bne.n	80045cc <__smakebuf_r+0x44>
 80045ba:	220c      	movs	r2, #12
 80045bc:	5ea3      	ldrsh	r3, [r4, r2]
 80045be:	059a      	lsls	r2, r3, #22
 80045c0:	d4ef      	bmi.n	80045a2 <__smakebuf_r+0x1a>
 80045c2:	2203      	movs	r2, #3
 80045c4:	4393      	bics	r3, r2
 80045c6:	431e      	orrs	r6, r3
 80045c8:	81a6      	strh	r6, [r4, #12]
 80045ca:	e7e4      	b.n	8004596 <__smakebuf_r+0xe>
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <__smakebuf_r+0x84>)
 80045ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80045d0:	2380      	movs	r3, #128	; 0x80
 80045d2:	89a2      	ldrh	r2, [r4, #12]
 80045d4:	6020      	str	r0, [r4, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	9b00      	ldr	r3, [sp, #0]
 80045dc:	6120      	str	r0, [r4, #16]
 80045de:	6163      	str	r3, [r4, #20]
 80045e0:	9b01      	ldr	r3, [sp, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00d      	beq.n	8004602 <__smakebuf_r+0x7a>
 80045e6:	230e      	movs	r3, #14
 80045e8:	5ee1      	ldrsh	r1, [r4, r3]
 80045ea:	0028      	movs	r0, r5
 80045ec:	f000 f94e 	bl	800488c <_isatty_r>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d006      	beq.n	8004602 <__smakebuf_r+0x7a>
 80045f4:	2203      	movs	r2, #3
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	4393      	bics	r3, r2
 80045fa:	001a      	movs	r2, r3
 80045fc:	2301      	movs	r3, #1
 80045fe:	4313      	orrs	r3, r2
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	89a0      	ldrh	r0, [r4, #12]
 8004604:	4338      	orrs	r0, r7
 8004606:	81a0      	strh	r0, [r4, #12]
 8004608:	e7cb      	b.n	80045a2 <__smakebuf_r+0x1a>
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	080043d5 	.word	0x080043d5

08004610 <_free_r>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	0005      	movs	r5, r0
 8004614:	2900      	cmp	r1, #0
 8004616:	d010      	beq.n	800463a <_free_r+0x2a>
 8004618:	1f0c      	subs	r4, r1, #4
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	da00      	bge.n	8004622 <_free_r+0x12>
 8004620:	18e4      	adds	r4, r4, r3
 8004622:	0028      	movs	r0, r5
 8004624:	f000 f958 	bl	80048d8 <__malloc_lock>
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <_free_r+0x90>)
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <_free_r+0x2c>
 8004630:	6063      	str	r3, [r4, #4]
 8004632:	6014      	str	r4, [r2, #0]
 8004634:	0028      	movs	r0, r5
 8004636:	f000 f950 	bl	80048da <__malloc_unlock>
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	42a3      	cmp	r3, r4
 800463e:	d909      	bls.n	8004654 <_free_r+0x44>
 8004640:	6821      	ldr	r1, [r4, #0]
 8004642:	1860      	adds	r0, r4, r1
 8004644:	4283      	cmp	r3, r0
 8004646:	d1f3      	bne.n	8004630 <_free_r+0x20>
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	1841      	adds	r1, r0, r1
 800464e:	6021      	str	r1, [r4, #0]
 8004650:	e7ee      	b.n	8004630 <_free_r+0x20>
 8004652:	0013      	movs	r3, r2
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	2a00      	cmp	r2, #0
 8004658:	d001      	beq.n	800465e <_free_r+0x4e>
 800465a:	42a2      	cmp	r2, r4
 800465c:	d9f9      	bls.n	8004652 <_free_r+0x42>
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	1858      	adds	r0, r3, r1
 8004662:	42a0      	cmp	r0, r4
 8004664:	d10b      	bne.n	800467e <_free_r+0x6e>
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	1809      	adds	r1, r1, r0
 800466a:	1858      	adds	r0, r3, r1
 800466c:	6019      	str	r1, [r3, #0]
 800466e:	4282      	cmp	r2, r0
 8004670:	d1e0      	bne.n	8004634 <_free_r+0x24>
 8004672:	6810      	ldr	r0, [r2, #0]
 8004674:	6852      	ldr	r2, [r2, #4]
 8004676:	1841      	adds	r1, r0, r1
 8004678:	6019      	str	r1, [r3, #0]
 800467a:	605a      	str	r2, [r3, #4]
 800467c:	e7da      	b.n	8004634 <_free_r+0x24>
 800467e:	42a0      	cmp	r0, r4
 8004680:	d902      	bls.n	8004688 <_free_r+0x78>
 8004682:	230c      	movs	r3, #12
 8004684:	602b      	str	r3, [r5, #0]
 8004686:	e7d5      	b.n	8004634 <_free_r+0x24>
 8004688:	6821      	ldr	r1, [r4, #0]
 800468a:	1860      	adds	r0, r4, r1
 800468c:	4282      	cmp	r2, r0
 800468e:	d103      	bne.n	8004698 <_free_r+0x88>
 8004690:	6810      	ldr	r0, [r2, #0]
 8004692:	6852      	ldr	r2, [r2, #4]
 8004694:	1841      	adds	r1, r0, r1
 8004696:	6021      	str	r1, [r4, #0]
 8004698:	6062      	str	r2, [r4, #4]
 800469a:	605c      	str	r4, [r3, #4]
 800469c:	e7ca      	b.n	8004634 <_free_r+0x24>
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	20000098 	.word	0x20000098

080046a4 <_malloc_r>:
 80046a4:	2303      	movs	r3, #3
 80046a6:	b570      	push	{r4, r5, r6, lr}
 80046a8:	1ccd      	adds	r5, r1, #3
 80046aa:	439d      	bics	r5, r3
 80046ac:	3508      	adds	r5, #8
 80046ae:	0006      	movs	r6, r0
 80046b0:	2d0c      	cmp	r5, #12
 80046b2:	d21e      	bcs.n	80046f2 <_malloc_r+0x4e>
 80046b4:	250c      	movs	r5, #12
 80046b6:	42a9      	cmp	r1, r5
 80046b8:	d81d      	bhi.n	80046f6 <_malloc_r+0x52>
 80046ba:	0030      	movs	r0, r6
 80046bc:	f000 f90c 	bl	80048d8 <__malloc_lock>
 80046c0:	4a25      	ldr	r2, [pc, #148]	; (8004758 <_malloc_r+0xb4>)
 80046c2:	6814      	ldr	r4, [r2, #0]
 80046c4:	0021      	movs	r1, r4
 80046c6:	2900      	cmp	r1, #0
 80046c8:	d119      	bne.n	80046fe <_malloc_r+0x5a>
 80046ca:	4c24      	ldr	r4, [pc, #144]	; (800475c <_malloc_r+0xb8>)
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <_malloc_r+0x36>
 80046d2:	0030      	movs	r0, r6
 80046d4:	f000 f844 	bl	8004760 <_sbrk_r>
 80046d8:	6020      	str	r0, [r4, #0]
 80046da:	0029      	movs	r1, r5
 80046dc:	0030      	movs	r0, r6
 80046de:	f000 f83f 	bl	8004760 <_sbrk_r>
 80046e2:	1c43      	adds	r3, r0, #1
 80046e4:	d12b      	bne.n	800473e <_malloc_r+0x9a>
 80046e6:	230c      	movs	r3, #12
 80046e8:	0030      	movs	r0, r6
 80046ea:	6033      	str	r3, [r6, #0]
 80046ec:	f000 f8f5 	bl	80048da <__malloc_unlock>
 80046f0:	e003      	b.n	80046fa <_malloc_r+0x56>
 80046f2:	2d00      	cmp	r5, #0
 80046f4:	dadf      	bge.n	80046b6 <_malloc_r+0x12>
 80046f6:	230c      	movs	r3, #12
 80046f8:	6033      	str	r3, [r6, #0]
 80046fa:	2000      	movs	r0, #0
 80046fc:	bd70      	pop	{r4, r5, r6, pc}
 80046fe:	680b      	ldr	r3, [r1, #0]
 8004700:	1b5b      	subs	r3, r3, r5
 8004702:	d419      	bmi.n	8004738 <_malloc_r+0x94>
 8004704:	2b0b      	cmp	r3, #11
 8004706:	d903      	bls.n	8004710 <_malloc_r+0x6c>
 8004708:	600b      	str	r3, [r1, #0]
 800470a:	18cc      	adds	r4, r1, r3
 800470c:	6025      	str	r5, [r4, #0]
 800470e:	e003      	b.n	8004718 <_malloc_r+0x74>
 8004710:	684b      	ldr	r3, [r1, #4]
 8004712:	428c      	cmp	r4, r1
 8004714:	d10d      	bne.n	8004732 <_malloc_r+0x8e>
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	0030      	movs	r0, r6
 800471a:	f000 f8de 	bl	80048da <__malloc_unlock>
 800471e:	0020      	movs	r0, r4
 8004720:	2207      	movs	r2, #7
 8004722:	300b      	adds	r0, #11
 8004724:	1d23      	adds	r3, r4, #4
 8004726:	4390      	bics	r0, r2
 8004728:	1ac3      	subs	r3, r0, r3
 800472a:	d0e7      	beq.n	80046fc <_malloc_r+0x58>
 800472c:	425a      	negs	r2, r3
 800472e:	50e2      	str	r2, [r4, r3]
 8004730:	e7e4      	b.n	80046fc <_malloc_r+0x58>
 8004732:	6063      	str	r3, [r4, #4]
 8004734:	000c      	movs	r4, r1
 8004736:	e7ef      	b.n	8004718 <_malloc_r+0x74>
 8004738:	000c      	movs	r4, r1
 800473a:	6849      	ldr	r1, [r1, #4]
 800473c:	e7c3      	b.n	80046c6 <_malloc_r+0x22>
 800473e:	2303      	movs	r3, #3
 8004740:	1cc4      	adds	r4, r0, #3
 8004742:	439c      	bics	r4, r3
 8004744:	42a0      	cmp	r0, r4
 8004746:	d0e1      	beq.n	800470c <_malloc_r+0x68>
 8004748:	1a21      	subs	r1, r4, r0
 800474a:	0030      	movs	r0, r6
 800474c:	f000 f808 	bl	8004760 <_sbrk_r>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d1db      	bne.n	800470c <_malloc_r+0x68>
 8004754:	e7c7      	b.n	80046e6 <_malloc_r+0x42>
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	20000098 	.word	0x20000098
 800475c:	2000009c 	.word	0x2000009c

08004760 <_sbrk_r>:
 8004760:	2300      	movs	r3, #0
 8004762:	b570      	push	{r4, r5, r6, lr}
 8004764:	4c06      	ldr	r4, [pc, #24]	; (8004780 <_sbrk_r+0x20>)
 8004766:	0005      	movs	r5, r0
 8004768:	0008      	movs	r0, r1
 800476a:	6023      	str	r3, [r4, #0]
 800476c:	f7fc fb06 	bl	8000d7c <_sbrk>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d103      	bne.n	800477c <_sbrk_r+0x1c>
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d000      	beq.n	800477c <_sbrk_r+0x1c>
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	bd70      	pop	{r4, r5, r6, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	20000720 	.word	0x20000720

08004784 <__sread>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	000c      	movs	r4, r1
 8004788:	250e      	movs	r5, #14
 800478a:	5f49      	ldrsh	r1, [r1, r5]
 800478c:	f000 f8a6 	bl	80048dc <_read_r>
 8004790:	2800      	cmp	r0, #0
 8004792:	db03      	blt.n	800479c <__sread+0x18>
 8004794:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004796:	181b      	adds	r3, r3, r0
 8004798:	6563      	str	r3, [r4, #84]	; 0x54
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	4a02      	ldr	r2, [pc, #8]	; (80047a8 <__sread+0x24>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	81a3      	strh	r3, [r4, #12]
 80047a4:	e7f9      	b.n	800479a <__sread+0x16>
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	ffffefff 	.word	0xffffefff

080047ac <__swrite>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	001f      	movs	r7, r3
 80047b0:	898b      	ldrh	r3, [r1, #12]
 80047b2:	0005      	movs	r5, r0
 80047b4:	000c      	movs	r4, r1
 80047b6:	0016      	movs	r6, r2
 80047b8:	05db      	lsls	r3, r3, #23
 80047ba:	d505      	bpl.n	80047c8 <__swrite+0x1c>
 80047bc:	230e      	movs	r3, #14
 80047be:	5ec9      	ldrsh	r1, [r1, r3]
 80047c0:	2200      	movs	r2, #0
 80047c2:	2302      	movs	r3, #2
 80047c4:	f000 f874 	bl	80048b0 <_lseek_r>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <__swrite+0x34>)
 80047cc:	0028      	movs	r0, r5
 80047ce:	4013      	ands	r3, r2
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	0032      	movs	r2, r6
 80047d4:	230e      	movs	r3, #14
 80047d6:	5ee1      	ldrsh	r1, [r4, r3]
 80047d8:	003b      	movs	r3, r7
 80047da:	f000 f81f 	bl	800481c <_write_r>
 80047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e0:	ffffefff 	.word	0xffffefff

080047e4 <__sseek>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	000c      	movs	r4, r1
 80047e8:	250e      	movs	r5, #14
 80047ea:	5f49      	ldrsh	r1, [r1, r5]
 80047ec:	f000 f860 	bl	80048b0 <_lseek_r>
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	1c42      	adds	r2, r0, #1
 80047f4:	d103      	bne.n	80047fe <__sseek+0x1a>
 80047f6:	4a05      	ldr	r2, [pc, #20]	; (800480c <__sseek+0x28>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	81a3      	strh	r3, [r4, #12]
 80047fc:	bd70      	pop	{r4, r5, r6, pc}
 80047fe:	2280      	movs	r2, #128	; 0x80
 8004800:	0152      	lsls	r2, r2, #5
 8004802:	4313      	orrs	r3, r2
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	6560      	str	r0, [r4, #84]	; 0x54
 8004808:	e7f8      	b.n	80047fc <__sseek+0x18>
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	ffffefff 	.word	0xffffefff

08004810 <__sclose>:
 8004810:	b510      	push	{r4, lr}
 8004812:	230e      	movs	r3, #14
 8004814:	5ec9      	ldrsh	r1, [r1, r3]
 8004816:	f000 f815 	bl	8004844 <_close_r>
 800481a:	bd10      	pop	{r4, pc}

0800481c <_write_r>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	0005      	movs	r5, r0
 8004820:	0008      	movs	r0, r1
 8004822:	0011      	movs	r1, r2
 8004824:	2200      	movs	r2, #0
 8004826:	4c06      	ldr	r4, [pc, #24]	; (8004840 <_write_r+0x24>)
 8004828:	6022      	str	r2, [r4, #0]
 800482a:	001a      	movs	r2, r3
 800482c:	f7fc fa5d 	bl	8000cea <_write>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d103      	bne.n	800483c <_write_r+0x20>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d000      	beq.n	800483c <_write_r+0x20>
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	bd70      	pop	{r4, r5, r6, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	20000720 	.word	0x20000720

08004844 <_close_r>:
 8004844:	2300      	movs	r3, #0
 8004846:	b570      	push	{r4, r5, r6, lr}
 8004848:	4c06      	ldr	r4, [pc, #24]	; (8004864 <_close_r+0x20>)
 800484a:	0005      	movs	r5, r0
 800484c:	0008      	movs	r0, r1
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	f7fc fa67 	bl	8000d22 <_close>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d103      	bne.n	8004860 <_close_r+0x1c>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d000      	beq.n	8004860 <_close_r+0x1c>
 800485e:	602b      	str	r3, [r5, #0]
 8004860:	bd70      	pop	{r4, r5, r6, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	20000720 	.word	0x20000720

08004868 <_fstat_r>:
 8004868:	2300      	movs	r3, #0
 800486a:	b570      	push	{r4, r5, r6, lr}
 800486c:	4c06      	ldr	r4, [pc, #24]	; (8004888 <_fstat_r+0x20>)
 800486e:	0005      	movs	r5, r0
 8004870:	0008      	movs	r0, r1
 8004872:	0011      	movs	r1, r2
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	f7fc fa5e 	bl	8000d36 <_fstat>
 800487a:	1c43      	adds	r3, r0, #1
 800487c:	d103      	bne.n	8004886 <_fstat_r+0x1e>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d000      	beq.n	8004886 <_fstat_r+0x1e>
 8004884:	602b      	str	r3, [r5, #0]
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	20000720 	.word	0x20000720

0800488c <_isatty_r>:
 800488c:	2300      	movs	r3, #0
 800488e:	b570      	push	{r4, r5, r6, lr}
 8004890:	4c06      	ldr	r4, [pc, #24]	; (80048ac <_isatty_r+0x20>)
 8004892:	0005      	movs	r5, r0
 8004894:	0008      	movs	r0, r1
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	f7fc fa5b 	bl	8000d52 <_isatty>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d103      	bne.n	80048a8 <_isatty_r+0x1c>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d000      	beq.n	80048a8 <_isatty_r+0x1c>
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	20000720 	.word	0x20000720

080048b0 <_lseek_r>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	0005      	movs	r5, r0
 80048b4:	0008      	movs	r0, r1
 80048b6:	0011      	movs	r1, r2
 80048b8:	2200      	movs	r2, #0
 80048ba:	4c06      	ldr	r4, [pc, #24]	; (80048d4 <_lseek_r+0x24>)
 80048bc:	6022      	str	r2, [r4, #0]
 80048be:	001a      	movs	r2, r3
 80048c0:	f7fc fa50 	bl	8000d64 <_lseek>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d103      	bne.n	80048d0 <_lseek_r+0x20>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d000      	beq.n	80048d0 <_lseek_r+0x20>
 80048ce:	602b      	str	r3, [r5, #0]
 80048d0:	bd70      	pop	{r4, r5, r6, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	20000720 	.word	0x20000720

080048d8 <__malloc_lock>:
 80048d8:	4770      	bx	lr

080048da <__malloc_unlock>:
 80048da:	4770      	bx	lr

080048dc <_read_r>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	0005      	movs	r5, r0
 80048e0:	0008      	movs	r0, r1
 80048e2:	0011      	movs	r1, r2
 80048e4:	2200      	movs	r2, #0
 80048e6:	4c06      	ldr	r4, [pc, #24]	; (8004900 <_read_r+0x24>)
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	001a      	movs	r2, r3
 80048ec:	f7fc f9e0 	bl	8000cb0 <_read>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d103      	bne.n	80048fc <_read_r+0x20>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d000      	beq.n	80048fc <_read_r+0x20>
 80048fa:	602b      	str	r3, [r5, #0]
 80048fc:	bd70      	pop	{r4, r5, r6, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	20000720 	.word	0x20000720

08004904 <_init>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr

08004910 <_fini>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004916:	bc08      	pop	{r3}
 8004918:	469e      	mov	lr, r3
 800491a:	4770      	bx	lr
