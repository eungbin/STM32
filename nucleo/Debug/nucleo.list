
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800371c  0800371c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800371c  0800371c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800371c  0800371c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000074  08003798  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08003798  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d0f  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab2  00000000  00000000  00028dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  0002a860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000738  00000000  00000000  0002b050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000310e  00000000  00000000  0002b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000796f  00000000  00000000  0002e896  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000913dd  00000000  00000000  00036205  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c75e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002034  00000000  00000000  000c7660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800364c 	.word	0x0800364c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800364c 	.word	0x0800364c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 8000228:	1d39      	adds	r1, r7, #4
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <__io_putchar+0x20>)
 800022c:	230a      	movs	r3, #10
 800022e:	2201      	movs	r2, #1
 8000230:	f001 fd30 	bl	8001c94 <HAL_UART_Transmit>

	return 1;
 8000234:	2301      	movs	r3, #1
}
 8000236:	0018      	movs	r0, r3
 8000238:	46bd      	mov	sp, r7
 800023a:	b002      	add	sp, #8
 800023c:	bd80      	pop	{r7, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	20000490 	.word	0x20000490

08000244 <__io_getchar>:

int __io_getchar(void) {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <__io_getchar+0x1c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	0019      	movs	r1, r3
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <__io_getchar+0x20>)
 8000250:	2201      	movs	r2, #1
 8000252:	0018      	movs	r0, r3
 8000254:	f001 fdc7 	bl	8001de6 <HAL_UART_Receive_IT>

	return 1;
 8000258:	2301      	movs	r3, #1
}
 800025a:	0018      	movs	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	200000a4 	.word	0x200000a4
 8000264:	20000490 	.word	0x20000490

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fb2c 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f83e 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f8c0 	bl	80003f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000278:	f000 f88e 	bl	8000398 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800027c:	4916      	ldr	r1, [pc, #88]	; (80002d8 <main+0x70>)
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <main+0x74>)
 8000280:	2201      	movs	r2, #1
 8000282:	0018      	movs	r0, r3
 8000284:	f001 fdaf 	bl	8001de6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(loop_value == 1)
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <main+0x78>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d104      	bne.n	800029a <main+0x32>
		  printf("loop.\r\n");
 8000290:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <main+0x7c>)
 8000292:	0018      	movs	r0, r3
 8000294:	f002 fd92 	bl	8002dbc <puts>
 8000298:	e00c      	b.n	80002b4 <main+0x4c>
	  else if(loop_value == 2)
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <main+0x78>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b02      	cmp	r3, #2
 80002a0:	d104      	bne.n	80002ac <main+0x44>
		  printf("loop..\r\n");
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <main+0x80>)
 80002a4:	0018      	movs	r0, r3
 80002a6:	f002 fd89 	bl	8002dbc <puts>
 80002aa:	e003      	b.n	80002b4 <main+0x4c>
	  else
		  printf("loop...\r\n");
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <main+0x84>)
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 fd84 	bl	8002dbc <puts>
	  if(loop_value == 3)
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <main+0x78>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b03      	cmp	r3, #3
 80002ba:	d102      	bne.n	80002c2 <main+0x5a>
		  loop_value = 0;
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <main+0x78>)
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
	  loop_value += 1;
 80002c2:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <main+0x78>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	1c5a      	adds	r2, r3, #1
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <main+0x78>)
 80002ca:	601a      	str	r2, [r3, #0]
	  HAL_Delay(500);
 80002cc:	23fa      	movs	r3, #250	; 0xfa
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fb5d 	bl	8000990 <HAL_Delay>
	  if(loop_value == 1)
 80002d6:	e7d7      	b.n	8000288 <main+0x20>
 80002d8:	200000a4 	.word	0x200000a4
 80002dc:	20000490 	.word	0x20000490
 80002e0:	20000000 	.word	0x20000000
 80002e4:	08003664 	.word	0x08003664
 80002e8:	0800366c 	.word	0x0800366c
 80002ec:	08003674 	.word	0x08003674

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b099      	sub	sp, #100	; 0x64
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	242c      	movs	r4, #44	; 0x2c
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	2334      	movs	r3, #52	; 0x34
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f002 fcf3 	bl	8002cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000306:	231c      	movs	r3, #28
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	0018      	movs	r0, r3
 800030c:	2310      	movs	r3, #16
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f002 fceb 	bl	8002cec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000316:	003b      	movs	r3, r7
 8000318:	0018      	movs	r0, r3
 800031a:	231c      	movs	r3, #28
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f002 fce4 	bl	8002cec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000324:	193b      	adds	r3, r7, r4
 8000326:	2220      	movs	r2, #32
 8000328:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2201      	movs	r2, #1
 800032e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000330:	193b      	adds	r3, r7, r4
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	193b      	adds	r3, r7, r4
 8000338:	0018      	movs	r0, r3
 800033a:	f000 fe59 	bl	8000ff0 <HAL_RCC_OscConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000342:	f000 f94b 	bl	80005dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	211c      	movs	r1, #28
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2207      	movs	r2, #7
 800034c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2203      	movs	r2, #3
 8000352:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2101      	movs	r1, #1
 8000364:	0018      	movs	r0, r3
 8000366:	f001 f9c9 	bl	80016fc <HAL_RCC_ClockConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036e:	f000 f935 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000372:	003b      	movs	r3, r7
 8000374:	2202      	movs	r2, #2
 8000376:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000378:	003b      	movs	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	f001 fb33 	bl	80019ec <HAL_RCCEx_PeriphCLKConfig>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800038a:	f000 f927 	bl	80005dc <Error_Handler>
  }
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b019      	add	sp, #100	; 0x64
 8000394:	bd90      	pop	{r4, r7, pc}
	...

08000398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 800039e:	4a15      	ldr	r2, [pc, #84]	; (80003f4 <MX_USART2_UART_Init+0x5c>)
 80003a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003a4:	2296      	movs	r2, #150	; 0x96
 80003a6:	0212      	lsls	r2, r2, #8
 80003a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003be:	220c      	movs	r2, #12
 80003c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <MX_USART2_UART_Init+0x58>)
 80003dc:	0018      	movs	r0, r3
 80003de:	f001 fc05 	bl	8001bec <HAL_UART_Init>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003e6:	f000 f8f9 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000490 	.word	0x20000490
 80003f4:	40004400 	.word	0x40004400

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b089      	sub	sp, #36	; 0x24
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	240c      	movs	r4, #12
 8000400:	193b      	adds	r3, r7, r4
 8000402:	0018      	movs	r0, r3
 8000404:	2314      	movs	r3, #20
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f002 fc6f 	bl	8002cec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040e:	4b3b      	ldr	r3, [pc, #236]	; (80004fc <MX_GPIO_Init+0x104>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b3a      	ldr	r3, [pc, #232]	; (80004fc <MX_GPIO_Init+0x104>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	0309      	lsls	r1, r1, #12
 8000418:	430a      	orrs	r2, r1
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	4b37      	ldr	r3, [pc, #220]	; (80004fc <MX_GPIO_Init+0x104>)
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	031b      	lsls	r3, r3, #12
 8000424:	4013      	ands	r3, r2
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b34      	ldr	r3, [pc, #208]	; (80004fc <MX_GPIO_Init+0x104>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b33      	ldr	r3, [pc, #204]	; (80004fc <MX_GPIO_Init+0x104>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0289      	lsls	r1, r1, #10
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b30      	ldr	r3, [pc, #192]	; (80004fc <MX_GPIO_Init+0x104>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	4013      	ands	r3, r2
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <MX_GPIO_Init+0x104>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b2c      	ldr	r3, [pc, #176]	; (80004fc <MX_GPIO_Init+0x104>)
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	02c9      	lsls	r1, r1, #11
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <MX_GPIO_Init+0x104>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	02db      	lsls	r3, r3, #11
 800045c:	4013      	ands	r3, r2
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(URLED2_GPIO_Port, URLED2_Pin, GPIO_PIN_RESET);
 8000462:	2390      	movs	r3, #144	; 0x90
 8000464:	05db      	lsls	r3, r3, #23
 8000466:	2200      	movs	r2, #0
 8000468:	2120      	movs	r1, #32
 800046a:	0018      	movs	r0, r3
 800046c:	f000 fd86 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : URBTN_Pin */
  GPIO_InitStruct.Pin = URBTN_Pin;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	0192      	lsls	r2, r2, #6
 8000476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	4a21      	ldr	r2, [pc, #132]	; (8000500 <MX_GPIO_Init+0x108>)
 800047c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(URBTN_GPIO_Port, &GPIO_InitStruct);
 8000484:	193b      	adds	r3, r7, r4
 8000486:	4a1f      	ldr	r2, [pc, #124]	; (8000504 <MX_GPIO_Init+0x10c>)
 8000488:	0019      	movs	r1, r3
 800048a:	0010      	movs	r0, r2
 800048c:	f000 fbfe 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : URLED2_Pin */
  GPIO_InitStruct.Pin = URLED2_Pin;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2220      	movs	r2, #32
 8000494:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2201      	movs	r2, #1
 800049a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(URLED2_GPIO_Port, &GPIO_InitStruct);
 80004a8:	193a      	adds	r2, r7, r4
 80004aa:	2390      	movs	r3, #144	; 0x90
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fbeb 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004b6:	0021      	movs	r1, r4
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	22c0      	movs	r2, #192	; 0xc0
 80004bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2202      	movs	r2, #2
 80004c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2203      	movs	r2, #3
 80004ce:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <MX_GPIO_Init+0x110>)
 80004da:	0019      	movs	r1, r3
 80004dc:	0010      	movs	r0, r2
 80004de:	f000 fbd5 	bl	8000c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2007      	movs	r0, #7
 80004e8:	f000 fb20 	bl	8000b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004ec:	2007      	movs	r0, #7
 80004ee:	f000 fb32 	bl	8000b56 <HAL_NVIC_EnableIRQ>

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b009      	add	sp, #36	; 0x24
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000
 8000500:	10110000 	.word	0x10110000
 8000504:	48000800 	.word	0x48000800
 8000508:	48000400 	.word	0x48000400

0800050c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	0002      	movs	r2, r0
 8000514:	1dbb      	adds	r3, r7, #6
 8000516:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == URBTN_Pin) {
 8000518:	1dbb      	adds	r3, r7, #6
 800051a:	881a      	ldrh	r2, [r3, #0]
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	019b      	lsls	r3, r3, #6
 8000520:	429a      	cmp	r2, r3
 8000522:	d10a      	bne.n	800053a <HAL_GPIO_EXTI_Callback+0x2e>
    if(led_status == FALSE) {
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <HAL_GPIO_EXTI_Callback+0x38>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d103      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x28>
    	led_status = TRUE;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_GPIO_EXTI_Callback+0x38>)
 800052e:	2201      	movs	r2, #1
 8000530:	601a      	str	r2, [r3, #0]
    } else {
    	led_status = FALSE;
    }
  }
}
 8000532:	e002      	b.n	800053a <HAL_GPIO_EXTI_Callback+0x2e>
    	led_status = FALSE;
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <HAL_GPIO_EXTI_Callback+0x38>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	20000090 	.word	0x20000090

08000548 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	// rx_data의 크기는 4, &rx_data의 크기는 1
	if(huart->Instance == USART2) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <HAL_UART_RxCpltCallback+0x80>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d131      	bne.n	80005be <HAL_UART_RxCpltCallback+0x76>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800055a:	491c      	ldr	r1, [pc, #112]	; (80005cc <HAL_UART_RxCpltCallback+0x84>)
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <HAL_UART_RxCpltCallback+0x88>)
 800055e:	2201      	movs	r2, #1
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fc40 	bl	8001de6 <HAL_UART_Receive_IT>
		buf[list_value] = rx_data;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <HAL_UART_RxCpltCallback+0x84>)
 800056c:	7811      	ldrb	r1, [r2, #0]
 800056e:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <HAL_UART_RxCpltCallback+0x90>)
 8000570:	54d1      	strb	r1, [r2, r3]
		list_value++;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <HAL_UART_RxCpltCallback+0x8c>)
 800057a:	601a      	str	r2, [r3, #0]
		if(rx_data == 'p') {
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <HAL_UART_RxCpltCallback+0x84>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b70      	cmp	r3, #112	; 0x70
 8000582:	d11c      	bne.n	80005be <HAL_UART_RxCpltCallback+0x76>
			HAL_UART_Transmit(&huart2, &buf, (list_value-1), 1);
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	b29b      	uxth	r3, r3
 800058a:	3b01      	subs	r3, #1
 800058c:	b29a      	uxth	r2, r3
 800058e:	4912      	ldr	r1, [pc, #72]	; (80005d8 <HAL_UART_RxCpltCallback+0x90>)
 8000590:	480f      	ldr	r0, [pc, #60]	; (80005d0 <HAL_UART_RxCpltCallback+0x88>)
 8000592:	2301      	movs	r3, #1
 8000594:	f001 fb7e 	bl	8001c94 <HAL_UART_Transmit>
			for(int i=0; i<list_value; i++) {
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e007      	b.n	80005ae <HAL_UART_RxCpltCallback+0x66>
				buf[i] = 'null';
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_UART_RxCpltCallback+0x90>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	18d3      	adds	r3, r2, r3
 80005a4:	226c      	movs	r2, #108	; 0x6c
 80005a6:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<list_value; i++) {
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	3301      	adds	r3, #1
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_UART_RxCpltCallback+0x8c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf2      	blt.n	800059e <HAL_UART_RxCpltCallback+0x56>
			}
			list_value = 0;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_UART_RxCpltCallback+0x8c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
		}
//		HAL_UART_Transmit(&huart2, &rx_data, 1, 1);
	}
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b004      	add	sp, #16
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40004400 	.word	0x40004400
 80005cc:	200000a4 	.word	0x200000a4
 80005d0:	20000490 	.word	0x20000490
 80005d4:	20000094 	.word	0x20000094
 80005d8:	200000a8 	.word	0x200000a8

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <Error_Handler+0x6>

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x44>)
 80005ec:	699a      	ldr	r2, [r3, #24]
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <HAL_MspInit+0x44>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	430a      	orrs	r2, r1
 80005f4:	619a      	str	r2, [r3, #24]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_MspInit+0x44>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	2201      	movs	r2, #1
 80005fc:	4013      	ands	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_MspInit+0x44>)
 8000604:	69da      	ldr	r2, [r3, #28]
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_MspInit+0x44>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0549      	lsls	r1, r1, #21
 800060c:	430a      	orrs	r2, r1
 800060e:	61da      	str	r2, [r3, #28]
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_MspInit+0x44>)
 8000612:	69da      	ldr	r2, [r3, #28]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	055b      	lsls	r3, r3, #21
 8000618:	4013      	ands	r3, r2
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	2314      	movs	r3, #20
 8000636:	18fb      	adds	r3, r7, r3
 8000638:	0018      	movs	r0, r3
 800063a:	2314      	movs	r3, #20
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f002 fb54 	bl	8002cec <memset>
  if(huart->Instance==USART2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <HAL_UART_MspInit+0xa0>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d13a      	bne.n	80006c4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <HAL_UART_MspInit+0xa4>)
 8000650:	69da      	ldr	r2, [r3, #28]
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_UART_MspInit+0xa4>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0289      	lsls	r1, r1, #10
 8000658:	430a      	orrs	r2, r1
 800065a:	61da      	str	r2, [r3, #28]
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_UART_MspInit+0xa4>)
 800065e:	69da      	ldr	r2, [r3, #28]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	029b      	lsls	r3, r3, #10
 8000664:	4013      	ands	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_UART_MspInit+0xa4>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_UART_MspInit+0xa4>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0289      	lsls	r1, r1, #10
 8000674:	430a      	orrs	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_UART_MspInit+0xa4>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	029b      	lsls	r3, r3, #10
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000686:	2114      	movs	r1, #20
 8000688:	187b      	adds	r3, r7, r1
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2202      	movs	r2, #2
 8000692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2203      	movs	r2, #3
 800069e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2201      	movs	r2, #1
 80006a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	187a      	adds	r2, r7, r1
 80006a8:	2390      	movs	r3, #144	; 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 faec 	bl	8000c8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	201c      	movs	r0, #28
 80006ba:	f000 fa37 	bl	8000b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006be:	201c      	movs	r0, #28
 80006c0:	f000 fa49 	bl	8000b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b00a      	add	sp, #40	; 0x28
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40004400 	.word	0x40004400
 80006d0:	40021000 	.word	0x40021000

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <NMI_Handler+0x4>

080006da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <HardFault_Handler+0x4>

080006e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f8:	f000 f92e 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fc54 	bl	8000fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <USART2_IRQHandler+0x14>)
 800071e:	0018      	movs	r0, r3
 8000720:	f001 fbb2 	bl	8001e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000490 	.word	0x20000490

08000730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e00a      	b.n	8000758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000742:	f7ff fd7f 	bl	8000244 <__io_getchar>
 8000746:	0001      	movs	r1, r0
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	60ba      	str	r2, [r7, #8]
 800074e:	b2ca      	uxtb	r2, r1
 8000750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	dbf0      	blt.n	8000742 <_read+0x12>
	}

return len;
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	0018      	movs	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	b006      	add	sp, #24
 8000768:	bd80      	pop	{r7, pc}

0800076a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	e009      	b.n	8000790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	60ba      	str	r2, [r7, #8]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff fd4b 	bl	8000220 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbf1      	blt.n	800077c <_write+0x12>
	}
	return len;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	0018      	movs	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	b006      	add	sp, #24
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_close>:

int _close(int file)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	return -1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	425b      	negs	r3, r3
}
 80007ae:	0018      	movs	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	0192      	lsls	r2, r2, #6
 80007c6:	605a      	str	r2, [r3, #4]
	return 0;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_isatty>:

int _isatty(int file)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	return 1;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	0018      	movs	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f002 fa34 	bl	8002c98 <__errno>
 8000830:	0003      	movs	r3, r0
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000836:	2301      	movs	r3, #1
 8000838:	425b      	negs	r3, r3
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	18d2      	adds	r2, r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b006      	add	sp, #24
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20004000 	.word	0x20004000
 800085c:	00000400 	.word	0x00000400
 8000860:	20000098 	.word	0x20000098
 8000864:	20000520 	.word	0x20000520

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000876:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800087a:	490e      	ldr	r1, [pc, #56]	; (80008b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800087c:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <LoopForever+0xe>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000890:	4c0b      	ldr	r4, [pc, #44]	; (80008c0 <LoopForever+0x16>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800089e:	f7ff ffe3 	bl	8000868 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008a2:	f002 f9ff 	bl	8002ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff fcdf 	bl	8000268 <main>

080008aa <LoopForever>:

LoopForever:
    b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008b8:	08003724 	.word	0x08003724
  ldr r2, =_sbss
 80008bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008c0:	20000520 	.word	0x20000520

080008c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_COMP_IRQHandler>
	...

080008c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <HAL_Init+0x24>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_Init+0x24>)
 80008d2:	2110      	movs	r1, #16
 80008d4:	430a      	orrs	r2, r1
 80008d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 f809 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008de:	f7ff fe81 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40022000 	.word	0x40022000

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_InitTick+0x5c>)
 80008fa:	681c      	ldr	r4, [r3, #0]
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_InitTick+0x60>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	0019      	movs	r1, r3
 8000902:	23fa      	movs	r3, #250	; 0xfa
 8000904:	0098      	lsls	r0, r3, #2
 8000906:	f7ff fbff 	bl	8000108 <__udivsi3>
 800090a:	0003      	movs	r3, r0
 800090c:	0019      	movs	r1, r3
 800090e:	0020      	movs	r0, r4
 8000910:	f7ff fbfa 	bl	8000108 <__udivsi3>
 8000914:	0003      	movs	r3, r0
 8000916:	0018      	movs	r0, r3
 8000918:	f000 f92d 	bl	8000b76 <HAL_SYSTICK_Config>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	e00f      	b.n	8000944 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b03      	cmp	r3, #3
 8000928:	d80b      	bhi.n	8000942 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	2301      	movs	r3, #1
 800092e:	425b      	negs	r3, r3
 8000930:	2200      	movs	r2, #0
 8000932:	0018      	movs	r0, r3
 8000934:	f000 f8fa 	bl	8000b2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_InitTick+0x64>)
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	0018      	movs	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	b003      	add	sp, #12
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	20000004 	.word	0x20000004
 8000950:	2000000c 	.word	0x2000000c
 8000954:	20000008 	.word	0x20000008

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x1c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	001a      	movs	r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x20>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	18d2      	adds	r2, r2, r3
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <HAL_IncTick+0x20>)
 800096a:	601a      	str	r2, [r3, #0]
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	2000000c 	.word	0x2000000c
 8000978:	20000518 	.word	0x20000518

0800097c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <HAL_GetTick+0x10>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	20000518 	.word	0x20000518

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff fff0 	bl	800097c <HAL_GetTick>
 800099c:	0003      	movs	r3, r0
 800099e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	d005      	beq.n	80009b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_Delay+0x40>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	001a      	movs	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	189b      	adds	r3, r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	f7ff ffe0 	bl	800097c <HAL_GetTick>
 80009bc:	0002      	movs	r2, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f7      	bhi.n	80009b8 <HAL_Delay+0x28>
  {
  }
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b004      	add	sp, #16
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000000c 	.word	0x2000000c

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b7f      	cmp	r3, #127	; 0x7f
 80009e6:	d809      	bhi.n	80009fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	231f      	movs	r3, #31
 80009f0:	401a      	ands	r2, r3
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_EnableIRQ+0x30>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	4091      	lsls	r1, r2
 80009f8:	000a      	movs	r2, r1
 80009fa:	601a      	str	r2, [r3, #0]
  }
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	e000e100 	.word	0xe000e100

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	0002      	movs	r2, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a1c:	d828      	bhi.n	8000a70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <__NVIC_SetPriority+0xd4>)
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	33c0      	adds	r3, #192	; 0xc0
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	589b      	ldr	r3, [r3, r2]
 8000a2e:	1dfa      	adds	r2, r7, #7
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	0011      	movs	r1, r2
 8000a34:	2203      	movs	r2, #3
 8000a36:	400a      	ands	r2, r1
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	21ff      	movs	r1, #255	; 0xff
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	000a      	movs	r2, r1
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0018      	movs	r0, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	4003      	ands	r3, r0
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5c:	481f      	ldr	r0, [pc, #124]	; (8000adc <__NVIC_SetPriority+0xd4>)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	430a      	orrs	r2, r1
 8000a68:	33c0      	adds	r3, #192	; 0xc0
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a6e:	e031      	b.n	8000ad4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <__NVIC_SetPriority+0xd8>)
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0019      	movs	r1, r3
 8000a78:	230f      	movs	r3, #15
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	3b08      	subs	r3, #8
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3306      	adds	r3, #6
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	3304      	adds	r3, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1dfa      	adds	r2, r7, #7
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	0011      	movs	r1, r2
 8000a90:	2203      	movs	r2, #3
 8000a92:	400a      	ands	r2, r1
 8000a94:	00d2      	lsls	r2, r2, #3
 8000a96:	21ff      	movs	r1, #255	; 0xff
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	43d2      	mvns	r2, r2
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	019b      	lsls	r3, r3, #6
 8000aa6:	22ff      	movs	r2, #255	; 0xff
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	4003      	ands	r3, r0
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <__NVIC_SetPriority+0xd8>)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	001c      	movs	r4, r3
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	4023      	ands	r3, r4
 8000ac4:	3b08      	subs	r3, #8
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	3306      	adds	r3, #6
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	18c3      	adds	r3, r0, r3
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b003      	add	sp, #12
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <SysTick_Config+0x40>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d901      	bls.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e010      	b.n	8000b1c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <SysTick_Config+0x44>)
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	3a01      	subs	r2, #1
 8000b00:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	2301      	movs	r3, #1
 8000b04:	425b      	negs	r3, r3
 8000b06:	2103      	movs	r1, #3
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff ff7d 	bl	8000a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SysTick_Config+0x44>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SysTick_Config+0x44>)
 8000b16:	2207      	movs	r2, #7
 8000b18:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	00ffffff 	.word	0x00ffffff
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	210f      	movs	r1, #15
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	1c02      	adds	r2, r0, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff ff5d 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	0002      	movs	r2, r0
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff ff33 	bl	80009d4 <__NVIC_EnableIRQ>
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff ffaf 	bl	8000ae4 <SysTick_Config>
 8000b86:	0003      	movs	r3, r0
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2221      	movs	r2, #33	; 0x21
 8000b9c:	5c9b      	ldrb	r3, [r3, r2]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d008      	beq.n	8000bb6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2220      	movs	r2, #32
 8000bae:	2100      	movs	r1, #0
 8000bb0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e020      	b.n	8000bf8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	210e      	movs	r1, #14
 8000bc2:	438a      	bics	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	438a      	bics	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bde:	2101      	movs	r1, #1
 8000be0:	4091      	lsls	r1, r2
 8000be2:	000a      	movs	r2, r1
 8000be4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2221      	movs	r2, #33	; 0x21
 8000bea:	2101      	movs	r1, #1
 8000bec:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2221      	movs	r2, #33	; 0x21
 8000c14:	5c9b      	ldrb	r3, [r3, r2]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d007      	beq.n	8000c2c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2204      	movs	r2, #4
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c22:	230f      	movs	r3, #15
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e028      	b.n	8000c7e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	210e      	movs	r1, #14
 8000c38:	438a      	bics	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2101      	movs	r1, #1
 8000c48:	438a      	bics	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c54:	2101      	movs	r1, #1
 8000c56:	4091      	lsls	r1, r2
 8000c58:	000a      	movs	r2, r1
 8000c5a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2221      	movs	r2, #33	; 0x21
 8000c60:	2101      	movs	r1, #1
 8000c62:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2220      	movs	r2, #32
 8000c68:	2100      	movs	r1, #0
 8000c6a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	4798      	blx	r3
    } 
  }
  return status;
 8000c7e:	230f      	movs	r3, #15
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	781b      	ldrb	r3, [r3, #0]
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b004      	add	sp, #16
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e155      	b.n	8000f48 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d100      	bne.n	8000cb4 <HAL_GPIO_Init+0x28>
 8000cb2:	e146      	b.n	8000f42 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d00b      	beq.n	8000cd4 <HAL_GPIO_Init+0x48>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d007      	beq.n	8000cd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc8:	2b11      	cmp	r3, #17
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b12      	cmp	r3, #18
 8000cd2:	d130      	bne.n	8000d36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	409a      	lsls	r2, r3
 8000ce2:	0013      	movs	r3, r2
 8000ce4:	43da      	mvns	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	2201      	movs	r2, #1
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0xea>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d123      	bne.n	8000dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	58d3      	ldr	r3, [r2, r3]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2207      	movs	r2, #7
 8000d88:	4013      	ands	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	43da      	mvns	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2107      	movs	r1, #7
 8000da2:	400b      	ands	r3, r1
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	6939      	ldr	r1, [r7, #16]
 8000dbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	401a      	ands	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	055b      	lsls	r3, r3, #21
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d100      	bne.n	8000e00 <HAL_GPIO_Init+0x174>
 8000dfe:	e0a0      	b.n	8000f42 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e00:	4b57      	ldr	r3, [pc, #348]	; (8000f60 <HAL_GPIO_Init+0x2d4>)
 8000e02:	699a      	ldr	r2, [r3, #24]
 8000e04:	4b56      	ldr	r3, [pc, #344]	; (8000f60 <HAL_GPIO_Init+0x2d4>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	619a      	str	r2, [r3, #24]
 8000e0c:	4b54      	ldr	r3, [pc, #336]	; (8000f60 <HAL_GPIO_Init+0x2d4>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	2201      	movs	r2, #1
 8000e12:	4013      	ands	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e18:	4a52      	ldr	r2, [pc, #328]	; (8000f64 <HAL_GPIO_Init+0x2d8>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	589b      	ldr	r3, [r3, r2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	2203      	movs	r2, #3
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	409a      	lsls	r2, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	43da      	mvns	r2, r3
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	2390      	movs	r3, #144	; 0x90
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a47      	ldr	r2, [pc, #284]	; (8000f68 <HAL_GPIO_Init+0x2dc>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x1ea>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a46      	ldr	r2, [pc, #280]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x1e6>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a45      	ldr	r2, [pc, #276]	; (8000f70 <HAL_GPIO_Init+0x2e4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x1e2>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a44      	ldr	r2, [pc, #272]	; (8000f74 <HAL_GPIO_Init+0x2e8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x1de>
 8000e66:	2304      	movs	r3, #4
 8000e68:	e008      	b.n	8000e7c <HAL_GPIO_Init+0x1f0>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x1f0>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e004      	b.n	8000e7c <HAL_GPIO_Init+0x1f0>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e002      	b.n	8000e7c <HAL_GPIO_Init+0x1f0>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x1f0>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	2103      	movs	r1, #3
 8000e80:	400a      	ands	r2, r1
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4093      	lsls	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e8c:	4935      	ldr	r1, [pc, #212]	; (8000f64 <HAL_GPIO_Init+0x2d8>)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	025b      	lsls	r3, r3, #9
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	029b      	lsls	r3, r3, #10
 8000edc:	4013      	ands	r3, r2
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	035b      	lsls	r3, r3, #13
 8000f06:	4013      	ands	r3, r2
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	039b      	lsls	r3, r3, #14
 8000f30:	4013      	ands	r3, r2
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	40da      	lsrs	r2, r3
 8000f50:	1e13      	subs	r3, r2, #0
 8000f52:	d000      	beq.n	8000f56 <HAL_GPIO_Init+0x2ca>
 8000f54:	e6a2      	b.n	8000c9c <HAL_GPIO_Init+0x10>
  } 
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b006      	add	sp, #24
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	48000800 	.word	0x48000800
 8000f70:	48000c00 	.word	0x48000c00
 8000f74:	48001000 	.word	0x48001000
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	0008      	movs	r0, r1
 8000f86:	0011      	movs	r1, r2
 8000f88:	1cbb      	adds	r3, r7, #2
 8000f8a:	1c02      	adds	r2, r0, #0
 8000f8c:	801a      	strh	r2, [r3, #0]
 8000f8e:	1c7b      	adds	r3, r7, #1
 8000f90:	1c0a      	adds	r2, r1, #0
 8000f92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f94:	1c7b      	adds	r3, r7, #1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f9c:	1cbb      	adds	r3, r7, #2
 8000f9e:	881a      	ldrh	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa4:	e003      	b.n	8000fae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fa6:	1cbb      	adds	r3, r7, #2
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	1dbb      	adds	r3, r7, #6
 8000fc2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	1dba      	adds	r2, r7, #6
 8000fca:	8812      	ldrh	r2, [r2, #0]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d008      	beq.n	8000fe2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000fd2:	1dba      	adds	r2, r7, #6
 8000fd4:	8812      	ldrh	r2, [r2, #0]
 8000fd6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fd8:	1dbb      	adds	r3, r7, #6
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff fa95 	bl	800050c <HAL_GPIO_EXTI_Callback>
  }
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	40010400 	.word	0x40010400

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f000 fb76 	bl	80016f0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2201      	movs	r2, #1
 800100a:	4013      	ands	r3, r2
 800100c:	d100      	bne.n	8001010 <HAL_RCC_OscConfig+0x20>
 800100e:	e08e      	b.n	800112e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001010:	4bc5      	ldr	r3, [pc, #788]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	220c      	movs	r2, #12
 8001016:	4013      	ands	r3, r2
 8001018:	2b04      	cmp	r3, #4
 800101a:	d00e      	beq.n	800103a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800101c:	4bc2      	ldr	r3, [pc, #776]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	220c      	movs	r2, #12
 8001022:	4013      	ands	r3, r2
 8001024:	2b08      	cmp	r3, #8
 8001026:	d117      	bne.n	8001058 <HAL_RCC_OscConfig+0x68>
 8001028:	4bbf      	ldr	r3, [pc, #764]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	23c0      	movs	r3, #192	; 0xc0
 800102e:	025b      	lsls	r3, r3, #9
 8001030:	401a      	ands	r2, r3
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	429a      	cmp	r2, r3
 8001038:	d10e      	bne.n	8001058 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103a:	4bbb      	ldr	r3, [pc, #748]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_RCC_OscConfig+0x58>
 8001046:	e071      	b.n	800112c <HAL_RCC_OscConfig+0x13c>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d000      	beq.n	8001052 <HAL_RCC_OscConfig+0x62>
 8001050:	e06c      	b.n	800112c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	f000 fb4c 	bl	80016f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d107      	bne.n	8001070 <HAL_RCC_OscConfig+0x80>
 8001060:	4bb1      	ldr	r3, [pc, #708]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4bb0      	ldr	r3, [pc, #704]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	0249      	lsls	r1, r1, #9
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e02f      	b.n	80010d0 <HAL_RCC_OscConfig+0xe0>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10c      	bne.n	8001092 <HAL_RCC_OscConfig+0xa2>
 8001078:	4bab      	ldr	r3, [pc, #684]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4baa      	ldr	r3, [pc, #680]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800107e:	49ab      	ldr	r1, [pc, #684]	; (800132c <HAL_RCC_OscConfig+0x33c>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	4ba8      	ldr	r3, [pc, #672]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4ba7      	ldr	r3, [pc, #668]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800108a:	49a9      	ldr	r1, [pc, #676]	; (8001330 <HAL_RCC_OscConfig+0x340>)
 800108c:	400a      	ands	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e01e      	b.n	80010d0 <HAL_RCC_OscConfig+0xe0>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b05      	cmp	r3, #5
 8001098:	d10e      	bne.n	80010b8 <HAL_RCC_OscConfig+0xc8>
 800109a:	4ba3      	ldr	r3, [pc, #652]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4ba2      	ldr	r3, [pc, #648]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	02c9      	lsls	r1, r1, #11
 80010a4:	430a      	orrs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	4b9f      	ldr	r3, [pc, #636]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b9e      	ldr	r3, [pc, #632]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	0249      	lsls	r1, r1, #9
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e00b      	b.n	80010d0 <HAL_RCC_OscConfig+0xe0>
 80010b8:	4b9b      	ldr	r3, [pc, #620]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b9a      	ldr	r3, [pc, #616]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80010be:	499b      	ldr	r1, [pc, #620]	; (800132c <HAL_RCC_OscConfig+0x33c>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4b98      	ldr	r3, [pc, #608]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b97      	ldr	r3, [pc, #604]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80010ca:	4999      	ldr	r1, [pc, #612]	; (8001330 <HAL_RCC_OscConfig+0x340>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d014      	beq.n	8001102 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fc50 	bl	800097c <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e2:	f7ff fc4b 	bl	800097c <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b64      	cmp	r3, #100	; 0x64
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e2fd      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f4:	4b8c      	ldr	r3, [pc, #560]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	029b      	lsls	r3, r3, #10
 80010fc:	4013      	ands	r3, r2
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0xf2>
 8001100:	e015      	b.n	800112e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fc3b 	bl	800097c <HAL_GetTick>
 8001106:	0003      	movs	r3, r0
 8001108:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fc36 	bl	800097c <HAL_GetTick>
 8001110:	0002      	movs	r2, r0
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	; 0x64
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e2e8      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	4b82      	ldr	r3, [pc, #520]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	029b      	lsls	r3, r3, #10
 8001126:	4013      	ands	r3, r2
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x11c>
 800112a:	e000      	b.n	800112e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2202      	movs	r2, #2
 8001134:	4013      	ands	r3, r2
 8001136:	d100      	bne.n	800113a <HAL_RCC_OscConfig+0x14a>
 8001138:	e06c      	b.n	8001214 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800113a:	4b7b      	ldr	r3, [pc, #492]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	220c      	movs	r2, #12
 8001140:	4013      	ands	r3, r2
 8001142:	d00e      	beq.n	8001162 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001144:	4b78      	ldr	r3, [pc, #480]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	220c      	movs	r2, #12
 800114a:	4013      	ands	r3, r2
 800114c:	2b08      	cmp	r3, #8
 800114e:	d11f      	bne.n	8001190 <HAL_RCC_OscConfig+0x1a0>
 8001150:	4b75      	ldr	r3, [pc, #468]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	23c0      	movs	r3, #192	; 0xc0
 8001156:	025b      	lsls	r3, r3, #9
 8001158:	401a      	ands	r2, r3
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	429a      	cmp	r2, r3
 8001160:	d116      	bne.n	8001190 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	4b71      	ldr	r3, [pc, #452]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d005      	beq.n	8001178 <HAL_RCC_OscConfig+0x188>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d001      	beq.n	8001178 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e2bb      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b6b      	ldr	r3, [pc, #428]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	22f8      	movs	r2, #248	; 0xf8
 800117e:	4393      	bics	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	00da      	lsls	r2, r3, #3
 8001188:	4b67      	ldr	r3, [pc, #412]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	e041      	b.n	8001214 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d024      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001198:	4b63      	ldr	r3, [pc, #396]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b62      	ldr	r3, [pc, #392]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800119e:	2101      	movs	r1, #1
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fbea 	bl	800097c <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fbe5 	bl	800097c <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e297      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	4b59      	ldr	r3, [pc, #356]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2202      	movs	r2, #2
 80011c6:	4013      	ands	r3, r2
 80011c8:	d0f1      	beq.n	80011ae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	4b57      	ldr	r3, [pc, #348]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22f8      	movs	r2, #248	; 0xf8
 80011d0:	4393      	bics	r3, r2
 80011d2:	0019      	movs	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	00da      	lsls	r2, r3, #3
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e018      	b.n	8001214 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e2:	4b51      	ldr	r3, [pc, #324]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b50      	ldr	r3, [pc, #320]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	438a      	bics	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fbc5 	bl	800097c <HAL_GetTick>
 80011f2:	0003      	movs	r3, r0
 80011f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fbc0 	bl	800097c <HAL_GetTick>
 80011fc:	0002      	movs	r2, r0
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e272      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b47      	ldr	r3, [pc, #284]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2202      	movs	r2, #2
 8001210:	4013      	ands	r3, r2
 8001212:	d1f1      	bne.n	80011f8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2208      	movs	r2, #8
 800121a:	4013      	ands	r3, r2
 800121c:	d036      	beq.n	800128c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d019      	beq.n	800125a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001226:	4b40      	ldr	r3, [pc, #256]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800122a:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff fba3 	bl	800097c <HAL_GetTick>
 8001236:	0003      	movs	r3, r0
 8001238:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff fb9e 	bl	800097c <HAL_GetTick>
 8001240:	0002      	movs	r2, r0
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e250      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	2202      	movs	r2, #2
 8001254:	4013      	ands	r3, r2
 8001256:	d0f1      	beq.n	800123c <HAL_RCC_OscConfig+0x24c>
 8001258:	e018      	b.n	800128c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125a:	4b33      	ldr	r3, [pc, #204]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800125c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800125e:	4b32      	ldr	r3, [pc, #200]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001260:	2101      	movs	r1, #1
 8001262:	438a      	bics	r2, r1
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001266:	f7ff fb89 	bl	800097c <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fb84 	bl	800097c <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e236      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	2202      	movs	r2, #2
 8001288:	4013      	ands	r3, r2
 800128a:	d1f1      	bne.n	8001270 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2204      	movs	r2, #4
 8001292:	4013      	ands	r3, r2
 8001294:	d100      	bne.n	8001298 <HAL_RCC_OscConfig+0x2a8>
 8001296:	e0b5      	b.n	8001404 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001298:	231f      	movs	r3, #31
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	055b      	lsls	r3, r3, #21
 80012a8:	4013      	ands	r3, r2
 80012aa:	d111      	bne.n	80012d0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80012ae:	69da      	ldr	r2, [r3, #28]
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	0549      	lsls	r1, r1, #21
 80012b6:	430a      	orrs	r2, r1
 80012b8:	61da      	str	r2, [r3, #28]
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 80012bc:	69da      	ldr	r2, [r3, #28]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	055b      	lsls	r3, r3, #21
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012c8:	231f      	movs	r3, #31
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_RCC_OscConfig+0x344>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4013      	ands	r3, r2
 80012da:	d11a      	bne.n	8001312 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_RCC_OscConfig+0x344>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_RCC_OscConfig+0x344>)
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	0049      	lsls	r1, r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb47 	bl	800097c <HAL_GetTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f4:	f7ff fb42 	bl	800097c <HAL_GetTick>
 80012f8:	0002      	movs	r2, r0
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1f4      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_RCC_OscConfig+0x344>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4013      	ands	r3, r2
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d10e      	bne.n	8001338 <HAL_RCC_OscConfig+0x348>
 800131a:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	4b02      	ldr	r3, [pc, #8]	; (8001328 <HAL_RCC_OscConfig+0x338>)
 8001320:	2101      	movs	r1, #1
 8001322:	430a      	orrs	r2, r1
 8001324:	621a      	str	r2, [r3, #32]
 8001326:	e035      	b.n	8001394 <HAL_RCC_OscConfig+0x3a4>
 8001328:	40021000 	.word	0x40021000
 800132c:	fffeffff 	.word	0xfffeffff
 8001330:	fffbffff 	.word	0xfffbffff
 8001334:	40007000 	.word	0x40007000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10c      	bne.n	800135a <HAL_RCC_OscConfig+0x36a>
 8001340:	4bca      	ldr	r3, [pc, #808]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001342:	6a1a      	ldr	r2, [r3, #32]
 8001344:	4bc9      	ldr	r3, [pc, #804]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001346:	2101      	movs	r1, #1
 8001348:	438a      	bics	r2, r1
 800134a:	621a      	str	r2, [r3, #32]
 800134c:	4bc7      	ldr	r3, [pc, #796]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800134e:	6a1a      	ldr	r2, [r3, #32]
 8001350:	4bc6      	ldr	r3, [pc, #792]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001352:	2104      	movs	r1, #4
 8001354:	438a      	bics	r2, r1
 8001356:	621a      	str	r2, [r3, #32]
 8001358:	e01c      	b.n	8001394 <HAL_RCC_OscConfig+0x3a4>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x38c>
 8001362:	4bc2      	ldr	r3, [pc, #776]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	4bc1      	ldr	r3, [pc, #772]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001368:	2104      	movs	r1, #4
 800136a:	430a      	orrs	r2, r1
 800136c:	621a      	str	r2, [r3, #32]
 800136e:	4bbf      	ldr	r3, [pc, #764]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001370:	6a1a      	ldr	r2, [r3, #32]
 8001372:	4bbe      	ldr	r3, [pc, #760]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001374:	2101      	movs	r1, #1
 8001376:	430a      	orrs	r2, r1
 8001378:	621a      	str	r2, [r3, #32]
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0x3a4>
 800137c:	4bbb      	ldr	r3, [pc, #748]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800137e:	6a1a      	ldr	r2, [r3, #32]
 8001380:	4bba      	ldr	r3, [pc, #744]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001382:	2101      	movs	r1, #1
 8001384:	438a      	bics	r2, r1
 8001386:	621a      	str	r2, [r3, #32]
 8001388:	4bb8      	ldr	r3, [pc, #736]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	4bb7      	ldr	r3, [pc, #732]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800138e:	2104      	movs	r1, #4
 8001390:	438a      	bics	r2, r1
 8001392:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d014      	beq.n	80013c6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff faee 	bl	800097c <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	e009      	b.n	80013ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f7ff fae9 	bl	800097c <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	4aaf      	ldr	r2, [pc, #700]	; (8001670 <HAL_RCC_OscConfig+0x680>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e19a      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ba:	4bac      	ldr	r3, [pc, #688]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x3b6>
 80013c4:	e013      	b.n	80013ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fad9 	bl	800097c <HAL_GetTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ce:	e009      	b.n	80013e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fad4 	bl	800097c <HAL_GetTick>
 80013d4:	0002      	movs	r2, r0
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	4aa5      	ldr	r2, [pc, #660]	; (8001670 <HAL_RCC_OscConfig+0x680>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e185      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e4:	4ba1      	ldr	r3, [pc, #644]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	2202      	movs	r2, #2
 80013ea:	4013      	ands	r3, r2
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013ee:	231f      	movs	r3, #31
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f8:	4b9c      	ldr	r3, [pc, #624]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80013fa:	69da      	ldr	r2, [r3, #28]
 80013fc:	4b9b      	ldr	r3, [pc, #620]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80013fe:	499d      	ldr	r1, [pc, #628]	; (8001674 <HAL_RCC_OscConfig+0x684>)
 8001400:	400a      	ands	r2, r1
 8001402:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2210      	movs	r2, #16
 800140a:	4013      	ands	r3, r2
 800140c:	d063      	beq.n	80014d6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d12a      	bne.n	800146c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001416:	4b95      	ldr	r3, [pc, #596]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800141a:	4b94      	ldr	r3, [pc, #592]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800141c:	2104      	movs	r1, #4
 800141e:	430a      	orrs	r2, r1
 8001420:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001422:	4b92      	ldr	r3, [pc, #584]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001426:	4b91      	ldr	r3, [pc, #580]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001428:	2101      	movs	r1, #1
 800142a:	430a      	orrs	r2, r1
 800142c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff faa5 	bl	800097c <HAL_GetTick>
 8001432:	0003      	movs	r3, r0
 8001434:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001438:	f7ff faa0 	bl	800097c <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e152      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800144c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d0f1      	beq.n	8001438 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001454:	4b85      	ldr	r3, [pc, #532]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	22f8      	movs	r2, #248	; 0xf8
 800145a:	4393      	bics	r3, r2
 800145c:	0019      	movs	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	00da      	lsls	r2, r3, #3
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001466:	430a      	orrs	r2, r1
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
 800146a:	e034      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	3305      	adds	r3, #5
 8001472:	d111      	bne.n	8001498 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001474:	4b7d      	ldr	r3, [pc, #500]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001478:	4b7c      	ldr	r3, [pc, #496]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800147a:	2104      	movs	r1, #4
 800147c:	438a      	bics	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001480:	4b7a      	ldr	r3, [pc, #488]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001484:	22f8      	movs	r2, #248	; 0xf8
 8001486:	4393      	bics	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	00da      	lsls	r2, r3, #3
 8001490:	4b76      	ldr	r3, [pc, #472]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001492:	430a      	orrs	r2, r1
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
 8001496:	e01e      	b.n	80014d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001498:	4b74      	ldr	r3, [pc, #464]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800149a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149c:	4b73      	ldr	r3, [pc, #460]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800149e:	2104      	movs	r1, #4
 80014a0:	430a      	orrs	r2, r1
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014a4:	4b71      	ldr	r3, [pc, #452]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80014a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a8:	4b70      	ldr	r3, [pc, #448]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	438a      	bics	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff fa64 	bl	800097c <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014ba:	f7ff fa5f 	bl	800097c <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e111      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014cc:	4b67      	ldr	r3, [pc, #412]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80014ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d0:	2202      	movs	r2, #2
 80014d2:	4013      	ands	r3, r2
 80014d4:	d1f1      	bne.n	80014ba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2220      	movs	r2, #32
 80014dc:	4013      	ands	r3, r2
 80014de:	d05c      	beq.n	800159a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014e0:	4b62      	ldr	r3, [pc, #392]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	220c      	movs	r2, #12
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	d00e      	beq.n	800150a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014ec:	4b5f      	ldr	r3, [pc, #380]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	220c      	movs	r2, #12
 80014f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d114      	bne.n	8001522 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014f8:	4b5c      	ldr	r3, [pc, #368]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	23c0      	movs	r3, #192	; 0xc0
 80014fe:	025b      	lsls	r3, r3, #9
 8001500:	401a      	ands	r2, r3
 8001502:	23c0      	movs	r3, #192	; 0xc0
 8001504:	025b      	lsls	r3, r3, #9
 8001506:	429a      	cmp	r2, r3
 8001508:	d10b      	bne.n	8001522 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800150a:	4b58      	ldr	r3, [pc, #352]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800150c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	4013      	ands	r3, r2
 8001514:	d040      	beq.n	8001598 <HAL_RCC_OscConfig+0x5a8>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d03c      	beq.n	8001598 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e0e6      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d01b      	beq.n	8001562 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800152a:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800152c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	0249      	lsls	r1, r1, #9
 8001534:	430a      	orrs	r2, r1
 8001536:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fa20 	bl	800097c <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001542:	f7ff fa1b 	bl	800097c <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0cd      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001554:	4b45      	ldr	r3, [pc, #276]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	4013      	ands	r3, r2
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x552>
 8001560:	e01b      	b.n	800159a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001568:	4943      	ldr	r1, [pc, #268]	; (8001678 <HAL_RCC_OscConfig+0x688>)
 800156a:	400a      	ands	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fa05 	bl	800097c <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001578:	f7ff fa00 	bl	800097c <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0b2      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800158c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	025b      	lsls	r3, r3, #9
 8001592:	4013      	ands	r3, r2
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x588>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001598:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d100      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5b4>
 80015a2:	e0a4      	b.n	80016ee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	220c      	movs	r2, #12
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d100      	bne.n	80015b2 <HAL_RCC_OscConfig+0x5c2>
 80015b0:	e078      	b.n	80016a4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d14c      	bne.n	8001654 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80015c0:	492e      	ldr	r1, [pc, #184]	; (800167c <HAL_RCC_OscConfig+0x68c>)
 80015c2:	400a      	ands	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff f9d9 	bl	800097c <HAL_GetTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff f9d4 	bl	800097c <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e086      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	049b      	lsls	r3, r3, #18
 80015ea:	4013      	ands	r3, r2
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	220f      	movs	r2, #15
 80015f4:	4393      	bics	r3, r2
 80015f6:	0019      	movs	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_RCC_OscConfig+0x690>)
 8001608:	4013      	ands	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	431a      	orrs	r2, r3
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001618:	430a      	orrs	r2, r1
 800161a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	0449      	lsls	r1, r1, #17
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff f9a7 	bl	800097c <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff f9a2 	bl	800097c <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e054      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	049b      	lsls	r3, r3, #18
 800164e:	4013      	ands	r3, r2
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x644>
 8001652:	e04c      	b.n	80016ee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <HAL_RCC_OscConfig+0x67c>)
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <HAL_RCC_OscConfig+0x68c>)
 800165c:	400a      	ands	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff f98c 	bl	800097c <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x6a6>
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40021000 	.word	0x40021000
 8001670:	00001388 	.word	0x00001388
 8001674:	efffffff 	.word	0xefffffff
 8001678:	fffeffff 	.word	0xfffeffff
 800167c:	feffffff 	.word	0xfeffffff
 8001680:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff f97a 	bl	800097c <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e02c      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_RCC_OscConfig+0x708>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	049b      	lsls	r3, r3, #18
 800169e:	4013      	ands	r3, r2
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x694>
 80016a2:	e024      	b.n	80016ee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e01f      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_RCC_OscConfig+0x708>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_RCC_OscConfig+0x708>)
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	025b      	lsls	r3, r3, #9
 80016c2:	401a      	ands	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d10e      	bne.n	80016ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	220f      	movs	r2, #15
 80016d0:	401a      	ands	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	23f0      	movs	r3, #240	; 0xf0
 80016de:	039b      	lsls	r3, r3, #14
 80016e0:	401a      	ands	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b008      	add	sp, #32
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000

080016fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0bf      	b.n	8001890 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <HAL_RCC_ClockConfig+0x19c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	4013      	ands	r3, r2
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d911      	bls.n	8001742 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <HAL_RCC_ClockConfig+0x19c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	4393      	bics	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <HAL_RCC_ClockConfig+0x19c>)
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001730:	4b59      	ldr	r3, [pc, #356]	; (8001898 <HAL_RCC_ClockConfig+0x19c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2201      	movs	r2, #1
 8001736:	4013      	ands	r3, r2
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d001      	beq.n	8001742 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0a6      	b.n	8001890 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	d015      	beq.n	8001778 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2204      	movs	r2, #4
 8001752:	4013      	ands	r3, r2
 8001754:	d006      	beq.n	8001764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001756:	4b51      	ldr	r3, [pc, #324]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 800175c:	21e0      	movs	r1, #224	; 0xe0
 800175e:	00c9      	lsls	r1, r1, #3
 8001760:	430a      	orrs	r2, r1
 8001762:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001764:	4b4d      	ldr	r3, [pc, #308]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	22f0      	movs	r2, #240	; 0xf0
 800176a:	4393      	bics	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	d04c      	beq.n	800181c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b44      	ldr	r3, [pc, #272]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	029b      	lsls	r3, r3, #10
 8001792:	4013      	ands	r3, r2
 8001794:	d120      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07a      	b.n	8001890 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	049b      	lsls	r3, r3, #18
 80017aa:	4013      	ands	r3, r2
 80017ac:	d114      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e06e      	b.n	8001890 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 80017bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4013      	ands	r3, r2
 80017c4:	d108      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e062      	b.n	8001890 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2202      	movs	r2, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e05b      	b.n	8001890 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2203      	movs	r2, #3
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ec:	f7ff f8c6 	bl	800097c <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f4:	e009      	b.n	800180a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f6:	f7ff f8c1 	bl	800097c <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_RCC_ClockConfig+0x1a4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e042      	b.n	8001890 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	220c      	movs	r2, #12
 8001810:	401a      	ands	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	429a      	cmp	r2, r3
 800181a:	d1ec      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_ClockConfig+0x19c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2201      	movs	r2, #1
 8001822:	4013      	ands	r3, r2
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d211      	bcs.n	800184e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_RCC_ClockConfig+0x19c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2201      	movs	r2, #1
 8001830:	4393      	bics	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_RCC_ClockConfig+0x19c>)
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_RCC_ClockConfig+0x19c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e020      	b.n	8001890 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2204      	movs	r2, #4
 8001854:	4013      	ands	r3, r2
 8001856:	d009      	beq.n	800186c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_RCC_ClockConfig+0x1a8>)
 800185e:	4013      	ands	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800186c:	f000 f820 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 8001870:	0001      	movs	r1, r0
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_RCC_ClockConfig+0x1a0>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	220f      	movs	r2, #15
 800187a:	4013      	ands	r3, r2
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_RCC_ClockConfig+0x1ac>)
 800187e:	5cd3      	ldrb	r3, [r2, r3]
 8001880:	000a      	movs	r2, r1
 8001882:	40da      	lsrs	r2, r3
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1b0>)
 8001886:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff f831 	bl	80008f0 <HAL_InitTick>
  
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b004      	add	sp, #16
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40022000 	.word	0x40022000
 800189c:	40021000 	.word	0x40021000
 80018a0:	00001388 	.word	0x00001388
 80018a4:	fffff8ff 	.word	0xfffff8ff
 80018a8:	080036a0 	.word	0x080036a0
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b08f      	sub	sp, #60	; 0x3c
 80018b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018b6:	2314      	movs	r3, #20
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	4a37      	ldr	r2, [pc, #220]	; (8001998 <HAL_RCC_GetSysClockFreq+0xe8>)
 80018bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018be:	c313      	stmia	r3!, {r0, r1, r4}
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4a35      	ldr	r2, [pc, #212]	; (800199c <HAL_RCC_GetSysClockFreq+0xec>)
 80018c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018ca:	c313      	stmia	r3!, {r0, r1, r4}
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	220c      	movs	r2, #12
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d006      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x52>
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d043      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0xd0>
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d144      	bne.n	8001986 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001900:	e044      	b.n	800198c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	0c9b      	lsrs	r3, r3, #18
 8001906:	220f      	movs	r2, #15
 8001908:	4013      	ands	r3, r2
 800190a:	2214      	movs	r2, #20
 800190c:	18ba      	adds	r2, r7, r2
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	220f      	movs	r2, #15
 8001918:	4013      	ands	r3, r2
 800191a:	1d3a      	adds	r2, r7, #4
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001922:	23c0      	movs	r3, #192	; 0xc0
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	401a      	ands	r2, r3
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	429a      	cmp	r2, r3
 800192e:	d109      	bne.n	8001944 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001932:	481c      	ldr	r0, [pc, #112]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001934:	f7fe fbe8 	bl	8000108 <__udivsi3>
 8001938:	0003      	movs	r3, r0
 800193a:	001a      	movs	r2, r3
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	4353      	muls	r3, r2
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
 8001942:	e01a      	b.n	800197a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001946:	23c0      	movs	r3, #192	; 0xc0
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	401a      	ands	r2, r3
 800194c:	23c0      	movs	r3, #192	; 0xc0
 800194e:	025b      	lsls	r3, r3, #9
 8001950:	429a      	cmp	r2, r3
 8001952:	d109      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001956:	4814      	ldr	r0, [pc, #80]	; (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001958:	f7fe fbd6 	bl	8000108 <__udivsi3>
 800195c:	0003      	movs	r3, r0
 800195e:	001a      	movs	r2, r3
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	4353      	muls	r3, r2
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
 8001966:	e008      	b.n	800197a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196a:	480e      	ldr	r0, [pc, #56]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800196c:	f7fe fbcc 	bl	8000108 <__udivsi3>
 8001970:	0003      	movs	r3, r0
 8001972:	001a      	movs	r2, r3
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	4353      	muls	r3, r2
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800197e:	e005      	b.n	800198c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001984:	e002      	b.n	800198c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800198a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b00f      	add	sp, #60	; 0x3c
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	08003680 	.word	0x08003680
 800199c:	08003690 	.word	0x08003690
 80019a0:	40021000 	.word	0x40021000
 80019a4:	007a1200 	.word	0x007a1200
 80019a8:	02dc6c00 	.word	0x02dc6c00

080019ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <HAL_RCC_GetHCLKFreq+0x10>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019c4:	f7ff fff2 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019c8:	0001      	movs	r1, r0
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	2207      	movs	r2, #7
 80019d2:	4013      	ands	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	40d9      	lsrs	r1, r3
 80019da:	000b      	movs	r3, r1
}    
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000
 80019e8:	080036b0 	.word	0x080036b0

080019ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	4013      	ands	r3, r2
 8001a06:	d100      	bne.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a08:	e08f      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2317      	movs	r3, #23
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	055b      	lsls	r3, r3, #21
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d111      	bne.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b6c      	ldr	r3, [pc, #432]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0549      	lsls	r1, r1, #21
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	61da      	str	r2, [r3, #28]
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	055b      	lsls	r3, r3, #21
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3a:	2317      	movs	r3, #23
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d11a      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4e:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0049      	lsls	r1, r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5c:	f7fe ff8e 	bl	800097c <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	e008      	b.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7fe ff89 	bl	800097c <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b64      	cmp	r3, #100	; 0x64
 8001a72:	d901      	bls.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0a6      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a84:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a86:	6a1a      	ldr	r2, [r3, #32]
 8001a88:	23c0      	movs	r3, #192	; 0xc0
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d034      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	23c0      	movs	r3, #192	; 0xc0
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d02c      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ab0:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ab2:	6a1a      	ldr	r2, [r3, #32]
 8001ab4:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0249      	lsls	r1, r1, #9
 8001aba:	430a      	orrs	r2, r1
 8001abc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ac4:	4945      	ldr	r1, [pc, #276]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7fe ff50 	bl	800097c <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e009      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7fe ff4b 	bl	800097c <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e067      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	2202      	movs	r2, #2
 8001afc:	4013      	ands	r3, r2
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b00:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b14:	2317      	movs	r3, #23
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b24:	492f      	ldr	r1, [pc, #188]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	d009      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b34:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	2203      	movs	r2, #3
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d009      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d009      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	2210      	movs	r2, #16
 8001b76:	4393      	bics	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	029b      	lsls	r3, r3, #10
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d009      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	4393      	bics	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4013      	ands	r3, r2
 8001bae:	d009      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	2240      	movs	r2, #64	; 0x40
 8001bb6:	4393      	bics	r3, r2
 8001bb8:	0019      	movs	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b006      	add	sp, #24
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	fffffcff 	.word	0xfffffcff
 8001bdc:	fffeffff 	.word	0xfffeffff
 8001be0:	00001388 	.word	0x00001388
 8001be4:	efffffff 	.word	0xefffffff
 8001be8:	fffcffff 	.word	0xfffcffff

08001bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e044      	b.n	8001c88 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2274      	movs	r2, #116	; 0x74
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7fe fd0b 	bl	800062c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2224      	movs	r2, #36	; 0x24
 8001c1a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2101      	movs	r1, #1
 8001c28:	438a      	bics	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 fb4e 	bl	80022d0 <UART_SetConfig>
 8001c34:	0003      	movs	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e024      	b.n	8001c88 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 fcc5 	bl	80025d8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	490d      	ldr	r1, [pc, #52]	; (8001c90 <HAL_UART_Init+0xa4>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	212a      	movs	r1, #42	; 0x2a
 8001c6a:	438a      	bics	r2, r1
 8001c6c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f000 fd5d 	bl	8002740 <UART_CheckIdleState>
 8001c86:	0003      	movs	r3, r0
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	ffffb7ff 	.word	0xffffb7ff

08001c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	1dbb      	adds	r3, r7, #6
 8001ca2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d000      	beq.n	8001cae <HAL_UART_Transmit+0x1a>
 8001cac:	e096      	b.n	8001ddc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_UART_Transmit+0x28>
 8001cb4:	1dbb      	adds	r3, r7, #6
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e08e      	b.n	8001dde <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	015b      	lsls	r3, r3, #5
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d109      	bne.n	8001ce0 <HAL_UART_Transmit+0x4c>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e07e      	b.n	8001dde <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2274      	movs	r2, #116	; 0x74
 8001ce4:	5c9b      	ldrb	r3, [r3, r2]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_UART_Transmit+0x5a>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e077      	b.n	8001dde <HAL_UART_Transmit+0x14a>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2274      	movs	r2, #116	; 0x74
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2221      	movs	r2, #33	; 0x21
 8001d02:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d04:	f7fe fe3a 	bl	800097c <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1dba      	adds	r2, r7, #6
 8001d10:	2150      	movs	r1, #80	; 0x50
 8001d12:	8812      	ldrh	r2, [r2, #0]
 8001d14:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1dba      	adds	r2, r7, #6
 8001d1a:	2152      	movs	r1, #82	; 0x52
 8001d1c:	8812      	ldrh	r2, [r2, #0]
 8001d1e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	015b      	lsls	r3, r3, #5
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d108      	bne.n	8001d3e <HAL_UART_Transmit+0xaa>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d104      	bne.n	8001d3e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	e003      	b.n	8001d46 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2274      	movs	r2, #116	; 0x74
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001d4e:	e02d      	b.n	8001dac <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	0013      	movs	r3, r2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	f000 fd39 	bl	80027d4 <UART_WaitOnFlagUntilTimeout>
 8001d62:	1e03      	subs	r3, r0, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e039      	b.n	8001dde <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10b      	bne.n	8001d88 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	881a      	ldrh	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	05d2      	lsls	r2, r2, #23
 8001d7a:	0dd2      	lsrs	r2, r2, #23
 8001d7c:	b292      	uxth	r2, r2
 8001d7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	3302      	adds	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	e008      	b.n	8001d9a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b292      	uxth	r2, r2
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	3301      	adds	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2252      	movs	r2, #82	; 0x52
 8001d9e:	5a9b      	ldrh	r3, [r3, r2]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b299      	uxth	r1, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2252      	movs	r2, #82	; 0x52
 8001daa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2252      	movs	r2, #82	; 0x52
 8001db0:	5a9b      	ldrh	r3, [r3, r2]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1cb      	bne.n	8001d50 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2140      	movs	r1, #64	; 0x40
 8001dc6:	f000 fd05 	bl	80027d4 <UART_WaitOnFlagUntilTimeout>
 8001dca:	1e03      	subs	r3, r0, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e005      	b.n	8001dde <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
  }
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b008      	add	sp, #32
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	1dbb      	adds	r3, r7, #6
 8001df2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d13f      	bne.n	8001e7c <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_UART_Receive_IT+0x24>
 8001e02:	1dbb      	adds	r3, r7, #6
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e037      	b.n	8001e7e <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	015b      	lsls	r3, r3, #5
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d109      	bne.n	8001e2e <HAL_UART_Receive_IT+0x48>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2201      	movs	r2, #1
 8001e26:	4013      	ands	r3, r2
 8001e28:	d001      	beq.n	8001e2e <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e027      	b.n	8001e7e <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2274      	movs	r2, #116	; 0x74
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_UART_Receive_IT+0x56>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e020      	b.n	8001e7e <HAL_UART_Receive_IT+0x98>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2274      	movs	r2, #116	; 0x74
 8001e40:	2101      	movs	r1, #1
 8001e42:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	041b      	lsls	r3, r3, #16
 8001e54:	4013      	ands	r3, r2
 8001e56:	d008      	beq.n	8001e6a <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	04c9      	lsls	r1, r1, #19
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001e6a:	1dbb      	adds	r3, r7, #6
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 fd2c 	bl	80028d0 <UART_Start_Receive_IT>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	e000      	b.n	8001e7e <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	0018      	movs	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b004      	add	sp, #16
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	4ab5      	ldr	r2, [pc, #724]	; (8002180 <HAL_UART_IRQHandler+0x2f8>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d112      	bne.n	8001edc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d00e      	beq.n	8001edc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d00a      	beq.n	8001edc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d100      	bne.n	8001ed0 <HAL_UART_IRQHandler+0x48>
 8001ece:	e1d4      	b.n	800227a <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	0010      	movs	r0, r2
 8001ed8:	4798      	blx	r3
      }
      return;
 8001eda:	e1ce      	b.n	800227a <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d100      	bne.n	8001ee4 <HAL_UART_IRQHandler+0x5c>
 8001ee2:	e0d9      	b.n	8002098 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d104      	bne.n	8001ef6 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	4aa5      	ldr	r2, [pc, #660]	; (8002184 <HAL_UART_IRQHandler+0x2fc>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d100      	bne.n	8001ef6 <HAL_UART_IRQHandler+0x6e>
 8001ef4:	e0d0      	b.n	8002098 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4013      	ands	r3, r2
 8001efc:	d010      	beq.n	8001f20 <HAL_UART_IRQHandler+0x98>
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4013      	ands	r3, r2
 8001f06:	d00b      	beq.n	8001f20 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	589b      	ldr	r3, [r3, r2]
 8001f16:	2201      	movs	r2, #1
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	d00f      	beq.n	8001f48 <HAL_UART_IRQHandler+0xc0>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d00b      	beq.n	8001f48 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2202      	movs	r2, #2
 8001f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	589b      	ldr	r3, [r3, r2]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d00f      	beq.n	8001f70 <HAL_UART_IRQHandler+0xe8>
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2201      	movs	r2, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	d00b      	beq.n	8001f70 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	589b      	ldr	r3, [r3, r2]
 8001f66:	2202      	movs	r2, #2
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2208      	movs	r2, #8
 8001f74:	4013      	ands	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d103      	bne.n	8001f88 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f86:	d00b      	beq.n	8001fa0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	589b      	ldr	r3, [r3, r2]
 8001f96:	2208      	movs	r2, #8
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d011      	beq.n	8001fce <HAL_UART_IRQHandler+0x146>
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	04db      	lsls	r3, r3, #19
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d00c      	beq.n	8001fce <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	589b      	ldr	r3, [r3, r2]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	589b      	ldr	r3, [r3, r2]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d100      	bne.n	8001fda <HAL_UART_IRQHandler+0x152>
 8001fd8:	e151      	b.n	800227e <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d00c      	beq.n	8001ffc <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d008      	beq.n	8001ffc <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	0010      	movs	r0, r2
 8001ffa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	589b      	ldr	r3, [r3, r2]
 8002002:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2240      	movs	r2, #64	; 0x40
 800200c:	4013      	ands	r3, r2
 800200e:	2b40      	cmp	r3, #64	; 0x40
 8002010:	d003      	beq.n	800201a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2228      	movs	r2, #40	; 0x28
 8002016:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002018:	d033      	beq.n	8002082 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 fce5 	bl	80029ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	4013      	ands	r3, r2
 800202c:	2b40      	cmp	r3, #64	; 0x40
 800202e:	d123      	bne.n	8002078 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	438a      	bics	r2, r1
 800203e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204c:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <HAL_UART_IRQHandler+0x300>)
 800204e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	0018      	movs	r0, r3
 8002056:	f7fe fdd3 	bl	8000c00 <HAL_DMA_Abort_IT>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d01a      	beq.n	8002094 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	0018      	movs	r0, r3
 800206a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800206c:	e012      	b.n	8002094 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f919 	bl	80022a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002076:	e00d      	b.n	8002094 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	0018      	movs	r0, r3
 800207c:	f000 f914 	bl	80022a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002080:	e008      	b.n	8002094 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	0018      	movs	r0, r3
 8002086:	f000 f90f 	bl	80022a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	2100      	movs	r1, #0
 8002090:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002092:	e0f4      	b.n	800227e <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002094:	46c0      	nop			; (mov r8, r8)
    return;
 8002096:	e0f2      	b.n	800227e <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209c:	2b01      	cmp	r3, #1
 800209e:	d000      	beq.n	80020a2 <HAL_UART_IRQHandler+0x21a>
 80020a0:	e0b7      	b.n	8002212 <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	2210      	movs	r2, #16
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_UART_IRQHandler+0x224>
 80020aa:	e0b2      	b.n	8002212 <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2210      	movs	r2, #16
 80020b0:	4013      	ands	r3, r2
 80020b2:	d100      	bne.n	80020b6 <HAL_UART_IRQHandler+0x22e>
 80020b4:	e0ad      	b.n	8002212 <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2210      	movs	r2, #16
 80020bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2240      	movs	r2, #64	; 0x40
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b40      	cmp	r3, #64	; 0x40
 80020ca:	d161      	bne.n	8002190 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	2108      	movs	r1, #8
 80020d6:	187b      	adds	r3, r7, r1
 80020d8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80020da:	187b      	adds	r3, r7, r1
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d100      	bne.n	80020e4 <HAL_UART_IRQHandler+0x25c>
 80020e2:	e0ce      	b.n	8002282 <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2258      	movs	r2, #88	; 0x58
 80020e8:	5a9b      	ldrh	r3, [r3, r2]
 80020ea:	2208      	movs	r2, #8
 80020ec:	18ba      	adds	r2, r7, r2
 80020ee:	8812      	ldrh	r2, [r2, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d300      	bcc.n	80020f6 <HAL_UART_IRQHandler+0x26e>
 80020f4:	e0c5      	b.n	8002282 <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2208      	movs	r2, #8
 80020fa:	18ba      	adds	r2, r7, r2
 80020fc:	215a      	movs	r1, #90	; 0x5a
 80020fe:	8812      	ldrh	r2, [r2, #0]
 8002100:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b20      	cmp	r3, #32
 800210a:	d02a      	beq.n	8002162 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	491d      	ldr	r1, [pc, #116]	; (800218c <HAL_UART_IRQHandler+0x304>)
 8002118:	400a      	ands	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2101      	movs	r1, #1
 8002128:	438a      	bics	r2, r1
 800212a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	438a      	bics	r2, r1
 800213a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2110      	movs	r1, #16
 8002154:	438a      	bics	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	0018      	movs	r0, r3
 800215e:	f7fe fd17 	bl	8000b90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2258      	movs	r2, #88	; 0x58
 8002166:	5a9a      	ldrh	r2, [r3, r2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	215a      	movs	r1, #90	; 0x5a
 800216c:	5a5b      	ldrh	r3, [r3, r1]
 800216e:	b29b      	uxth	r3, r3
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0011      	movs	r1, r2
 8002178:	0018      	movs	r0, r3
 800217a:	f000 f89d 	bl	80022b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800217e:	e080      	b.n	8002282 <HAL_UART_IRQHandler+0x3fa>
 8002180:	0000080f 	.word	0x0000080f
 8002184:	04000120 	.word	0x04000120
 8002188:	08002a4d 	.word	0x08002a4d
 800218c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2258      	movs	r2, #88	; 0x58
 8002194:	5a99      	ldrh	r1, [r3, r2]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	225a      	movs	r2, #90	; 0x5a
 800219a:	5a9b      	ldrh	r3, [r3, r2]
 800219c:	b29a      	uxth	r2, r3
 800219e:	230a      	movs	r3, #10
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	1a8a      	subs	r2, r1, r2
 80021a4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	225a      	movs	r2, #90	; 0x5a
 80021aa:	5a9b      	ldrh	r3, [r3, r2]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d100      	bne.n	80021b4 <HAL_UART_IRQHandler+0x32c>
 80021b2:	e068      	b.n	8002286 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 80021b4:	230a      	movs	r3, #10
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d063      	beq.n	8002286 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4932      	ldr	r1, [pc, #200]	; (8002294 <HAL_UART_IRQHandler+0x40c>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	438a      	bics	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2110      	movs	r1, #16
 80021fc:	438a      	bics	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002200:	230a      	movs	r3, #10
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0011      	movs	r1, r2
 800220a:	0018      	movs	r0, r3
 800220c:	f000 f854 	bl	80022b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002210:	e039      	b.n	8002286 <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	035b      	lsls	r3, r3, #13
 8002218:	4013      	ands	r3, r2
 800221a:	d00e      	beq.n	800223a <HAL_UART_IRQHandler+0x3b2>
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	03db      	lsls	r3, r3, #15
 8002222:	4013      	ands	r3, r2
 8002224:	d009      	beq.n	800223a <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	0352      	lsls	r2, r2, #13
 800222e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	0018      	movs	r0, r3
 8002234:	f000 fd28 	bl	8002c88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002238:	e028      	b.n	800228c <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	4013      	ands	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	4013      	ands	r3, r2
 8002248:	d009      	beq.n	800225e <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800224e:	2b00      	cmp	r3, #0
 8002250:	d01b      	beq.n	800228a <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	0010      	movs	r0, r2
 800225a:	4798      	blx	r3
    }
    return;
 800225c:	e015      	b.n	800228a <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	4013      	ands	r3, r2
 8002264:	d012      	beq.n	800228c <HAL_UART_IRQHandler+0x404>
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	4013      	ands	r3, r2
 800226c:	d00e      	beq.n	800228c <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 fc02 	bl	8002a7a <UART_EndTransmit_IT>
    return;
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	e008      	b.n	800228c <HAL_UART_IRQHandler+0x404>
      return;
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	e006      	b.n	800228c <HAL_UART_IRQHandler+0x404>
    return;
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	e004      	b.n	800228c <HAL_UART_IRQHandler+0x404>
      return;
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	e002      	b.n	800228c <HAL_UART_IRQHandler+0x404>
      return;
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	e000      	b.n	800228c <HAL_UART_IRQHandler+0x404>
    return;
 800228a:	46c0      	nop			; (mov r8, r8)
  }

}
 800228c:	46bd      	mov	sp, r7
 800228e:	b008      	add	sp, #32
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	fffffedf 	.word	0xfffffedf

08002298 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	000a      	movs	r2, r1
 80022c2:	1cbb      	adds	r3, r7, #2
 80022c4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b002      	add	sp, #8
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022d8:	231e      	movs	r3, #30
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4aac      	ldr	r2, [pc, #688]	; (80025b0 <UART_SetConfig+0x2e0>)
 8002300:	4013      	ands	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4aa7      	ldr	r2, [pc, #668]	; (80025b4 <UART_SetConfig+0x2e4>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a9e      	ldr	r2, [pc, #632]	; (80025b8 <UART_SetConfig+0x2e8>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a9a      	ldr	r2, [pc, #616]	; (80025bc <UART_SetConfig+0x2ec>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d125      	bne.n	80023a2 <UART_SetConfig+0xd2>
 8002356:	4b9a      	ldr	r3, [pc, #616]	; (80025c0 <UART_SetConfig+0x2f0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	2203      	movs	r2, #3
 800235c:	4013      	ands	r3, r2
 800235e:	2b01      	cmp	r3, #1
 8002360:	d00f      	beq.n	8002382 <UART_SetConfig+0xb2>
 8002362:	d304      	bcc.n	800236e <UART_SetConfig+0x9e>
 8002364:	2b02      	cmp	r3, #2
 8002366:	d011      	beq.n	800238c <UART_SetConfig+0xbc>
 8002368:	2b03      	cmp	r3, #3
 800236a:	d005      	beq.n	8002378 <UART_SetConfig+0xa8>
 800236c:	e013      	b.n	8002396 <UART_SetConfig+0xc6>
 800236e:	231f      	movs	r3, #31
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	e064      	b.n	8002442 <UART_SetConfig+0x172>
 8002378:	231f      	movs	r3, #31
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2202      	movs	r2, #2
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e05f      	b.n	8002442 <UART_SetConfig+0x172>
 8002382:	231f      	movs	r3, #31
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2204      	movs	r2, #4
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e05a      	b.n	8002442 <UART_SetConfig+0x172>
 800238c:	231f      	movs	r3, #31
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2208      	movs	r2, #8
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e055      	b.n	8002442 <UART_SetConfig+0x172>
 8002396:	231f      	movs	r3, #31
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2210      	movs	r2, #16
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	e04f      	b.n	8002442 <UART_SetConfig+0x172>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a87      	ldr	r2, [pc, #540]	; (80025c4 <UART_SetConfig+0x2f4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d132      	bne.n	8002412 <UART_SetConfig+0x142>
 80023ac:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <UART_SetConfig+0x2f0>)
 80023ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b0:	23c0      	movs	r3, #192	; 0xc0
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	4013      	ands	r3, r2
 80023b6:	2280      	movs	r2, #128	; 0x80
 80023b8:	0252      	lsls	r2, r2, #9
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <UART_SetConfig+0x122>
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	0252      	lsls	r2, r2, #9
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d802      	bhi.n	80023cc <UART_SetConfig+0xfc>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <UART_SetConfig+0x10e>
 80023ca:	e01c      	b.n	8002406 <UART_SetConfig+0x136>
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	0292      	lsls	r2, r2, #10
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <UART_SetConfig+0x12c>
 80023d4:	22c0      	movs	r2, #192	; 0xc0
 80023d6:	0292      	lsls	r2, r2, #10
 80023d8:	4293      	cmp	r3, r2
 80023da:	d005      	beq.n	80023e8 <UART_SetConfig+0x118>
 80023dc:	e013      	b.n	8002406 <UART_SetConfig+0x136>
 80023de:	231f      	movs	r3, #31
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	e02c      	b.n	8002442 <UART_SetConfig+0x172>
 80023e8:	231f      	movs	r3, #31
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e027      	b.n	8002442 <UART_SetConfig+0x172>
 80023f2:	231f      	movs	r3, #31
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2204      	movs	r2, #4
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e022      	b.n	8002442 <UART_SetConfig+0x172>
 80023fc:	231f      	movs	r3, #31
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	2208      	movs	r2, #8
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e01d      	b.n	8002442 <UART_SetConfig+0x172>
 8002406:	231f      	movs	r3, #31
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2210      	movs	r2, #16
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	e017      	b.n	8002442 <UART_SetConfig+0x172>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6c      	ldr	r2, [pc, #432]	; (80025c8 <UART_SetConfig+0x2f8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d104      	bne.n	8002426 <UART_SetConfig+0x156>
 800241c:	231f      	movs	r3, #31
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e00d      	b.n	8002442 <UART_SetConfig+0x172>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a68      	ldr	r2, [pc, #416]	; (80025cc <UART_SetConfig+0x2fc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d104      	bne.n	800243a <UART_SetConfig+0x16a>
 8002430:	231f      	movs	r3, #31
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e003      	b.n	8002442 <UART_SetConfig+0x172>
 800243a:	231f      	movs	r3, #31
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2210      	movs	r2, #16
 8002440:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	429a      	cmp	r2, r3
 800244c:	d15c      	bne.n	8002508 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 800244e:	231f      	movs	r3, #31
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d00d      	beq.n	8002474 <UART_SetConfig+0x1a4>
 8002458:	dc02      	bgt.n	8002460 <UART_SetConfig+0x190>
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <UART_SetConfig+0x19a>
 800245e:	e015      	b.n	800248c <UART_SetConfig+0x1bc>
 8002460:	2b04      	cmp	r3, #4
 8002462:	d00a      	beq.n	800247a <UART_SetConfig+0x1aa>
 8002464:	2b08      	cmp	r3, #8
 8002466:	d00d      	beq.n	8002484 <UART_SetConfig+0x1b4>
 8002468:	e010      	b.n	800248c <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800246a:	f7ff faa9 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
 800246e:	0003      	movs	r3, r0
 8002470:	61bb      	str	r3, [r7, #24]
        break;
 8002472:	e012      	b.n	800249a <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002474:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <UART_SetConfig+0x300>)
 8002476:	61bb      	str	r3, [r7, #24]
        break;
 8002478:	e00f      	b.n	800249a <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800247a:	f7ff fa19 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 800247e:	0003      	movs	r3, r0
 8002480:	61bb      	str	r3, [r7, #24]
        break;
 8002482:	e00a      	b.n	800249a <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	61bb      	str	r3, [r7, #24]
        break;
 800248a:	e006      	b.n	800249a <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002490:	231e      	movs	r3, #30
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
        break;
 8002498:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d100      	bne.n	80024a2 <UART_SetConfig+0x1d2>
 80024a0:	e079      	b.n	8002596 <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	005a      	lsls	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	18d2      	adds	r2, r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0019      	movs	r1, r3
 80024b4:	0010      	movs	r0, r2
 80024b6:	f7fd fe27 	bl	8000108 <__udivsi3>
 80024ba:	0003      	movs	r3, r0
 80024bc:	b29b      	uxth	r3, r3
 80024be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	d91b      	bls.n	80024fe <UART_SetConfig+0x22e>
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4a42      	ldr	r2, [pc, #264]	; (80025d4 <UART_SetConfig+0x304>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d817      	bhi.n	80024fe <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	200e      	movs	r0, #14
 80024d4:	183b      	adds	r3, r7, r0
 80024d6:	210f      	movs	r1, #15
 80024d8:	438a      	bics	r2, r1
 80024da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2207      	movs	r2, #7
 80024e4:	4013      	ands	r3, r2
 80024e6:	b299      	uxth	r1, r3
 80024e8:	183b      	adds	r3, r7, r0
 80024ea:	183a      	adds	r2, r7, r0
 80024ec:	8812      	ldrh	r2, [r2, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	183a      	adds	r2, r7, r0
 80024f8:	8812      	ldrh	r2, [r2, #0]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	e04b      	b.n	8002596 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 80024fe:	231e      	movs	r3, #30
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e046      	b.n	8002596 <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002508:	231f      	movs	r3, #31
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d00d      	beq.n	800252e <UART_SetConfig+0x25e>
 8002512:	dc02      	bgt.n	800251a <UART_SetConfig+0x24a>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <UART_SetConfig+0x254>
 8002518:	e015      	b.n	8002546 <UART_SetConfig+0x276>
 800251a:	2b04      	cmp	r3, #4
 800251c:	d00a      	beq.n	8002534 <UART_SetConfig+0x264>
 800251e:	2b08      	cmp	r3, #8
 8002520:	d00d      	beq.n	800253e <UART_SetConfig+0x26e>
 8002522:	e010      	b.n	8002546 <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002524:	f7ff fa4c 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
 8002528:	0003      	movs	r3, r0
 800252a:	61bb      	str	r3, [r7, #24]
        break;
 800252c:	e012      	b.n	8002554 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <UART_SetConfig+0x300>)
 8002530:	61bb      	str	r3, [r7, #24]
        break;
 8002532:	e00f      	b.n	8002554 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002534:	f7ff f9bc 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 8002538:	0003      	movs	r3, r0
 800253a:	61bb      	str	r3, [r7, #24]
        break;
 800253c:	e00a      	b.n	8002554 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	61bb      	str	r3, [r7, #24]
        break;
 8002544:	e006      	b.n	8002554 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800254a:	231e      	movs	r3, #30
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
        break;
 8002552:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01d      	beq.n	8002596 <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	085a      	lsrs	r2, r3, #1
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	18d2      	adds	r2, r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0019      	movs	r1, r3
 800256a:	0010      	movs	r0, r2
 800256c:	f7fd fdcc 	bl	8000108 <__udivsi3>
 8002570:	0003      	movs	r3, r0
 8002572:	b29b      	uxth	r3, r3
 8002574:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b0f      	cmp	r3, #15
 800257a:	d908      	bls.n	800258e <UART_SetConfig+0x2be>
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <UART_SetConfig+0x304>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d804      	bhi.n	800258e <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	e003      	b.n	8002596 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 800258e:	231e      	movs	r3, #30
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80025a2:	231e      	movs	r3, #30
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	781b      	ldrb	r3, [r3, #0]
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b008      	add	sp, #32
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	efff69f3 	.word	0xefff69f3
 80025b4:	ffffcfff 	.word	0xffffcfff
 80025b8:	fffff4ff 	.word	0xfffff4ff
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40004400 	.word	0x40004400
 80025c8:	40004800 	.word	0x40004800
 80025cc:	40004c00 	.word	0x40004c00
 80025d0:	007a1200 	.word	0x007a1200
 80025d4:	0000ffff 	.word	0x0000ffff

080025d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	d00b      	beq.n	8002602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a4a      	ldr	r2, [pc, #296]	; (800271c <UART_AdvFeatureConfig+0x144>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2202      	movs	r2, #2
 8002608:	4013      	ands	r3, r2
 800260a:	d00b      	beq.n	8002624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a43      	ldr	r2, [pc, #268]	; (8002720 <UART_AdvFeatureConfig+0x148>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	2204      	movs	r2, #4
 800262a:	4013      	ands	r3, r2
 800262c:	d00b      	beq.n	8002646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a3b      	ldr	r2, [pc, #236]	; (8002724 <UART_AdvFeatureConfig+0x14c>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	2208      	movs	r2, #8
 800264c:	4013      	ands	r3, r2
 800264e:	d00b      	beq.n	8002668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4a34      	ldr	r2, [pc, #208]	; (8002728 <UART_AdvFeatureConfig+0x150>)
 8002658:	4013      	ands	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2210      	movs	r2, #16
 800266e:	4013      	ands	r3, r2
 8002670:	d00b      	beq.n	800268a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a2c      	ldr	r2, [pc, #176]	; (800272c <UART_AdvFeatureConfig+0x154>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	2220      	movs	r2, #32
 8002690:	4013      	ands	r3, r2
 8002692:	d00b      	beq.n	80026ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	4a25      	ldr	r2, [pc, #148]	; (8002730 <UART_AdvFeatureConfig+0x158>)
 800269c:	4013      	ands	r3, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2240      	movs	r2, #64	; 0x40
 80026b2:	4013      	ands	r3, r2
 80026b4:	d01d      	beq.n	80026f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <UART_AdvFeatureConfig+0x15c>)
 80026be:	4013      	ands	r3, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	035b      	lsls	r3, r3, #13
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10b      	bne.n	80026f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a15      	ldr	r2, [pc, #84]	; (8002738 <UART_AdvFeatureConfig+0x160>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	4013      	ands	r3, r2
 80026fa:	d00b      	beq.n	8002714 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4a0e      	ldr	r2, [pc, #56]	; (800273c <UART_AdvFeatureConfig+0x164>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
  }
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}
 800271c:	fffdffff 	.word	0xfffdffff
 8002720:	fffeffff 	.word	0xfffeffff
 8002724:	fffbffff 	.word	0xfffbffff
 8002728:	ffff7fff 	.word	0xffff7fff
 800272c:	ffffefff 	.word	0xffffefff
 8002730:	ffffdfff 	.word	0xffffdfff
 8002734:	ffefffff 	.word	0xffefffff
 8002738:	ff9fffff 	.word	0xff9fffff
 800273c:	fff7ffff 	.word	0xfff7ffff

08002740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	2100      	movs	r1, #0
 800274e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002750:	f7fe f914 	bl	800097c <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2208      	movs	r2, #8
 8002760:	4013      	ands	r3, r2
 8002762:	2b08      	cmp	r3, #8
 8002764:	d10d      	bne.n	8002782 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	0399      	lsls	r1, r3, #14
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <UART_CheckIdleState+0x90>)
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	0013      	movs	r3, r2
 8002774:	2200      	movs	r2, #0
 8002776:	f000 f82d 	bl	80027d4 <UART_WaitOnFlagUntilTimeout>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d001      	beq.n	8002782 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e022      	b.n	80027c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2204      	movs	r2, #4
 800278a:	4013      	ands	r3, r2
 800278c:	2b04      	cmp	r3, #4
 800278e:	d10d      	bne.n	80027ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	03d9      	lsls	r1, r3, #15
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <UART_CheckIdleState+0x90>)
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	0013      	movs	r3, r2
 800279e:	2200      	movs	r2, #0
 80027a0:	f000 f818 	bl	80027d4 <UART_WaitOnFlagUntilTimeout>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d001      	beq.n	80027ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e00d      	b.n	80027c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2274      	movs	r2, #116	; 0x74
 80027c2:	2100      	movs	r1, #0
 80027c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	0018      	movs	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b004      	add	sp, #16
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	01ffffff 	.word	0x01ffffff

080027d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e4:	e05e      	b.n	80028a4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	3301      	adds	r3, #1
 80027ea:	d05b      	beq.n	80028a4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ec:	f7fe f8c6 	bl	800097c <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d302      	bcc.n	8002802 <UART_WaitOnFlagUntilTimeout+0x2e>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d11b      	bne.n	800283a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	492f      	ldr	r1, [pc, #188]	; (80028cc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800280e:	400a      	ands	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	438a      	bics	r2, r1
 8002820:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2274      	movs	r2, #116	; 0x74
 8002832:	2100      	movs	r1, #0
 8002834:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e044      	b.n	80028c4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2204      	movs	r2, #4
 8002842:	4013      	ands	r3, r2
 8002844:	d02e      	beq.n	80028a4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	401a      	ands	r2, r3
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	429a      	cmp	r2, r3
 8002858:	d124      	bne.n	80028a4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4917      	ldr	r1, [pc, #92]	; (80028cc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002870:	400a      	ands	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2101      	movs	r1, #1
 8002880:	438a      	bics	r2, r1
 8002882:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	2120      	movs	r1, #32
 8002896:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2274      	movs	r2, #116	; 0x74
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e00f      	b.n	80028c4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	4013      	ands	r3, r2
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	425a      	negs	r2, r3
 80028b4:	4153      	adcs	r3, r2
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	001a      	movs	r2, r3
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d091      	beq.n	80027e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b004      	add	sp, #16
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	fffffe5f 	.word	0xfffffe5f

080028d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	1dbb      	adds	r3, r7, #6
 80028dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1dba      	adds	r2, r7, #6
 80028e8:	2158      	movs	r1, #88	; 0x58
 80028ea:	8812      	ldrh	r2, [r2, #0]
 80028ec:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1dba      	adds	r2, r7, #6
 80028f2:	215a      	movs	r1, #90	; 0x5a
 80028f4:	8812      	ldrh	r2, [r2, #0]
 80028f6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	015b      	lsls	r3, r3, #5
 8002906:	429a      	cmp	r2, r3
 8002908:	d10d      	bne.n	8002926 <UART_Start_Receive_IT+0x56>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d104      	bne.n	800291c <UART_Start_Receive_IT+0x4c>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	225c      	movs	r2, #92	; 0x5c
 8002916:	4932      	ldr	r1, [pc, #200]	; (80029e0 <UART_Start_Receive_IT+0x110>)
 8002918:	5299      	strh	r1, [r3, r2]
 800291a:	e02e      	b.n	800297a <UART_Start_Receive_IT+0xaa>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	225c      	movs	r2, #92	; 0x5c
 8002920:	21ff      	movs	r1, #255	; 0xff
 8002922:	5299      	strh	r1, [r3, r2]
 8002924:	e029      	b.n	800297a <UART_Start_Receive_IT+0xaa>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <UART_Start_Receive_IT+0x7a>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <UART_Start_Receive_IT+0x70>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	225c      	movs	r2, #92	; 0x5c
 800293a:	21ff      	movs	r1, #255	; 0xff
 800293c:	5299      	strh	r1, [r3, r2]
 800293e:	e01c      	b.n	800297a <UART_Start_Receive_IT+0xaa>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	225c      	movs	r2, #92	; 0x5c
 8002944:	217f      	movs	r1, #127	; 0x7f
 8002946:	5299      	strh	r1, [r3, r2]
 8002948:	e017      	b.n	800297a <UART_Start_Receive_IT+0xaa>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	055b      	lsls	r3, r3, #21
 8002952:	429a      	cmp	r2, r3
 8002954:	d10d      	bne.n	8002972 <UART_Start_Receive_IT+0xa2>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <UART_Start_Receive_IT+0x98>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	225c      	movs	r2, #92	; 0x5c
 8002962:	217f      	movs	r1, #127	; 0x7f
 8002964:	5299      	strh	r1, [r3, r2]
 8002966:	e008      	b.n	800297a <UART_Start_Receive_IT+0xaa>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	225c      	movs	r2, #92	; 0x5c
 800296c:	213f      	movs	r1, #63	; 0x3f
 800296e:	5299      	strh	r1, [r3, r2]
 8002970:	e003      	b.n	800297a <UART_Start_Receive_IT+0xaa>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	225c      	movs	r2, #92	; 0x5c
 8002976:	2100      	movs	r1, #0
 8002978:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	2100      	movs	r1, #0
 8002980:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2222      	movs	r2, #34	; 0x22
 8002986:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2101      	movs	r1, #1
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	015b      	lsls	r3, r3, #5
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <UART_Start_Receive_IT+0xe4>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <UART_Start_Receive_IT+0x114>)
 80029b0:	665a      	str	r2, [r3, #100]	; 0x64
 80029b2:	e002      	b.n	80029ba <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <UART_Start_Receive_IT+0x118>)
 80029b8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2274      	movs	r2, #116	; 0x74
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2190      	movs	r1, #144	; 0x90
 80029ce:	0049      	lsls	r1, r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	000001ff 	.word	0x000001ff
 80029e4:	08002b9d 	.word	0x08002b9d
 80029e8:	08002ab1 	.word	0x08002ab1

080029ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4912      	ldr	r1, [pc, #72]	; (8002a48 <UART_EndRxTransfer+0x5c>)
 8002a00:	400a      	ands	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	438a      	bics	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2110      	movs	r1, #16
 8002a28:	438a      	bics	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	fffffedf 	.word	0xfffffedf

08002a4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	225a      	movs	r2, #90	; 0x5a
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2252      	movs	r2, #82	; 0x52
 8002a66:	2100      	movs	r1, #0
 8002a68:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff fc1b 	bl	80022a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	438a      	bics	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff fbf9 	bl	8002298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002ab8:	230e      	movs	r3, #14
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	215c      	movs	r1, #92	; 0x5c
 8002ac0:	5a52      	ldrh	r2, [r2, r1]
 8002ac2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac8:	2b22      	cmp	r3, #34	; 0x22
 8002aca:	d158      	bne.n	8002b7e <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	210c      	movs	r1, #12
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002ad6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	230e      	movs	r3, #14
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b2d9      	uxtb	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	400a      	ands	r2, r1
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	225a      	movs	r2, #90	; 0x5a
 8002afe:	5a9b      	ldrh	r3, [r3, r2]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b299      	uxth	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	225a      	movs	r2, #90	; 0x5a
 8002b0a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	225a      	movs	r2, #90	; 0x5a
 8002b10:	5a9b      	ldrh	r3, [r3, r2]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d13a      	bne.n	8002b8e <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	491d      	ldr	r1, [pc, #116]	; (8002b98 <UART_RxISR_8BIT+0xe8>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2101      	movs	r1, #1
 8002b34:	438a      	bics	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d110      	bne.n	8002b6e <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2110      	movs	r1, #16
 8002b58:	438a      	bics	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2258      	movs	r2, #88	; 0x58
 8002b60:	5a9a      	ldrh	r2, [r3, r2]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7ff fba6 	bl	80022b8 <HAL_UARTEx_RxEventCallback>
 8002b6c:	e003      	b.n	8002b76 <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f7fd fce9 	bl	8000548 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002b7c:	e007      	b.n	8002b8e <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2108      	movs	r1, #8
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	619a      	str	r2, [r3, #24]
}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	fffffedf 	.word	0xfffffedf

08002b9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002ba4:	230e      	movs	r3, #14
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	215c      	movs	r1, #92	; 0x5c
 8002bac:	5a52      	ldrh	r2, [r2, r1]
 8002bae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bb4:	2b22      	cmp	r3, #34	; 0x22
 8002bb6:	d158      	bne.n	8002c6a <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	210c      	movs	r1, #12
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002bc2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	220e      	movs	r2, #14
 8002bce:	18ba      	adds	r2, r7, r2
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	8812      	ldrh	r2, [r2, #0]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	1c9a      	adds	r2, r3, #2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	225a      	movs	r2, #90	; 0x5a
 8002bea:	5a9b      	ldrh	r3, [r3, r2]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b299      	uxth	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	225a      	movs	r2, #90	; 0x5a
 8002bf6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	225a      	movs	r2, #90	; 0x5a
 8002bfc:	5a9b      	ldrh	r3, [r3, r2]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d13a      	bne.n	8002c7a <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	491d      	ldr	r1, [pc, #116]	; (8002c84 <UART_RxISR_16BIT+0xe8>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	438a      	bics	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d110      	bne.n	8002c5a <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2110      	movs	r1, #16
 8002c44:	438a      	bics	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2258      	movs	r2, #88	; 0x58
 8002c4c:	5a9a      	ldrh	r2, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0011      	movs	r1, r2
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7ff fb30 	bl	80022b8 <HAL_UARTEx_RxEventCallback>
 8002c58:	e003      	b.n	8002c62 <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f7fd fc73 	bl	8000548 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c68:	e007      	b.n	8002c7a <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699a      	ldr	r2, [r3, #24]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2108      	movs	r1, #8
 8002c76:	430a      	orrs	r2, r1
 8002c78:	619a      	str	r2, [r3, #24]
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	fffffedf 	.word	0xfffffedf

08002c88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <__errno>:
 8002c98:	4b01      	ldr	r3, [pc, #4]	; (8002ca0 <__errno+0x8>)
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	4770      	bx	lr
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	20000010 	.word	0x20000010

08002ca4 <__libc_init_array>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	2600      	movs	r6, #0
 8002ca8:	4d0c      	ldr	r5, [pc, #48]	; (8002cdc <__libc_init_array+0x38>)
 8002caa:	4c0d      	ldr	r4, [pc, #52]	; (8002ce0 <__libc_init_array+0x3c>)
 8002cac:	1b64      	subs	r4, r4, r5
 8002cae:	10a4      	asrs	r4, r4, #2
 8002cb0:	42a6      	cmp	r6, r4
 8002cb2:	d109      	bne.n	8002cc8 <__libc_init_array+0x24>
 8002cb4:	2600      	movs	r6, #0
 8002cb6:	f000 fcc9 	bl	800364c <_init>
 8002cba:	4d0a      	ldr	r5, [pc, #40]	; (8002ce4 <__libc_init_array+0x40>)
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	; (8002ce8 <__libc_init_array+0x44>)
 8002cbe:	1b64      	subs	r4, r4, r5
 8002cc0:	10a4      	asrs	r4, r4, #2
 8002cc2:	42a6      	cmp	r6, r4
 8002cc4:	d105      	bne.n	8002cd2 <__libc_init_array+0x2e>
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	00b3      	lsls	r3, r6, #2
 8002cca:	58eb      	ldr	r3, [r5, r3]
 8002ccc:	4798      	blx	r3
 8002cce:	3601      	adds	r6, #1
 8002cd0:	e7ee      	b.n	8002cb0 <__libc_init_array+0xc>
 8002cd2:	00b3      	lsls	r3, r6, #2
 8002cd4:	58eb      	ldr	r3, [r5, r3]
 8002cd6:	4798      	blx	r3
 8002cd8:	3601      	adds	r6, #1
 8002cda:	e7f2      	b.n	8002cc2 <__libc_init_array+0x1e>
 8002cdc:	0800371c 	.word	0x0800371c
 8002ce0:	0800371c 	.word	0x0800371c
 8002ce4:	0800371c 	.word	0x0800371c
 8002ce8:	08003720 	.word	0x08003720

08002cec <memset>:
 8002cec:	0003      	movs	r3, r0
 8002cee:	1812      	adds	r2, r2, r0
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <memset+0xa>
 8002cf4:	4770      	bx	lr
 8002cf6:	7019      	strb	r1, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	e7f9      	b.n	8002cf0 <memset+0x4>

08002cfc <_puts_r>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	0005      	movs	r5, r0
 8002d00:	000e      	movs	r6, r1
 8002d02:	2800      	cmp	r0, #0
 8002d04:	d004      	beq.n	8002d10 <_puts_r+0x14>
 8002d06:	6983      	ldr	r3, [r0, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <_puts_r+0x14>
 8002d0c:	f000 fa24 	bl	8003158 <__sinit>
 8002d10:	69ab      	ldr	r3, [r5, #24]
 8002d12:	68ac      	ldr	r4, [r5, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_puts_r+0x22>
 8002d18:	0028      	movs	r0, r5
 8002d1a:	f000 fa1d 	bl	8003158 <__sinit>
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <_puts_r+0xb4>)
 8002d20:	429c      	cmp	r4, r3
 8002d22:	d10f      	bne.n	8002d44 <_puts_r+0x48>
 8002d24:	686c      	ldr	r4, [r5, #4]
 8002d26:	89a3      	ldrh	r3, [r4, #12]
 8002d28:	071b      	lsls	r3, r3, #28
 8002d2a:	d502      	bpl.n	8002d32 <_puts_r+0x36>
 8002d2c:	6923      	ldr	r3, [r4, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d11f      	bne.n	8002d72 <_puts_r+0x76>
 8002d32:	0021      	movs	r1, r4
 8002d34:	0028      	movs	r0, r5
 8002d36:	f000 f8a1 	bl	8002e7c <__swsetup_r>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d019      	beq.n	8002d72 <_puts_r+0x76>
 8002d3e:	2001      	movs	r0, #1
 8002d40:	4240      	negs	r0, r0
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <_puts_r+0xb8>)
 8002d46:	429c      	cmp	r4, r3
 8002d48:	d101      	bne.n	8002d4e <_puts_r+0x52>
 8002d4a:	68ac      	ldr	r4, [r5, #8]
 8002d4c:	e7eb      	b.n	8002d26 <_puts_r+0x2a>
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <_puts_r+0xbc>)
 8002d50:	429c      	cmp	r4, r3
 8002d52:	d1e8      	bne.n	8002d26 <_puts_r+0x2a>
 8002d54:	68ec      	ldr	r4, [r5, #12]
 8002d56:	e7e6      	b.n	8002d26 <_puts_r+0x2a>
 8002d58:	3601      	adds	r6, #1
 8002d5a:	60a3      	str	r3, [r4, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	da04      	bge.n	8002d6a <_puts_r+0x6e>
 8002d60:	69a2      	ldr	r2, [r4, #24]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	dc16      	bgt.n	8002d94 <_puts_r+0x98>
 8002d66:	290a      	cmp	r1, #10
 8002d68:	d014      	beq.n	8002d94 <_puts_r+0x98>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	6022      	str	r2, [r4, #0]
 8002d70:	7019      	strb	r1, [r3, #0]
 8002d72:	68a3      	ldr	r3, [r4, #8]
 8002d74:	7831      	ldrb	r1, [r6, #0]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	2900      	cmp	r1, #0
 8002d7a:	d1ed      	bne.n	8002d58 <_puts_r+0x5c>
 8002d7c:	60a3      	str	r3, [r4, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da0f      	bge.n	8002da2 <_puts_r+0xa6>
 8002d82:	0022      	movs	r2, r4
 8002d84:	310a      	adds	r1, #10
 8002d86:	0028      	movs	r0, r5
 8002d88:	f000 f822 	bl	8002dd0 <__swbuf_r>
 8002d8c:	1c43      	adds	r3, r0, #1
 8002d8e:	d0d6      	beq.n	8002d3e <_puts_r+0x42>
 8002d90:	200a      	movs	r0, #10
 8002d92:	e7d6      	b.n	8002d42 <_puts_r+0x46>
 8002d94:	0022      	movs	r2, r4
 8002d96:	0028      	movs	r0, r5
 8002d98:	f000 f81a 	bl	8002dd0 <__swbuf_r>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d1e8      	bne.n	8002d72 <_puts_r+0x76>
 8002da0:	e7cd      	b.n	8002d3e <_puts_r+0x42>
 8002da2:	200a      	movs	r0, #10
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	6022      	str	r2, [r4, #0]
 8002daa:	7018      	strb	r0, [r3, #0]
 8002dac:	e7c9      	b.n	8002d42 <_puts_r+0x46>
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	080036dc 	.word	0x080036dc
 8002db4:	080036fc 	.word	0x080036fc
 8002db8:	080036bc 	.word	0x080036bc

08002dbc <puts>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <puts+0x10>)
 8002dc0:	0001      	movs	r1, r0
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	f7ff ff9a 	bl	8002cfc <_puts_r>
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	20000010 	.word	0x20000010

08002dd0 <__swbuf_r>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	0005      	movs	r5, r0
 8002dd4:	000e      	movs	r6, r1
 8002dd6:	0014      	movs	r4, r2
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d004      	beq.n	8002de6 <__swbuf_r+0x16>
 8002ddc:	6983      	ldr	r3, [r0, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <__swbuf_r+0x16>
 8002de2:	f000 f9b9 	bl	8003158 <__sinit>
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <__swbuf_r+0xa0>)
 8002de8:	429c      	cmp	r4, r3
 8002dea:	d12d      	bne.n	8002e48 <__swbuf_r+0x78>
 8002dec:	686c      	ldr	r4, [r5, #4]
 8002dee:	69a3      	ldr	r3, [r4, #24]
 8002df0:	60a3      	str	r3, [r4, #8]
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	071b      	lsls	r3, r3, #28
 8002df6:	d531      	bpl.n	8002e5c <__swbuf_r+0x8c>
 8002df8:	6923      	ldr	r3, [r4, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02e      	beq.n	8002e5c <__swbuf_r+0x8c>
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	6922      	ldr	r2, [r4, #16]
 8002e02:	b2f7      	uxtb	r7, r6
 8002e04:	1a98      	subs	r0, r3, r2
 8002e06:	6963      	ldr	r3, [r4, #20]
 8002e08:	b2f6      	uxtb	r6, r6
 8002e0a:	4283      	cmp	r3, r0
 8002e0c:	dc05      	bgt.n	8002e1a <__swbuf_r+0x4a>
 8002e0e:	0021      	movs	r1, r4
 8002e10:	0028      	movs	r0, r5
 8002e12:	f000 f933 	bl	800307c <_fflush_r>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d126      	bne.n	8002e68 <__swbuf_r+0x98>
 8002e1a:	68a3      	ldr	r3, [r4, #8]
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	60a3      	str	r3, [r4, #8]
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	6022      	str	r2, [r4, #0]
 8002e28:	701f      	strb	r7, [r3, #0]
 8002e2a:	6963      	ldr	r3, [r4, #20]
 8002e2c:	4283      	cmp	r3, r0
 8002e2e:	d004      	beq.n	8002e3a <__swbuf_r+0x6a>
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	07db      	lsls	r3, r3, #31
 8002e34:	d51a      	bpl.n	8002e6c <__swbuf_r+0x9c>
 8002e36:	2e0a      	cmp	r6, #10
 8002e38:	d118      	bne.n	8002e6c <__swbuf_r+0x9c>
 8002e3a:	0021      	movs	r1, r4
 8002e3c:	0028      	movs	r0, r5
 8002e3e:	f000 f91d 	bl	800307c <_fflush_r>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d012      	beq.n	8002e6c <__swbuf_r+0x9c>
 8002e46:	e00f      	b.n	8002e68 <__swbuf_r+0x98>
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <__swbuf_r+0xa4>)
 8002e4a:	429c      	cmp	r4, r3
 8002e4c:	d101      	bne.n	8002e52 <__swbuf_r+0x82>
 8002e4e:	68ac      	ldr	r4, [r5, #8]
 8002e50:	e7cd      	b.n	8002dee <__swbuf_r+0x1e>
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <__swbuf_r+0xa8>)
 8002e54:	429c      	cmp	r4, r3
 8002e56:	d1ca      	bne.n	8002dee <__swbuf_r+0x1e>
 8002e58:	68ec      	ldr	r4, [r5, #12]
 8002e5a:	e7c8      	b.n	8002dee <__swbuf_r+0x1e>
 8002e5c:	0021      	movs	r1, r4
 8002e5e:	0028      	movs	r0, r5
 8002e60:	f000 f80c 	bl	8002e7c <__swsetup_r>
 8002e64:	2800      	cmp	r0, #0
 8002e66:	d0ca      	beq.n	8002dfe <__swbuf_r+0x2e>
 8002e68:	2601      	movs	r6, #1
 8002e6a:	4276      	negs	r6, r6
 8002e6c:	0030      	movs	r0, r6
 8002e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e70:	080036dc 	.word	0x080036dc
 8002e74:	080036fc 	.word	0x080036fc
 8002e78:	080036bc 	.word	0x080036bc

08002e7c <__swsetup_r>:
 8002e7c:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <__swsetup_r+0xdc>)
 8002e7e:	b570      	push	{r4, r5, r6, lr}
 8002e80:	681d      	ldr	r5, [r3, #0]
 8002e82:	0006      	movs	r6, r0
 8002e84:	000c      	movs	r4, r1
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	d005      	beq.n	8002e96 <__swsetup_r+0x1a>
 8002e8a:	69ab      	ldr	r3, [r5, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <__swsetup_r+0x1a>
 8002e90:	0028      	movs	r0, r5
 8002e92:	f000 f961 	bl	8003158 <__sinit>
 8002e96:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <__swsetup_r+0xe0>)
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	d10f      	bne.n	8002ebc <__swsetup_r+0x40>
 8002e9c:	686c      	ldr	r4, [r5, #4]
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	5ee2      	ldrsh	r2, [r4, r3]
 8002ea2:	b293      	uxth	r3, r2
 8002ea4:	0719      	lsls	r1, r3, #28
 8002ea6:	d42d      	bmi.n	8002f04 <__swsetup_r+0x88>
 8002ea8:	06d9      	lsls	r1, r3, #27
 8002eaa:	d411      	bmi.n	8002ed0 <__swsetup_r+0x54>
 8002eac:	2309      	movs	r3, #9
 8002eae:	2001      	movs	r0, #1
 8002eb0:	6033      	str	r3, [r6, #0]
 8002eb2:	3337      	adds	r3, #55	; 0x37
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	81a3      	strh	r3, [r4, #12]
 8002eb8:	4240      	negs	r0, r0
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <__swsetup_r+0xe4>)
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	d101      	bne.n	8002ec6 <__swsetup_r+0x4a>
 8002ec2:	68ac      	ldr	r4, [r5, #8]
 8002ec4:	e7eb      	b.n	8002e9e <__swsetup_r+0x22>
 8002ec6:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <__swsetup_r+0xe8>)
 8002ec8:	429c      	cmp	r4, r3
 8002eca:	d1e8      	bne.n	8002e9e <__swsetup_r+0x22>
 8002ecc:	68ec      	ldr	r4, [r5, #12]
 8002ece:	e7e6      	b.n	8002e9e <__swsetup_r+0x22>
 8002ed0:	075b      	lsls	r3, r3, #29
 8002ed2:	d513      	bpl.n	8002efc <__swsetup_r+0x80>
 8002ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	d008      	beq.n	8002eec <__swsetup_r+0x70>
 8002eda:	0023      	movs	r3, r4
 8002edc:	3344      	adds	r3, #68	; 0x44
 8002ede:	4299      	cmp	r1, r3
 8002ee0:	d002      	beq.n	8002ee8 <__swsetup_r+0x6c>
 8002ee2:	0030      	movs	r0, r6
 8002ee4:	f000 fa38 	bl	8003358 <_free_r>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	6363      	str	r3, [r4, #52]	; 0x34
 8002eec:	2224      	movs	r2, #36	; 0x24
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	4393      	bics	r3, r2
 8002ef2:	81a3      	strh	r3, [r4, #12]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6063      	str	r3, [r4, #4]
 8002ef8:	6923      	ldr	r3, [r4, #16]
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	2308      	movs	r3, #8
 8002efe:	89a2      	ldrh	r2, [r4, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	81a3      	strh	r3, [r4, #12]
 8002f04:	6923      	ldr	r3, [r4, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10b      	bne.n	8002f22 <__swsetup_r+0xa6>
 8002f0a:	21a0      	movs	r1, #160	; 0xa0
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	89a3      	ldrh	r3, [r4, #12]
 8002f10:	0089      	lsls	r1, r1, #2
 8002f12:	0092      	lsls	r2, r2, #2
 8002f14:	400b      	ands	r3, r1
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <__swsetup_r+0xa6>
 8002f1a:	0021      	movs	r1, r4
 8002f1c:	0030      	movs	r0, r6
 8002f1e:	f000 f9d7 	bl	80032d0 <__smakebuf_r>
 8002f22:	2301      	movs	r3, #1
 8002f24:	89a2      	ldrh	r2, [r4, #12]
 8002f26:	4013      	ands	r3, r2
 8002f28:	d011      	beq.n	8002f4e <__swsetup_r+0xd2>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60a3      	str	r3, [r4, #8]
 8002f2e:	6963      	ldr	r3, [r4, #20]
 8002f30:	425b      	negs	r3, r3
 8002f32:	61a3      	str	r3, [r4, #24]
 8002f34:	2000      	movs	r0, #0
 8002f36:	6923      	ldr	r3, [r4, #16]
 8002f38:	4283      	cmp	r3, r0
 8002f3a:	d1be      	bne.n	8002eba <__swsetup_r+0x3e>
 8002f3c:	230c      	movs	r3, #12
 8002f3e:	5ee2      	ldrsh	r2, [r4, r3]
 8002f40:	0613      	lsls	r3, r2, #24
 8002f42:	d5ba      	bpl.n	8002eba <__swsetup_r+0x3e>
 8002f44:	2340      	movs	r3, #64	; 0x40
 8002f46:	4313      	orrs	r3, r2
 8002f48:	81a3      	strh	r3, [r4, #12]
 8002f4a:	3801      	subs	r0, #1
 8002f4c:	e7b5      	b.n	8002eba <__swsetup_r+0x3e>
 8002f4e:	0792      	lsls	r2, r2, #30
 8002f50:	d400      	bmi.n	8002f54 <__swsetup_r+0xd8>
 8002f52:	6963      	ldr	r3, [r4, #20]
 8002f54:	60a3      	str	r3, [r4, #8]
 8002f56:	e7ed      	b.n	8002f34 <__swsetup_r+0xb8>
 8002f58:	20000010 	.word	0x20000010
 8002f5c:	080036dc 	.word	0x080036dc
 8002f60:	080036fc 	.word	0x080036fc
 8002f64:	080036bc 	.word	0x080036bc

08002f68 <__sflush_r>:
 8002f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f6a:	898a      	ldrh	r2, [r1, #12]
 8002f6c:	0005      	movs	r5, r0
 8002f6e:	000c      	movs	r4, r1
 8002f70:	0713      	lsls	r3, r2, #28
 8002f72:	d460      	bmi.n	8003036 <__sflush_r+0xce>
 8002f74:	684b      	ldr	r3, [r1, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	dc04      	bgt.n	8002f84 <__sflush_r+0x1c>
 8002f7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	dc01      	bgt.n	8002f84 <__sflush_r+0x1c>
 8002f80:	2000      	movs	r0, #0
 8002f82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f84:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002f86:	2f00      	cmp	r7, #0
 8002f88:	d0fa      	beq.n	8002f80 <__sflush_r+0x18>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	682e      	ldr	r6, [r5, #0]
 8002f8e:	602b      	str	r3, [r5, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	015b      	lsls	r3, r3, #5
 8002f94:	6a21      	ldr	r1, [r4, #32]
 8002f96:	401a      	ands	r2, r3
 8002f98:	d034      	beq.n	8003004 <__sflush_r+0x9c>
 8002f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	075b      	lsls	r3, r3, #29
 8002fa0:	d506      	bpl.n	8002fb0 <__sflush_r+0x48>
 8002fa2:	6863      	ldr	r3, [r4, #4]
 8002fa4:	1ac0      	subs	r0, r0, r3
 8002fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <__sflush_r+0x48>
 8002fac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fae:	1ac0      	subs	r0, r0, r3
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	6a21      	ldr	r1, [r4, #32]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	0028      	movs	r0, r5
 8002fb8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002fba:	47b8      	blx	r7
 8002fbc:	89a1      	ldrh	r1, [r4, #12]
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	d106      	bne.n	8002fd0 <__sflush_r+0x68>
 8002fc2:	682b      	ldr	r3, [r5, #0]
 8002fc4:	2b1d      	cmp	r3, #29
 8002fc6:	d830      	bhi.n	800302a <__sflush_r+0xc2>
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <__sflush_r+0x110>)
 8002fca:	40da      	lsrs	r2, r3
 8002fcc:	07d3      	lsls	r3, r2, #31
 8002fce:	d52c      	bpl.n	800302a <__sflush_r+0xc2>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6063      	str	r3, [r4, #4]
 8002fd4:	6923      	ldr	r3, [r4, #16]
 8002fd6:	6023      	str	r3, [r4, #0]
 8002fd8:	04cb      	lsls	r3, r1, #19
 8002fda:	d505      	bpl.n	8002fe8 <__sflush_r+0x80>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <__sflush_r+0x7e>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d100      	bne.n	8002fe8 <__sflush_r+0x80>
 8002fe6:	6560      	str	r0, [r4, #84]	; 0x54
 8002fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fea:	602e      	str	r6, [r5, #0]
 8002fec:	2900      	cmp	r1, #0
 8002fee:	d0c7      	beq.n	8002f80 <__sflush_r+0x18>
 8002ff0:	0023      	movs	r3, r4
 8002ff2:	3344      	adds	r3, #68	; 0x44
 8002ff4:	4299      	cmp	r1, r3
 8002ff6:	d002      	beq.n	8002ffe <__sflush_r+0x96>
 8002ff8:	0028      	movs	r0, r5
 8002ffa:	f000 f9ad 	bl	8003358 <_free_r>
 8002ffe:	2000      	movs	r0, #0
 8003000:	6360      	str	r0, [r4, #52]	; 0x34
 8003002:	e7be      	b.n	8002f82 <__sflush_r+0x1a>
 8003004:	2301      	movs	r3, #1
 8003006:	0028      	movs	r0, r5
 8003008:	47b8      	blx	r7
 800300a:	1c43      	adds	r3, r0, #1
 800300c:	d1c6      	bne.n	8002f9c <__sflush_r+0x34>
 800300e:	682b      	ldr	r3, [r5, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0c3      	beq.n	8002f9c <__sflush_r+0x34>
 8003014:	2b1d      	cmp	r3, #29
 8003016:	d001      	beq.n	800301c <__sflush_r+0xb4>
 8003018:	2b16      	cmp	r3, #22
 800301a:	d101      	bne.n	8003020 <__sflush_r+0xb8>
 800301c:	602e      	str	r6, [r5, #0]
 800301e:	e7af      	b.n	8002f80 <__sflush_r+0x18>
 8003020:	2340      	movs	r3, #64	; 0x40
 8003022:	89a2      	ldrh	r2, [r4, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	81a3      	strh	r3, [r4, #12]
 8003028:	e7ab      	b.n	8002f82 <__sflush_r+0x1a>
 800302a:	2340      	movs	r3, #64	; 0x40
 800302c:	430b      	orrs	r3, r1
 800302e:	2001      	movs	r0, #1
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	4240      	negs	r0, r0
 8003034:	e7a5      	b.n	8002f82 <__sflush_r+0x1a>
 8003036:	690f      	ldr	r7, [r1, #16]
 8003038:	2f00      	cmp	r7, #0
 800303a:	d0a1      	beq.n	8002f80 <__sflush_r+0x18>
 800303c:	680b      	ldr	r3, [r1, #0]
 800303e:	600f      	str	r7, [r1, #0]
 8003040:	1bdb      	subs	r3, r3, r7
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	2300      	movs	r3, #0
 8003046:	0792      	lsls	r2, r2, #30
 8003048:	d100      	bne.n	800304c <__sflush_r+0xe4>
 800304a:	694b      	ldr	r3, [r1, #20]
 800304c:	60a3      	str	r3, [r4, #8]
 800304e:	9b01      	ldr	r3, [sp, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	dc00      	bgt.n	8003056 <__sflush_r+0xee>
 8003054:	e794      	b.n	8002f80 <__sflush_r+0x18>
 8003056:	9b01      	ldr	r3, [sp, #4]
 8003058:	003a      	movs	r2, r7
 800305a:	6a21      	ldr	r1, [r4, #32]
 800305c:	0028      	movs	r0, r5
 800305e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003060:	47b0      	blx	r6
 8003062:	2800      	cmp	r0, #0
 8003064:	dc03      	bgt.n	800306e <__sflush_r+0x106>
 8003066:	2340      	movs	r3, #64	; 0x40
 8003068:	89a2      	ldrh	r2, [r4, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	e7df      	b.n	800302e <__sflush_r+0xc6>
 800306e:	9b01      	ldr	r3, [sp, #4]
 8003070:	183f      	adds	r7, r7, r0
 8003072:	1a1b      	subs	r3, r3, r0
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	e7ea      	b.n	800304e <__sflush_r+0xe6>
 8003078:	20400001 	.word	0x20400001

0800307c <_fflush_r>:
 800307c:	690b      	ldr	r3, [r1, #16]
 800307e:	b570      	push	{r4, r5, r6, lr}
 8003080:	0005      	movs	r5, r0
 8003082:	000c      	movs	r4, r1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <_fflush_r+0x10>
 8003088:	2000      	movs	r0, #0
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	2800      	cmp	r0, #0
 800308e:	d004      	beq.n	800309a <_fflush_r+0x1e>
 8003090:	6983      	ldr	r3, [r0, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <_fflush_r+0x1e>
 8003096:	f000 f85f 	bl	8003158 <__sinit>
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <_fflush_r+0x4c>)
 800309c:	429c      	cmp	r4, r3
 800309e:	d109      	bne.n	80030b4 <_fflush_r+0x38>
 80030a0:	686c      	ldr	r4, [r5, #4]
 80030a2:	220c      	movs	r2, #12
 80030a4:	5ea3      	ldrsh	r3, [r4, r2]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0ee      	beq.n	8003088 <_fflush_r+0xc>
 80030aa:	0021      	movs	r1, r4
 80030ac:	0028      	movs	r0, r5
 80030ae:	f7ff ff5b 	bl	8002f68 <__sflush_r>
 80030b2:	e7ea      	b.n	800308a <_fflush_r+0xe>
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <_fflush_r+0x50>)
 80030b6:	429c      	cmp	r4, r3
 80030b8:	d101      	bne.n	80030be <_fflush_r+0x42>
 80030ba:	68ac      	ldr	r4, [r5, #8]
 80030bc:	e7f1      	b.n	80030a2 <_fflush_r+0x26>
 80030be:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <_fflush_r+0x54>)
 80030c0:	429c      	cmp	r4, r3
 80030c2:	d1ee      	bne.n	80030a2 <_fflush_r+0x26>
 80030c4:	68ec      	ldr	r4, [r5, #12]
 80030c6:	e7ec      	b.n	80030a2 <_fflush_r+0x26>
 80030c8:	080036dc 	.word	0x080036dc
 80030cc:	080036fc 	.word	0x080036fc
 80030d0:	080036bc 	.word	0x080036bc

080030d4 <std>:
 80030d4:	2300      	movs	r3, #0
 80030d6:	b510      	push	{r4, lr}
 80030d8:	0004      	movs	r4, r0
 80030da:	6003      	str	r3, [r0, #0]
 80030dc:	6043      	str	r3, [r0, #4]
 80030de:	6083      	str	r3, [r0, #8]
 80030e0:	8181      	strh	r1, [r0, #12]
 80030e2:	6643      	str	r3, [r0, #100]	; 0x64
 80030e4:	81c2      	strh	r2, [r0, #14]
 80030e6:	6103      	str	r3, [r0, #16]
 80030e8:	6143      	str	r3, [r0, #20]
 80030ea:	6183      	str	r3, [r0, #24]
 80030ec:	0019      	movs	r1, r3
 80030ee:	2208      	movs	r2, #8
 80030f0:	305c      	adds	r0, #92	; 0x5c
 80030f2:	f7ff fdfb 	bl	8002cec <memset>
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <std+0x38>)
 80030f8:	6224      	str	r4, [r4, #32]
 80030fa:	6263      	str	r3, [r4, #36]	; 0x24
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <std+0x3c>)
 80030fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <std+0x40>)
 8003102:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <std+0x44>)
 8003106:	6323      	str	r3, [r4, #48]	; 0x30
 8003108:	bd10      	pop	{r4, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	080034cd 	.word	0x080034cd
 8003110:	080034f5 	.word	0x080034f5
 8003114:	0800352d 	.word	0x0800352d
 8003118:	08003559 	.word	0x08003559

0800311c <_cleanup_r>:
 800311c:	b510      	push	{r4, lr}
 800311e:	4902      	ldr	r1, [pc, #8]	; (8003128 <_cleanup_r+0xc>)
 8003120:	f000 f88c 	bl	800323c <_fwalk_reent>
 8003124:	bd10      	pop	{r4, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	0800307d 	.word	0x0800307d

0800312c <__sfmoreglue>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	2568      	movs	r5, #104	; 0x68
 8003130:	1e4a      	subs	r2, r1, #1
 8003132:	4355      	muls	r5, r2
 8003134:	000e      	movs	r6, r1
 8003136:	0029      	movs	r1, r5
 8003138:	3174      	adds	r1, #116	; 0x74
 800313a:	f000 f957 	bl	80033ec <_malloc_r>
 800313e:	1e04      	subs	r4, r0, #0
 8003140:	d008      	beq.n	8003154 <__sfmoreglue+0x28>
 8003142:	2100      	movs	r1, #0
 8003144:	002a      	movs	r2, r5
 8003146:	6001      	str	r1, [r0, #0]
 8003148:	6046      	str	r6, [r0, #4]
 800314a:	300c      	adds	r0, #12
 800314c:	60a0      	str	r0, [r4, #8]
 800314e:	3268      	adds	r2, #104	; 0x68
 8003150:	f7ff fdcc 	bl	8002cec <memset>
 8003154:	0020      	movs	r0, r4
 8003156:	bd70      	pop	{r4, r5, r6, pc}

08003158 <__sinit>:
 8003158:	6983      	ldr	r3, [r0, #24]
 800315a:	b513      	push	{r0, r1, r4, lr}
 800315c:	0004      	movs	r4, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d128      	bne.n	80031b4 <__sinit+0x5c>
 8003162:	6483      	str	r3, [r0, #72]	; 0x48
 8003164:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003166:	6503      	str	r3, [r0, #80]	; 0x50
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <__sinit+0x60>)
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <__sinit+0x64>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6282      	str	r2, [r0, #40]	; 0x28
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	4298      	cmp	r0, r3
 8003174:	d101      	bne.n	800317a <__sinit+0x22>
 8003176:	2301      	movs	r3, #1
 8003178:	6183      	str	r3, [r0, #24]
 800317a:	0020      	movs	r0, r4
 800317c:	f000 f820 	bl	80031c0 <__sfp>
 8003180:	6060      	str	r0, [r4, #4]
 8003182:	0020      	movs	r0, r4
 8003184:	f000 f81c 	bl	80031c0 <__sfp>
 8003188:	60a0      	str	r0, [r4, #8]
 800318a:	0020      	movs	r0, r4
 800318c:	f000 f818 	bl	80031c0 <__sfp>
 8003190:	2200      	movs	r2, #0
 8003192:	60e0      	str	r0, [r4, #12]
 8003194:	2104      	movs	r1, #4
 8003196:	6860      	ldr	r0, [r4, #4]
 8003198:	f7ff ff9c 	bl	80030d4 <std>
 800319c:	2201      	movs	r2, #1
 800319e:	2109      	movs	r1, #9
 80031a0:	68a0      	ldr	r0, [r4, #8]
 80031a2:	f7ff ff97 	bl	80030d4 <std>
 80031a6:	2202      	movs	r2, #2
 80031a8:	2112      	movs	r1, #18
 80031aa:	68e0      	ldr	r0, [r4, #12]
 80031ac:	f7ff ff92 	bl	80030d4 <std>
 80031b0:	2301      	movs	r3, #1
 80031b2:	61a3      	str	r3, [r4, #24]
 80031b4:	bd13      	pop	{r0, r1, r4, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	080036b8 	.word	0x080036b8
 80031bc:	0800311d 	.word	0x0800311d

080031c0 <__sfp>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <__sfp+0x74>)
 80031c4:	0007      	movs	r7, r0
 80031c6:	681e      	ldr	r6, [r3, #0]
 80031c8:	69b3      	ldr	r3, [r6, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <__sfp+0x14>
 80031ce:	0030      	movs	r0, r6
 80031d0:	f7ff ffc2 	bl	8003158 <__sinit>
 80031d4:	3648      	adds	r6, #72	; 0x48
 80031d6:	68b4      	ldr	r4, [r6, #8]
 80031d8:	6873      	ldr	r3, [r6, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	d504      	bpl.n	80031e8 <__sfp+0x28>
 80031de:	6833      	ldr	r3, [r6, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <__sfp+0x34>
 80031e4:	6836      	ldr	r6, [r6, #0]
 80031e6:	e7f6      	b.n	80031d6 <__sfp+0x16>
 80031e8:	220c      	movs	r2, #12
 80031ea:	5ea5      	ldrsh	r5, [r4, r2]
 80031ec:	2d00      	cmp	r5, #0
 80031ee:	d00d      	beq.n	800320c <__sfp+0x4c>
 80031f0:	3468      	adds	r4, #104	; 0x68
 80031f2:	e7f2      	b.n	80031da <__sfp+0x1a>
 80031f4:	2104      	movs	r1, #4
 80031f6:	0038      	movs	r0, r7
 80031f8:	f7ff ff98 	bl	800312c <__sfmoreglue>
 80031fc:	6030      	str	r0, [r6, #0]
 80031fe:	2800      	cmp	r0, #0
 8003200:	d1f0      	bne.n	80031e4 <__sfp+0x24>
 8003202:	230c      	movs	r3, #12
 8003204:	0004      	movs	r4, r0
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	0020      	movs	r0, r4
 800320a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800320c:	0020      	movs	r0, r4
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <__sfp+0x78>)
 8003210:	6665      	str	r5, [r4, #100]	; 0x64
 8003212:	6025      	str	r5, [r4, #0]
 8003214:	6065      	str	r5, [r4, #4]
 8003216:	60a5      	str	r5, [r4, #8]
 8003218:	60e3      	str	r3, [r4, #12]
 800321a:	6125      	str	r5, [r4, #16]
 800321c:	6165      	str	r5, [r4, #20]
 800321e:	61a5      	str	r5, [r4, #24]
 8003220:	2208      	movs	r2, #8
 8003222:	0029      	movs	r1, r5
 8003224:	305c      	adds	r0, #92	; 0x5c
 8003226:	f7ff fd61 	bl	8002cec <memset>
 800322a:	6365      	str	r5, [r4, #52]	; 0x34
 800322c:	63a5      	str	r5, [r4, #56]	; 0x38
 800322e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003230:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003232:	e7e9      	b.n	8003208 <__sfp+0x48>
 8003234:	080036b8 	.word	0x080036b8
 8003238:	ffff0001 	.word	0xffff0001

0800323c <_fwalk_reent>:
 800323c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800323e:	0004      	movs	r4, r0
 8003240:	0007      	movs	r7, r0
 8003242:	2600      	movs	r6, #0
 8003244:	9101      	str	r1, [sp, #4]
 8003246:	3448      	adds	r4, #72	; 0x48
 8003248:	2c00      	cmp	r4, #0
 800324a:	d101      	bne.n	8003250 <_fwalk_reent+0x14>
 800324c:	0030      	movs	r0, r6
 800324e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003250:	6863      	ldr	r3, [r4, #4]
 8003252:	68a5      	ldr	r5, [r4, #8]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	9b00      	ldr	r3, [sp, #0]
 8003258:	3b01      	subs	r3, #1
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	d501      	bpl.n	8003262 <_fwalk_reent+0x26>
 800325e:	6824      	ldr	r4, [r4, #0]
 8003260:	e7f2      	b.n	8003248 <_fwalk_reent+0xc>
 8003262:	89ab      	ldrh	r3, [r5, #12]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d908      	bls.n	800327a <_fwalk_reent+0x3e>
 8003268:	220e      	movs	r2, #14
 800326a:	5eab      	ldrsh	r3, [r5, r2]
 800326c:	3301      	adds	r3, #1
 800326e:	d004      	beq.n	800327a <_fwalk_reent+0x3e>
 8003270:	0029      	movs	r1, r5
 8003272:	0038      	movs	r0, r7
 8003274:	9b01      	ldr	r3, [sp, #4]
 8003276:	4798      	blx	r3
 8003278:	4306      	orrs	r6, r0
 800327a:	3568      	adds	r5, #104	; 0x68
 800327c:	e7eb      	b.n	8003256 <_fwalk_reent+0x1a>
	...

08003280 <__swhatbuf_r>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	000e      	movs	r6, r1
 8003284:	001d      	movs	r5, r3
 8003286:	230e      	movs	r3, #14
 8003288:	5ec9      	ldrsh	r1, [r1, r3]
 800328a:	b096      	sub	sp, #88	; 0x58
 800328c:	0014      	movs	r4, r2
 800328e:	2900      	cmp	r1, #0
 8003290:	da07      	bge.n	80032a2 <__swhatbuf_r+0x22>
 8003292:	2300      	movs	r3, #0
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	89b3      	ldrh	r3, [r6, #12]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	d411      	bmi.n	80032c0 <__swhatbuf_r+0x40>
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	e00f      	b.n	80032c2 <__swhatbuf_r+0x42>
 80032a2:	466a      	mov	r2, sp
 80032a4:	f000 f984 	bl	80035b0 <_fstat_r>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	dbf2      	blt.n	8003292 <__swhatbuf_r+0x12>
 80032ac:	22f0      	movs	r2, #240	; 0xf0
 80032ae:	9b01      	ldr	r3, [sp, #4]
 80032b0:	0212      	lsls	r2, r2, #8
 80032b2:	4013      	ands	r3, r2
 80032b4:	4a05      	ldr	r2, [pc, #20]	; (80032cc <__swhatbuf_r+0x4c>)
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	425a      	negs	r2, r3
 80032ba:	4153      	adcs	r3, r2
 80032bc:	602b      	str	r3, [r5, #0]
 80032be:	e7ed      	b.n	800329c <__swhatbuf_r+0x1c>
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	2000      	movs	r0, #0
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	b016      	add	sp, #88	; 0x58
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	ffffe000 	.word	0xffffe000

080032d0 <__smakebuf_r>:
 80032d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032d2:	2602      	movs	r6, #2
 80032d4:	898b      	ldrh	r3, [r1, #12]
 80032d6:	0005      	movs	r5, r0
 80032d8:	000c      	movs	r4, r1
 80032da:	4233      	tst	r3, r6
 80032dc:	d006      	beq.n	80032ec <__smakebuf_r+0x1c>
 80032de:	0023      	movs	r3, r4
 80032e0:	3347      	adds	r3, #71	; 0x47
 80032e2:	6023      	str	r3, [r4, #0]
 80032e4:	6123      	str	r3, [r4, #16]
 80032e6:	2301      	movs	r3, #1
 80032e8:	6163      	str	r3, [r4, #20]
 80032ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80032ec:	ab01      	add	r3, sp, #4
 80032ee:	466a      	mov	r2, sp
 80032f0:	f7ff ffc6 	bl	8003280 <__swhatbuf_r>
 80032f4:	9900      	ldr	r1, [sp, #0]
 80032f6:	0007      	movs	r7, r0
 80032f8:	0028      	movs	r0, r5
 80032fa:	f000 f877 	bl	80033ec <_malloc_r>
 80032fe:	2800      	cmp	r0, #0
 8003300:	d108      	bne.n	8003314 <__smakebuf_r+0x44>
 8003302:	220c      	movs	r2, #12
 8003304:	5ea3      	ldrsh	r3, [r4, r2]
 8003306:	059a      	lsls	r2, r3, #22
 8003308:	d4ef      	bmi.n	80032ea <__smakebuf_r+0x1a>
 800330a:	2203      	movs	r2, #3
 800330c:	4393      	bics	r3, r2
 800330e:	431e      	orrs	r6, r3
 8003310:	81a6      	strh	r6, [r4, #12]
 8003312:	e7e4      	b.n	80032de <__smakebuf_r+0xe>
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <__smakebuf_r+0x84>)
 8003316:	62ab      	str	r3, [r5, #40]	; 0x28
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	89a2      	ldrh	r2, [r4, #12]
 800331c:	6020      	str	r0, [r4, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	81a3      	strh	r3, [r4, #12]
 8003322:	9b00      	ldr	r3, [sp, #0]
 8003324:	6120      	str	r0, [r4, #16]
 8003326:	6163      	str	r3, [r4, #20]
 8003328:	9b01      	ldr	r3, [sp, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <__smakebuf_r+0x7a>
 800332e:	230e      	movs	r3, #14
 8003330:	5ee1      	ldrsh	r1, [r4, r3]
 8003332:	0028      	movs	r0, r5
 8003334:	f000 f94e 	bl	80035d4 <_isatty_r>
 8003338:	2800      	cmp	r0, #0
 800333a:	d006      	beq.n	800334a <__smakebuf_r+0x7a>
 800333c:	2203      	movs	r2, #3
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	4393      	bics	r3, r2
 8003342:	001a      	movs	r2, r3
 8003344:	2301      	movs	r3, #1
 8003346:	4313      	orrs	r3, r2
 8003348:	81a3      	strh	r3, [r4, #12]
 800334a:	89a0      	ldrh	r0, [r4, #12]
 800334c:	4338      	orrs	r0, r7
 800334e:	81a0      	strh	r0, [r4, #12]
 8003350:	e7cb      	b.n	80032ea <__smakebuf_r+0x1a>
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	0800311d 	.word	0x0800311d

08003358 <_free_r>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	0005      	movs	r5, r0
 800335c:	2900      	cmp	r1, #0
 800335e:	d010      	beq.n	8003382 <_free_r+0x2a>
 8003360:	1f0c      	subs	r4, r1, #4
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	da00      	bge.n	800336a <_free_r+0x12>
 8003368:	18e4      	adds	r4, r4, r3
 800336a:	0028      	movs	r0, r5
 800336c:	f000 f958 	bl	8003620 <__malloc_lock>
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <_free_r+0x90>)
 8003372:	6813      	ldr	r3, [r2, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <_free_r+0x2c>
 8003378:	6063      	str	r3, [r4, #4]
 800337a:	6014      	str	r4, [r2, #0]
 800337c:	0028      	movs	r0, r5
 800337e:	f000 f950 	bl	8003622 <__malloc_unlock>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	42a3      	cmp	r3, r4
 8003386:	d909      	bls.n	800339c <_free_r+0x44>
 8003388:	6821      	ldr	r1, [r4, #0]
 800338a:	1860      	adds	r0, r4, r1
 800338c:	4283      	cmp	r3, r0
 800338e:	d1f3      	bne.n	8003378 <_free_r+0x20>
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	1841      	adds	r1, r0, r1
 8003396:	6021      	str	r1, [r4, #0]
 8003398:	e7ee      	b.n	8003378 <_free_r+0x20>
 800339a:	0013      	movs	r3, r2
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	2a00      	cmp	r2, #0
 80033a0:	d001      	beq.n	80033a6 <_free_r+0x4e>
 80033a2:	42a2      	cmp	r2, r4
 80033a4:	d9f9      	bls.n	800339a <_free_r+0x42>
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	1858      	adds	r0, r3, r1
 80033aa:	42a0      	cmp	r0, r4
 80033ac:	d10b      	bne.n	80033c6 <_free_r+0x6e>
 80033ae:	6820      	ldr	r0, [r4, #0]
 80033b0:	1809      	adds	r1, r1, r0
 80033b2:	1858      	adds	r0, r3, r1
 80033b4:	6019      	str	r1, [r3, #0]
 80033b6:	4282      	cmp	r2, r0
 80033b8:	d1e0      	bne.n	800337c <_free_r+0x24>
 80033ba:	6810      	ldr	r0, [r2, #0]
 80033bc:	6852      	ldr	r2, [r2, #4]
 80033be:	1841      	adds	r1, r0, r1
 80033c0:	6019      	str	r1, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	e7da      	b.n	800337c <_free_r+0x24>
 80033c6:	42a0      	cmp	r0, r4
 80033c8:	d902      	bls.n	80033d0 <_free_r+0x78>
 80033ca:	230c      	movs	r3, #12
 80033cc:	602b      	str	r3, [r5, #0]
 80033ce:	e7d5      	b.n	800337c <_free_r+0x24>
 80033d0:	6821      	ldr	r1, [r4, #0]
 80033d2:	1860      	adds	r0, r4, r1
 80033d4:	4282      	cmp	r2, r0
 80033d6:	d103      	bne.n	80033e0 <_free_r+0x88>
 80033d8:	6810      	ldr	r0, [r2, #0]
 80033da:	6852      	ldr	r2, [r2, #4]
 80033dc:	1841      	adds	r1, r0, r1
 80033de:	6021      	str	r1, [r4, #0]
 80033e0:	6062      	str	r2, [r4, #4]
 80033e2:	605c      	str	r4, [r3, #4]
 80033e4:	e7ca      	b.n	800337c <_free_r+0x24>
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	2000009c 	.word	0x2000009c

080033ec <_malloc_r>:
 80033ec:	2303      	movs	r3, #3
 80033ee:	b570      	push	{r4, r5, r6, lr}
 80033f0:	1ccd      	adds	r5, r1, #3
 80033f2:	439d      	bics	r5, r3
 80033f4:	3508      	adds	r5, #8
 80033f6:	0006      	movs	r6, r0
 80033f8:	2d0c      	cmp	r5, #12
 80033fa:	d21e      	bcs.n	800343a <_malloc_r+0x4e>
 80033fc:	250c      	movs	r5, #12
 80033fe:	42a9      	cmp	r1, r5
 8003400:	d81d      	bhi.n	800343e <_malloc_r+0x52>
 8003402:	0030      	movs	r0, r6
 8003404:	f000 f90c 	bl	8003620 <__malloc_lock>
 8003408:	4a25      	ldr	r2, [pc, #148]	; (80034a0 <_malloc_r+0xb4>)
 800340a:	6814      	ldr	r4, [r2, #0]
 800340c:	0021      	movs	r1, r4
 800340e:	2900      	cmp	r1, #0
 8003410:	d119      	bne.n	8003446 <_malloc_r+0x5a>
 8003412:	4c24      	ldr	r4, [pc, #144]	; (80034a4 <_malloc_r+0xb8>)
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <_malloc_r+0x36>
 800341a:	0030      	movs	r0, r6
 800341c:	f000 f844 	bl	80034a8 <_sbrk_r>
 8003420:	6020      	str	r0, [r4, #0]
 8003422:	0029      	movs	r1, r5
 8003424:	0030      	movs	r0, r6
 8003426:	f000 f83f 	bl	80034a8 <_sbrk_r>
 800342a:	1c43      	adds	r3, r0, #1
 800342c:	d12b      	bne.n	8003486 <_malloc_r+0x9a>
 800342e:	230c      	movs	r3, #12
 8003430:	0030      	movs	r0, r6
 8003432:	6033      	str	r3, [r6, #0]
 8003434:	f000 f8f5 	bl	8003622 <__malloc_unlock>
 8003438:	e003      	b.n	8003442 <_malloc_r+0x56>
 800343a:	2d00      	cmp	r5, #0
 800343c:	dadf      	bge.n	80033fe <_malloc_r+0x12>
 800343e:	230c      	movs	r3, #12
 8003440:	6033      	str	r3, [r6, #0]
 8003442:	2000      	movs	r0, #0
 8003444:	bd70      	pop	{r4, r5, r6, pc}
 8003446:	680b      	ldr	r3, [r1, #0]
 8003448:	1b5b      	subs	r3, r3, r5
 800344a:	d419      	bmi.n	8003480 <_malloc_r+0x94>
 800344c:	2b0b      	cmp	r3, #11
 800344e:	d903      	bls.n	8003458 <_malloc_r+0x6c>
 8003450:	600b      	str	r3, [r1, #0]
 8003452:	18cc      	adds	r4, r1, r3
 8003454:	6025      	str	r5, [r4, #0]
 8003456:	e003      	b.n	8003460 <_malloc_r+0x74>
 8003458:	684b      	ldr	r3, [r1, #4]
 800345a:	428c      	cmp	r4, r1
 800345c:	d10d      	bne.n	800347a <_malloc_r+0x8e>
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	0030      	movs	r0, r6
 8003462:	f000 f8de 	bl	8003622 <__malloc_unlock>
 8003466:	0020      	movs	r0, r4
 8003468:	2207      	movs	r2, #7
 800346a:	300b      	adds	r0, #11
 800346c:	1d23      	adds	r3, r4, #4
 800346e:	4390      	bics	r0, r2
 8003470:	1ac3      	subs	r3, r0, r3
 8003472:	d0e7      	beq.n	8003444 <_malloc_r+0x58>
 8003474:	425a      	negs	r2, r3
 8003476:	50e2      	str	r2, [r4, r3]
 8003478:	e7e4      	b.n	8003444 <_malloc_r+0x58>
 800347a:	6063      	str	r3, [r4, #4]
 800347c:	000c      	movs	r4, r1
 800347e:	e7ef      	b.n	8003460 <_malloc_r+0x74>
 8003480:	000c      	movs	r4, r1
 8003482:	6849      	ldr	r1, [r1, #4]
 8003484:	e7c3      	b.n	800340e <_malloc_r+0x22>
 8003486:	2303      	movs	r3, #3
 8003488:	1cc4      	adds	r4, r0, #3
 800348a:	439c      	bics	r4, r3
 800348c:	42a0      	cmp	r0, r4
 800348e:	d0e1      	beq.n	8003454 <_malloc_r+0x68>
 8003490:	1a21      	subs	r1, r4, r0
 8003492:	0030      	movs	r0, r6
 8003494:	f000 f808 	bl	80034a8 <_sbrk_r>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d1db      	bne.n	8003454 <_malloc_r+0x68>
 800349c:	e7c7      	b.n	800342e <_malloc_r+0x42>
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	2000009c 	.word	0x2000009c
 80034a4:	200000a0 	.word	0x200000a0

080034a8 <_sbrk_r>:
 80034a8:	2300      	movs	r3, #0
 80034aa:	b570      	push	{r4, r5, r6, lr}
 80034ac:	4c06      	ldr	r4, [pc, #24]	; (80034c8 <_sbrk_r+0x20>)
 80034ae:	0005      	movs	r5, r0
 80034b0:	0008      	movs	r0, r1
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	f7fd f9a2 	bl	80007fc <_sbrk>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d103      	bne.n	80034c4 <_sbrk_r+0x1c>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d000      	beq.n	80034c4 <_sbrk_r+0x1c>
 80034c2:	602b      	str	r3, [r5, #0]
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	2000051c 	.word	0x2000051c

080034cc <__sread>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	000c      	movs	r4, r1
 80034d0:	250e      	movs	r5, #14
 80034d2:	5f49      	ldrsh	r1, [r1, r5]
 80034d4:	f000 f8a6 	bl	8003624 <_read_r>
 80034d8:	2800      	cmp	r0, #0
 80034da:	db03      	blt.n	80034e4 <__sread+0x18>
 80034dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034de:	181b      	adds	r3, r3, r0
 80034e0:	6563      	str	r3, [r4, #84]	; 0x54
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	4a02      	ldr	r2, [pc, #8]	; (80034f0 <__sread+0x24>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	81a3      	strh	r3, [r4, #12]
 80034ec:	e7f9      	b.n	80034e2 <__sread+0x16>
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	ffffefff 	.word	0xffffefff

080034f4 <__swrite>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	001f      	movs	r7, r3
 80034f8:	898b      	ldrh	r3, [r1, #12]
 80034fa:	0005      	movs	r5, r0
 80034fc:	000c      	movs	r4, r1
 80034fe:	0016      	movs	r6, r2
 8003500:	05db      	lsls	r3, r3, #23
 8003502:	d505      	bpl.n	8003510 <__swrite+0x1c>
 8003504:	230e      	movs	r3, #14
 8003506:	5ec9      	ldrsh	r1, [r1, r3]
 8003508:	2200      	movs	r2, #0
 800350a:	2302      	movs	r3, #2
 800350c:	f000 f874 	bl	80035f8 <_lseek_r>
 8003510:	89a3      	ldrh	r3, [r4, #12]
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <__swrite+0x34>)
 8003514:	0028      	movs	r0, r5
 8003516:	4013      	ands	r3, r2
 8003518:	81a3      	strh	r3, [r4, #12]
 800351a:	0032      	movs	r2, r6
 800351c:	230e      	movs	r3, #14
 800351e:	5ee1      	ldrsh	r1, [r4, r3]
 8003520:	003b      	movs	r3, r7
 8003522:	f000 f81f 	bl	8003564 <_write_r>
 8003526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003528:	ffffefff 	.word	0xffffefff

0800352c <__sseek>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	000c      	movs	r4, r1
 8003530:	250e      	movs	r5, #14
 8003532:	5f49      	ldrsh	r1, [r1, r5]
 8003534:	f000 f860 	bl	80035f8 <_lseek_r>
 8003538:	89a3      	ldrh	r3, [r4, #12]
 800353a:	1c42      	adds	r2, r0, #1
 800353c:	d103      	bne.n	8003546 <__sseek+0x1a>
 800353e:	4a05      	ldr	r2, [pc, #20]	; (8003554 <__sseek+0x28>)
 8003540:	4013      	ands	r3, r2
 8003542:	81a3      	strh	r3, [r4, #12]
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	0152      	lsls	r2, r2, #5
 800354a:	4313      	orrs	r3, r2
 800354c:	81a3      	strh	r3, [r4, #12]
 800354e:	6560      	str	r0, [r4, #84]	; 0x54
 8003550:	e7f8      	b.n	8003544 <__sseek+0x18>
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	ffffefff 	.word	0xffffefff

08003558 <__sclose>:
 8003558:	b510      	push	{r4, lr}
 800355a:	230e      	movs	r3, #14
 800355c:	5ec9      	ldrsh	r1, [r1, r3]
 800355e:	f000 f815 	bl	800358c <_close_r>
 8003562:	bd10      	pop	{r4, pc}

08003564 <_write_r>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	0005      	movs	r5, r0
 8003568:	0008      	movs	r0, r1
 800356a:	0011      	movs	r1, r2
 800356c:	2200      	movs	r2, #0
 800356e:	4c06      	ldr	r4, [pc, #24]	; (8003588 <_write_r+0x24>)
 8003570:	6022      	str	r2, [r4, #0]
 8003572:	001a      	movs	r2, r3
 8003574:	f7fd f8f9 	bl	800076a <_write>
 8003578:	1c43      	adds	r3, r0, #1
 800357a:	d103      	bne.n	8003584 <_write_r+0x20>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d000      	beq.n	8003584 <_write_r+0x20>
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	2000051c 	.word	0x2000051c

0800358c <_close_r>:
 800358c:	2300      	movs	r3, #0
 800358e:	b570      	push	{r4, r5, r6, lr}
 8003590:	4c06      	ldr	r4, [pc, #24]	; (80035ac <_close_r+0x20>)
 8003592:	0005      	movs	r5, r0
 8003594:	0008      	movs	r0, r1
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	f7fd f903 	bl	80007a2 <_close>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d103      	bne.n	80035a8 <_close_r+0x1c>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d000      	beq.n	80035a8 <_close_r+0x1c>
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	2000051c 	.word	0x2000051c

080035b0 <_fstat_r>:
 80035b0:	2300      	movs	r3, #0
 80035b2:	b570      	push	{r4, r5, r6, lr}
 80035b4:	4c06      	ldr	r4, [pc, #24]	; (80035d0 <_fstat_r+0x20>)
 80035b6:	0005      	movs	r5, r0
 80035b8:	0008      	movs	r0, r1
 80035ba:	0011      	movs	r1, r2
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	f7fd f8fa 	bl	80007b6 <_fstat>
 80035c2:	1c43      	adds	r3, r0, #1
 80035c4:	d103      	bne.n	80035ce <_fstat_r+0x1e>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d000      	beq.n	80035ce <_fstat_r+0x1e>
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	2000051c 	.word	0x2000051c

080035d4 <_isatty_r>:
 80035d4:	2300      	movs	r3, #0
 80035d6:	b570      	push	{r4, r5, r6, lr}
 80035d8:	4c06      	ldr	r4, [pc, #24]	; (80035f4 <_isatty_r+0x20>)
 80035da:	0005      	movs	r5, r0
 80035dc:	0008      	movs	r0, r1
 80035de:	6023      	str	r3, [r4, #0]
 80035e0:	f7fd f8f7 	bl	80007d2 <_isatty>
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	d103      	bne.n	80035f0 <_isatty_r+0x1c>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d000      	beq.n	80035f0 <_isatty_r+0x1c>
 80035ee:	602b      	str	r3, [r5, #0]
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	2000051c 	.word	0x2000051c

080035f8 <_lseek_r>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	0005      	movs	r5, r0
 80035fc:	0008      	movs	r0, r1
 80035fe:	0011      	movs	r1, r2
 8003600:	2200      	movs	r2, #0
 8003602:	4c06      	ldr	r4, [pc, #24]	; (800361c <_lseek_r+0x24>)
 8003604:	6022      	str	r2, [r4, #0]
 8003606:	001a      	movs	r2, r3
 8003608:	f7fd f8ec 	bl	80007e4 <_lseek>
 800360c:	1c43      	adds	r3, r0, #1
 800360e:	d103      	bne.n	8003618 <_lseek_r+0x20>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d000      	beq.n	8003618 <_lseek_r+0x20>
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	2000051c 	.word	0x2000051c

08003620 <__malloc_lock>:
 8003620:	4770      	bx	lr

08003622 <__malloc_unlock>:
 8003622:	4770      	bx	lr

08003624 <_read_r>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	0005      	movs	r5, r0
 8003628:	0008      	movs	r0, r1
 800362a:	0011      	movs	r1, r2
 800362c:	2200      	movs	r2, #0
 800362e:	4c06      	ldr	r4, [pc, #24]	; (8003648 <_read_r+0x24>)
 8003630:	6022      	str	r2, [r4, #0]
 8003632:	001a      	movs	r2, r3
 8003634:	f7fd f87c 	bl	8000730 <_read>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d103      	bne.n	8003644 <_read_r+0x20>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d000      	beq.n	8003644 <_read_r+0x20>
 8003642:	602b      	str	r3, [r5, #0]
 8003644:	bd70      	pop	{r4, r5, r6, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	2000051c 	.word	0x2000051c

0800364c <_init>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr

08003658 <_fini>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr
