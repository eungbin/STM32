
iot01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8ac  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c148  0800ba70  0800ba70  0001ba70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017bb8  08017bb8  0003098c  2**0
                  CONTENTS
  4 .ARM          00000008  08017bb8  08017bb8  00027bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017bc0  08017bc0  0003098c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017bc0  08017bc0  00027bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017bc4  08017bc4  00027bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000098c  20000000  08017bc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  2000098c  08018554  0003098c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001318  08018554  00031318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003098c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bc3  00000000  00000000  000309bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000304f  00000000  00000000  0005357f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f0  00000000  00000000  000565d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001868  00000000  00000000  00057fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002dd7d  00000000  00000000  00059828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010aae  00000000  00000000  000875a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00116b15  00000000  00000000  00098053  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aeb68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bfc  00000000  00000000  001aebe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000098c 	.word	0x2000098c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ba54 	.word	0x0800ba54

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000990 	.word	0x20000990
 80001fc:	0800ba54 	.word	0x0800ba54

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <BSP_I2C2_Init+0x70>)
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <BSP_I2C2_Init+0x74>)
 8000f86:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <BSP_I2C2_Init+0x78>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	4918      	ldr	r1, [pc, #96]	; (8000ff0 <BSP_I2C2_Init+0x78>)
 8000f90:	600a      	str	r2, [r1, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d122      	bne.n	8000fdc <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000f96:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <BSP_I2C2_Init+0x70>)
 8000f98:	f002 fe5e 	bl	8003c58 <HAL_I2C_GetState>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d11c      	bne.n	8000fdc <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000fa2:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <BSP_I2C2_Init+0x70>)
 8000fa4:	f000 f8fe 	bl	80011a4 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <BSP_I2C2_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <BSP_I2C2_Init+0x70>)
 8000fb0:	f000 f8b4 	bl	800111c <MX_I2C2_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <BSP_I2C2_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8000fba:	f06f 0307 	mvn.w	r3, #7
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	e00c      	b.n	8000fdc <BSP_I2C2_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <BSP_I2C2_Init+0x70>)
 8000fc6:	f003 f87d 	bl	80040c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <BSP_I2C2_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8000fd0:	f06f 0307 	mvn.w	r3, #7
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	e001      	b.n	8000fdc <BSP_I2C2_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000a58 	.word	0x20000a58
 8000fec:	40005800 	.word	0x40005800
 8000ff0:	200009a8 	.word	0x200009a8

08000ff4 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <BSP_I2C2_DeInit+0x48>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d014      	beq.n	8001030 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <BSP_I2C2_DeInit+0x48>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3b01      	subs	r3, #1
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <BSP_I2C2_DeInit+0x48>)
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <BSP_I2C2_DeInit+0x48>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10b      	bne.n	8001030 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <BSP_I2C2_DeInit+0x4c>)
 800101a:	f000 f909 	bl	8001230 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 800101e:	4808      	ldr	r0, [pc, #32]	; (8001040 <BSP_I2C2_DeInit+0x4c>)
 8001020:	f002 fba9 	bl	8003776 <HAL_I2C_DeInit>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800102a:	f06f 0307 	mvn.w	r3, #7
 800102e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200009a8 	.word	0x200009a8
 8001040:	20000a58 	.word	0x20000a58

08001044 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af04      	add	r7, sp, #16
 800104a:	60ba      	str	r2, [r7, #8]
 800104c:	461a      	mov	r2, r3
 800104e:	4603      	mov	r3, r0
 8001050:	81fb      	strh	r3, [r7, #14]
 8001052:	460b      	mov	r3, r1
 8001054:	81bb      	strh	r3, [r7, #12]
 8001056:	4613      	mov	r3, r2
 8001058:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 800105e:	89ba      	ldrh	r2, [r7, #12]
 8001060:	89f9      	ldrh	r1, [r7, #14]
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <BSP_I2C2_WriteReg+0x60>)
 8001074:	f002 fbc2 	bl	80037fc <HAL_I2C_Mem_Write>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00c      	beq.n	8001098 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800107e:	4809      	ldr	r0, [pc, #36]	; (80010a4 <BSP_I2C2_WriteReg+0x60>)
 8001080:	f002 fdf8 	bl	8003c74 <HAL_I2C_GetError>
 8001084:	4603      	mov	r3, r0
 8001086:	2b04      	cmp	r3, #4
 8001088:	d103      	bne.n	8001092 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800108a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e002      	b.n	8001098 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001092:	f06f 0303 	mvn.w	r3, #3
 8001096:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001098:	697b      	ldr	r3, [r7, #20]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000a58 	.word	0x20000a58

080010a8 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	60ba      	str	r2, [r7, #8]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4603      	mov	r3, r0
 80010b4:	81fb      	strh	r3, [r7, #14]
 80010b6:	460b      	mov	r3, r1
 80010b8:	81bb      	strh	r3, [r7, #12]
 80010ba:	4613      	mov	r3, r2
 80010bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80010c2:	89ba      	ldrh	r2, [r7, #12]
 80010c4:	89f9      	ldrh	r1, [r7, #14]
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <BSP_I2C2_ReadReg+0x60>)
 80010d8:	f002 fca4 	bl	8003a24 <HAL_I2C_Mem_Read>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00c      	beq.n	80010fc <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <BSP_I2C2_ReadReg+0x60>)
 80010e4:	f002 fdc6 	bl	8003c74 <HAL_I2C_GetError>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d103      	bne.n	80010f6 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80010ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e002      	b.n	80010fc <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80010f6:	f06f 0303 	mvn.w	r3, #3
 80010fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80010fc:	697b      	ldr	r3, [r7, #20]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000a58 	.word	0x20000a58

0800110c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001110:	f001 fde6 	bl	8002ce0 <HAL_GetTick>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C2;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <MX_I2C2_Init+0x80>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00B03FDB;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <MX_I2C2_Init+0x84>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f002 fa7a 	bl	8003658 <HAL_I2C_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f002 ffa7 	bl	80040c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f002 ffe9 	bl	800415a <HAL_I2CEx_ConfigDigitalFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40005800 	.word	0x40005800
 80011a0:	00b03fdb 	.word	0x00b03fdb

080011a4 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <I2C2_MspInit+0x84>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <I2C2_MspInit+0x84>)
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <I2C2_MspInit+0x84>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80011c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ca:	2312      	movs	r3, #18
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80011d6:	2304      	movs	r3, #4
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4812      	ldr	r0, [pc, #72]	; (800122c <I2C2_MspInit+0x88>)
 80011e2:	f001 ff85 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 80011e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 80011f8:	2304      	movs	r3, #4
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480a      	ldr	r0, [pc, #40]	; (800122c <I2C2_MspInit+0x88>)
 8001204:	f001 ff74 	bl	80030f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <I2C2_MspInit+0x84>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <I2C2_MspInit+0x84>)
 800120e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001212:	6593      	str	r3, [r2, #88]	; 0x58
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <I2C2_MspInit+0x84>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400

08001230 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <I2C2_MspDeInit+0x30>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	4a08      	ldr	r2, [pc, #32]	; (8001260 <I2C2_MspDeInit+0x30>)
 800123e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001242:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001248:	4806      	ldr	r0, [pc, #24]	; (8001264 <I2C2_MspDeInit+0x34>)
 800124a:	f002 f8e3 	bl	8003414 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 800124e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <I2C2_MspDeInit+0x34>)
 8001254:	f002 f8de 	bl	8003414 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	48000400 	.word	0x48000400

08001268 <__io_putchar>:
	HAL_Delay(interval);
}

extern UART_HandleTypeDef huart1;

int __io_putchar(int ch) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000)) {
 8001270:	bf00      	nop
 8001272:	1d39      	adds	r1, r7, #4
 8001274:	f247 5330 	movw	r3, #30000	; 0x7530
 8001278:	2201      	movs	r2, #1
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <__io_putchar+0x28>)
 800127c:	f004 fcac 	bl	8005bd8 <HAL_UART_Transmit>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f5      	bne.n	8001272 <__io_putchar+0xa>

	}
	return ch;
 8001286:	687b      	ldr	r3, [r7, #4]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20001148 	.word	0x20001148

08001294 <__io_getchar>:

int __io_getchar(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	71fb      	strb	r3, [r7, #7]
	while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 30000)) {
 800129e:	bf00      	nop
 80012a0:	1df9      	adds	r1, r7, #7
 80012a2:	f247 5330 	movw	r3, #30000	; 0x7530
 80012a6:	2201      	movs	r2, #1
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <__io_getchar+0x2c>)
 80012aa:	f004 fd2c 	bl	8005d06 <HAL_UART_Receive>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f5      	bne.n	80012a0 <__io_getchar+0xc>

	}
	return ch;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20001148 	.word	0x20001148

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ca:	f001 fca0 	bl	8002c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ce:	f000 f899 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d2:	f000 f97d 	bl	80015d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012d6:	f000 f92f 	bl	8001538 <MX_USART1_UART_Init>
  MX_CRC_Init();
 80012da:	f000 f90b 	bl	80014f4 <MX_CRC_Init>
//  	  buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
//  	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
//  	  while(1);
//    }

  dataRdyIntReceived = 0;
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <main+0x118>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 80012e4:	f000 faf0 	bl	80018c8 <MEMS_Init>
  AI_Init(ai_network_data_weights_get(), activations);
 80012e8:	f005 fca0 	bl	8006c2c <ai_network_data_weights_get>
 80012ec:	4603      	mov	r3, r0
 80012ee:	493c      	ldr	r1, [pc, #240]	; (80013e0 <main+0x11c>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fa03 	bl	80016fc <AI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  float f = 0.01;
  uint32_t write_index = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
//
//	  	  buf_len = sprintf(buf, "Output: %f \r\n", y_val);
//	  	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
//
//	  	  HAL_Delay(500);
	  if (dataRdyIntReceived != 0) {
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <main+0x118>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0fb      	beq.n	80012fa <main+0x36>
		  dataRdyIntReceived = 0;
 8001302:	4b36      	ldr	r3, [pc, #216]	; (80013dc <main+0x118>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
		  LSM6DSL_Axes_t acc_axes;
		  LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4835      	ldr	r0, [pc, #212]	; (80013e4 <main+0x120>)
 800130e:	f000 fec7 	bl	80020a0 <LSM6DSL_ACC_GetAxes>
		  aiInData[write_index + 0] = (float)acc_axes.x / 4000.0f;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131c:	eddf 6a32 	vldr	s13, [pc, #200]	; 80013e8 <main+0x124>
 8001320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001324:	4a31      	ldr	r2, [pc, #196]	; (80013ec <main+0x128>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	edc3 7a00 	vstr	s15, [r3]
		  aiInData[write_index + 1] = (float)acc_axes.y / 4000.0f;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80013e8 <main+0x124>
 8001342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <main+0x128>)
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	edc3 7a00 	vstr	s15, [r3]
		  aiInData[write_index + 2] = (float)acc_axes.z / 4000.0f;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3302      	adds	r3, #2
 800135e:	eddf 6a22 	vldr	s13, [pc, #136]	; 80013e8 <main+0x124>
 8001362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001366:	4a21      	ldr	r2, [pc, #132]	; (80013ec <main+0x128>)
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	edc3 7a00 	vstr	s15, [r3]
		  write_index += 3;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3303      	adds	r3, #3
 8001374:	617b      	str	r3, [r7, #20]

		  if(write_index == AI_NETWORK_IN_1_SIZE) {
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b4e      	cmp	r3, #78	; 0x4e
 800137a:	d1be      	bne.n	80012fa <main+0x36>
			  write_index = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

			  printf("Running inference\r\n");
 8001380:	481b      	ldr	r0, [pc, #108]	; (80013f0 <main+0x12c>)
 8001382:	f008 fc0b 	bl	8009b9c <puts>
			  AI_Run(aiInData, aiOutData);
 8001386:	491b      	ldr	r1, [pc, #108]	; (80013f4 <main+0x130>)
 8001388:	4818      	ldr	r0, [pc, #96]	; (80013ec <main+0x128>)
 800138a:	f000 fa1f 	bl	80017cc <AI_Run>

			  for (uint32_t i=0; i<AI_NETWORK_OUT_1_SIZE; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	e011      	b.n	80013b8 <main+0xf4>
				  printf("%8.6f ", aiOutData[i]);
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <main+0x130>)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8ea 	bl	8000578 <__aeabi_f2d>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	461a      	mov	r2, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	4812      	ldr	r0, [pc, #72]	; (80013f8 <main+0x134>)
 80013ae:	f008 fb81 	bl	8009ab4 <iprintf>
			  for (uint32_t i=0; i<AI_NETWORK_OUT_1_SIZE; i++) {
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	3301      	adds	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d9ea      	bls.n	8001394 <main+0xd0>
			  }
			  uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 80013be:	2103      	movs	r1, #3
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <main+0x130>)
 80013c2:	f000 fa51 	bl	8001868 <argmax>
 80013c6:	60f8      	str	r0, [r7, #12]
			  printf(": %d - %s\r\n", (int)class, activities[class]);
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <main+0x138>)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	461a      	mov	r2, r3
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <main+0x13c>)
 80013d6:	f008 fb6d 	bl	8009ab4 <iprintf>
	  if (dataRdyIntReceived != 0) {
 80013da:	e78e      	b.n	80012fa <main+0x36>
 80013dc:	20000ad4 	.word	0x20000ad4
 80013e0:	20000ad8 	.word	0x20000ad8
 80013e4:	20001118 	.word	0x20001118
 80013e8:	457a0000 	.word	0x457a0000
 80013ec:	200011d4 	.word	0x200011d4
 80013f0:	0800ba8c 	.word	0x0800ba8c
 80013f4:	20000ac8 	.word	0x20000ac8
 80013f8:	0800baa0 	.word	0x0800baa0
 80013fc:	20000000 	.word	0x20000000
 8001400:	0800baa8 	.word	0x0800baa8

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0bc      	sub	sp, #240	; 0xf0
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800140e:	2244      	movs	r2, #68	; 0x44
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f007 fe41 	bl	800909a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2294      	movs	r2, #148	; 0x94
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f007 fe33 	bl	800909a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001434:	2000      	movs	r0, #0
 8001436:	f002 fefd 	bl	8004234 <HAL_PWREx_ControlVoltageScaling>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001440:	f000 fab0 	bl	80019a4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001444:	2310      	movs	r3, #16
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800144a:	2301      	movs	r3, #1
 800144c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001456:	2360      	movs	r3, #96	; 0x60
 8001458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001462:	2301      	movs	r3, #1
 8001464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001468:	2301      	movs	r3, #1
 800146a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 800146e:	233c      	movs	r3, #60	; 0x3c
 8001470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001474:	2302      	movs	r3, #2
 8001476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001486:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800148a:	4618      	mov	r0, r3
 800148c:	f002 ff76 	bl	800437c <HAL_RCC_OscConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001496:	f000 fa85 	bl	80019a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149a:	230f      	movs	r3, #15
 800149c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014bc:	2105      	movs	r1, #5
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 fb82 	bl	8004bc8 <HAL_RCC_ClockConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80014ca:	f000 fa6b 	bl	80019a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 80014ce:	2381      	movs	r3, #129	; 0x81
 80014d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014d2:	2300      	movs	r3, #0
 80014d4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fe23 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80014e8:	f000 fa5c 	bl	80019a4 <Error_Handler>
  }
}
 80014ec:	bf00      	nop
 80014ee:	37f0      	adds	r7, #240	; 0xf0
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_CRC_Init+0x3c>)
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <MX_CRC_Init+0x40>)
 80014fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_CRC_Init+0x3c>)
 8001500:	2200      	movs	r2, #0
 8001502:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_CRC_Init+0x3c>)
 8001506:	2200      	movs	r2, #0
 8001508:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_CRC_Init+0x3c>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MX_CRC_Init+0x3c>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_CRC_Init+0x3c>)
 8001518:	2201      	movs	r2, #1
 800151a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_CRC_Init+0x3c>)
 800151e:	f001 fcfd 	bl	8002f1c <HAL_CRC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001528:	f000 fa3c 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000aa4 	.word	0x20000aa4
 8001534:	40023000 	.word	0x40023000

08001538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 800153e:	4a23      	ldr	r2, [pc, #140]	; (80015cc <MX_USART1_UART_Init+0x94>)
 8001540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 8001544:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001580:	4811      	ldr	r0, [pc, #68]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 8001582:	f004 fad9 	bl	8005b38 <HAL_UART_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800158c:	f000 fa0a 	bl	80019a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001590:	2100      	movs	r1, #0
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 8001594:	f005 f8fd 	bl	8006792 <HAL_UARTEx_SetTxFifoThreshold>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800159e:	f000 fa01 	bl	80019a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a2:	2100      	movs	r1, #0
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 80015a6:	f005 f932 	bl	800680e <HAL_UARTEx_SetRxFifoThreshold>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015b0:	f000 f9f8 	bl	80019a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_USART1_UART_Init+0x90>)
 80015b6:	f005 f8b3 	bl	8006720 <HAL_UARTEx_DisableFifoMode>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015c0:	f000 f9f0 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20001148 	.word	0x20001148
 80015cc:	40013800 	.word	0x40013800

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <MX_GPIO_Init+0x118>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	4a3f      	ldr	r2, [pc, #252]	; (80016e8 <MX_GPIO_Init+0x118>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <MX_GPIO_Init+0x118>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <MX_GPIO_Init+0x118>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a39      	ldr	r2, [pc, #228]	; (80016e8 <MX_GPIO_Init+0x118>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <MX_GPIO_Init+0x118>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <MX_GPIO_Init+0x118>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <MX_GPIO_Init+0x118>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <MX_GPIO_Init+0x118>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <MX_GPIO_Init+0x118>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4a2d      	ldr	r2, [pc, #180]	; (80016e8 <MX_GPIO_Init+0x118>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <MX_GPIO_Init+0x118>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(URLED1_GPIO_Port, URLED1_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2108      	movs	r1, #8
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f001 ffd3 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(URLED2_GPIO_Port, URLED2_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001658:	4824      	ldr	r0, [pc, #144]	; (80016ec <MX_GPIO_Init+0x11c>)
 800165a:	f001 ffcd 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : URBTN2_Pin */
  GPIO_InitStruct.Pin = URBTN2_Pin;
 800165e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <MX_GPIO_Init+0x120>)
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(URBTN2_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4820      	ldr	r0, [pc, #128]	; (80016f4 <MX_GPIO_Init+0x124>)
 8001674:	f001 fd3c 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : URLED1_Pin */
  GPIO_InitStruct.Pin = URLED1_Pin;
 8001678:	2308      	movs	r3, #8
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(URLED1_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f001 fd2d 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : URLED2_Pin */
  GPIO_InitStruct.Pin = URLED2_Pin;
 8001696:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(URLED2_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	480f      	ldr	r0, [pc, #60]	; (80016ec <MX_GPIO_Init+0x11c>)
 80016b0:	f001 fd1e 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : URBTN1_Pin */
  GPIO_InitStruct.Pin = URBTN1_Pin;
 80016b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <MX_GPIO_Init+0x120>)
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(URBTN1_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <MX_GPIO_Init+0x128>)
 80016ca:	f001 fd11 	bl	80030f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 9, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2109      	movs	r1, #9
 80016d2:	2028      	movs	r0, #40	; 0x28
 80016d4:	f001 fbeb 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d8:	2028      	movs	r0, #40	; 0x28
 80016da:	f001 fc04 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400
 80016f0:	10110000 	.word	0x10110000
 80016f4:	48000800 	.word	0x48000800
 80016f8:	48000c00 	.word	0x48000c00

080016fc <AI_Init>:

/* USER CODE BEGIN 4 */
static void AI_Init(ai_handle w_addr, ai_handle act_addr) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	; 0x40
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	  ai_error err;

	  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001706:	2100      	movs	r1, #0
 8001708:	482b      	ldr	r0, [pc, #172]	; (80017b8 <AI_Init+0xbc>)
 800170a:	f005 fa29 	bl	8006b60 <ai_network_create>
 800170e:	4603      	mov	r3, r0
 8001710:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (err.type != AI_ERROR_NONE) {
 8001712:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <AI_Init+0x36>
		  printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 800171a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800171e:	4619      	mov	r1, r3
 8001720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001722:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001726:	461a      	mov	r2, r3
 8001728:	4824      	ldr	r0, [pc, #144]	; (80017bc <AI_Init+0xc0>)
 800172a:	f008 f9c3 	bl	8009ab4 <iprintf>
		  Error_Handler();
 800172e:	f000 f939 	bl	80019a4 <Error_Handler>
	  }

	  const ai_network_params params = {
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <AI_Init+0xc4>)
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	2301      	movs	r3, #1
 8001738:	823b      	strh	r3, [r7, #16]
 800173a:	2301      	movs	r3, #1
 800173c:	827b      	strh	r3, [r7, #18]
 800173e:	2301      	movs	r3, #1
 8001740:	82bb      	strh	r3, [r7, #20]
 8001742:	f64b 43ac 	movw	r3, #48300	; 0xbcac
 8001746:	61bb      	str	r3, [r7, #24]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <AI_Init+0xc8>)
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	2301      	movs	r3, #1
 8001756:	853b      	strh	r3, [r7, #40]	; 0x28
 8001758:	2301      	movs	r3, #1
 800175a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800175c:	2301      	movs	r3, #1
 800175e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001760:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
 800176a:	2300      	movs	r3, #0
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
			  AI_NETWORK_DATA_WEIGHTS(w_addr),
			  AI_NETWORK_DATA_ACTIVATIONS(act_addr)
	  };

	  if (!ai_network_init(network, &params)) {
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <AI_Init+0xbc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f107 020c 	add.w	r2, r7, #12
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f005 fa07 	bl	8006b8c <ai_network_init>
 800177e:	4603      	mov	r3, r0
 8001780:	f083 0301 	eor.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d012      	beq.n	80017b0 <AI_Init+0xb4>
		  err = ai_network_get_error(network);
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <AI_Init+0xbc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f005 f9da 	bl	8006b48 <ai_network_get_error>
 8001794:	4603      	mov	r3, r0
 8001796:	63fb      	str	r3, [r7, #60]	; 0x3c
		  printf("ai_network_init error - type=%d code=%d\r\n", err.type, err.code);
 8001798:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800179c:	4619      	mov	r1, r3
 800179e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80017a4:	461a      	mov	r2, r3
 80017a6:	4808      	ldr	r0, [pc, #32]	; (80017c8 <AI_Init+0xcc>)
 80017a8:	f008 f984 	bl	8009ab4 <iprintf>
		  Error_Handler();
 80017ac:	f000 f8fa 	bl	80019a4 <Error_Handler>
	  }
}
 80017b0:	bf00      	nop
 80017b2:	3740      	adds	r7, #64	; 0x40
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000130c 	.word	0x2000130c
 80017bc:	0800bab4 	.word	0x0800bab4
 80017c0:	40040440 	.word	0x40040440
 80017c4:	00040440 	.word	0x00040440
 80017c8:	0800bae0 	.word	0x0800bae0

080017cc <AI_Run>:

static void AI_Run(float *pIn, float *pOut) {
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b090      	sub	sp, #64	; 0x40
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	  ai_i32 batch;
	  ai_error err;

	  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <AI_Run+0x8c>)
 80017d8:	f107 0420 	add.w	r4, r7, #32
 80017dc:	461d      	mov	r5, r3
 80017de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017e6:	e884 0003 	stmia.w	r4, {r0, r1}
	  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <AI_Run+0x90>)
 80017ec:	f107 0408 	add.w	r4, r7, #8
 80017f0:	461d      	mov	r5, r3
 80017f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017fa:	e884 0003 	stmia.w	r4, {r0, r1}

	  ai_input[0].n_batches = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	84bb      	strh	r3, [r7, #36]	; 0x24
	  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
	  ai_output[0].n_batches = 1;
 8001806:	2301      	movs	r3, #1
 8001808:	81bb      	strh	r3, [r7, #12]
	  ai_output[0].data = AI_HANDLE_PTR(pOut);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	61bb      	str	r3, [r7, #24]

	  batch = ai_network_run(network, ai_input, ai_output);
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <AI_Run+0x94>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f107 0208 	add.w	r2, r7, #8
 8001816:	f107 0120 	add.w	r1, r7, #32
 800181a:	4618      	mov	r0, r3
 800181c:	f005 f9f5 	bl	8006c0a <ai_network_run>
 8001820:	63f8      	str	r0, [r7, #60]	; 0x3c
	  if (batch != 1) {
 8001822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001824:	2b01      	cmp	r3, #1
 8001826:	d012      	beq.n	800184e <AI_Run+0x82>
		  err = ai_network_get_error(network);
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <AI_Run+0x94>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f005 f98b 	bl	8006b48 <ai_network_get_error>
 8001832:	4603      	mov	r3, r0
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
		  printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001836:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800183a:	4619      	mov	r1, r3
 800183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001842:	461a      	mov	r2, r3
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <AI_Run+0x98>)
 8001846:	f008 f935 	bl	8009ab4 <iprintf>
		  Error_Handler();
 800184a:	f000 f8ab 	bl	80019a4 <Error_Handler>
	  }
}
 800184e:	bf00      	nop
 8001850:	3740      	adds	r7, #64	; 0x40
 8001852:	46bd      	mov	sp, r7
 8001854:	bdb0      	pop	{r4, r5, r7, pc}
 8001856:	bf00      	nop
 8001858:	0800bb38 	.word	0x0800bb38
 800185c:	0800bb50 	.word	0x0800bb50
 8001860:	2000130c 	.word	0x2000130c
 8001864:	0800bb0c 	.word	0x0800bb0c

08001868 <argmax>:

static uint32_t argmax(const float * values, uint32_t len) {
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	  float max_value = values[0];
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	617b      	str	r3, [r7, #20]
	  uint32_t max_index = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
	  for (uint32_t i=1; i<len; i++) {
 800187c:	2301      	movs	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e017      	b.n	80018b2 <argmax+0x4a>
		  if (values[i] > max_value) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189a:	d507      	bpl.n	80018ac <argmax+0x44>
			  max_value = values[i];
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	617b      	str	r3, [r7, #20]
			  max_index = i;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	613b      	str	r3, [r7, #16]
	  for (uint32_t i=1; i<len; i++) {
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3e3      	bcc.n	8001882 <argmax+0x1a>
		  }
	  }
	  return max_index;
 80018ba:	693b      	ldr	r3, [r7, #16]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <MEMS_Init>:
static void MEMS_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 80018d2:	23d5      	movs	r3, #213	; 0xd5
 80018d4:	763b      	strb	r3, [r7, #24]
  io_ctx.Init        = BSP_I2C2_Init;
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <MEMS_Init+0x90>)
 80018d8:	60fb      	str	r3, [r7, #12]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <MEMS_Init+0x94>)
 80018dc:	613b      	str	r3, [r7, #16]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <MEMS_Init+0x98>)
 80018e0:	623b      	str	r3, [r7, #32]
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MEMS_Init+0x9c>)
 80018e4:	61fb      	str	r3, [r7, #28]
  io_ctx.GetTick     = BSP_GetTick;
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <MEMS_Init+0xa0>)
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	4619      	mov	r1, r3
 80018f0:	481e      	ldr	r0, [pc, #120]	; (800196c <MEMS_Init+0xa4>)
 80018f2:	f000 fa1d 	bl	8001d30 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 80018f6:	f107 030b 	add.w	r3, r7, #11
 80018fa:	4619      	mov	r1, r3
 80018fc:	481b      	ldr	r0, [pc, #108]	; (800196c <MEMS_Init+0xa4>)
 80018fe:	f000 fae6 	bl	8001ece <LSM6DSL_ReadID>
  printf("id : %d\n", &id);
 8001902:	f107 030b 	add.w	r3, r7, #11
 8001906:	4619      	mov	r1, r3
 8001908:	4819      	ldr	r0, [pc, #100]	; (8001970 <MEMS_Init+0xa8>)
 800190a:	f008 f8d3 	bl	8009ab4 <iprintf>
  printf("lsm6dsl_id : %d\n", LSM6DSL_ID);
 800190e:	216a      	movs	r1, #106	; 0x6a
 8001910:	4818      	ldr	r0, [pc, #96]	; (8001974 <MEMS_Init+0xac>)
 8001912:	f008 f8cf 	bl	8009ab4 <iprintf>
  if (id != LSM6DSL_ID) {
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	2b6a      	cmp	r3, #106	; 0x6a
 800191a:	d001      	beq.n	8001920 <MEMS_Init+0x58>
    Error_Handler();
 800191c:	f000 f842 	bl	80019a4 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 8001920:	4812      	ldr	r0, [pc, #72]	; (800196c <MEMS_Init+0xa4>)
 8001922:	f000 fa6b 	bl	8001dfc <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 8001926:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 800192a:	4810      	ldr	r0, [pc, #64]	; (800196c <MEMS_Init+0xa4>)
 800192c:	f000 fb50 	bl	8001fd0 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8001930:	2104      	movs	r1, #4
 8001932:	480e      	ldr	r0, [pc, #56]	; (800196c <MEMS_Init+0xa4>)
 8001934:	f000 fb68 	bl	8002008 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8001938:	2101      	movs	r1, #1
 800193a:	480c      	ldr	r0, [pc, #48]	; (800196c <MEMS_Init+0xa4>)
 800193c:	f000 fc22 	bl	8002184 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4809      	ldr	r0, [pc, #36]	; (800196c <MEMS_Init+0xa4>)
 8001946:	f000 fb87 	bl	8002058 <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 800194a:	4808      	ldr	r0, [pc, #32]	; (800196c <MEMS_Init+0xa4>)
 800194c:	f000 fad5 	bl	8001efa <LSM6DSL_ACC_Enable>
}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	08000f79 	.word	0x08000f79
 800195c:	08000ff5 	.word	0x08000ff5
 8001960:	080010a9 	.word	0x080010a9
 8001964:	08001045 	.word	0x08001045
 8001968:	0800110d 	.word	0x0800110d
 800196c:	20001118 	.word	0x20001118
 8001970:	0800bb68 	.word	0x0800bb68
 8001974:	0800bb74 	.word	0x0800bb74

08001978 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001988:	d104      	bne.n	8001994 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_GPIO_EXTI_Callback+0x28>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001992:	6013      	str	r3, [r2, #0]
  }
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000ad4 	.word	0x20000ad4

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019aa:	e7fe      	b.n	80019aa <Error_Handler+0x6>

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_CRC_MspInit+0x38>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10b      	bne.n	8001a1e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_CRC_MspInit+0x3c>)
 8001a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_CRC_MspInit+0x3c>)
 8001a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a10:	6493      	str	r3, [r2, #72]	; 0x48
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_CRC_MspInit+0x3c>)
 8001a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023000 	.word	0x40023000
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_UART_MspInit+0x7c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d127      	bne.n	8001aa6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_UART_MspInit+0x80>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <HAL_UART_MspInit+0x80>)
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a60:	6613      	str	r3, [r2, #96]	; 0x60
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_UART_MspInit+0x80>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_UART_MspInit+0x80>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_UART_MspInit+0x80>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_UART_MspInit+0x80>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 8001a86:	23c0      	movs	r3, #192	; 0xc0
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a96:	2307      	movs	r3, #7
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <HAL_UART_MspInit+0x84>)
 8001aa2:	f001 fb25 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	48000400 	.word	0x48000400

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f001 f8d6 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b18:	f001 fd86 	bl	8003628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b20:	f001 fd82 	bl	8003628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e00a      	b.n	8001b50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b3a:	f7ff fbab 	bl	8001294 <__io_getchar>
 8001b3e:	4601      	mov	r1, r0
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	60ba      	str	r2, [r7, #8]
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dbf0      	blt.n	8001b3a <_read+0x12>
	}

return len;
 8001b58:	687b      	ldr	r3, [r7, #4]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e009      	b.n	8001b88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fb73 	bl	8001268 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbf1      	blt.n	8001b74 <_write+0x12>
	}
	return len;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_close>:

int _close(int file)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_isatty>:

int _isatty(int file)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f007 f9f4 	bl	8009020 <__errno>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200a0000 	.word	0x200a0000
 8001c64:	00000800 	.word	0x00000800
 8001c68:	200009ac 	.word	0x200009ac
 8001c6c:	20001318 	.word	0x20001318

08001c70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <SystemInit+0x64>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <SystemInit+0x64>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <SystemInit+0x68>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <SystemInit+0x68>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <SystemInit+0x68>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <SystemInit+0x68>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <SystemInit+0x68>)
 8001c9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ca0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <SystemInit+0x68>)
 8001ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <SystemInit+0x68>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <SystemInit+0x68>)
 8001cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <SystemInit+0x68>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SystemInit+0x64>)
 8001cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cc6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00
 8001cd8:	40021000 	.word	0x40021000

08001cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ce0:	f7ff ffc6 	bl	8001c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ce4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ce6:	e003      	b.n	8001cf0 <LoopCopyDataInit>

08001ce8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cee:	3104      	adds	r1, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cf0:	480a      	ldr	r0, [pc, #40]	; (8001d1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cf4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cf6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cf8:	d3f6      	bcc.n	8001ce8 <CopyDataInit>
	ldr	r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cfc:	e002      	b.n	8001d04 <LoopFillZerobss>

08001cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d00:	f842 3b04 	str.w	r3, [r2], #4

08001d04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <LoopForever+0x16>)
	cmp	r2, r3
 8001d06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d08:	d3f9      	bcc.n	8001cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f007 f98f 	bl	800902c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0e:	f7ff fad9 	bl	80012c4 <main>

08001d12 <LoopForever>:

LoopForever:
    b LoopForever
 8001d12:	e7fe      	b.n	8001d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d14:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001d18:	08017bc8 	.word	0x08017bc8
	ldr	r0, =_sdata
 8001d1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d20:	2000098c 	.word	0x2000098c
	ldr	r2, =_sbss
 8001d24:	2000098c 	.word	0x2000098c
	ldr	r3, = _ebss
 8001d28:	20001318 	.word	0x20001318

08001d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_IRQHandler>
	...

08001d30 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d103      	bne.n	8001d4c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	e04d      	b.n	8001de8 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	7b1a      	ldrb	r2, [r3, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <LSM6DSL_RegisterBusIO+0xc4>)
 8001d88:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <LSM6DSL_RegisterBusIO+0xc8>)
 8001d8e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e020      	b.n	8001de8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4798      	blx	r3
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e016      	b.n	8001de8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d112      	bne.n	8001de8 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001dcc:	230c      	movs	r3, #12
 8001dce:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2112      	movs	r1, #18
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f9b9 	bl	800214e <LSM6DSL_Write_Reg>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001de8:	68fb      	ldr	r3, [r7, #12]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	08002409 	.word	0x08002409
 8001df8:	0800243f 	.word	0x0800243f

08001dfc <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	331c      	adds	r3, #28
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fc7a 	bl	8002704 <lsm6dsl_auto_increment_set>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e054      	b.n	8001ec6 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	331c      	adds	r3, #28
 8001e20:	2101      	movs	r1, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fc26 	bl	8002674 <lsm6dsl_block_data_update_set>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e048      	b.n	8001ec6 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	331c      	adds	r3, #28
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fec1 	bl	8002bc2 <lsm6dsl_fifo_mode_set>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e03c      	b.n	8001ec6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2204      	movs	r2, #4
 8001e50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	331c      	adds	r3, #28
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fb98 	bl	8002590 <lsm6dsl_xl_data_rate_set>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e02c      	b.n	8001ec6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	331c      	adds	r3, #28
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fb2e 	bl	80024d4 <lsm6dsl_xl_full_scale_set>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	e020      	b.n	8001ec6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2204      	movs	r2, #4
 8001e88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	331c      	adds	r3, #28
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fbc8 	bl	8002628 <lsm6dsl_gy_data_rate_set>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e010      	b.n	8001ec6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	331c      	adds	r3, #28
 8001ea8:	2106      	movs	r1, #6
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fb96 	bl	80025dc <lsm6dsl_gy_full_scale_set>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e004      	b.n	8001ec6 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	331c      	adds	r3, #28
 8001edc:	6839      	ldr	r1, [r7, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fbff 	bl	80026e2 <lsm6dsl_device_id_get>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e000      	b.n	8001ef2 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e014      	b.n	8001f3a <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f103 021c 	add.w	r2, r3, #28
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f000 fb36 	bl	8002590 <lsm6dsl_xl_data_rate_set>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e004      	b.n	8001f3a <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	331c      	adds	r3, #28
 8001f56:	f107 020b 	add.w	r2, r7, #11
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fadf 	bl	8002520 <lsm6dsl_xl_full_scale_get>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	e023      	b.n	8001fb6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d81b      	bhi.n	8001fac <LSM6DSL_ACC_GetSensitivity+0x68>
 8001f74:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8001f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7a:	bf00      	nop
 8001f7c:	08001f8d 	.word	0x08001f8d
 8001f80:	08001fa5 	.word	0x08001fa5
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001f9d 	.word	0x08001f9d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8001f90:	601a      	str	r2, [r3, #0]
      break;
 8001f92:	e00f      	b.n	8001fb4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8001f98:	601a      	str	r2, [r3, #0]
      break;
 8001f9a:	e00b      	b.n	8001fb4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8001fa0:	601a      	str	r2, [r3, #0]
      break;
 8001fa2:	e007      	b.n	8001fb4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <LSM6DSL_ACC_GetSensitivity+0x88>)
 8001fa8:	601a      	str	r2, [r3, #0]
      break;
 8001faa:	e003      	b.n	8001fb4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb0:	60fb      	str	r3, [r7, #12]
      break;
 8001fb2:	bf00      	nop
  }

  return ret;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	3d79db23 	.word	0x3d79db23
 8001fc4:	3df9db23 	.word	0x3df9db23
 8001fc8:	3e79db23 	.word	0x3e79db23
 8001fcc:	3ef9db23 	.word	0x3ef9db23

08001fd0 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d106      	bne.n	8001ff4 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001fe6:	ed97 0a00 	vldr	s0, [r7]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8fe 	bl	80021ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	e005      	b.n	8002000 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001ff4:	ed97 0a00 	vldr	s0, [r7]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f983 	bl	8002304 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8001ffe:	4603      	mov	r3, r0
  }
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b02      	cmp	r3, #2
 8002016:	dd0b      	ble.n	8002030 <LSM6DSL_ACC_SetFullScale+0x28>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b04      	cmp	r3, #4
 800201c:	dd06      	ble.n	800202c <LSM6DSL_ACC_SetFullScale+0x24>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b08      	cmp	r3, #8
 8002022:	dc01      	bgt.n	8002028 <LSM6DSL_ACC_SetFullScale+0x20>
 8002024:	2303      	movs	r3, #3
 8002026:	e004      	b.n	8002032 <LSM6DSL_ACC_SetFullScale+0x2a>
 8002028:	2301      	movs	r3, #1
 800202a:	e002      	b.n	8002032 <LSM6DSL_ACC_SetFullScale+0x2a>
 800202c:	2302      	movs	r3, #2
 800202e:	e000      	b.n	8002032 <LSM6DSL_ACC_SetFullScale+0x2a>
 8002030:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8002032:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	331c      	adds	r3, #28
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fa49 	bl	80024d4 <lsm6dsl_xl_full_scale_set>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	e000      	b.n	8002050 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	331c      	adds	r3, #28
 8002066:	f107 0208 	add.w	r2, r7, #8
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fb27 	bl	80026c0 <lsm6dsl_acceleration_raw_get>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	e00c      	b.n	8002098 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800207e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002086:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800208e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	331c      	adds	r3, #28
 80020b4:	f107 0210 	add.w	r2, r7, #16
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fb00 	bl	80026c0 <lsm6dsl_acceleration_raw_get>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e03c      	b.n	8002146 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	4619      	mov	r1, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff36 	bl	8001f44 <LSM6DSL_ACC_GetSensitivity>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e030      	b.n	8002146 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80020e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	ee17 2a90 	vmov	r2, s15
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002104:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002110:	edd7 7a03 	vldr	s15, [r7, #12]
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211c:	ee17 2a90 	vmov	r2, s15
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002124:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002130:	edd7 7a03 	vldr	s15, [r7, #12]
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800213c:	ee17 2a90 	vmov	r2, s15
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
 800215a:	4613      	mov	r3, r2
 800215c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f103 001c 	add.w	r0, r3, #28
 8002164:	1cba      	adds	r2, r7, #2
 8002166:	78f9      	ldrb	r1, [r7, #3]
 8002168:	2301      	movs	r3, #1
 800216a:	f000 f99b 	bl	80024a4 <lsm6dsl_write_reg>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	e000      	b.n	800217c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	331c      	adds	r3, #28
 8002194:	f107 020c 	add.w	r2, r7, #12
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fc3b 	bl	8002a16 <lsm6dsl_pin_int1_route_get>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e01b      	b.n	80021e4 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d811      	bhi.n	80021d6 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	7b3b      	ldrb	r3, [r7, #12]
 80021bc:	f362 0300 	bfi	r3, r2, #0, #1
 80021c0:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	331c      	adds	r3, #28
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fac1 	bl	8002750 <lsm6dsl_pin_int1_route_set>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 80021d4:	e002      	b.n	80021dc <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e003      	b.n	80021e4 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
 80021e0:	e000      	b.n	80021e4 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80021f8:	edd7 7a00 	vldr	s15, [r7]
 80021fc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	d801      	bhi.n	800220e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800220a:	2301      	movs	r3, #1
 800220c:	e058      	b.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800220e:	edd7 7a00 	vldr	s15, [r7]
 8002212:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221e:	d801      	bhi.n	8002224 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002220:	2302      	movs	r3, #2
 8002222:	e04d      	b.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002224:	edd7 7a00 	vldr	s15, [r7]
 8002228:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80022e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800222c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	d801      	bhi.n	800223a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002236:	2303      	movs	r3, #3
 8002238:	e042      	b.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800223a:	edd7 7a00 	vldr	s15, [r7]
 800223e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80022ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224a:	d801      	bhi.n	8002250 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 800224c:	2304      	movs	r3, #4
 800224e:	e037      	b.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002250:	edd7 7a00 	vldr	s15, [r7]
 8002254:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80022f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	d801      	bhi.n	8002266 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002262:	2305      	movs	r3, #5
 8002264:	e02c      	b.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002266:	edd7 7a00 	vldr	s15, [r7]
 800226a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80022f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800226e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	d801      	bhi.n	800227c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002278:	2306      	movs	r3, #6
 800227a:	e021      	b.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800227c:	edd7 7a00 	vldr	s15, [r7]
 8002280:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80022f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8002284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	d801      	bhi.n	8002292 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800228e:	2307      	movs	r3, #7
 8002290:	e016      	b.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002292:	edd7 7a00 	vldr	s15, [r7]
 8002296:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80022fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800229a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d801      	bhi.n	80022a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80022a4:	2308      	movs	r3, #8
 80022a6:	e00b      	b.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022a8:	edd7 7a00 	vldr	s15, [r7]
 80022ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002300 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80022b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	d801      	bhi.n	80022be <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80022ba:	2309      	movs	r3, #9
 80022bc:	e000      	b.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022be:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80022c0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	331c      	adds	r3, #28
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f960 	bl	8002590 <lsm6dsl_xl_data_rate_set>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	e000      	b.n	80022de <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	42500000 	.word	0x42500000
 80022ec:	42d00000 	.word	0x42d00000
 80022f0:	43500000 	.word	0x43500000
 80022f4:	43d00000 	.word	0x43d00000
 80022f8:	44504000 	.word	0x44504000
 80022fc:	44cf8000 	.word	0x44cf8000
 8002300:	45502000 	.word	0x45502000

08002304 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002310:	edd7 7a00 	vldr	s15, [r7]
 8002314:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	d801      	bhi.n	8002326 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002322:	2301      	movs	r3, #1
 8002324:	e058      	b.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002326:	edd7 7a00 	vldr	s15, [r7]
 800232a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800232e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	d801      	bhi.n	800233c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002338:	2302      	movs	r3, #2
 800233a:	e04d      	b.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800233c:	edd7 7a00 	vldr	s15, [r7]
 8002340:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80023ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	d801      	bhi.n	8002352 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800234e:	2303      	movs	r3, #3
 8002350:	e042      	b.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002352:	edd7 7a00 	vldr	s15, [r7]
 8002356:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800235a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800235e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002362:	d801      	bhi.n	8002368 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002364:	2304      	movs	r3, #4
 8002366:	e037      	b.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002368:	edd7 7a00 	vldr	s15, [r7]
 800236c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80023f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8002370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	d801      	bhi.n	800237e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800237a:	2305      	movs	r3, #5
 800237c:	e02c      	b.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800237e:	edd7 7a00 	vldr	s15, [r7]
 8002382:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80023f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	d801      	bhi.n	8002394 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002390:	2306      	movs	r3, #6
 8002392:	e021      	b.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002394:	edd7 7a00 	vldr	s15, [r7]
 8002398:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80023fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800239c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	d801      	bhi.n	80023aa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e016      	b.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023aa:	edd7 7a00 	vldr	s15, [r7]
 80023ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002400 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80023b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	d801      	bhi.n	80023c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80023bc:	2308      	movs	r3, #8
 80023be:	e00b      	b.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023c0:	edd7 7a00 	vldr	s15, [r7]
 80023c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002404 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80023c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	d801      	bhi.n	80023d6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80023d2:	2309      	movs	r3, #9
 80023d4:	e000      	b.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023d6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	42500000 	.word	0x42500000
 80023f0:	42d00000 	.word	0x42d00000
 80023f4:	43500000 	.word	0x43500000
 80023f8:	43d00000 	.word	0x43d00000
 80023fc:	44504000 	.word	0x44504000
 8002400:	44cf8000 	.word	0x44cf8000
 8002404:	45502000 	.word	0x45502000

08002408 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	461a      	mov	r2, r3
 8002414:	460b      	mov	r3, r1
 8002416:	72fb      	strb	r3, [r7, #11]
 8002418:	4613      	mov	r3, r2
 800241a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	695c      	ldr	r4, [r3, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	7b1b      	ldrb	r3, [r3, #12]
 8002428:	b298      	uxth	r0, r3
 800242a:	7afb      	ldrb	r3, [r7, #11]
 800242c:	b299      	uxth	r1, r3
 800242e:	893b      	ldrh	r3, [r7, #8]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	47a0      	blx	r4
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}

0800243e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800243e:	b590      	push	{r4, r7, lr}
 8002440:	b087      	sub	sp, #28
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	461a      	mov	r2, r3
 800244a:	460b      	mov	r3, r1
 800244c:	72fb      	strb	r3, [r7, #11]
 800244e:	4613      	mov	r3, r2
 8002450:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	691c      	ldr	r4, [r3, #16]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	7b1b      	ldrb	r3, [r3, #12]
 800245e:	b298      	uxth	r0, r3
 8002460:	7afb      	ldrb	r3, [r7, #11]
 8002462:	b299      	uxth	r1, r3
 8002464:	893b      	ldrh	r3, [r7, #8]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	47a0      	blx	r4
 800246a:	4603      	mov	r3, r0
}
 800246c:	4618      	mov	r0, r3
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd90      	pop	{r4, r7, pc}

08002474 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	461a      	mov	r2, r3
 8002480:	460b      	mov	r3, r1
 8002482:	72fb      	strb	r3, [r7, #11]
 8002484:	4613      	mov	r3, r2
 8002486:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685c      	ldr	r4, [r3, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6898      	ldr	r0, [r3, #8]
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	7af9      	ldrb	r1, [r7, #11]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	47a0      	blx	r4
 8002498:	6178      	str	r0, [r7, #20]
  return ret;
 800249a:	697b      	ldr	r3, [r7, #20]
}
 800249c:	4618      	mov	r0, r3
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd90      	pop	{r4, r7, pc}

080024a4 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	461a      	mov	r2, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	72fb      	strb	r3, [r7, #11]
 80024b4:	4613      	mov	r3, r2
 80024b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681c      	ldr	r4, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6898      	ldr	r0, [r3, #8]
 80024c0:	893b      	ldrh	r3, [r7, #8]
 80024c2:	7af9      	ldrb	r1, [r7, #11]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	47a0      	blx	r4
 80024c8:	6178      	str	r0, [r7, #20]
  return ret;
 80024ca:	697b      	ldr	r3, [r7, #20]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd90      	pop	{r4, r7, pc}

080024d4 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80024e0:	f107 0208 	add.w	r2, r7, #8
 80024e4:	2301      	movs	r3, #1
 80024e6:	2110      	movs	r1, #16
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffc3 	bl	8002474 <lsm6dsl_read_reg>
 80024ee:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	7a3b      	ldrb	r3, [r7, #8]
 8002500:	f362 0383 	bfi	r3, r2, #2, #2
 8002504:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8002506:	f107 0208 	add.w	r2, r7, #8
 800250a:	2301      	movs	r3, #1
 800250c:	2110      	movs	r1, #16
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffc8 	bl	80024a4 <lsm6dsl_write_reg>
 8002514:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800252a:	f107 0208 	add.w	r2, r7, #8
 800252e:	2301      	movs	r3, #1
 8002530:	2110      	movs	r1, #16
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ff9e 	bl	8002474 <lsm6dsl_read_reg>
 8002538:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 800253a:	7a3b      	ldrb	r3, [r7, #8]
 800253c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d81a      	bhi.n	800257c <lsm6dsl_xl_full_scale_get+0x5c>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <lsm6dsl_xl_full_scale_get+0x2c>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	0800255d 	.word	0x0800255d
 8002550:	08002565 	.word	0x08002565
 8002554:	0800256d 	.word	0x0800256d
 8002558:	08002575 	.word	0x08002575
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
      break;
 8002562:	e00f      	b.n	8002584 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
      break;
 800256a:	e00b      	b.n	8002584 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2202      	movs	r2, #2
 8002570:	701a      	strb	r2, [r3, #0]
      break;
 8002572:	e007      	b.n	8002584 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
      break;
 800257a:	e003      	b.n	8002584 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2204      	movs	r2, #4
 8002580:	701a      	strb	r2, [r3, #0]
      break;
 8002582:	bf00      	nop
  }

  return ret;
 8002584:	68fb      	ldr	r3, [r7, #12]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop

08002590 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800259c:	f107 0208 	add.w	r2, r7, #8
 80025a0:	2301      	movs	r3, #1
 80025a2:	2110      	movs	r1, #16
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff65 	bl	8002474 <lsm6dsl_read_reg>
 80025aa:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	7a3b      	ldrb	r3, [r7, #8]
 80025bc:	f362 1307 	bfi	r3, r2, #4, #4
 80025c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80025c2:	f107 0208 	add.w	r2, r7, #8
 80025c6:	2301      	movs	r3, #1
 80025c8:	2110      	movs	r1, #16
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ff6a 	bl	80024a4 <lsm6dsl_write_reg>
 80025d0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80025d2:	68fb      	ldr	r3, [r7, #12]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80025e8:	f107 0208 	add.w	r2, r7, #8
 80025ec:	2301      	movs	r3, #1
 80025ee:	2111      	movs	r1, #17
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ff3f 	bl	8002474 <lsm6dsl_read_reg>
 80025f6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	b2da      	uxtb	r2, r3
 8002606:	7a3b      	ldrb	r3, [r7, #8]
 8002608:	f362 0343 	bfi	r3, r2, #1, #3
 800260c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800260e:	f107 0208 	add.w	r2, r7, #8
 8002612:	2301      	movs	r3, #1
 8002614:	2111      	movs	r1, #17
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ff44 	bl	80024a4 <lsm6dsl_write_reg>
 800261c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	2301      	movs	r3, #1
 800263a:	2111      	movs	r1, #17
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff19 	bl	8002474 <lsm6dsl_read_reg>
 8002642:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10f      	bne.n	800266a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	b2da      	uxtb	r2, r3
 8002652:	7a3b      	ldrb	r3, [r7, #8]
 8002654:	f362 1307 	bfi	r3, r2, #4, #4
 8002658:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800265a:	f107 0208 	add.w	r2, r7, #8
 800265e:	2301      	movs	r3, #1
 8002660:	2111      	movs	r1, #17
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff1e 	bl	80024a4 <lsm6dsl_write_reg>
 8002668:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8002680:	f107 0208 	add.w	r2, r7, #8
 8002684:	2301      	movs	r3, #1
 8002686:	2112      	movs	r1, #18
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fef3 	bl	8002474 <lsm6dsl_read_reg>
 800268e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	7a3b      	ldrb	r3, [r7, #8]
 80026a0:	f362 1386 	bfi	r3, r2, #6, #1
 80026a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80026a6:	f107 0208 	add.w	r2, r7, #8
 80026aa:	2301      	movs	r3, #1
 80026ac:	2112      	movs	r1, #18
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fef8 	bl	80024a4 <lsm6dsl_write_reg>
 80026b4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80026ca:	2306      	movs	r3, #6
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	2128      	movs	r1, #40	; 0x28
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fecf 	bl	8002474 <lsm6dsl_read_reg>
 80026d6:	60f8      	str	r0, [r7, #12]
  return ret;
 80026d8:	68fb      	ldr	r3, [r7, #12]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80026ec:	2301      	movs	r3, #1
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	210f      	movs	r1, #15
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff febe 	bl	8002474 <lsm6dsl_read_reg>
 80026f8:	60f8      	str	r0, [r7, #12]
  return ret;
 80026fa:	68fb      	ldr	r3, [r7, #12]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8002710:	f107 0208 	add.w	r2, r7, #8
 8002714:	2301      	movs	r3, #1
 8002716:	2112      	movs	r1, #18
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff feab 	bl	8002474 <lsm6dsl_read_reg>
 800271e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	b2da      	uxtb	r2, r3
 800272e:	7a3b      	ldrb	r3, [r7, #8]
 8002730:	f362 0382 	bfi	r3, r2, #2, #1
 8002734:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8002736:	f107 0208 	add.w	r2, r7, #8
 800273a:	2301      	movs	r3, #1
 800273c:	2112      	movs	r1, #18
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff feb0 	bl	80024a4 <lsm6dsl_write_reg>
 8002744:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800275a:	f107 021c 	add.w	r2, r7, #28
 800275e:	2301      	movs	r3, #1
 8002760:	210d      	movs	r1, #13
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fe86 	bl	8002474 <lsm6dsl_read_reg>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d147      	bne.n	8002800 <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8002770:	783b      	ldrb	r3, [r7, #0]
 8002772:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	7f3b      	ldrb	r3, [r7, #28]
 800277a:	f362 0300 	bfi	r3, r2, #0, #1
 800277e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8002780:	783b      	ldrb	r3, [r7, #0]
 8002782:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	7f3b      	ldrb	r3, [r7, #28]
 800278a:	f362 0341 	bfi	r3, r2, #1, #1
 800278e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8002790:	783b      	ldrb	r3, [r7, #0]
 8002792:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	7f3b      	ldrb	r3, [r7, #28]
 800279a:	f362 0382 	bfi	r3, r2, #2, #1
 800279e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80027a0:	783b      	ldrb	r3, [r7, #0]
 80027a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	7f3b      	ldrb	r3, [r7, #28]
 80027aa:	f362 03c3 	bfi	r3, r2, #3, #1
 80027ae:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80027b0:	783b      	ldrb	r3, [r7, #0]
 80027b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	7f3b      	ldrb	r3, [r7, #28]
 80027ba:	f362 1304 	bfi	r3, r2, #4, #1
 80027be:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80027c0:	783b      	ldrb	r3, [r7, #0]
 80027c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	7f3b      	ldrb	r3, [r7, #28]
 80027ca:	f362 1345 	bfi	r3, r2, #5, #1
 80027ce:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80027d0:	783b      	ldrb	r3, [r7, #0]
 80027d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	7f3b      	ldrb	r3, [r7, #28]
 80027da:	f362 1386 	bfi	r3, r2, #6, #1
 80027de:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80027e0:	783b      	ldrb	r3, [r7, #0]
 80027e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	7f3b      	ldrb	r3, [r7, #28]
 80027ea:	f362 13c7 	bfi	r3, r2, #7, #1
 80027ee:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 80027f0:	f107 021c 	add.w	r2, r7, #28
 80027f4:	2301      	movs	r3, #1
 80027f6:	210d      	movs	r1, #13
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fe53 	bl	80024a4 <lsm6dsl_write_reg>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8002806:	f107 0218 	add.w	r2, r7, #24
 800280a:	2301      	movs	r3, #1
 800280c:	215e      	movs	r1, #94	; 0x5e
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff fe30 	bl	8002474 <lsm6dsl_read_reg>
 8002814:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 800281c:	f107 0214 	add.w	r2, r7, #20
 8002820:	2301      	movs	r3, #1
 8002822:	215f      	movs	r1, #95	; 0x5f
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff fe25 	bl	8002474 <lsm6dsl_read_reg>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d147      	bne.n	80028c2 <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 8002832:	787b      	ldrb	r3, [r7, #1]
 8002834:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	7e3b      	ldrb	r3, [r7, #24]
 800283c:	f362 0300 	bfi	r3, r2, #0, #1
 8002840:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 8002842:	787b      	ldrb	r3, [r7, #1]
 8002844:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002848:	b2da      	uxtb	r2, r3
 800284a:	7e3b      	ldrb	r3, [r7, #24]
 800284c:	f362 0341 	bfi	r3, r2, #1, #1
 8002850:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 8002852:	787b      	ldrb	r3, [r7, #1]
 8002854:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002858:	b2da      	uxtb	r2, r3
 800285a:	7e3b      	ldrb	r3, [r7, #24]
 800285c:	f362 0382 	bfi	r3, r2, #2, #1
 8002860:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002862:	787b      	ldrb	r3, [r7, #1]
 8002864:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	7e3b      	ldrb	r3, [r7, #24]
 800286c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002870:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 8002872:	787b      	ldrb	r3, [r7, #1]
 8002874:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	7e3b      	ldrb	r3, [r7, #24]
 800287c:	f362 1304 	bfi	r3, r2, #4, #1
 8002880:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 8002882:	787b      	ldrb	r3, [r7, #1]
 8002884:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002888:	b2da      	uxtb	r2, r3
 800288a:	7e3b      	ldrb	r3, [r7, #24]
 800288c:	f362 1345 	bfi	r3, r2, #5, #1
 8002890:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 8002892:	787b      	ldrb	r3, [r7, #1]
 8002894:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002898:	b2da      	uxtb	r2, r3
 800289a:	7e3b      	ldrb	r3, [r7, #24]
 800289c:	f362 1386 	bfi	r3, r2, #6, #1
 80028a0:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 80028a2:	787b      	ldrb	r3, [r7, #1]
 80028a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	7e3b      	ldrb	r3, [r7, #24]
 80028ac:	f362 13c7 	bfi	r3, r2, #7, #1
 80028b0:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 80028b2:	f107 0218 	add.w	r2, r7, #24
 80028b6:	2301      	movs	r3, #1
 80028b8:	215e      	movs	r1, #94	; 0x5e
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fdf2 	bl	80024a4 <lsm6dsl_write_reg>
 80028c0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80028c8:	f107 0210 	add.w	r2, r7, #16
 80028cc:	2301      	movs	r3, #1
 80028ce:	2113      	movs	r1, #19
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fdcf 	bl	8002474 <lsm6dsl_read_reg>
 80028d6:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80028de:	78bb      	ldrb	r3, [r7, #2]
 80028e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	7c3b      	ldrb	r3, [r7, #16]
 80028e8:	f362 1304 	bfi	r3, r2, #4, #1
 80028ec:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80028ee:	f107 0210 	add.w	r2, r7, #16
 80028f2:	2301      	movs	r3, #1
 80028f4:	2113      	movs	r1, #19
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fdd4 	bl	80024a4 <lsm6dsl_write_reg>
 80028fc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002904:	f107 0220 	add.w	r2, r7, #32
 8002908:	2301      	movs	r3, #1
 800290a:	211a      	movs	r1, #26
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff fdb1 	bl	8002474 <lsm6dsl_read_reg>
 8002912:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	d111      	bne.n	800293e <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 800291a:	78bb      	ldrb	r3, [r7, #2]
 800291c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002920:	b2da      	uxtb	r2, r3
 8002922:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002926:	f362 13c7 	bfi	r3, r2, #7, #1
 800292a:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800292e:	f107 0220 	add.w	r2, r7, #32
 8002932:	2301      	movs	r3, #1
 8002934:	211a      	movs	r1, #26
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fdb4 	bl	80024a4 <lsm6dsl_write_reg>
 800293c:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	2b00      	cmp	r3, #0
 8002942:	d158      	bne.n	80029f6 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8002944:	f107 020c 	add.w	r2, r7, #12
 8002948:	2301      	movs	r3, #1
 800294a:	2158      	movs	r1, #88	; 0x58
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff fd91 	bl	8002474 <lsm6dsl_read_reg>
 8002952:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d141      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002968:	2b00      	cmp	r3, #0
 800296a:	d13b      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002974:	2b00      	cmp	r3, #0
 8002976:	d135      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002980:	2b00      	cmp	r3, #0
 8002982:	d12f      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 800298c:	2b00      	cmp	r3, #0
 800298e:	d129      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 8002990:	787b      	ldrb	r3, [r7, #1]
 8002992:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002996:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d123      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 800299c:	7d3b      	ldrb	r3, [r7, #20]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11d      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 80029a8:	7d3b      	ldrb	r3, [r7, #20]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d117      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 80029b4:	7d3b      	ldrb	r3, [r7, #20]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 80029c0:	7d3b      	ldrb	r3, [r7, #20]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10b      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80029cc:	7d3b      	ldrb	r3, [r7, #20]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d105      	bne.n	80029e4 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 80029d8:	7d3b      	ldrb	r3, [r7, #20]
 80029da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029de:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 80029e4:	7b3b      	ldrb	r3, [r7, #12]
 80029e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ea:	733b      	strb	r3, [r7, #12]
 80029ec:	e003      	b.n	80029f6 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 80029ee:	7b3b      	ldrb	r3, [r7, #12]
 80029f0:	f36f 13c7 	bfc	r3, #7, #1
 80029f4:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 80029fc:	f107 020c 	add.w	r2, r7, #12
 8002a00:	2301      	movs	r3, #1
 8002a02:	2158      	movs	r1, #88	; 0x58
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fd4d 	bl	80024a4 <lsm6dsl_write_reg>
 8002a0a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b088      	sub	sp, #32
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8002a20:	f107 0214 	add.w	r2, r7, #20
 8002a24:	2301      	movs	r3, #1
 8002a26:	210d      	movs	r1, #13
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fd23 	bl	8002474 <lsm6dsl_read_reg>
 8002a2e:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 80c0 	bne.w	8002bb8 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8002a38:	7d3b      	ldrb	r3, [r7, #20]
 8002a3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a3e:	b2d9      	uxtb	r1, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	7813      	ldrb	r3, [r2, #0]
 8002a44:	f361 0300 	bfi	r3, r1, #0, #1
 8002a48:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8002a4a:	7d3b      	ldrb	r3, [r7, #20]
 8002a4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002a50:	b2d9      	uxtb	r1, r3
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	7813      	ldrb	r3, [r2, #0]
 8002a56:	f361 0341 	bfi	r3, r1, #1, #1
 8002a5a:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8002a5c:	7d3b      	ldrb	r3, [r7, #20]
 8002a5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a62:	b2d9      	uxtb	r1, r3
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	7813      	ldrb	r3, [r2, #0]
 8002a68:	f361 0382 	bfi	r3, r1, #2, #1
 8002a6c:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8002a6e:	7d3b      	ldrb	r3, [r7, #20]
 8002a70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002a74:	b2d9      	uxtb	r1, r3
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	7813      	ldrb	r3, [r2, #0]
 8002a7a:	f361 03c3 	bfi	r3, r1, #3, #1
 8002a7e:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8002a80:	7d3b      	ldrb	r3, [r7, #20]
 8002a82:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a86:	b2d9      	uxtb	r1, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	7813      	ldrb	r3, [r2, #0]
 8002a8c:	f361 1304 	bfi	r3, r1, #4, #1
 8002a90:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8002a92:	7d3b      	ldrb	r3, [r7, #20]
 8002a94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002a98:	b2d9      	uxtb	r1, r3
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	7813      	ldrb	r3, [r2, #0]
 8002a9e:	f361 1345 	bfi	r3, r1, #5, #1
 8002aa2:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8002aa4:	7d3b      	ldrb	r3, [r7, #20]
 8002aa6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002aaa:	b2d9      	uxtb	r1, r3
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	7813      	ldrb	r3, [r2, #0]
 8002ab0:	f361 1386 	bfi	r3, r1, #6, #1
 8002ab4:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8002ab6:	7d3b      	ldrb	r3, [r7, #20]
 8002ab8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002abc:	b2d9      	uxtb	r1, r3
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	7813      	ldrb	r3, [r2, #0]
 8002ac2:	f361 13c7 	bfi	r3, r1, #7, #1
 8002ac6:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8002ac8:	f107 0210 	add.w	r2, r7, #16
 8002acc:	2301      	movs	r3, #1
 8002ace:	215e      	movs	r1, #94	; 0x5e
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fccf 	bl	8002474 <lsm6dsl_read_reg>
 8002ad6:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d16c      	bne.n	8002bb8 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 8002ade:	7c3b      	ldrb	r3, [r7, #16]
 8002ae0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ae4:	b2d9      	uxtb	r1, r3
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	7853      	ldrb	r3, [r2, #1]
 8002aea:	f361 0300 	bfi	r3, r1, #0, #1
 8002aee:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 8002af0:	7c3b      	ldrb	r3, [r7, #16]
 8002af2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002af6:	b2d9      	uxtb	r1, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	7853      	ldrb	r3, [r2, #1]
 8002afc:	f361 0341 	bfi	r3, r1, #1, #1
 8002b00:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 8002b02:	7c3b      	ldrb	r3, [r7, #16]
 8002b04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b08:	b2d9      	uxtb	r1, r3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	7853      	ldrb	r3, [r2, #1]
 8002b0e:	f361 0382 	bfi	r3, r1, #2, #1
 8002b12:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 8002b14:	7c3b      	ldrb	r3, [r7, #16]
 8002b16:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b1a:	b2d9      	uxtb	r1, r3
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	7853      	ldrb	r3, [r2, #1]
 8002b20:	f361 03c3 	bfi	r3, r1, #3, #1
 8002b24:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 8002b26:	7c3b      	ldrb	r3, [r7, #16]
 8002b28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b2c:	b2d9      	uxtb	r1, r3
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	7853      	ldrb	r3, [r2, #1]
 8002b32:	f361 1304 	bfi	r3, r1, #4, #1
 8002b36:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 8002b38:	7c3b      	ldrb	r3, [r7, #16]
 8002b3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b3e:	b2d9      	uxtb	r1, r3
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	7853      	ldrb	r3, [r2, #1]
 8002b44:	f361 1345 	bfi	r3, r1, #5, #1
 8002b48:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 8002b4a:	7c3b      	ldrb	r3, [r7, #16]
 8002b4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b50:	b2d9      	uxtb	r1, r3
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	7853      	ldrb	r3, [r2, #1]
 8002b56:	f361 1386 	bfi	r3, r1, #6, #1
 8002b5a:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 8002b5c:	7c3b      	ldrb	r3, [r7, #16]
 8002b5e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b62:	b2d9      	uxtb	r1, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	7853      	ldrb	r3, [r2, #1]
 8002b68:	f361 13c7 	bfi	r3, r1, #7, #1
 8002b6c:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8002b6e:	f107 020c 	add.w	r2, r7, #12
 8002b72:	2301      	movs	r3, #1
 8002b74:	2113      	movs	r1, #19
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff fc7c 	bl	8002474 <lsm6dsl_read_reg>
 8002b7c:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d119      	bne.n	8002bb8 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8002b84:	7b3b      	ldrb	r3, [r7, #12]
 8002b86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b8a:	b2d9      	uxtb	r1, r3
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	7893      	ldrb	r3, [r2, #2]
 8002b90:	f361 0300 	bfi	r3, r1, #0, #1
 8002b94:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002b96:	f107 0218 	add.w	r2, r7, #24
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	211a      	movs	r1, #26
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fc68 	bl	8002474 <lsm6dsl_read_reg>
 8002ba4:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8002ba6:	7e3b      	ldrb	r3, [r7, #24]
 8002ba8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002bac:	b2d9      	uxtb	r1, r3
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	7893      	ldrb	r3, [r2, #2]
 8002bb2:	f361 0300 	bfi	r3, r1, #0, #1
 8002bb6:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8002bce:	f107 0208 	add.w	r2, r7, #8
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	210a      	movs	r1, #10
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff fc4c 	bl	8002474 <lsm6dsl_read_reg>
 8002bdc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10f      	bne.n	8002c04 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	7a3b      	ldrb	r3, [r7, #8]
 8002bee:	f362 0302 	bfi	r3, r2, #0, #3
 8002bf2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8002bf4:	f107 0208 	add.w	r2, r7, #8
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	210a      	movs	r1, #10
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff fc51 	bl	80024a4 <lsm6dsl_write_reg>
 8002c02:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002c04:	68fb      	ldr	r3, [r7, #12]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c18:	2003      	movs	r0, #3
 8002c1a:	f000 f93d 	bl	8002e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f000 f80e 	bl	8002c40 <HAL_InitTick>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	71fb      	strb	r3, [r7, #7]
 8002c2e:	e001      	b.n	8002c34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c30:	f7fe febc 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c34:	79fb      	ldrb	r3, [r7, #7]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c4c:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_InitTick+0x6c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d023      	beq.n	8002c9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_InitTick+0x70>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <HAL_InitTick+0x6c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f949 	bl	8002f02 <HAL_SYSTICK_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10f      	bne.n	8002c96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b0f      	cmp	r3, #15
 8002c7a:	d809      	bhi.n	8002c90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f000 f913 	bl	8002eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_InitTick+0x74>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e007      	b.n	8002ca0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e004      	b.n	8002ca0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	e001      	b.n	8002ca0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000014 	.word	0x20000014
 8002cb0:	2000000c 	.word	0x2000000c
 8002cb4:	20000010 	.word	0x20000010

08002cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x24>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_IncTick+0x24>)
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000014 	.word	0x20000014
 8002cdc:	20001310 	.word	0x20001310

08002ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_GetTick+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20001310 	.word	0x20001310

08002cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2a:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	60d3      	str	r3, [r2, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <__NVIC_GetPriorityGrouping+0x18>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0307 	and.w	r3, r3, #7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4907      	ldr	r1, [pc, #28]	; (8002d94 <__NVIC_EnableIRQ+0x38>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e64:	d301      	bcc.n	8002e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00f      	b.n	8002e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <SysTick_Config+0x40>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e72:	210f      	movs	r1, #15
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	f7ff ff8e 	bl	8002d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <SysTick_Config+0x40>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <SysTick_Config+0x40>)
 8002e84:	2207      	movs	r2, #7
 8002e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010

08002e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff29 	bl	8002cf8 <__NVIC_SetPriorityGrouping>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec0:	f7ff ff3e 	bl	8002d40 <__NVIC_GetPriorityGrouping>
 8002ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff ff8e 	bl	8002dec <NVIC_EncodePriority>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff5d 	bl	8002d98 <__NVIC_SetPriority>
}
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff31 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffa2 	bl	8002e54 <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e054      	b.n	8002fd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7f5b      	ldrb	r3, [r3, #29]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d105      	bne.n	8002f44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe fd58 	bl	80019f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_CRC_Init+0xc4>)
 8002f58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0218 	bic.w	r2, r2, #24
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	e00c      	b.n	8002f86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	461a      	mov	r2, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f834 	bl	8002fe4 <HAL_CRCEx_Polynomial_Set>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e028      	b.n	8002fd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	795b      	ldrb	r3, [r3, #5]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f04f 32ff 	mov.w	r2, #4294967295
 8002f96:	611a      	str	r2, [r3, #16]
 8002f98:	e004      	b.n	8002fa4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6912      	ldr	r2, [r2, #16]
 8002fa2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	04c11db7 	.word	0x04c11db7

08002fe4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002ff4:	231f      	movs	r3, #31
 8002ff6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ff8:	bf00      	nop
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	613a      	str	r2, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_CRCEx_Polynomial_Set+0x34>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b18      	cmp	r3, #24
 800301c:	d846      	bhi.n	80030ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	080030b3 	.word	0x080030b3
 8003028:	080030ad 	.word	0x080030ad
 800302c:	080030ad 	.word	0x080030ad
 8003030:	080030ad 	.word	0x080030ad
 8003034:	080030ad 	.word	0x080030ad
 8003038:	080030ad 	.word	0x080030ad
 800303c:	080030ad 	.word	0x080030ad
 8003040:	080030ad 	.word	0x080030ad
 8003044:	080030a1 	.word	0x080030a1
 8003048:	080030ad 	.word	0x080030ad
 800304c:	080030ad 	.word	0x080030ad
 8003050:	080030ad 	.word	0x080030ad
 8003054:	080030ad 	.word	0x080030ad
 8003058:	080030ad 	.word	0x080030ad
 800305c:	080030ad 	.word	0x080030ad
 8003060:	080030ad 	.word	0x080030ad
 8003064:	08003095 	.word	0x08003095
 8003068:	080030ad 	.word	0x080030ad
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030ad 	.word	0x080030ad
 8003078:	080030ad 	.word	0x080030ad
 800307c:	080030ad 	.word	0x080030ad
 8003080:	080030ad 	.word	0x080030ad
 8003084:	08003089 	.word	0x08003089
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d913      	bls.n	80030b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003092:	e010      	b.n	80030b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b07      	cmp	r3, #7
 8003098:	d90f      	bls.n	80030ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800309e:	e00c      	b.n	80030ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	d90b      	bls.n	80030be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80030aa:	e008      	b.n	80030be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	75fb      	strb	r3, [r7, #23]
      break;
 80030b0:	e006      	b.n	80030c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030b2:	bf00      	nop
 80030b4:	e004      	b.n	80030c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030b6:	bf00      	nop
 80030b8:	e002      	b.n	80030c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030ba:	bf00      	nop
 80030bc:	e000      	b.n	80030c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030be:	bf00      	nop
  }
  if (status == HAL_OK)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 0118 	bic.w	r1, r3, #24
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	430a      	orrs	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fe:	e166      	b.n	80033ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8158 	beq.w	80033c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d00b      	beq.n	8003138 <HAL_GPIO_Init+0x48>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d007      	beq.n	8003138 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800312c:	2b11      	cmp	r3, #17
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b12      	cmp	r3, #18
 8003136:	d130      	bne.n	800319a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800316e:	2201      	movs	r2, #1
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f003 0201 	and.w	r2, r3, #1
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	2203      	movs	r2, #3
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0xea>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b12      	cmp	r3, #18
 80031d8:	d123      	bne.n	8003222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	08da      	lsrs	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3208      	adds	r2, #8
 800321c:	6939      	ldr	r1, [r7, #16]
 800321e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	2203      	movs	r2, #3
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0203 	and.w	r2, r3, #3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80b2 	beq.w	80033c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003264:	4b61      	ldr	r3, [pc, #388]	; (80033ec <HAL_GPIO_Init+0x2fc>)
 8003266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003268:	4a60      	ldr	r2, [pc, #384]	; (80033ec <HAL_GPIO_Init+0x2fc>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6613      	str	r3, [r2, #96]	; 0x60
 8003270:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <HAL_GPIO_Init+0x2fc>)
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800327c:	4a5c      	ldr	r2, [pc, #368]	; (80033f0 <HAL_GPIO_Init+0x300>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032a6:	d02b      	beq.n	8003300 <HAL_GPIO_Init+0x210>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <HAL_GPIO_Init+0x304>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d025      	beq.n	80032fc <HAL_GPIO_Init+0x20c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a51      	ldr	r2, [pc, #324]	; (80033f8 <HAL_GPIO_Init+0x308>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d01f      	beq.n	80032f8 <HAL_GPIO_Init+0x208>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a50      	ldr	r2, [pc, #320]	; (80033fc <HAL_GPIO_Init+0x30c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d019      	beq.n	80032f4 <HAL_GPIO_Init+0x204>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a4f      	ldr	r2, [pc, #316]	; (8003400 <HAL_GPIO_Init+0x310>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_GPIO_Init+0x200>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a4e      	ldr	r2, [pc, #312]	; (8003404 <HAL_GPIO_Init+0x314>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00d      	beq.n	80032ec <HAL_GPIO_Init+0x1fc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a4d      	ldr	r2, [pc, #308]	; (8003408 <HAL_GPIO_Init+0x318>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d007      	beq.n	80032e8 <HAL_GPIO_Init+0x1f8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a4c      	ldr	r2, [pc, #304]	; (800340c <HAL_GPIO_Init+0x31c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_GPIO_Init+0x1f4>
 80032e0:	2307      	movs	r3, #7
 80032e2:	e00e      	b.n	8003302 <HAL_GPIO_Init+0x212>
 80032e4:	2308      	movs	r3, #8
 80032e6:	e00c      	b.n	8003302 <HAL_GPIO_Init+0x212>
 80032e8:	2306      	movs	r3, #6
 80032ea:	e00a      	b.n	8003302 <HAL_GPIO_Init+0x212>
 80032ec:	2305      	movs	r3, #5
 80032ee:	e008      	b.n	8003302 <HAL_GPIO_Init+0x212>
 80032f0:	2304      	movs	r3, #4
 80032f2:	e006      	b.n	8003302 <HAL_GPIO_Init+0x212>
 80032f4:	2303      	movs	r3, #3
 80032f6:	e004      	b.n	8003302 <HAL_GPIO_Init+0x212>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e002      	b.n	8003302 <HAL_GPIO_Init+0x212>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_GPIO_Init+0x212>
 8003300:	2300      	movs	r3, #0
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	f002 0203 	and.w	r2, r2, #3
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	4093      	lsls	r3, r2
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003312:	4937      	ldr	r1, [pc, #220]	; (80033f0 <HAL_GPIO_Init+0x300>)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003320:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_GPIO_Init+0x320>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003344:	4a32      	ldr	r2, [pc, #200]	; (8003410 <HAL_GPIO_Init+0x320>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800334a:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_GPIO_Init+0x320>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800336e:	4a28      	ldr	r2, [pc, #160]	; (8003410 <HAL_GPIO_Init+0x320>)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003374:	4b26      	ldr	r3, [pc, #152]	; (8003410 <HAL_GPIO_Init+0x320>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43db      	mvns	r3, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003398:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <HAL_GPIO_Init+0x320>)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800339e:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <HAL_GPIO_Init+0x320>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033c2:	4a13      	ldr	r2, [pc, #76]	; (8003410 <HAL_GPIO_Init+0x320>)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3301      	adds	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f ae91 	bne.w	8003100 <HAL_GPIO_Init+0x10>
  }
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40010000 	.word	0x40010000
 80033f4:	48000400 	.word	0x48000400
 80033f8:	48000800 	.word	0x48000800
 80033fc:	48000c00 	.word	0x48000c00
 8003400:	48001000 	.word	0x48001000
 8003404:	48001400 	.word	0x48001400
 8003408:	48001800 	.word	0x48001800
 800340c:	48001c00 	.word	0x48001c00
 8003410:	40010400 	.word	0x40010400

08003414 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003422:	e0c9      	b.n	80035b8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003424:	2201      	movs	r2, #1
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80bc 	beq.w	80035b2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800343a:	4a66      	ldr	r2, [pc, #408]	; (80035d4 <HAL_GPIO_DeInit+0x1c0>)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	3302      	adds	r3, #2
 8003442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003446:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4013      	ands	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003462:	d02b      	beq.n	80034bc <HAL_GPIO_DeInit+0xa8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a5c      	ldr	r2, [pc, #368]	; (80035d8 <HAL_GPIO_DeInit+0x1c4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d025      	beq.n	80034b8 <HAL_GPIO_DeInit+0xa4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a5b      	ldr	r2, [pc, #364]	; (80035dc <HAL_GPIO_DeInit+0x1c8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01f      	beq.n	80034b4 <HAL_GPIO_DeInit+0xa0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a5a      	ldr	r2, [pc, #360]	; (80035e0 <HAL_GPIO_DeInit+0x1cc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d019      	beq.n	80034b0 <HAL_GPIO_DeInit+0x9c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a59      	ldr	r2, [pc, #356]	; (80035e4 <HAL_GPIO_DeInit+0x1d0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <HAL_GPIO_DeInit+0x98>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_GPIO_DeInit+0x1d4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00d      	beq.n	80034a8 <HAL_GPIO_DeInit+0x94>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a57      	ldr	r2, [pc, #348]	; (80035ec <HAL_GPIO_DeInit+0x1d8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <HAL_GPIO_DeInit+0x90>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a56      	ldr	r2, [pc, #344]	; (80035f0 <HAL_GPIO_DeInit+0x1dc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_GPIO_DeInit+0x8c>
 800349c:	2307      	movs	r3, #7
 800349e:	e00e      	b.n	80034be <HAL_GPIO_DeInit+0xaa>
 80034a0:	2308      	movs	r3, #8
 80034a2:	e00c      	b.n	80034be <HAL_GPIO_DeInit+0xaa>
 80034a4:	2306      	movs	r3, #6
 80034a6:	e00a      	b.n	80034be <HAL_GPIO_DeInit+0xaa>
 80034a8:	2305      	movs	r3, #5
 80034aa:	e008      	b.n	80034be <HAL_GPIO_DeInit+0xaa>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e006      	b.n	80034be <HAL_GPIO_DeInit+0xaa>
 80034b0:	2303      	movs	r3, #3
 80034b2:	e004      	b.n	80034be <HAL_GPIO_DeInit+0xaa>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e002      	b.n	80034be <HAL_GPIO_DeInit+0xaa>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_GPIO_DeInit+0xaa>
 80034bc:	2300      	movs	r3, #0
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	f002 0203 	and.w	r2, r2, #3
 80034c4:	0092      	lsls	r2, r2, #2
 80034c6:	4093      	lsls	r3, r2
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d132      	bne.n	8003534 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80034ce:	4b49      	ldr	r3, [pc, #292]	; (80035f4 <HAL_GPIO_DeInit+0x1e0>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	4947      	ldr	r1, [pc, #284]	; (80035f4 <HAL_GPIO_DeInit+0x1e0>)
 80034d8:	4013      	ands	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <HAL_GPIO_DeInit+0x1e0>)
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	4943      	ldr	r1, [pc, #268]	; (80035f4 <HAL_GPIO_DeInit+0x1e0>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <HAL_GPIO_DeInit+0x1e0>)
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	4940      	ldr	r1, [pc, #256]	; (80035f4 <HAL_GPIO_DeInit+0x1e0>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80034f8:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <HAL_GPIO_DeInit+0x1e0>)
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	43db      	mvns	r3, r3
 8003500:	493c      	ldr	r1, [pc, #240]	; (80035f4 <HAL_GPIO_DeInit+0x1e0>)
 8003502:	4013      	ands	r3, r2
 8003504:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	220f      	movs	r2, #15
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003516:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <HAL_GPIO_DeInit+0x1c0>)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	3302      	adds	r3, #2
 800351e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	43da      	mvns	r2, r3
 8003526:	482b      	ldr	r0, [pc, #172]	; (80035d4 <HAL_GPIO_DeInit+0x1c0>)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	400a      	ands	r2, r1
 800352e:	3302      	adds	r3, #2
 8003530:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2103      	movs	r1, #3
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	08da      	lsrs	r2, r3, #3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3208      	adds	r2, #8
 8003550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	08d2      	lsrs	r2, r2, #3
 8003568:	4019      	ands	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2103      	movs	r1, #3
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	401a      	ands	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	2101      	movs	r1, #1
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	401a      	ands	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	2103      	movs	r1, #3
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	401a      	ands	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	3301      	adds	r3, #1
 80035b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f47f af2f 	bne.w	8003424 <HAL_GPIO_DeInit+0x10>
  }
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40010000 	.word	0x40010000
 80035d8:	48000400 	.word	0x48000400
 80035dc:	48000800 	.word	0x48000800
 80035e0:	48000c00 	.word	0x48000c00
 80035e4:	48001000 	.word	0x48001000
 80035e8:	48001400 	.word	0x48001400
 80035ec:	48001800 	.word	0x48001800
 80035f0:	48001c00 	.word	0x48001c00
 80035f4:	40010400 	.word	0x40010400

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003614:	e002      	b.n	800361c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe f996 	bl	8001978 <HAL_GPIO_EXTI_Callback>
  }
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40010400 	.word	0x40010400

08003658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e081      	b.n	800376e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8a8 	bl	80037d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	e006      	b.n	80036e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d104      	bne.n	80036f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003704:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003714:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	ea42 0103 	orr.w	r1, r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e021      	b.n	80037cc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f821 	bl	80037e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	4608      	mov	r0, r1
 8003806:	4611      	mov	r1, r2
 8003808:	461a      	mov	r2, r3
 800380a:	4603      	mov	r3, r0
 800380c:	817b      	strh	r3, [r7, #10]
 800380e:	460b      	mov	r3, r1
 8003810:	813b      	strh	r3, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b20      	cmp	r3, #32
 8003820:	f040 80f9 	bne.w	8003a16 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_I2C_Mem_Write+0x34>
 800382a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0ed      	b.n	8003a18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_I2C_Mem_Write+0x4e>
 8003846:	2302      	movs	r3, #2
 8003848:	e0e6      	b.n	8003a18 <HAL_I2C_Mem_Write+0x21c>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003852:	f7ff fa45 	bl	8002ce0 <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2319      	movs	r3, #25
 800385e:	2201      	movs	r2, #1
 8003860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fadd 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d1      	b.n	8003a18 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2221      	movs	r2, #33	; 0x21
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2240      	movs	r2, #64	; 0x40
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800389c:	88f8      	ldrh	r0, [r7, #6]
 800389e:	893a      	ldrh	r2, [r7, #8]
 80038a0:	8979      	ldrh	r1, [r7, #10]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	4603      	mov	r3, r0
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f9ed 	bl	8003c8c <I2C_RequestMemoryWrite>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0a9      	b.n	8003a18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2bff      	cmp	r3, #255	; 0xff
 80038cc:	d90e      	bls.n	80038ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	22ff      	movs	r2, #255	; 0xff
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	8979      	ldrh	r1, [r7, #10]
 80038dc:	2300      	movs	r3, #0
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fbbf 	bl	8004068 <I2C_TransferConfig>
 80038ea:	e00f      	b.n	800390c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	8979      	ldrh	r1, [r7, #10]
 80038fe:	2300      	movs	r3, #0
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fbae 	bl	8004068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fac7 	bl	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e07b      	b.n	8003a18 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d034      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x1c8>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d130      	bne.n	80039c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	2200      	movs	r2, #0
 800396a:	2180      	movs	r1, #128	; 0x80
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fa59 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e04d      	b.n	8003a18 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2bff      	cmp	r3, #255	; 0xff
 8003984:	d90e      	bls.n	80039a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	b2da      	uxtb	r2, r3
 8003992:	8979      	ldrh	r1, [r7, #10]
 8003994:	2300      	movs	r3, #0
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fb63 	bl	8004068 <I2C_TransferConfig>
 80039a2:	e00f      	b.n	80039c4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	8979      	ldrh	r1, [r7, #10]
 80039b6:	2300      	movs	r3, #0
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fb52 	bl	8004068 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d19e      	bne.n	800390c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 faa6 	bl	8003f24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e01a      	b.n	8003a18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2220      	movs	r2, #32
 80039e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_I2C_Mem_Write+0x224>)
 80039f6:	400b      	ands	r3, r1
 80039f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	fe00e800 	.word	0xfe00e800

08003a24 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	4611      	mov	r1, r2
 8003a30:	461a      	mov	r2, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	817b      	strh	r3, [r7, #10]
 8003a36:	460b      	mov	r3, r1
 8003a38:	813b      	strh	r3, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	f040 80fd 	bne.w	8003c46 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x34>
 8003a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0f1      	b.n	8003c48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2C_Mem_Read+0x4e>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e0ea      	b.n	8003c48 <HAL_I2C_Mem_Read+0x224>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a7a:	f7ff f931 	bl	8002ce0 <HAL_GetTick>
 8003a7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2319      	movs	r3, #25
 8003a86:	2201      	movs	r2, #1
 8003a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f9c9 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0d5      	b.n	8003c48 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2222      	movs	r2, #34	; 0x22
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2240      	movs	r2, #64	; 0x40
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a3a      	ldr	r2, [r7, #32]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ac4:	88f8      	ldrh	r0, [r7, #6]
 8003ac6:	893a      	ldrh	r2, [r7, #8]
 8003ac8:	8979      	ldrh	r1, [r7, #10]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f92d 	bl	8003d34 <I2C_RequestMemoryRead>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0ad      	b.n	8003c48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2bff      	cmp	r3, #255	; 0xff
 8003af4:	d90e      	bls.n	8003b14 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	22ff      	movs	r2, #255	; 0xff
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	8979      	ldrh	r1, [r7, #10]
 8003b04:	4b52      	ldr	r3, [pc, #328]	; (8003c50 <HAL_I2C_Mem_Read+0x22c>)
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 faab 	bl	8004068 <I2C_TransferConfig>
 8003b12:	e00f      	b.n	8003b34 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	8979      	ldrh	r1, [r7, #10]
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_I2C_Mem_Read+0x22c>)
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fa9a 	bl	8004068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f970 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e07c      	b.n	8003c48 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d034      	beq.n	8003bf4 <HAL_I2C_Mem_Read+0x1d0>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d130      	bne.n	8003bf4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f941 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e04d      	b.n	8003c48 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2bff      	cmp	r3, #255	; 0xff
 8003bb4:	d90e      	bls.n	8003bd4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	22ff      	movs	r2, #255	; 0xff
 8003bba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	8979      	ldrh	r1, [r7, #10]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fa4b 	bl	8004068 <I2C_TransferConfig>
 8003bd2:	e00f      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	8979      	ldrh	r1, [r7, #10]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fa3a 	bl	8004068 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d19a      	bne.n	8003b34 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f98e 	bl	8003f24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e01a      	b.n	8003c48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2220      	movs	r2, #32
 8003c18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_I2C_Mem_Read+0x230>)
 8003c26:	400b      	ands	r3, r1
 8003c28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e000      	b.n	8003c48 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
  }
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	80002400 	.word	0x80002400
 8003c54:	fe00e800 	.word	0xfe00e800

08003c58 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c66:	b2db      	uxtb	r3, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	4608      	mov	r0, r1
 8003c96:	4611      	mov	r1, r2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	817b      	strh	r3, [r7, #10]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	813b      	strh	r3, [r7, #8]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	8979      	ldrh	r1, [r7, #10]
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <I2C_RequestMemoryWrite+0xa4>)
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f9d7 	bl	8004068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f8f0 	bl	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e02c      	b.n	8003d28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd4:	893b      	ldrh	r3, [r7, #8]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28
 8003cde:	e015      	b.n	8003d0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ce0:	893b      	ldrh	r3, [r7, #8]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	69b9      	ldr	r1, [r7, #24]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f8d6 	bl	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e012      	b.n	8003d28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2200      	movs	r2, #0
 8003d14:	2180      	movs	r1, #128	; 0x80
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f884 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	80002000 	.word	0x80002000

08003d34 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	461a      	mov	r2, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	817b      	strh	r3, [r7, #10]
 8003d46:	460b      	mov	r3, r1
 8003d48:	813b      	strh	r3, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	8979      	ldrh	r1, [r7, #10]
 8003d54:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <I2C_RequestMemoryRead+0xa4>)
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f984 	bl	8004068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	69b9      	ldr	r1, [r7, #24]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f89d 	bl	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e02c      	b.n	8003dce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7a:	893b      	ldrh	r3, [r7, #8]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
 8003d84:	e015      	b.n	8003db2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d86:	893b      	ldrh	r3, [r7, #8]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f883 	bl	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e012      	b.n	8003dce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003da8:	893b      	ldrh	r3, [r7, #8]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2200      	movs	r2, #0
 8003dba:	2140      	movs	r1, #64	; 0x40
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f831 	bl	8003e24 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	80002000 	.word	0x80002000

08003ddc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d103      	bne.n	8003dfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d007      	beq.n	8003e18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	619a      	str	r2, [r3, #24]
  }
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e34:	e022      	b.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d01e      	beq.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3e:	f7fe ff4f 	bl	8002ce0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d302      	bcc.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d113      	bne.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e00f      	b.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4013      	ands	r3, r2
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d0cd      	beq.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb0:	e02c      	b.n	8003f0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f870 	bl	8003f9c <I2C_IsAcknowledgeFailed>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e02a      	b.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d01e      	beq.n	8003f0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fe ff07 	bl	8002ce0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d113      	bne.n	8003f0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	f043 0220 	orr.w	r2, r3, #32
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e007      	b.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d1cb      	bne.n	8003eb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f30:	e028      	b.n	8003f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f830 	bl	8003f9c <I2C_IsAcknowledgeFailed>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e026      	b.n	8003f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f46:	f7fe fecb 	bl	8002ce0 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d302      	bcc.n	8003f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d113      	bne.n	8003f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e007      	b.n	8003f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d1cf      	bne.n	8003f32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d151      	bne.n	800405a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fb6:	e022      	b.n	8003ffe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d01e      	beq.n	8003ffe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc0:	f7fe fe8e 	bl	8002ce0 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <I2C_IsAcknowledgeFailed+0x3a>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d113      	bne.n	8003ffe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e02e      	b.n	800405c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b20      	cmp	r3, #32
 800400a:	d1d5      	bne.n	8003fb8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2210      	movs	r2, #16
 8004012:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2220      	movs	r2, #32
 800401a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7ff fedd 	bl	8003ddc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <I2C_IsAcknowledgeFailed+0xc8>)
 800402e:	400b      	ands	r3, r1
 8004030:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	fe00e800 	.word	0xfe00e800

08004068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	4613      	mov	r3, r2
 8004078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	0d5b      	lsrs	r3, r3, #21
 8004084:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <I2C_TransferConfig+0x58>)
 800408a:	430b      	orrs	r3, r1
 800408c:	43db      	mvns	r3, r3
 800408e:	ea02 0103 	and.w	r1, r2, r3
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004098:	7a7b      	ldrb	r3, [r7, #9]
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	03ff63ff 	.word	0x03ff63ff

080040c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d138      	bne.n	800414c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e032      	b.n	800414e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	; 0x24
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004116:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b20      	cmp	r3, #32
 800416e:	d139      	bne.n	80041e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800417a:	2302      	movs	r3, #2
 800417c:	e033      	b.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2224      	movs	r2, #36	; 0x24
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e000      	b.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041f8:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d102      	bne.n	800420c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800420a:	e00b      	b.n	8004224 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_PWREx_GetVoltageRange+0x3c>)
 800420e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421a:	d102      	bne.n	8004222 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800421c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004220:	e000      	b.n	8004224 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004222:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d141      	bne.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004242:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424e:	d131      	bne.n	80042b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004250:	4b47      	ldr	r3, [pc, #284]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004256:	4a46      	ldr	r2, [pc, #280]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004260:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004268:	4a41      	ldr	r2, [pc, #260]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800426e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004270:	4b40      	ldr	r3, [pc, #256]	; (8004374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2232      	movs	r2, #50	; 0x32
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	4a3f      	ldr	r2, [pc, #252]	; (8004378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	0c9b      	lsrs	r3, r3, #18
 8004282:	3301      	adds	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004286:	e002      	b.n	800428e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3b01      	subs	r3, #1
 800428c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800428e:	4b38      	ldr	r3, [pc, #224]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429a:	d102      	bne.n	80042a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f2      	bne.n	8004288 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042a2:	4b33      	ldr	r3, [pc, #204]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ae:	d158      	bne.n	8004362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e057      	b.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042b4:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ba:	4a2d      	ldr	r2, [pc, #180]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042c4:	e04d      	b.n	8004362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042cc:	d141      	bne.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ce:	4b28      	ldr	r3, [pc, #160]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d131      	bne.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042dc:	4b24      	ldr	r3, [pc, #144]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e2:	4a23      	ldr	r2, [pc, #140]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ec:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042f4:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2232      	movs	r2, #50	; 0x32
 8004302:	fb02 f303 	mul.w	r3, r2, r3
 8004306:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	0c9b      	lsrs	r3, r3, #18
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004312:	e002      	b.n	800431a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3b01      	subs	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004326:	d102      	bne.n	800432e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f2      	bne.n	8004314 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d112      	bne.n	8004362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e011      	b.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004346:	4a0a      	ldr	r2, [pc, #40]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004350:	e007      	b.n	8004362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004360:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40007000 	.word	0x40007000
 8004374:	2000000c 	.word	0x2000000c
 8004378:	431bde83 	.word	0x431bde83

0800437c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f000 bc16 	b.w	8004bbc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004390:	4ba0      	ldr	r3, [pc, #640]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800439a:	4b9e      	ldr	r3, [pc, #632]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80e4 	beq.w	800457a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_RCC_OscConfig+0x4c>
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b0c      	cmp	r3, #12
 80043bc:	f040 808b 	bne.w	80044d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	f040 8087 	bne.w	80044d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043c8:	4b92      	ldr	r3, [pc, #584]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_RCC_OscConfig+0x64>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e3ed      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1a      	ldr	r2, [r3, #32]
 80043e4:	4b8b      	ldr	r3, [pc, #556]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <HAL_RCC_OscConfig+0x7e>
 80043f0:	4b88      	ldr	r3, [pc, #544]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f8:	e005      	b.n	8004406 <HAL_RCC_OscConfig+0x8a>
 80043fa:	4b86      	ldr	r3, [pc, #536]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80043fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004406:	4293      	cmp	r3, r2
 8004408:	d223      	bcs.n	8004452 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fdc8 	bl	8004fa4 <RCC_SetFlashLatencyFromMSIRange>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e3ce      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800441e:	4b7d      	ldr	r3, [pc, #500]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a7c      	ldr	r2, [pc, #496]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004424:	f043 0308 	orr.w	r3, r3, #8
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b7a      	ldr	r3, [pc, #488]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	4977      	ldr	r1, [pc, #476]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443c:	4b75      	ldr	r3, [pc, #468]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	4972      	ldr	r1, [pc, #456]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
 8004450:	e025      	b.n	800449e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004452:	4b70      	ldr	r3, [pc, #448]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a6f      	ldr	r2, [pc, #444]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b6d      	ldr	r3, [pc, #436]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	496a      	ldr	r1, [pc, #424]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004470:	4b68      	ldr	r3, [pc, #416]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	4965      	ldr	r1, [pc, #404]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fd88 	bl	8004fa4 <RCC_SetFlashLatencyFromMSIRange>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e38e      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800449e:	f000 fcbf 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 80044a2:	4601      	mov	r1, r0
 80044a4:	4b5b      	ldr	r3, [pc, #364]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	4a5a      	ldr	r2, [pc, #360]	; (8004618 <HAL_RCC_OscConfig+0x29c>)
 80044b0:	5cd3      	ldrb	r3, [r2, r3]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	fa21 f303 	lsr.w	r3, r1, r3
 80044ba:	4a58      	ldr	r2, [pc, #352]	; (800461c <HAL_RCC_OscConfig+0x2a0>)
 80044bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044be:	4b58      	ldr	r3, [pc, #352]	; (8004620 <HAL_RCC_OscConfig+0x2a4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fbbc 	bl	8002c40 <HAL_InitTick>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d052      	beq.n	8004578 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	e372      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d032      	beq.n	8004544 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044de:	4b4d      	ldr	r3, [pc, #308]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a4c      	ldr	r2, [pc, #304]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044ea:	f7fe fbf9 	bl	8002ce0 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044f2:	f7fe fbf5 	bl	8002ce0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e35b      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004504:	4b43      	ldr	r3, [pc, #268]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004510:	4b40      	ldr	r3, [pc, #256]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3f      	ldr	r2, [pc, #252]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004516:	f043 0308 	orr.w	r3, r3, #8
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	493a      	ldr	r1, [pc, #232]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800452a:	4313      	orrs	r3, r2
 800452c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452e:	4b39      	ldr	r3, [pc, #228]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	4935      	ldr	r1, [pc, #212]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
 8004542:	e01a      	b.n	800457a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004544:	4b33      	ldr	r3, [pc, #204]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a32      	ldr	r2, [pc, #200]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004550:	f7fe fbc6 	bl	8002ce0 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004558:	f7fe fbc2 	bl	8002ce0 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e328      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1dc>
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004578:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d073      	beq.n	800466e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d005      	beq.n	8004598 <HAL_RCC_OscConfig+0x21c>
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d10e      	bne.n	80045b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d10b      	bne.n	80045b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d063      	beq.n	800466c <HAL_RCC_OscConfig+0x2f0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d15f      	bne.n	800466c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e305      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x24c>
 80045ba:	4b16      	ldr	r3, [pc, #88]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e01d      	b.n	8004604 <HAL_RCC_OscConfig+0x288>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x270>
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a0f      	ldr	r2, [pc, #60]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a0c      	ldr	r2, [pc, #48]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0x288>
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a08      	ldr	r2, [pc, #32]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a05      	ldr	r2, [pc, #20]	; (8004614 <HAL_RCC_OscConfig+0x298>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01b      	beq.n	8004644 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fe fb68 	bl	8002ce0 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004612:	e010      	b.n	8004636 <HAL_RCC_OscConfig+0x2ba>
 8004614:	40021000 	.word	0x40021000
 8004618:	0800bb9c 	.word	0x0800bb9c
 800461c:	2000000c 	.word	0x2000000c
 8004620:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004624:	f7fe fb5c 	bl	8002ce0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e2c2      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004636:	4baf      	ldr	r3, [pc, #700]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x2a8>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fe fb4c 	bl	8002ce0 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fe fb48 	bl	8002ce0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e2ae      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465e:	4ba5      	ldr	r3, [pc, #660]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x2d0>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d060      	beq.n	800473c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2b04      	cmp	r3, #4
 800467e:	d005      	beq.n	800468c <HAL_RCC_OscConfig+0x310>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b0c      	cmp	r3, #12
 8004684:	d119      	bne.n	80046ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d116      	bne.n	80046ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800468c:	4b99      	ldr	r3, [pc, #612]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_OscConfig+0x328>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e28b      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a4:	4b93      	ldr	r3, [pc, #588]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	4990      	ldr	r1, [pc, #576]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b8:	e040      	b.n	800473c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d023      	beq.n	800470a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c2:	4b8c      	ldr	r3, [pc, #560]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a8b      	ldr	r2, [pc, #556]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fe fb07 	bl	8002ce0 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d6:	f7fe fb03 	bl	8002ce0 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e269      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e8:	4b82      	ldr	r3, [pc, #520]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f4:	4b7f      	ldr	r3, [pc, #508]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	497c      	ldr	r1, [pc, #496]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004704:	4313      	orrs	r3, r2
 8004706:	604b      	str	r3, [r1, #4]
 8004708:	e018      	b.n	800473c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470a:	4b7a      	ldr	r3, [pc, #488]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a79      	ldr	r2, [pc, #484]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004716:	f7fe fae3 	bl	8002ce0 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800471e:	f7fe fadf 	bl	8002ce0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e245      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004730:	4b70      	ldr	r3, [pc, #448]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f0      	bne.n	800471e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d03c      	beq.n	80047c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01c      	beq.n	800478a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004750:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004756:	4a67      	ldr	r2, [pc, #412]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004760:	f7fe fabe 	bl	8002ce0 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004768:	f7fe faba 	bl	8002ce0 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e220      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800477a:	4b5e      	ldr	r3, [pc, #376]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 800477c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ef      	beq.n	8004768 <HAL_RCC_OscConfig+0x3ec>
 8004788:	e01b      	b.n	80047c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478a:	4b5a      	ldr	r3, [pc, #360]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004790:	4a58      	ldr	r2, [pc, #352]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fe faa1 	bl	8002ce0 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a2:	f7fe fa9d 	bl	8002ce0 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e203      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b4:	4b4f      	ldr	r3, [pc, #316]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1ef      	bne.n	80047a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80a6 	beq.w	800491c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047d4:	4b47      	ldr	r3, [pc, #284]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10d      	bne.n	80047fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e0:	4b44      	ldr	r3, [pc, #272]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	4a43      	ldr	r2, [pc, #268]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80047e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ea:	6593      	str	r3, [r2, #88]	; 0x58
 80047ec:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f8:	2301      	movs	r3, #1
 80047fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fc:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <HAL_RCC_OscConfig+0x57c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d118      	bne.n	800483a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004808:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_OscConfig+0x57c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a3a      	ldr	r2, [pc, #232]	; (80048f8 <HAL_RCC_OscConfig+0x57c>)
 800480e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004814:	f7fe fa64 	bl	8002ce0 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481c:	f7fe fa60 	bl	8002ce0 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e1c6      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482e:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <HAL_RCC_OscConfig+0x57c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d108      	bne.n	8004854 <HAL_RCC_OscConfig+0x4d8>
 8004842:	4b2c      	ldr	r3, [pc, #176]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004848:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004852:	e024      	b.n	800489e <HAL_RCC_OscConfig+0x522>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b05      	cmp	r3, #5
 800485a:	d110      	bne.n	800487e <HAL_RCC_OscConfig+0x502>
 800485c:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	4a24      	ldr	r2, [pc, #144]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004864:	f043 0304 	orr.w	r3, r3, #4
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800486c:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	4a20      	ldr	r2, [pc, #128]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800487c:	e00f      	b.n	800489e <HAL_RCC_OscConfig+0x522>
 800487e:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800488e:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004894:	4a17      	ldr	r2, [pc, #92]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 8004896:	f023 0304 	bic.w	r3, r3, #4
 800489a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a6:	f7fe fa1b 	bl	8002ce0 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ae:	f7fe fa17 	bl	8002ce0 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e17b      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_OscConfig+0x578>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ed      	beq.n	80048ae <HAL_RCC_OscConfig+0x532>
 80048d2:	e01a      	b.n	800490a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fe fa04 	bl	8002ce0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048da:	e00f      	b.n	80048fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fe fa00 	bl	8002ce0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d906      	bls.n	80048fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e164      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048fc:	4ba8      	ldr	r3, [pc, #672]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e8      	bne.n	80048dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800490a:	7ffb      	ldrb	r3, [r7, #31]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d105      	bne.n	800491c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004910:	4ba3      	ldr	r3, [pc, #652]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	4aa2      	ldr	r2, [pc, #648]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800491a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d03c      	beq.n	80049a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01c      	beq.n	800496a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004930:	4b9b      	ldr	r3, [pc, #620]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004936:	4a9a      	ldr	r2, [pc, #616]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fe f9ce 	bl	8002ce0 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004948:	f7fe f9ca 	bl	8002ce0 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e130      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800495a:	4b91      	ldr	r3, [pc, #580]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 800495c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ef      	beq.n	8004948 <HAL_RCC_OscConfig+0x5cc>
 8004968:	e01b      	b.n	80049a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800496a:	4b8d      	ldr	r3, [pc, #564]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 800496c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004970:	4a8b      	ldr	r2, [pc, #556]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fe f9b1 	bl	8002ce0 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004982:	f7fe f9ad 	bl	8002ce0 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e113      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004994:	4b82      	ldr	r3, [pc, #520]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1ef      	bne.n	8004982 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8107 	beq.w	8004bba <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	f040 80cb 	bne.w	8004b4c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049b6:	4b7a      	ldr	r3, [pc, #488]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 0203 	and.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d12c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	3b01      	subs	r3, #1
 80049d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d123      	bne.n	8004a24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d11b      	bne.n	8004a24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d113      	bne.n	8004a24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d109      	bne.n	8004a24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d06d      	beq.n	8004b00 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d068      	beq.n	8004afc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a36:	4b5a      	ldr	r3, [pc, #360]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e0ba      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a46:	4b56      	ldr	r3, [pc, #344]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a55      	ldr	r2, [pc, #340]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a52:	f7fe f945 	bl	8002ce0 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fe f941 	bl	8002ce0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0a7      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f0      	bne.n	8004a5a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a78:	4b49      	ldr	r3, [pc, #292]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	4b49      	ldr	r3, [pc, #292]	; (8004ba4 <HAL_RCC_OscConfig+0x828>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	0112      	lsls	r2, r2, #4
 8004a8c:	4311      	orrs	r1, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a92:	0212      	lsls	r2, r2, #8
 8004a94:	4311      	orrs	r1, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a9a:	0852      	lsrs	r2, r2, #1
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	0552      	lsls	r2, r2, #21
 8004aa0:	4311      	orrs	r1, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aa6:	0852      	lsrs	r2, r2, #1
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	0652      	lsls	r2, r2, #25
 8004aac:	4311      	orrs	r1, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab2:	06d2      	lsls	r2, r2, #27
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	493a      	ldr	r1, [pc, #232]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004abc:	4b38      	ldr	r3, [pc, #224]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a37      	ldr	r2, [pc, #220]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ad4:	f7fe f904 	bl	8002ce0 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fe f900 	bl	8002ce0 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e066      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004afa:	e05e      	b.n	8004bba <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e05d      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d156      	bne.n	8004bba <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a23      	ldr	r2, [pc, #140]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b18:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b24:	f7fe f8dc 	bl	8002ce0 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fe f8d8 	bl	8002ce0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e03e      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3e:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x7b0>
 8004b4a:	e036      	b.n	8004bba <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d031      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b70:	f023 0303 	bic.w	r3, r3, #3
 8004b74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <HAL_RCC_OscConfig+0x824>)
 8004b7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fe f8ab 	bl	8002ce0 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b8c:	e00c      	b.n	8004ba8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8e:	f7fe f8a7 	bl	8002ce0 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d905      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e00d      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_RCC_OscConfig+0x848>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1ec      	bne.n	8004b8e <HAL_RCC_OscConfig+0x812>
 8004bb4:	e001      	b.n	8004bba <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e10f      	b.n	8004e00 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b89      	ldr	r3, [pc, #548]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d910      	bls.n	8004c10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b86      	ldr	r3, [pc, #536]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 020f 	bic.w	r2, r3, #15
 8004bf6:	4984      	ldr	r1, [pc, #528]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b82      	ldr	r3, [pc, #520]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0f7      	b.n	8004e00 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8089 	beq.w	8004d30 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d133      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c26:	4b79      	ldr	r3, [pc, #484]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0e4      	b.n	8004e00 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004c36:	f000 fa0f 	bl	8005058 <RCC_GetSysClockFreqFromPLLSource>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4b74      	ldr	r3, [pc, #464]	; (8004e10 <HAL_RCC_ClockConfig+0x248>)
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d955      	bls.n	8004cee <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c42:	4b72      	ldr	r3, [pc, #456]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c4e:	4b6f      	ldr	r3, [pc, #444]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c56:	4a6d      	ldr	r2, [pc, #436]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e044      	b.n	8004cee <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d03e      	beq.n	8004cee <HAL_RCC_ClockConfig+0x126>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d13a      	bne.n	8004cee <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c78:	4b64      	ldr	r3, [pc, #400]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c80:	4a62      	ldr	r2, [pc, #392]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c86:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e02f      	b.n	8004cee <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c96:	4b5d      	ldr	r3, [pc, #372]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d115      	bne.n	8004cce <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e0ac      	b.n	8004e00 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cae:	4b57      	ldr	r3, [pc, #348]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0a0      	b.n	8004e00 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbe:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e098      	b.n	8004e00 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004cce:	f000 f8a7 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b4e      	ldr	r3, [pc, #312]	; (8004e10 <HAL_RCC_ClockConfig+0x248>)
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d909      	bls.n	8004cee <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cda:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ce2:	4a4a      	ldr	r2, [pc, #296]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cee:	4b47      	ldr	r3, [pc, #284]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f023 0203 	bic.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4944      	ldr	r1, [pc, #272]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d00:	f7fd ffee 	bl	8002ce0 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d08:	f7fd ffea 	bl	8002ce0 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e070      	b.n	8004e00 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 020c 	and.w	r2, r3, #12
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d1eb      	bne.n	8004d08 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d3c:	4b33      	ldr	r3, [pc, #204]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	4930      	ldr	r1, [pc, #192]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d105      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d56:	4b2d      	ldr	r3, [pc, #180]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d60:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d62:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d210      	bcs.n	8004d92 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f023 020f 	bic.w	r2, r3, #15
 8004d78:	4923      	ldr	r1, [pc, #140]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d80:	4b21      	ldr	r3, [pc, #132]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e036      	b.n	8004e00 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	4918      	ldr	r1, [pc, #96]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d009      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4910      	ldr	r1, [pc, #64]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dd0:	f000 f826 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 8004dd4:	4601      	mov	r1, r0
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <HAL_RCC_ClockConfig+0x24c>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	fa21 f303 	lsr.w	r3, r1, r3
 8004dec:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <HAL_RCC_ClockConfig+0x250>)
 8004dee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <HAL_RCC_ClockConfig+0x254>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fd ff23 	bl	8002c40 <HAL_InitTick>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	73fb      	strb	r3, [r7, #15]

  return status;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40022000 	.word	0x40022000
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	04c4b400 	.word	0x04c4b400
 8004e14:	0800bb9c 	.word	0x0800bb9c
 8004e18:	2000000c 	.word	0x2000000c
 8004e1c:	20000010 	.word	0x20000010

08004e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b089      	sub	sp, #36	; 0x24
 8004e24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2e:	4b3d      	ldr	r3, [pc, #244]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e38:	4b3a      	ldr	r3, [pc, #232]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0x34>
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d121      	bne.n	8004e92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d11e      	bne.n	8004e92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e54:	4b33      	ldr	r3, [pc, #204]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e60:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e66:	0a1b      	lsrs	r3, r3, #8
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	e005      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e70:	4b2c      	ldr	r3, [pc, #176]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e7c:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10d      	bne.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d102      	bne.n	8004e9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e98:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e004      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ea4:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ea6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b0c      	cmp	r3, #12
 8004eac:	d133      	bne.n	8004f16 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eae:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x104>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0xa4>
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d003      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0xaa>
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ec4:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ec6:	617b      	str	r3, [r7, #20]
      break;
 8004ec8:	e005      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004eca:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ecc:	617b      	str	r3, [r7, #20]
      break;
 8004ece:	e002      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	617b      	str	r3, [r7, #20]
      break;
 8004ed4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ed6:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	0a1b      	lsrs	r3, r3, #8
 8004eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	fb02 f203 	mul.w	r2, r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x104>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	0e5b      	lsrs	r3, r3, #25
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	3301      	adds	r3, #1
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f16:	69bb      	ldr	r3, [r7, #24]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3724      	adds	r7, #36	; 0x24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	40021000 	.word	0x40021000
 8004f28:	0800bbb4 	.word	0x0800bbb4
 8004f2c:	00f42400 	.word	0x00f42400
 8004f30:	007a1200 	.word	0x007a1200

08004f34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f38:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	2000000c 	.word	0x2000000c

08004f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f50:	f7ff fff0 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f54:	4601      	mov	r1, r0
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f62:	5cd3      	ldrb	r3, [r2, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	0800bbac 	.word	0x0800bbac

08004f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f7c:	f7ff ffda 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f80:	4601      	mov	r1, r0
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	0adb      	lsrs	r3, r3, #11
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f8e:	5cd3      	ldrb	r3, [r2, r3]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	0800bbac 	.word	0x0800bbac

08004fa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fb0:	4b27      	ldr	r3, [pc, #156]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fbc:	f7ff f91a 	bl	80041f4 <HAL_PWREx_GetVoltageRange>
 8004fc0:	6178      	str	r0, [r7, #20]
 8004fc2:	e014      	b.n	8004fee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fc4:	4b22      	ldr	r3, [pc, #136]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	4a21      	ldr	r2, [pc, #132]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fce:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd0:	4b1f      	ldr	r3, [pc, #124]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fdc:	f7ff f90a 	bl	80041f4 <HAL_PWREx_GetVoltageRange>
 8004fe0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff4:	d10b      	bne.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b80      	cmp	r3, #128	; 0x80
 8004ffa:	d913      	bls.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2ba0      	cmp	r3, #160	; 0xa0
 8005000:	d902      	bls.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005002:	2302      	movs	r3, #2
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	e00d      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005008:	2301      	movs	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	e00a      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b7f      	cmp	r3, #127	; 0x7f
 8005012:	d902      	bls.n	800501a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005014:	2302      	movs	r3, #2
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	e004      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b70      	cmp	r3, #112	; 0x70
 800501e:	d101      	bne.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005020:	2301      	movs	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 020f 	bic.w	r2, r3, #15
 800502c:	4909      	ldr	r1, [pc, #36]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	429a      	cmp	r2, r3
 8005040:	d001      	beq.n	8005046 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	40022000 	.word	0x40022000

08005058 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005062:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d118      	bne.n	80050a0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800506e:	4b2a      	ldr	r3, [pc, #168]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d107      	bne.n	800508a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800507a:	4b27      	ldr	r3, [pc, #156]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800507c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	e005      	b.n	8005096 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005096:	4a21      	ldr	r2, [pc, #132]	; (800511c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d002      	beq.n	80050b6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d003      	beq.n	80050bc <RCC_GetSysClockFreqFromPLLSource+0x64>
 80050b4:	e005      	b.n	80050c2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80050b8:	613b      	str	r3, [r7, #16]
    break;
 80050ba:	e005      	b.n	80050c8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80050bc:	4b19      	ldr	r3, [pc, #100]	; (8005124 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050be:	613b      	str	r3, [r7, #16]
    break;
 80050c0:	e002      	b.n	80050c8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	613b      	str	r3, [r7, #16]
    break;
 80050c6:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050c8:	4b13      	ldr	r3, [pc, #76]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	3301      	adds	r3, #1
 80050d4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	fb02 f203 	mul.w	r2, r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	0e5b      	lsrs	r3, r3, #25
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	3301      	adds	r3, #1
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005108:	683b      	ldr	r3, [r7, #0]
}
 800510a:	4618      	mov	r0, r3
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000
 800511c:	0800bbb4 	.word	0x0800bbb4
 8005120:	00f42400 	.word	0x00f42400
 8005124:	007a1200 	.word	0x007a1200

08005128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005130:	2300      	movs	r3, #0
 8005132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005134:	2300      	movs	r3, #0
 8005136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005140:	2b00      	cmp	r3, #0
 8005142:	d03d      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d00b      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d804      	bhi.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00e      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d015      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005158:	e01d      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800515a:	2b60      	cmp	r3, #96	; 0x60
 800515c:	d01e      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800515e:	2b80      	cmp	r3, #128	; 0x80
 8005160:	d01c      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005162:	e018      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005164:	4b86      	ldr	r3, [pc, #536]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4a85      	ldr	r2, [pc, #532]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800516a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005170:	e015      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3304      	adds	r3, #4
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fafd 	bl	8005778 <RCCEx_PLLSAI1_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005182:	e00c      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3320      	adds	r3, #32
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fbe4 	bl	8005958 <RCCEx_PLLSAI2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005194:	e003      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	74fb      	strb	r3, [r7, #19]
      break;
 800519a:	e000      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 800519c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800519e:	7cfb      	ldrb	r3, [r7, #19]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051a4:	4b76      	ldr	r3, [pc, #472]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051aa:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b2:	4973      	ldr	r1, [pc, #460]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80051ba:	e001      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d042      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d4:	d00f      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80051d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051da:	d805      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d011      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80051e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e4:	d017      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80051e6:	e01f      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80051e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ec:	d01f      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f2:	d01c      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051f4:	e018      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051f6:	4b62      	ldr	r3, [pc, #392]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	4a61      	ldr	r2, [pc, #388]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005200:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005202:	e015      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3304      	adds	r3, #4
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fab4 	bl	8005778 <RCCEx_PLLSAI1_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005214:	e00c      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3320      	adds	r3, #32
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fb9b 	bl	8005958 <RCCEx_PLLSAI2_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005226:	e003      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	74fb      	strb	r3, [r7, #19]
      break;
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800522e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005236:	4b52      	ldr	r3, [pc, #328]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005238:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800523c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005244:	494e      	ldr	r1, [pc, #312]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800524c:	e001      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	7cfb      	ldrb	r3, [r7, #19]
 8005250:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 809f 	beq.w	800539e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005260:	2300      	movs	r3, #0
 8005262:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005264:	4b46      	ldr	r3, [pc, #280]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005274:	2300      	movs	r3, #0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800527a:	4b41      	ldr	r3, [pc, #260]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800527c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527e:	4a40      	ldr	r2, [pc, #256]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005284:	6593      	str	r3, [r2, #88]	; 0x58
 8005286:	4b3e      	ldr	r3, [pc, #248]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005292:	2301      	movs	r3, #1
 8005294:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005296:	4b3b      	ldr	r3, [pc, #236]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a3a      	ldr	r2, [pc, #232]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052a2:	f7fd fd1d 	bl	8002ce0 <HAL_GetTick>
 80052a6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052a8:	e009      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052aa:	f7fd fd19 	bl	8002ce0 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d902      	bls.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	74fb      	strb	r3, [r7, #19]
        break;
 80052bc:	e005      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052be:	4b31      	ldr	r3, [pc, #196]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0ef      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80052ca:	7cfb      	ldrb	r3, [r7, #19]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d15b      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052d0:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052da:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01f      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d019      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052fa:	4b21      	ldr	r3, [pc, #132]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800530a:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	4a1b      	ldr	r2, [pc, #108]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800531a:	4a19      	ldr	r2, [pc, #100]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d016      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532c:	f7fd fcd8 	bl	8002ce0 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005332:	e00b      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005334:	f7fd fcd4 	bl	8002ce0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d902      	bls.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	74fb      	strb	r3, [r7, #19]
            break;
 800534a:	e006      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800534c:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0ec      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800535a:	7cfb      	ldrb	r3, [r7, #19]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10c      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005360:	4b07      	ldr	r3, [pc, #28]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005370:	4903      	ldr	r1, [pc, #12]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005378:	e008      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800537a:	7cfb      	ldrb	r3, [r7, #19]
 800537c:	74bb      	strb	r3, [r7, #18]
 800537e:	e005      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005380:	40021000 	.word	0x40021000
 8005384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800538c:	7c7b      	ldrb	r3, [r7, #17]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d105      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005392:	4ba0      	ldr	r3, [pc, #640]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	4a9f      	ldr	r2, [pc, #636]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053aa:	4b9a      	ldr	r3, [pc, #616]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b0:	f023 0203 	bic.w	r2, r3, #3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	4996      	ldr	r1, [pc, #600]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053cc:	4b91      	ldr	r3, [pc, #580]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f023 020c 	bic.w	r2, r3, #12
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	498e      	ldr	r1, [pc, #568]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ee:	4b89      	ldr	r3, [pc, #548]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fc:	4985      	ldr	r1, [pc, #532]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005410:	4b80      	ldr	r3, [pc, #512]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541e:	497d      	ldr	r1, [pc, #500]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005432:	4b78      	ldr	r3, [pc, #480]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005440:	4974      	ldr	r1, [pc, #464]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005454:	4b6f      	ldr	r3, [pc, #444]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005462:	496c      	ldr	r1, [pc, #432]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005476:	4b67      	ldr	r3, [pc, #412]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005484:	4963      	ldr	r1, [pc, #396]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005498:	4b5e      	ldr	r3, [pc, #376]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a6:	495b      	ldr	r1, [pc, #364]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ba:	4b56      	ldr	r3, [pc, #344]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c8:	4952      	ldr	r1, [pc, #328]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054dc:	4b4d      	ldr	r3, [pc, #308]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	494a      	ldr	r1, [pc, #296]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054fe:	4b45      	ldr	r3, [pc, #276]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005504:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550c:	4941      	ldr	r1, [pc, #260]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005520:	4b3c      	ldr	r3, [pc, #240]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005526:	f023 0203 	bic.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552e:	4939      	ldr	r1, [pc, #228]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d028      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005542:	4b34      	ldr	r3, [pc, #208]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005550:	4930      	ldr	r1, [pc, #192]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005560:	d106      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005562:	4b2c      	ldr	r3, [pc, #176]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	4a2b      	ldr	r2, [pc, #172]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800556c:	60d3      	str	r3, [r2, #12]
 800556e:	e011      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005578:	d10c      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3304      	adds	r3, #4
 800557e:	2101      	movs	r1, #1
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f8f9 	bl	8005778 <RCCEx_PLLSAI1_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800558a:	7cfb      	ldrb	r3, [r7, #19]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005590:	7cfb      	ldrb	r3, [r7, #19]
 8005592:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d04d      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a8:	d108      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80055aa:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055b0:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055ba:	e012      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80055bc:	4b15      	ldr	r3, [pc, #84]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055c2:	4a14      	ldr	r2, [pc, #80]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055c8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055cc:	4b11      	ldr	r3, [pc, #68]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055da:	490e      	ldr	r1, [pc, #56]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ea:	d106      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a08      	ldr	r2, [pc, #32]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055f6:	60d3      	str	r3, [r2, #12]
 80055f8:	e020      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005602:	d109      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a02      	ldr	r2, [pc, #8]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560e:	60d3      	str	r3, [r2, #12]
 8005610:	e014      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005620:	d10c      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	2101      	movs	r1, #1
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f8a5 	bl	8005778 <RCCEx_PLLSAI1_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d028      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005648:	4b4a      	ldr	r3, [pc, #296]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005656:	4947      	ldr	r1, [pc, #284]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005666:	d106      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005668:	4b42      	ldr	r3, [pc, #264]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a41      	ldr	r2, [pc, #260]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800566e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005672:	60d3      	str	r3, [r2, #12]
 8005674:	e011      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800567e:	d10c      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	2101      	movs	r1, #1
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f876 	bl	8005778 <RCCEx_PLLSAI1_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01e      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a6:	4b33      	ldr	r3, [pc, #204]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b6:	492f      	ldr	r1, [pc, #188]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	2102      	movs	r1, #2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f851 	bl	8005778 <RCCEx_PLLSAI1_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056f0:	4b20      	ldr	r3, [pc, #128]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f6:	f023 0204 	bic.w	r2, r3, #4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005700:	491c      	ldr	r1, [pc, #112]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005714:	4b17      	ldr	r3, [pc, #92]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800571a:	f023 0218 	bic.w	r2, r3, #24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	4913      	ldr	r1, [pc, #76]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005738:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800573a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800573e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005748:	490a      	ldr	r1, [pc, #40]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800575a:	d105      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4a04      	ldr	r2, [pc, #16]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005766:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005768:	7cbb      	ldrb	r3, [r7, #18]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40021000 	.word	0x40021000

08005778 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005786:	4b70      	ldr	r3, [pc, #448]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00e      	beq.n	80057b0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005792:	4b6d      	ldr	r3, [pc, #436]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0203 	and.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d103      	bne.n	80057aa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
       ||
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d13f      	bne.n	800582a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
 80057ae:	e03c      	b.n	800582a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d00c      	beq.n	80057d2 <RCCEx_PLLSAI1_Config+0x5a>
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d013      	beq.n	80057e4 <RCCEx_PLLSAI1_Config+0x6c>
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d120      	bne.n	8005802 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057c0:	4b61      	ldr	r3, [pc, #388]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d11d      	bne.n	8005808 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d0:	e01a      	b.n	8005808 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057d2:	4b5d      	ldr	r3, [pc, #372]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d116      	bne.n	800580c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e2:	e013      	b.n	800580c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057e4:	4b58      	ldr	r3, [pc, #352]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10f      	bne.n	8005810 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057f0:	4b55      	ldr	r3, [pc, #340]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005800:	e006      	b.n	8005810 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
      break;
 8005806:	e004      	b.n	8005812 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005808:	bf00      	nop
 800580a:	e002      	b.n	8005812 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800580c:	bf00      	nop
 800580e:	e000      	b.n	8005812 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005810:	bf00      	nop
    }

    if(status == HAL_OK)
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d108      	bne.n	800582a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005818:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f023 0203 	bic.w	r2, r3, #3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4948      	ldr	r1, [pc, #288]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005826:	4313      	orrs	r3, r2
 8005828:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f040 8086 	bne.w	800593e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005832:	4b45      	ldr	r3, [pc, #276]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a44      	ldr	r2, [pc, #272]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005838:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800583c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583e:	f7fd fa4f 	bl	8002ce0 <HAL_GetTick>
 8005842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005844:	e009      	b.n	800585a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005846:	f7fd fa4b 	bl	8002ce0 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d902      	bls.n	800585a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	73fb      	strb	r3, [r7, #15]
        break;
 8005858:	e005      	b.n	8005866 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800585a:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1ef      	bne.n	8005846 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d168      	bne.n	800593e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d113      	bne.n	800589a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005872:	4b35      	ldr	r3, [pc, #212]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	4b35      	ldr	r3, [pc, #212]	; (800594c <RCCEx_PLLSAI1_Config+0x1d4>)
 8005878:	4013      	ands	r3, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6892      	ldr	r2, [r2, #8]
 800587e:	0211      	lsls	r1, r2, #8
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68d2      	ldr	r2, [r2, #12]
 8005884:	06d2      	lsls	r2, r2, #27
 8005886:	4311      	orrs	r1, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6852      	ldr	r2, [r2, #4]
 800588c:	3a01      	subs	r2, #1
 800588e:	0112      	lsls	r2, r2, #4
 8005890:	430a      	orrs	r2, r1
 8005892:	492d      	ldr	r1, [pc, #180]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005894:	4313      	orrs	r3, r2
 8005896:	610b      	str	r3, [r1, #16]
 8005898:	e02d      	b.n	80058f6 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d115      	bne.n	80058cc <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058a0:	4b29      	ldr	r3, [pc, #164]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6892      	ldr	r2, [r2, #8]
 80058ac:	0211      	lsls	r1, r2, #8
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6912      	ldr	r2, [r2, #16]
 80058b2:	0852      	lsrs	r2, r2, #1
 80058b4:	3a01      	subs	r2, #1
 80058b6:	0552      	lsls	r2, r2, #21
 80058b8:	4311      	orrs	r1, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6852      	ldr	r2, [r2, #4]
 80058be:	3a01      	subs	r2, #1
 80058c0:	0112      	lsls	r2, r2, #4
 80058c2:	430a      	orrs	r2, r1
 80058c4:	4920      	ldr	r1, [pc, #128]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	610b      	str	r3, [r1, #16]
 80058ca:	e014      	b.n	80058f6 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058cc:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	4b20      	ldr	r3, [pc, #128]	; (8005954 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6892      	ldr	r2, [r2, #8]
 80058d8:	0211      	lsls	r1, r2, #8
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6952      	ldr	r2, [r2, #20]
 80058de:	0852      	lsrs	r2, r2, #1
 80058e0:	3a01      	subs	r2, #1
 80058e2:	0652      	lsls	r2, r2, #25
 80058e4:	4311      	orrs	r1, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6852      	ldr	r2, [r2, #4]
 80058ea:	3a01      	subs	r2, #1
 80058ec:	0112      	lsls	r2, r2, #4
 80058ee:	430a      	orrs	r2, r1
 80058f0:	4915      	ldr	r1, [pc, #84]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005900:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005902:	f7fd f9ed 	bl	8002ce0 <HAL_GetTick>
 8005906:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005908:	e009      	b.n	800591e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800590a:	f7fd f9e9 	bl	8002ce0 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d902      	bls.n	800591e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	73fb      	strb	r3, [r7, #15]
          break;
 800591c:	e005      	b.n	800592a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800591e:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0ef      	beq.n	800590a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	4903      	ldr	r1, [pc, #12]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d0>)
 800593a:	4313      	orrs	r3, r2
 800593c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800593e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40021000 	.word	0x40021000
 800594c:	07ff800f 	.word	0x07ff800f
 8005950:	ff9f800f 	.word	0xff9f800f
 8005954:	f9ff800f 	.word	0xf9ff800f

08005958 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005966:	4b70      	ldr	r3, [pc, #448]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00e      	beq.n	8005990 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005972:	4b6d      	ldr	r3, [pc, #436]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f003 0203 	and.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d103      	bne.n	800598a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
       ||
 8005986:	2b00      	cmp	r3, #0
 8005988:	d13f      	bne.n	8005a0a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
 800598e:	e03c      	b.n	8005a0a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d00c      	beq.n	80059b2 <RCCEx_PLLSAI2_Config+0x5a>
 8005998:	2b03      	cmp	r3, #3
 800599a:	d013      	beq.n	80059c4 <RCCEx_PLLSAI2_Config+0x6c>
 800599c:	2b01      	cmp	r3, #1
 800599e:	d120      	bne.n	80059e2 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059a0:	4b61      	ldr	r3, [pc, #388]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d11d      	bne.n	80059e8 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b0:	e01a      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059b2:	4b5d      	ldr	r3, [pc, #372]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d116      	bne.n	80059ec <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c2:	e013      	b.n	80059ec <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059c4:	4b58      	ldr	r3, [pc, #352]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10f      	bne.n	80059f0 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059d0:	4b55      	ldr	r3, [pc, #340]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059e0:	e006      	b.n	80059f0 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
      break;
 80059e6:	e004      	b.n	80059f2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80059e8:	bf00      	nop
 80059ea:	e002      	b.n	80059f2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80059f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d108      	bne.n	8005a0a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80059f8:	4b4b      	ldr	r3, [pc, #300]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f023 0203 	bic.w	r2, r3, #3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4948      	ldr	r1, [pc, #288]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f040 8086 	bne.w	8005b1e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a12:	4b45      	ldr	r3, [pc, #276]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a44      	ldr	r2, [pc, #272]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1e:	f7fd f95f 	bl	8002ce0 <HAL_GetTick>
 8005a22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a24:	e009      	b.n	8005a3a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a26:	f7fd f95b 	bl	8002ce0 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d902      	bls.n	8005a3a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	73fb      	strb	r3, [r7, #15]
        break;
 8005a38:	e005      	b.n	8005a46 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a3a:	4b3b      	ldr	r3, [pc, #236]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1ef      	bne.n	8005a26 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d168      	bne.n	8005b1e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d113      	bne.n	8005a7a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a52:	4b35      	ldr	r3, [pc, #212]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a54:	695a      	ldr	r2, [r3, #20]
 8005a56:	4b35      	ldr	r3, [pc, #212]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d4>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6892      	ldr	r2, [r2, #8]
 8005a5e:	0211      	lsls	r1, r2, #8
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68d2      	ldr	r2, [r2, #12]
 8005a64:	06d2      	lsls	r2, r2, #27
 8005a66:	4311      	orrs	r1, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6852      	ldr	r2, [r2, #4]
 8005a6c:	3a01      	subs	r2, #1
 8005a6e:	0112      	lsls	r2, r2, #4
 8005a70:	430a      	orrs	r2, r1
 8005a72:	492d      	ldr	r1, [pc, #180]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	614b      	str	r3, [r1, #20]
 8005a78:	e02d      	b.n	8005ad6 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d115      	bne.n	8005aac <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a80:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a82:	695a      	ldr	r2, [r3, #20]
 8005a84:	4b2a      	ldr	r3, [pc, #168]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6892      	ldr	r2, [r2, #8]
 8005a8c:	0211      	lsls	r1, r2, #8
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6912      	ldr	r2, [r2, #16]
 8005a92:	0852      	lsrs	r2, r2, #1
 8005a94:	3a01      	subs	r2, #1
 8005a96:	0552      	lsls	r2, r2, #21
 8005a98:	4311      	orrs	r1, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6852      	ldr	r2, [r2, #4]
 8005a9e:	3a01      	subs	r2, #1
 8005aa0:	0112      	lsls	r2, r2, #4
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	4920      	ldr	r1, [pc, #128]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	614b      	str	r3, [r1, #20]
 8005aaa:	e014      	b.n	8005ad6 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aac:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6892      	ldr	r2, [r2, #8]
 8005ab8:	0211      	lsls	r1, r2, #8
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6952      	ldr	r2, [r2, #20]
 8005abe:	0852      	lsrs	r2, r2, #1
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	0652      	lsls	r2, r2, #25
 8005ac4:	4311      	orrs	r1, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6852      	ldr	r2, [r2, #4]
 8005aca:	3a01      	subs	r2, #1
 8005acc:	0112      	lsls	r2, r2, #4
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	4915      	ldr	r1, [pc, #84]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fd f8fd 	bl	8002ce0 <HAL_GetTick>
 8005ae6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ae8:	e009      	b.n	8005afe <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005aea:	f7fd f8f9 	bl	8002ce0 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d902      	bls.n	8005afe <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	73fb      	strb	r3, [r7, #15]
          break;
 8005afc:	e005      	b.n	8005b0a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0ef      	beq.n	8005aea <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	4903      	ldr	r1, [pc, #12]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	07ff800f 	.word	0x07ff800f
 8005b30:	ff9f800f 	.word	0xff9f800f
 8005b34:	f9ff800f 	.word	0xf9ff800f

08005b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e042      	b.n	8005bd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fb ff69 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2224      	movs	r2, #36	; 0x24
 8005b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f994 	bl	8005ea8 <UART_SetConfig>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e022      	b.n	8005bd0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fc5a 	bl	800644c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fce1 	bl	8006590 <UART_CheckIdleState>
 8005bce:	4603      	mov	r3, r0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	f040 8084 	bne.w	8005cfc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_UART_Transmit+0x28>
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e07c      	b.n	8005cfe <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_UART_Transmit+0x3a>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e075      	b.n	8005cfe <HAL_UART_Transmit+0x126>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2221      	movs	r2, #33	; 0x21
 8005c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c2a:	f7fd f859 	bl	8002ce0 <HAL_GetTick>
 8005c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c48:	d108      	bne.n	8005c5c <HAL_UART_Transmit+0x84>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e003      	b.n	8005c64 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005c6c:	e02d      	b.n	8005cca <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2180      	movs	r1, #128	; 0x80
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fcd1 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e03a      	b.n	8005cfe <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	881a      	ldrh	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	e008      	b.n	8005cb8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	781a      	ldrb	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	b292      	uxth	r2, r2
 8005cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1cb      	bne.n	8005c6e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2140      	movs	r1, #64	; 0x40
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fc9d 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e006      	b.n	8005cfe <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e000      	b.n	8005cfe <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005cfc:	2302      	movs	r3, #2
  }
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3720      	adds	r7, #32
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b08a      	sub	sp, #40	; 0x28
 8005d0a:	af02      	add	r7, sp, #8
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	f040 80be 	bne.w	8005e9e <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <HAL_UART_Receive+0x28>
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e0b6      	b.n	8005ea0 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_UART_Receive+0x3a>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e0af      	b.n	8005ea0 <HAL_UART_Receive+0x19a>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2222      	movs	r2, #34	; 0x22
 8005d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005d58:	f7fc ffc2 	bl	8002ce0 <HAL_GetTick>
 8005d5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	88fa      	ldrh	r2, [r7, #6]
 8005d62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	88fa      	ldrh	r2, [r7, #6]
 8005d6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d76:	d10e      	bne.n	8005d96 <HAL_UART_Receive+0x90>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <HAL_UART_Receive+0x86>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d8a:	e02d      	b.n	8005de8 <HAL_UART_Receive+0xe2>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	22ff      	movs	r2, #255	; 0xff
 8005d90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d94:	e028      	b.n	8005de8 <HAL_UART_Receive+0xe2>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <HAL_UART_Receive+0xb4>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <HAL_UART_Receive+0xaa>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	22ff      	movs	r2, #255	; 0xff
 8005daa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dae:	e01b      	b.n	8005de8 <HAL_UART_Receive+0xe2>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	227f      	movs	r2, #127	; 0x7f
 8005db4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005db8:	e016      	b.n	8005de8 <HAL_UART_Receive+0xe2>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc2:	d10d      	bne.n	8005de0 <HAL_UART_Receive+0xda>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <HAL_UART_Receive+0xd0>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	227f      	movs	r2, #127	; 0x7f
 8005dd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dd4:	e008      	b.n	8005de8 <HAL_UART_Receive+0xe2>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	223f      	movs	r2, #63	; 0x3f
 8005dda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dde:	e003      	b.n	8005de8 <HAL_UART_Receive+0xe2>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005dee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df8:	d108      	bne.n	8005e0c <HAL_UART_Receive+0x106>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	e003      	b.n	8005e14 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e1c:	e033      	b.n	8005e86 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2200      	movs	r2, #0
 8005e26:	2120      	movs	r1, #32
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fbf9 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e033      	b.n	8005ea0 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10c      	bne.n	8005e58 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	8a7b      	ldrh	r3, [r7, #18]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	3302      	adds	r3, #2
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	e00d      	b.n	8005e74 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	8a7b      	ldrh	r3, [r7, #18]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	4013      	ands	r3, r2
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1c5      	bne.n	8005e1e <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e000      	b.n	8005ea0 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005e9e:	2302      	movs	r3, #2
  }
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005eac:	b088      	sub	sp, #32
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4bb1      	ldr	r3, [pc, #708]	; (80061a4 <UART_SetConfig+0x2fc>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6812      	ldr	r2, [r2, #0]
 8005ee6:	69f9      	ldr	r1, [r7, #28]
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4aa6      	ldr	r2, [pc, #664]	; (80061a8 <UART_SetConfig+0x300>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d004      	beq.n	8005f1c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005f26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	69f9      	ldr	r1, [r7, #28]
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	f023 010f 	bic.w	r1, r3, #15
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a97      	ldr	r2, [pc, #604]	; (80061ac <UART_SetConfig+0x304>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d121      	bne.n	8005f98 <UART_SetConfig+0xf0>
 8005f54:	4b96      	ldr	r3, [pc, #600]	; (80061b0 <UART_SetConfig+0x308>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d816      	bhi.n	8005f90 <UART_SetConfig+0xe8>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0xc0>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005f79 	.word	0x08005f79
 8005f6c:	08005f85 	.word	0x08005f85
 8005f70:	08005f7f 	.word	0x08005f7f
 8005f74:	08005f8b 	.word	0x08005f8b
 8005f78:	2301      	movs	r3, #1
 8005f7a:	76fb      	strb	r3, [r7, #27]
 8005f7c:	e0e8      	b.n	8006150 <UART_SetConfig+0x2a8>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	76fb      	strb	r3, [r7, #27]
 8005f82:	e0e5      	b.n	8006150 <UART_SetConfig+0x2a8>
 8005f84:	2304      	movs	r3, #4
 8005f86:	76fb      	strb	r3, [r7, #27]
 8005f88:	e0e2      	b.n	8006150 <UART_SetConfig+0x2a8>
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	76fb      	strb	r3, [r7, #27]
 8005f8e:	e0df      	b.n	8006150 <UART_SetConfig+0x2a8>
 8005f90:	2310      	movs	r3, #16
 8005f92:	76fb      	strb	r3, [r7, #27]
 8005f94:	bf00      	nop
 8005f96:	e0db      	b.n	8006150 <UART_SetConfig+0x2a8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a85      	ldr	r2, [pc, #532]	; (80061b4 <UART_SetConfig+0x30c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d134      	bne.n	800600c <UART_SetConfig+0x164>
 8005fa2:	4b83      	ldr	r3, [pc, #524]	; (80061b0 <UART_SetConfig+0x308>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f003 030c 	and.w	r3, r3, #12
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d829      	bhi.n	8006004 <UART_SetConfig+0x15c>
 8005fb0:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <UART_SetConfig+0x110>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	08005fed 	.word	0x08005fed
 8005fbc:	08006005 	.word	0x08006005
 8005fc0:	08006005 	.word	0x08006005
 8005fc4:	08006005 	.word	0x08006005
 8005fc8:	08005ff9 	.word	0x08005ff9
 8005fcc:	08006005 	.word	0x08006005
 8005fd0:	08006005 	.word	0x08006005
 8005fd4:	08006005 	.word	0x08006005
 8005fd8:	08005ff3 	.word	0x08005ff3
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	08006005 	.word	0x08006005
 8005fe8:	08005fff 	.word	0x08005fff
 8005fec:	2300      	movs	r3, #0
 8005fee:	76fb      	strb	r3, [r7, #27]
 8005ff0:	e0ae      	b.n	8006150 <UART_SetConfig+0x2a8>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	76fb      	strb	r3, [r7, #27]
 8005ff6:	e0ab      	b.n	8006150 <UART_SetConfig+0x2a8>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	76fb      	strb	r3, [r7, #27]
 8005ffc:	e0a8      	b.n	8006150 <UART_SetConfig+0x2a8>
 8005ffe:	2308      	movs	r3, #8
 8006000:	76fb      	strb	r3, [r7, #27]
 8006002:	e0a5      	b.n	8006150 <UART_SetConfig+0x2a8>
 8006004:	2310      	movs	r3, #16
 8006006:	76fb      	strb	r3, [r7, #27]
 8006008:	bf00      	nop
 800600a:	e0a1      	b.n	8006150 <UART_SetConfig+0x2a8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a69      	ldr	r2, [pc, #420]	; (80061b8 <UART_SetConfig+0x310>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d120      	bne.n	8006058 <UART_SetConfig+0x1b0>
 8006016:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <UART_SetConfig+0x308>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006020:	2b10      	cmp	r3, #16
 8006022:	d00f      	beq.n	8006044 <UART_SetConfig+0x19c>
 8006024:	2b10      	cmp	r3, #16
 8006026:	d802      	bhi.n	800602e <UART_SetConfig+0x186>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <UART_SetConfig+0x190>
 800602c:	e010      	b.n	8006050 <UART_SetConfig+0x1a8>
 800602e:	2b20      	cmp	r3, #32
 8006030:	d005      	beq.n	800603e <UART_SetConfig+0x196>
 8006032:	2b30      	cmp	r3, #48	; 0x30
 8006034:	d009      	beq.n	800604a <UART_SetConfig+0x1a2>
 8006036:	e00b      	b.n	8006050 <UART_SetConfig+0x1a8>
 8006038:	2300      	movs	r3, #0
 800603a:	76fb      	strb	r3, [r7, #27]
 800603c:	e088      	b.n	8006150 <UART_SetConfig+0x2a8>
 800603e:	2302      	movs	r3, #2
 8006040:	76fb      	strb	r3, [r7, #27]
 8006042:	e085      	b.n	8006150 <UART_SetConfig+0x2a8>
 8006044:	2304      	movs	r3, #4
 8006046:	76fb      	strb	r3, [r7, #27]
 8006048:	e082      	b.n	8006150 <UART_SetConfig+0x2a8>
 800604a:	2308      	movs	r3, #8
 800604c:	76fb      	strb	r3, [r7, #27]
 800604e:	e07f      	b.n	8006150 <UART_SetConfig+0x2a8>
 8006050:	2310      	movs	r3, #16
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	bf00      	nop
 8006056:	e07b      	b.n	8006150 <UART_SetConfig+0x2a8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a57      	ldr	r2, [pc, #348]	; (80061bc <UART_SetConfig+0x314>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d120      	bne.n	80060a4 <UART_SetConfig+0x1fc>
 8006062:	4b53      	ldr	r3, [pc, #332]	; (80061b0 <UART_SetConfig+0x308>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	d00f      	beq.n	8006090 <UART_SetConfig+0x1e8>
 8006070:	2b40      	cmp	r3, #64	; 0x40
 8006072:	d802      	bhi.n	800607a <UART_SetConfig+0x1d2>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <UART_SetConfig+0x1dc>
 8006078:	e010      	b.n	800609c <UART_SetConfig+0x1f4>
 800607a:	2b80      	cmp	r3, #128	; 0x80
 800607c:	d005      	beq.n	800608a <UART_SetConfig+0x1e2>
 800607e:	2bc0      	cmp	r3, #192	; 0xc0
 8006080:	d009      	beq.n	8006096 <UART_SetConfig+0x1ee>
 8006082:	e00b      	b.n	800609c <UART_SetConfig+0x1f4>
 8006084:	2300      	movs	r3, #0
 8006086:	76fb      	strb	r3, [r7, #27]
 8006088:	e062      	b.n	8006150 <UART_SetConfig+0x2a8>
 800608a:	2302      	movs	r3, #2
 800608c:	76fb      	strb	r3, [r7, #27]
 800608e:	e05f      	b.n	8006150 <UART_SetConfig+0x2a8>
 8006090:	2304      	movs	r3, #4
 8006092:	76fb      	strb	r3, [r7, #27]
 8006094:	e05c      	b.n	8006150 <UART_SetConfig+0x2a8>
 8006096:	2308      	movs	r3, #8
 8006098:	76fb      	strb	r3, [r7, #27]
 800609a:	e059      	b.n	8006150 <UART_SetConfig+0x2a8>
 800609c:	2310      	movs	r3, #16
 800609e:	76fb      	strb	r3, [r7, #27]
 80060a0:	bf00      	nop
 80060a2:	e055      	b.n	8006150 <UART_SetConfig+0x2a8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a45      	ldr	r2, [pc, #276]	; (80061c0 <UART_SetConfig+0x318>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d124      	bne.n	80060f8 <UART_SetConfig+0x250>
 80060ae:	4b40      	ldr	r3, [pc, #256]	; (80061b0 <UART_SetConfig+0x308>)
 80060b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060bc:	d012      	beq.n	80060e4 <UART_SetConfig+0x23c>
 80060be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c2:	d802      	bhi.n	80060ca <UART_SetConfig+0x222>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <UART_SetConfig+0x230>
 80060c8:	e012      	b.n	80060f0 <UART_SetConfig+0x248>
 80060ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ce:	d006      	beq.n	80060de <UART_SetConfig+0x236>
 80060d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060d4:	d009      	beq.n	80060ea <UART_SetConfig+0x242>
 80060d6:	e00b      	b.n	80060f0 <UART_SetConfig+0x248>
 80060d8:	2300      	movs	r3, #0
 80060da:	76fb      	strb	r3, [r7, #27]
 80060dc:	e038      	b.n	8006150 <UART_SetConfig+0x2a8>
 80060de:	2302      	movs	r3, #2
 80060e0:	76fb      	strb	r3, [r7, #27]
 80060e2:	e035      	b.n	8006150 <UART_SetConfig+0x2a8>
 80060e4:	2304      	movs	r3, #4
 80060e6:	76fb      	strb	r3, [r7, #27]
 80060e8:	e032      	b.n	8006150 <UART_SetConfig+0x2a8>
 80060ea:	2308      	movs	r3, #8
 80060ec:	76fb      	strb	r3, [r7, #27]
 80060ee:	e02f      	b.n	8006150 <UART_SetConfig+0x2a8>
 80060f0:	2310      	movs	r3, #16
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	bf00      	nop
 80060f6:	e02b      	b.n	8006150 <UART_SetConfig+0x2a8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <UART_SetConfig+0x300>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d124      	bne.n	800614c <UART_SetConfig+0x2a4>
 8006102:	4b2b      	ldr	r3, [pc, #172]	; (80061b0 <UART_SetConfig+0x308>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800610c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006110:	d012      	beq.n	8006138 <UART_SetConfig+0x290>
 8006112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006116:	d802      	bhi.n	800611e <UART_SetConfig+0x276>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <UART_SetConfig+0x284>
 800611c:	e012      	b.n	8006144 <UART_SetConfig+0x29c>
 800611e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006122:	d006      	beq.n	8006132 <UART_SetConfig+0x28a>
 8006124:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006128:	d009      	beq.n	800613e <UART_SetConfig+0x296>
 800612a:	e00b      	b.n	8006144 <UART_SetConfig+0x29c>
 800612c:	2300      	movs	r3, #0
 800612e:	76fb      	strb	r3, [r7, #27]
 8006130:	e00e      	b.n	8006150 <UART_SetConfig+0x2a8>
 8006132:	2302      	movs	r3, #2
 8006134:	76fb      	strb	r3, [r7, #27]
 8006136:	e00b      	b.n	8006150 <UART_SetConfig+0x2a8>
 8006138:	2304      	movs	r3, #4
 800613a:	76fb      	strb	r3, [r7, #27]
 800613c:	e008      	b.n	8006150 <UART_SetConfig+0x2a8>
 800613e:	2308      	movs	r3, #8
 8006140:	76fb      	strb	r3, [r7, #27]
 8006142:	e005      	b.n	8006150 <UART_SetConfig+0x2a8>
 8006144:	2310      	movs	r3, #16
 8006146:	76fb      	strb	r3, [r7, #27]
 8006148:	bf00      	nop
 800614a:	e001      	b.n	8006150 <UART_SetConfig+0x2a8>
 800614c:	2310      	movs	r3, #16
 800614e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a14      	ldr	r2, [pc, #80]	; (80061a8 <UART_SetConfig+0x300>)
 8006156:	4293      	cmp	r3, r2
 8006158:	f040 80a1 	bne.w	800629e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800615c:	7efb      	ldrb	r3, [r7, #27]
 800615e:	2b08      	cmp	r3, #8
 8006160:	d836      	bhi.n	80061d0 <UART_SetConfig+0x328>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <UART_SetConfig+0x2c0>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	0800618d 	.word	0x0800618d
 800616c:	080061d1 	.word	0x080061d1
 8006170:	08006195 	.word	0x08006195
 8006174:	080061d1 	.word	0x080061d1
 8006178:	0800619b 	.word	0x0800619b
 800617c:	080061d1 	.word	0x080061d1
 8006180:	080061d1 	.word	0x080061d1
 8006184:	080061d1 	.word	0x080061d1
 8006188:	080061c9 	.word	0x080061c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800618c:	f7fe fede 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 8006190:	6178      	str	r0, [r7, #20]
        break;
 8006192:	e022      	b.n	80061da <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <UART_SetConfig+0x31c>)
 8006196:	617b      	str	r3, [r7, #20]
        break;
 8006198:	e01f      	b.n	80061da <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619a:	f7fe fe41 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 800619e:	6178      	str	r0, [r7, #20]
        break;
 80061a0:	e01b      	b.n	80061da <UART_SetConfig+0x332>
 80061a2:	bf00      	nop
 80061a4:	cfff69f3 	.word	0xcfff69f3
 80061a8:	40008000 	.word	0x40008000
 80061ac:	40013800 	.word	0x40013800
 80061b0:	40021000 	.word	0x40021000
 80061b4:	40004400 	.word	0x40004400
 80061b8:	40004800 	.word	0x40004800
 80061bc:	40004c00 	.word	0x40004c00
 80061c0:	40005000 	.word	0x40005000
 80061c4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061cc:	617b      	str	r3, [r7, #20]
        break;
 80061ce:	e004      	b.n	80061da <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	76bb      	strb	r3, [r7, #26]
        break;
 80061d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 811d 	beq.w	800641c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	4a97      	ldr	r2, [pc, #604]	; (8006444 <UART_SetConfig+0x59c>)
 80061e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ec:	461a      	mov	r2, r3
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	4413      	add	r3, r2
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	d305      	bcc.n	8006212 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	429a      	cmp	r2, r3
 8006210:	d902      	bls.n	8006218 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	76bb      	strb	r3, [r7, #26]
 8006216:	e101      	b.n	800641c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	4618      	mov	r0, r3
 800621c:	f04f 0100 	mov.w	r1, #0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	4a87      	ldr	r2, [pc, #540]	; (8006444 <UART_SetConfig+0x59c>)
 8006226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f04f 0400 	mov.w	r4, #0
 8006230:	461a      	mov	r2, r3
 8006232:	4623      	mov	r3, r4
 8006234:	f7fa fd20 	bl	8000c78 <__aeabi_uldivmod>
 8006238:	4603      	mov	r3, r0
 800623a:	460c      	mov	r4, r1
 800623c:	4619      	mov	r1, r3
 800623e:	4622      	mov	r2, r4
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	f04f 0400 	mov.w	r4, #0
 8006248:	0214      	lsls	r4, r2, #8
 800624a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800624e:	020b      	lsls	r3, r1, #8
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6852      	ldr	r2, [r2, #4]
 8006254:	0852      	lsrs	r2, r2, #1
 8006256:	4611      	mov	r1, r2
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	eb13 0b01 	adds.w	fp, r3, r1
 8006260:	eb44 0c02 	adc.w	ip, r4, r2
 8006264:	4658      	mov	r0, fp
 8006266:	4661      	mov	r1, ip
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f04f 0400 	mov.w	r4, #0
 8006270:	461a      	mov	r2, r3
 8006272:	4623      	mov	r3, r4
 8006274:	f7fa fd00 	bl	8000c78 <__aeabi_uldivmod>
 8006278:	4603      	mov	r3, r0
 800627a:	460c      	mov	r4, r1
 800627c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006284:	d308      	bcc.n	8006298 <UART_SetConfig+0x3f0>
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800628c:	d204      	bcs.n	8006298 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	e0c1      	b.n	800641c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	76bb      	strb	r3, [r7, #26]
 800629c:	e0be      	b.n	800641c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a6:	d164      	bne.n	8006372 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80062a8:	7efb      	ldrb	r3, [r7, #27]
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d827      	bhi.n	80062fe <UART_SetConfig+0x456>
 80062ae:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <UART_SetConfig+0x40c>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062d9 	.word	0x080062d9
 80062b8:	080062e1 	.word	0x080062e1
 80062bc:	080062e9 	.word	0x080062e9
 80062c0:	080062ff 	.word	0x080062ff
 80062c4:	080062ef 	.word	0x080062ef
 80062c8:	080062ff 	.word	0x080062ff
 80062cc:	080062ff 	.word	0x080062ff
 80062d0:	080062ff 	.word	0x080062ff
 80062d4:	080062f7 	.word	0x080062f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d8:	f7fe fe38 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 80062dc:	6178      	str	r0, [r7, #20]
        break;
 80062de:	e013      	b.n	8006308 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e0:	f7fe fe4a 	bl	8004f78 <HAL_RCC_GetPCLK2Freq>
 80062e4:	6178      	str	r0, [r7, #20]
        break;
 80062e6:	e00f      	b.n	8006308 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062e8:	4b57      	ldr	r3, [pc, #348]	; (8006448 <UART_SetConfig+0x5a0>)
 80062ea:	617b      	str	r3, [r7, #20]
        break;
 80062ec:	e00c      	b.n	8006308 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ee:	f7fe fd97 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 80062f2:	6178      	str	r0, [r7, #20]
        break;
 80062f4:	e008      	b.n	8006308 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fa:	617b      	str	r3, [r7, #20]
        break;
 80062fc:	e004      	b.n	8006308 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	76bb      	strb	r3, [r7, #26]
        break;
 8006306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 8086 	beq.w	800641c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	4a4b      	ldr	r2, [pc, #300]	; (8006444 <UART_SetConfig+0x59c>)
 8006316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800631a:	461a      	mov	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006322:	005a      	lsls	r2, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	441a      	add	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	fbb2 f3f3 	udiv	r3, r2, r3
 8006334:	b29b      	uxth	r3, r3
 8006336:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b0f      	cmp	r3, #15
 800633c:	d916      	bls.n	800636c <UART_SetConfig+0x4c4>
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006344:	d212      	bcs.n	800636c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f023 030f 	bic.w	r3, r3, #15
 800634e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	b29b      	uxth	r3, r3
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	b29a      	uxth	r2, r3
 800635c:	89fb      	ldrh	r3, [r7, #14]
 800635e:	4313      	orrs	r3, r2
 8006360:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	89fa      	ldrh	r2, [r7, #14]
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	e057      	b.n	800641c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	76bb      	strb	r3, [r7, #26]
 8006370:	e054      	b.n	800641c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006372:	7efb      	ldrb	r3, [r7, #27]
 8006374:	2b08      	cmp	r3, #8
 8006376:	d828      	bhi.n	80063ca <UART_SetConfig+0x522>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <UART_SetConfig+0x4d8>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	080063a5 	.word	0x080063a5
 8006384:	080063ad 	.word	0x080063ad
 8006388:	080063b5 	.word	0x080063b5
 800638c:	080063cb 	.word	0x080063cb
 8006390:	080063bb 	.word	0x080063bb
 8006394:	080063cb 	.word	0x080063cb
 8006398:	080063cb 	.word	0x080063cb
 800639c:	080063cb 	.word	0x080063cb
 80063a0:	080063c3 	.word	0x080063c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a4:	f7fe fdd2 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 80063a8:	6178      	str	r0, [r7, #20]
        break;
 80063aa:	e013      	b.n	80063d4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063ac:	f7fe fde4 	bl	8004f78 <HAL_RCC_GetPCLK2Freq>
 80063b0:	6178      	str	r0, [r7, #20]
        break;
 80063b2:	e00f      	b.n	80063d4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b4:	4b24      	ldr	r3, [pc, #144]	; (8006448 <UART_SetConfig+0x5a0>)
 80063b6:	617b      	str	r3, [r7, #20]
        break;
 80063b8:	e00c      	b.n	80063d4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ba:	f7fe fd31 	bl	8004e20 <HAL_RCC_GetSysClockFreq>
 80063be:	6178      	str	r0, [r7, #20]
        break;
 80063c0:	e008      	b.n	80063d4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063c6:	617b      	str	r3, [r7, #20]
        break;
 80063c8:	e004      	b.n	80063d4 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	76bb      	strb	r3, [r7, #26]
        break;
 80063d2:	bf00      	nop
    }

    if (pclk != 0U)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d020      	beq.n	800641c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	4a19      	ldr	r2, [pc, #100]	; (8006444 <UART_SetConfig+0x59c>)
 80063e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e4:	461a      	mov	r2, r3
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	441a      	add	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	2b0f      	cmp	r3, #15
 8006404:	d908      	bls.n	8006418 <UART_SetConfig+0x570>
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640c:	d204      	bcs.n	8006418 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	60da      	str	r2, [r3, #12]
 8006416:	e001      	b.n	800641c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006438:	7ebb      	ldrb	r3, [r7, #26]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3720      	adds	r7, #32
 800643e:	46bd      	mov	sp, r7
 8006440:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006444:	0800bbe4 	.word	0x0800bbe4
 8006448:	00f42400 	.word	0x00f42400

0800644c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01a      	beq.n	8006562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654a:	d10a      	bne.n	8006562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	605a      	str	r2, [r3, #4]
  }
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80065a0:	f7fc fb9e 	bl	8002ce0 <HAL_GetTick>
 80065a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d10e      	bne.n	80065d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f82c 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e022      	b.n	8006618 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d10e      	bne.n	80065fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f816 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e00c      	b.n	8006618 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2220      	movs	r2, #32
 800660a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006630:	e062      	b.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d05e      	beq.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663a:	f7fc fb51 	bl	8002ce0 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	429a      	cmp	r2, r3
 8006648:	d302      	bcc.n	8006650 <UART_WaitOnFlagUntilTimeout+0x30>
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d11d      	bne.n	800668c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800665e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e045      	b.n	8006718 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d02e      	beq.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a8:	d126      	bne.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066c2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e00f      	b.n	8006718 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69da      	ldr	r2, [r3, #28]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4013      	ands	r3, r2
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	429a      	cmp	r2, r3
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	429a      	cmp	r2, r3
 8006714:	d08d      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_UARTEx_DisableFifoMode+0x16>
 8006732:	2302      	movs	r3, #2
 8006734:	e027      	b.n	8006786 <HAL_UARTEx_DisableFifoMode+0x66>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2224      	movs	r2, #36	; 0x24
 8006742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006764:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d101      	bne.n	80067aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067a6:	2302      	movs	r3, #2
 80067a8:	e02d      	b.n	8006806 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2224      	movs	r2, #36	; 0x24
 80067b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0201 	bic.w	r2, r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f850 	bl	800688c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006822:	2302      	movs	r3, #2
 8006824:	e02d      	b.n	8006882 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2224      	movs	r2, #36	; 0x24
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f812 	bl	800688c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b089      	sub	sp, #36	; 0x24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006894:	4a2f      	ldr	r2, [pc, #188]	; (8006954 <UARTEx_SetNbDataToProcess+0xc8>)
 8006896:	f107 0314 	add.w	r3, r7, #20
 800689a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800689e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80068a2:	4a2d      	ldr	r2, [pc, #180]	; (8006958 <UARTEx_SetNbDataToProcess+0xcc>)
 80068a4:	f107 030c 	add.w	r3, r7, #12
 80068a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068ac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d108      	bne.n	80068ca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068c8:	e03d      	b.n	8006946 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068ca:	2308      	movs	r3, #8
 80068cc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068ce:	2308      	movs	r3, #8
 80068d0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	0e5b      	lsrs	r3, r3, #25
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	0f5b      	lsrs	r3, r3, #29
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80068f2:	7fbb      	ldrb	r3, [r7, #30]
 80068f4:	7f3a      	ldrb	r2, [r7, #28]
 80068f6:	f107 0120 	add.w	r1, r7, #32
 80068fa:	440a      	add	r2, r1
 80068fc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006900:	fb02 f303 	mul.w	r3, r2, r3
 8006904:	7f3a      	ldrb	r2, [r7, #28]
 8006906:	f107 0120 	add.w	r1, r7, #32
 800690a:	440a      	add	r2, r1
 800690c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006910:	fb93 f3f2 	sdiv	r3, r3, r2
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800691c:	7ffb      	ldrb	r3, [r7, #31]
 800691e:	7f7a      	ldrb	r2, [r7, #29]
 8006920:	f107 0120 	add.w	r1, r7, #32
 8006924:	440a      	add	r2, r1
 8006926:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	7f7a      	ldrb	r2, [r7, #29]
 8006930:	f107 0120 	add.w	r1, r7, #32
 8006934:	440a      	add	r2, r1
 8006936:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800693a:	fb93 f3f2 	sdiv	r3, r3, r2
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006946:	bf00      	nop
 8006948:	3724      	adds	r7, #36	; 0x24
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	0800bb88 	.word	0x0800bb88
 8006958:	0800bb90 	.word	0x0800bb90

0800695c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_NETWORK_ACTIVATIONS_ALIGNMENT));
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	3303      	adds	r3, #3
 800696c:	f023 0303 	bic.w	r3, r3, #3
 8006970:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8006972:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <network_configure_activations+0x8c>)
 8006974:	2200      	movs	r2, #0
 8006976:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8006978:	4b1b      	ldr	r3, [pc, #108]	; (80069e8 <network_configure_activations+0x8c>)
 800697a:	2200      	movs	r2, #0
 800697c:	60da      	str	r2, [r3, #12]
    conv1d_35_output_array.data = AI_PTR(activations + 64);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3340      	adds	r3, #64	; 0x40
 8006982:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <network_configure_activations+0x90>)
 8006984:	6093      	str	r3, [r2, #8]
    conv1d_35_output_array.data_start = AI_PTR(activations + 64);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3340      	adds	r3, #64	; 0x40
 800698a:	4a18      	ldr	r2, [pc, #96]	; (80069ec <network_configure_activations+0x90>)
 800698c:	60d3      	str	r3, [r2, #12]
    conv1d_36_output_array.data = AI_PTR(activations + 0);
 800698e:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <network_configure_activations+0x94>)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6093      	str	r3, [r2, #8]
    conv1d_36_output_array.data_start = AI_PTR(activations + 0);
 8006994:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <network_configure_activations+0x94>)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60d3      	str	r3, [r2, #12]
    dense_40_output_array.data = AI_PTR(activations + 704);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80069a0:	4a14      	ldr	r2, [pc, #80]	; (80069f4 <network_configure_activations+0x98>)
 80069a2:	6093      	str	r3, [r2, #8]
    dense_40_output_array.data_start = AI_PTR(activations + 704);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80069aa:	4a12      	ldr	r2, [pc, #72]	; (80069f4 <network_configure_activations+0x98>)
 80069ac:	60d3      	str	r3, [r2, #12]
    dense_40_nl_output_array.data = AI_PTR(activations + 0);
 80069ae:	4a12      	ldr	r2, [pc, #72]	; (80069f8 <network_configure_activations+0x9c>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6093      	str	r3, [r2, #8]
    dense_40_nl_output_array.data_start = AI_PTR(activations + 0);
 80069b4:	4a10      	ldr	r2, [pc, #64]	; (80069f8 <network_configure_activations+0x9c>)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	60d3      	str	r3, [r2, #12]
    dense_41_output_array.data = AI_PTR(activations + 256);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80069c0:	4a0e      	ldr	r2, [pc, #56]	; (80069fc <network_configure_activations+0xa0>)
 80069c2:	6093      	str	r3, [r2, #8]
    dense_41_output_array.data_start = AI_PTR(activations + 256);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80069ca:	4a0c      	ldr	r2, [pc, #48]	; (80069fc <network_configure_activations+0xa0>)
 80069cc:	60d3      	str	r3, [r2, #12]
    dense_41_nl_output_array.data = AI_PTR(NULL);
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <network_configure_activations+0xa4>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	609a      	str	r2, [r3, #8]
    dense_41_nl_output_array.data_start = AI_PTR(NULL);
 80069d4:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <network_configure_activations+0xa4>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80069da:	2301      	movs	r3, #1
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	200000f8 	.word	0x200000f8
 80069ec:	20000108 	.word	0x20000108
 80069f0:	20000118 	.word	0x20000118
 80069f4:	20000128 	.word	0x20000128
 80069f8:	20000138 	.word	0x20000138
 80069fc:	20000148 	.word	0x20000148
 8006a00:	20000158 	.word	0x20000158

08006a04 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_41_bias_array.format |= AI_FMT_FLAG_CONST;
 8006a14:	4b44      	ldr	r3, [pc, #272]	; (8006b28 <network_configure_weights+0x124>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a1c:	4a42      	ldr	r2, [pc, #264]	; (8006b28 <network_configure_weights+0x124>)
 8006a1e:	6013      	str	r3, [r2, #0]
    dense_41_bias_array.data = AI_PTR(weights + 48288);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8006a26:	33a0      	adds	r3, #160	; 0xa0
 8006a28:	4a3f      	ldr	r2, [pc, #252]	; (8006b28 <network_configure_weights+0x124>)
 8006a2a:	6093      	str	r3, [r2, #8]
    dense_41_bias_array.data_start = AI_PTR(weights + 48288);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8006a32:	33a0      	adds	r3, #160	; 0xa0
 8006a34:	4a3c      	ldr	r2, [pc, #240]	; (8006b28 <network_configure_weights+0x124>)
 8006a36:	60d3      	str	r3, [r2, #12]
    dense_41_weights_array.format |= AI_FMT_FLAG_CONST;
 8006a38:	4b3c      	ldr	r3, [pc, #240]	; (8006b2c <network_configure_weights+0x128>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a40:	4a3a      	ldr	r2, [pc, #232]	; (8006b2c <network_configure_weights+0x128>)
 8006a42:	6013      	str	r3, [r2, #0]
    dense_41_weights_array.data = AI_PTR(weights + 47520);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8006a4a:	33a0      	adds	r3, #160	; 0xa0
 8006a4c:	4a37      	ldr	r2, [pc, #220]	; (8006b2c <network_configure_weights+0x128>)
 8006a4e:	6093      	str	r3, [r2, #8]
    dense_41_weights_array.data_start = AI_PTR(weights + 47520);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8006a56:	33a0      	adds	r3, #160	; 0xa0
 8006a58:	4a34      	ldr	r2, [pc, #208]	; (8006b2c <network_configure_weights+0x128>)
 8006a5a:	60d3      	str	r3, [r2, #12]
    dense_40_bias_array.format |= AI_FMT_FLAG_CONST;
 8006a5c:	4b34      	ldr	r3, [pc, #208]	; (8006b30 <network_configure_weights+0x12c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a64:	4a32      	ldr	r2, [pc, #200]	; (8006b30 <network_configure_weights+0x12c>)
 8006a66:	6013      	str	r3, [r2, #0]
    dense_40_bias_array.data = AI_PTR(weights + 47264);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8006a6e:	33a0      	adds	r3, #160	; 0xa0
 8006a70:	4a2f      	ldr	r2, [pc, #188]	; (8006b30 <network_configure_weights+0x12c>)
 8006a72:	6093      	str	r3, [r2, #8]
    dense_40_bias_array.data_start = AI_PTR(weights + 47264);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8006a7a:	33a0      	adds	r3, #160	; 0xa0
 8006a7c:	4a2c      	ldr	r2, [pc, #176]	; (8006b30 <network_configure_weights+0x12c>)
 8006a7e:	60d3      	str	r3, [r2, #12]
    dense_40_weights_array.format |= AI_FMT_FLAG_CONST;
 8006a80:	4b2c      	ldr	r3, [pc, #176]	; (8006b34 <network_configure_weights+0x130>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a88:	4a2a      	ldr	r2, [pc, #168]	; (8006b34 <network_configure_weights+0x130>)
 8006a8a:	6013      	str	r3, [r2, #0]
    dense_40_weights_array.data = AI_PTR(weights + 2208);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8006a92:	4a28      	ldr	r2, [pc, #160]	; (8006b34 <network_configure_weights+0x130>)
 8006a94:	6093      	str	r3, [r2, #8]
    dense_40_weights_array.data_start = AI_PTR(weights + 2208);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8006a9c:	4a25      	ldr	r2, [pc, #148]	; (8006b34 <network_configure_weights+0x130>)
 8006a9e:	60d3      	str	r3, [r2, #12]
    conv1d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8006aa0:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <network_configure_weights+0x134>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa8:	4a23      	ldr	r2, [pc, #140]	; (8006b38 <network_configure_weights+0x134>)
 8006aaa:	6013      	str	r3, [r2, #0]
    conv1d_36_bias_array.data = AI_PTR(weights + 2176);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8006ab2:	4a21      	ldr	r2, [pc, #132]	; (8006b38 <network_configure_weights+0x134>)
 8006ab4:	6093      	str	r3, [r2, #8]
    conv1d_36_bias_array.data_start = AI_PTR(weights + 2176);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8006abc:	4a1e      	ldr	r2, [pc, #120]	; (8006b38 <network_configure_weights+0x134>)
 8006abe:	60d3      	str	r3, [r2, #12]
    conv1d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8006ac0:	4b1e      	ldr	r3, [pc, #120]	; (8006b3c <network_configure_weights+0x138>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac8:	4a1c      	ldr	r2, [pc, #112]	; (8006b3c <network_configure_weights+0x138>)
 8006aca:	6013      	str	r3, [r2, #0]
    conv1d_36_weights_array.data = AI_PTR(weights + 640);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ad2:	4a1a      	ldr	r2, [pc, #104]	; (8006b3c <network_configure_weights+0x138>)
 8006ad4:	6093      	str	r3, [r2, #8]
    conv1d_36_weights_array.data_start = AI_PTR(weights + 640);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006adc:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <network_configure_weights+0x138>)
 8006ade:	60d3      	str	r3, [r2, #12]
    conv1d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 8006ae0:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <network_configure_weights+0x13c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ae8:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <network_configure_weights+0x13c>)
 8006aea:	6013      	str	r3, [r2, #0]
    conv1d_35_bias_array.data = AI_PTR(weights + 576);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006af2:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <network_configure_weights+0x13c>)
 8006af4:	6093      	str	r3, [r2, #8]
    conv1d_35_bias_array.data_start = AI_PTR(weights + 576);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006afc:	4a10      	ldr	r2, [pc, #64]	; (8006b40 <network_configure_weights+0x13c>)
 8006afe:	60d3      	str	r3, [r2, #12]
    conv1d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 8006b00:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <network_configure_weights+0x140>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b08:	4a0e      	ldr	r2, [pc, #56]	; (8006b44 <network_configure_weights+0x140>)
 8006b0a:	6013      	str	r3, [r2, #0]
    conv1d_35_weights_array.data = AI_PTR(weights + 0);
 8006b0c:	4a0d      	ldr	r2, [pc, #52]	; (8006b44 <network_configure_weights+0x140>)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6093      	str	r3, [r2, #8]
    conv1d_35_weights_array.data_start = AI_PTR(weights + 0);
 8006b12:	4a0c      	ldr	r2, [pc, #48]	; (8006b44 <network_configure_weights+0x140>)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8006b18:	2301      	movs	r3, #1
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000078 	.word	0x20000078
 8006b2c:	20000088 	.word	0x20000088
 8006b30:	20000098 	.word	0x20000098
 8006b34:	200000a8 	.word	0x200000a8
 8006b38:	200000b8 	.word	0x200000b8
 8006b3c:	200000c8 	.word	0x200000c8
 8006b40:	200000d8 	.word	0x200000d8
 8006b44:	200000e8 	.word	0x200000e8

08006b48 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f895 	bl	8006c80 <ai_platform_network_get_error>
 8006b56:	4603      	mov	r3, r0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	2303      	movs	r3, #3
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	2301      	movs	r3, #1
 8006b74:	4a04      	ldr	r2, [pc, #16]	; (8006b88 <ai_network_create+0x28>)
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f8b3 	bl	8006ce4 <ai_platform_network_create>
 8006b7e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20000018 	.word	0x20000018

08006b8c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8fb 	bl	8006d94 <ai_platform_network_init>
 8006b9e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <ai_network_init+0x1e>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e02b      	b.n	8006c02 <ai_network_init+0x76>

  ai_bool ok = true;
 8006baa:	2301      	movs	r3, #1
 8006bac:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff ff26 	bl	8006a04 <network_configure_weights>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	bf14      	ite	ne
 8006bc4:	2301      	movne	r3, #1
 8006bc6:	2300      	moveq	r3, #0
 8006bc8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	3318      	adds	r3, #24
 8006bce:	4619      	mov	r1, r3
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7ff fec3 	bl	800695c <network_configure_activations>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	461a      	mov	r2, r3
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bf14      	ite	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	2300      	moveq	r3, #0
 8006be6:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f951 	bl	8006e90 <ai_platform_network_post_init>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf14      	ite	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	2300      	moveq	r3, #0
 8006bfe:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006c00:	7afb      	ldrb	r3, [r7, #11]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f980 	bl	8006f20 <ai_platform_network_process>
 8006c20:	4603      	mov	r3, r0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
    0x3b, 0xbe, 0xa8, 0x70, 0xda, 0x3e, 0xb9, 0x61, 0x31, 0xbf,
    0xcf, 0xa2, 0xc6, 0x3e, 0xd9, 0x88, 0xe1, 0xbe, 0x3e, 0xdb,
    0xfb, 0x3d, 0xe0, 0xb0, 0x8b, 0x3c, 0xf9, 0x21, 0x3d, 0xbe
  };

  return AI_HANDLE_PTR(s_network_weights);
 8006c30:	4b02      	ldr	r3, [pc, #8]	; (8006c3c <ai_network_data_weights_get+0x10>)

}
 8006c32:	4618      	mov	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	0800bc2c 	.word	0x0800bc2c

08006c40 <_platform_network_state_setup.isra.1>:
 8006c40:	b430      	push	{r4, r5}
 8006c42:	68dd      	ldr	r5, [r3, #12]
 8006c44:	695c      	ldr	r4, [r3, #20]
 8006c46:	68ed      	ldr	r5, [r5, #12]
 8006c48:	68e4      	ldr	r4, [r4, #12]
 8006c4a:	fb04 f405 	mul.w	r4, r4, r5
 8006c4e:	6084      	str	r4, [r0, #8]
 8006c50:	8809      	ldrh	r1, [r1, #0]
 8006c52:	fb04 f401 	mul.w	r4, r4, r1
 8006c56:	60c4      	str	r4, [r0, #12]
 8006c58:	6811      	ldr	r1, [r2, #0]
 8006c5a:	6041      	str	r1, [r0, #4]
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	4414      	add	r4, r2
 8006c60:	6004      	str	r4, [r0, #0]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	6814      	ldr	r4, [r2, #0]
 8006c66:	00a4      	lsls	r4, r4, #2
 8006c68:	d407      	bmi.n	8006c7a <_platform_network_state_setup.isra.1+0x3a>
 8006c6a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8006c6e:	1b64      	subs	r4, r4, r5
 8006c70:	4421      	add	r1, r4
 8006c72:	6091      	str	r1, [r2, #8]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	6842      	ldr	r2, [r0, #4]
 8006c78:	60da      	str	r2, [r3, #12]
 8006c7a:	bc30      	pop	{r4, r5}
 8006c7c:	4770      	bx	lr
	...

08006c80 <ai_platform_network_get_error>:
 8006c80:	b410      	push	{r4}
 8006c82:	b120      	cbz	r0, 8006c8e <ai_platform_network_get_error+0xe>
 8006c84:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <ai_platform_network_get_error+0x4c>)
 8006c86:	6802      	ldr	r2, [r0, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	bf18      	it	ne
 8006c8c:	2000      	movne	r0, #0
 8006c8e:	4910      	ldr	r1, [pc, #64]	; (8006cd0 <ai_platform_network_get_error+0x50>)
 8006c90:	4a10      	ldr	r2, [pc, #64]	; (8006cd4 <ai_platform_network_get_error+0x54>)
 8006c92:	680b      	ldr	r3, [r1, #0]
 8006c94:	2401      	movs	r4, #1
 8006c96:	f023 0301 	bic.w	r3, r3, #1
 8006c9a:	600b      	str	r3, [r1, #0]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	6014      	str	r4, [r2, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	2a00      	cmp	r2, #0
 8006ca4:	d1fc      	bne.n	8006ca0 <ai_platform_network_get_error+0x20>
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <ai_platform_network_get_error+0x58>)
 8006ca8:	4a0c      	ldr	r2, [pc, #48]	; (8006cdc <ai_platform_network_get_error+0x5c>)
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <ai_platform_network_get_error+0x60>)
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d000      	beq.n	8006cb6 <ai_platform_network_get_error+0x36>
 8006cb4:	e7fe      	b.n	8006cb4 <ai_platform_network_get_error+0x34>
 8006cb6:	b120      	cbz	r0, 8006cc2 <ai_platform_network_get_error+0x42>
 8006cb8:	3010      	adds	r0, #16
 8006cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cbe:	f000 bb3b 	b.w	8007338 <core_get_error>
 8006cc2:	f241 0010 	movw	r0, #4112	; 0x1010
 8006cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	a1c00100 	.word	0xa1c00100
 8006cd0:	e0002000 	.word	0xe0002000
 8006cd4:	40023008 	.word	0x40023008
 8006cd8:	40023000 	.word	0x40023000
 8006cdc:	f407a5c2 	.word	0xf407a5c2
 8006ce0:	b5e8b5cd 	.word	0xb5e8b5cd

08006ce4 <ai_platform_network_create>:
 8006ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce8:	4e23      	ldr	r6, [pc, #140]	; (8006d78 <ai_platform_network_create+0x94>)
 8006cea:	4924      	ldr	r1, [pc, #144]	; (8006d7c <ai_platform_network_create+0x98>)
 8006cec:	6835      	ldr	r5, [r6, #0]
 8006cee:	b082      	sub	sp, #8
 8006cf0:	f025 0501 	bic.w	r5, r5, #1
 8006cf4:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8006cf8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8006cfc:	6035      	str	r5, [r6, #0]
 8006cfe:	2501      	movs	r5, #1
 8006d00:	600d      	str	r5, [r1, #0]
 8006d02:	680d      	ldr	r5, [r1, #0]
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	d1fc      	bne.n	8006d02 <ai_platform_network_create+0x1e>
 8006d08:	491d      	ldr	r1, [pc, #116]	; (8006d80 <ai_platform_network_create+0x9c>)
 8006d0a:	4e1e      	ldr	r6, [pc, #120]	; (8006d84 <ai_platform_network_create+0xa0>)
 8006d0c:	600e      	str	r6, [r1, #0]
 8006d0e:	680e      	ldr	r6, [r1, #0]
 8006d10:	491d      	ldr	r1, [pc, #116]	; (8006d88 <ai_platform_network_create+0xa4>)
 8006d12:	428e      	cmp	r6, r1
 8006d14:	d000      	beq.n	8006d18 <ai_platform_network_create+0x34>
 8006d16:	e7fe      	b.n	8006d16 <ai_platform_network_create+0x32>
 8006d18:	b1d0      	cbz	r0, 8006d50 <ai_platform_network_create+0x6c>
 8006d1a:	4698      	mov	r8, r3
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	4a1b      	ldr	r2, [pc, #108]	; (8006d8c <ai_platform_network_create+0xa8>)
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	6003      	str	r3, [r0, #0]
 8006d24:	4606      	mov	r6, r0
 8006d26:	f000 fb05 	bl	8007334 <core_init>
 8006d2a:	b1b0      	cbz	r0, 8006d5a <ai_platform_network_create+0x76>
 8006d2c:	0223      	lsls	r3, r4, #8
 8006d2e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d32:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8006d36:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8006d3a:	d910      	bls.n	8006d5e <ai_platform_network_create+0x7a>
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6033      	str	r3, [r6, #0]
 8006d42:	2310      	movs	r3, #16
 8006d44:	2000      	movs	r0, #0
 8006d46:	f362 0007 	bfi	r0, r2, #0, #8
 8006d4a:	f363 201f 	bfi	r0, r3, #8, #24
 8006d4e:	e001      	b.n	8006d54 <ai_platform_network_create+0x70>
 8006d50:	f241 0010 	movw	r0, #4112	; 0x1010
 8006d54:	b002      	add	sp, #8
 8006d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d5a:	2230      	movs	r2, #48	; 0x30
 8006d5c:	e7ef      	b.n	8006d3e <ai_platform_network_create+0x5a>
 8006d5e:	a802      	add	r0, sp, #8
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <ai_platform_network_create+0xac>)
 8006d62:	f840 3d04 	str.w	r3, [r0, #-4]!
 8006d66:	f002 f889 	bl	8008e7c <ai_check_custom_types>
 8006d6a:	b110      	cbz	r0, 8006d72 <ai_platform_network_create+0x8e>
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	462a      	mov	r2, r5
 8006d70:	e7e8      	b.n	8006d44 <ai_platform_network_create+0x60>
 8006d72:	2202      	movs	r2, #2
 8006d74:	e7e3      	b.n	8006d3e <ai_platform_network_create+0x5a>
 8006d76:	bf00      	nop
 8006d78:	e0002000 	.word	0xe0002000
 8006d7c:	40023008 	.word	0x40023008
 8006d80:	40023000 	.word	0x40023000
 8006d84:	f407a5c2 	.word	0xf407a5c2
 8006d88:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d8c:	a1c00100 	.word	0xa1c00100
 8006d90:	84048403 	.word	0x84048403

08006d94 <ai_platform_network_init>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	460c      	mov	r4, r1
 8006d98:	4605      	mov	r5, r0
 8006d9a:	b120      	cbz	r0, 8006da6 <ai_platform_network_init+0x12>
 8006d9c:	4b36      	ldr	r3, [pc, #216]	; (8006e78 <ai_platform_network_init+0xe4>)
 8006d9e:	6802      	ldr	r2, [r0, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	bf18      	it	ne
 8006da4:	2500      	movne	r5, #0
 8006da6:	4935      	ldr	r1, [pc, #212]	; (8006e7c <ai_platform_network_init+0xe8>)
 8006da8:	4a35      	ldr	r2, [pc, #212]	; (8006e80 <ai_platform_network_init+0xec>)
 8006daa:	680b      	ldr	r3, [r1, #0]
 8006dac:	2001      	movs	r0, #1
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	600b      	str	r3, [r1, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	6010      	str	r0, [r2, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	d1fc      	bne.n	8006db8 <ai_platform_network_init+0x24>
 8006dbe:	4b31      	ldr	r3, [pc, #196]	; (8006e84 <ai_platform_network_init+0xf0>)
 8006dc0:	4a31      	ldr	r2, [pc, #196]	; (8006e88 <ai_platform_network_init+0xf4>)
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4b31      	ldr	r3, [pc, #196]	; (8006e8c <ai_platform_network_init+0xf8>)
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d000      	beq.n	8006dce <ai_platform_network_init+0x3a>
 8006dcc:	e7fe      	b.n	8006dcc <ai_platform_network_init+0x38>
 8006dce:	b33d      	cbz	r5, 8006e20 <ai_platform_network_init+0x8c>
 8006dd0:	b344      	cbz	r4, 8006e24 <ai_platform_network_init+0x90>
 8006dd2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006dd4:	6926      	ldr	r6, [r4, #16]
 8006dd6:	2f00      	cmp	r7, #0
 8006dd8:	d03d      	beq.n	8006e56 <ai_platform_network_init+0xc2>
 8006dda:	b35e      	cbz	r6, 8006e34 <ai_platform_network_init+0xa0>
 8006ddc:	4627      	mov	r7, r4
 8006dde:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006de0:	f105 0618 	add.w	r6, r5, #24
 8006de4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006de6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006dea:	e886 0003 	stmia.w	r6, {r0, r1}
 8006dee:	3418      	adds	r4, #24
 8006df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006df2:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8006df6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006df8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006dfc:	e886 0003 	stmia.w	r6, {r0, r1}
 8006e00:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006e02:	2303      	movs	r3, #3
 8006e04:	60eb      	str	r3, [r5, #12]
 8006e06:	b15a      	cbz	r2, 8006e20 <ai_platform_network_init+0x8c>
 8006e08:	68d3      	ldr	r3, [r2, #12]
 8006e0a:	6095      	str	r5, [r2, #8]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d007      	beq.n	8006e20 <ai_platform_network_init+0x8c>
 8006e10:	b133      	cbz	r3, 8006e20 <ai_platform_network_init+0x8c>
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	609d      	str	r5, [r3, #8]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d002      	beq.n	8006e20 <ai_platform_network_init+0x8c>
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f8      	bne.n	8006e12 <ai_platform_network_init+0x7e>
 8006e20:	4628      	mov	r0, r5
 8006e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e24:	f105 0010 	add.w	r0, r5, #16
 8006e28:	2211      	movs	r2, #17
 8006e2a:	2110      	movs	r1, #16
 8006e2c:	f000 fa8a 	bl	8007344 <core_set_error>
 8006e30:	4625      	mov	r5, r4
 8006e32:	e7f5      	b.n	8006e20 <ai_platform_network_init+0x8c>
 8006e34:	8921      	ldrh	r1, [r4, #8]
 8006e36:	88e2      	ldrh	r2, [r4, #6]
 8006e38:	68e3      	ldr	r3, [r4, #12]
 8006e3a:	fb02 f201 	mul.w	r2, r2, r1
 8006e3e:	fb03 f302 	mul.w	r3, r3, r2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0ca      	beq.n	8006ddc <ai_platform_network_init+0x48>
 8006e46:	f105 0010 	add.w	r0, r5, #16
 8006e4a:	2212      	movs	r2, #18
 8006e4c:	2110      	movs	r1, #16
 8006e4e:	f000 fa79 	bl	8007344 <core_set_error>
 8006e52:	4635      	mov	r5, r6
 8006e54:	e7e4      	b.n	8006e20 <ai_platform_network_init+0x8c>
 8006e56:	8c21      	ldrh	r1, [r4, #32]
 8006e58:	8be2      	ldrh	r2, [r4, #30]
 8006e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e5c:	fb02 f201 	mul.w	r2, r2, r1
 8006e60:	fb03 f302 	mul.w	r3, r3, r2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0b8      	beq.n	8006dda <ai_platform_network_init+0x46>
 8006e68:	f105 0010 	add.w	r0, r5, #16
 8006e6c:	2213      	movs	r2, #19
 8006e6e:	2110      	movs	r1, #16
 8006e70:	f000 fa68 	bl	8007344 <core_set_error>
 8006e74:	463d      	mov	r5, r7
 8006e76:	e7d3      	b.n	8006e20 <ai_platform_network_init+0x8c>
 8006e78:	a1c00100 	.word	0xa1c00100
 8006e7c:	e0002000 	.word	0xe0002000
 8006e80:	40023008 	.word	0x40023008
 8006e84:	40023000 	.word	0x40023000
 8006e88:	f407a5c2 	.word	0xf407a5c2
 8006e8c:	b5e8b5cd 	.word	0xb5e8b5cd

08006e90 <ai_platform_network_post_init>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	b120      	cbz	r0, 8006ea0 <ai_platform_network_post_init+0x10>
 8006e96:	4b1c      	ldr	r3, [pc, #112]	; (8006f08 <ai_platform_network_post_init+0x78>)
 8006e98:	6802      	ldr	r2, [r0, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	bf18      	it	ne
 8006e9e:	2400      	movne	r4, #0
 8006ea0:	491a      	ldr	r1, [pc, #104]	; (8006f0c <ai_platform_network_post_init+0x7c>)
 8006ea2:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <ai_platform_network_post_init+0x80>)
 8006ea4:	680b      	ldr	r3, [r1, #0]
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	600b      	str	r3, [r1, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	6010      	str	r0, [r2, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	2a00      	cmp	r2, #0
 8006eb6:	d1fc      	bne.n	8006eb2 <ai_platform_network_post_init+0x22>
 8006eb8:	4b16      	ldr	r3, [pc, #88]	; (8006f14 <ai_platform_network_post_init+0x84>)
 8006eba:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <ai_platform_network_post_init+0x88>)
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4b16      	ldr	r3, [pc, #88]	; (8006f1c <ai_platform_network_post_init+0x8c>)
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d000      	beq.n	8006ec8 <ai_platform_network_post_init+0x38>
 8006ec6:	e7fe      	b.n	8006ec6 <ai_platform_network_post_init+0x36>
 8006ec8:	b1a4      	cbz	r4, 8006ef4 <ai_platform_network_post_init+0x64>
 8006eca:	68e3      	ldr	r3, [r4, #12]
 8006ecc:	f013 0502 	ands.w	r5, r3, #2
 8006ed0:	d012      	beq.n	8006ef8 <ai_platform_network_post_init+0x68>
 8006ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ed4:	b163      	cbz	r3, 8006ef0 <ai_platform_network_post_init+0x60>
 8006ed6:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8006ed8:	b91d      	cbnz	r5, 8006ee2 <ai_platform_network_post_init+0x52>
 8006eda:	e009      	b.n	8006ef0 <ai_platform_network_post_init+0x60>
 8006edc:	461d      	mov	r5, r3
 8006ede:	b13b      	cbz	r3, 8006ef0 <ai_platform_network_post_init+0x60>
 8006ee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ee2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	4798      	blx	r3
 8006eea:	68eb      	ldr	r3, [r5, #12]
 8006eec:	42ab      	cmp	r3, r5
 8006eee:	d1f5      	bne.n	8006edc <ai_platform_network_post_init+0x4c>
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	f104 0010 	add.w	r0, r4, #16
 8006efc:	2210      	movs	r2, #16
 8006efe:	2111      	movs	r1, #17
 8006f00:	f000 fa20 	bl	8007344 <core_set_error>
 8006f04:	4628      	mov	r0, r5
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	a1c00100 	.word	0xa1c00100
 8006f0c:	e0002000 	.word	0xe0002000
 8006f10:	40023008 	.word	0x40023008
 8006f14:	40023000 	.word	0x40023000
 8006f18:	f407a5c2 	.word	0xf407a5c2
 8006f1c:	b5e8b5cd 	.word	0xb5e8b5cd

08006f20 <ai_platform_network_process>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	b083      	sub	sp, #12
 8006f26:	4604      	mov	r4, r0
 8006f28:	9201      	str	r2, [sp, #4]
 8006f2a:	b120      	cbz	r0, 8006f36 <ai_platform_network_process+0x16>
 8006f2c:	4ba5      	ldr	r3, [pc, #660]	; (80071c4 <ai_platform_network_process+0x2a4>)
 8006f2e:	6802      	ldr	r2, [r0, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	bf18      	it	ne
 8006f34:	2400      	movne	r4, #0
 8006f36:	48a4      	ldr	r0, [pc, #656]	; (80071c8 <ai_platform_network_process+0x2a8>)
 8006f38:	4ba4      	ldr	r3, [pc, #656]	; (80071cc <ai_platform_network_process+0x2ac>)
 8006f3a:	6802      	ldr	r2, [r0, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	6002      	str	r2, [r0, #0]
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	d1fc      	bne.n	8006f46 <ai_platform_network_process+0x26>
 8006f4c:	4ba0      	ldr	r3, [pc, #640]	; (80071d0 <ai_platform_network_process+0x2b0>)
 8006f4e:	4aa1      	ldr	r2, [pc, #644]	; (80071d4 <ai_platform_network_process+0x2b4>)
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	4ba0      	ldr	r3, [pc, #640]	; (80071d8 <ai_platform_network_process+0x2b8>)
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d000      	beq.n	8006f5c <ai_platform_network_process+0x3c>
 8006f5a:	e7fe      	b.n	8006f5a <ai_platform_network_process+0x3a>
 8006f5c:	2c00      	cmp	r4, #0
 8006f5e:	d066      	beq.n	800702e <ai_platform_network_process+0x10e>
 8006f60:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8006f64:	b107      	cbz	r7, 8006f68 <ai_platform_network_process+0x48>
 8006f66:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8006f68:	68e3      	ldr	r3, [r4, #12]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2600      	movs	r6, #0
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	6166      	str	r6, [r4, #20]
 8006f74:	f040 80fe 	bne.w	8007174 <ai_platform_network_process+0x254>
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	d07f      	beq.n	800707c <ai_platform_network_process+0x15c>
 8006f7c:	2f00      	cmp	r7, #0
 8006f7e:	d07d      	beq.n	800707c <ai_platform_network_process+0x15c>
 8006f80:	883b      	ldrh	r3, [r7, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d07a      	beq.n	800707c <ai_platform_network_process+0x15c>
 8006f86:	460d      	mov	r5, r1
 8006f88:	46a0      	mov	r8, r4
 8006f8a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8006f8e:	429e      	cmp	r6, r3
 8006f90:	d27d      	bcs.n	800708e <ai_platform_network_process+0x16e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d07a      	beq.n	800708e <ai_platform_network_process+0x16e>
 8006f98:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8006f9c:	2c00      	cmp	r4, #0
 8006f9e:	d076      	beq.n	800708e <ai_platform_network_process+0x16e>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8006fa8:	d067      	beq.n	800707a <ai_platform_network_process+0x15a>
 8006faa:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8006fae:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8006fb2:	69a0      	ldr	r0, [r4, #24]
 8006fb4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8006fb8:	6841      	ldr	r1, [r0, #4]
 8006fba:	fb0b f30e 	mul.w	r3, fp, lr
 8006fbe:	fb0c f303 	mul.w	r3, ip, r3
 8006fc2:	4299      	cmp	r1, r3
 8006fc4:	d350      	bcc.n	8007068 <ai_platform_network_process+0x148>
 8006fc6:	68e3      	ldr	r3, [r4, #12]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	455a      	cmp	r2, fp
 8006fcc:	d14c      	bne.n	8007068 <ai_platform_network_process+0x148>
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	4572      	cmp	r2, lr
 8006fd2:	d149      	bne.n	8007068 <ai_platform_network_process+0x148>
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	459c      	cmp	ip, r3
 8006fd8:	d146      	bne.n	8007068 <ai_platform_network_process+0x148>
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	f001 fffe 	bl	8008fdc <ai_array_get_byte_size>
 8006fe0:	68e2      	ldr	r2, [r4, #12]
 8006fe2:	6963      	ldr	r3, [r4, #20]
 8006fe4:	68d2      	ldr	r2, [r2, #12]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	fb03 f302 	mul.w	r3, r3, r2
 8006fec:	4298      	cmp	r0, r3
 8006fee:	d33b      	bcc.n	8007068 <ai_platform_network_process+0x148>
 8006ff0:	69a3      	ldr	r3, [r4, #24]
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	f001 ffa6 	bl	8008f44 <ai_array_to_buffer_fmt>
 8006ff8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8006ffc:	4043      	eors	r3, r0
 8006ffe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007002:	d128      	bne.n	8007056 <ai_platform_network_process+0x136>
 8007004:	68eb      	ldr	r3, [r5, #12]
 8007006:	b1f3      	cbz	r3, 8007046 <ai_platform_network_process+0x126>
 8007008:	f8b5 b000 	ldrh.w	fp, [r5]
 800700c:	f1bb 0f00 	cmp.w	fp, #0
 8007010:	d012      	beq.n	8007038 <ai_platform_network_process+0x118>
 8007012:	4623      	mov	r3, r4
 8007014:	f105 020c 	add.w	r2, r5, #12
 8007018:	4629      	mov	r1, r5
 800701a:	4650      	mov	r0, sl
 800701c:	f7ff fe10 	bl	8006c40 <_platform_network_state_setup.isra.1>
 8007020:	45d9      	cmp	r9, fp
 8007022:	883b      	ldrh	r3, [r7, #0]
 8007024:	bf38      	it	cc
 8007026:	46d9      	movcc	r9, fp
 8007028:	3601      	adds	r6, #1
 800702a:	3518      	adds	r5, #24
 800702c:	e7af      	b.n	8006f8e <ai_platform_network_process+0x6e>
 800702e:	46a3      	mov	fp, r4
 8007030:	4658      	mov	r0, fp
 8007032:	b003      	add	sp, #12
 8007034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007038:	f108 0010 	add.w	r0, r8, #16
 800703c:	2221      	movs	r2, #33	; 0x21
 800703e:	2112      	movs	r1, #18
 8007040:	f000 f980 	bl	8007344 <core_set_error>
 8007044:	e7f4      	b.n	8007030 <ai_platform_network_process+0x110>
 8007046:	f108 0010 	add.w	r0, r8, #16
 800704a:	2217      	movs	r2, #23
 800704c:	2112      	movs	r1, #18
 800704e:	469b      	mov	fp, r3
 8007050:	f000 f978 	bl	8007344 <core_set_error>
 8007054:	e7ec      	b.n	8007030 <ai_platform_network_process+0x110>
 8007056:	f108 0010 	add.w	r0, r8, #16
 800705a:	2219      	movs	r2, #25
 800705c:	2112      	movs	r1, #18
 800705e:	f000 f971 	bl	8007344 <core_set_error>
 8007062:	f04f 0b00 	mov.w	fp, #0
 8007066:	e7e3      	b.n	8007030 <ai_platform_network_process+0x110>
 8007068:	f108 0010 	add.w	r0, r8, #16
 800706c:	2218      	movs	r2, #24
 800706e:	2112      	movs	r1, #18
 8007070:	f000 f968 	bl	8007344 <core_set_error>
 8007074:	f04f 0b00 	mov.w	fp, #0
 8007078:	e7da      	b.n	8007030 <ai_platform_network_process+0x110>
 800707a:	4644      	mov	r4, r8
 800707c:	f104 0010 	add.w	r0, r4, #16
 8007080:	2217      	movs	r2, #23
 8007082:	2112      	movs	r1, #18
 8007084:	f000 f95e 	bl	8007344 <core_set_error>
 8007088:	f04f 0b00 	mov.w	fp, #0
 800708c:	e7d0      	b.n	8007030 <ai_platform_network_process+0x110>
 800708e:	9a01      	ldr	r2, [sp, #4]
 8007090:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8007094:	4644      	mov	r4, r8
 8007096:	2a00      	cmp	r2, #0
 8007098:	f000 80a4 	beq.w	80071e4 <ai_platform_network_process+0x2c4>
 800709c:	2b01      	cmp	r3, #1
 800709e:	f240 8140 	bls.w	8007322 <ai_platform_network_process+0x402>
 80070a2:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80070a6:	f118 0f0c 	cmn.w	r8, #12
 80070aa:	f000 813a 	beq.w	8007322 <ai_platform_network_process+0x402>
 80070ae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 8135 	beq.w	8007322 <ai_platform_network_process+0x402>
 80070b8:	3204      	adds	r2, #4
 80070ba:	4615      	mov	r5, r2
 80070bc:	2700      	movs	r7, #0
 80070be:	429f      	cmp	r7, r3
 80070c0:	f080 808c 	bcs.w	80071dc <ai_platform_network_process+0x2bc>
 80070c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8087 	beq.w	80071dc <ai_platform_network_process+0x2bc>
 80070ce:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	f000 8082 	beq.w	80071dc <ai_platform_network_process+0x2bc>
 80070d8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80070e2:	d067      	beq.n	80071b4 <ai_platform_network_process+0x294>
 80070e4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80070e8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80070ec:	69b0      	ldr	r0, [r6, #24]
 80070ee:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80070f2:	6841      	ldr	r1, [r0, #4]
 80070f4:	fb0b f30e 	mul.w	r3, fp, lr
 80070f8:	fb0c f303 	mul.w	r3, ip, r3
 80070fc:	4299      	cmp	r1, r3
 80070fe:	f0c0 8110 	bcc.w	8007322 <ai_platform_network_process+0x402>
 8007102:	68f3      	ldr	r3, [r6, #12]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	455a      	cmp	r2, fp
 8007108:	f040 810b 	bne.w	8007322 <ai_platform_network_process+0x402>
 800710c:	689a      	ldr	r2, [r3, #8]
 800710e:	4572      	cmp	r2, lr
 8007110:	f040 8107 	bne.w	8007322 <ai_platform_network_process+0x402>
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	459c      	cmp	ip, r3
 8007118:	f040 8103 	bne.w	8007322 <ai_platform_network_process+0x402>
 800711c:	6800      	ldr	r0, [r0, #0]
 800711e:	f001 ff5d 	bl	8008fdc <ai_array_get_byte_size>
 8007122:	68f2      	ldr	r2, [r6, #12]
 8007124:	6973      	ldr	r3, [r6, #20]
 8007126:	68d2      	ldr	r2, [r2, #12]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	fb03 f302 	mul.w	r3, r3, r2
 800712e:	4298      	cmp	r0, r3
 8007130:	f0c0 80f7 	bcc.w	8007322 <ai_platform_network_process+0x402>
 8007134:	69b3      	ldr	r3, [r6, #24]
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	f001 ff04 	bl	8008f44 <ai_array_to_buffer_fmt>
 800713c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007140:	4043      	eors	r3, r0
 8007142:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007146:	d12c      	bne.n	80071a2 <ai_platform_network_process+0x282>
 8007148:	68eb      	ldr	r3, [r5, #12]
 800714a:	b313      	cbz	r3, 8007192 <ai_platform_network_process+0x272>
 800714c:	f8b5 b000 	ldrh.w	fp, [r5]
 8007150:	f1bb 0f00 	cmp.w	fp, #0
 8007154:	d016      	beq.n	8007184 <ai_platform_network_process+0x264>
 8007156:	4633      	mov	r3, r6
 8007158:	f105 020c 	add.w	r2, r5, #12
 800715c:	4629      	mov	r1, r5
 800715e:	4650      	mov	r0, sl
 8007160:	f7ff fd6e 	bl	8006c40 <_platform_network_state_setup.isra.1>
 8007164:	45d9      	cmp	r9, fp
 8007166:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800716a:	bf38      	it	cc
 800716c:	46d9      	movcc	r9, fp
 800716e:	3701      	adds	r7, #1
 8007170:	3518      	adds	r5, #24
 8007172:	e7a4      	b.n	80070be <ai_platform_network_process+0x19e>
 8007174:	f104 0010 	add.w	r0, r4, #16
 8007178:	2230      	movs	r2, #48	; 0x30
 800717a:	2111      	movs	r1, #17
 800717c:	f000 f8e2 	bl	8007344 <core_set_error>
 8007180:	46b3      	mov	fp, r6
 8007182:	e755      	b.n	8007030 <ai_platform_network_process+0x110>
 8007184:	f104 0010 	add.w	r0, r4, #16
 8007188:	2221      	movs	r2, #33	; 0x21
 800718a:	2113      	movs	r1, #19
 800718c:	f000 f8da 	bl	8007344 <core_set_error>
 8007190:	e74e      	b.n	8007030 <ai_platform_network_process+0x110>
 8007192:	f104 0010 	add.w	r0, r4, #16
 8007196:	2217      	movs	r2, #23
 8007198:	2113      	movs	r1, #19
 800719a:	469b      	mov	fp, r3
 800719c:	f000 f8d2 	bl	8007344 <core_set_error>
 80071a0:	e746      	b.n	8007030 <ai_platform_network_process+0x110>
 80071a2:	f104 0010 	add.w	r0, r4, #16
 80071a6:	2219      	movs	r2, #25
 80071a8:	2113      	movs	r1, #19
 80071aa:	f000 f8cb 	bl	8007344 <core_set_error>
 80071ae:	f04f 0b00 	mov.w	fp, #0
 80071b2:	e73d      	b.n	8007030 <ai_platform_network_process+0x110>
 80071b4:	f104 0010 	add.w	r0, r4, #16
 80071b8:	2217      	movs	r2, #23
 80071ba:	2113      	movs	r1, #19
 80071bc:	f000 f8c2 	bl	8007344 <core_set_error>
 80071c0:	46d3      	mov	fp, sl
 80071c2:	e735      	b.n	8007030 <ai_platform_network_process+0x110>
 80071c4:	a1c00100 	.word	0xa1c00100
 80071c8:	e0002000 	.word	0xe0002000
 80071cc:	40023008 	.word	0x40023008
 80071d0:	40023000 	.word	0x40023000
 80071d4:	f407a5c2 	.word	0xf407a5c2
 80071d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80071dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80071e0:	f8a4 9014 	strh.w	r9, [r4, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8099 	beq.w	800731c <ai_platform_network_process+0x3fc>
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80071ee:	f240 8093 	bls.w	8007318 <ai_platform_network_process+0x3f8>
 80071f2:	f105 070c 	add.w	r7, r5, #12
 80071f6:	8ae0      	ldrh	r0, [r4, #22]
 80071f8:	8aa3      	ldrh	r3, [r4, #20]
 80071fa:	4283      	cmp	r3, r0
 80071fc:	d977      	bls.n	80072ee <ai_platform_network_process+0x3ce>
 80071fe:	46a3      	mov	fp, r4
 8007200:	2d00      	cmp	r5, #0
 8007202:	d032      	beq.n	800726a <ai_platform_network_process+0x34a>
 8007204:	882b      	ldrh	r3, [r5, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d02f      	beq.n	800726a <ai_platform_network_process+0x34a>
 800720a:	686b      	ldr	r3, [r5, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d02c      	beq.n	800726a <ai_platform_network_process+0x34a>
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f04f 0800 	mov.w	r8, #0
 8007216:	b343      	cbz	r3, 800726a <ai_platform_network_process+0x34a>
 8007218:	68a9      	ldr	r1, [r5, #8]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	f8d1 a000 	ldr.w	sl, [r1]
 8007220:	6814      	ldr	r4, [r2, #0]
 8007222:	6890      	ldr	r0, [r2, #8]
 8007224:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007228:	eb0a 0609 	add.w	r6, sl, r9
 800722c:	00a4      	lsls	r4, r4, #2
 800722e:	6871      	ldr	r1, [r6, #4]
 8007230:	d45f      	bmi.n	80072f2 <ai_platform_network_process+0x3d2>
 8007232:	68d4      	ldr	r4, [r2, #12]
 8007234:	1b00      	subs	r0, r0, r4
 8007236:	4401      	add	r1, r0
 8007238:	6091      	str	r1, [r2, #8]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	6872      	ldr	r2, [r6, #4]
 800723e:	60da      	str	r2, [r3, #12]
 8007240:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007244:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007248:	440b      	add	r3, r1
 800724a:	4293      	cmp	r3, r2
 800724c:	bf24      	itt	cs
 800724e:	68f3      	ldrcs	r3, [r6, #12]
 8007250:	1ad3      	subcs	r3, r2, r3
 8007252:	6073      	str	r3, [r6, #4]
 8007254:	882b      	ldrh	r3, [r5, #0]
 8007256:	f108 0801 	add.w	r8, r8, #1
 800725a:	4598      	cmp	r8, r3
 800725c:	d205      	bcs.n	800726a <ai_platform_network_process+0x34a>
 800725e:	686b      	ldr	r3, [r5, #4]
 8007260:	b11b      	cbz	r3, 800726a <ai_platform_network_process+0x34a>
 8007262:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1d6      	bne.n	8007218 <ai_platform_network_process+0x2f8>
 800726a:	4658      	mov	r0, fp
 800726c:	f001 fe30 	bl	8008ed0 <ai_layers_forward_all>
 8007270:	2f00      	cmp	r7, #0
 8007272:	d032      	beq.n	80072da <ai_platform_network_process+0x3ba>
 8007274:	883b      	ldrh	r3, [r7, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d02f      	beq.n	80072da <ai_platform_network_process+0x3ba>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	b36b      	cbz	r3, 80072da <ai_platform_network_process+0x3ba>
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	b358      	cbz	r0, 80072da <ai_platform_network_process+0x3ba>
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6981      	ldr	r1, [r0, #24]
 800728a:	f8d3 a000 	ldr.w	sl, [r3]
 800728e:	680c      	ldr	r4, [r1, #0]
 8007290:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007294:	eb0a 0609 	add.w	r6, sl, r9
 8007298:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800729c:	00a4      	lsls	r4, r4, #2
 800729e:	eb0c 0302 	add.w	r3, ip, r2
 80072a2:	d42a      	bmi.n	80072fa <ai_platform_network_process+0x3da>
 80072a4:	f85a 2009 	ldr.w	r2, [sl, r9]
 80072a8:	4293      	cmp	r3, r2
 80072aa:	bf24      	itt	cs
 80072ac:	68f3      	ldrcs	r3, [r6, #12]
 80072ae:	1ad3      	subcs	r3, r2, r3
 80072b0:	6073      	str	r3, [r6, #4]
 80072b2:	6981      	ldr	r1, [r0, #24]
 80072b4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80072b8:	1b12      	subs	r2, r2, r4
 80072ba:	4413      	add	r3, r2
 80072bc:	608b      	str	r3, [r1, #8]
 80072be:	6983      	ldr	r3, [r0, #24]
 80072c0:	6872      	ldr	r2, [r6, #4]
 80072c2:	60da      	str	r2, [r3, #12]
 80072c4:	883b      	ldrh	r3, [r7, #0]
 80072c6:	f108 0801 	add.w	r8, r8, #1
 80072ca:	4598      	cmp	r8, r3
 80072cc:	d205      	bcs.n	80072da <ai_platform_network_process+0x3ba>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	b11b      	cbz	r3, 80072da <ai_platform_network_process+0x3ba>
 80072d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d1d5      	bne.n	8007286 <ai_platform_network_process+0x366>
 80072da:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80072de:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80072e2:	3001      	adds	r0, #1
 80072e4:	b280      	uxth	r0, r0
 80072e6:	4283      	cmp	r3, r0
 80072e8:	f8ab 0016 	strh.w	r0, [fp, #22]
 80072ec:	d888      	bhi.n	8007200 <ai_platform_network_process+0x2e0>
 80072ee:	4683      	mov	fp, r0
 80072f0:	e69e      	b.n	8007030 <ai_platform_network_process+0x110>
 80072f2:	68b2      	ldr	r2, [r6, #8]
 80072f4:	f001 fec6 	bl	8009084 <memcpy>
 80072f8:	e7a2      	b.n	8007240 <ai_platform_network_process+0x320>
 80072fa:	6889      	ldr	r1, [r1, #8]
 80072fc:	4660      	mov	r0, ip
 80072fe:	f001 fec1 	bl	8009084 <memcpy>
 8007302:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007306:	f85a 2009 	ldr.w	r2, [sl, r9]
 800730a:	440b      	add	r3, r1
 800730c:	4293      	cmp	r3, r2
 800730e:	bf24      	itt	cs
 8007310:	68f3      	ldrcs	r3, [r6, #12]
 8007312:	1ad3      	subcs	r3, r2, r3
 8007314:	6073      	str	r3, [r6, #4]
 8007316:	e7d5      	b.n	80072c4 <ai_platform_network_process+0x3a4>
 8007318:	2700      	movs	r7, #0
 800731a:	e76c      	b.n	80071f6 <ai_platform_network_process+0x2d6>
 800731c:	461d      	mov	r5, r3
 800731e:	461f      	mov	r7, r3
 8007320:	e769      	b.n	80071f6 <ai_platform_network_process+0x2d6>
 8007322:	f104 0010 	add.w	r0, r4, #16
 8007326:	2218      	movs	r2, #24
 8007328:	2113      	movs	r1, #19
 800732a:	f000 f80b 	bl	8007344 <core_set_error>
 800732e:	f04f 0b00 	mov.w	fp, #0
 8007332:	e67d      	b.n	8007030 <ai_platform_network_process+0x110>

08007334 <core_init>:
 8007334:	2001      	movs	r0, #1
 8007336:	4770      	bx	lr

08007338 <core_get_error>:
 8007338:	4603      	mov	r3, r0
 800733a:	2200      	movs	r2, #0
 800733c:	6800      	ldr	r0, [r0, #0]
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop

08007344 <core_set_error>:
 8007344:	7803      	ldrb	r3, [r0, #0]
 8007346:	b933      	cbnz	r3, 8007356 <core_set_error+0x12>
 8007348:	7001      	strb	r1, [r0, #0]
 800734a:	6803      	ldr	r3, [r0, #0]
 800734c:	f362 231f 	bfi	r3, r2, #8, #24
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	2001      	movs	r0, #1
 8007354:	4770      	bx	lr
 8007356:	2000      	movs	r0, #0
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop

0800735c <func_dummy>:
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop

08007360 <ai_dict8_dot_array_f32>:
 8007360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007364:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007368:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800736c:	f000 80c0 	beq.w	80074f0 <ai_dict8_dot_array_f32+0x190>
 8007370:	f101 0408 	add.w	r4, r1, #8
 8007374:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007378:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80074f8 <ai_dict8_dot_array_f32+0x198>
 800737c:	eb04 0e09 	add.w	lr, r4, r9
 8007380:	f103 0520 	add.w	r5, r3, #32
 8007384:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8007388:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800738c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8007390:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8007394:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8007398:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800739c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80073a0:	ed55 3a04 	vldr	s7, [r5, #-16]
 80073a4:	ed55 4a03 	vldr	s9, [r5, #-12]
 80073a8:	ed55 5a02 	vldr	s11, [r5, #-8]
 80073ac:	ed55 6a01 	vldr	s13, [r5, #-4]
 80073b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80073b4:	edd6 7a00 	vldr	s15, [r6]
 80073b8:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80073bc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80073c0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80073c4:	ed9a 3a00 	vldr	s6, [sl]
 80073c8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80073cc:	eee3 7a05 	vfma.f32	s15, s6, s10
 80073d0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80073d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80073d8:	ed97 3a00 	vldr	s6, [r7]
 80073dc:	ed96 5a00 	vldr	s10, [r6]
 80073e0:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80073e4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80073e8:	eee3 7a04 	vfma.f32	s15, s6, s8
 80073ec:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80073f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80073f4:	ed9a 3a00 	vldr	s6, [sl]
 80073f8:	ed96 4a00 	vldr	s8, [r6]
 80073fc:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8007400:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007404:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007408:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800740c:	ed97 5a00 	vldr	s10, [r7]
 8007410:	ed96 6a00 	vldr	s12, [r6]
 8007414:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007418:	3408      	adds	r4, #8
 800741a:	45a6      	cmp	lr, r4
 800741c:	f105 0520 	add.w	r5, r5, #32
 8007420:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007424:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007428:	eee6 7a26 	vfma.f32	s15, s12, s13
 800742c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007430:	d1a8      	bne.n	8007384 <ai_dict8_dot_array_f32+0x24>
 8007432:	4449      	add	r1, r9
 8007434:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007438:	f01c 0c07 	ands.w	ip, ip, #7
 800743c:	d050      	beq.n	80074e0 <ai_dict8_dot_array_f32+0x180>
 800743e:	780c      	ldrb	r4, [r1, #0]
 8007440:	edd3 6a00 	vldr	s13, [r3]
 8007444:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007448:	edd4 7a00 	vldr	s15, [r4]
 800744c:	f1bc 0f01 	cmp.w	ip, #1
 8007450:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007454:	d044      	beq.n	80074e0 <ai_dict8_dot_array_f32+0x180>
 8007456:	784c      	ldrb	r4, [r1, #1]
 8007458:	edd3 6a01 	vldr	s13, [r3, #4]
 800745c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007460:	edd4 7a00 	vldr	s15, [r4]
 8007464:	f1bc 0f02 	cmp.w	ip, #2
 8007468:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800746c:	d038      	beq.n	80074e0 <ai_dict8_dot_array_f32+0x180>
 800746e:	788c      	ldrb	r4, [r1, #2]
 8007470:	edd3 6a02 	vldr	s13, [r3, #8]
 8007474:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007478:	edd4 7a00 	vldr	s15, [r4]
 800747c:	f1bc 0f03 	cmp.w	ip, #3
 8007480:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007484:	d02c      	beq.n	80074e0 <ai_dict8_dot_array_f32+0x180>
 8007486:	78cc      	ldrb	r4, [r1, #3]
 8007488:	edd3 6a03 	vldr	s13, [r3, #12]
 800748c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007490:	edd4 7a00 	vldr	s15, [r4]
 8007494:	f1bc 0f04 	cmp.w	ip, #4
 8007498:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800749c:	d020      	beq.n	80074e0 <ai_dict8_dot_array_f32+0x180>
 800749e:	790c      	ldrb	r4, [r1, #4]
 80074a0:	edd3 6a04 	vldr	s13, [r3, #16]
 80074a4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80074a8:	edd4 7a00 	vldr	s15, [r4]
 80074ac:	f1bc 0f05 	cmp.w	ip, #5
 80074b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80074b4:	d014      	beq.n	80074e0 <ai_dict8_dot_array_f32+0x180>
 80074b6:	794c      	ldrb	r4, [r1, #5]
 80074b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80074bc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80074c0:	edd4 7a00 	vldr	s15, [r4]
 80074c4:	f1bc 0f06 	cmp.w	ip, #6
 80074c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80074cc:	d008      	beq.n	80074e0 <ai_dict8_dot_array_f32+0x180>
 80074ce:	7989      	ldrb	r1, [r1, #6]
 80074d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80074d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80074d8:	edd2 6a00 	vldr	s13, [r2]
 80074dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80074e0:	edd0 7a00 	vldr	s15, [r0]
 80074e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074e8:	ed80 7a00 	vstr	s14, [r0]
 80074ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80074f8 <ai_dict8_dot_array_f32+0x198>
 80074f4:	e7a0      	b.n	8007438 <ai_dict8_dot_array_f32+0xd8>
 80074f6:	bf00      	nop
 80074f8:	00000000 	.word	0x00000000

080074fc <ai_dict4_dot_array_f32>:
 80074fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007500:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007502:	f027 0c01 	bic.w	ip, r7, #1
 8007506:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800750a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800750e:	f000 80ae 	beq.w	800766e <ai_dict4_dot_array_f32+0x172>
 8007512:	1d0d      	adds	r5, r1, #4
 8007514:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8007518:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007674 <ai_dict4_dot_array_f32+0x178>
 800751c:	eb05 0e09 	add.w	lr, r5, r9
 8007520:	f103 0420 	add.w	r4, r3, #32
 8007524:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8007528:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800752c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8007530:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8007534:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8007538:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800753c:	ed14 5a04 	vldr	s10, [r4, #-16]
 8007540:	ed54 5a03 	vldr	s11, [r4, #-12]
 8007544:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007548:	ed54 6a01 	vldr	s13, [r4, #-4]
 800754c:	f006 0a0f 	and.w	sl, r6, #15
 8007550:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007554:	edda 7a00 	vldr	s15, [sl]
 8007558:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800755c:	0936      	lsrs	r6, r6, #4
 800755e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007562:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007566:	ed96 3a00 	vldr	s6, [r6]
 800756a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800756e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007572:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007576:	f00b 0b0f 	and.w	fp, fp, #15
 800757a:	edd6 3a00 	vldr	s7, [r6]
 800757e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8007582:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007586:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800758a:	3504      	adds	r5, #4
 800758c:	ed9b 4a00 	vldr	s8, [fp]
 8007590:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8007594:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007598:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800759c:	f00a 0a0f 	and.w	sl, sl, #15
 80075a0:	eddb 4a00 	vldr	s9, [fp]
 80075a4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80075a8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80075ac:	45ae      	cmp	lr, r5
 80075ae:	ed9a 5a00 	vldr	s10, [sl]
 80075b2:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80075b6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80075ba:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80075be:	f006 060f 	and.w	r6, r6, #15
 80075c2:	edda 5a00 	vldr	s11, [sl]
 80075c6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80075ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80075ce:	f104 0420 	add.w	r4, r4, #32
 80075d2:	ed96 6a00 	vldr	s12, [r6]
 80075d6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80075da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075de:	d1a1      	bne.n	8007524 <ai_dict4_dot_array_f32+0x28>
 80075e0:	4449      	add	r1, r9
 80075e2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80075e6:	459c      	cmp	ip, r3
 80075e8:	d92d      	bls.n	8007646 <ai_dict4_dot_array_f32+0x14a>
 80075ea:	f10c 0c07 	add.w	ip, ip, #7
 80075ee:	f103 0508 	add.w	r5, r3, #8
 80075f2:	ebac 0c05 	sub.w	ip, ip, r5
 80075f6:	f02c 0407 	bic.w	r4, ip, #7
 80075fa:	f103 0810 	add.w	r8, r3, #16
 80075fe:	44a0      	add	r8, r4
 8007600:	f101 3eff 	add.w	lr, r1, #4294967295
 8007604:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8007608:	ed15 6a01 	vldr	s12, [r5, #-4]
 800760c:	ed55 6a02 	vldr	s13, [r5, #-8]
 8007610:	f004 060f 	and.w	r6, r4, #15
 8007614:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007618:	0924      	lsrs	r4, r4, #4
 800761a:	edd6 7a00 	vldr	s15, [r6]
 800761e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007622:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007626:	ed94 6a00 	vldr	s12, [r4]
 800762a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800762e:	3508      	adds	r5, #8
 8007630:	45a8      	cmp	r8, r5
 8007632:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007636:	d1e5      	bne.n	8007604 <ai_dict4_dot_array_f32+0x108>
 8007638:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800763c:	f10c 0c01 	add.w	ip, ip, #1
 8007640:	4461      	add	r1, ip
 8007642:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8007646:	07fc      	lsls	r4, r7, #31
 8007648:	d509      	bpl.n	800765e <ai_dict4_dot_array_f32+0x162>
 800764a:	7809      	ldrb	r1, [r1, #0]
 800764c:	edd3 7a00 	vldr	s15, [r3]
 8007650:	090b      	lsrs	r3, r1, #4
 8007652:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007656:	edd2 6a00 	vldr	s13, [r2]
 800765a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800765e:	edd0 7a00 	vldr	s15, [r0]
 8007662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007666:	ed80 7a00 	vstr	s14, [r0]
 800766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007674 <ai_dict4_dot_array_f32+0x178>
 8007672:	e7b8      	b.n	80075e6 <ai_dict4_dot_array_f32+0xea>
 8007674:	00000000 	.word	0x00000000

08007678 <ai_dict_decompress_f32>:
 8007678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800767c:	9f08      	ldr	r7, [sp, #32]
 800767e:	2b04      	cmp	r3, #4
 8007680:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007684:	d00e      	beq.n	80076a4 <ai_dict_decompress_f32+0x2c>
 8007686:	2b08      	cmp	r3, #8
 8007688:	d10a      	bne.n	80076a0 <ai_dict_decompress_f32+0x28>
 800768a:	42b8      	cmp	r0, r7
 800768c:	d208      	bcs.n	80076a0 <ai_dict_decompress_f32+0x28>
 800768e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007692:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f840 3b04 	str.w	r3, [r0], #4
 800769c:	4287      	cmp	r7, r0
 800769e:	d8f6      	bhi.n	800768e <ai_dict_decompress_f32+0x16>
 80076a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076a4:	9b07      	ldr	r3, [sp, #28]
 80076a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80076aa:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80076ae:	f10c 38ff 	add.w	r8, ip, #4294967295
 80076b2:	f003 0e01 	and.w	lr, r3, #1
 80076b6:	42b8      	cmp	r0, r7
 80076b8:	d2f2      	bcs.n	80076a0 <ai_dict_decompress_f32+0x28>
 80076ba:	f1bc 0f00 	cmp.w	ip, #0
 80076be:	d01a      	beq.n	80076f6 <ai_dict_decompress_f32+0x7e>
 80076c0:	f100 0508 	add.w	r5, r0, #8
 80076c4:	1e4c      	subs	r4, r1, #1
 80076c6:	eb01 0608 	add.w	r6, r1, r8
 80076ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80076ce:	091b      	lsrs	r3, r3, #4
 80076d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076d4:	42a6      	cmp	r6, r4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f845 3c08 	str.w	r3, [r5, #-8]
 80076dc:	7823      	ldrb	r3, [r4, #0]
 80076de:	f003 030f 	and.w	r3, r3, #15
 80076e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076e6:	f105 0508 	add.w	r5, r5, #8
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f845 3c0c 	str.w	r3, [r5, #-12]
 80076f0:	d1eb      	bne.n	80076ca <ai_dict_decompress_f32+0x52>
 80076f2:	4461      	add	r1, ip
 80076f4:	4448      	add	r0, r9
 80076f6:	f1be 0f00 	cmp.w	lr, #0
 80076fa:	d103      	bne.n	8007704 <ai_dict_decompress_f32+0x8c>
 80076fc:	4287      	cmp	r7, r0
 80076fe:	d8dc      	bhi.n	80076ba <ai_dict_decompress_f32+0x42>
 8007700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007704:	780b      	ldrb	r3, [r1, #0]
 8007706:	091b      	lsrs	r3, r3, #4
 8007708:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800770c:	3101      	adds	r1, #1
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	3004      	adds	r0, #4
 8007714:	e7cf      	b.n	80076b6 <ai_dict_decompress_f32+0x3e>
 8007716:	bf00      	nop

08007718 <forward_conv2d>:
 8007718:	6942      	ldr	r2, [r0, #20]
 800771a:	8813      	ldrh	r3, [r2, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 87b7 	beq.w	8008690 <forward_conv2d+0xf78>
 8007722:	6852      	ldr	r2, [r2, #4]
 8007724:	6851      	ldr	r1, [r2, #4]
 8007726:	b101      	cbz	r1, 800772a <forward_conv2d+0x12>
 8007728:	6809      	ldr	r1, [r1, #0]
 800772a:	2b01      	cmp	r3, #1
 800772c:	f240 87ad 	bls.w	800868a <forward_conv2d+0xf72>
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	ed2d 8b10 	vpush	{d8-d15}
 8007738:	b0cb      	sub	sp, #300	; 0x12c
 800773a:	6914      	ldr	r4, [r2, #16]
 800773c:	af02      	add	r7, sp, #8
 800773e:	2c00      	cmp	r4, #0
 8007740:	f000 879f 	beq.w	8008682 <forward_conv2d+0xf6a>
 8007744:	6824      	ldr	r4, [r4, #0]
 8007746:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800774a:	2b02      	cmp	r3, #2
 800774c:	f000 8794 	beq.w	8008678 <forward_conv2d+0xf60>
 8007750:	69d5      	ldr	r5, [r2, #28]
 8007752:	2d00      	cmp	r5, #0
 8007754:	f000 8789 	beq.w	800866a <forward_conv2d+0xf52>
 8007758:	f112 0318 	adds.w	r3, r2, #24
 800775c:	682c      	ldr	r4, [r5, #0]
 800775e:	d004      	beq.n	800776a <forward_conv2d+0x52>
 8007760:	8b13      	ldrh	r3, [r2, #24]
 8007762:	2b01      	cmp	r3, #1
 8007764:	f240 8796 	bls.w	8008694 <forward_conv2d+0xf7c>
 8007768:	686b      	ldr	r3, [r5, #4]
 800776a:	68aa      	ldr	r2, [r5, #8]
 800776c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8007770:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8007774:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007778:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800777c:	68ce      	ldr	r6, [r1, #12]
 800777e:	69a1      	ldr	r1, [r4, #24]
 8007780:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8007784:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007788:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800778c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8007790:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8007794:	f8de 100c 	ldr.w	r1, [lr, #12]
 8007798:	64b9      	str	r1, [r7, #72]	; 0x48
 800779a:	f8de 1008 	ldr.w	r1, [lr, #8]
 800779e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80077a2:	6871      	ldr	r1, [r6, #4]
 80077a4:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80077a8:	68f1      	ldr	r1, [r6, #12]
 80077aa:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80077ae:	68b1      	ldr	r1, [r6, #8]
 80077b0:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80077b4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80077b8:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80077bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80077c0:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80077c4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80077c8:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80077ca:	6889      	ldr	r1, [r1, #8]
 80077cc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80077d0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80077d2:	e9d5 ab00 	ldrd	sl, fp, [r5]
 80077d6:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80077da:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80077dc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80077e0:	6981      	ldr	r1, [r0, #24]
 80077e2:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80077e6:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 872e 	beq.w	800864c <forward_conv2d+0xf34>
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007804:	4606      	mov	r6, r0
 8007806:	69c0      	ldr	r0, [r0, #28]
 8007808:	2a00      	cmp	r2, #0
 800780a:	f000 8712 	beq.w	8008632 <forward_conv2d+0xf1a>
 800780e:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 8007812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007816:	6892      	ldr	r2, [r2, #8]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800781e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8007822:	f001 fbdb 	bl	8008fdc <ai_array_get_byte_size>
 8007826:	69a3      	ldr	r3, [r4, #24]
 8007828:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800782c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007836:	6a32      	ldr	r2, [r6, #32]
 8007838:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800783c:	f3c3 5441 	ubfx	r4, r3, #21, #2
 8007840:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 8007844:	fa1f f089 	uxth.w	r0, r9
 8007848:	4125      	asrs	r5, r4
 800784a:	3801      	subs	r0, #1
 800784c:	1e4c      	subs	r4, r1, #1
 800784e:	fb04 1100 	mla	r1, r4, r0, r1
 8007852:	6479      	str	r1, [r7, #68]	; 0x44
 8007854:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8007858:	f8df c39c 	ldr.w	ip, [pc, #924]	; 8007bf8 <forward_conv2d+0x4e0>
 800785c:	fa1f f288 	uxth.w	r2, r8
 8007860:	3a01      	subs	r2, #1
 8007862:	1e48      	subs	r0, r1, #1
 8007864:	fb00 1102 	mla	r1, r0, r2, r1
 8007868:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800786c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007870:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007874:	4610      	mov	r0, r2
 8007876:	2a00      	cmp	r2, #0
 8007878:	bf08      	it	eq
 800787a:	4660      	moveq	r0, ip
 800787c:	2b04      	cmp	r3, #4
 800787e:	b2ad      	uxth	r5, r5
 8007880:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8007884:	f000 8533 	beq.w	80082ee <forward_conv2d+0xbd6>
 8007888:	2b08      	cmp	r3, #8
 800788a:	f000 8530 	beq.w	80082ee <forward_conv2d+0xbd6>
 800788e:	fa1f f38a 	uxth.w	r3, sl
 8007892:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800789a:	425b      	negs	r3, r3
 800789c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078a0:	2900      	cmp	r1, #0
 80078a2:	f000 8242 	beq.w	8007d2a <forward_conv2d+0x612>
 80078a6:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80078aa:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 80078ae:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 8007bf4 <forward_conv2d+0x4dc>
 80078b2:	fb00 f305 	mul.w	r3, r0, r5
 80078b6:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 80078ba:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80078be:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80078c2:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 80078c6:	663d      	str	r5, [r7, #96]	; 0x60
 80078c8:	fa0f f289 	sxth.w	r2, r9
 80078cc:	fb03 f400 	mul.w	r4, r3, r0
 80078d0:	fa1f f18b 	uxth.w	r1, fp
 80078d4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80078d8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80078dc:	67bc      	str	r4, [r7, #120]	; 0x78
 80078de:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 80078e2:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80078e6:	4249      	negs	r1, r1
 80078e8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80078ec:	0092      	lsls	r2, r2, #2
 80078ee:	0081      	lsls	r1, r0, #2
 80078f0:	4605      	mov	r5, r0
 80078f2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80078f6:	fb04 f200 	mul.w	r2, r4, r0
 80078fa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80078fe:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8007902:	fb01 fc00 	mul.w	ip, r1, r0
 8007906:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800790a:	fb01 fc03 	mul.w	ip, r1, r3
 800790e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007910:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	fa0f f688 	sxth.w	r6, r8
 8007922:	469c      	mov	ip, r3
 8007924:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac
 8007928:	4633      	mov	r3, r6
 800792a:	fb0c f606 	mul.w	r6, ip, r6
 800792e:	677e      	str	r6, [r7, #116]	; 0x74
 8007930:	4666      	mov	r6, ip
 8007932:	fb04 f606 	mul.w	r6, r4, r6
 8007936:	4686      	mov	lr, r0
 8007938:	4620      	mov	r0, r4
 800793a:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800793e:	633e      	str	r6, [r7, #48]	; 0x30
 8007940:	fb01 f404 	mul.w	r4, r1, r4
 8007944:	fb03 f605 	mul.w	r6, r3, r5
 8007948:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800794a:	667c      	str	r4, [r7, #100]	; 0x64
 800794c:	460b      	mov	r3, r1
 800794e:	4604      	mov	r4, r0
 8007950:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007954:	62fe      	str	r6, [r7, #44]	; 0x2c
 8007956:	fb05 f404 	mul.w	r4, r5, r4
 800795a:	617c      	str	r4, [r7, #20]
 800795c:	460c      	mov	r4, r1
 800795e:	fb04 f403 	mul.w	r4, r4, r3
 8007962:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8007966:	65bc      	str	r4, [r7, #88]	; 0x58
 8007968:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800796c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007970:	fb01 f104 	mul.w	r1, r1, r4
 8007974:	61b9      	str	r1, [r7, #24]
 8007976:	0091      	lsls	r1, r2, #2
 8007978:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800797c:	62b9      	str	r1, [r7, #40]	; 0x28
 800797e:	fb00 f202 	mul.w	r2, r0, r2
 8007982:	0081      	lsls	r1, r0, #2
 8007984:	6239      	str	r1, [r7, #32]
 8007986:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800798a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800798e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8007992:	011a      	lsls	r2, r3, #4
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800799a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800799e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079a2:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 80079a6:	2300      	movs	r3, #0
 80079a8:	6439      	str	r1, [r7, #64]	; 0x40
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079ae:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80079b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80079ba:	2900      	cmp	r1, #0
 80079bc:	441a      	add	r2, r3
 80079be:	bfb4      	ite	lt
 80079c0:	2100      	movlt	r1, #0
 80079c2:	2300      	movge	r3, #0
 80079c4:	4282      	cmp	r2, r0
 80079c6:	bf28      	it	cs
 80079c8:	4602      	movcs	r2, r0
 80079ca:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80079ce:	2801      	cmp	r0, #1
 80079d0:	f000 8309 	beq.w	8007fe6 <forward_conv2d+0x8ce>
 80079d4:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80079d8:	4281      	cmp	r1, r0
 80079da:	f000 81c3 	beq.w	8007d64 <forward_conv2d+0x64c>
 80079de:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80079e2:	2900      	cmp	r1, #0
 80079e4:	f000 8182 	beq.w	8007cec <forward_conv2d+0x5d4>
 80079e8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80079ec:	fb93 f1f0 	sdiv	r1, r3, r0
 80079f0:	fb00 3111 	mls	r1, r0, r1, r3
 80079f4:	1a41      	subs	r1, r0, r1
 80079f6:	1ad2      	subs	r2, r2, r3
 80079f8:	fb91 f5f0 	sdiv	r5, r1, r0
 80079fc:	fb00 1515 	mls	r5, r0, r5, r1
 8007a00:	1b52      	subs	r2, r2, r5
 8007a02:	4601      	mov	r1, r0
 8007a04:	4402      	add	r2, r0
 8007a06:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007a0a:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8007a0e:	f8c7 b01c 	str.w	fp, [r7, #28]
 8007a12:	4604      	mov	r4, r0
 8007a14:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007a18:	fbb4 f4f0 	udiv	r4, r4, r0
 8007a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a1e:	3a01      	subs	r2, #1
 8007a20:	fb92 f8f1 	sdiv	r8, r2, r1
 8007a24:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007a28:	eba0 0c04 	sub.w	ip, r0, r4
 8007a2c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007a30:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007a34:	4614      	mov	r4, r2
 8007a36:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8007a3a:	fbb4 f2f2 	udiv	r2, r4, r2
 8007a3e:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8007a42:	657a      	str	r2, [r7, #84]	; 0x54
 8007a44:	441d      	add	r5, r3
 8007a46:	fb0e f000 	mul.w	r0, lr, r0
 8007a4a:	440b      	add	r3, r1
 8007a4c:	eba6 0608 	sub.w	r6, r6, r8
 8007a50:	fb04 f505 	mul.w	r5, r4, r5
 8007a54:	3b01      	subs	r3, #1
 8007a56:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8007a5a:	fb93 f3f4 	sdiv	r3, r3, r4
 8007a5e:	fb00 f406 	mul.w	r4, r0, r6
 8007a62:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007a66:	66fd      	str	r5, [r7, #108]	; 0x6c
 8007a68:	0091      	lsls	r1, r2, #2
 8007a6a:	fb00 f003 	mul.w	r0, r0, r3
 8007a6e:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8007a72:	6538      	str	r0, [r7, #80]	; 0x50
 8007a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a78:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8007a7c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8007a80:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8007a84:	1ac3      	subs	r3, r0, r3
 8007a86:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8007a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a8e:	008b      	lsls	r3, r1, #2
 8007a90:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a92:	00d3      	lsls	r3, r2, #3
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
 8007a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8007aac:	673b      	str	r3, [r7, #112]	; 0x70
 8007aae:	46c2      	mov	sl, r8
 8007ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ab4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ab8:	eb03 0c02 	add.w	ip, r3, r2
 8007abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f2c0 813b 	blt.w	8007d3c <forward_conv2d+0x624>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8007aca:	f8d7 80ac 	ldr.w	r8, [r7, #172]	; 0xac
 8007ace:	4605      	mov	r5, r0
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ada:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8007ade:	4413      	add	r3, r2
 8007ae0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007aea:	428b      	cmp	r3, r1
 8007aec:	bf94      	ite	ls
 8007aee:	ebc6 0303 	rsbls	r3, r6, r3
 8007af2:	ebc6 0301 	rsbhi	r3, r6, r1
 8007af6:	4415      	add	r5, r2
 8007af8:	1a1b      	subs	r3, r3, r0
 8007afa:	00a4      	lsls	r4, r4, #2
 8007afc:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8007b00:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 8007b04:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8007b08:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	bf08      	it	eq
 8007b10:	4662      	moveq	r2, ip
 8007b12:	f108 31ff 	add.w	r1, r8, #4294967295
 8007b16:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007b1a:	fb91 f1f0 	sdiv	r1, r1, r0
 8007b1e:	4429      	add	r1, r5
 8007b20:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8007b24:	fb0e 5501 	mla	r5, lr, r1, r5
 8007b28:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007b2c:	4403      	add	r3, r0
 8007b2e:	fb01 6104 	mla	r1, r1, r4, r6
 8007b32:	3b01      	subs	r3, #1
 8007b34:	fb93 f6f0 	sdiv	r6, r3, r0
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8007b3e:	fb06 3110 	mls	r1, r6, r0, r3
 8007b42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b46:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007b4a:	4562      	cmp	r2, ip
 8007b4c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007b50:	bf08      	it	eq
 8007b52:	eeb0 6a48 	vmoveq.f32	s12, s16
 8007b56:	1b9b      	subs	r3, r3, r6
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d075      	beq.n	8007c48 <forward_conv2d+0x530>
 8007b5c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8007b60:	fb0e f803 	mul.w	r8, lr, r3
 8007b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b66:	fb00 fb01 	mul.w	fp, r0, r1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d06c      	beq.n	8007c48 <forward_conv2d+0x530>
 8007b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b72:	18d3      	adds	r3, r2, r3
 8007b74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b80:	2300      	movs	r3, #0
 8007b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b84:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	4413      	add	r3, r2
 8007b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	4413      	add	r3, r2
 8007b96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b9e:	ecf3 7a01 	vldmia	r3!, {s15}
 8007ba2:	f1ba 0f00 	cmp.w	sl, #0
 8007ba6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007baa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007bae:	f340 80c3 	ble.w	8007d38 <forward_conv2d+0x620>
 8007bb2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8007bb6:	f04f 0c00 	mov.w	ip, #0
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	dd1e      	ble.n	8007bfc <forward_conv2d+0x4e4>
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	eb00 040e 	add.w	r4, r0, lr
 8007bc4:	4284      	cmp	r4, r0
 8007bc6:	d910      	bls.n	8007bea <forward_conv2d+0x4d2>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	462a      	mov	r2, r5
 8007bcc:	ecb3 7a01 	vldmia	r3!, {s14}
 8007bd0:	ecf2 6a01 	vldmia	r2!, {s13}
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007bda:	d8f7      	bhi.n	8007bcc <forward_conv2d+0x4b4>
 8007bdc:	43c3      	mvns	r3, r0
 8007bde:	441c      	add	r4, r3
 8007be0:	f024 0403 	bic.w	r4, r4, #3
 8007be4:	3404      	adds	r4, #4
 8007be6:	4425      	add	r5, r4
 8007be8:	4420      	add	r0, r4
 8007bea:	3101      	adds	r1, #1
 8007bec:	428e      	cmp	r6, r1
 8007bee:	4448      	add	r0, r9
 8007bf0:	d1e6      	bne.n	8007bc0 <forward_conv2d+0x4a8>
 8007bf2:	e003      	b.n	8007bfc <forward_conv2d+0x4e4>
 8007bf4:	00000000 	.word	0x00000000
 8007bf8:	0800735d 	.word	0x0800735d
 8007bfc:	f10c 0c01 	add.w	ip, ip, #1
 8007c00:	45e2      	cmp	sl, ip
 8007c02:	4458      	add	r0, fp
 8007c04:	4445      	add	r5, r8
 8007c06:	d1d8      	bne.n	8007bba <forward_conv2d+0x4a2>
 8007c08:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007c0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c10:	441d      	add	r5, r3
 8007c12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c16:	ece3 7a01 	vstmia	r3!, {s15}
 8007c1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d1b9      	bne.n	8007b9a <forward_conv2d+0x482>
 8007c26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8007c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c2e:	4472      	add	r2, lr
 8007c30:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c36:	1a52      	subs	r2, r2, r1
 8007c38:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8007c3c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8007c40:	3301      	adds	r3, #1
 8007c42:	429a      	cmp	r2, r3
 8007c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c46:	d19d      	bne.n	8007b84 <forward_conv2d+0x46c>
 8007c48:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007c4c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c52:	4608      	mov	r0, r1
 8007c54:	4410      	add	r0, r2
 8007c56:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007c5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8007c5e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8007c62:	4401      	add	r1, r0
 8007c64:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8007c68:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007c6c:	1a8a      	subs	r2, r1, r2
 8007c6e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8007c72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007c76:	3301      	adds	r3, #1
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8007c7c:	f47f af18 	bne.w	8007ab0 <forward_conv2d+0x398>
 8007c80:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8007c84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c88:	b383      	cbz	r3, 8007cec <forward_conv2d+0x5d4>
 8007c8a:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8007c8e:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 8007c92:	f8d7 80e0 	ldr.w	r8, [r7, #224]	; 0xe0
 8007c96:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
 8007c9a:	2500      	movs	r5, #0
 8007c9c:	46a2      	mov	sl, r4
 8007c9e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007ca2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007ca6:	f8c3 a008 	str.w	sl, [r3, #8]
 8007caa:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8007cae:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8007cb2:	4633      	mov	r3, r6
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4416      	add	r6, r2
 8007cb8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007cbc:	47a0      	blx	r4
 8007cbe:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007cc2:	4492      	add	sl, r2
 8007cc4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007cc8:	eba6 0309 	sub.w	r3, r6, r9
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	bfa8      	it	ge
 8007cd0:	464e      	movge	r6, r9
 8007cd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007cd6:	3501      	adds	r5, #1
 8007cd8:	42ab      	cmp	r3, r5
 8007cda:	d1e0      	bne.n	8007c9e <forward_conv2d+0x586>
 8007cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	609a      	str	r2, [r3, #8]
 8007cf8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cfe:	4610      	mov	r0, r2
 8007d00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d04:	4418      	add	r0, r3
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d12:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8007d16:	4413      	add	r3, r2
 8007d18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d20:	3101      	adds	r1, #1
 8007d22:	428b      	cmp	r3, r1
 8007d24:	67f9      	str	r1, [r7, #124]	; 0x7c
 8007d26:	f47f ae42 	bne.w	80079ae <forward_conv2d+0x296>
 8007d2a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	ecbd 8b10 	vpop	{d8-d15}
 8007d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d38:	461a      	mov	r2, r3
 8007d3a:	e767      	b.n	8007c0c <forward_conv2d+0x4f4>
 8007d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d40:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8007d44:	fb90 f3f2 	sdiv	r3, r0, r2
 8007d48:	fb02 0313 	mls	r3, r2, r3, r0
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	4605      	mov	r5, r0
 8007d50:	fb93 f0f2 	sdiv	r0, r3, r2
 8007d54:	fb02 3010 	mls	r0, r2, r0, r3
 8007d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5a:	462e      	mov	r6, r5
 8007d5c:	18c4      	adds	r4, r0, r3
 8007d5e:	eb02 0805 	add.w	r8, r2, r5
 8007d62:	e6b6      	b.n	8007ad2 <forward_conv2d+0x3ba>
 8007d64:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007d66:	2901      	cmp	r1, #1
 8007d68:	f47f ae39 	bne.w	80079de <forward_conv2d+0x2c6>
 8007d6c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8007d70:	2900      	cmp	r1, #0
 8007d72:	d0bb      	beq.n	8007cec <forward_conv2d+0x5d4>
 8007d74:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8007d78:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007d7c:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 8007d80:	fbb1 f5f0 	udiv	r5, r1, r0
 8007d84:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007d88:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8007d8c:	63bd      	str	r5, [r7, #56]	; 0x38
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	1a8c      	subs	r4, r1, r2
 8007d92:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8007d96:	00b2      	lsls	r2, r6, #2
 8007d98:	fb02 f204 	mul.w	r2, r2, r4
 8007d9c:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 8007da0:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8007da4:	637a      	str	r2, [r7, #52]	; 0x34
 8007da6:	0082      	lsls	r2, r0, #2
 8007da8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007daa:	00ca      	lsls	r2, r1, #3
 8007dac:	603a      	str	r2, [r7, #0]
 8007dae:	00aa      	lsls	r2, r5, #2
 8007db0:	60ba      	str	r2, [r7, #8]
 8007db2:	fb03 f206 	mul.w	r2, r3, r6
 8007db6:	673a      	str	r2, [r7, #112]	; 0x70
 8007db8:	6a3a      	ldr	r2, [r7, #32]
 8007dba:	fb02 f303 	mul.w	r3, r2, r3
 8007dbe:	61fb      	str	r3, [r7, #28]
 8007dc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007dc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007dde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f2c0 826c 	blt.w	80082c0 <forward_conv2d+0xba8>
 8007de8:	2100      	movs	r1, #0
 8007dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dec:	460a      	mov	r2, r1
 8007dee:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8007df2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8007df6:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 8007dfa:	4420      	add	r0, r4
 8007dfc:	4408      	add	r0, r1
 8007dfe:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8007e02:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8007e06:	190c      	adds	r4, r1, r4
 8007e08:	42ac      	cmp	r4, r5
 8007e0a:	bf28      	it	cs
 8007e0c:	462c      	movcs	r4, r5
 8007e0e:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8007e12:	0080      	lsls	r0, r0, #2
 8007e14:	1aa4      	subs	r4, r4, r2
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	f000 8243 	beq.w	80082a2 <forward_conv2d+0xb8a>
 8007e1c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007e20:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 8007e24:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8007e28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e2c:	42b5      	cmp	r5, r6
 8007e2e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8007e32:	eba3 0204 	sub.w	r2, r3, r4
 8007e36:	eba1 0104 	sub.w	r1, r1, r4
 8007e3a:	bf08      	it	eq
 8007e3c:	eef0 3a48 	vmoveq.f32	s7, s16
 8007e40:	462b      	mov	r3, r5
 8007e42:	69fd      	ldr	r5, [r7, #28]
 8007e44:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 8007e48:	4428      	add	r0, r5
 8007e4a:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8007e4e:	fb05 6e00 	mla	lr, r5, r0, r6
 8007e52:	eb0e 000b 	add.w	r0, lr, fp
 8007e56:	4586      	cmp	lr, r0
 8007e58:	6278      	str	r0, [r7, #36]	; 0x24
 8007e5a:	f080 80a5 	bcs.w	8007fa8 <forward_conv2d+0x890>
 8007e5e:	0092      	lsls	r2, r2, #2
 8007e60:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8007e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e66:	fb01 f10b 	mul.w	r1, r1, fp
 8007e6a:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8007e6e:	f024 0803 	bic.w	r8, r4, #3
 8007e72:	2a00      	cmp	r2, #0
 8007e74:	f000 8098 	beq.w	8007fa8 <forward_conv2d+0x890>
 8007e78:	f108 32ff 	add.w	r2, r8, #4294967295
 8007e7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007e7e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007e82:	0892      	lsrs	r2, r2, #2
 8007e84:	3201      	adds	r2, #1
 8007e86:	4401      	add	r1, r0
 8007e88:	fb02 f00a 	mul.w	r0, r2, sl
 8007e8c:	6578      	str	r0, [r7, #84]	; 0x54
 8007e8e:	0110      	lsls	r0, r2, #4
 8007e90:	0092      	lsls	r2, r2, #2
 8007e92:	653a      	str	r2, [r7, #80]	; 0x50
 8007e94:	1aca      	subs	r2, r1, r3
 8007e96:	613a      	str	r2, [r7, #16]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	66b8      	str	r0, [r7, #104]	; 0x68
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ea2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007eba:	ecf3 6a01 	vldmia	r3!, {s13}
 8007ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ec2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007ecc:	dd57      	ble.n	8007f7e <forward_conv2d+0x866>
 8007ece:	4676      	mov	r6, lr
 8007ed0:	f04f 0c00 	mov.w	ip, #0
 8007ed4:	f1b8 0f00 	cmp.w	r8, #0
 8007ed8:	f340 81e1 	ble.w	800829e <forward_conv2d+0xb86>
 8007edc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007ee0:	f109 0310 	add.w	r3, r9, #16
 8007ee4:	18b1      	adds	r1, r6, r2
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	4632      	mov	r2, r6
 8007eea:	eb02 050b 	add.w	r5, r2, fp
 8007eee:	ed95 7a00 	vldr	s14, [r5]
 8007ef2:	ed53 7a03 	vldr	s15, [r3, #-12]
 8007ef6:	ed92 4a00 	vldr	s8, [r2]
 8007efa:	ed53 4a04 	vldr	s9, [r3, #-16]
 8007efe:	ed91 5a00 	vldr	s10, [r1]
 8007f02:	ed53 5a02 	vldr	s11, [r3, #-8]
 8007f06:	ed13 6a01 	vldr	s12, [r3, #-4]
 8007f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0e:	eb01 050b 	add.w	r5, r1, fp
 8007f12:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007f16:	3004      	adds	r0, #4
 8007f18:	4540      	cmp	r0, r8
 8007f1a:	ed95 7a00 	vldr	s14, [r5]
 8007f1e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007f22:	4452      	add	r2, sl
 8007f24:	4451      	add	r1, sl
 8007f26:	f103 0310 	add.w	r3, r3, #16
 8007f2a:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007f2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007f32:	dbda      	blt.n	8007eea <forward_conv2d+0x7d2>
 8007f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007f38:	441e      	add	r6, r3
 8007f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f3c:	4499      	add	r9, r3
 8007f3e:	4284      	cmp	r4, r0
 8007f40:	dd11      	ble.n	8007f66 <forward_conv2d+0x84e>
 8007f42:	4602      	mov	r2, r0
 8007f44:	4633      	mov	r3, r6
 8007f46:	4649      	mov	r1, r9
 8007f48:	edd3 7a00 	vldr	s15, [r3]
 8007f4c:	ecb1 7a01 	vldmia	r1!, {s14}
 8007f50:	3201      	adds	r2, #1
 8007f52:	4294      	cmp	r4, r2
 8007f54:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007f58:	445b      	add	r3, fp
 8007f5a:	d1f5      	bne.n	8007f48 <forward_conv2d+0x830>
 8007f5c:	1a20      	subs	r0, r4, r0
 8007f5e:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8007f62:	fb00 660b 	mla	r6, r0, fp, r6
 8007f66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f6a:	441e      	add	r6, r3
 8007f6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f70:	4499      	add	r9, r3
 8007f72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f76:	f10c 0c01 	add.w	ip, ip, #1
 8007f7a:	4563      	cmp	r3, ip
 8007f7c:	d1aa      	bne.n	8007ed4 <forward_conv2d+0x7bc>
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f80:	4499      	add	r9, r3
 8007f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f84:	ece3 6a01 	vstmia	r3!, {s13}
 8007f88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f8a:	e9d7 232d 	ldrd	r2, r3, [r7, #180]	; 0xb4
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d191      	bne.n	8007eb6 <forward_conv2d+0x79e>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	1a9b      	subs	r3, r3, r2
 8007f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	f10e 0e04 	add.w	lr, lr, #4
 8007fa2:	459e      	cmp	lr, r3
 8007fa4:	f4ff af7d 	bcc.w	8007ea2 <forward_conv2d+0x78a>
 8007fa8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007fac:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8007fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fb4:	440a      	add	r2, r1
 8007fb6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8007fba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007fbe:	4608      	mov	r0, r1
 8007fc0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007fc4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8007fc8:	4410      	add	r0, r2
 8007fca:	1a8a      	subs	r2, r1, r2
 8007fcc:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8007fd0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007fd4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8007fd8:	3301      	adds	r3, #1
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007fe0:	f47f aefd 	bne.w	8007dde <forward_conv2d+0x6c6>
 8007fe4:	e64e      	b.n	8007c84 <forward_conv2d+0x56c>
 8007fe6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007fe8:	2801      	cmp	r0, #1
 8007fea:	f47f acf8 	bne.w	80079de <forward_conv2d+0x2c6>
 8007fee:	1ad2      	subs	r2, r2, r3
 8007ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff2:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8007ff6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ffc:	fb00 4101 	mla	r1, r0, r1, r4
 8008000:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008004:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8008008:	f080 819a 	bcs.w	8008340 <forward_conv2d+0xc28>
 800800c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008010:	2a00      	cmp	r2, #0
 8008012:	f43f ae37 	beq.w	8007c84 <forward_conv2d+0x56c>
 8008016:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008018:	f8c7 b038 	str.w	fp, [r7, #56]	; 0x38
 800801c:	fb02 f303 	mul.w	r3, r2, r3
 8008020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008022:	66bb      	str	r3, [r7, #104]	; 0x68
 8008024:	1a9b      	subs	r3, r3, r2
 8008026:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008028:	188b      	adds	r3, r1, r2
 800802a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800802c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008030:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008038:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800803c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008044:	2300      	movs	r3, #0
 8008046:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800804a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 814a 	beq.w	80082e8 <forward_conv2d+0xbd0>
 8008054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008058:	ed93 6a00 	vldr	s12, [r3]
 800805c:	3304      	adds	r3, #4
 800805e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008062:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 8101 	beq.w	800826e <forward_conv2d+0xb56>
 800806c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008070:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008074:	eb03 0802 	add.w	r8, r3, r2
 8008078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800807a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800807e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008084:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008088:	673b      	str	r3, [r7, #112]	; 0x70
 800808a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800808e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008092:	f04f 0b00 	mov.w	fp, #0
 8008096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800809a:	2b00      	cmp	r3, #0
 800809c:	f2c0 811b 	blt.w	80082d6 <forward_conv2d+0xbbe>
 80080a0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80080a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080a6:	2300      	movs	r3, #0
 80080a8:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 80080ac:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80080b0:	eb02 0c04 	add.w	ip, r2, r4
 80080b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80080b8:	4540      	cmp	r0, r8
 80080ba:	bf94      	ite	ls
 80080bc:	ebc3 0300 	rsbls	r3, r3, r0
 80080c0:	ebc3 0308 	rsbhi	r3, r3, r8
 80080c4:	eba2 0903 	sub.w	r9, r2, r3
 80080c8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80080cc:	1ac4      	subs	r4, r0, r3
 80080ce:	fb03 f302 	mul.w	r3, r3, r2
 80080d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	f340 80fa 	ble.w	80082d0 <forward_conv2d+0xbb8>
 80080dc:	f023 050f 	bic.w	r5, r3, #15
 80080e0:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 80080e4:	1e68      	subs	r0, r5, #1
 80080e6:	0900      	lsrs	r0, r0, #4
 80080e8:	3001      	adds	r0, #1
 80080ea:	fb06 f204 	mul.w	r2, r6, r4
 80080ee:	657a      	str	r2, [r7, #84]	; 0x54
 80080f0:	0102      	lsls	r2, r0, #4
 80080f2:	653a      	str	r2, [r7, #80]	; 0x50
 80080f4:	fb06 f909 	mul.w	r9, r6, r9
 80080f8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80080fc:	eef0 6a46 	vmov.f32	s13, s12
 8008100:	f04f 0e00 	mov.w	lr, #0
 8008104:	4662      	mov	r2, ip
 8008106:	2d00      	cmp	r5, #0
 8008108:	f340 80e0 	ble.w	80082cc <forward_conv2d+0xbb4>
 800810c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008110:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008114:	2600      	movs	r6, #0
 8008116:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800811a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800811e:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8008122:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8008126:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800812a:	ed50 da0d 	vldr	s27, [r0, #-52]	; 0xffffffcc
 800812e:	ed14 da0d 	vldr	s26, [r4, #-52]	; 0xffffffcc
 8008132:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8008136:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800813a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800813e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8008142:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8008146:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800814a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800814e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8008152:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8008156:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800815a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800815e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8008162:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008166:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800816a:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800816e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8008172:	ed50 3a04 	vldr	s7, [r0, #-16]
 8008176:	ed14 4a04 	vldr	s8, [r4, #-16]
 800817a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800817e:	ed14 5a03 	vldr	s10, [r4, #-12]
 8008182:	ed50 5a02 	vldr	s11, [r0, #-8]
 8008186:	ed14 7a02 	vldr	s14, [r4, #-8]
 800818a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800818e:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 8008192:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008196:	3610      	adds	r6, #16
 8008198:	42ae      	cmp	r6, r5
 800819a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800819e:	ed50 ea01 	vldr	s29, [r0, #-4]
 80081a2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80081a6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80081aa:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80081ae:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80081b2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80081b6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80081ba:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80081be:	eee9 7a89 	vfma.f32	s15, s19, s18
 80081c2:	eee8 7a80 	vfma.f32	s15, s17, s0
 80081c6:	eee0 7a81 	vfma.f32	s15, s1, s2
 80081ca:	eee1 7a82 	vfma.f32	s15, s3, s4
 80081ce:	eee2 7a83 	vfma.f32	s15, s5, s6
 80081d2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80081d6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80081da:	eee5 7a87 	vfma.f32	s15, s11, s14
 80081de:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80081e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80081e6:	db96      	blt.n	8008116 <forward_conv2d+0x9fe>
 80081e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80081ea:	4451      	add	r1, sl
 80081ec:	4452      	add	r2, sl
 80081ee:	4283      	cmp	r3, r0
 80081f0:	dd0f      	ble.n	8008212 <forward_conv2d+0xafa>
 80081f2:	4604      	mov	r4, r0
 80081f4:	468c      	mov	ip, r1
 80081f6:	4616      	mov	r6, r2
 80081f8:	ecb6 7a01 	vldmia	r6!, {s14}
 80081fc:	ecfc 7a01 	vldmia	ip!, {s15}
 8008200:	3401      	adds	r4, #1
 8008202:	42a3      	cmp	r3, r4
 8008204:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008208:	d1f6      	bne.n	80081f8 <forward_conv2d+0xae0>
 800820a:	1a18      	subs	r0, r3, r0
 800820c:	0080      	lsls	r0, r0, #2
 800820e:	4402      	add	r2, r0
 8008210:	4401      	add	r1, r0
 8008212:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008214:	4402      	add	r2, r0
 8008216:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800821a:	f10e 0e01 	add.w	lr, lr, #1
 800821e:	4570      	cmp	r0, lr
 8008220:	4449      	add	r1, r9
 8008222:	f47f af70 	bne.w	8008106 <forward_conv2d+0x9ee>
 8008226:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800822a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800822c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008230:	edc3 6a00 	vstr	s13, [r3]
 8008234:	4608      	mov	r0, r1
 8008236:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800823a:	440b      	add	r3, r1
 800823c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008240:	673b      	str	r3, [r7, #112]	; 0x70
 8008242:	4410      	add	r0, r2
 8008244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008246:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800824a:	4608      	mov	r0, r1
 800824c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008250:	4418      	add	r0, r3
 8008252:	1acb      	subs	r3, r1, r3
 8008254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008258:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800825c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8008260:	f10b 0b01 	add.w	fp, fp, #1
 8008264:	455b      	cmp	r3, fp
 8008266:	eba8 0802 	sub.w	r8, r8, r2
 800826a:	f47f af14 	bne.w	8008096 <forward_conv2d+0x97e>
 800826e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008272:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008278:	440a      	add	r2, r1
 800827a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800827e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008282:	3204      	adds	r2, #4
 8008284:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008288:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800828c:	3301      	adds	r3, #1
 800828e:	429a      	cmp	r2, r3
 8008290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008294:	f47f aed9 	bne.w	800804a <forward_conv2d+0x932>
 8008298:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
 800829c:	e4f2      	b.n	8007c84 <forward_conv2d+0x56c>
 800829e:	2000      	movs	r0, #0
 80082a0:	e64d      	b.n	8007f3e <forward_conv2d+0x826>
 80082a2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80082a6:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ae:	1b19      	subs	r1, r3, r4
 80082b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80082b4:	eef0 3a48 	vmov.f32	s7, s16
 80082b8:	1b1a      	subs	r2, r3, r4
 80082ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80082be:	e5c0      	b.n	8007e42 <forward_conv2d+0x72a>
 80082c0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80082c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082c6:	460a      	mov	r2, r1
 80082c8:	440b      	add	r3, r1
 80082ca:	e590      	b.n	8007dee <forward_conv2d+0x6d6>
 80082cc:	2000      	movs	r0, #0
 80082ce:	e78e      	b.n	80081ee <forward_conv2d+0xad6>
 80082d0:	eef0 6a46 	vmov.f32	s13, s12
 80082d4:	e7a7      	b.n	8008226 <forward_conv2d+0xb0e>
 80082d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80082de:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80082e2:	eba8 0303 	sub.w	r3, r8, r3
 80082e6:	e6df      	b.n	80080a8 <forward_conv2d+0x990>
 80082e8:	eeb0 6a48 	vmov.f32	s12, s16
 80082ec:	e6b9      	b.n	8008062 <forward_conv2d+0x94a>
 80082ee:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80082f2:	68ca      	ldr	r2, [r1, #12]
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	f43f aaca 	beq.w	800788e <forward_conv2d+0x176>
 80082fa:	6973      	ldr	r3, [r6, #20]
 80082fc:	8818      	ldrh	r0, [r3, #0]
 80082fe:	2803      	cmp	r0, #3
 8008300:	f240 8194 	bls.w	800862c <forward_conv2d+0xf14>
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 818c 	beq.w	8008626 <forward_conv2d+0xf0e>
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8188 	beq.w	8008626 <forward_conv2d+0xf0e>
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	6889      	ldr	r1, [r1, #8]
 800831a:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008324:	9000      	str	r0, [sp, #0]
 8008326:	462b      	mov	r3, r5
 8008328:	4620      	mov	r0, r4
 800832a:	f7ff f9a5 	bl	8007678 <ai_dict_decompress_f32>
 800832e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008332:	2c00      	cmp	r4, #0
 8008334:	bf18      	it	ne
 8008336:	4623      	movne	r3, r4
 8008338:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800833c:	f7ff baa7 	b.w	800788e <forward_conv2d+0x176>
 8008340:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008344:	f8c7 d068 	str.w	sp, [r7, #104]	; 0x68
 8008348:	320a      	adds	r2, #10
 800834a:	f022 0207 	bic.w	r2, r2, #7
 800834e:	ebad 0d02 	sub.w	sp, sp, r2
 8008352:	aa02      	add	r2, sp, #8
 8008354:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008358:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800835c:	2a00      	cmp	r2, #0
 800835e:	f000 814d 	beq.w	80085fc <forward_conv2d+0xee4>
 8008362:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008364:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8008368:	fb02 f303 	mul.w	r3, r2, r3
 800836c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800836e:	657b      	str	r3, [r7, #84]	; 0x54
 8008370:	1a9b      	subs	r3, r3, r2
 8008372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008374:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008378:	4413      	add	r3, r2
 800837a:	63bb      	str	r3, [r7, #56]	; 0x38
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008388:	673b      	str	r3, [r7, #112]	; 0x70
 800838a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800838e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008392:	2300      	movs	r3, #0
 8008394:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800839a:	b13b      	cbz	r3, 80083ac <forward_conv2d+0xc94>
 800839c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80083a0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80083a4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80083a8:	f000 fe6c 	bl	8009084 <memcpy>
 80083ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 8135 	beq.w	8008620 <forward_conv2d+0xf08>
 80083b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083b8:	ed93 6a00 	vldr	s12, [r3]
 80083bc:	3304      	adds	r3, #4
 80083be:	673b      	str	r3, [r7, #112]	; 0x70
 80083c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 8101 	beq.w	80085cc <forward_conv2d+0xeb4>
 80083ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80083d2:	eb03 0802 	add.w	r8, r3, r2
 80083d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083f0:	f04f 0b00 	mov.w	fp, #0
 80083f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f2c0 8108 	blt.w	800860e <forward_conv2d+0xef6>
 80083fe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008402:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008404:	2300      	movs	r3, #0
 8008406:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800840a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800840e:	eb02 0c04 	add.w	ip, r2, r4
 8008412:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008416:	4540      	cmp	r0, r8
 8008418:	bf94      	ite	ls
 800841a:	ebc3 0300 	rsbls	r3, r3, r0
 800841e:	ebc3 0308 	rsbhi	r3, r3, r8
 8008422:	eba2 0903 	sub.w	r9, r2, r3
 8008426:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800842a:	1ac4      	subs	r4, r0, r3
 800842c:	fb03 f302 	mul.w	r3, r3, r2
 8008430:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008434:	2a00      	cmp	r2, #0
 8008436:	f340 80e7 	ble.w	8008608 <forward_conv2d+0xef0>
 800843a:	f023 050f 	bic.w	r5, r3, #15
 800843e:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 8008442:	1e68      	subs	r0, r5, #1
 8008444:	0900      	lsrs	r0, r0, #4
 8008446:	3001      	adds	r0, #1
 8008448:	fb06 f204 	mul.w	r2, r6, r4
 800844c:	653a      	str	r2, [r7, #80]	; 0x50
 800844e:	0102      	lsls	r2, r0, #4
 8008450:	637a      	str	r2, [r7, #52]	; 0x34
 8008452:	fb06 f909 	mul.w	r9, r6, r9
 8008456:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800845a:	eef0 6a46 	vmov.f32	s13, s12
 800845e:	f04f 0e00 	mov.w	lr, #0
 8008462:	4662      	mov	r2, ip
 8008464:	2d00      	cmp	r5, #0
 8008466:	f340 80cd 	ble.w	8008604 <forward_conv2d+0xeec>
 800846a:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800846e:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008472:	2600      	movs	r6, #0
 8008474:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8008478:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800847c:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8008480:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8008484:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 8008488:	ed50 da0d 	vldr	s27, [r0, #-52]	; 0xffffffcc
 800848c:	ed14 da0d 	vldr	s26, [r4, #-52]	; 0xffffffcc
 8008490:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8008494:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8008498:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800849c:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80084a0:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 80084a4:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80084a8:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80084ac:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80084b0:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 80084b4:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80084b8:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 80084bc:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 80084c0:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80084c4:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80084c8:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 80084cc:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 80084d0:	ed54 3a04 	vldr	s7, [r4, #-16]
 80084d4:	ed10 4a04 	vldr	s8, [r0, #-16]
 80084d8:	ed54 4a03 	vldr	s9, [r4, #-12]
 80084dc:	ed10 5a03 	vldr	s10, [r0, #-12]
 80084e0:	ed54 5a02 	vldr	s11, [r4, #-8]
 80084e4:	ed10 7a02 	vldr	s14, [r0, #-8]
 80084e8:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80084ec:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 80084f0:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80084f4:	3610      	adds	r6, #16
 80084f6:	42ae      	cmp	r6, r5
 80084f8:	ed10 fa01 	vldr	s30, [r0, #-4]
 80084fc:	ed54 ea01 	vldr	s29, [r4, #-4]
 8008500:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8008504:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008508:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800850c:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008510:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008514:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008518:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800851c:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008520:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008524:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008528:	eee1 7a82 	vfma.f32	s15, s3, s4
 800852c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008530:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008534:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008538:	eee5 7a87 	vfma.f32	s15, s11, s14
 800853c:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008540:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008544:	db96      	blt.n	8008474 <forward_conv2d+0xd5c>
 8008546:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008548:	4451      	add	r1, sl
 800854a:	4452      	add	r2, sl
 800854c:	4283      	cmp	r3, r0
 800854e:	dd0f      	ble.n	8008570 <forward_conv2d+0xe58>
 8008550:	4604      	mov	r4, r0
 8008552:	468c      	mov	ip, r1
 8008554:	4616      	mov	r6, r2
 8008556:	ecb6 7a01 	vldmia	r6!, {s14}
 800855a:	ecfc 7a01 	vldmia	ip!, {s15}
 800855e:	3401      	adds	r4, #1
 8008560:	42a3      	cmp	r3, r4
 8008562:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008566:	d1f6      	bne.n	8008556 <forward_conv2d+0xe3e>
 8008568:	1a18      	subs	r0, r3, r0
 800856a:	0080      	lsls	r0, r0, #2
 800856c:	4402      	add	r2, r0
 800856e:	4401      	add	r1, r0
 8008570:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008572:	4402      	add	r2, r0
 8008574:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8008578:	f10e 0e01 	add.w	lr, lr, #1
 800857c:	4570      	cmp	r0, lr
 800857e:	4449      	add	r1, r9
 8008580:	f47f af70 	bne.w	8008464 <forward_conv2d+0xd4c>
 8008584:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800858a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800858e:	edc3 6a00 	vstr	s13, [r3]
 8008592:	4608      	mov	r0, r1
 8008594:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008598:	440b      	add	r3, r1
 800859a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800859e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085a0:	4410      	add	r0, r2
 80085a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085a4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 80085a8:	4608      	mov	r0, r1
 80085aa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80085ae:	4418      	add	r0, r3
 80085b0:	1acb      	subs	r3, r1, r3
 80085b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80085ba:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 80085be:	f10b 0b01 	add.w	fp, fp, #1
 80085c2:	455b      	cmp	r3, fp
 80085c4:	eba8 0802 	sub.w	r8, r8, r2
 80085c8:	f47f af14 	bne.w	80083f4 <forward_conv2d+0xcdc>
 80085cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80085d0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80085d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085d8:	440a      	add	r2, r1
 80085da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085de:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80085e2:	3204      	adds	r2, #4
 80085e4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80085e8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80085ec:	3301      	adds	r3, #1
 80085ee:	429a      	cmp	r2, r3
 80085f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80085f4:	f47f aed0 	bne.w	8008398 <forward_conv2d+0xc80>
 80085f8:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 80085fc:	f8d7 d068 	ldr.w	sp, [r7, #104]	; 0x68
 8008600:	f7ff bb40 	b.w	8007c84 <forward_conv2d+0x56c>
 8008604:	2000      	movs	r0, #0
 8008606:	e7a1      	b.n	800854c <forward_conv2d+0xe34>
 8008608:	eef0 6a46 	vmov.f32	s13, s12
 800860c:	e7ba      	b.n	8008584 <forward_conv2d+0xe6c>
 800860e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008612:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008616:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800861a:	eba8 0303 	sub.w	r3, r8, r3
 800861e:	e6f2      	b.n	8008406 <forward_conv2d+0xcee>
 8008620:	eeb0 6a48 	vmov.f32	s12, s16
 8008624:	e6cc      	b.n	80083c0 <forward_conv2d+0xca8>
 8008626:	2300      	movs	r3, #0
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	deff      	udf	#255	; 0xff
 800862c:	2300      	movs	r3, #0
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	deff      	udf	#255	; 0xff
 8008632:	b178      	cbz	r0, 8008654 <forward_conv2d+0xf3c>
 8008634:	6883      	ldr	r3, [r0, #8]
 8008636:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800863a:	2301      	movs	r3, #1
 800863c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008640:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8008644:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008648:	f7ff b8f2 	b.w	8007830 <forward_conv2d+0x118>
 800864c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008650:	f7ff b8d2 	b.w	80077f8 <forward_conv2d+0xe0>
 8008654:	2301      	movs	r3, #1
 8008656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800865a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800865e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8008662:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008666:	f7ff b8e3 	b.w	8007830 <forward_conv2d+0x118>
 800866a:	3218      	adds	r2, #24
 800866c:	d007      	beq.n	800867e <forward_conv2d+0xf66>
 800866e:	462b      	mov	r3, r5
 8008670:	462c      	mov	r4, r5
 8008672:	462a      	mov	r2, r5
 8008674:	f7ff b87a 	b.w	800776c <forward_conv2d+0x54>
 8008678:	2300      	movs	r3, #0
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	deff      	udf	#255	; 0xff
 800867e:	68d3      	ldr	r3, [r2, #12]
 8008680:	deff      	udf	#255	; 0xff
 8008682:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8008686:	f7ff b860 	b.w	800774a <forward_conv2d+0x32>
 800868a:	2300      	movs	r3, #0
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	deff      	udf	#255	; 0xff
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	deff      	udf	#255	; 0xff
 8008694:	2300      	movs	r3, #0
 8008696:	f7ff b868 	b.w	800776a <forward_conv2d+0x52>
 800869a:	bf00      	nop

0800869c <forward_dense>:
 800869c:	6942      	ldr	r2, [r0, #20]
 800869e:	8813      	ldrh	r3, [r2, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 81ca 	beq.w	8008a3a <forward_dense+0x39e>
 80086a6:	6852      	ldr	r2, [r2, #4]
 80086a8:	6850      	ldr	r0, [r2, #4]
 80086aa:	b100      	cbz	r0, 80086ae <forward_dense+0x12>
 80086ac:	6800      	ldr	r0, [r0, #0]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	f240 81c0 	bls.w	8008a34 <forward_dense+0x398>
 80086b4:	6911      	ldr	r1, [r2, #16]
 80086b6:	b101      	cbz	r1, 80086ba <forward_dense+0x1e>
 80086b8:	6809      	ldr	r1, [r1, #0]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	f000 81bf 	beq.w	8008a3e <forward_dense+0x3a2>
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	ed2d 8b10 	vpush	{d8-d15}
 80086c8:	69d3      	ldr	r3, [r2, #28]
 80086ca:	b091      	sub	sp, #68	; 0x44
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 820b 	beq.w	8008ae8 <forward_dense+0x44c>
 80086d2:	681c      	ldr	r4, [r3, #0]
 80086d4:	9408      	str	r4, [sp, #32]
 80086d6:	f112 0418 	adds.w	r4, r2, #24
 80086da:	f000 81df 	beq.w	8008a9c <forward_dense+0x400>
 80086de:	8b12      	ldrh	r2, [r2, #24]
 80086e0:	2a01      	cmp	r2, #1
 80086e2:	f240 81fe 	bls.w	8008ae2 <forward_dense+0x446>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 81da 	beq.w	8008aa0 <forward_dense+0x404>
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	9306      	str	r3, [sp, #24]
 80086f0:	9b08      	ldr	r3, [sp, #32]
 80086f2:	68cc      	ldr	r4, [r1, #12]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	68c5      	ldr	r5, [r0, #12]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80086fe:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008702:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8008706:	f3c2 5541 	ubfx	r5, r2, #21, #2
 800870a:	fa4c f505 	asr.w	r5, ip, r5
 800870e:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8008712:	950b      	str	r5, [sp, #44]	; 0x2c
 8008714:	2a04      	cmp	r2, #4
 8008716:	fb07 f506 	mul.w	r5, r7, r6
 800871a:	6864      	ldr	r4, [r4, #4]
 800871c:	9507      	str	r5, [sp, #28]
 800871e:	f000 81dd 	beq.w	8008adc <forward_dense+0x440>
 8008722:	2a08      	cmp	r2, #8
 8008724:	f000 81da 	beq.w	8008adc <forward_dense+0x440>
 8008728:	f04f 0a00 	mov.w	sl, #0
 800872c:	698a      	ldr	r2, [r1, #24]
 800872e:	6981      	ldr	r1, [r0, #24]
 8008730:	6890      	ldr	r0, [r2, #8]
 8008732:	9a08      	ldr	r2, [sp, #32]
 8008734:	9004      	str	r0, [sp, #16]
 8008736:	6952      	ldr	r2, [r2, #20]
 8008738:	688f      	ldr	r7, [r1, #8]
 800873a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800873e:	00a2      	lsls	r2, r4, #2
 8008740:	9209      	str	r2, [sp, #36]	; 0x24
 8008742:	1886      	adds	r6, r0, r2
 8008744:	9a07      	ldr	r2, [sp, #28]
 8008746:	2a00      	cmp	r2, #0
 8008748:	f000 81c3 	beq.w	8008ad2 <forward_dense+0x436>
 800874c:	f1a8 0210 	sub.w	r2, r8, #16
 8008750:	0912      	lsrs	r2, r2, #4
 8008752:	3201      	adds	r2, #1
 8008754:	0192      	lsls	r2, r2, #6
 8008756:	920c      	str	r2, [sp, #48]	; 0x30
 8008758:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800875c:	920a      	str	r2, [sp, #40]	; 0x28
 800875e:	689d      	ldr	r5, [r3, #8]
 8008760:	9b06      	ldr	r3, [sp, #24]
 8008762:	eddf aad0 	vldr	s21, [pc, #832]	; 8008aa4 <forward_dense+0x408>
 8008766:	2200      	movs	r2, #0
 8008768:	9205      	str	r2, [sp, #20]
 800876a:	f008 020f 	and.w	r2, r8, #15
 800876e:	920d      	str	r2, [sp, #52]	; 0x34
 8008770:	2b00      	cmp	r3, #0
 8008772:	d043      	beq.n	80087fc <forward_dense+0x160>
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	689c      	ldr	r4, [r3, #8]
 8008778:	9b04      	ldr	r3, [sp, #16]
 800877a:	f1ba 0f00 	cmp.w	sl, #0
 800877e:	d042      	beq.n	8008806 <forward_dense+0x16a>
 8008780:	42b3      	cmp	r3, r6
 8008782:	d22a      	bcs.n	80087da <forward_dense+0x13e>
 8008784:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008786:	469b      	mov	fp, r3
 8008788:	ab0f      	add	r3, sp, #60	; 0x3c
 800878a:	9303      	str	r3, [sp, #12]
 800878c:	2a04      	cmp	r2, #4
 800878e:	4633      	mov	r3, r6
 8008790:	4646      	mov	r6, r8
 8008792:	4698      	mov	r8, r3
 8008794:	f000 8156 	beq.w	8008a44 <forward_dense+0x3a8>
 8008798:	2c00      	cmp	r4, #0
 800879a:	f000 8185 	beq.w	8008aa8 <forward_dense+0x40c>
 800879e:	f8d4 c000 	ldr.w	ip, [r4]
 80087a2:	9803      	ldr	r0, [sp, #12]
 80087a4:	9600      	str	r6, [sp, #0]
 80087a6:	463b      	mov	r3, r7
 80087a8:	4629      	mov	r1, r5
 80087aa:	4652      	mov	r2, sl
 80087ac:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80087b0:	f7fe fdd6 	bl	8007360 <ai_dict8_dot_array_f32>
 80087b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087b6:	f84b 3b04 	str.w	r3, [fp], #4
 80087ba:	45c3      	cmp	fp, r8
 80087bc:	f104 0404 	add.w	r4, r4, #4
 80087c0:	444d      	add	r5, r9
 80087c2:	d3e9      	bcc.n	8008798 <forward_dense+0xfc>
 80087c4:	4643      	mov	r3, r8
 80087c6:	46b0      	mov	r8, r6
 80087c8:	461e      	mov	r6, r3
 80087ca:	9a04      	ldr	r2, [sp, #16]
 80087cc:	43d3      	mvns	r3, r2
 80087ce:	4433      	add	r3, r6
 80087d0:	f023 0303 	bic.w	r3, r3, #3
 80087d4:	3304      	adds	r3, #4
 80087d6:	18d3      	adds	r3, r2, r3
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087dc:	9b05      	ldr	r3, [sp, #20]
 80087de:	4417      	add	r7, r2
 80087e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087e2:	4416      	add	r6, r2
 80087e4:	9a07      	ldr	r2, [sp, #28]
 80087e6:	3301      	adds	r3, #1
 80087e8:	4293      	cmp	r3, r2
 80087ea:	9305      	str	r3, [sp, #20]
 80087ec:	f000 8171 	beq.w	8008ad2 <forward_dense+0x436>
 80087f0:	9b08      	ldr	r3, [sp, #32]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	689d      	ldr	r5, [r3, #8]
 80087f6:	9b06      	ldr	r3, [sp, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1bb      	bne.n	8008774 <forward_dense+0xd8>
 80087fc:	461c      	mov	r4, r3
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	f1ba 0f00 	cmp.w	sl, #0
 8008804:	d1bc      	bne.n	8008780 <forward_dense+0xe4>
 8008806:	42b3      	cmp	r3, r6
 8008808:	d2e7      	bcs.n	80087da <forward_dense+0x13e>
 800880a:	4618      	mov	r0, r3
 800880c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800880e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8008812:	eb07 0c03 	add.w	ip, r7, r3
 8008816:	469e      	mov	lr, r3
 8008818:	2c00      	cmp	r4, #0
 800881a:	f000 80ff 	beq.w	8008a1c <forward_dense+0x380>
 800881e:	f1b8 0f0f 	cmp.w	r8, #15
 8008822:	edd4 fa00 	vldr	s31, [r4]
 8008826:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8008aa4 <forward_dense+0x408>
 800882a:	f104 0404 	add.w	r4, r4, #4
 800882e:	f240 80fd 	bls.w	8008a2c <forward_dense+0x390>
 8008832:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008836:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800883a:	4641      	mov	r1, r8
 800883c:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8008840:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008844:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8008848:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800884c:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8008850:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8008854:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8008858:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800885c:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8008860:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8008864:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8008868:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800886c:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8008870:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8008874:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8008878:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800887c:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8008880:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8008884:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8008888:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800888c:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8008890:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8008894:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8008898:	ed13 4a04 	vldr	s8, [r3, #-16]
 800889c:	ed52 4a04 	vldr	s9, [r2, #-16]
 80088a0:	ed12 5a03 	vldr	s10, [r2, #-12]
 80088a4:	ed53 5a03 	vldr	s11, [r3, #-12]
 80088a8:	ed12 6a02 	vldr	s12, [r2, #-8]
 80088ac:	ed13 7a02 	vldr	s14, [r3, #-8]
 80088b0:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80088b4:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80088b8:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80088bc:	3910      	subs	r1, #16
 80088be:	290f      	cmp	r1, #15
 80088c0:	ed53 ea01 	vldr	s29, [r3, #-4]
 80088c4:	ed12 ea01 	vldr	s28, [r2, #-4]
 80088c8:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80088cc:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80088d0:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80088d4:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80088d8:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80088dc:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80088e0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80088e4:	eee8 7a88 	vfma.f32	s15, s17, s16
 80088e8:	eee0 7a20 	vfma.f32	s15, s0, s1
 80088ec:	eee1 7a21 	vfma.f32	s15, s2, s3
 80088f0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80088f4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80088f8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80088fc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008900:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008904:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8008908:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800890c:	d896      	bhi.n	800883c <forward_dense+0x1a0>
 800890e:	eb05 010e 	add.w	r1, r5, lr
 8008912:	465b      	mov	r3, fp
 8008914:	4662      	mov	r2, ip
 8008916:	2b00      	cmp	r3, #0
 8008918:	d075      	beq.n	8008a06 <forward_dense+0x36a>
 800891a:	ed91 7a00 	vldr	s14, [r1]
 800891e:	edd2 7a00 	vldr	s15, [r2]
 8008922:	2b01      	cmp	r3, #1
 8008924:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008928:	d06d      	beq.n	8008a06 <forward_dense+0x36a>
 800892a:	ed91 7a01 	vldr	s14, [r1, #4]
 800892e:	edd2 7a01 	vldr	s15, [r2, #4]
 8008932:	2b02      	cmp	r3, #2
 8008934:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008938:	d065      	beq.n	8008a06 <forward_dense+0x36a>
 800893a:	ed91 7a02 	vldr	s14, [r1, #8]
 800893e:	edd2 7a02 	vldr	s15, [r2, #8]
 8008942:	2b03      	cmp	r3, #3
 8008944:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008948:	d05d      	beq.n	8008a06 <forward_dense+0x36a>
 800894a:	ed91 7a03 	vldr	s14, [r1, #12]
 800894e:	edd2 7a03 	vldr	s15, [r2, #12]
 8008952:	2b04      	cmp	r3, #4
 8008954:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008958:	d055      	beq.n	8008a06 <forward_dense+0x36a>
 800895a:	ed91 7a04 	vldr	s14, [r1, #16]
 800895e:	edd2 7a04 	vldr	s15, [r2, #16]
 8008962:	2b05      	cmp	r3, #5
 8008964:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008968:	d04d      	beq.n	8008a06 <forward_dense+0x36a>
 800896a:	ed91 7a05 	vldr	s14, [r1, #20]
 800896e:	edd2 7a05 	vldr	s15, [r2, #20]
 8008972:	2b06      	cmp	r3, #6
 8008974:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008978:	d045      	beq.n	8008a06 <forward_dense+0x36a>
 800897a:	ed91 7a06 	vldr	s14, [r1, #24]
 800897e:	edd2 7a06 	vldr	s15, [r2, #24]
 8008982:	2b07      	cmp	r3, #7
 8008984:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008988:	d03d      	beq.n	8008a06 <forward_dense+0x36a>
 800898a:	ed91 7a07 	vldr	s14, [r1, #28]
 800898e:	edd2 7a07 	vldr	s15, [r2, #28]
 8008992:	2b08      	cmp	r3, #8
 8008994:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008998:	d035      	beq.n	8008a06 <forward_dense+0x36a>
 800899a:	ed91 7a08 	vldr	s14, [r1, #32]
 800899e:	edd2 7a08 	vldr	s15, [r2, #32]
 80089a2:	2b09      	cmp	r3, #9
 80089a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089a8:	d02d      	beq.n	8008a06 <forward_dense+0x36a>
 80089aa:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80089ae:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80089b2:	2b0a      	cmp	r3, #10
 80089b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089b8:	d025      	beq.n	8008a06 <forward_dense+0x36a>
 80089ba:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80089be:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80089c2:	2b0b      	cmp	r3, #11
 80089c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089c8:	d01d      	beq.n	8008a06 <forward_dense+0x36a>
 80089ca:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80089ce:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80089d2:	2b0c      	cmp	r3, #12
 80089d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089d8:	d015      	beq.n	8008a06 <forward_dense+0x36a>
 80089da:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80089de:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80089e2:	2b0d      	cmp	r3, #13
 80089e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089e8:	d00d      	beq.n	8008a06 <forward_dense+0x36a>
 80089ea:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80089ee:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80089f2:	2b0e      	cmp	r3, #14
 80089f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089f8:	d005      	beq.n	8008a06 <forward_dense+0x36a>
 80089fa:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80089fe:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008a02:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008a06:	444d      	add	r5, r9
 8008a08:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8008a0c:	ece0 6a01 	vstmia	r0!, {s13}
 8008a10:	42b0      	cmp	r0, r6
 8008a12:	f4bf aeda 	bcs.w	80087ca <forward_dense+0x12e>
 8008a16:	2c00      	cmp	r4, #0
 8008a18:	f47f af01 	bne.w	800881e <forward_dense+0x182>
 8008a1c:	f1b8 0f0f 	cmp.w	r8, #15
 8008a20:	eef0 fa6a 	vmov.f32	s31, s21
 8008a24:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008aa4 <forward_dense+0x408>
 8008a28:	f63f af03 	bhi.w	8008832 <forward_dense+0x196>
 8008a2c:	4643      	mov	r3, r8
 8008a2e:	4629      	mov	r1, r5
 8008a30:	463a      	mov	r2, r7
 8008a32:	e770      	b.n	8008916 <forward_dense+0x27a>
 8008a34:	2300      	movs	r3, #0
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	deff      	udf	#255	; 0xff
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	deff      	udf	#255	; 0xff
 8008a3e:	2300      	movs	r3, #0
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	deff      	udf	#255	; 0xff
 8008a44:	b1ac      	cbz	r4, 8008a72 <forward_dense+0x3d6>
 8008a46:	f8d4 c000 	ldr.w	ip, [r4]
 8008a4a:	9803      	ldr	r0, [sp, #12]
 8008a4c:	9600      	str	r6, [sp, #0]
 8008a4e:	463b      	mov	r3, r7
 8008a50:	4629      	mov	r1, r5
 8008a52:	4652      	mov	r2, sl
 8008a54:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8008a58:	f7fe fd50 	bl	80074fc <ai_dict4_dot_array_f32>
 8008a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a5e:	f84b 3b04 	str.w	r3, [fp], #4
 8008a62:	45c3      	cmp	fp, r8
 8008a64:	f104 0404 	add.w	r4, r4, #4
 8008a68:	444d      	add	r5, r9
 8008a6a:	f4bf aeab 	bcs.w	80087c4 <forward_dense+0x128>
 8008a6e:	2c00      	cmp	r4, #0
 8008a70:	d1e9      	bne.n	8008a46 <forward_dense+0x3aa>
 8008a72:	4634      	mov	r4, r6
 8008a74:	4646      	mov	r6, r8
 8008a76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a7a:	9400      	str	r4, [sp, #0]
 8008a7c:	463b      	mov	r3, r7
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4652      	mov	r2, sl
 8008a82:	4640      	mov	r0, r8
 8008a84:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008a88:	f7fe fd38 	bl	80074fc <ai_dict4_dot_array_f32>
 8008a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a8e:	f84b 3b04 	str.w	r3, [fp], #4
 8008a92:	45b3      	cmp	fp, r6
 8008a94:	444d      	add	r5, r9
 8008a96:	d3f0      	bcc.n	8008a7a <forward_dense+0x3de>
 8008a98:	46a0      	mov	r8, r4
 8008a9a:	e696      	b.n	80087ca <forward_dense+0x12e>
 8008a9c:	9406      	str	r4, [sp, #24]
 8008a9e:	e627      	b.n	80086f0 <forward_dense+0x54>
 8008aa0:	9306      	str	r3, [sp, #24]
 8008aa2:	e625      	b.n	80086f0 <forward_dense+0x54>
 8008aa4:	00000000 	.word	0x00000000
 8008aa8:	4634      	mov	r4, r6
 8008aaa:	4646      	mov	r6, r8
 8008aac:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008ab0:	9400      	str	r4, [sp, #0]
 8008ab2:	463b      	mov	r3, r7
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4652      	mov	r2, sl
 8008ab8:	4640      	mov	r0, r8
 8008aba:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008abe:	f7fe fc4f 	bl	8007360 <ai_dict8_dot_array_f32>
 8008ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac4:	f84b 3b04 	str.w	r3, [fp], #4
 8008ac8:	45b3      	cmp	fp, r6
 8008aca:	444d      	add	r5, r9
 8008acc:	d3f0      	bcc.n	8008ab0 <forward_dense+0x414>
 8008ace:	46a0      	mov	r8, r4
 8008ad0:	e67b      	b.n	80087ca <forward_dense+0x12e>
 8008ad2:	b011      	add	sp, #68	; 0x44
 8008ad4:	ecbd 8b10 	vpop	{d8-d15}
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8008ae0:	e624      	b.n	800872c <forward_dense+0x90>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9306      	str	r3, [sp, #24]
 8008ae6:	e603      	b.n	80086f0 <forward_dense+0x54>
 8008ae8:	9308      	str	r3, [sp, #32]
 8008aea:	e5f4      	b.n	80086d6 <forward_dense+0x3a>

08008aec <nl_func_relu_array_f32>:
 8008aec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008af0:	3a01      	subs	r2, #1
 8008af2:	688b      	ldr	r3, [r1, #8]
 8008af4:	6880      	ldr	r0, [r0, #8]
 8008af6:	0092      	lsls	r2, r2, #2
 8008af8:	189b      	adds	r3, r3, r2
 8008afa:	d21a      	bcs.n	8008b32 <nl_func_relu_array_f32+0x46>
 8008afc:	b410      	push	{r4}
 8008afe:	3204      	adds	r2, #4
 8008b00:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008b34 <nl_func_relu_array_f32+0x48>
 8008b04:	4410      	add	r0, r2
 8008b06:	3304      	adds	r3, #4
 8008b08:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008b0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b14:	bfb8      	it	lt
 8008b16:	eef0 7a47 	vmovlt.f32	s15, s14
 8008b1a:	ed60 7a01 	vstmdb	r0!, {s15}
 8008b1e:	688c      	ldr	r4, [r1, #8]
 8008b20:	f1a3 0208 	sub.w	r2, r3, #8
 8008b24:	4294      	cmp	r4, r2
 8008b26:	f1a3 0304 	sub.w	r3, r3, #4
 8008b2a:	d9ed      	bls.n	8008b08 <nl_func_relu_array_f32+0x1c>
 8008b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	4770      	bx	lr
 8008b34:	00000000 	.word	0x00000000

08008b38 <nl_func_relu_generic_array_f32>:
 8008b38:	b430      	push	{r4, r5}
 8008b3a:	edd3 6a02 	vldr	s13, [r3, #8]
 8008b3e:	6880      	ldr	r0, [r0, #8]
 8008b40:	688c      	ldr	r4, [r1, #8]
 8008b42:	ed93 7a00 	vldr	s14, [r3]
 8008b46:	ed93 6a01 	vldr	s12, [r3, #4]
 8008b4a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008b4e:	3a01      	subs	r2, #1
 8008b50:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008b54:	0092      	lsls	r2, r2, #2
 8008b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5a:	4410      	add	r0, r2
 8008b5c:	4422      	add	r2, r4
 8008b5e:	d421      	bmi.n	8008ba4 <nl_func_relu_generic_array_f32+0x6c>
 8008b60:	42a2      	cmp	r2, r4
 8008b62:	d33d      	bcc.n	8008be0 <nl_func_relu_generic_array_f32+0xa8>
 8008b64:	1d13      	adds	r3, r2, #4
 8008b66:	1d02      	adds	r2, r0, #4
 8008b68:	e010      	b.n	8008b8c <nl_func_relu_generic_array_f32+0x54>
 8008b6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008b76:	dd01      	ble.n	8008b7c <nl_func_relu_generic_array_f32+0x44>
 8008b78:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008b7c:	ed62 7a01 	vstmdb	r2!, {s15}
 8008b80:	6888      	ldr	r0, [r1, #8]
 8008b82:	f1a3 0408 	sub.w	r4, r3, #8
 8008b86:	4284      	cmp	r4, r0
 8008b88:	462b      	mov	r3, r5
 8008b8a:	d329      	bcc.n	8008be0 <nl_func_relu_generic_array_f32+0xa8>
 8008b8c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008b90:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b98:	f1a3 0504 	sub.w	r5, r3, #4
 8008b9c:	dce5      	bgt.n	8008b6a <nl_func_relu_generic_array_f32+0x32>
 8008b9e:	eef0 7a66 	vmov.f32	s15, s13
 8008ba2:	e7eb      	b.n	8008b7c <nl_func_relu_generic_array_f32+0x44>
 8008ba4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bac:	d01a      	beq.n	8008be4 <nl_func_relu_generic_array_f32+0xac>
 8008bae:	42a2      	cmp	r2, r4
 8008bb0:	d316      	bcc.n	8008be0 <nl_func_relu_generic_array_f32+0xa8>
 8008bb2:	1d13      	adds	r3, r2, #4
 8008bb4:	1d02      	adds	r2, r0, #4
 8008bb6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008bba:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bc2:	f1a3 0408 	sub.w	r4, r3, #8
 8008bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bca:	f1a3 0004 	sub.w	r0, r3, #4
 8008bce:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	d51e      	bpl.n	8008c14 <nl_func_relu_generic_array_f32+0xdc>
 8008bd6:	ed62 6a01 	vstmdb	r2!, {s13}
 8008bda:	688b      	ldr	r3, [r1, #8]
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	d91e      	bls.n	8008c1e <nl_func_relu_generic_array_f32+0xe6>
 8008be0:	bc30      	pop	{r4, r5}
 8008be2:	4770      	bx	lr
 8008be4:	42a2      	cmp	r2, r4
 8008be6:	d3fb      	bcc.n	8008be0 <nl_func_relu_generic_array_f32+0xa8>
 8008be8:	1d13      	adds	r3, r2, #4
 8008bea:	2500      	movs	r5, #0
 8008bec:	1d02      	adds	r2, r0, #4
 8008bee:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bf6:	f1a3 0408 	sub.w	r4, r3, #8
 8008bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfe:	f1a3 0004 	sub.w	r0, r3, #4
 8008c02:	4623      	mov	r3, r4
 8008c04:	d80d      	bhi.n	8008c22 <nl_func_relu_generic_array_f32+0xea>
 8008c06:	ed62 7a01 	vstmdb	r2!, {s15}
 8008c0a:	688b      	ldr	r3, [r1, #8]
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	d8e7      	bhi.n	8008be0 <nl_func_relu_generic_array_f32+0xa8>
 8008c10:	4603      	mov	r3, r0
 8008c12:	e7ec      	b.n	8008bee <nl_func_relu_generic_array_f32+0xb6>
 8008c14:	ed62 7a01 	vstmdb	r2!, {s15}
 8008c18:	688c      	ldr	r4, [r1, #8]
 8008c1a:	429c      	cmp	r4, r3
 8008c1c:	d8e0      	bhi.n	8008be0 <nl_func_relu_generic_array_f32+0xa8>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	e7c9      	b.n	8008bb6 <nl_func_relu_generic_array_f32+0x7e>
 8008c22:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008c26:	688c      	ldr	r4, [r1, #8]
 8008c28:	429c      	cmp	r4, r3
 8008c2a:	d8d9      	bhi.n	8008be0 <nl_func_relu_generic_array_f32+0xa8>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	e7de      	b.n	8008bee <nl_func_relu_generic_array_f32+0xb6>

08008c30 <forward_relu>:
 8008c30:	6942      	ldr	r2, [r0, #20]
 8008c32:	8813      	ldrh	r3, [r2, #0]
 8008c34:	b33b      	cbz	r3, 8008c86 <forward_relu+0x56>
 8008c36:	b470      	push	{r4, r5, r6}
 8008c38:	6852      	ldr	r2, [r2, #4]
 8008c3a:	6856      	ldr	r6, [r2, #4]
 8008c3c:	b106      	cbz	r6, 8008c40 <forward_relu+0x10>
 8008c3e:	6836      	ldr	r6, [r6, #0]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d91d      	bls.n	8008c80 <forward_relu+0x50>
 8008c44:	6913      	ldr	r3, [r2, #16]
 8008c46:	b103      	cbz	r3, 8008c4a <forward_relu+0x1a>
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6982      	ldr	r2, [r0, #24]
 8008c4c:	68b4      	ldr	r4, [r6, #8]
 8008c4e:	6998      	ldr	r0, [r3, #24]
 8008c50:	69b1      	ldr	r1, [r6, #24]
 8008c52:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008c56:	2a00      	cmp	r2, #0
 8008c58:	d041      	beq.n	8008cde <forward_relu+0xae>
 8008c5a:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8008c5e:	2d01      	cmp	r5, #1
 8008c60:	d013      	beq.n	8008c8a <forward_relu+0x5a>
 8008c62:	2c00      	cmp	r4, #0
 8008c64:	d06f      	beq.n	8008d46 <forward_relu+0x116>
 8008c66:	68f6      	ldr	r6, [r6, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008c6e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c72:	42a6      	cmp	r6, r4
 8008c74:	fb05 f202 	mul.w	r2, r5, r2
 8008c78:	d1f9      	bne.n	8008c6e <forward_relu+0x3e>
 8008c7a:	bc70      	pop	{r4, r5, r6}
 8008c7c:	f7ff bf5c 	b.w	8008b38 <nl_func_relu_generic_array_f32>
 8008c80:	2300      	movs	r3, #0
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	deff      	udf	#255	; 0xff
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	deff      	udf	#255	; 0xff
 8008c8a:	6880      	ldr	r0, [r0, #8]
 8008c8c:	688a      	ldr	r2, [r1, #8]
 8008c8e:	ed93 7a00 	vldr	s14, [r3]
 8008c92:	b184      	cbz	r4, 8008cb6 <forward_relu+0x86>
 8008c94:	68f6      	ldr	r6, [r6, #12]
 8008c96:	462b      	mov	r3, r5
 8008c98:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008c9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ca0:	42a6      	cmp	r6, r4
 8008ca2:	fb05 f303 	mul.w	r3, r5, r3
 8008ca6:	d1f9      	bne.n	8008c9c <forward_relu+0x6c>
 8008ca8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cac:	3b01      	subs	r3, #1
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	18d2      	adds	r2, r2, r3
 8008cb2:	4418      	add	r0, r3
 8008cb4:	d23d      	bcs.n	8008d32 <forward_relu+0x102>
 8008cb6:	1d13      	adds	r3, r2, #4
 8008cb8:	2500      	movs	r5, #0
 8008cba:	1d02      	adds	r2, r0, #4
 8008cbc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008cc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc8:	f1a3 0004 	sub.w	r0, r3, #4
 8008ccc:	d833      	bhi.n	8008d36 <forward_relu+0x106>
 8008cce:	ed62 7a01 	vstmdb	r2!, {s15}
 8008cd2:	688c      	ldr	r4, [r1, #8]
 8008cd4:	3b08      	subs	r3, #8
 8008cd6:	429c      	cmp	r4, r3
 8008cd8:	d82b      	bhi.n	8008d32 <forward_relu+0x102>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	e7ee      	b.n	8008cbc <forward_relu+0x8c>
 8008cde:	6880      	ldr	r0, [r0, #8]
 8008ce0:	688b      	ldr	r3, [r1, #8]
 8008ce2:	b184      	cbz	r4, 8008d06 <forward_relu+0xd6>
 8008ce4:	68f6      	ldr	r6, [r6, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008cec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008cf0:	42a6      	cmp	r6, r4
 8008cf2:	fb05 f202 	mul.w	r2, r5, r2
 8008cf6:	d1f9      	bne.n	8008cec <forward_relu+0xbc>
 8008cf8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008cfc:	3a01      	subs	r2, #1
 8008cfe:	0092      	lsls	r2, r2, #2
 8008d00:	189b      	adds	r3, r3, r2
 8008d02:	4410      	add	r0, r2
 8008d04:	d215      	bcs.n	8008d32 <forward_relu+0x102>
 8008d06:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8008d4c <forward_relu+0x11c>
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	3004      	adds	r0, #4
 8008d0e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008d12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1a:	bfb8      	it	lt
 8008d1c:	eef0 7a47 	vmovlt.f32	s15, s14
 8008d20:	ed60 7a01 	vstmdb	r0!, {s15}
 8008d24:	688c      	ldr	r4, [r1, #8]
 8008d26:	f1a3 0208 	sub.w	r2, r3, #8
 8008d2a:	4294      	cmp	r4, r2
 8008d2c:	f1a3 0304 	sub.w	r3, r3, #4
 8008d30:	d9ed      	bls.n	8008d0e <forward_relu+0xde>
 8008d32:	bc70      	pop	{r4, r5, r6}
 8008d34:	4770      	bx	lr
 8008d36:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008d3a:	688c      	ldr	r4, [r1, #8]
 8008d3c:	3b08      	subs	r3, #8
 8008d3e:	429c      	cmp	r4, r3
 8008d40:	d8f7      	bhi.n	8008d32 <forward_relu+0x102>
 8008d42:	4603      	mov	r3, r0
 8008d44:	e7ba      	b.n	8008cbc <forward_relu+0x8c>
 8008d46:	2201      	movs	r2, #1
 8008d48:	e797      	b.n	8008c7a <forward_relu+0x4a>
 8008d4a:	bf00      	nop
 8008d4c:	00000000 	.word	0x00000000

08008d50 <forward_sm>:
 8008d50:	6942      	ldr	r2, [r0, #20]
 8008d52:	8813      	ldrh	r3, [r2, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 808a 	beq.w	8008e6e <forward_sm+0x11e>
 8008d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5e:	ed2d 8b04 	vpush	{d8-d9}
 8008d62:	6852      	ldr	r2, [r2, #4]
 8008d64:	6855      	ldr	r5, [r2, #4]
 8008d66:	b085      	sub	sp, #20
 8008d68:	b105      	cbz	r5, 8008d6c <forward_sm+0x1c>
 8008d6a:	682d      	ldr	r5, [r5, #0]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d976      	bls.n	8008e5e <forward_sm+0x10e>
 8008d70:	6913      	ldr	r3, [r2, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d071      	beq.n	8008e5a <forward_sm+0x10a>
 8008d76:	681f      	ldr	r7, [r3, #0]
 8008d78:	68ec      	ldr	r4, [r5, #12]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	68ab      	ldr	r3, [r5, #8]
 8008d7e:	6850      	ldr	r0, [r2, #4]
 8008d80:	6862      	ldr	r2, [r4, #4]
 8008d82:	9201      	str	r2, [sp, #4]
 8008d84:	0a1b      	lsrs	r3, r3, #8
 8008d86:	d074      	beq.n	8008e72 <forward_sm+0x122>
 8008d88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d92:	429c      	cmp	r4, r3
 8008d94:	fb01 f202 	mul.w	r2, r1, r2
 8008d98:	d1f9      	bne.n	8008d8e <forward_sm+0x3e>
 8008d9a:	69ae      	ldr	r6, [r5, #24]
 8008d9c:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8008da0:	9f01      	ldr	r7, [sp, #4]
 8008da2:	68b5      	ldr	r5, [r6, #8]
 8008da4:	68f3      	ldr	r3, [r6, #12]
 8008da6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8008daa:	1bd1      	subs	r1, r2, r7
 8008dac:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8008db0:	1a12      	subs	r2, r2, r0
 8008db2:	429d      	cmp	r5, r3
 8008db4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8008db8:	d345      	bcc.n	8008e46 <forward_sm+0xf6>
 8008dba:	00bb      	lsls	r3, r7, #2
 8008dbc:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	f1c8 0200 	rsb	r2, r8, #0
 8008dc6:	425b      	negs	r3, r3
 8008dc8:	9203      	str	r2, [sp, #12]
 8008dca:	9302      	str	r3, [sp, #8]
 8008dcc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008dd0:	60b5      	str	r5, [r6, #8]
 8008dd2:	9b01      	ldr	r3, [sp, #4]
 8008dd4:	f8c9 4008 	str.w	r4, [r9, #8]
 8008dd8:	68b2      	ldr	r2, [r6, #8]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	ed92 8a00 	vldr	s16, [r2]
 8008de0:	d940      	bls.n	8008e64 <forward_sm+0x114>
 8008de2:	9900      	ldr	r1, [sp, #0]
 8008de4:	1d13      	adds	r3, r2, #4
 8008de6:	1857      	adds	r7, r2, r1
 8008de8:	ecf3 7a01 	vldmia	r3!, {s15}
 8008dec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df4:	bfb8      	it	lt
 8008df6:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008dfa:	429f      	cmp	r7, r3
 8008dfc:	d1f4      	bne.n	8008de8 <forward_sm+0x98>
 8008dfe:	eddf 8a1e 	vldr	s17, [pc, #120]	; 8008e78 <forward_sm+0x128>
 8008e02:	4692      	mov	sl, r2
 8008e04:	46a3      	mov	fp, r4
 8008e06:	46a0      	mov	r8, r4
 8008e08:	ecba 0a01 	vldmia	sl!, {s0}
 8008e0c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008e10:	f002 fcc6 	bl	800b7a0 <expf>
 8008e14:	4557      	cmp	r7, sl
 8008e16:	eca8 0a01 	vstmia	r8!, {s0}
 8008e1a:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008e1e:	d1f3      	bne.n	8008e08 <forward_sm+0xb8>
 8008e20:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8008e24:	9b00      	ldr	r3, [sp, #0]
 8008e26:	18e2      	adds	r2, r4, r3
 8008e28:	eddb 7a00 	vldr	s15, [fp]
 8008e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e30:	eceb 7a01 	vstmia	fp!, {s15}
 8008e34:	455a      	cmp	r2, fp
 8008e36:	d1f7      	bne.n	8008e28 <forward_sm+0xd8>
 8008e38:	9a02      	ldr	r2, [sp, #8]
 8008e3a:	68f3      	ldr	r3, [r6, #12]
 8008e3c:	4415      	add	r5, r2
 8008e3e:	9a03      	ldr	r2, [sp, #12]
 8008e40:	429d      	cmp	r5, r3
 8008e42:	4414      	add	r4, r2
 8008e44:	d2c4      	bcs.n	8008dd0 <forward_sm+0x80>
 8008e46:	60b3      	str	r3, [r6, #8]
 8008e48:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008e4c:	f8c9 3008 	str.w	r3, [r9, #8]
 8008e50:	b005      	add	sp, #20
 8008e52:	ecbd 8b04 	vpop	{d8-d9}
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	deff      	udf	#255	; 0xff
 8008e5e:	2300      	movs	r3, #0
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	deff      	udf	#255	; 0xff
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0e7      	beq.n	8008e38 <forward_sm+0xe8>
 8008e68:	9b00      	ldr	r3, [sp, #0]
 8008e6a:	18d7      	adds	r7, r2, r3
 8008e6c:	e7c7      	b.n	8008dfe <forward_sm+0xae>
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	deff      	udf	#255	; 0xff
 8008e72:	2201      	movs	r2, #1
 8008e74:	e791      	b.n	8008d9a <forward_sm+0x4a>
 8008e76:	bf00      	nop
 8008e78:	00000000 	.word	0x00000000

08008e7c <ai_check_custom_types>:
 8008e7c:	4b13      	ldr	r3, [pc, #76]	; (8008ecc <ai_check_custom_types+0x50>)
 8008e7e:	b082      	sub	sp, #8
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	9301      	str	r3, [sp, #4]
 8008e84:	b118      	cbz	r0, 8008e8e <ai_check_custom_types+0x12>
 8008e86:	7803      	ldrb	r3, [r0, #0]
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d002      	beq.n	8008e92 <ai_check_custom_types+0x16>
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	b002      	add	sp, #8
 8008e90:	4770      	bx	lr
 8008e92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d004      	beq.n	8008ea4 <ai_check_custom_types+0x28>
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	f080 0001 	eor.w	r0, r0, #1
 8008ea0:	b002      	add	sp, #8
 8008ea2:	4770      	bx	lr
 8008ea4:	7842      	ldrb	r2, [r0, #1]
 8008ea6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	f100 0001 	add.w	r0, r0, #1
 8008eb0:	d1f3      	bne.n	8008e9a <ai_check_custom_types+0x1e>
 8008eb2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008eb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d1ed      	bne.n	8008e9a <ai_check_custom_types+0x1e>
 8008ebe:	7842      	ldrb	r2, [r0, #1]
 8008ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d1e8      	bne.n	8008e9a <ai_check_custom_types+0x1e>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e7e7      	b.n	8008e9c <ai_check_custom_types+0x20>
 8008ecc:	0800bb98 	.word	0x0800bb98

08008ed0 <ai_layers_forward_all>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8008ed4:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	b31e      	cbz	r6, 8008f22 <ai_layers_forward_all+0x52>
 8008eda:	b1cd      	cbz	r5, 8008f10 <ai_layers_forward_all+0x40>
 8008edc:	6545      	str	r5, [r0, #84]	; 0x54
 8008ede:	4629      	mov	r1, r5
 8008ee0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	47b0      	blx	r6
 8008ee6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008ee8:	2700      	movs	r7, #0
 8008eea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008eec:	2002      	movs	r0, #2
 8008eee:	47b0      	blx	r6
 8008ef0:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8008ef2:	692b      	ldr	r3, [r5, #16]
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	4798      	blx	r3
 8008ef8:	68eb      	ldr	r3, [r5, #12]
 8008efa:	429d      	cmp	r5, r3
 8008efc:	f04f 0003 	mov.w	r0, #3
 8008f00:	4619      	mov	r1, r3
 8008f02:	d006      	beq.n	8008f12 <ai_layers_forward_all+0x42>
 8008f04:	6563      	str	r3, [r4, #84]	; 0x54
 8008f06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008f08:	47b0      	blx	r6
 8008f0a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d1ec      	bne.n	8008eea <ai_layers_forward_all+0x1a>
 8008f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f12:	2100      	movs	r1, #0
 8008f14:	6567      	str	r7, [r4, #84]	; 0x54
 8008f16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008f18:	47b0      	blx	r6
 8008f1a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d1e4      	bne.n	8008eea <ai_layers_forward_all+0x1a>
 8008f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f22:	2d00      	cmp	r5, #0
 8008f24:	d0f4      	beq.n	8008f10 <ai_layers_forward_all+0x40>
 8008f26:	6545      	str	r5, [r0, #84]	; 0x54
 8008f28:	692b      	ldr	r3, [r5, #16]
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	4798      	blx	r3
 8008f2e:	68eb      	ldr	r3, [r5, #12]
 8008f30:	42ab      	cmp	r3, r5
 8008f32:	d004      	beq.n	8008f3e <ai_layers_forward_all+0x6e>
 8008f34:	6563      	str	r3, [r4, #84]	; 0x54
 8008f36:	461d      	mov	r5, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f5      	bne.n	8008f28 <ai_layers_forward_all+0x58>
 8008f3c:	e7e8      	b.n	8008f10 <ai_layers_forward_all+0x40>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	6563      	str	r3, [r4, #84]	; 0x54
 8008f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f44 <ai_array_to_buffer_fmt>:
 8008f44:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d01f      	beq.n	8008f8c <ai_array_to_buffer_fmt+0x48>
 8008f4c:	4a1c      	ldr	r2, [pc, #112]	; (8008fc0 <ai_array_to_buffer_fmt+0x7c>)
 8008f4e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00a      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008f56:	dc0d      	bgt.n	8008f74 <ai_array_to_buffer_fmt+0x30>
 8008f58:	4a1a      	ldr	r2, [pc, #104]	; (8008fc4 <ai_array_to_buffer_fmt+0x80>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d006      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008f5e:	dd1d      	ble.n	8008f9c <ai_array_to_buffer_fmt+0x58>
 8008f60:	4a19      	ldr	r2, [pc, #100]	; (8008fc8 <ai_array_to_buffer_fmt+0x84>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d002      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008f66:	320f      	adds	r2, #15
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d10d      	bne.n	8008f88 <ai_array_to_buffer_fmt+0x44>
 8008f6c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008f70:	4318      	orrs	r0, r3
 8008f72:	4770      	bx	lr
 8008f74:	4a15      	ldr	r2, [pc, #84]	; (8008fcc <ai_array_to_buffer_fmt+0x88>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d0f8      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008f7a:	dd18      	ble.n	8008fae <ai_array_to_buffer_fmt+0x6a>
 8008f7c:	4a14      	ldr	r2, [pc, #80]	; (8008fd0 <ai_array_to_buffer_fmt+0x8c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d0f4      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008f82:	4a14      	ldr	r2, [pc, #80]	; (8008fd4 <ai_array_to_buffer_fmt+0x90>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d0f1      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008f88:	2340      	movs	r3, #64	; 0x40
 8008f8a:	e7ef      	b.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008f8c:	4b12      	ldr	r3, [pc, #72]	; (8008fd8 <ai_array_to_buffer_fmt+0x94>)
 8008f8e:	4003      	ands	r3, r0
 8008f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f94:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008f98:	4318      	orrs	r0, r3
 8008f9a:	4770      	bx	lr
 8008f9c:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d0e3      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d0df      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008fac:	e7ec      	b.n	8008f88 <ai_array_to_buffer_fmt+0x44>
 8008fae:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d0da      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008fb6:	3207      	adds	r2, #7
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d0d7      	beq.n	8008f6c <ai_array_to_buffer_fmt+0x28>
 8008fbc:	e7e4      	b.n	8008f88 <ai_array_to_buffer_fmt+0x44>
 8008fbe:	bf00      	nop
 8008fc0:	00840040 	.word	0x00840040
 8008fc4:	00040447 	.word	0x00040447
 8008fc8:	00040840 	.word	0x00040840
 8008fcc:	00840840 	.word	0x00840840
 8008fd0:	0084084f 	.word	0x0084084f
 8008fd4:	01821040 	.word	0x01821040
 8008fd8:	00803fff 	.word	0x00803fff

08008fdc <ai_array_get_byte_size>:
 8008fdc:	b1c1      	cbz	r1, 8009010 <ai_array_get_byte_size+0x34>
 8008fde:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8008fe2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008fe6:	4413      	add	r3, r2
 8008fe8:	fb01 f103 	mul.w	r1, r1, r3
 8008fec:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8008ff0:	3107      	adds	r1, #7
 8008ff2:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8008ff6:	f021 0107 	bic.w	r1, r1, #7
 8008ffa:	2804      	cmp	r0, #4
 8008ffc:	fa21 f102 	lsr.w	r1, r1, r2
 8009000:	d008      	beq.n	8009014 <ai_array_get_byte_size+0x38>
 8009002:	2808      	cmp	r0, #8
 8009004:	d101      	bne.n	800900a <ai_array_get_byte_size+0x2e>
 8009006:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800900a:	3107      	adds	r1, #7
 800900c:	08c8      	lsrs	r0, r1, #3
 800900e:	4770      	bx	lr
 8009010:	4608      	mov	r0, r1
 8009012:	4770      	bx	lr
 8009014:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009018:	3107      	adds	r1, #7
 800901a:	08c8      	lsrs	r0, r1, #3
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop

08009020 <__errno>:
 8009020:	4b01      	ldr	r3, [pc, #4]	; (8009028 <__errno+0x8>)
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	200007b8 	.word	0x200007b8

0800902c <__libc_init_array>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4e0d      	ldr	r6, [pc, #52]	; (8009064 <__libc_init_array+0x38>)
 8009030:	4c0d      	ldr	r4, [pc, #52]	; (8009068 <__libc_init_array+0x3c>)
 8009032:	1ba4      	subs	r4, r4, r6
 8009034:	10a4      	asrs	r4, r4, #2
 8009036:	2500      	movs	r5, #0
 8009038:	42a5      	cmp	r5, r4
 800903a:	d109      	bne.n	8009050 <__libc_init_array+0x24>
 800903c:	4e0b      	ldr	r6, [pc, #44]	; (800906c <__libc_init_array+0x40>)
 800903e:	4c0c      	ldr	r4, [pc, #48]	; (8009070 <__libc_init_array+0x44>)
 8009040:	f002 fd08 	bl	800ba54 <_init>
 8009044:	1ba4      	subs	r4, r4, r6
 8009046:	10a4      	asrs	r4, r4, #2
 8009048:	2500      	movs	r5, #0
 800904a:	42a5      	cmp	r5, r4
 800904c:	d105      	bne.n	800905a <__libc_init_array+0x2e>
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009054:	4798      	blx	r3
 8009056:	3501      	adds	r5, #1
 8009058:	e7ee      	b.n	8009038 <__libc_init_array+0xc>
 800905a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800905e:	4798      	blx	r3
 8009060:	3501      	adds	r5, #1
 8009062:	e7f2      	b.n	800904a <__libc_init_array+0x1e>
 8009064:	08017bc0 	.word	0x08017bc0
 8009068:	08017bc0 	.word	0x08017bc0
 800906c:	08017bc0 	.word	0x08017bc0
 8009070:	08017bc4 	.word	0x08017bc4

08009074 <malloc>:
 8009074:	4b02      	ldr	r3, [pc, #8]	; (8009080 <malloc+0xc>)
 8009076:	4601      	mov	r1, r0
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	f000 b865 	b.w	8009148 <_malloc_r>
 800907e:	bf00      	nop
 8009080:	200007b8 	.word	0x200007b8

08009084 <memcpy>:
 8009084:	b510      	push	{r4, lr}
 8009086:	1e43      	subs	r3, r0, #1
 8009088:	440a      	add	r2, r1
 800908a:	4291      	cmp	r1, r2
 800908c:	d100      	bne.n	8009090 <memcpy+0xc>
 800908e:	bd10      	pop	{r4, pc}
 8009090:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009094:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009098:	e7f7      	b.n	800908a <memcpy+0x6>

0800909a <memset>:
 800909a:	4402      	add	r2, r0
 800909c:	4603      	mov	r3, r0
 800909e:	4293      	cmp	r3, r2
 80090a0:	d100      	bne.n	80090a4 <memset+0xa>
 80090a2:	4770      	bx	lr
 80090a4:	f803 1b01 	strb.w	r1, [r3], #1
 80090a8:	e7f9      	b.n	800909e <memset+0x4>
	...

080090ac <_free_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4605      	mov	r5, r0
 80090b0:	2900      	cmp	r1, #0
 80090b2:	d045      	beq.n	8009140 <_free_r+0x94>
 80090b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b8:	1f0c      	subs	r4, r1, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bfb8      	it	lt
 80090be:	18e4      	addlt	r4, r4, r3
 80090c0:	f001 fe76 	bl	800adb0 <__malloc_lock>
 80090c4:	4a1f      	ldr	r2, [pc, #124]	; (8009144 <_free_r+0x98>)
 80090c6:	6813      	ldr	r3, [r2, #0]
 80090c8:	4610      	mov	r0, r2
 80090ca:	b933      	cbnz	r3, 80090da <_free_r+0x2e>
 80090cc:	6063      	str	r3, [r4, #4]
 80090ce:	6014      	str	r4, [r2, #0]
 80090d0:	4628      	mov	r0, r5
 80090d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d6:	f001 be6c 	b.w	800adb2 <__malloc_unlock>
 80090da:	42a3      	cmp	r3, r4
 80090dc:	d90c      	bls.n	80090f8 <_free_r+0x4c>
 80090de:	6821      	ldr	r1, [r4, #0]
 80090e0:	1862      	adds	r2, r4, r1
 80090e2:	4293      	cmp	r3, r2
 80090e4:	bf04      	itt	eq
 80090e6:	681a      	ldreq	r2, [r3, #0]
 80090e8:	685b      	ldreq	r3, [r3, #4]
 80090ea:	6063      	str	r3, [r4, #4]
 80090ec:	bf04      	itt	eq
 80090ee:	1852      	addeq	r2, r2, r1
 80090f0:	6022      	streq	r2, [r4, #0]
 80090f2:	6004      	str	r4, [r0, #0]
 80090f4:	e7ec      	b.n	80090d0 <_free_r+0x24>
 80090f6:	4613      	mov	r3, r2
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	b10a      	cbz	r2, 8009100 <_free_r+0x54>
 80090fc:	42a2      	cmp	r2, r4
 80090fe:	d9fa      	bls.n	80090f6 <_free_r+0x4a>
 8009100:	6819      	ldr	r1, [r3, #0]
 8009102:	1858      	adds	r0, r3, r1
 8009104:	42a0      	cmp	r0, r4
 8009106:	d10b      	bne.n	8009120 <_free_r+0x74>
 8009108:	6820      	ldr	r0, [r4, #0]
 800910a:	4401      	add	r1, r0
 800910c:	1858      	adds	r0, r3, r1
 800910e:	4282      	cmp	r2, r0
 8009110:	6019      	str	r1, [r3, #0]
 8009112:	d1dd      	bne.n	80090d0 <_free_r+0x24>
 8009114:	6810      	ldr	r0, [r2, #0]
 8009116:	6852      	ldr	r2, [r2, #4]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	4401      	add	r1, r0
 800911c:	6019      	str	r1, [r3, #0]
 800911e:	e7d7      	b.n	80090d0 <_free_r+0x24>
 8009120:	d902      	bls.n	8009128 <_free_r+0x7c>
 8009122:	230c      	movs	r3, #12
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	e7d3      	b.n	80090d0 <_free_r+0x24>
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	1821      	adds	r1, r4, r0
 800912c:	428a      	cmp	r2, r1
 800912e:	bf04      	itt	eq
 8009130:	6811      	ldreq	r1, [r2, #0]
 8009132:	6852      	ldreq	r2, [r2, #4]
 8009134:	6062      	str	r2, [r4, #4]
 8009136:	bf04      	itt	eq
 8009138:	1809      	addeq	r1, r1, r0
 800913a:	6021      	streq	r1, [r4, #0]
 800913c:	605c      	str	r4, [r3, #4]
 800913e:	e7c7      	b.n	80090d0 <_free_r+0x24>
 8009140:	bd38      	pop	{r3, r4, r5, pc}
 8009142:	bf00      	nop
 8009144:	20000a50 	.word	0x20000a50

08009148 <_malloc_r>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	1ccd      	adds	r5, r1, #3
 800914c:	f025 0503 	bic.w	r5, r5, #3
 8009150:	3508      	adds	r5, #8
 8009152:	2d0c      	cmp	r5, #12
 8009154:	bf38      	it	cc
 8009156:	250c      	movcc	r5, #12
 8009158:	2d00      	cmp	r5, #0
 800915a:	4606      	mov	r6, r0
 800915c:	db01      	blt.n	8009162 <_malloc_r+0x1a>
 800915e:	42a9      	cmp	r1, r5
 8009160:	d903      	bls.n	800916a <_malloc_r+0x22>
 8009162:	230c      	movs	r3, #12
 8009164:	6033      	str	r3, [r6, #0]
 8009166:	2000      	movs	r0, #0
 8009168:	bd70      	pop	{r4, r5, r6, pc}
 800916a:	f001 fe21 	bl	800adb0 <__malloc_lock>
 800916e:	4a21      	ldr	r2, [pc, #132]	; (80091f4 <_malloc_r+0xac>)
 8009170:	6814      	ldr	r4, [r2, #0]
 8009172:	4621      	mov	r1, r4
 8009174:	b991      	cbnz	r1, 800919c <_malloc_r+0x54>
 8009176:	4c20      	ldr	r4, [pc, #128]	; (80091f8 <_malloc_r+0xb0>)
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	b91b      	cbnz	r3, 8009184 <_malloc_r+0x3c>
 800917c:	4630      	mov	r0, r6
 800917e:	f000 fd15 	bl	8009bac <_sbrk_r>
 8009182:	6020      	str	r0, [r4, #0]
 8009184:	4629      	mov	r1, r5
 8009186:	4630      	mov	r0, r6
 8009188:	f000 fd10 	bl	8009bac <_sbrk_r>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d124      	bne.n	80091da <_malloc_r+0x92>
 8009190:	230c      	movs	r3, #12
 8009192:	6033      	str	r3, [r6, #0]
 8009194:	4630      	mov	r0, r6
 8009196:	f001 fe0c 	bl	800adb2 <__malloc_unlock>
 800919a:	e7e4      	b.n	8009166 <_malloc_r+0x1e>
 800919c:	680b      	ldr	r3, [r1, #0]
 800919e:	1b5b      	subs	r3, r3, r5
 80091a0:	d418      	bmi.n	80091d4 <_malloc_r+0x8c>
 80091a2:	2b0b      	cmp	r3, #11
 80091a4:	d90f      	bls.n	80091c6 <_malloc_r+0x7e>
 80091a6:	600b      	str	r3, [r1, #0]
 80091a8:	50cd      	str	r5, [r1, r3]
 80091aa:	18cc      	adds	r4, r1, r3
 80091ac:	4630      	mov	r0, r6
 80091ae:	f001 fe00 	bl	800adb2 <__malloc_unlock>
 80091b2:	f104 000b 	add.w	r0, r4, #11
 80091b6:	1d23      	adds	r3, r4, #4
 80091b8:	f020 0007 	bic.w	r0, r0, #7
 80091bc:	1ac3      	subs	r3, r0, r3
 80091be:	d0d3      	beq.n	8009168 <_malloc_r+0x20>
 80091c0:	425a      	negs	r2, r3
 80091c2:	50e2      	str	r2, [r4, r3]
 80091c4:	e7d0      	b.n	8009168 <_malloc_r+0x20>
 80091c6:	428c      	cmp	r4, r1
 80091c8:	684b      	ldr	r3, [r1, #4]
 80091ca:	bf16      	itet	ne
 80091cc:	6063      	strne	r3, [r4, #4]
 80091ce:	6013      	streq	r3, [r2, #0]
 80091d0:	460c      	movne	r4, r1
 80091d2:	e7eb      	b.n	80091ac <_malloc_r+0x64>
 80091d4:	460c      	mov	r4, r1
 80091d6:	6849      	ldr	r1, [r1, #4]
 80091d8:	e7cc      	b.n	8009174 <_malloc_r+0x2c>
 80091da:	1cc4      	adds	r4, r0, #3
 80091dc:	f024 0403 	bic.w	r4, r4, #3
 80091e0:	42a0      	cmp	r0, r4
 80091e2:	d005      	beq.n	80091f0 <_malloc_r+0xa8>
 80091e4:	1a21      	subs	r1, r4, r0
 80091e6:	4630      	mov	r0, r6
 80091e8:	f000 fce0 	bl	8009bac <_sbrk_r>
 80091ec:	3001      	adds	r0, #1
 80091ee:	d0cf      	beq.n	8009190 <_malloc_r+0x48>
 80091f0:	6025      	str	r5, [r4, #0]
 80091f2:	e7db      	b.n	80091ac <_malloc_r+0x64>
 80091f4:	20000a50 	.word	0x20000a50
 80091f8:	20000a54 	.word	0x20000a54

080091fc <__cvt>:
 80091fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	ec55 4b10 	vmov	r4, r5, d0
 8009204:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009206:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800920a:	2d00      	cmp	r5, #0
 800920c:	460e      	mov	r6, r1
 800920e:	4691      	mov	r9, r2
 8009210:	4619      	mov	r1, r3
 8009212:	bfb8      	it	lt
 8009214:	4622      	movlt	r2, r4
 8009216:	462b      	mov	r3, r5
 8009218:	f027 0720 	bic.w	r7, r7, #32
 800921c:	bfbb      	ittet	lt
 800921e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009222:	461d      	movlt	r5, r3
 8009224:	2300      	movge	r3, #0
 8009226:	232d      	movlt	r3, #45	; 0x2d
 8009228:	bfb8      	it	lt
 800922a:	4614      	movlt	r4, r2
 800922c:	2f46      	cmp	r7, #70	; 0x46
 800922e:	700b      	strb	r3, [r1, #0]
 8009230:	d004      	beq.n	800923c <__cvt+0x40>
 8009232:	2f45      	cmp	r7, #69	; 0x45
 8009234:	d100      	bne.n	8009238 <__cvt+0x3c>
 8009236:	3601      	adds	r6, #1
 8009238:	2102      	movs	r1, #2
 800923a:	e000      	b.n	800923e <__cvt+0x42>
 800923c:	2103      	movs	r1, #3
 800923e:	ab03      	add	r3, sp, #12
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	ab02      	add	r3, sp, #8
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	4632      	mov	r2, r6
 8009248:	4653      	mov	r3, sl
 800924a:	ec45 4b10 	vmov	d0, r4, r5
 800924e:	f000 fe0b 	bl	8009e68 <_dtoa_r>
 8009252:	2f47      	cmp	r7, #71	; 0x47
 8009254:	4680      	mov	r8, r0
 8009256:	d102      	bne.n	800925e <__cvt+0x62>
 8009258:	f019 0f01 	tst.w	r9, #1
 800925c:	d026      	beq.n	80092ac <__cvt+0xb0>
 800925e:	2f46      	cmp	r7, #70	; 0x46
 8009260:	eb08 0906 	add.w	r9, r8, r6
 8009264:	d111      	bne.n	800928a <__cvt+0x8e>
 8009266:	f898 3000 	ldrb.w	r3, [r8]
 800926a:	2b30      	cmp	r3, #48	; 0x30
 800926c:	d10a      	bne.n	8009284 <__cvt+0x88>
 800926e:	2200      	movs	r2, #0
 8009270:	2300      	movs	r3, #0
 8009272:	4620      	mov	r0, r4
 8009274:	4629      	mov	r1, r5
 8009276:	f7f7 fc3f 	bl	8000af8 <__aeabi_dcmpeq>
 800927a:	b918      	cbnz	r0, 8009284 <__cvt+0x88>
 800927c:	f1c6 0601 	rsb	r6, r6, #1
 8009280:	f8ca 6000 	str.w	r6, [sl]
 8009284:	f8da 3000 	ldr.w	r3, [sl]
 8009288:	4499      	add	r9, r3
 800928a:	2200      	movs	r2, #0
 800928c:	2300      	movs	r3, #0
 800928e:	4620      	mov	r0, r4
 8009290:	4629      	mov	r1, r5
 8009292:	f7f7 fc31 	bl	8000af8 <__aeabi_dcmpeq>
 8009296:	b938      	cbnz	r0, 80092a8 <__cvt+0xac>
 8009298:	2230      	movs	r2, #48	; 0x30
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	454b      	cmp	r3, r9
 800929e:	d205      	bcs.n	80092ac <__cvt+0xb0>
 80092a0:	1c59      	adds	r1, r3, #1
 80092a2:	9103      	str	r1, [sp, #12]
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e7f8      	b.n	800929a <__cvt+0x9e>
 80092a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092b0:	eba3 0308 	sub.w	r3, r3, r8
 80092b4:	4640      	mov	r0, r8
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	b004      	add	sp, #16
 80092ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080092be <__exponent>:
 80092be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092c0:	2900      	cmp	r1, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	bfba      	itte	lt
 80092c6:	4249      	neglt	r1, r1
 80092c8:	232d      	movlt	r3, #45	; 0x2d
 80092ca:	232b      	movge	r3, #43	; 0x2b
 80092cc:	2909      	cmp	r1, #9
 80092ce:	f804 2b02 	strb.w	r2, [r4], #2
 80092d2:	7043      	strb	r3, [r0, #1]
 80092d4:	dd20      	ble.n	8009318 <__exponent+0x5a>
 80092d6:	f10d 0307 	add.w	r3, sp, #7
 80092da:	461f      	mov	r7, r3
 80092dc:	260a      	movs	r6, #10
 80092de:	fb91 f5f6 	sdiv	r5, r1, r6
 80092e2:	fb06 1115 	mls	r1, r6, r5, r1
 80092e6:	3130      	adds	r1, #48	; 0x30
 80092e8:	2d09      	cmp	r5, #9
 80092ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092ee:	f103 32ff 	add.w	r2, r3, #4294967295
 80092f2:	4629      	mov	r1, r5
 80092f4:	dc09      	bgt.n	800930a <__exponent+0x4c>
 80092f6:	3130      	adds	r1, #48	; 0x30
 80092f8:	3b02      	subs	r3, #2
 80092fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80092fe:	42bb      	cmp	r3, r7
 8009300:	4622      	mov	r2, r4
 8009302:	d304      	bcc.n	800930e <__exponent+0x50>
 8009304:	1a10      	subs	r0, r2, r0
 8009306:	b003      	add	sp, #12
 8009308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930a:	4613      	mov	r3, r2
 800930c:	e7e7      	b.n	80092de <__exponent+0x20>
 800930e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009312:	f804 2b01 	strb.w	r2, [r4], #1
 8009316:	e7f2      	b.n	80092fe <__exponent+0x40>
 8009318:	2330      	movs	r3, #48	; 0x30
 800931a:	4419      	add	r1, r3
 800931c:	7083      	strb	r3, [r0, #2]
 800931e:	1d02      	adds	r2, r0, #4
 8009320:	70c1      	strb	r1, [r0, #3]
 8009322:	e7ef      	b.n	8009304 <__exponent+0x46>

08009324 <_printf_float>:
 8009324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	b08d      	sub	sp, #52	; 0x34
 800932a:	460c      	mov	r4, r1
 800932c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009330:	4616      	mov	r6, r2
 8009332:	461f      	mov	r7, r3
 8009334:	4605      	mov	r5, r0
 8009336:	f001 fcc9 	bl	800accc <_localeconv_r>
 800933a:	6803      	ldr	r3, [r0, #0]
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	4618      	mov	r0, r3
 8009340:	f7f6 ff5e 	bl	8000200 <strlen>
 8009344:	2300      	movs	r3, #0
 8009346:	930a      	str	r3, [sp, #40]	; 0x28
 8009348:	f8d8 3000 	ldr.w	r3, [r8]
 800934c:	9005      	str	r0, [sp, #20]
 800934e:	3307      	adds	r3, #7
 8009350:	f023 0307 	bic.w	r3, r3, #7
 8009354:	f103 0208 	add.w	r2, r3, #8
 8009358:	f894 a018 	ldrb.w	sl, [r4, #24]
 800935c:	f8d4 b000 	ldr.w	fp, [r4]
 8009360:	f8c8 2000 	str.w	r2, [r8]
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800936c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009370:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009374:	9307      	str	r3, [sp, #28]
 8009376:	f8cd 8018 	str.w	r8, [sp, #24]
 800937a:	f04f 32ff 	mov.w	r2, #4294967295
 800937e:	4ba7      	ldr	r3, [pc, #668]	; (800961c <_printf_float+0x2f8>)
 8009380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009384:	f7f7 fbea 	bl	8000b5c <__aeabi_dcmpun>
 8009388:	bb70      	cbnz	r0, 80093e8 <_printf_float+0xc4>
 800938a:	f04f 32ff 	mov.w	r2, #4294967295
 800938e:	4ba3      	ldr	r3, [pc, #652]	; (800961c <_printf_float+0x2f8>)
 8009390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009394:	f7f7 fbc4 	bl	8000b20 <__aeabi_dcmple>
 8009398:	bb30      	cbnz	r0, 80093e8 <_printf_float+0xc4>
 800939a:	2200      	movs	r2, #0
 800939c:	2300      	movs	r3, #0
 800939e:	4640      	mov	r0, r8
 80093a0:	4649      	mov	r1, r9
 80093a2:	f7f7 fbb3 	bl	8000b0c <__aeabi_dcmplt>
 80093a6:	b110      	cbz	r0, 80093ae <_printf_float+0x8a>
 80093a8:	232d      	movs	r3, #45	; 0x2d
 80093aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ae:	4a9c      	ldr	r2, [pc, #624]	; (8009620 <_printf_float+0x2fc>)
 80093b0:	4b9c      	ldr	r3, [pc, #624]	; (8009624 <_printf_float+0x300>)
 80093b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80093b6:	bf8c      	ite	hi
 80093b8:	4690      	movhi	r8, r2
 80093ba:	4698      	movls	r8, r3
 80093bc:	2303      	movs	r3, #3
 80093be:	f02b 0204 	bic.w	r2, fp, #4
 80093c2:	6123      	str	r3, [r4, #16]
 80093c4:	6022      	str	r2, [r4, #0]
 80093c6:	f04f 0900 	mov.w	r9, #0
 80093ca:	9700      	str	r7, [sp, #0]
 80093cc:	4633      	mov	r3, r6
 80093ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 f9e6 	bl	80097a4 <_printf_common>
 80093d8:	3001      	adds	r0, #1
 80093da:	f040 808d 	bne.w	80094f8 <_printf_float+0x1d4>
 80093de:	f04f 30ff 	mov.w	r0, #4294967295
 80093e2:	b00d      	add	sp, #52	; 0x34
 80093e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	4640      	mov	r0, r8
 80093ee:	4649      	mov	r1, r9
 80093f0:	f7f7 fbb4 	bl	8000b5c <__aeabi_dcmpun>
 80093f4:	b110      	cbz	r0, 80093fc <_printf_float+0xd8>
 80093f6:	4a8c      	ldr	r2, [pc, #560]	; (8009628 <_printf_float+0x304>)
 80093f8:	4b8c      	ldr	r3, [pc, #560]	; (800962c <_printf_float+0x308>)
 80093fa:	e7da      	b.n	80093b2 <_printf_float+0x8e>
 80093fc:	6861      	ldr	r1, [r4, #4]
 80093fe:	1c4b      	adds	r3, r1, #1
 8009400:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009404:	a80a      	add	r0, sp, #40	; 0x28
 8009406:	d13e      	bne.n	8009486 <_printf_float+0x162>
 8009408:	2306      	movs	r3, #6
 800940a:	6063      	str	r3, [r4, #4]
 800940c:	2300      	movs	r3, #0
 800940e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009412:	ab09      	add	r3, sp, #36	; 0x24
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	ec49 8b10 	vmov	d0, r8, r9
 800941a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800941e:	6022      	str	r2, [r4, #0]
 8009420:	f8cd a004 	str.w	sl, [sp, #4]
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	4628      	mov	r0, r5
 8009428:	f7ff fee8 	bl	80091fc <__cvt>
 800942c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009430:	2b47      	cmp	r3, #71	; 0x47
 8009432:	4680      	mov	r8, r0
 8009434:	d109      	bne.n	800944a <_printf_float+0x126>
 8009436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009438:	1cd8      	adds	r0, r3, #3
 800943a:	db02      	blt.n	8009442 <_printf_float+0x11e>
 800943c:	6862      	ldr	r2, [r4, #4]
 800943e:	4293      	cmp	r3, r2
 8009440:	dd47      	ble.n	80094d2 <_printf_float+0x1ae>
 8009442:	f1aa 0a02 	sub.w	sl, sl, #2
 8009446:	fa5f fa8a 	uxtb.w	sl, sl
 800944a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800944e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009450:	d824      	bhi.n	800949c <_printf_float+0x178>
 8009452:	3901      	subs	r1, #1
 8009454:	4652      	mov	r2, sl
 8009456:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800945a:	9109      	str	r1, [sp, #36]	; 0x24
 800945c:	f7ff ff2f 	bl	80092be <__exponent>
 8009460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009462:	1813      	adds	r3, r2, r0
 8009464:	2a01      	cmp	r2, #1
 8009466:	4681      	mov	r9, r0
 8009468:	6123      	str	r3, [r4, #16]
 800946a:	dc02      	bgt.n	8009472 <_printf_float+0x14e>
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	07d1      	lsls	r1, r2, #31
 8009470:	d501      	bpl.n	8009476 <_printf_float+0x152>
 8009472:	3301      	adds	r3, #1
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0a5      	beq.n	80093ca <_printf_float+0xa6>
 800947e:	232d      	movs	r3, #45	; 0x2d
 8009480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009484:	e7a1      	b.n	80093ca <_printf_float+0xa6>
 8009486:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800948a:	f000 8177 	beq.w	800977c <_printf_float+0x458>
 800948e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009492:	d1bb      	bne.n	800940c <_printf_float+0xe8>
 8009494:	2900      	cmp	r1, #0
 8009496:	d1b9      	bne.n	800940c <_printf_float+0xe8>
 8009498:	2301      	movs	r3, #1
 800949a:	e7b6      	b.n	800940a <_printf_float+0xe6>
 800949c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80094a0:	d119      	bne.n	80094d6 <_printf_float+0x1b2>
 80094a2:	2900      	cmp	r1, #0
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	dd0c      	ble.n	80094c2 <_printf_float+0x19e>
 80094a8:	6121      	str	r1, [r4, #16]
 80094aa:	b913      	cbnz	r3, 80094b2 <_printf_float+0x18e>
 80094ac:	6822      	ldr	r2, [r4, #0]
 80094ae:	07d2      	lsls	r2, r2, #31
 80094b0:	d502      	bpl.n	80094b8 <_printf_float+0x194>
 80094b2:	3301      	adds	r3, #1
 80094b4:	440b      	add	r3, r1
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80094bc:	f04f 0900 	mov.w	r9, #0
 80094c0:	e7d9      	b.n	8009476 <_printf_float+0x152>
 80094c2:	b913      	cbnz	r3, 80094ca <_printf_float+0x1a6>
 80094c4:	6822      	ldr	r2, [r4, #0]
 80094c6:	07d0      	lsls	r0, r2, #31
 80094c8:	d501      	bpl.n	80094ce <_printf_float+0x1aa>
 80094ca:	3302      	adds	r3, #2
 80094cc:	e7f3      	b.n	80094b6 <_printf_float+0x192>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e7f1      	b.n	80094b6 <_printf_float+0x192>
 80094d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80094d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094da:	4293      	cmp	r3, r2
 80094dc:	db05      	blt.n	80094ea <_printf_float+0x1c6>
 80094de:	6822      	ldr	r2, [r4, #0]
 80094e0:	6123      	str	r3, [r4, #16]
 80094e2:	07d1      	lsls	r1, r2, #31
 80094e4:	d5e8      	bpl.n	80094b8 <_printf_float+0x194>
 80094e6:	3301      	adds	r3, #1
 80094e8:	e7e5      	b.n	80094b6 <_printf_float+0x192>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	bfd4      	ite	le
 80094ee:	f1c3 0302 	rsble	r3, r3, #2
 80094f2:	2301      	movgt	r3, #1
 80094f4:	4413      	add	r3, r2
 80094f6:	e7de      	b.n	80094b6 <_printf_float+0x192>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	055a      	lsls	r2, r3, #21
 80094fc:	d407      	bmi.n	800950e <_printf_float+0x1ea>
 80094fe:	6923      	ldr	r3, [r4, #16]
 8009500:	4642      	mov	r2, r8
 8009502:	4631      	mov	r1, r6
 8009504:	4628      	mov	r0, r5
 8009506:	47b8      	blx	r7
 8009508:	3001      	adds	r0, #1
 800950a:	d12b      	bne.n	8009564 <_printf_float+0x240>
 800950c:	e767      	b.n	80093de <_printf_float+0xba>
 800950e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009512:	f240 80dc 	bls.w	80096ce <_printf_float+0x3aa>
 8009516:	2200      	movs	r2, #0
 8009518:	2300      	movs	r3, #0
 800951a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800951e:	f7f7 faeb 	bl	8000af8 <__aeabi_dcmpeq>
 8009522:	2800      	cmp	r0, #0
 8009524:	d033      	beq.n	800958e <_printf_float+0x26a>
 8009526:	2301      	movs	r3, #1
 8009528:	4a41      	ldr	r2, [pc, #260]	; (8009630 <_printf_float+0x30c>)
 800952a:	4631      	mov	r1, r6
 800952c:	4628      	mov	r0, r5
 800952e:	47b8      	blx	r7
 8009530:	3001      	adds	r0, #1
 8009532:	f43f af54 	beq.w	80093de <_printf_float+0xba>
 8009536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800953a:	429a      	cmp	r2, r3
 800953c:	db02      	blt.n	8009544 <_printf_float+0x220>
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	07d8      	lsls	r0, r3, #31
 8009542:	d50f      	bpl.n	8009564 <_printf_float+0x240>
 8009544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009548:	4631      	mov	r1, r6
 800954a:	4628      	mov	r0, r5
 800954c:	47b8      	blx	r7
 800954e:	3001      	adds	r0, #1
 8009550:	f43f af45 	beq.w	80093de <_printf_float+0xba>
 8009554:	f04f 0800 	mov.w	r8, #0
 8009558:	f104 091a 	add.w	r9, r4, #26
 800955c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955e:	3b01      	subs	r3, #1
 8009560:	4543      	cmp	r3, r8
 8009562:	dc09      	bgt.n	8009578 <_printf_float+0x254>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	079b      	lsls	r3, r3, #30
 8009568:	f100 8103 	bmi.w	8009772 <_printf_float+0x44e>
 800956c:	68e0      	ldr	r0, [r4, #12]
 800956e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009570:	4298      	cmp	r0, r3
 8009572:	bfb8      	it	lt
 8009574:	4618      	movlt	r0, r3
 8009576:	e734      	b.n	80093e2 <_printf_float+0xbe>
 8009578:	2301      	movs	r3, #1
 800957a:	464a      	mov	r2, r9
 800957c:	4631      	mov	r1, r6
 800957e:	4628      	mov	r0, r5
 8009580:	47b8      	blx	r7
 8009582:	3001      	adds	r0, #1
 8009584:	f43f af2b 	beq.w	80093de <_printf_float+0xba>
 8009588:	f108 0801 	add.w	r8, r8, #1
 800958c:	e7e6      	b.n	800955c <_printf_float+0x238>
 800958e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009590:	2b00      	cmp	r3, #0
 8009592:	dc2b      	bgt.n	80095ec <_printf_float+0x2c8>
 8009594:	2301      	movs	r3, #1
 8009596:	4a26      	ldr	r2, [pc, #152]	; (8009630 <_printf_float+0x30c>)
 8009598:	4631      	mov	r1, r6
 800959a:	4628      	mov	r0, r5
 800959c:	47b8      	blx	r7
 800959e:	3001      	adds	r0, #1
 80095a0:	f43f af1d 	beq.w	80093de <_printf_float+0xba>
 80095a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a6:	b923      	cbnz	r3, 80095b2 <_printf_float+0x28e>
 80095a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095aa:	b913      	cbnz	r3, 80095b2 <_printf_float+0x28e>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	07d9      	lsls	r1, r3, #31
 80095b0:	d5d8      	bpl.n	8009564 <_printf_float+0x240>
 80095b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095b6:	4631      	mov	r1, r6
 80095b8:	4628      	mov	r0, r5
 80095ba:	47b8      	blx	r7
 80095bc:	3001      	adds	r0, #1
 80095be:	f43f af0e 	beq.w	80093de <_printf_float+0xba>
 80095c2:	f04f 0900 	mov.w	r9, #0
 80095c6:	f104 0a1a 	add.w	sl, r4, #26
 80095ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095cc:	425b      	negs	r3, r3
 80095ce:	454b      	cmp	r3, r9
 80095d0:	dc01      	bgt.n	80095d6 <_printf_float+0x2b2>
 80095d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d4:	e794      	b.n	8009500 <_printf_float+0x1dc>
 80095d6:	2301      	movs	r3, #1
 80095d8:	4652      	mov	r2, sl
 80095da:	4631      	mov	r1, r6
 80095dc:	4628      	mov	r0, r5
 80095de:	47b8      	blx	r7
 80095e0:	3001      	adds	r0, #1
 80095e2:	f43f aefc 	beq.w	80093de <_printf_float+0xba>
 80095e6:	f109 0901 	add.w	r9, r9, #1
 80095ea:	e7ee      	b.n	80095ca <_printf_float+0x2a6>
 80095ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095f0:	429a      	cmp	r2, r3
 80095f2:	bfa8      	it	ge
 80095f4:	461a      	movge	r2, r3
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	4691      	mov	r9, r2
 80095fa:	dd07      	ble.n	800960c <_printf_float+0x2e8>
 80095fc:	4613      	mov	r3, r2
 80095fe:	4631      	mov	r1, r6
 8009600:	4642      	mov	r2, r8
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	f43f aee9 	beq.w	80093de <_printf_float+0xba>
 800960c:	f104 031a 	add.w	r3, r4, #26
 8009610:	f04f 0b00 	mov.w	fp, #0
 8009614:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009618:	9306      	str	r3, [sp, #24]
 800961a:	e015      	b.n	8009648 <_printf_float+0x324>
 800961c:	7fefffff 	.word	0x7fefffff
 8009620:	080178e0 	.word	0x080178e0
 8009624:	080178dc 	.word	0x080178dc
 8009628:	080178e8 	.word	0x080178e8
 800962c:	080178e4 	.word	0x080178e4
 8009630:	080178ec 	.word	0x080178ec
 8009634:	2301      	movs	r3, #1
 8009636:	9a06      	ldr	r2, [sp, #24]
 8009638:	4631      	mov	r1, r6
 800963a:	4628      	mov	r0, r5
 800963c:	47b8      	blx	r7
 800963e:	3001      	adds	r0, #1
 8009640:	f43f aecd 	beq.w	80093de <_printf_float+0xba>
 8009644:	f10b 0b01 	add.w	fp, fp, #1
 8009648:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800964c:	ebaa 0309 	sub.w	r3, sl, r9
 8009650:	455b      	cmp	r3, fp
 8009652:	dcef      	bgt.n	8009634 <_printf_float+0x310>
 8009654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009658:	429a      	cmp	r2, r3
 800965a:	44d0      	add	r8, sl
 800965c:	db15      	blt.n	800968a <_printf_float+0x366>
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	07da      	lsls	r2, r3, #31
 8009662:	d412      	bmi.n	800968a <_printf_float+0x366>
 8009664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009666:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009668:	eba3 020a 	sub.w	r2, r3, sl
 800966c:	eba3 0a01 	sub.w	sl, r3, r1
 8009670:	4592      	cmp	sl, r2
 8009672:	bfa8      	it	ge
 8009674:	4692      	movge	sl, r2
 8009676:	f1ba 0f00 	cmp.w	sl, #0
 800967a:	dc0e      	bgt.n	800969a <_printf_float+0x376>
 800967c:	f04f 0800 	mov.w	r8, #0
 8009680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009684:	f104 091a 	add.w	r9, r4, #26
 8009688:	e019      	b.n	80096be <_printf_float+0x39a>
 800968a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800968e:	4631      	mov	r1, r6
 8009690:	4628      	mov	r0, r5
 8009692:	47b8      	blx	r7
 8009694:	3001      	adds	r0, #1
 8009696:	d1e5      	bne.n	8009664 <_printf_float+0x340>
 8009698:	e6a1      	b.n	80093de <_printf_float+0xba>
 800969a:	4653      	mov	r3, sl
 800969c:	4642      	mov	r2, r8
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	d1e9      	bne.n	800967c <_printf_float+0x358>
 80096a8:	e699      	b.n	80093de <_printf_float+0xba>
 80096aa:	2301      	movs	r3, #1
 80096ac:	464a      	mov	r2, r9
 80096ae:	4631      	mov	r1, r6
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	f43f ae92 	beq.w	80093de <_printf_float+0xba>
 80096ba:	f108 0801 	add.w	r8, r8, #1
 80096be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096c2:	1a9b      	subs	r3, r3, r2
 80096c4:	eba3 030a 	sub.w	r3, r3, sl
 80096c8:	4543      	cmp	r3, r8
 80096ca:	dcee      	bgt.n	80096aa <_printf_float+0x386>
 80096cc:	e74a      	b.n	8009564 <_printf_float+0x240>
 80096ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096d0:	2a01      	cmp	r2, #1
 80096d2:	dc01      	bgt.n	80096d8 <_printf_float+0x3b4>
 80096d4:	07db      	lsls	r3, r3, #31
 80096d6:	d53a      	bpl.n	800974e <_printf_float+0x42a>
 80096d8:	2301      	movs	r3, #1
 80096da:	4642      	mov	r2, r8
 80096dc:	4631      	mov	r1, r6
 80096de:	4628      	mov	r0, r5
 80096e0:	47b8      	blx	r7
 80096e2:	3001      	adds	r0, #1
 80096e4:	f43f ae7b 	beq.w	80093de <_printf_float+0xba>
 80096e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096ec:	4631      	mov	r1, r6
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b8      	blx	r7
 80096f2:	3001      	adds	r0, #1
 80096f4:	f108 0801 	add.w	r8, r8, #1
 80096f8:	f43f ae71 	beq.w	80093de <_printf_float+0xba>
 80096fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096fe:	2200      	movs	r2, #0
 8009700:	f103 3aff 	add.w	sl, r3, #4294967295
 8009704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009708:	2300      	movs	r3, #0
 800970a:	f7f7 f9f5 	bl	8000af8 <__aeabi_dcmpeq>
 800970e:	b9c8      	cbnz	r0, 8009744 <_printf_float+0x420>
 8009710:	4653      	mov	r3, sl
 8009712:	4642      	mov	r2, r8
 8009714:	4631      	mov	r1, r6
 8009716:	4628      	mov	r0, r5
 8009718:	47b8      	blx	r7
 800971a:	3001      	adds	r0, #1
 800971c:	d10e      	bne.n	800973c <_printf_float+0x418>
 800971e:	e65e      	b.n	80093de <_printf_float+0xba>
 8009720:	2301      	movs	r3, #1
 8009722:	4652      	mov	r2, sl
 8009724:	4631      	mov	r1, r6
 8009726:	4628      	mov	r0, r5
 8009728:	47b8      	blx	r7
 800972a:	3001      	adds	r0, #1
 800972c:	f43f ae57 	beq.w	80093de <_printf_float+0xba>
 8009730:	f108 0801 	add.w	r8, r8, #1
 8009734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009736:	3b01      	subs	r3, #1
 8009738:	4543      	cmp	r3, r8
 800973a:	dcf1      	bgt.n	8009720 <_printf_float+0x3fc>
 800973c:	464b      	mov	r3, r9
 800973e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009742:	e6de      	b.n	8009502 <_printf_float+0x1de>
 8009744:	f04f 0800 	mov.w	r8, #0
 8009748:	f104 0a1a 	add.w	sl, r4, #26
 800974c:	e7f2      	b.n	8009734 <_printf_float+0x410>
 800974e:	2301      	movs	r3, #1
 8009750:	e7df      	b.n	8009712 <_printf_float+0x3ee>
 8009752:	2301      	movs	r3, #1
 8009754:	464a      	mov	r2, r9
 8009756:	4631      	mov	r1, r6
 8009758:	4628      	mov	r0, r5
 800975a:	47b8      	blx	r7
 800975c:	3001      	adds	r0, #1
 800975e:	f43f ae3e 	beq.w	80093de <_printf_float+0xba>
 8009762:	f108 0801 	add.w	r8, r8, #1
 8009766:	68e3      	ldr	r3, [r4, #12]
 8009768:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800976a:	1a9b      	subs	r3, r3, r2
 800976c:	4543      	cmp	r3, r8
 800976e:	dcf0      	bgt.n	8009752 <_printf_float+0x42e>
 8009770:	e6fc      	b.n	800956c <_printf_float+0x248>
 8009772:	f04f 0800 	mov.w	r8, #0
 8009776:	f104 0919 	add.w	r9, r4, #25
 800977a:	e7f4      	b.n	8009766 <_printf_float+0x442>
 800977c:	2900      	cmp	r1, #0
 800977e:	f43f ae8b 	beq.w	8009498 <_printf_float+0x174>
 8009782:	2300      	movs	r3, #0
 8009784:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009788:	ab09      	add	r3, sp, #36	; 0x24
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	ec49 8b10 	vmov	d0, r8, r9
 8009790:	6022      	str	r2, [r4, #0]
 8009792:	f8cd a004 	str.w	sl, [sp, #4]
 8009796:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800979a:	4628      	mov	r0, r5
 800979c:	f7ff fd2e 	bl	80091fc <__cvt>
 80097a0:	4680      	mov	r8, r0
 80097a2:	e648      	b.n	8009436 <_printf_float+0x112>

080097a4 <_printf_common>:
 80097a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a8:	4691      	mov	r9, r2
 80097aa:	461f      	mov	r7, r3
 80097ac:	688a      	ldr	r2, [r1, #8]
 80097ae:	690b      	ldr	r3, [r1, #16]
 80097b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097b4:	4293      	cmp	r3, r2
 80097b6:	bfb8      	it	lt
 80097b8:	4613      	movlt	r3, r2
 80097ba:	f8c9 3000 	str.w	r3, [r9]
 80097be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097c2:	4606      	mov	r6, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	b112      	cbz	r2, 80097ce <_printf_common+0x2a>
 80097c8:	3301      	adds	r3, #1
 80097ca:	f8c9 3000 	str.w	r3, [r9]
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	0699      	lsls	r1, r3, #26
 80097d2:	bf42      	ittt	mi
 80097d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80097d8:	3302      	addmi	r3, #2
 80097da:	f8c9 3000 	strmi.w	r3, [r9]
 80097de:	6825      	ldr	r5, [r4, #0]
 80097e0:	f015 0506 	ands.w	r5, r5, #6
 80097e4:	d107      	bne.n	80097f6 <_printf_common+0x52>
 80097e6:	f104 0a19 	add.w	sl, r4, #25
 80097ea:	68e3      	ldr	r3, [r4, #12]
 80097ec:	f8d9 2000 	ldr.w	r2, [r9]
 80097f0:	1a9b      	subs	r3, r3, r2
 80097f2:	42ab      	cmp	r3, r5
 80097f4:	dc28      	bgt.n	8009848 <_printf_common+0xa4>
 80097f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80097fa:	6822      	ldr	r2, [r4, #0]
 80097fc:	3300      	adds	r3, #0
 80097fe:	bf18      	it	ne
 8009800:	2301      	movne	r3, #1
 8009802:	0692      	lsls	r2, r2, #26
 8009804:	d42d      	bmi.n	8009862 <_printf_common+0xbe>
 8009806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800980a:	4639      	mov	r1, r7
 800980c:	4630      	mov	r0, r6
 800980e:	47c0      	blx	r8
 8009810:	3001      	adds	r0, #1
 8009812:	d020      	beq.n	8009856 <_printf_common+0xb2>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	68e5      	ldr	r5, [r4, #12]
 8009818:	f8d9 2000 	ldr.w	r2, [r9]
 800981c:	f003 0306 	and.w	r3, r3, #6
 8009820:	2b04      	cmp	r3, #4
 8009822:	bf08      	it	eq
 8009824:	1aad      	subeq	r5, r5, r2
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	6922      	ldr	r2, [r4, #16]
 800982a:	bf0c      	ite	eq
 800982c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009830:	2500      	movne	r5, #0
 8009832:	4293      	cmp	r3, r2
 8009834:	bfc4      	itt	gt
 8009836:	1a9b      	subgt	r3, r3, r2
 8009838:	18ed      	addgt	r5, r5, r3
 800983a:	f04f 0900 	mov.w	r9, #0
 800983e:	341a      	adds	r4, #26
 8009840:	454d      	cmp	r5, r9
 8009842:	d11a      	bne.n	800987a <_printf_common+0xd6>
 8009844:	2000      	movs	r0, #0
 8009846:	e008      	b.n	800985a <_printf_common+0xb6>
 8009848:	2301      	movs	r3, #1
 800984a:	4652      	mov	r2, sl
 800984c:	4639      	mov	r1, r7
 800984e:	4630      	mov	r0, r6
 8009850:	47c0      	blx	r8
 8009852:	3001      	adds	r0, #1
 8009854:	d103      	bne.n	800985e <_printf_common+0xba>
 8009856:	f04f 30ff 	mov.w	r0, #4294967295
 800985a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985e:	3501      	adds	r5, #1
 8009860:	e7c3      	b.n	80097ea <_printf_common+0x46>
 8009862:	18e1      	adds	r1, r4, r3
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	2030      	movs	r0, #48	; 0x30
 8009868:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800986c:	4422      	add	r2, r4
 800986e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009876:	3302      	adds	r3, #2
 8009878:	e7c5      	b.n	8009806 <_printf_common+0x62>
 800987a:	2301      	movs	r3, #1
 800987c:	4622      	mov	r2, r4
 800987e:	4639      	mov	r1, r7
 8009880:	4630      	mov	r0, r6
 8009882:	47c0      	blx	r8
 8009884:	3001      	adds	r0, #1
 8009886:	d0e6      	beq.n	8009856 <_printf_common+0xb2>
 8009888:	f109 0901 	add.w	r9, r9, #1
 800988c:	e7d8      	b.n	8009840 <_printf_common+0x9c>
	...

08009890 <_printf_i>:
 8009890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009894:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009898:	460c      	mov	r4, r1
 800989a:	7e09      	ldrb	r1, [r1, #24]
 800989c:	b085      	sub	sp, #20
 800989e:	296e      	cmp	r1, #110	; 0x6e
 80098a0:	4617      	mov	r7, r2
 80098a2:	4606      	mov	r6, r0
 80098a4:	4698      	mov	r8, r3
 80098a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098a8:	f000 80b3 	beq.w	8009a12 <_printf_i+0x182>
 80098ac:	d822      	bhi.n	80098f4 <_printf_i+0x64>
 80098ae:	2963      	cmp	r1, #99	; 0x63
 80098b0:	d036      	beq.n	8009920 <_printf_i+0x90>
 80098b2:	d80a      	bhi.n	80098ca <_printf_i+0x3a>
 80098b4:	2900      	cmp	r1, #0
 80098b6:	f000 80b9 	beq.w	8009a2c <_printf_i+0x19c>
 80098ba:	2958      	cmp	r1, #88	; 0x58
 80098bc:	f000 8083 	beq.w	80099c6 <_printf_i+0x136>
 80098c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80098c8:	e032      	b.n	8009930 <_printf_i+0xa0>
 80098ca:	2964      	cmp	r1, #100	; 0x64
 80098cc:	d001      	beq.n	80098d2 <_printf_i+0x42>
 80098ce:	2969      	cmp	r1, #105	; 0x69
 80098d0:	d1f6      	bne.n	80098c0 <_printf_i+0x30>
 80098d2:	6820      	ldr	r0, [r4, #0]
 80098d4:	6813      	ldr	r3, [r2, #0]
 80098d6:	0605      	lsls	r5, r0, #24
 80098d8:	f103 0104 	add.w	r1, r3, #4
 80098dc:	d52a      	bpl.n	8009934 <_printf_i+0xa4>
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6011      	str	r1, [r2, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	da03      	bge.n	80098ee <_printf_i+0x5e>
 80098e6:	222d      	movs	r2, #45	; 0x2d
 80098e8:	425b      	negs	r3, r3
 80098ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80098ee:	486f      	ldr	r0, [pc, #444]	; (8009aac <_printf_i+0x21c>)
 80098f0:	220a      	movs	r2, #10
 80098f2:	e039      	b.n	8009968 <_printf_i+0xd8>
 80098f4:	2973      	cmp	r1, #115	; 0x73
 80098f6:	f000 809d 	beq.w	8009a34 <_printf_i+0x1a4>
 80098fa:	d808      	bhi.n	800990e <_printf_i+0x7e>
 80098fc:	296f      	cmp	r1, #111	; 0x6f
 80098fe:	d020      	beq.n	8009942 <_printf_i+0xb2>
 8009900:	2970      	cmp	r1, #112	; 0x70
 8009902:	d1dd      	bne.n	80098c0 <_printf_i+0x30>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	f043 0320 	orr.w	r3, r3, #32
 800990a:	6023      	str	r3, [r4, #0]
 800990c:	e003      	b.n	8009916 <_printf_i+0x86>
 800990e:	2975      	cmp	r1, #117	; 0x75
 8009910:	d017      	beq.n	8009942 <_printf_i+0xb2>
 8009912:	2978      	cmp	r1, #120	; 0x78
 8009914:	d1d4      	bne.n	80098c0 <_printf_i+0x30>
 8009916:	2378      	movs	r3, #120	; 0x78
 8009918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800991c:	4864      	ldr	r0, [pc, #400]	; (8009ab0 <_printf_i+0x220>)
 800991e:	e055      	b.n	80099cc <_printf_i+0x13c>
 8009920:	6813      	ldr	r3, [r2, #0]
 8009922:	1d19      	adds	r1, r3, #4
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6011      	str	r1, [r2, #0]
 8009928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800992c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009930:	2301      	movs	r3, #1
 8009932:	e08c      	b.n	8009a4e <_printf_i+0x1be>
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6011      	str	r1, [r2, #0]
 8009938:	f010 0f40 	tst.w	r0, #64	; 0x40
 800993c:	bf18      	it	ne
 800993e:	b21b      	sxthne	r3, r3
 8009940:	e7cf      	b.n	80098e2 <_printf_i+0x52>
 8009942:	6813      	ldr	r3, [r2, #0]
 8009944:	6825      	ldr	r5, [r4, #0]
 8009946:	1d18      	adds	r0, r3, #4
 8009948:	6010      	str	r0, [r2, #0]
 800994a:	0628      	lsls	r0, r5, #24
 800994c:	d501      	bpl.n	8009952 <_printf_i+0xc2>
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	e002      	b.n	8009958 <_printf_i+0xc8>
 8009952:	0668      	lsls	r0, r5, #25
 8009954:	d5fb      	bpl.n	800994e <_printf_i+0xbe>
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	4854      	ldr	r0, [pc, #336]	; (8009aac <_printf_i+0x21c>)
 800995a:	296f      	cmp	r1, #111	; 0x6f
 800995c:	bf14      	ite	ne
 800995e:	220a      	movne	r2, #10
 8009960:	2208      	moveq	r2, #8
 8009962:	2100      	movs	r1, #0
 8009964:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009968:	6865      	ldr	r5, [r4, #4]
 800996a:	60a5      	str	r5, [r4, #8]
 800996c:	2d00      	cmp	r5, #0
 800996e:	f2c0 8095 	blt.w	8009a9c <_printf_i+0x20c>
 8009972:	6821      	ldr	r1, [r4, #0]
 8009974:	f021 0104 	bic.w	r1, r1, #4
 8009978:	6021      	str	r1, [r4, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d13d      	bne.n	80099fa <_printf_i+0x16a>
 800997e:	2d00      	cmp	r5, #0
 8009980:	f040 808e 	bne.w	8009aa0 <_printf_i+0x210>
 8009984:	4665      	mov	r5, ip
 8009986:	2a08      	cmp	r2, #8
 8009988:	d10b      	bne.n	80099a2 <_printf_i+0x112>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	07db      	lsls	r3, r3, #31
 800998e:	d508      	bpl.n	80099a2 <_printf_i+0x112>
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	6862      	ldr	r2, [r4, #4]
 8009994:	429a      	cmp	r2, r3
 8009996:	bfde      	ittt	le
 8009998:	2330      	movle	r3, #48	; 0x30
 800999a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800999e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099a2:	ebac 0305 	sub.w	r3, ip, r5
 80099a6:	6123      	str	r3, [r4, #16]
 80099a8:	f8cd 8000 	str.w	r8, [sp]
 80099ac:	463b      	mov	r3, r7
 80099ae:	aa03      	add	r2, sp, #12
 80099b0:	4621      	mov	r1, r4
 80099b2:	4630      	mov	r0, r6
 80099b4:	f7ff fef6 	bl	80097a4 <_printf_common>
 80099b8:	3001      	adds	r0, #1
 80099ba:	d14d      	bne.n	8009a58 <_printf_i+0x1c8>
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	b005      	add	sp, #20
 80099c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c6:	4839      	ldr	r0, [pc, #228]	; (8009aac <_printf_i+0x21c>)
 80099c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80099cc:	6813      	ldr	r3, [r2, #0]
 80099ce:	6821      	ldr	r1, [r4, #0]
 80099d0:	1d1d      	adds	r5, r3, #4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6015      	str	r5, [r2, #0]
 80099d6:	060a      	lsls	r2, r1, #24
 80099d8:	d50b      	bpl.n	80099f2 <_printf_i+0x162>
 80099da:	07ca      	lsls	r2, r1, #31
 80099dc:	bf44      	itt	mi
 80099de:	f041 0120 	orrmi.w	r1, r1, #32
 80099e2:	6021      	strmi	r1, [r4, #0]
 80099e4:	b91b      	cbnz	r3, 80099ee <_printf_i+0x15e>
 80099e6:	6822      	ldr	r2, [r4, #0]
 80099e8:	f022 0220 	bic.w	r2, r2, #32
 80099ec:	6022      	str	r2, [r4, #0]
 80099ee:	2210      	movs	r2, #16
 80099f0:	e7b7      	b.n	8009962 <_printf_i+0xd2>
 80099f2:	064d      	lsls	r5, r1, #25
 80099f4:	bf48      	it	mi
 80099f6:	b29b      	uxthmi	r3, r3
 80099f8:	e7ef      	b.n	80099da <_printf_i+0x14a>
 80099fa:	4665      	mov	r5, ip
 80099fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a00:	fb02 3311 	mls	r3, r2, r1, r3
 8009a04:	5cc3      	ldrb	r3, [r0, r3]
 8009a06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	d1f5      	bne.n	80099fc <_printf_i+0x16c>
 8009a10:	e7b9      	b.n	8009986 <_printf_i+0xf6>
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	6825      	ldr	r5, [r4, #0]
 8009a16:	6961      	ldr	r1, [r4, #20]
 8009a18:	1d18      	adds	r0, r3, #4
 8009a1a:	6010      	str	r0, [r2, #0]
 8009a1c:	0628      	lsls	r0, r5, #24
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	d501      	bpl.n	8009a26 <_printf_i+0x196>
 8009a22:	6019      	str	r1, [r3, #0]
 8009a24:	e002      	b.n	8009a2c <_printf_i+0x19c>
 8009a26:	066a      	lsls	r2, r5, #25
 8009a28:	d5fb      	bpl.n	8009a22 <_printf_i+0x192>
 8009a2a:	8019      	strh	r1, [r3, #0]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	4665      	mov	r5, ip
 8009a32:	e7b9      	b.n	80099a8 <_printf_i+0x118>
 8009a34:	6813      	ldr	r3, [r2, #0]
 8009a36:	1d19      	adds	r1, r3, #4
 8009a38:	6011      	str	r1, [r2, #0]
 8009a3a:	681d      	ldr	r5, [r3, #0]
 8009a3c:	6862      	ldr	r2, [r4, #4]
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4628      	mov	r0, r5
 8009a42:	f7f6 fbe5 	bl	8000210 <memchr>
 8009a46:	b108      	cbz	r0, 8009a4c <_printf_i+0x1bc>
 8009a48:	1b40      	subs	r0, r0, r5
 8009a4a:	6060      	str	r0, [r4, #4]
 8009a4c:	6863      	ldr	r3, [r4, #4]
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	2300      	movs	r3, #0
 8009a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a56:	e7a7      	b.n	80099a8 <_printf_i+0x118>
 8009a58:	6923      	ldr	r3, [r4, #16]
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	4630      	mov	r0, r6
 8009a60:	47c0      	blx	r8
 8009a62:	3001      	adds	r0, #1
 8009a64:	d0aa      	beq.n	80099bc <_printf_i+0x12c>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	079b      	lsls	r3, r3, #30
 8009a6a:	d413      	bmi.n	8009a94 <_printf_i+0x204>
 8009a6c:	68e0      	ldr	r0, [r4, #12]
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	4298      	cmp	r0, r3
 8009a72:	bfb8      	it	lt
 8009a74:	4618      	movlt	r0, r3
 8009a76:	e7a3      	b.n	80099c0 <_printf_i+0x130>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	464a      	mov	r2, r9
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4630      	mov	r0, r6
 8009a80:	47c0      	blx	r8
 8009a82:	3001      	adds	r0, #1
 8009a84:	d09a      	beq.n	80099bc <_printf_i+0x12c>
 8009a86:	3501      	adds	r5, #1
 8009a88:	68e3      	ldr	r3, [r4, #12]
 8009a8a:	9a03      	ldr	r2, [sp, #12]
 8009a8c:	1a9b      	subs	r3, r3, r2
 8009a8e:	42ab      	cmp	r3, r5
 8009a90:	dcf2      	bgt.n	8009a78 <_printf_i+0x1e8>
 8009a92:	e7eb      	b.n	8009a6c <_printf_i+0x1dc>
 8009a94:	2500      	movs	r5, #0
 8009a96:	f104 0919 	add.w	r9, r4, #25
 8009a9a:	e7f5      	b.n	8009a88 <_printf_i+0x1f8>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1ac      	bne.n	80099fa <_printf_i+0x16a>
 8009aa0:	7803      	ldrb	r3, [r0, #0]
 8009aa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aaa:	e76c      	b.n	8009986 <_printf_i+0xf6>
 8009aac:	080178ee 	.word	0x080178ee
 8009ab0:	080178ff 	.word	0x080178ff

08009ab4 <iprintf>:
 8009ab4:	b40f      	push	{r0, r1, r2, r3}
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	; (8009ae0 <iprintf+0x2c>)
 8009ab8:	b513      	push	{r0, r1, r4, lr}
 8009aba:	681c      	ldr	r4, [r3, #0]
 8009abc:	b124      	cbz	r4, 8009ac8 <iprintf+0x14>
 8009abe:	69a3      	ldr	r3, [r4, #24]
 8009ac0:	b913      	cbnz	r3, 8009ac8 <iprintf+0x14>
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f001 f878 	bl	800abb8 <__sinit>
 8009ac8:	ab05      	add	r3, sp, #20
 8009aca:	9a04      	ldr	r2, [sp, #16]
 8009acc:	68a1      	ldr	r1, [r4, #8]
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f001 fc83 	bl	800b3dc <_vfiprintf_r>
 8009ad6:	b002      	add	sp, #8
 8009ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009adc:	b004      	add	sp, #16
 8009ade:	4770      	bx	lr
 8009ae0:	200007b8 	.word	0x200007b8

08009ae4 <_puts_r>:
 8009ae4:	b570      	push	{r4, r5, r6, lr}
 8009ae6:	460e      	mov	r6, r1
 8009ae8:	4605      	mov	r5, r0
 8009aea:	b118      	cbz	r0, 8009af4 <_puts_r+0x10>
 8009aec:	6983      	ldr	r3, [r0, #24]
 8009aee:	b90b      	cbnz	r3, 8009af4 <_puts_r+0x10>
 8009af0:	f001 f862 	bl	800abb8 <__sinit>
 8009af4:	69ab      	ldr	r3, [r5, #24]
 8009af6:	68ac      	ldr	r4, [r5, #8]
 8009af8:	b913      	cbnz	r3, 8009b00 <_puts_r+0x1c>
 8009afa:	4628      	mov	r0, r5
 8009afc:	f001 f85c 	bl	800abb8 <__sinit>
 8009b00:	4b23      	ldr	r3, [pc, #140]	; (8009b90 <_puts_r+0xac>)
 8009b02:	429c      	cmp	r4, r3
 8009b04:	d117      	bne.n	8009b36 <_puts_r+0x52>
 8009b06:	686c      	ldr	r4, [r5, #4]
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	071b      	lsls	r3, r3, #28
 8009b0c:	d51d      	bpl.n	8009b4a <_puts_r+0x66>
 8009b0e:	6923      	ldr	r3, [r4, #16]
 8009b10:	b1db      	cbz	r3, 8009b4a <_puts_r+0x66>
 8009b12:	3e01      	subs	r6, #1
 8009b14:	68a3      	ldr	r3, [r4, #8]
 8009b16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	60a3      	str	r3, [r4, #8]
 8009b1e:	b9e9      	cbnz	r1, 8009b5c <_puts_r+0x78>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	da2e      	bge.n	8009b82 <_puts_r+0x9e>
 8009b24:	4622      	mov	r2, r4
 8009b26:	210a      	movs	r1, #10
 8009b28:	4628      	mov	r0, r5
 8009b2a:	f000 f84f 	bl	8009bcc <__swbuf_r>
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d011      	beq.n	8009b56 <_puts_r+0x72>
 8009b32:	200a      	movs	r0, #10
 8009b34:	e011      	b.n	8009b5a <_puts_r+0x76>
 8009b36:	4b17      	ldr	r3, [pc, #92]	; (8009b94 <_puts_r+0xb0>)
 8009b38:	429c      	cmp	r4, r3
 8009b3a:	d101      	bne.n	8009b40 <_puts_r+0x5c>
 8009b3c:	68ac      	ldr	r4, [r5, #8]
 8009b3e:	e7e3      	b.n	8009b08 <_puts_r+0x24>
 8009b40:	4b15      	ldr	r3, [pc, #84]	; (8009b98 <_puts_r+0xb4>)
 8009b42:	429c      	cmp	r4, r3
 8009b44:	bf08      	it	eq
 8009b46:	68ec      	ldreq	r4, [r5, #12]
 8009b48:	e7de      	b.n	8009b08 <_puts_r+0x24>
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	f000 f88f 	bl	8009c70 <__swsetup_r>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d0dd      	beq.n	8009b12 <_puts_r+0x2e>
 8009b56:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	da04      	bge.n	8009b6a <_puts_r+0x86>
 8009b60:	69a2      	ldr	r2, [r4, #24]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	dc06      	bgt.n	8009b74 <_puts_r+0x90>
 8009b66:	290a      	cmp	r1, #10
 8009b68:	d004      	beq.n	8009b74 <_puts_r+0x90>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	1c5a      	adds	r2, r3, #1
 8009b6e:	6022      	str	r2, [r4, #0]
 8009b70:	7019      	strb	r1, [r3, #0]
 8009b72:	e7cf      	b.n	8009b14 <_puts_r+0x30>
 8009b74:	4622      	mov	r2, r4
 8009b76:	4628      	mov	r0, r5
 8009b78:	f000 f828 	bl	8009bcc <__swbuf_r>
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d1c9      	bne.n	8009b14 <_puts_r+0x30>
 8009b80:	e7e9      	b.n	8009b56 <_puts_r+0x72>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	200a      	movs	r0, #10
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	6022      	str	r2, [r4, #0]
 8009b8a:	7018      	strb	r0, [r3, #0]
 8009b8c:	e7e5      	b.n	8009b5a <_puts_r+0x76>
 8009b8e:	bf00      	nop
 8009b90:	08017940 	.word	0x08017940
 8009b94:	08017960 	.word	0x08017960
 8009b98:	08017920 	.word	0x08017920

08009b9c <puts>:
 8009b9c:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <puts+0xc>)
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	f7ff bf9f 	b.w	8009ae4 <_puts_r>
 8009ba6:	bf00      	nop
 8009ba8:	200007b8 	.word	0x200007b8

08009bac <_sbrk_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4c06      	ldr	r4, [pc, #24]	; (8009bc8 <_sbrk_r+0x1c>)
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	6023      	str	r3, [r4, #0]
 8009bb8:	f7f8 f824 	bl	8001c04 <_sbrk>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d102      	bne.n	8009bc6 <_sbrk_r+0x1a>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	b103      	cbz	r3, 8009bc6 <_sbrk_r+0x1a>
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	20001314 	.word	0x20001314

08009bcc <__swbuf_r>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	460e      	mov	r6, r1
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	b118      	cbz	r0, 8009bde <__swbuf_r+0x12>
 8009bd6:	6983      	ldr	r3, [r0, #24]
 8009bd8:	b90b      	cbnz	r3, 8009bde <__swbuf_r+0x12>
 8009bda:	f000 ffed 	bl	800abb8 <__sinit>
 8009bde:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <__swbuf_r+0x98>)
 8009be0:	429c      	cmp	r4, r3
 8009be2:	d12a      	bne.n	8009c3a <__swbuf_r+0x6e>
 8009be4:	686c      	ldr	r4, [r5, #4]
 8009be6:	69a3      	ldr	r3, [r4, #24]
 8009be8:	60a3      	str	r3, [r4, #8]
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	071a      	lsls	r2, r3, #28
 8009bee:	d52e      	bpl.n	8009c4e <__swbuf_r+0x82>
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	b363      	cbz	r3, 8009c4e <__swbuf_r+0x82>
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	6820      	ldr	r0, [r4, #0]
 8009bf8:	1ac0      	subs	r0, r0, r3
 8009bfa:	6963      	ldr	r3, [r4, #20]
 8009bfc:	b2f6      	uxtb	r6, r6
 8009bfe:	4283      	cmp	r3, r0
 8009c00:	4637      	mov	r7, r6
 8009c02:	dc04      	bgt.n	8009c0e <__swbuf_r+0x42>
 8009c04:	4621      	mov	r1, r4
 8009c06:	4628      	mov	r0, r5
 8009c08:	f000 ff6c 	bl	800aae4 <_fflush_r>
 8009c0c:	bb28      	cbnz	r0, 8009c5a <__swbuf_r+0x8e>
 8009c0e:	68a3      	ldr	r3, [r4, #8]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	60a3      	str	r3, [r4, #8]
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	6022      	str	r2, [r4, #0]
 8009c1a:	701e      	strb	r6, [r3, #0]
 8009c1c:	6963      	ldr	r3, [r4, #20]
 8009c1e:	3001      	adds	r0, #1
 8009c20:	4283      	cmp	r3, r0
 8009c22:	d004      	beq.n	8009c2e <__swbuf_r+0x62>
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	07db      	lsls	r3, r3, #31
 8009c28:	d519      	bpl.n	8009c5e <__swbuf_r+0x92>
 8009c2a:	2e0a      	cmp	r6, #10
 8009c2c:	d117      	bne.n	8009c5e <__swbuf_r+0x92>
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	f000 ff57 	bl	800aae4 <_fflush_r>
 8009c36:	b190      	cbz	r0, 8009c5e <__swbuf_r+0x92>
 8009c38:	e00f      	b.n	8009c5a <__swbuf_r+0x8e>
 8009c3a:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <__swbuf_r+0x9c>)
 8009c3c:	429c      	cmp	r4, r3
 8009c3e:	d101      	bne.n	8009c44 <__swbuf_r+0x78>
 8009c40:	68ac      	ldr	r4, [r5, #8]
 8009c42:	e7d0      	b.n	8009be6 <__swbuf_r+0x1a>
 8009c44:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <__swbuf_r+0xa0>)
 8009c46:	429c      	cmp	r4, r3
 8009c48:	bf08      	it	eq
 8009c4a:	68ec      	ldreq	r4, [r5, #12]
 8009c4c:	e7cb      	b.n	8009be6 <__swbuf_r+0x1a>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f000 f80d 	bl	8009c70 <__swsetup_r>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0cc      	beq.n	8009bf4 <__swbuf_r+0x28>
 8009c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8009c5e:	4638      	mov	r0, r7
 8009c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c62:	bf00      	nop
 8009c64:	08017940 	.word	0x08017940
 8009c68:	08017960 	.word	0x08017960
 8009c6c:	08017920 	.word	0x08017920

08009c70 <__swsetup_r>:
 8009c70:	4b32      	ldr	r3, [pc, #200]	; (8009d3c <__swsetup_r+0xcc>)
 8009c72:	b570      	push	{r4, r5, r6, lr}
 8009c74:	681d      	ldr	r5, [r3, #0]
 8009c76:	4606      	mov	r6, r0
 8009c78:	460c      	mov	r4, r1
 8009c7a:	b125      	cbz	r5, 8009c86 <__swsetup_r+0x16>
 8009c7c:	69ab      	ldr	r3, [r5, #24]
 8009c7e:	b913      	cbnz	r3, 8009c86 <__swsetup_r+0x16>
 8009c80:	4628      	mov	r0, r5
 8009c82:	f000 ff99 	bl	800abb8 <__sinit>
 8009c86:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <__swsetup_r+0xd0>)
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	d10f      	bne.n	8009cac <__swsetup_r+0x3c>
 8009c8c:	686c      	ldr	r4, [r5, #4]
 8009c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	0715      	lsls	r5, r2, #28
 8009c96:	d42c      	bmi.n	8009cf2 <__swsetup_r+0x82>
 8009c98:	06d0      	lsls	r0, r2, #27
 8009c9a:	d411      	bmi.n	8009cc0 <__swsetup_r+0x50>
 8009c9c:	2209      	movs	r2, #9
 8009c9e:	6032      	str	r2, [r6, #0]
 8009ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca4:	81a3      	strh	r3, [r4, #12]
 8009ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8009caa:	e03e      	b.n	8009d2a <__swsetup_r+0xba>
 8009cac:	4b25      	ldr	r3, [pc, #148]	; (8009d44 <__swsetup_r+0xd4>)
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	d101      	bne.n	8009cb6 <__swsetup_r+0x46>
 8009cb2:	68ac      	ldr	r4, [r5, #8]
 8009cb4:	e7eb      	b.n	8009c8e <__swsetup_r+0x1e>
 8009cb6:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <__swsetup_r+0xd8>)
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	bf08      	it	eq
 8009cbc:	68ec      	ldreq	r4, [r5, #12]
 8009cbe:	e7e6      	b.n	8009c8e <__swsetup_r+0x1e>
 8009cc0:	0751      	lsls	r1, r2, #29
 8009cc2:	d512      	bpl.n	8009cea <__swsetup_r+0x7a>
 8009cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cc6:	b141      	cbz	r1, 8009cda <__swsetup_r+0x6a>
 8009cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	d002      	beq.n	8009cd6 <__swsetup_r+0x66>
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7ff f9eb 	bl	80090ac <_free_r>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6063      	str	r3, [r4, #4]
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f043 0308 	orr.w	r3, r3, #8
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	6923      	ldr	r3, [r4, #16]
 8009cf4:	b94b      	cbnz	r3, 8009d0a <__swsetup_r+0x9a>
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d00:	d003      	beq.n	8009d0a <__swsetup_r+0x9a>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4630      	mov	r0, r6
 8009d06:	f001 f813 	bl	800ad30 <__smakebuf_r>
 8009d0a:	89a2      	ldrh	r2, [r4, #12]
 8009d0c:	f012 0301 	ands.w	r3, r2, #1
 8009d10:	d00c      	beq.n	8009d2c <__swsetup_r+0xbc>
 8009d12:	2300      	movs	r3, #0
 8009d14:	60a3      	str	r3, [r4, #8]
 8009d16:	6963      	ldr	r3, [r4, #20]
 8009d18:	425b      	negs	r3, r3
 8009d1a:	61a3      	str	r3, [r4, #24]
 8009d1c:	6923      	ldr	r3, [r4, #16]
 8009d1e:	b953      	cbnz	r3, 8009d36 <__swsetup_r+0xc6>
 8009d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009d28:	d1ba      	bne.n	8009ca0 <__swsetup_r+0x30>
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	0792      	lsls	r2, r2, #30
 8009d2e:	bf58      	it	pl
 8009d30:	6963      	ldrpl	r3, [r4, #20]
 8009d32:	60a3      	str	r3, [r4, #8]
 8009d34:	e7f2      	b.n	8009d1c <__swsetup_r+0xac>
 8009d36:	2000      	movs	r0, #0
 8009d38:	e7f7      	b.n	8009d2a <__swsetup_r+0xba>
 8009d3a:	bf00      	nop
 8009d3c:	200007b8 	.word	0x200007b8
 8009d40:	08017940 	.word	0x08017940
 8009d44:	08017960 	.word	0x08017960
 8009d48:	08017920 	.word	0x08017920

08009d4c <quorem>:
 8009d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	6903      	ldr	r3, [r0, #16]
 8009d52:	690c      	ldr	r4, [r1, #16]
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	4680      	mov	r8, r0
 8009d58:	f2c0 8082 	blt.w	8009e60 <quorem+0x114>
 8009d5c:	3c01      	subs	r4, #1
 8009d5e:	f101 0714 	add.w	r7, r1, #20
 8009d62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009d66:	f100 0614 	add.w	r6, r0, #20
 8009d6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009d6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009d72:	eb06 030c 	add.w	r3, r6, ip
 8009d76:	3501      	adds	r5, #1
 8009d78:	eb07 090c 	add.w	r9, r7, ip
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009d82:	b395      	cbz	r5, 8009dea <quorem+0x9e>
 8009d84:	f04f 0a00 	mov.w	sl, #0
 8009d88:	4638      	mov	r0, r7
 8009d8a:	46b6      	mov	lr, r6
 8009d8c:	46d3      	mov	fp, sl
 8009d8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d92:	b293      	uxth	r3, r2
 8009d94:	fb05 a303 	mla	r3, r5, r3, sl
 8009d98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	ebab 0303 	sub.w	r3, fp, r3
 8009da2:	0c12      	lsrs	r2, r2, #16
 8009da4:	f8de b000 	ldr.w	fp, [lr]
 8009da8:	fb05 a202 	mla	r2, r5, r2, sl
 8009dac:	fa13 f38b 	uxtah	r3, r3, fp
 8009db0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009db4:	fa1f fb82 	uxth.w	fp, r2
 8009db8:	f8de 2000 	ldr.w	r2, [lr]
 8009dbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dca:	4581      	cmp	r9, r0
 8009dcc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009dd0:	f84e 3b04 	str.w	r3, [lr], #4
 8009dd4:	d2db      	bcs.n	8009d8e <quorem+0x42>
 8009dd6:	f856 300c 	ldr.w	r3, [r6, ip]
 8009dda:	b933      	cbnz	r3, 8009dea <quorem+0x9e>
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	3b04      	subs	r3, #4
 8009de0:	429e      	cmp	r6, r3
 8009de2:	461a      	mov	r2, r3
 8009de4:	d330      	bcc.n	8009e48 <quorem+0xfc>
 8009de6:	f8c8 4010 	str.w	r4, [r8, #16]
 8009dea:	4640      	mov	r0, r8
 8009dec:	f001 f9f8 	bl	800b1e0 <__mcmp>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	db25      	blt.n	8009e40 <quorem+0xf4>
 8009df4:	3501      	adds	r5, #1
 8009df6:	4630      	mov	r0, r6
 8009df8:	f04f 0c00 	mov.w	ip, #0
 8009dfc:	f857 2b04 	ldr.w	r2, [r7], #4
 8009e00:	f8d0 e000 	ldr.w	lr, [r0]
 8009e04:	b293      	uxth	r3, r2
 8009e06:	ebac 0303 	sub.w	r3, ip, r3
 8009e0a:	0c12      	lsrs	r2, r2, #16
 8009e0c:	fa13 f38e 	uxtah	r3, r3, lr
 8009e10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e1e:	45b9      	cmp	r9, r7
 8009e20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e24:	f840 3b04 	str.w	r3, [r0], #4
 8009e28:	d2e8      	bcs.n	8009dfc <quorem+0xb0>
 8009e2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009e2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009e32:	b92a      	cbnz	r2, 8009e40 <quorem+0xf4>
 8009e34:	3b04      	subs	r3, #4
 8009e36:	429e      	cmp	r6, r3
 8009e38:	461a      	mov	r2, r3
 8009e3a:	d30b      	bcc.n	8009e54 <quorem+0x108>
 8009e3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009e40:	4628      	mov	r0, r5
 8009e42:	b003      	add	sp, #12
 8009e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e48:	6812      	ldr	r2, [r2, #0]
 8009e4a:	3b04      	subs	r3, #4
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	d1ca      	bne.n	8009de6 <quorem+0x9a>
 8009e50:	3c01      	subs	r4, #1
 8009e52:	e7c5      	b.n	8009de0 <quorem+0x94>
 8009e54:	6812      	ldr	r2, [r2, #0]
 8009e56:	3b04      	subs	r3, #4
 8009e58:	2a00      	cmp	r2, #0
 8009e5a:	d1ef      	bne.n	8009e3c <quorem+0xf0>
 8009e5c:	3c01      	subs	r4, #1
 8009e5e:	e7ea      	b.n	8009e36 <quorem+0xea>
 8009e60:	2000      	movs	r0, #0
 8009e62:	e7ee      	b.n	8009e42 <quorem+0xf6>
 8009e64:	0000      	movs	r0, r0
	...

08009e68 <_dtoa_r>:
 8009e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	ec57 6b10 	vmov	r6, r7, d0
 8009e70:	b097      	sub	sp, #92	; 0x5c
 8009e72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e74:	9106      	str	r1, [sp, #24]
 8009e76:	4604      	mov	r4, r0
 8009e78:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8009e7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e80:	e9cd 6700 	strd	r6, r7, [sp]
 8009e84:	b93d      	cbnz	r5, 8009e96 <_dtoa_r+0x2e>
 8009e86:	2010      	movs	r0, #16
 8009e88:	f7ff f8f4 	bl	8009074 <malloc>
 8009e8c:	6260      	str	r0, [r4, #36]	; 0x24
 8009e8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e92:	6005      	str	r5, [r0, #0]
 8009e94:	60c5      	str	r5, [r0, #12]
 8009e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e98:	6819      	ldr	r1, [r3, #0]
 8009e9a:	b151      	cbz	r1, 8009eb2 <_dtoa_r+0x4a>
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	604a      	str	r2, [r1, #4]
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4093      	lsls	r3, r2
 8009ea4:	608b      	str	r3, [r1, #8]
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 ffb8 	bl	800ae1c <_Bfree>
 8009eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	1e3b      	subs	r3, r7, #0
 8009eb4:	bfbb      	ittet	lt
 8009eb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009eba:	9301      	strlt	r3, [sp, #4]
 8009ebc:	2300      	movge	r3, #0
 8009ebe:	2201      	movlt	r2, #1
 8009ec0:	bfac      	ite	ge
 8009ec2:	f8c8 3000 	strge.w	r3, [r8]
 8009ec6:	f8c8 2000 	strlt.w	r2, [r8]
 8009eca:	4baf      	ldr	r3, [pc, #700]	; (800a188 <_dtoa_r+0x320>)
 8009ecc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ed0:	ea33 0308 	bics.w	r3, r3, r8
 8009ed4:	d114      	bne.n	8009f00 <_dtoa_r+0x98>
 8009ed6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ed8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	9b00      	ldr	r3, [sp, #0]
 8009ee0:	b923      	cbnz	r3, 8009eec <_dtoa_r+0x84>
 8009ee2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f000 8542 	beq.w	800a970 <_dtoa_r+0xb08>
 8009eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a19c <_dtoa_r+0x334>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 8544 	beq.w	800a980 <_dtoa_r+0xb18>
 8009ef8:	f10b 0303 	add.w	r3, fp, #3
 8009efc:	f000 bd3e 	b.w	800a97c <_dtoa_r+0xb14>
 8009f00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f04:	2200      	movs	r2, #0
 8009f06:	2300      	movs	r3, #0
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	f7f6 fdf4 	bl	8000af8 <__aeabi_dcmpeq>
 8009f10:	4681      	mov	r9, r0
 8009f12:	b168      	cbz	r0, 8009f30 <_dtoa_r+0xc8>
 8009f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f16:	2301      	movs	r3, #1
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 8524 	beq.w	800a96a <_dtoa_r+0xb02>
 8009f22:	4b9a      	ldr	r3, [pc, #616]	; (800a18c <_dtoa_r+0x324>)
 8009f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f26:	f103 3bff 	add.w	fp, r3, #4294967295
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	f000 bd28 	b.w	800a980 <_dtoa_r+0xb18>
 8009f30:	aa14      	add	r2, sp, #80	; 0x50
 8009f32:	a915      	add	r1, sp, #84	; 0x54
 8009f34:	ec47 6b10 	vmov	d0, r6, r7
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f001 f9c8 	bl	800b2ce <__d2b>
 8009f3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f42:	9004      	str	r0, [sp, #16]
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	d07c      	beq.n	800a042 <_dtoa_r+0x1da>
 8009f48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009f50:	46b2      	mov	sl, r6
 8009f52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009f56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009f5e:	2200      	movs	r2, #0
 8009f60:	4b8b      	ldr	r3, [pc, #556]	; (800a190 <_dtoa_r+0x328>)
 8009f62:	4650      	mov	r0, sl
 8009f64:	4659      	mov	r1, fp
 8009f66:	f7f6 f9a7 	bl	80002b8 <__aeabi_dsub>
 8009f6a:	a381      	add	r3, pc, #516	; (adr r3, 800a170 <_dtoa_r+0x308>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7f6 fb5a 	bl	8000628 <__aeabi_dmul>
 8009f74:	a380      	add	r3, pc, #512	; (adr r3, 800a178 <_dtoa_r+0x310>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f99f 	bl	80002bc <__adddf3>
 8009f7e:	4606      	mov	r6, r0
 8009f80:	4628      	mov	r0, r5
 8009f82:	460f      	mov	r7, r1
 8009f84:	f7f6 fae6 	bl	8000554 <__aeabi_i2d>
 8009f88:	a37d      	add	r3, pc, #500	; (adr r3, 800a180 <_dtoa_r+0x318>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 fb4b 	bl	8000628 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 f98f 	bl	80002bc <__adddf3>
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460f      	mov	r7, r1
 8009fa2:	f7f6 fdf1 	bl	8000b88 <__aeabi_d2iz>
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4682      	mov	sl, r0
 8009faa:	2300      	movs	r3, #0
 8009fac:	4630      	mov	r0, r6
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 fdac 	bl	8000b0c <__aeabi_dcmplt>
 8009fb4:	b148      	cbz	r0, 8009fca <_dtoa_r+0x162>
 8009fb6:	4650      	mov	r0, sl
 8009fb8:	f7f6 facc 	bl	8000554 <__aeabi_i2d>
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	463b      	mov	r3, r7
 8009fc0:	f7f6 fd9a 	bl	8000af8 <__aeabi_dcmpeq>
 8009fc4:	b908      	cbnz	r0, 8009fca <_dtoa_r+0x162>
 8009fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fca:	f1ba 0f16 	cmp.w	sl, #22
 8009fce:	d859      	bhi.n	800a084 <_dtoa_r+0x21c>
 8009fd0:	4970      	ldr	r1, [pc, #448]	; (800a194 <_dtoa_r+0x32c>)
 8009fd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fde:	f7f6 fdb3 	bl	8000b48 <__aeabi_dcmpgt>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d050      	beq.n	800a088 <_dtoa_r+0x220>
 8009fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fea:	2300      	movs	r3, #0
 8009fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ff0:	1b5d      	subs	r5, r3, r5
 8009ff2:	f1b5 0801 	subs.w	r8, r5, #1
 8009ff6:	bf49      	itett	mi
 8009ff8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009ffc:	2300      	movpl	r3, #0
 8009ffe:	9305      	strmi	r3, [sp, #20]
 800a000:	f04f 0800 	movmi.w	r8, #0
 800a004:	bf58      	it	pl
 800a006:	9305      	strpl	r3, [sp, #20]
 800a008:	f1ba 0f00 	cmp.w	sl, #0
 800a00c:	db3e      	blt.n	800a08c <_dtoa_r+0x224>
 800a00e:	2300      	movs	r3, #0
 800a010:	44d0      	add	r8, sl
 800a012:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a016:	9307      	str	r3, [sp, #28]
 800a018:	9b06      	ldr	r3, [sp, #24]
 800a01a:	2b09      	cmp	r3, #9
 800a01c:	f200 8090 	bhi.w	800a140 <_dtoa_r+0x2d8>
 800a020:	2b05      	cmp	r3, #5
 800a022:	bfc4      	itt	gt
 800a024:	3b04      	subgt	r3, #4
 800a026:	9306      	strgt	r3, [sp, #24]
 800a028:	9b06      	ldr	r3, [sp, #24]
 800a02a:	f1a3 0302 	sub.w	r3, r3, #2
 800a02e:	bfcc      	ite	gt
 800a030:	2500      	movgt	r5, #0
 800a032:	2501      	movle	r5, #1
 800a034:	2b03      	cmp	r3, #3
 800a036:	f200 808f 	bhi.w	800a158 <_dtoa_r+0x2f0>
 800a03a:	e8df f003 	tbb	[pc, r3]
 800a03e:	7f7d      	.short	0x7f7d
 800a040:	7131      	.short	0x7131
 800a042:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a046:	441d      	add	r5, r3
 800a048:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a04c:	2820      	cmp	r0, #32
 800a04e:	dd13      	ble.n	800a078 <_dtoa_r+0x210>
 800a050:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a054:	9b00      	ldr	r3, [sp, #0]
 800a056:	fa08 f800 	lsl.w	r8, r8, r0
 800a05a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a05e:	fa23 f000 	lsr.w	r0, r3, r0
 800a062:	ea48 0000 	orr.w	r0, r8, r0
 800a066:	f7f6 fa65 	bl	8000534 <__aeabi_ui2d>
 800a06a:	2301      	movs	r3, #1
 800a06c:	4682      	mov	sl, r0
 800a06e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a072:	3d01      	subs	r5, #1
 800a074:	9313      	str	r3, [sp, #76]	; 0x4c
 800a076:	e772      	b.n	8009f5e <_dtoa_r+0xf6>
 800a078:	9b00      	ldr	r3, [sp, #0]
 800a07a:	f1c0 0020 	rsb	r0, r0, #32
 800a07e:	fa03 f000 	lsl.w	r0, r3, r0
 800a082:	e7f0      	b.n	800a066 <_dtoa_r+0x1fe>
 800a084:	2301      	movs	r3, #1
 800a086:	e7b1      	b.n	8009fec <_dtoa_r+0x184>
 800a088:	900f      	str	r0, [sp, #60]	; 0x3c
 800a08a:	e7b0      	b.n	8009fee <_dtoa_r+0x186>
 800a08c:	9b05      	ldr	r3, [sp, #20]
 800a08e:	eba3 030a 	sub.w	r3, r3, sl
 800a092:	9305      	str	r3, [sp, #20]
 800a094:	f1ca 0300 	rsb	r3, sl, #0
 800a098:	9307      	str	r3, [sp, #28]
 800a09a:	2300      	movs	r3, #0
 800a09c:	930e      	str	r3, [sp, #56]	; 0x38
 800a09e:	e7bb      	b.n	800a018 <_dtoa_r+0x1b0>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	dd59      	ble.n	800a15e <_dtoa_r+0x2f6>
 800a0aa:	9302      	str	r3, [sp, #8]
 800a0ac:	4699      	mov	r9, r3
 800a0ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	6072      	str	r2, [r6, #4]
 800a0b4:	2204      	movs	r2, #4
 800a0b6:	f102 0014 	add.w	r0, r2, #20
 800a0ba:	4298      	cmp	r0, r3
 800a0bc:	6871      	ldr	r1, [r6, #4]
 800a0be:	d953      	bls.n	800a168 <_dtoa_r+0x300>
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f000 fe77 	bl	800adb4 <_Balloc>
 800a0c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0c8:	6030      	str	r0, [r6, #0]
 800a0ca:	f1b9 0f0e 	cmp.w	r9, #14
 800a0ce:	f8d3 b000 	ldr.w	fp, [r3]
 800a0d2:	f200 80e6 	bhi.w	800a2a2 <_dtoa_r+0x43a>
 800a0d6:	2d00      	cmp	r5, #0
 800a0d8:	f000 80e3 	beq.w	800a2a2 <_dtoa_r+0x43a>
 800a0dc:	ed9d 7b00 	vldr	d7, [sp]
 800a0e0:	f1ba 0f00 	cmp.w	sl, #0
 800a0e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a0e8:	dd74      	ble.n	800a1d4 <_dtoa_r+0x36c>
 800a0ea:	4a2a      	ldr	r2, [pc, #168]	; (800a194 <_dtoa_r+0x32c>)
 800a0ec:	f00a 030f 	and.w	r3, sl, #15
 800a0f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0f4:	ed93 7b00 	vldr	d7, [r3]
 800a0f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a0fc:	06f0      	lsls	r0, r6, #27
 800a0fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a102:	d565      	bpl.n	800a1d0 <_dtoa_r+0x368>
 800a104:	4b24      	ldr	r3, [pc, #144]	; (800a198 <_dtoa_r+0x330>)
 800a106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a10a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a10e:	f7f6 fbb5 	bl	800087c <__aeabi_ddiv>
 800a112:	e9cd 0100 	strd	r0, r1, [sp]
 800a116:	f006 060f 	and.w	r6, r6, #15
 800a11a:	2503      	movs	r5, #3
 800a11c:	4f1e      	ldr	r7, [pc, #120]	; (800a198 <_dtoa_r+0x330>)
 800a11e:	e04c      	b.n	800a1ba <_dtoa_r+0x352>
 800a120:	2301      	movs	r3, #1
 800a122:	930a      	str	r3, [sp, #40]	; 0x28
 800a124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a126:	4453      	add	r3, sl
 800a128:	f103 0901 	add.w	r9, r3, #1
 800a12c:	9302      	str	r3, [sp, #8]
 800a12e:	464b      	mov	r3, r9
 800a130:	2b01      	cmp	r3, #1
 800a132:	bfb8      	it	lt
 800a134:	2301      	movlt	r3, #1
 800a136:	e7ba      	b.n	800a0ae <_dtoa_r+0x246>
 800a138:	2300      	movs	r3, #0
 800a13a:	e7b2      	b.n	800a0a2 <_dtoa_r+0x23a>
 800a13c:	2300      	movs	r3, #0
 800a13e:	e7f0      	b.n	800a122 <_dtoa_r+0x2ba>
 800a140:	2501      	movs	r5, #1
 800a142:	2300      	movs	r3, #0
 800a144:	9306      	str	r3, [sp, #24]
 800a146:	950a      	str	r5, [sp, #40]	; 0x28
 800a148:	f04f 33ff 	mov.w	r3, #4294967295
 800a14c:	9302      	str	r3, [sp, #8]
 800a14e:	4699      	mov	r9, r3
 800a150:	2200      	movs	r2, #0
 800a152:	2312      	movs	r3, #18
 800a154:	920b      	str	r2, [sp, #44]	; 0x2c
 800a156:	e7aa      	b.n	800a0ae <_dtoa_r+0x246>
 800a158:	2301      	movs	r3, #1
 800a15a:	930a      	str	r3, [sp, #40]	; 0x28
 800a15c:	e7f4      	b.n	800a148 <_dtoa_r+0x2e0>
 800a15e:	2301      	movs	r3, #1
 800a160:	9302      	str	r3, [sp, #8]
 800a162:	4699      	mov	r9, r3
 800a164:	461a      	mov	r2, r3
 800a166:	e7f5      	b.n	800a154 <_dtoa_r+0x2ec>
 800a168:	3101      	adds	r1, #1
 800a16a:	6071      	str	r1, [r6, #4]
 800a16c:	0052      	lsls	r2, r2, #1
 800a16e:	e7a2      	b.n	800a0b6 <_dtoa_r+0x24e>
 800a170:	636f4361 	.word	0x636f4361
 800a174:	3fd287a7 	.word	0x3fd287a7
 800a178:	8b60c8b3 	.word	0x8b60c8b3
 800a17c:	3fc68a28 	.word	0x3fc68a28
 800a180:	509f79fb 	.word	0x509f79fb
 800a184:	3fd34413 	.word	0x3fd34413
 800a188:	7ff00000 	.word	0x7ff00000
 800a18c:	080178ed 	.word	0x080178ed
 800a190:	3ff80000 	.word	0x3ff80000
 800a194:	080179a8 	.word	0x080179a8
 800a198:	08017980 	.word	0x08017980
 800a19c:	08017919 	.word	0x08017919
 800a1a0:	07f1      	lsls	r1, r6, #31
 800a1a2:	d508      	bpl.n	800a1b6 <_dtoa_r+0x34e>
 800a1a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ac:	f7f6 fa3c 	bl	8000628 <__aeabi_dmul>
 800a1b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1b4:	3501      	adds	r5, #1
 800a1b6:	1076      	asrs	r6, r6, #1
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	2e00      	cmp	r6, #0
 800a1bc:	d1f0      	bne.n	800a1a0 <_dtoa_r+0x338>
 800a1be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1c6:	f7f6 fb59 	bl	800087c <__aeabi_ddiv>
 800a1ca:	e9cd 0100 	strd	r0, r1, [sp]
 800a1ce:	e01a      	b.n	800a206 <_dtoa_r+0x39e>
 800a1d0:	2502      	movs	r5, #2
 800a1d2:	e7a3      	b.n	800a11c <_dtoa_r+0x2b4>
 800a1d4:	f000 80a0 	beq.w	800a318 <_dtoa_r+0x4b0>
 800a1d8:	f1ca 0600 	rsb	r6, sl, #0
 800a1dc:	4b9f      	ldr	r3, [pc, #636]	; (800a45c <_dtoa_r+0x5f4>)
 800a1de:	4fa0      	ldr	r7, [pc, #640]	; (800a460 <_dtoa_r+0x5f8>)
 800a1e0:	f006 020f 	and.w	r2, r6, #15
 800a1e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1f0:	f7f6 fa1a 	bl	8000628 <__aeabi_dmul>
 800a1f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a1f8:	1136      	asrs	r6, r6, #4
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	2502      	movs	r5, #2
 800a1fe:	2e00      	cmp	r6, #0
 800a200:	d17f      	bne.n	800a302 <_dtoa_r+0x49a>
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e1      	bne.n	800a1ca <_dtoa_r+0x362>
 800a206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 8087 	beq.w	800a31c <_dtoa_r+0x4b4>
 800a20e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a212:	2200      	movs	r2, #0
 800a214:	4b93      	ldr	r3, [pc, #588]	; (800a464 <_dtoa_r+0x5fc>)
 800a216:	4630      	mov	r0, r6
 800a218:	4639      	mov	r1, r7
 800a21a:	f7f6 fc77 	bl	8000b0c <__aeabi_dcmplt>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d07c      	beq.n	800a31c <_dtoa_r+0x4b4>
 800a222:	f1b9 0f00 	cmp.w	r9, #0
 800a226:	d079      	beq.n	800a31c <_dtoa_r+0x4b4>
 800a228:	9b02      	ldr	r3, [sp, #8]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	dd35      	ble.n	800a29a <_dtoa_r+0x432>
 800a22e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a232:	9308      	str	r3, [sp, #32]
 800a234:	4639      	mov	r1, r7
 800a236:	2200      	movs	r2, #0
 800a238:	4b8b      	ldr	r3, [pc, #556]	; (800a468 <_dtoa_r+0x600>)
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7f6 f9f4 	bl	8000628 <__aeabi_dmul>
 800a240:	e9cd 0100 	strd	r0, r1, [sp]
 800a244:	9f02      	ldr	r7, [sp, #8]
 800a246:	3501      	adds	r5, #1
 800a248:	4628      	mov	r0, r5
 800a24a:	f7f6 f983 	bl	8000554 <__aeabi_i2d>
 800a24e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a252:	f7f6 f9e9 	bl	8000628 <__aeabi_dmul>
 800a256:	2200      	movs	r2, #0
 800a258:	4b84      	ldr	r3, [pc, #528]	; (800a46c <_dtoa_r+0x604>)
 800a25a:	f7f6 f82f 	bl	80002bc <__adddf3>
 800a25e:	4605      	mov	r5, r0
 800a260:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a264:	2f00      	cmp	r7, #0
 800a266:	d15d      	bne.n	800a324 <_dtoa_r+0x4bc>
 800a268:	2200      	movs	r2, #0
 800a26a:	4b81      	ldr	r3, [pc, #516]	; (800a470 <_dtoa_r+0x608>)
 800a26c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a270:	f7f6 f822 	bl	80002b8 <__aeabi_dsub>
 800a274:	462a      	mov	r2, r5
 800a276:	4633      	mov	r3, r6
 800a278:	e9cd 0100 	strd	r0, r1, [sp]
 800a27c:	f7f6 fc64 	bl	8000b48 <__aeabi_dcmpgt>
 800a280:	2800      	cmp	r0, #0
 800a282:	f040 8288 	bne.w	800a796 <_dtoa_r+0x92e>
 800a286:	462a      	mov	r2, r5
 800a288:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a28c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a290:	f7f6 fc3c 	bl	8000b0c <__aeabi_dcmplt>
 800a294:	2800      	cmp	r0, #0
 800a296:	f040 827c 	bne.w	800a792 <_dtoa_r+0x92a>
 800a29a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a29e:	e9cd 2300 	strd	r2, r3, [sp]
 800a2a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f2c0 8150 	blt.w	800a54a <_dtoa_r+0x6e2>
 800a2aa:	f1ba 0f0e 	cmp.w	sl, #14
 800a2ae:	f300 814c 	bgt.w	800a54a <_dtoa_r+0x6e2>
 800a2b2:	4b6a      	ldr	r3, [pc, #424]	; (800a45c <_dtoa_r+0x5f4>)
 800a2b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a2b8:	ed93 7b00 	vldr	d7, [r3]
 800a2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a2c4:	f280 80d8 	bge.w	800a478 <_dtoa_r+0x610>
 800a2c8:	f1b9 0f00 	cmp.w	r9, #0
 800a2cc:	f300 80d4 	bgt.w	800a478 <_dtoa_r+0x610>
 800a2d0:	f040 825e 	bne.w	800a790 <_dtoa_r+0x928>
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4b66      	ldr	r3, [pc, #408]	; (800a470 <_dtoa_r+0x608>)
 800a2d8:	ec51 0b17 	vmov	r0, r1, d7
 800a2dc:	f7f6 f9a4 	bl	8000628 <__aeabi_dmul>
 800a2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2e4:	f7f6 fc26 	bl	8000b34 <__aeabi_dcmpge>
 800a2e8:	464f      	mov	r7, r9
 800a2ea:	464e      	mov	r6, r9
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	f040 8234 	bne.w	800a75a <_dtoa_r+0x8f2>
 800a2f2:	2331      	movs	r3, #49	; 0x31
 800a2f4:	f10b 0501 	add.w	r5, fp, #1
 800a2f8:	f88b 3000 	strb.w	r3, [fp]
 800a2fc:	f10a 0a01 	add.w	sl, sl, #1
 800a300:	e22f      	b.n	800a762 <_dtoa_r+0x8fa>
 800a302:	07f2      	lsls	r2, r6, #31
 800a304:	d505      	bpl.n	800a312 <_dtoa_r+0x4aa>
 800a306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a30a:	f7f6 f98d 	bl	8000628 <__aeabi_dmul>
 800a30e:	3501      	adds	r5, #1
 800a310:	2301      	movs	r3, #1
 800a312:	1076      	asrs	r6, r6, #1
 800a314:	3708      	adds	r7, #8
 800a316:	e772      	b.n	800a1fe <_dtoa_r+0x396>
 800a318:	2502      	movs	r5, #2
 800a31a:	e774      	b.n	800a206 <_dtoa_r+0x39e>
 800a31c:	f8cd a020 	str.w	sl, [sp, #32]
 800a320:	464f      	mov	r7, r9
 800a322:	e791      	b.n	800a248 <_dtoa_r+0x3e0>
 800a324:	4b4d      	ldr	r3, [pc, #308]	; (800a45c <_dtoa_r+0x5f4>)
 800a326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a32a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a330:	2b00      	cmp	r3, #0
 800a332:	d047      	beq.n	800a3c4 <_dtoa_r+0x55c>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	2000      	movs	r0, #0
 800a33a:	494e      	ldr	r1, [pc, #312]	; (800a474 <_dtoa_r+0x60c>)
 800a33c:	f7f6 fa9e 	bl	800087c <__aeabi_ddiv>
 800a340:	462a      	mov	r2, r5
 800a342:	4633      	mov	r3, r6
 800a344:	f7f5 ffb8 	bl	80002b8 <__aeabi_dsub>
 800a348:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a34c:	465d      	mov	r5, fp
 800a34e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a352:	f7f6 fc19 	bl	8000b88 <__aeabi_d2iz>
 800a356:	4606      	mov	r6, r0
 800a358:	f7f6 f8fc 	bl	8000554 <__aeabi_i2d>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a364:	f7f5 ffa8 	bl	80002b8 <__aeabi_dsub>
 800a368:	3630      	adds	r6, #48	; 0x30
 800a36a:	f805 6b01 	strb.w	r6, [r5], #1
 800a36e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a372:	e9cd 0100 	strd	r0, r1, [sp]
 800a376:	f7f6 fbc9 	bl	8000b0c <__aeabi_dcmplt>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d163      	bne.n	800a446 <_dtoa_r+0x5de>
 800a37e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a382:	2000      	movs	r0, #0
 800a384:	4937      	ldr	r1, [pc, #220]	; (800a464 <_dtoa_r+0x5fc>)
 800a386:	f7f5 ff97 	bl	80002b8 <__aeabi_dsub>
 800a38a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a38e:	f7f6 fbbd 	bl	8000b0c <__aeabi_dcmplt>
 800a392:	2800      	cmp	r0, #0
 800a394:	f040 80b7 	bne.w	800a506 <_dtoa_r+0x69e>
 800a398:	eba5 030b 	sub.w	r3, r5, fp
 800a39c:	429f      	cmp	r7, r3
 800a39e:	f77f af7c 	ble.w	800a29a <_dtoa_r+0x432>
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	4b30      	ldr	r3, [pc, #192]	; (800a468 <_dtoa_r+0x600>)
 800a3a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3aa:	f7f6 f93d 	bl	8000628 <__aeabi_dmul>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a3b4:	4b2c      	ldr	r3, [pc, #176]	; (800a468 <_dtoa_r+0x600>)
 800a3b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3ba:	f7f6 f935 	bl	8000628 <__aeabi_dmul>
 800a3be:	e9cd 0100 	strd	r0, r1, [sp]
 800a3c2:	e7c4      	b.n	800a34e <_dtoa_r+0x4e6>
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	4633      	mov	r3, r6
 800a3c8:	f7f6 f92e 	bl	8000628 <__aeabi_dmul>
 800a3cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a3d0:	eb0b 0507 	add.w	r5, fp, r7
 800a3d4:	465e      	mov	r6, fp
 800a3d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3da:	f7f6 fbd5 	bl	8000b88 <__aeabi_d2iz>
 800a3de:	4607      	mov	r7, r0
 800a3e0:	f7f6 f8b8 	bl	8000554 <__aeabi_i2d>
 800a3e4:	3730      	adds	r7, #48	; 0x30
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3ee:	f7f5 ff63 	bl	80002b8 <__aeabi_dsub>
 800a3f2:	f806 7b01 	strb.w	r7, [r6], #1
 800a3f6:	42ae      	cmp	r6, r5
 800a3f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a3fc:	f04f 0200 	mov.w	r2, #0
 800a400:	d126      	bne.n	800a450 <_dtoa_r+0x5e8>
 800a402:	4b1c      	ldr	r3, [pc, #112]	; (800a474 <_dtoa_r+0x60c>)
 800a404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a408:	f7f5 ff58 	bl	80002bc <__adddf3>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a414:	f7f6 fb98 	bl	8000b48 <__aeabi_dcmpgt>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d174      	bne.n	800a506 <_dtoa_r+0x69e>
 800a41c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a420:	2000      	movs	r0, #0
 800a422:	4914      	ldr	r1, [pc, #80]	; (800a474 <_dtoa_r+0x60c>)
 800a424:	f7f5 ff48 	bl	80002b8 <__aeabi_dsub>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a430:	f7f6 fb6c 	bl	8000b0c <__aeabi_dcmplt>
 800a434:	2800      	cmp	r0, #0
 800a436:	f43f af30 	beq.w	800a29a <_dtoa_r+0x432>
 800a43a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a43e:	2b30      	cmp	r3, #48	; 0x30
 800a440:	f105 32ff 	add.w	r2, r5, #4294967295
 800a444:	d002      	beq.n	800a44c <_dtoa_r+0x5e4>
 800a446:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a44a:	e04a      	b.n	800a4e2 <_dtoa_r+0x67a>
 800a44c:	4615      	mov	r5, r2
 800a44e:	e7f4      	b.n	800a43a <_dtoa_r+0x5d2>
 800a450:	4b05      	ldr	r3, [pc, #20]	; (800a468 <_dtoa_r+0x600>)
 800a452:	f7f6 f8e9 	bl	8000628 <__aeabi_dmul>
 800a456:	e9cd 0100 	strd	r0, r1, [sp]
 800a45a:	e7bc      	b.n	800a3d6 <_dtoa_r+0x56e>
 800a45c:	080179a8 	.word	0x080179a8
 800a460:	08017980 	.word	0x08017980
 800a464:	3ff00000 	.word	0x3ff00000
 800a468:	40240000 	.word	0x40240000
 800a46c:	401c0000 	.word	0x401c0000
 800a470:	40140000 	.word	0x40140000
 800a474:	3fe00000 	.word	0x3fe00000
 800a478:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a47c:	465d      	mov	r5, fp
 800a47e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a482:	4630      	mov	r0, r6
 800a484:	4639      	mov	r1, r7
 800a486:	f7f6 f9f9 	bl	800087c <__aeabi_ddiv>
 800a48a:	f7f6 fb7d 	bl	8000b88 <__aeabi_d2iz>
 800a48e:	4680      	mov	r8, r0
 800a490:	f7f6 f860 	bl	8000554 <__aeabi_i2d>
 800a494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a498:	f7f6 f8c6 	bl	8000628 <__aeabi_dmul>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a4a8:	f7f5 ff06 	bl	80002b8 <__aeabi_dsub>
 800a4ac:	f805 6b01 	strb.w	r6, [r5], #1
 800a4b0:	eba5 060b 	sub.w	r6, r5, fp
 800a4b4:	45b1      	cmp	r9, r6
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	d139      	bne.n	800a530 <_dtoa_r+0x6c8>
 800a4bc:	f7f5 fefe 	bl	80002bc <__adddf3>
 800a4c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	460f      	mov	r7, r1
 800a4c8:	f7f6 fb3e 	bl	8000b48 <__aeabi_dcmpgt>
 800a4cc:	b9c8      	cbnz	r0, 800a502 <_dtoa_r+0x69a>
 800a4ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	f7f6 fb0f 	bl	8000af8 <__aeabi_dcmpeq>
 800a4da:	b110      	cbz	r0, 800a4e2 <_dtoa_r+0x67a>
 800a4dc:	f018 0f01 	tst.w	r8, #1
 800a4e0:	d10f      	bne.n	800a502 <_dtoa_r+0x69a>
 800a4e2:	9904      	ldr	r1, [sp, #16]
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 fc99 	bl	800ae1c <_Bfree>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4ee:	702b      	strb	r3, [r5, #0]
 800a4f0:	f10a 0301 	add.w	r3, sl, #1
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 8241 	beq.w	800a980 <_dtoa_r+0xb18>
 800a4fe:	601d      	str	r5, [r3, #0]
 800a500:	e23e      	b.n	800a980 <_dtoa_r+0xb18>
 800a502:	f8cd a020 	str.w	sl, [sp, #32]
 800a506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a50a:	2a39      	cmp	r2, #57	; 0x39
 800a50c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a510:	d108      	bne.n	800a524 <_dtoa_r+0x6bc>
 800a512:	459b      	cmp	fp, r3
 800a514:	d10a      	bne.n	800a52c <_dtoa_r+0x6c4>
 800a516:	9b08      	ldr	r3, [sp, #32]
 800a518:	3301      	adds	r3, #1
 800a51a:	9308      	str	r3, [sp, #32]
 800a51c:	2330      	movs	r3, #48	; 0x30
 800a51e:	f88b 3000 	strb.w	r3, [fp]
 800a522:	465b      	mov	r3, fp
 800a524:	781a      	ldrb	r2, [r3, #0]
 800a526:	3201      	adds	r2, #1
 800a528:	701a      	strb	r2, [r3, #0]
 800a52a:	e78c      	b.n	800a446 <_dtoa_r+0x5de>
 800a52c:	461d      	mov	r5, r3
 800a52e:	e7ea      	b.n	800a506 <_dtoa_r+0x69e>
 800a530:	2200      	movs	r2, #0
 800a532:	4b9b      	ldr	r3, [pc, #620]	; (800a7a0 <_dtoa_r+0x938>)
 800a534:	f7f6 f878 	bl	8000628 <__aeabi_dmul>
 800a538:	2200      	movs	r2, #0
 800a53a:	2300      	movs	r3, #0
 800a53c:	4606      	mov	r6, r0
 800a53e:	460f      	mov	r7, r1
 800a540:	f7f6 fada 	bl	8000af8 <__aeabi_dcmpeq>
 800a544:	2800      	cmp	r0, #0
 800a546:	d09a      	beq.n	800a47e <_dtoa_r+0x616>
 800a548:	e7cb      	b.n	800a4e2 <_dtoa_r+0x67a>
 800a54a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a54c:	2a00      	cmp	r2, #0
 800a54e:	f000 808b 	beq.w	800a668 <_dtoa_r+0x800>
 800a552:	9a06      	ldr	r2, [sp, #24]
 800a554:	2a01      	cmp	r2, #1
 800a556:	dc6e      	bgt.n	800a636 <_dtoa_r+0x7ce>
 800a558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a55a:	2a00      	cmp	r2, #0
 800a55c:	d067      	beq.n	800a62e <_dtoa_r+0x7c6>
 800a55e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a562:	9f07      	ldr	r7, [sp, #28]
 800a564:	9d05      	ldr	r5, [sp, #20]
 800a566:	9a05      	ldr	r2, [sp, #20]
 800a568:	2101      	movs	r1, #1
 800a56a:	441a      	add	r2, r3
 800a56c:	4620      	mov	r0, r4
 800a56e:	9205      	str	r2, [sp, #20]
 800a570:	4498      	add	r8, r3
 800a572:	f000 fcf3 	bl	800af5c <__i2b>
 800a576:	4606      	mov	r6, r0
 800a578:	2d00      	cmp	r5, #0
 800a57a:	dd0c      	ble.n	800a596 <_dtoa_r+0x72e>
 800a57c:	f1b8 0f00 	cmp.w	r8, #0
 800a580:	dd09      	ble.n	800a596 <_dtoa_r+0x72e>
 800a582:	4545      	cmp	r5, r8
 800a584:	9a05      	ldr	r2, [sp, #20]
 800a586:	462b      	mov	r3, r5
 800a588:	bfa8      	it	ge
 800a58a:	4643      	movge	r3, r8
 800a58c:	1ad2      	subs	r2, r2, r3
 800a58e:	9205      	str	r2, [sp, #20]
 800a590:	1aed      	subs	r5, r5, r3
 800a592:	eba8 0803 	sub.w	r8, r8, r3
 800a596:	9b07      	ldr	r3, [sp, #28]
 800a598:	b1eb      	cbz	r3, 800a5d6 <_dtoa_r+0x76e>
 800a59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d067      	beq.n	800a670 <_dtoa_r+0x808>
 800a5a0:	b18f      	cbz	r7, 800a5c6 <_dtoa_r+0x75e>
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	463a      	mov	r2, r7
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f000 fd78 	bl	800b09c <__pow5mult>
 800a5ac:	9a04      	ldr	r2, [sp, #16]
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 fcdb 	bl	800af6e <__multiply>
 800a5b8:	9904      	ldr	r1, [sp, #16]
 800a5ba:	9008      	str	r0, [sp, #32]
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f000 fc2d 	bl	800ae1c <_Bfree>
 800a5c2:	9b08      	ldr	r3, [sp, #32]
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	9b07      	ldr	r3, [sp, #28]
 800a5c8:	1bda      	subs	r2, r3, r7
 800a5ca:	d004      	beq.n	800a5d6 <_dtoa_r+0x76e>
 800a5cc:	9904      	ldr	r1, [sp, #16]
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 fd64 	bl	800b09c <__pow5mult>
 800a5d4:	9004      	str	r0, [sp, #16]
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 fcbf 	bl	800af5c <__i2b>
 800a5de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 81d0 	beq.w	800a988 <_dtoa_r+0xb20>
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	4601      	mov	r1, r0
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 fd55 	bl	800b09c <__pow5mult>
 800a5f2:	9b06      	ldr	r3, [sp, #24]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	dc40      	bgt.n	800a67c <_dtoa_r+0x814>
 800a5fa:	9b00      	ldr	r3, [sp, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d139      	bne.n	800a674 <_dtoa_r+0x80c>
 800a600:	9b01      	ldr	r3, [sp, #4]
 800a602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a606:	2b00      	cmp	r3, #0
 800a608:	d136      	bne.n	800a678 <_dtoa_r+0x810>
 800a60a:	9b01      	ldr	r3, [sp, #4]
 800a60c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a610:	0d1b      	lsrs	r3, r3, #20
 800a612:	051b      	lsls	r3, r3, #20
 800a614:	b12b      	cbz	r3, 800a622 <_dtoa_r+0x7ba>
 800a616:	9b05      	ldr	r3, [sp, #20]
 800a618:	3301      	adds	r3, #1
 800a61a:	9305      	str	r3, [sp, #20]
 800a61c:	f108 0801 	add.w	r8, r8, #1
 800a620:	2301      	movs	r3, #1
 800a622:	9307      	str	r3, [sp, #28]
 800a624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a626:	2b00      	cmp	r3, #0
 800a628:	d12a      	bne.n	800a680 <_dtoa_r+0x818>
 800a62a:	2001      	movs	r0, #1
 800a62c:	e030      	b.n	800a690 <_dtoa_r+0x828>
 800a62e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a630:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a634:	e795      	b.n	800a562 <_dtoa_r+0x6fa>
 800a636:	9b07      	ldr	r3, [sp, #28]
 800a638:	f109 37ff 	add.w	r7, r9, #4294967295
 800a63c:	42bb      	cmp	r3, r7
 800a63e:	bfbf      	itttt	lt
 800a640:	9b07      	ldrlt	r3, [sp, #28]
 800a642:	9707      	strlt	r7, [sp, #28]
 800a644:	1afa      	sublt	r2, r7, r3
 800a646:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a648:	bfbb      	ittet	lt
 800a64a:	189b      	addlt	r3, r3, r2
 800a64c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a64e:	1bdf      	subge	r7, r3, r7
 800a650:	2700      	movlt	r7, #0
 800a652:	f1b9 0f00 	cmp.w	r9, #0
 800a656:	bfb5      	itete	lt
 800a658:	9b05      	ldrlt	r3, [sp, #20]
 800a65a:	9d05      	ldrge	r5, [sp, #20]
 800a65c:	eba3 0509 	sublt.w	r5, r3, r9
 800a660:	464b      	movge	r3, r9
 800a662:	bfb8      	it	lt
 800a664:	2300      	movlt	r3, #0
 800a666:	e77e      	b.n	800a566 <_dtoa_r+0x6fe>
 800a668:	9f07      	ldr	r7, [sp, #28]
 800a66a:	9d05      	ldr	r5, [sp, #20]
 800a66c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a66e:	e783      	b.n	800a578 <_dtoa_r+0x710>
 800a670:	9a07      	ldr	r2, [sp, #28]
 800a672:	e7ab      	b.n	800a5cc <_dtoa_r+0x764>
 800a674:	2300      	movs	r3, #0
 800a676:	e7d4      	b.n	800a622 <_dtoa_r+0x7ba>
 800a678:	9b00      	ldr	r3, [sp, #0]
 800a67a:	e7d2      	b.n	800a622 <_dtoa_r+0x7ba>
 800a67c:	2300      	movs	r3, #0
 800a67e:	9307      	str	r3, [sp, #28]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a686:	6918      	ldr	r0, [r3, #16]
 800a688:	f000 fc1a 	bl	800aec0 <__hi0bits>
 800a68c:	f1c0 0020 	rsb	r0, r0, #32
 800a690:	4440      	add	r0, r8
 800a692:	f010 001f 	ands.w	r0, r0, #31
 800a696:	d047      	beq.n	800a728 <_dtoa_r+0x8c0>
 800a698:	f1c0 0320 	rsb	r3, r0, #32
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	dd3b      	ble.n	800a718 <_dtoa_r+0x8b0>
 800a6a0:	9b05      	ldr	r3, [sp, #20]
 800a6a2:	f1c0 001c 	rsb	r0, r0, #28
 800a6a6:	4403      	add	r3, r0
 800a6a8:	9305      	str	r3, [sp, #20]
 800a6aa:	4405      	add	r5, r0
 800a6ac:	4480      	add	r8, r0
 800a6ae:	9b05      	ldr	r3, [sp, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	dd05      	ble.n	800a6c0 <_dtoa_r+0x858>
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	9904      	ldr	r1, [sp, #16]
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f000 fd3d 	bl	800b138 <__lshift>
 800a6be:	9004      	str	r0, [sp, #16]
 800a6c0:	f1b8 0f00 	cmp.w	r8, #0
 800a6c4:	dd05      	ble.n	800a6d2 <_dtoa_r+0x86a>
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 fd34 	bl	800b138 <__lshift>
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6d4:	b353      	cbz	r3, 800a72c <_dtoa_r+0x8c4>
 800a6d6:	4639      	mov	r1, r7
 800a6d8:	9804      	ldr	r0, [sp, #16]
 800a6da:	f000 fd81 	bl	800b1e0 <__mcmp>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	da24      	bge.n	800a72c <_dtoa_r+0x8c4>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	220a      	movs	r2, #10
 800a6e6:	9904      	ldr	r1, [sp, #16]
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 fbae 	bl	800ae4a <__multadd>
 800a6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f0:	9004      	str	r0, [sp, #16]
 800a6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 814d 	beq.w	800a996 <_dtoa_r+0xb2e>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4631      	mov	r1, r6
 800a700:	220a      	movs	r2, #10
 800a702:	4620      	mov	r0, r4
 800a704:	f000 fba1 	bl	800ae4a <__multadd>
 800a708:	9b02      	ldr	r3, [sp, #8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	4606      	mov	r6, r0
 800a70e:	dc4f      	bgt.n	800a7b0 <_dtoa_r+0x948>
 800a710:	9b06      	ldr	r3, [sp, #24]
 800a712:	2b02      	cmp	r3, #2
 800a714:	dd4c      	ble.n	800a7b0 <_dtoa_r+0x948>
 800a716:	e011      	b.n	800a73c <_dtoa_r+0x8d4>
 800a718:	d0c9      	beq.n	800a6ae <_dtoa_r+0x846>
 800a71a:	9a05      	ldr	r2, [sp, #20]
 800a71c:	331c      	adds	r3, #28
 800a71e:	441a      	add	r2, r3
 800a720:	9205      	str	r2, [sp, #20]
 800a722:	441d      	add	r5, r3
 800a724:	4498      	add	r8, r3
 800a726:	e7c2      	b.n	800a6ae <_dtoa_r+0x846>
 800a728:	4603      	mov	r3, r0
 800a72a:	e7f6      	b.n	800a71a <_dtoa_r+0x8b2>
 800a72c:	f1b9 0f00 	cmp.w	r9, #0
 800a730:	dc38      	bgt.n	800a7a4 <_dtoa_r+0x93c>
 800a732:	9b06      	ldr	r3, [sp, #24]
 800a734:	2b02      	cmp	r3, #2
 800a736:	dd35      	ble.n	800a7a4 <_dtoa_r+0x93c>
 800a738:	f8cd 9008 	str.w	r9, [sp, #8]
 800a73c:	9b02      	ldr	r3, [sp, #8]
 800a73e:	b963      	cbnz	r3, 800a75a <_dtoa_r+0x8f2>
 800a740:	4639      	mov	r1, r7
 800a742:	2205      	movs	r2, #5
 800a744:	4620      	mov	r0, r4
 800a746:	f000 fb80 	bl	800ae4a <__multadd>
 800a74a:	4601      	mov	r1, r0
 800a74c:	4607      	mov	r7, r0
 800a74e:	9804      	ldr	r0, [sp, #16]
 800a750:	f000 fd46 	bl	800b1e0 <__mcmp>
 800a754:	2800      	cmp	r0, #0
 800a756:	f73f adcc 	bgt.w	800a2f2 <_dtoa_r+0x48a>
 800a75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a75c:	465d      	mov	r5, fp
 800a75e:	ea6f 0a03 	mvn.w	sl, r3
 800a762:	f04f 0900 	mov.w	r9, #0
 800a766:	4639      	mov	r1, r7
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fb57 	bl	800ae1c <_Bfree>
 800a76e:	2e00      	cmp	r6, #0
 800a770:	f43f aeb7 	beq.w	800a4e2 <_dtoa_r+0x67a>
 800a774:	f1b9 0f00 	cmp.w	r9, #0
 800a778:	d005      	beq.n	800a786 <_dtoa_r+0x91e>
 800a77a:	45b1      	cmp	r9, r6
 800a77c:	d003      	beq.n	800a786 <_dtoa_r+0x91e>
 800a77e:	4649      	mov	r1, r9
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fb4b 	bl	800ae1c <_Bfree>
 800a786:	4631      	mov	r1, r6
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 fb47 	bl	800ae1c <_Bfree>
 800a78e:	e6a8      	b.n	800a4e2 <_dtoa_r+0x67a>
 800a790:	2700      	movs	r7, #0
 800a792:	463e      	mov	r6, r7
 800a794:	e7e1      	b.n	800a75a <_dtoa_r+0x8f2>
 800a796:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a79a:	463e      	mov	r6, r7
 800a79c:	e5a9      	b.n	800a2f2 <_dtoa_r+0x48a>
 800a79e:	bf00      	nop
 800a7a0:	40240000 	.word	0x40240000
 800a7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 80fa 	beq.w	800a9a4 <_dtoa_r+0xb3c>
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	dd05      	ble.n	800a7c0 <_dtoa_r+0x958>
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 fcbd 	bl	800b138 <__lshift>
 800a7be:	4606      	mov	r6, r0
 800a7c0:	9b07      	ldr	r3, [sp, #28]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d04c      	beq.n	800a860 <_dtoa_r+0x9f8>
 800a7c6:	6871      	ldr	r1, [r6, #4]
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 faf3 	bl	800adb4 <_Balloc>
 800a7ce:	6932      	ldr	r2, [r6, #16]
 800a7d0:	3202      	adds	r2, #2
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	0092      	lsls	r2, r2, #2
 800a7d6:	f106 010c 	add.w	r1, r6, #12
 800a7da:	300c      	adds	r0, #12
 800a7dc:	f7fe fc52 	bl	8009084 <memcpy>
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 fca7 	bl	800b138 <__lshift>
 800a7ea:	9b00      	ldr	r3, [sp, #0]
 800a7ec:	f8cd b014 	str.w	fp, [sp, #20]
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	46b1      	mov	r9, r6
 800a7f6:	9307      	str	r3, [sp, #28]
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	9804      	ldr	r0, [sp, #16]
 800a7fe:	f7ff faa5 	bl	8009d4c <quorem>
 800a802:	4649      	mov	r1, r9
 800a804:	4605      	mov	r5, r0
 800a806:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a80a:	9804      	ldr	r0, [sp, #16]
 800a80c:	f000 fce8 	bl	800b1e0 <__mcmp>
 800a810:	4632      	mov	r2, r6
 800a812:	9000      	str	r0, [sp, #0]
 800a814:	4639      	mov	r1, r7
 800a816:	4620      	mov	r0, r4
 800a818:	f000 fcfc 	bl	800b214 <__mdiff>
 800a81c:	68c3      	ldr	r3, [r0, #12]
 800a81e:	4602      	mov	r2, r0
 800a820:	bb03      	cbnz	r3, 800a864 <_dtoa_r+0x9fc>
 800a822:	4601      	mov	r1, r0
 800a824:	9008      	str	r0, [sp, #32]
 800a826:	9804      	ldr	r0, [sp, #16]
 800a828:	f000 fcda 	bl	800b1e0 <__mcmp>
 800a82c:	9a08      	ldr	r2, [sp, #32]
 800a82e:	4603      	mov	r3, r0
 800a830:	4611      	mov	r1, r2
 800a832:	4620      	mov	r0, r4
 800a834:	9308      	str	r3, [sp, #32]
 800a836:	f000 faf1 	bl	800ae1c <_Bfree>
 800a83a:	9b08      	ldr	r3, [sp, #32]
 800a83c:	b9a3      	cbnz	r3, 800a868 <_dtoa_r+0xa00>
 800a83e:	9a06      	ldr	r2, [sp, #24]
 800a840:	b992      	cbnz	r2, 800a868 <_dtoa_r+0xa00>
 800a842:	9a07      	ldr	r2, [sp, #28]
 800a844:	b982      	cbnz	r2, 800a868 <_dtoa_r+0xa00>
 800a846:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a84a:	d029      	beq.n	800a8a0 <_dtoa_r+0xa38>
 800a84c:	9b00      	ldr	r3, [sp, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	dd01      	ble.n	800a856 <_dtoa_r+0x9ee>
 800a852:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a856:	9b05      	ldr	r3, [sp, #20]
 800a858:	1c5d      	adds	r5, r3, #1
 800a85a:	f883 8000 	strb.w	r8, [r3]
 800a85e:	e782      	b.n	800a766 <_dtoa_r+0x8fe>
 800a860:	4630      	mov	r0, r6
 800a862:	e7c2      	b.n	800a7ea <_dtoa_r+0x982>
 800a864:	2301      	movs	r3, #1
 800a866:	e7e3      	b.n	800a830 <_dtoa_r+0x9c8>
 800a868:	9a00      	ldr	r2, [sp, #0]
 800a86a:	2a00      	cmp	r2, #0
 800a86c:	db04      	blt.n	800a878 <_dtoa_r+0xa10>
 800a86e:	d125      	bne.n	800a8bc <_dtoa_r+0xa54>
 800a870:	9a06      	ldr	r2, [sp, #24]
 800a872:	bb1a      	cbnz	r2, 800a8bc <_dtoa_r+0xa54>
 800a874:	9a07      	ldr	r2, [sp, #28]
 800a876:	bb0a      	cbnz	r2, 800a8bc <_dtoa_r+0xa54>
 800a878:	2b00      	cmp	r3, #0
 800a87a:	ddec      	ble.n	800a856 <_dtoa_r+0x9ee>
 800a87c:	2201      	movs	r2, #1
 800a87e:	9904      	ldr	r1, [sp, #16]
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fc59 	bl	800b138 <__lshift>
 800a886:	4639      	mov	r1, r7
 800a888:	9004      	str	r0, [sp, #16]
 800a88a:	f000 fca9 	bl	800b1e0 <__mcmp>
 800a88e:	2800      	cmp	r0, #0
 800a890:	dc03      	bgt.n	800a89a <_dtoa_r+0xa32>
 800a892:	d1e0      	bne.n	800a856 <_dtoa_r+0x9ee>
 800a894:	f018 0f01 	tst.w	r8, #1
 800a898:	d0dd      	beq.n	800a856 <_dtoa_r+0x9ee>
 800a89a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a89e:	d1d8      	bne.n	800a852 <_dtoa_r+0x9ea>
 800a8a0:	9b05      	ldr	r3, [sp, #20]
 800a8a2:	9a05      	ldr	r2, [sp, #20]
 800a8a4:	1c5d      	adds	r5, r3, #1
 800a8a6:	2339      	movs	r3, #57	; 0x39
 800a8a8:	7013      	strb	r3, [r2, #0]
 800a8aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8ae:	2b39      	cmp	r3, #57	; 0x39
 800a8b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a8b4:	d04f      	beq.n	800a956 <_dtoa_r+0xaee>
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	7013      	strb	r3, [r2, #0]
 800a8ba:	e754      	b.n	800a766 <_dtoa_r+0x8fe>
 800a8bc:	9a05      	ldr	r2, [sp, #20]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f102 0501 	add.w	r5, r2, #1
 800a8c4:	dd06      	ble.n	800a8d4 <_dtoa_r+0xa6c>
 800a8c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a8ca:	d0e9      	beq.n	800a8a0 <_dtoa_r+0xa38>
 800a8cc:	f108 0801 	add.w	r8, r8, #1
 800a8d0:	9b05      	ldr	r3, [sp, #20]
 800a8d2:	e7c2      	b.n	800a85a <_dtoa_r+0x9f2>
 800a8d4:	9a02      	ldr	r2, [sp, #8]
 800a8d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a8da:	eba5 030b 	sub.w	r3, r5, fp
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d021      	beq.n	800a926 <_dtoa_r+0xabe>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	220a      	movs	r2, #10
 800a8e6:	9904      	ldr	r1, [sp, #16]
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 faae 	bl	800ae4a <__multadd>
 800a8ee:	45b1      	cmp	r9, r6
 800a8f0:	9004      	str	r0, [sp, #16]
 800a8f2:	f04f 0300 	mov.w	r3, #0
 800a8f6:	f04f 020a 	mov.w	r2, #10
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	d105      	bne.n	800a90c <_dtoa_r+0xaa4>
 800a900:	f000 faa3 	bl	800ae4a <__multadd>
 800a904:	4681      	mov	r9, r0
 800a906:	4606      	mov	r6, r0
 800a908:	9505      	str	r5, [sp, #20]
 800a90a:	e776      	b.n	800a7fa <_dtoa_r+0x992>
 800a90c:	f000 fa9d 	bl	800ae4a <__multadd>
 800a910:	4631      	mov	r1, r6
 800a912:	4681      	mov	r9, r0
 800a914:	2300      	movs	r3, #0
 800a916:	220a      	movs	r2, #10
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 fa96 	bl	800ae4a <__multadd>
 800a91e:	4606      	mov	r6, r0
 800a920:	e7f2      	b.n	800a908 <_dtoa_r+0xaa0>
 800a922:	f04f 0900 	mov.w	r9, #0
 800a926:	2201      	movs	r2, #1
 800a928:	9904      	ldr	r1, [sp, #16]
 800a92a:	4620      	mov	r0, r4
 800a92c:	f000 fc04 	bl	800b138 <__lshift>
 800a930:	4639      	mov	r1, r7
 800a932:	9004      	str	r0, [sp, #16]
 800a934:	f000 fc54 	bl	800b1e0 <__mcmp>
 800a938:	2800      	cmp	r0, #0
 800a93a:	dcb6      	bgt.n	800a8aa <_dtoa_r+0xa42>
 800a93c:	d102      	bne.n	800a944 <_dtoa_r+0xadc>
 800a93e:	f018 0f01 	tst.w	r8, #1
 800a942:	d1b2      	bne.n	800a8aa <_dtoa_r+0xa42>
 800a944:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a948:	2b30      	cmp	r3, #48	; 0x30
 800a94a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a94e:	f47f af0a 	bne.w	800a766 <_dtoa_r+0x8fe>
 800a952:	4615      	mov	r5, r2
 800a954:	e7f6      	b.n	800a944 <_dtoa_r+0xadc>
 800a956:	4593      	cmp	fp, r2
 800a958:	d105      	bne.n	800a966 <_dtoa_r+0xafe>
 800a95a:	2331      	movs	r3, #49	; 0x31
 800a95c:	f10a 0a01 	add.w	sl, sl, #1
 800a960:	f88b 3000 	strb.w	r3, [fp]
 800a964:	e6ff      	b.n	800a766 <_dtoa_r+0x8fe>
 800a966:	4615      	mov	r5, r2
 800a968:	e79f      	b.n	800a8aa <_dtoa_r+0xa42>
 800a96a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a9d0 <_dtoa_r+0xb68>
 800a96e:	e007      	b.n	800a980 <_dtoa_r+0xb18>
 800a970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a972:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a9d4 <_dtoa_r+0xb6c>
 800a976:	b11b      	cbz	r3, 800a980 <_dtoa_r+0xb18>
 800a978:	f10b 0308 	add.w	r3, fp, #8
 800a97c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	4658      	mov	r0, fp
 800a982:	b017      	add	sp, #92	; 0x5c
 800a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a988:	9b06      	ldr	r3, [sp, #24]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	f77f ae35 	ble.w	800a5fa <_dtoa_r+0x792>
 800a990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a992:	9307      	str	r3, [sp, #28]
 800a994:	e649      	b.n	800a62a <_dtoa_r+0x7c2>
 800a996:	9b02      	ldr	r3, [sp, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	dc03      	bgt.n	800a9a4 <_dtoa_r+0xb3c>
 800a99c:	9b06      	ldr	r3, [sp, #24]
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	f73f aecc 	bgt.w	800a73c <_dtoa_r+0x8d4>
 800a9a4:	465d      	mov	r5, fp
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	9804      	ldr	r0, [sp, #16]
 800a9aa:	f7ff f9cf 	bl	8009d4c <quorem>
 800a9ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a9b2:	f805 8b01 	strb.w	r8, [r5], #1
 800a9b6:	9a02      	ldr	r2, [sp, #8]
 800a9b8:	eba5 030b 	sub.w	r3, r5, fp
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	ddb0      	ble.n	800a922 <_dtoa_r+0xaba>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	220a      	movs	r2, #10
 800a9c4:	9904      	ldr	r1, [sp, #16]
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 fa3f 	bl	800ae4a <__multadd>
 800a9cc:	9004      	str	r0, [sp, #16]
 800a9ce:	e7ea      	b.n	800a9a6 <_dtoa_r+0xb3e>
 800a9d0:	080178ec 	.word	0x080178ec
 800a9d4:	08017910 	.word	0x08017910

0800a9d8 <__sflush_r>:
 800a9d8:	898a      	ldrh	r2, [r1, #12]
 800a9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9de:	4605      	mov	r5, r0
 800a9e0:	0710      	lsls	r0, r2, #28
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	d458      	bmi.n	800aa98 <__sflush_r+0xc0>
 800a9e6:	684b      	ldr	r3, [r1, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	dc05      	bgt.n	800a9f8 <__sflush_r+0x20>
 800a9ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dc02      	bgt.n	800a9f8 <__sflush_r+0x20>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9fa:	2e00      	cmp	r6, #0
 800a9fc:	d0f9      	beq.n	800a9f2 <__sflush_r+0x1a>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa04:	682f      	ldr	r7, [r5, #0]
 800aa06:	6a21      	ldr	r1, [r4, #32]
 800aa08:	602b      	str	r3, [r5, #0]
 800aa0a:	d032      	beq.n	800aa72 <__sflush_r+0x9a>
 800aa0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	075a      	lsls	r2, r3, #29
 800aa12:	d505      	bpl.n	800aa20 <__sflush_r+0x48>
 800aa14:	6863      	ldr	r3, [r4, #4]
 800aa16:	1ac0      	subs	r0, r0, r3
 800aa18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa1a:	b10b      	cbz	r3, 800aa20 <__sflush_r+0x48>
 800aa1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa1e:	1ac0      	subs	r0, r0, r3
 800aa20:	2300      	movs	r3, #0
 800aa22:	4602      	mov	r2, r0
 800aa24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa26:	6a21      	ldr	r1, [r4, #32]
 800aa28:	4628      	mov	r0, r5
 800aa2a:	47b0      	blx	r6
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	d106      	bne.n	800aa40 <__sflush_r+0x68>
 800aa32:	6829      	ldr	r1, [r5, #0]
 800aa34:	291d      	cmp	r1, #29
 800aa36:	d848      	bhi.n	800aaca <__sflush_r+0xf2>
 800aa38:	4a29      	ldr	r2, [pc, #164]	; (800aae0 <__sflush_r+0x108>)
 800aa3a:	40ca      	lsrs	r2, r1
 800aa3c:	07d6      	lsls	r6, r2, #31
 800aa3e:	d544      	bpl.n	800aaca <__sflush_r+0xf2>
 800aa40:	2200      	movs	r2, #0
 800aa42:	6062      	str	r2, [r4, #4]
 800aa44:	04d9      	lsls	r1, r3, #19
 800aa46:	6922      	ldr	r2, [r4, #16]
 800aa48:	6022      	str	r2, [r4, #0]
 800aa4a:	d504      	bpl.n	800aa56 <__sflush_r+0x7e>
 800aa4c:	1c42      	adds	r2, r0, #1
 800aa4e:	d101      	bne.n	800aa54 <__sflush_r+0x7c>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	b903      	cbnz	r3, 800aa56 <__sflush_r+0x7e>
 800aa54:	6560      	str	r0, [r4, #84]	; 0x54
 800aa56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa58:	602f      	str	r7, [r5, #0]
 800aa5a:	2900      	cmp	r1, #0
 800aa5c:	d0c9      	beq.n	800a9f2 <__sflush_r+0x1a>
 800aa5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa62:	4299      	cmp	r1, r3
 800aa64:	d002      	beq.n	800aa6c <__sflush_r+0x94>
 800aa66:	4628      	mov	r0, r5
 800aa68:	f7fe fb20 	bl	80090ac <_free_r>
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	6360      	str	r0, [r4, #52]	; 0x34
 800aa70:	e7c0      	b.n	800a9f4 <__sflush_r+0x1c>
 800aa72:	2301      	movs	r3, #1
 800aa74:	4628      	mov	r0, r5
 800aa76:	47b0      	blx	r6
 800aa78:	1c41      	adds	r1, r0, #1
 800aa7a:	d1c8      	bne.n	800aa0e <__sflush_r+0x36>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0c5      	beq.n	800aa0e <__sflush_r+0x36>
 800aa82:	2b1d      	cmp	r3, #29
 800aa84:	d001      	beq.n	800aa8a <__sflush_r+0xb2>
 800aa86:	2b16      	cmp	r3, #22
 800aa88:	d101      	bne.n	800aa8e <__sflush_r+0xb6>
 800aa8a:	602f      	str	r7, [r5, #0]
 800aa8c:	e7b1      	b.n	800a9f2 <__sflush_r+0x1a>
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa94:	81a3      	strh	r3, [r4, #12]
 800aa96:	e7ad      	b.n	800a9f4 <__sflush_r+0x1c>
 800aa98:	690f      	ldr	r7, [r1, #16]
 800aa9a:	2f00      	cmp	r7, #0
 800aa9c:	d0a9      	beq.n	800a9f2 <__sflush_r+0x1a>
 800aa9e:	0793      	lsls	r3, r2, #30
 800aaa0:	680e      	ldr	r6, [r1, #0]
 800aaa2:	bf08      	it	eq
 800aaa4:	694b      	ldreq	r3, [r1, #20]
 800aaa6:	600f      	str	r7, [r1, #0]
 800aaa8:	bf18      	it	ne
 800aaaa:	2300      	movne	r3, #0
 800aaac:	eba6 0807 	sub.w	r8, r6, r7
 800aab0:	608b      	str	r3, [r1, #8]
 800aab2:	f1b8 0f00 	cmp.w	r8, #0
 800aab6:	dd9c      	ble.n	800a9f2 <__sflush_r+0x1a>
 800aab8:	4643      	mov	r3, r8
 800aaba:	463a      	mov	r2, r7
 800aabc:	6a21      	ldr	r1, [r4, #32]
 800aabe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aac0:	4628      	mov	r0, r5
 800aac2:	47b0      	blx	r6
 800aac4:	2800      	cmp	r0, #0
 800aac6:	dc06      	bgt.n	800aad6 <__sflush_r+0xfe>
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aace:	81a3      	strh	r3, [r4, #12]
 800aad0:	f04f 30ff 	mov.w	r0, #4294967295
 800aad4:	e78e      	b.n	800a9f4 <__sflush_r+0x1c>
 800aad6:	4407      	add	r7, r0
 800aad8:	eba8 0800 	sub.w	r8, r8, r0
 800aadc:	e7e9      	b.n	800aab2 <__sflush_r+0xda>
 800aade:	bf00      	nop
 800aae0:	20400001 	.word	0x20400001

0800aae4 <_fflush_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	690b      	ldr	r3, [r1, #16]
 800aae8:	4605      	mov	r5, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	b1db      	cbz	r3, 800ab26 <_fflush_r+0x42>
 800aaee:	b118      	cbz	r0, 800aaf8 <_fflush_r+0x14>
 800aaf0:	6983      	ldr	r3, [r0, #24]
 800aaf2:	b90b      	cbnz	r3, 800aaf8 <_fflush_r+0x14>
 800aaf4:	f000 f860 	bl	800abb8 <__sinit>
 800aaf8:	4b0c      	ldr	r3, [pc, #48]	; (800ab2c <_fflush_r+0x48>)
 800aafa:	429c      	cmp	r4, r3
 800aafc:	d109      	bne.n	800ab12 <_fflush_r+0x2e>
 800aafe:	686c      	ldr	r4, [r5, #4]
 800ab00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab04:	b17b      	cbz	r3, 800ab26 <_fflush_r+0x42>
 800ab06:	4621      	mov	r1, r4
 800ab08:	4628      	mov	r0, r5
 800ab0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab0e:	f7ff bf63 	b.w	800a9d8 <__sflush_r>
 800ab12:	4b07      	ldr	r3, [pc, #28]	; (800ab30 <_fflush_r+0x4c>)
 800ab14:	429c      	cmp	r4, r3
 800ab16:	d101      	bne.n	800ab1c <_fflush_r+0x38>
 800ab18:	68ac      	ldr	r4, [r5, #8]
 800ab1a:	e7f1      	b.n	800ab00 <_fflush_r+0x1c>
 800ab1c:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <_fflush_r+0x50>)
 800ab1e:	429c      	cmp	r4, r3
 800ab20:	bf08      	it	eq
 800ab22:	68ec      	ldreq	r4, [r5, #12]
 800ab24:	e7ec      	b.n	800ab00 <_fflush_r+0x1c>
 800ab26:	2000      	movs	r0, #0
 800ab28:	bd38      	pop	{r3, r4, r5, pc}
 800ab2a:	bf00      	nop
 800ab2c:	08017940 	.word	0x08017940
 800ab30:	08017960 	.word	0x08017960
 800ab34:	08017920 	.word	0x08017920

0800ab38 <std>:
 800ab38:	2300      	movs	r3, #0
 800ab3a:	b510      	push	{r4, lr}
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab42:	6083      	str	r3, [r0, #8]
 800ab44:	8181      	strh	r1, [r0, #12]
 800ab46:	6643      	str	r3, [r0, #100]	; 0x64
 800ab48:	81c2      	strh	r2, [r0, #14]
 800ab4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab4e:	6183      	str	r3, [r0, #24]
 800ab50:	4619      	mov	r1, r3
 800ab52:	2208      	movs	r2, #8
 800ab54:	305c      	adds	r0, #92	; 0x5c
 800ab56:	f7fe faa0 	bl	800909a <memset>
 800ab5a:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <std+0x38>)
 800ab5c:	6263      	str	r3, [r4, #36]	; 0x24
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <std+0x3c>)
 800ab60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <std+0x40>)
 800ab64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab66:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <std+0x44>)
 800ab68:	6224      	str	r4, [r4, #32]
 800ab6a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab6c:	bd10      	pop	{r4, pc}
 800ab6e:	bf00      	nop
 800ab70:	0800b609 	.word	0x0800b609
 800ab74:	0800b62b 	.word	0x0800b62b
 800ab78:	0800b663 	.word	0x0800b663
 800ab7c:	0800b687 	.word	0x0800b687

0800ab80 <_cleanup_r>:
 800ab80:	4901      	ldr	r1, [pc, #4]	; (800ab88 <_cleanup_r+0x8>)
 800ab82:	f000 b885 	b.w	800ac90 <_fwalk_reent>
 800ab86:	bf00      	nop
 800ab88:	0800aae5 	.word	0x0800aae5

0800ab8c <__sfmoreglue>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	1e4a      	subs	r2, r1, #1
 800ab90:	2568      	movs	r5, #104	; 0x68
 800ab92:	4355      	muls	r5, r2
 800ab94:	460e      	mov	r6, r1
 800ab96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab9a:	f7fe fad5 	bl	8009148 <_malloc_r>
 800ab9e:	4604      	mov	r4, r0
 800aba0:	b140      	cbz	r0, 800abb4 <__sfmoreglue+0x28>
 800aba2:	2100      	movs	r1, #0
 800aba4:	e9c0 1600 	strd	r1, r6, [r0]
 800aba8:	300c      	adds	r0, #12
 800abaa:	60a0      	str	r0, [r4, #8]
 800abac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abb0:	f7fe fa73 	bl	800909a <memset>
 800abb4:	4620      	mov	r0, r4
 800abb6:	bd70      	pop	{r4, r5, r6, pc}

0800abb8 <__sinit>:
 800abb8:	6983      	ldr	r3, [r0, #24]
 800abba:	b510      	push	{r4, lr}
 800abbc:	4604      	mov	r4, r0
 800abbe:	bb33      	cbnz	r3, 800ac0e <__sinit+0x56>
 800abc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800abc4:	6503      	str	r3, [r0, #80]	; 0x50
 800abc6:	4b12      	ldr	r3, [pc, #72]	; (800ac10 <__sinit+0x58>)
 800abc8:	4a12      	ldr	r2, [pc, #72]	; (800ac14 <__sinit+0x5c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6282      	str	r2, [r0, #40]	; 0x28
 800abce:	4298      	cmp	r0, r3
 800abd0:	bf04      	itt	eq
 800abd2:	2301      	moveq	r3, #1
 800abd4:	6183      	streq	r3, [r0, #24]
 800abd6:	f000 f81f 	bl	800ac18 <__sfp>
 800abda:	6060      	str	r0, [r4, #4]
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 f81b 	bl	800ac18 <__sfp>
 800abe2:	60a0      	str	r0, [r4, #8]
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 f817 	bl	800ac18 <__sfp>
 800abea:	2200      	movs	r2, #0
 800abec:	60e0      	str	r0, [r4, #12]
 800abee:	2104      	movs	r1, #4
 800abf0:	6860      	ldr	r0, [r4, #4]
 800abf2:	f7ff ffa1 	bl	800ab38 <std>
 800abf6:	2201      	movs	r2, #1
 800abf8:	2109      	movs	r1, #9
 800abfa:	68a0      	ldr	r0, [r4, #8]
 800abfc:	f7ff ff9c 	bl	800ab38 <std>
 800ac00:	2202      	movs	r2, #2
 800ac02:	2112      	movs	r1, #18
 800ac04:	68e0      	ldr	r0, [r4, #12]
 800ac06:	f7ff ff97 	bl	800ab38 <std>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	61a3      	str	r3, [r4, #24]
 800ac0e:	bd10      	pop	{r4, pc}
 800ac10:	080178d8 	.word	0x080178d8
 800ac14:	0800ab81 	.word	0x0800ab81

0800ac18 <__sfp>:
 800ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1a:	4b1b      	ldr	r3, [pc, #108]	; (800ac88 <__sfp+0x70>)
 800ac1c:	681e      	ldr	r6, [r3, #0]
 800ac1e:	69b3      	ldr	r3, [r6, #24]
 800ac20:	4607      	mov	r7, r0
 800ac22:	b913      	cbnz	r3, 800ac2a <__sfp+0x12>
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff ffc7 	bl	800abb8 <__sinit>
 800ac2a:	3648      	adds	r6, #72	; 0x48
 800ac2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	d503      	bpl.n	800ac3c <__sfp+0x24>
 800ac34:	6833      	ldr	r3, [r6, #0]
 800ac36:	b133      	cbz	r3, 800ac46 <__sfp+0x2e>
 800ac38:	6836      	ldr	r6, [r6, #0]
 800ac3a:	e7f7      	b.n	800ac2c <__sfp+0x14>
 800ac3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac40:	b16d      	cbz	r5, 800ac5e <__sfp+0x46>
 800ac42:	3468      	adds	r4, #104	; 0x68
 800ac44:	e7f4      	b.n	800ac30 <__sfp+0x18>
 800ac46:	2104      	movs	r1, #4
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7ff ff9f 	bl	800ab8c <__sfmoreglue>
 800ac4e:	6030      	str	r0, [r6, #0]
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d1f1      	bne.n	800ac38 <__sfp+0x20>
 800ac54:	230c      	movs	r3, #12
 800ac56:	603b      	str	r3, [r7, #0]
 800ac58:	4604      	mov	r4, r0
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac5e:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <__sfp+0x74>)
 800ac60:	6665      	str	r5, [r4, #100]	; 0x64
 800ac62:	e9c4 5500 	strd	r5, r5, [r4]
 800ac66:	60a5      	str	r5, [r4, #8]
 800ac68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ac6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ac70:	2208      	movs	r2, #8
 800ac72:	4629      	mov	r1, r5
 800ac74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac78:	f7fe fa0f 	bl	800909a <memset>
 800ac7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac84:	e7e9      	b.n	800ac5a <__sfp+0x42>
 800ac86:	bf00      	nop
 800ac88:	080178d8 	.word	0x080178d8
 800ac8c:	ffff0001 	.word	0xffff0001

0800ac90 <_fwalk_reent>:
 800ac90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac94:	4680      	mov	r8, r0
 800ac96:	4689      	mov	r9, r1
 800ac98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	b914      	cbnz	r4, 800aca6 <_fwalk_reent+0x16>
 800aca0:	4630      	mov	r0, r6
 800aca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800acaa:	3f01      	subs	r7, #1
 800acac:	d501      	bpl.n	800acb2 <_fwalk_reent+0x22>
 800acae:	6824      	ldr	r4, [r4, #0]
 800acb0:	e7f5      	b.n	800ac9e <_fwalk_reent+0xe>
 800acb2:	89ab      	ldrh	r3, [r5, #12]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d907      	bls.n	800acc8 <_fwalk_reent+0x38>
 800acb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acbc:	3301      	adds	r3, #1
 800acbe:	d003      	beq.n	800acc8 <_fwalk_reent+0x38>
 800acc0:	4629      	mov	r1, r5
 800acc2:	4640      	mov	r0, r8
 800acc4:	47c8      	blx	r9
 800acc6:	4306      	orrs	r6, r0
 800acc8:	3568      	adds	r5, #104	; 0x68
 800acca:	e7ee      	b.n	800acaa <_fwalk_reent+0x1a>

0800accc <_localeconv_r>:
 800accc:	4b04      	ldr	r3, [pc, #16]	; (800ace0 <_localeconv_r+0x14>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6a18      	ldr	r0, [r3, #32]
 800acd2:	4b04      	ldr	r3, [pc, #16]	; (800ace4 <_localeconv_r+0x18>)
 800acd4:	2800      	cmp	r0, #0
 800acd6:	bf08      	it	eq
 800acd8:	4618      	moveq	r0, r3
 800acda:	30f0      	adds	r0, #240	; 0xf0
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	200007b8 	.word	0x200007b8
 800ace4:	2000081c 	.word	0x2000081c

0800ace8 <__swhatbuf_r>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	460e      	mov	r6, r1
 800acec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf0:	2900      	cmp	r1, #0
 800acf2:	b096      	sub	sp, #88	; 0x58
 800acf4:	4614      	mov	r4, r2
 800acf6:	461d      	mov	r5, r3
 800acf8:	da07      	bge.n	800ad0a <__swhatbuf_r+0x22>
 800acfa:	2300      	movs	r3, #0
 800acfc:	602b      	str	r3, [r5, #0]
 800acfe:	89b3      	ldrh	r3, [r6, #12]
 800ad00:	061a      	lsls	r2, r3, #24
 800ad02:	d410      	bmi.n	800ad26 <__swhatbuf_r+0x3e>
 800ad04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad08:	e00e      	b.n	800ad28 <__swhatbuf_r+0x40>
 800ad0a:	466a      	mov	r2, sp
 800ad0c:	f000 fce2 	bl	800b6d4 <_fstat_r>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dbf2      	blt.n	800acfa <__swhatbuf_r+0x12>
 800ad14:	9a01      	ldr	r2, [sp, #4]
 800ad16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad1e:	425a      	negs	r2, r3
 800ad20:	415a      	adcs	r2, r3
 800ad22:	602a      	str	r2, [r5, #0]
 800ad24:	e7ee      	b.n	800ad04 <__swhatbuf_r+0x1c>
 800ad26:	2340      	movs	r3, #64	; 0x40
 800ad28:	2000      	movs	r0, #0
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	b016      	add	sp, #88	; 0x58
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}

0800ad30 <__smakebuf_r>:
 800ad30:	898b      	ldrh	r3, [r1, #12]
 800ad32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad34:	079d      	lsls	r5, r3, #30
 800ad36:	4606      	mov	r6, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	d507      	bpl.n	800ad4c <__smakebuf_r+0x1c>
 800ad3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	6123      	str	r3, [r4, #16]
 800ad44:	2301      	movs	r3, #1
 800ad46:	6163      	str	r3, [r4, #20]
 800ad48:	b002      	add	sp, #8
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}
 800ad4c:	ab01      	add	r3, sp, #4
 800ad4e:	466a      	mov	r2, sp
 800ad50:	f7ff ffca 	bl	800ace8 <__swhatbuf_r>
 800ad54:	9900      	ldr	r1, [sp, #0]
 800ad56:	4605      	mov	r5, r0
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7fe f9f5 	bl	8009148 <_malloc_r>
 800ad5e:	b948      	cbnz	r0, 800ad74 <__smakebuf_r+0x44>
 800ad60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad64:	059a      	lsls	r2, r3, #22
 800ad66:	d4ef      	bmi.n	800ad48 <__smakebuf_r+0x18>
 800ad68:	f023 0303 	bic.w	r3, r3, #3
 800ad6c:	f043 0302 	orr.w	r3, r3, #2
 800ad70:	81a3      	strh	r3, [r4, #12]
 800ad72:	e7e3      	b.n	800ad3c <__smakebuf_r+0xc>
 800ad74:	4b0d      	ldr	r3, [pc, #52]	; (800adac <__smakebuf_r+0x7c>)
 800ad76:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	6020      	str	r0, [r4, #0]
 800ad7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad80:	81a3      	strh	r3, [r4, #12]
 800ad82:	9b00      	ldr	r3, [sp, #0]
 800ad84:	6163      	str	r3, [r4, #20]
 800ad86:	9b01      	ldr	r3, [sp, #4]
 800ad88:	6120      	str	r0, [r4, #16]
 800ad8a:	b15b      	cbz	r3, 800ada4 <__smakebuf_r+0x74>
 800ad8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad90:	4630      	mov	r0, r6
 800ad92:	f000 fcb1 	bl	800b6f8 <_isatty_r>
 800ad96:	b128      	cbz	r0, 800ada4 <__smakebuf_r+0x74>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	f023 0303 	bic.w	r3, r3, #3
 800ad9e:	f043 0301 	orr.w	r3, r3, #1
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	431d      	orrs	r5, r3
 800ada8:	81a5      	strh	r5, [r4, #12]
 800adaa:	e7cd      	b.n	800ad48 <__smakebuf_r+0x18>
 800adac:	0800ab81 	.word	0x0800ab81

0800adb0 <__malloc_lock>:
 800adb0:	4770      	bx	lr

0800adb2 <__malloc_unlock>:
 800adb2:	4770      	bx	lr

0800adb4 <_Balloc>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800adb8:	4604      	mov	r4, r0
 800adba:	460e      	mov	r6, r1
 800adbc:	b93d      	cbnz	r5, 800adce <_Balloc+0x1a>
 800adbe:	2010      	movs	r0, #16
 800adc0:	f7fe f958 	bl	8009074 <malloc>
 800adc4:	6260      	str	r0, [r4, #36]	; 0x24
 800adc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800adca:	6005      	str	r5, [r0, #0]
 800adcc:	60c5      	str	r5, [r0, #12]
 800adce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800add0:	68eb      	ldr	r3, [r5, #12]
 800add2:	b183      	cbz	r3, 800adf6 <_Balloc+0x42>
 800add4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800addc:	b9b8      	cbnz	r0, 800ae0e <_Balloc+0x5a>
 800adde:	2101      	movs	r1, #1
 800ade0:	fa01 f506 	lsl.w	r5, r1, r6
 800ade4:	1d6a      	adds	r2, r5, #5
 800ade6:	0092      	lsls	r2, r2, #2
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 fabf 	bl	800b36c <_calloc_r>
 800adee:	b160      	cbz	r0, 800ae0a <_Balloc+0x56>
 800adf0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800adf4:	e00e      	b.n	800ae14 <_Balloc+0x60>
 800adf6:	2221      	movs	r2, #33	; 0x21
 800adf8:	2104      	movs	r1, #4
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 fab6 	bl	800b36c <_calloc_r>
 800ae00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae02:	60e8      	str	r0, [r5, #12]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e4      	bne.n	800add4 <_Balloc+0x20>
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
 800ae0e:	6802      	ldr	r2, [r0, #0]
 800ae10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ae14:	2300      	movs	r3, #0
 800ae16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae1a:	e7f7      	b.n	800ae0c <_Balloc+0x58>

0800ae1c <_Bfree>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ae20:	4606      	mov	r6, r0
 800ae22:	460d      	mov	r5, r1
 800ae24:	b93c      	cbnz	r4, 800ae36 <_Bfree+0x1a>
 800ae26:	2010      	movs	r0, #16
 800ae28:	f7fe f924 	bl	8009074 <malloc>
 800ae2c:	6270      	str	r0, [r6, #36]	; 0x24
 800ae2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae32:	6004      	str	r4, [r0, #0]
 800ae34:	60c4      	str	r4, [r0, #12]
 800ae36:	b13d      	cbz	r5, 800ae48 <_Bfree+0x2c>
 800ae38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ae3a:	686a      	ldr	r2, [r5, #4]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae42:	6029      	str	r1, [r5, #0]
 800ae44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ae48:	bd70      	pop	{r4, r5, r6, pc}

0800ae4a <__multadd>:
 800ae4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4e:	690d      	ldr	r5, [r1, #16]
 800ae50:	461f      	mov	r7, r3
 800ae52:	4606      	mov	r6, r0
 800ae54:	460c      	mov	r4, r1
 800ae56:	f101 0c14 	add.w	ip, r1, #20
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f8dc 0000 	ldr.w	r0, [ip]
 800ae60:	b281      	uxth	r1, r0
 800ae62:	fb02 7101 	mla	r1, r2, r1, r7
 800ae66:	0c0f      	lsrs	r7, r1, #16
 800ae68:	0c00      	lsrs	r0, r0, #16
 800ae6a:	fb02 7000 	mla	r0, r2, r0, r7
 800ae6e:	b289      	uxth	r1, r1
 800ae70:	3301      	adds	r3, #1
 800ae72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ae76:	429d      	cmp	r5, r3
 800ae78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ae7c:	f84c 1b04 	str.w	r1, [ip], #4
 800ae80:	dcec      	bgt.n	800ae5c <__multadd+0x12>
 800ae82:	b1d7      	cbz	r7, 800aeba <__multadd+0x70>
 800ae84:	68a3      	ldr	r3, [r4, #8]
 800ae86:	42ab      	cmp	r3, r5
 800ae88:	dc12      	bgt.n	800aeb0 <__multadd+0x66>
 800ae8a:	6861      	ldr	r1, [r4, #4]
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	3101      	adds	r1, #1
 800ae90:	f7ff ff90 	bl	800adb4 <_Balloc>
 800ae94:	6922      	ldr	r2, [r4, #16]
 800ae96:	3202      	adds	r2, #2
 800ae98:	f104 010c 	add.w	r1, r4, #12
 800ae9c:	4680      	mov	r8, r0
 800ae9e:	0092      	lsls	r2, r2, #2
 800aea0:	300c      	adds	r0, #12
 800aea2:	f7fe f8ef 	bl	8009084 <memcpy>
 800aea6:	4621      	mov	r1, r4
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7ff ffb7 	bl	800ae1c <_Bfree>
 800aeae:	4644      	mov	r4, r8
 800aeb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aeb4:	3501      	adds	r5, #1
 800aeb6:	615f      	str	r7, [r3, #20]
 800aeb8:	6125      	str	r5, [r4, #16]
 800aeba:	4620      	mov	r0, r4
 800aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aec0 <__hi0bits>:
 800aec0:	0c02      	lsrs	r2, r0, #16
 800aec2:	0412      	lsls	r2, r2, #16
 800aec4:	4603      	mov	r3, r0
 800aec6:	b9b2      	cbnz	r2, 800aef6 <__hi0bits+0x36>
 800aec8:	0403      	lsls	r3, r0, #16
 800aeca:	2010      	movs	r0, #16
 800aecc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aed0:	bf04      	itt	eq
 800aed2:	021b      	lsleq	r3, r3, #8
 800aed4:	3008      	addeq	r0, #8
 800aed6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aeda:	bf04      	itt	eq
 800aedc:	011b      	lsleq	r3, r3, #4
 800aede:	3004      	addeq	r0, #4
 800aee0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aee4:	bf04      	itt	eq
 800aee6:	009b      	lsleq	r3, r3, #2
 800aee8:	3002      	addeq	r0, #2
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	db06      	blt.n	800aefc <__hi0bits+0x3c>
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	d503      	bpl.n	800aefa <__hi0bits+0x3a>
 800aef2:	3001      	adds	r0, #1
 800aef4:	4770      	bx	lr
 800aef6:	2000      	movs	r0, #0
 800aef8:	e7e8      	b.n	800aecc <__hi0bits+0xc>
 800aefa:	2020      	movs	r0, #32
 800aefc:	4770      	bx	lr

0800aefe <__lo0bits>:
 800aefe:	6803      	ldr	r3, [r0, #0]
 800af00:	f013 0207 	ands.w	r2, r3, #7
 800af04:	4601      	mov	r1, r0
 800af06:	d00b      	beq.n	800af20 <__lo0bits+0x22>
 800af08:	07da      	lsls	r2, r3, #31
 800af0a:	d423      	bmi.n	800af54 <__lo0bits+0x56>
 800af0c:	0798      	lsls	r0, r3, #30
 800af0e:	bf49      	itett	mi
 800af10:	085b      	lsrmi	r3, r3, #1
 800af12:	089b      	lsrpl	r3, r3, #2
 800af14:	2001      	movmi	r0, #1
 800af16:	600b      	strmi	r3, [r1, #0]
 800af18:	bf5c      	itt	pl
 800af1a:	600b      	strpl	r3, [r1, #0]
 800af1c:	2002      	movpl	r0, #2
 800af1e:	4770      	bx	lr
 800af20:	b298      	uxth	r0, r3
 800af22:	b9a8      	cbnz	r0, 800af50 <__lo0bits+0x52>
 800af24:	0c1b      	lsrs	r3, r3, #16
 800af26:	2010      	movs	r0, #16
 800af28:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af2c:	bf04      	itt	eq
 800af2e:	0a1b      	lsreq	r3, r3, #8
 800af30:	3008      	addeq	r0, #8
 800af32:	071a      	lsls	r2, r3, #28
 800af34:	bf04      	itt	eq
 800af36:	091b      	lsreq	r3, r3, #4
 800af38:	3004      	addeq	r0, #4
 800af3a:	079a      	lsls	r2, r3, #30
 800af3c:	bf04      	itt	eq
 800af3e:	089b      	lsreq	r3, r3, #2
 800af40:	3002      	addeq	r0, #2
 800af42:	07da      	lsls	r2, r3, #31
 800af44:	d402      	bmi.n	800af4c <__lo0bits+0x4e>
 800af46:	085b      	lsrs	r3, r3, #1
 800af48:	d006      	beq.n	800af58 <__lo0bits+0x5a>
 800af4a:	3001      	adds	r0, #1
 800af4c:	600b      	str	r3, [r1, #0]
 800af4e:	4770      	bx	lr
 800af50:	4610      	mov	r0, r2
 800af52:	e7e9      	b.n	800af28 <__lo0bits+0x2a>
 800af54:	2000      	movs	r0, #0
 800af56:	4770      	bx	lr
 800af58:	2020      	movs	r0, #32
 800af5a:	4770      	bx	lr

0800af5c <__i2b>:
 800af5c:	b510      	push	{r4, lr}
 800af5e:	460c      	mov	r4, r1
 800af60:	2101      	movs	r1, #1
 800af62:	f7ff ff27 	bl	800adb4 <_Balloc>
 800af66:	2201      	movs	r2, #1
 800af68:	6144      	str	r4, [r0, #20]
 800af6a:	6102      	str	r2, [r0, #16]
 800af6c:	bd10      	pop	{r4, pc}

0800af6e <__multiply>:
 800af6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af72:	4614      	mov	r4, r2
 800af74:	690a      	ldr	r2, [r1, #16]
 800af76:	6923      	ldr	r3, [r4, #16]
 800af78:	429a      	cmp	r2, r3
 800af7a:	bfb8      	it	lt
 800af7c:	460b      	movlt	r3, r1
 800af7e:	4688      	mov	r8, r1
 800af80:	bfbc      	itt	lt
 800af82:	46a0      	movlt	r8, r4
 800af84:	461c      	movlt	r4, r3
 800af86:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af8a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af92:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af96:	eb07 0609 	add.w	r6, r7, r9
 800af9a:	42b3      	cmp	r3, r6
 800af9c:	bfb8      	it	lt
 800af9e:	3101      	addlt	r1, #1
 800afa0:	f7ff ff08 	bl	800adb4 <_Balloc>
 800afa4:	f100 0514 	add.w	r5, r0, #20
 800afa8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800afac:	462b      	mov	r3, r5
 800afae:	2200      	movs	r2, #0
 800afb0:	4573      	cmp	r3, lr
 800afb2:	d316      	bcc.n	800afe2 <__multiply+0x74>
 800afb4:	f104 0214 	add.w	r2, r4, #20
 800afb8:	f108 0114 	add.w	r1, r8, #20
 800afbc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800afc0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	9b00      	ldr	r3, [sp, #0]
 800afc8:	9201      	str	r2, [sp, #4]
 800afca:	4293      	cmp	r3, r2
 800afcc:	d80c      	bhi.n	800afe8 <__multiply+0x7a>
 800afce:	2e00      	cmp	r6, #0
 800afd0:	dd03      	ble.n	800afda <__multiply+0x6c>
 800afd2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d05d      	beq.n	800b096 <__multiply+0x128>
 800afda:	6106      	str	r6, [r0, #16]
 800afdc:	b003      	add	sp, #12
 800afde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe2:	f843 2b04 	str.w	r2, [r3], #4
 800afe6:	e7e3      	b.n	800afb0 <__multiply+0x42>
 800afe8:	f8b2 b000 	ldrh.w	fp, [r2]
 800afec:	f1bb 0f00 	cmp.w	fp, #0
 800aff0:	d023      	beq.n	800b03a <__multiply+0xcc>
 800aff2:	4689      	mov	r9, r1
 800aff4:	46ac      	mov	ip, r5
 800aff6:	f04f 0800 	mov.w	r8, #0
 800affa:	f859 4b04 	ldr.w	r4, [r9], #4
 800affe:	f8dc a000 	ldr.w	sl, [ip]
 800b002:	b2a3      	uxth	r3, r4
 800b004:	fa1f fa8a 	uxth.w	sl, sl
 800b008:	fb0b a303 	mla	r3, fp, r3, sl
 800b00c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b010:	f8dc 4000 	ldr.w	r4, [ip]
 800b014:	4443      	add	r3, r8
 800b016:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b01a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b01e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b022:	46e2      	mov	sl, ip
 800b024:	b29b      	uxth	r3, r3
 800b026:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b02a:	454f      	cmp	r7, r9
 800b02c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b030:	f84a 3b04 	str.w	r3, [sl], #4
 800b034:	d82b      	bhi.n	800b08e <__multiply+0x120>
 800b036:	f8cc 8004 	str.w	r8, [ip, #4]
 800b03a:	9b01      	ldr	r3, [sp, #4]
 800b03c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b040:	3204      	adds	r2, #4
 800b042:	f1ba 0f00 	cmp.w	sl, #0
 800b046:	d020      	beq.n	800b08a <__multiply+0x11c>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	4689      	mov	r9, r1
 800b04c:	46a8      	mov	r8, r5
 800b04e:	f04f 0b00 	mov.w	fp, #0
 800b052:	f8b9 c000 	ldrh.w	ip, [r9]
 800b056:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b05a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b05e:	445c      	add	r4, fp
 800b060:	46c4      	mov	ip, r8
 800b062:	b29b      	uxth	r3, r3
 800b064:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b068:	f84c 3b04 	str.w	r3, [ip], #4
 800b06c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b070:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b074:	0c1b      	lsrs	r3, r3, #16
 800b076:	fb0a b303 	mla	r3, sl, r3, fp
 800b07a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b07e:	454f      	cmp	r7, r9
 800b080:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b084:	d805      	bhi.n	800b092 <__multiply+0x124>
 800b086:	f8c8 3004 	str.w	r3, [r8, #4]
 800b08a:	3504      	adds	r5, #4
 800b08c:	e79b      	b.n	800afc6 <__multiply+0x58>
 800b08e:	46d4      	mov	ip, sl
 800b090:	e7b3      	b.n	800affa <__multiply+0x8c>
 800b092:	46e0      	mov	r8, ip
 800b094:	e7dd      	b.n	800b052 <__multiply+0xe4>
 800b096:	3e01      	subs	r6, #1
 800b098:	e799      	b.n	800afce <__multiply+0x60>
	...

0800b09c <__pow5mult>:
 800b09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a0:	4615      	mov	r5, r2
 800b0a2:	f012 0203 	ands.w	r2, r2, #3
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	460f      	mov	r7, r1
 800b0aa:	d007      	beq.n	800b0bc <__pow5mult+0x20>
 800b0ac:	3a01      	subs	r2, #1
 800b0ae:	4c21      	ldr	r4, [pc, #132]	; (800b134 <__pow5mult+0x98>)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0b6:	f7ff fec8 	bl	800ae4a <__multadd>
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	10ad      	asrs	r5, r5, #2
 800b0be:	d035      	beq.n	800b12c <__pow5mult+0x90>
 800b0c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0c2:	b93c      	cbnz	r4, 800b0d4 <__pow5mult+0x38>
 800b0c4:	2010      	movs	r0, #16
 800b0c6:	f7fd ffd5 	bl	8009074 <malloc>
 800b0ca:	6270      	str	r0, [r6, #36]	; 0x24
 800b0cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d0:	6004      	str	r4, [r0, #0]
 800b0d2:	60c4      	str	r4, [r0, #12]
 800b0d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0dc:	b94c      	cbnz	r4, 800b0f2 <__pow5mult+0x56>
 800b0de:	f240 2171 	movw	r1, #625	; 0x271
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ff3a 	bl	800af5c <__i2b>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	6003      	str	r3, [r0, #0]
 800b0f2:	f04f 0800 	mov.w	r8, #0
 800b0f6:	07eb      	lsls	r3, r5, #31
 800b0f8:	d50a      	bpl.n	800b110 <__pow5mult+0x74>
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	4630      	mov	r0, r6
 800b100:	f7ff ff35 	bl	800af6e <__multiply>
 800b104:	4639      	mov	r1, r7
 800b106:	4681      	mov	r9, r0
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff fe87 	bl	800ae1c <_Bfree>
 800b10e:	464f      	mov	r7, r9
 800b110:	106d      	asrs	r5, r5, #1
 800b112:	d00b      	beq.n	800b12c <__pow5mult+0x90>
 800b114:	6820      	ldr	r0, [r4, #0]
 800b116:	b938      	cbnz	r0, 800b128 <__pow5mult+0x8c>
 800b118:	4622      	mov	r2, r4
 800b11a:	4621      	mov	r1, r4
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7ff ff26 	bl	800af6e <__multiply>
 800b122:	6020      	str	r0, [r4, #0]
 800b124:	f8c0 8000 	str.w	r8, [r0]
 800b128:	4604      	mov	r4, r0
 800b12a:	e7e4      	b.n	800b0f6 <__pow5mult+0x5a>
 800b12c:	4638      	mov	r0, r7
 800b12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b132:	bf00      	nop
 800b134:	08017a70 	.word	0x08017a70

0800b138 <__lshift>:
 800b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	460c      	mov	r4, r1
 800b13e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b142:	6923      	ldr	r3, [r4, #16]
 800b144:	6849      	ldr	r1, [r1, #4]
 800b146:	eb0a 0903 	add.w	r9, sl, r3
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	4607      	mov	r7, r0
 800b14e:	4616      	mov	r6, r2
 800b150:	f109 0501 	add.w	r5, r9, #1
 800b154:	42ab      	cmp	r3, r5
 800b156:	db32      	blt.n	800b1be <__lshift+0x86>
 800b158:	4638      	mov	r0, r7
 800b15a:	f7ff fe2b 	bl	800adb4 <_Balloc>
 800b15e:	2300      	movs	r3, #0
 800b160:	4680      	mov	r8, r0
 800b162:	f100 0114 	add.w	r1, r0, #20
 800b166:	461a      	mov	r2, r3
 800b168:	4553      	cmp	r3, sl
 800b16a:	db2b      	blt.n	800b1c4 <__lshift+0x8c>
 800b16c:	6920      	ldr	r0, [r4, #16]
 800b16e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b172:	f104 0314 	add.w	r3, r4, #20
 800b176:	f016 021f 	ands.w	r2, r6, #31
 800b17a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b17e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b182:	d025      	beq.n	800b1d0 <__lshift+0x98>
 800b184:	f1c2 0e20 	rsb	lr, r2, #32
 800b188:	2000      	movs	r0, #0
 800b18a:	681e      	ldr	r6, [r3, #0]
 800b18c:	468a      	mov	sl, r1
 800b18e:	4096      	lsls	r6, r2
 800b190:	4330      	orrs	r0, r6
 800b192:	f84a 0b04 	str.w	r0, [sl], #4
 800b196:	f853 0b04 	ldr.w	r0, [r3], #4
 800b19a:	459c      	cmp	ip, r3
 800b19c:	fa20 f00e 	lsr.w	r0, r0, lr
 800b1a0:	d814      	bhi.n	800b1cc <__lshift+0x94>
 800b1a2:	6048      	str	r0, [r1, #4]
 800b1a4:	b108      	cbz	r0, 800b1aa <__lshift+0x72>
 800b1a6:	f109 0502 	add.w	r5, r9, #2
 800b1aa:	3d01      	subs	r5, #1
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	f8c8 5010 	str.w	r5, [r8, #16]
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	f7ff fe32 	bl	800ae1c <_Bfree>
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1be:	3101      	adds	r1, #1
 800b1c0:	005b      	lsls	r3, r3, #1
 800b1c2:	e7c7      	b.n	800b154 <__lshift+0x1c>
 800b1c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	e7cd      	b.n	800b168 <__lshift+0x30>
 800b1cc:	4651      	mov	r1, sl
 800b1ce:	e7dc      	b.n	800b18a <__lshift+0x52>
 800b1d0:	3904      	subs	r1, #4
 800b1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1da:	459c      	cmp	ip, r3
 800b1dc:	d8f9      	bhi.n	800b1d2 <__lshift+0x9a>
 800b1de:	e7e4      	b.n	800b1aa <__lshift+0x72>

0800b1e0 <__mcmp>:
 800b1e0:	6903      	ldr	r3, [r0, #16]
 800b1e2:	690a      	ldr	r2, [r1, #16]
 800b1e4:	1a9b      	subs	r3, r3, r2
 800b1e6:	b530      	push	{r4, r5, lr}
 800b1e8:	d10c      	bne.n	800b204 <__mcmp+0x24>
 800b1ea:	0092      	lsls	r2, r2, #2
 800b1ec:	3014      	adds	r0, #20
 800b1ee:	3114      	adds	r1, #20
 800b1f0:	1884      	adds	r4, r0, r2
 800b1f2:	4411      	add	r1, r2
 800b1f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1fc:	4295      	cmp	r5, r2
 800b1fe:	d003      	beq.n	800b208 <__mcmp+0x28>
 800b200:	d305      	bcc.n	800b20e <__mcmp+0x2e>
 800b202:	2301      	movs	r3, #1
 800b204:	4618      	mov	r0, r3
 800b206:	bd30      	pop	{r4, r5, pc}
 800b208:	42a0      	cmp	r0, r4
 800b20a:	d3f3      	bcc.n	800b1f4 <__mcmp+0x14>
 800b20c:	e7fa      	b.n	800b204 <__mcmp+0x24>
 800b20e:	f04f 33ff 	mov.w	r3, #4294967295
 800b212:	e7f7      	b.n	800b204 <__mcmp+0x24>

0800b214 <__mdiff>:
 800b214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b218:	460d      	mov	r5, r1
 800b21a:	4607      	mov	r7, r0
 800b21c:	4611      	mov	r1, r2
 800b21e:	4628      	mov	r0, r5
 800b220:	4614      	mov	r4, r2
 800b222:	f7ff ffdd 	bl	800b1e0 <__mcmp>
 800b226:	1e06      	subs	r6, r0, #0
 800b228:	d108      	bne.n	800b23c <__mdiff+0x28>
 800b22a:	4631      	mov	r1, r6
 800b22c:	4638      	mov	r0, r7
 800b22e:	f7ff fdc1 	bl	800adb4 <_Balloc>
 800b232:	2301      	movs	r3, #1
 800b234:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b23c:	bfa4      	itt	ge
 800b23e:	4623      	movge	r3, r4
 800b240:	462c      	movge	r4, r5
 800b242:	4638      	mov	r0, r7
 800b244:	6861      	ldr	r1, [r4, #4]
 800b246:	bfa6      	itte	ge
 800b248:	461d      	movge	r5, r3
 800b24a:	2600      	movge	r6, #0
 800b24c:	2601      	movlt	r6, #1
 800b24e:	f7ff fdb1 	bl	800adb4 <_Balloc>
 800b252:	692b      	ldr	r3, [r5, #16]
 800b254:	60c6      	str	r6, [r0, #12]
 800b256:	6926      	ldr	r6, [r4, #16]
 800b258:	f105 0914 	add.w	r9, r5, #20
 800b25c:	f104 0214 	add.w	r2, r4, #20
 800b260:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b264:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b268:	f100 0514 	add.w	r5, r0, #20
 800b26c:	f04f 0e00 	mov.w	lr, #0
 800b270:	f852 ab04 	ldr.w	sl, [r2], #4
 800b274:	f859 4b04 	ldr.w	r4, [r9], #4
 800b278:	fa1e f18a 	uxtah	r1, lr, sl
 800b27c:	b2a3      	uxth	r3, r4
 800b27e:	1ac9      	subs	r1, r1, r3
 800b280:	0c23      	lsrs	r3, r4, #16
 800b282:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b286:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b28a:	b289      	uxth	r1, r1
 800b28c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b290:	45c8      	cmp	r8, r9
 800b292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b296:	4694      	mov	ip, r2
 800b298:	f845 3b04 	str.w	r3, [r5], #4
 800b29c:	d8e8      	bhi.n	800b270 <__mdiff+0x5c>
 800b29e:	45bc      	cmp	ip, r7
 800b2a0:	d304      	bcc.n	800b2ac <__mdiff+0x98>
 800b2a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b2a6:	b183      	cbz	r3, 800b2ca <__mdiff+0xb6>
 800b2a8:	6106      	str	r6, [r0, #16]
 800b2aa:	e7c5      	b.n	800b238 <__mdiff+0x24>
 800b2ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2b0:	fa1e f381 	uxtah	r3, lr, r1
 800b2b4:	141a      	asrs	r2, r3, #16
 800b2b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b2c4:	f845 3b04 	str.w	r3, [r5], #4
 800b2c8:	e7e9      	b.n	800b29e <__mdiff+0x8a>
 800b2ca:	3e01      	subs	r6, #1
 800b2cc:	e7e9      	b.n	800b2a2 <__mdiff+0x8e>

0800b2ce <__d2b>:
 800b2ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2d2:	460e      	mov	r6, r1
 800b2d4:	2101      	movs	r1, #1
 800b2d6:	ec59 8b10 	vmov	r8, r9, d0
 800b2da:	4615      	mov	r5, r2
 800b2dc:	f7ff fd6a 	bl	800adb4 <_Balloc>
 800b2e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2ea:	bb34      	cbnz	r4, 800b33a <__d2b+0x6c>
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	f1b8 0300 	subs.w	r3, r8, #0
 800b2f2:	d027      	beq.n	800b344 <__d2b+0x76>
 800b2f4:	a802      	add	r0, sp, #8
 800b2f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b2fa:	f7ff fe00 	bl	800aefe <__lo0bits>
 800b2fe:	9900      	ldr	r1, [sp, #0]
 800b300:	b1f0      	cbz	r0, 800b340 <__d2b+0x72>
 800b302:	9a01      	ldr	r2, [sp, #4]
 800b304:	f1c0 0320 	rsb	r3, r0, #32
 800b308:	fa02 f303 	lsl.w	r3, r2, r3
 800b30c:	430b      	orrs	r3, r1
 800b30e:	40c2      	lsrs	r2, r0
 800b310:	617b      	str	r3, [r7, #20]
 800b312:	9201      	str	r2, [sp, #4]
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	61bb      	str	r3, [r7, #24]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bf14      	ite	ne
 800b31c:	2102      	movne	r1, #2
 800b31e:	2101      	moveq	r1, #1
 800b320:	6139      	str	r1, [r7, #16]
 800b322:	b1c4      	cbz	r4, 800b356 <__d2b+0x88>
 800b324:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b328:	4404      	add	r4, r0
 800b32a:	6034      	str	r4, [r6, #0]
 800b32c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b330:	6028      	str	r0, [r5, #0]
 800b332:	4638      	mov	r0, r7
 800b334:	b003      	add	sp, #12
 800b336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b33a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b33e:	e7d5      	b.n	800b2ec <__d2b+0x1e>
 800b340:	6179      	str	r1, [r7, #20]
 800b342:	e7e7      	b.n	800b314 <__d2b+0x46>
 800b344:	a801      	add	r0, sp, #4
 800b346:	f7ff fdda 	bl	800aefe <__lo0bits>
 800b34a:	9b01      	ldr	r3, [sp, #4]
 800b34c:	617b      	str	r3, [r7, #20]
 800b34e:	2101      	movs	r1, #1
 800b350:	6139      	str	r1, [r7, #16]
 800b352:	3020      	adds	r0, #32
 800b354:	e7e5      	b.n	800b322 <__d2b+0x54>
 800b356:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b35a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b35e:	6030      	str	r0, [r6, #0]
 800b360:	6918      	ldr	r0, [r3, #16]
 800b362:	f7ff fdad 	bl	800aec0 <__hi0bits>
 800b366:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b36a:	e7e1      	b.n	800b330 <__d2b+0x62>

0800b36c <_calloc_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	fb02 f401 	mul.w	r4, r2, r1
 800b372:	4621      	mov	r1, r4
 800b374:	f7fd fee8 	bl	8009148 <_malloc_r>
 800b378:	4605      	mov	r5, r0
 800b37a:	b118      	cbz	r0, 800b384 <_calloc_r+0x18>
 800b37c:	4622      	mov	r2, r4
 800b37e:	2100      	movs	r1, #0
 800b380:	f7fd fe8b 	bl	800909a <memset>
 800b384:	4628      	mov	r0, r5
 800b386:	bd38      	pop	{r3, r4, r5, pc}

0800b388 <__sfputc_r>:
 800b388:	6893      	ldr	r3, [r2, #8]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	b410      	push	{r4}
 800b390:	6093      	str	r3, [r2, #8]
 800b392:	da08      	bge.n	800b3a6 <__sfputc_r+0x1e>
 800b394:	6994      	ldr	r4, [r2, #24]
 800b396:	42a3      	cmp	r3, r4
 800b398:	db01      	blt.n	800b39e <__sfputc_r+0x16>
 800b39a:	290a      	cmp	r1, #10
 800b39c:	d103      	bne.n	800b3a6 <__sfputc_r+0x1e>
 800b39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a2:	f7fe bc13 	b.w	8009bcc <__swbuf_r>
 800b3a6:	6813      	ldr	r3, [r2, #0]
 800b3a8:	1c58      	adds	r0, r3, #1
 800b3aa:	6010      	str	r0, [r2, #0]
 800b3ac:	7019      	strb	r1, [r3, #0]
 800b3ae:	4608      	mov	r0, r1
 800b3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <__sfputs_r>:
 800b3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	460f      	mov	r7, r1
 800b3bc:	4614      	mov	r4, r2
 800b3be:	18d5      	adds	r5, r2, r3
 800b3c0:	42ac      	cmp	r4, r5
 800b3c2:	d101      	bne.n	800b3c8 <__sfputs_r+0x12>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	e007      	b.n	800b3d8 <__sfputs_r+0x22>
 800b3c8:	463a      	mov	r2, r7
 800b3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f7ff ffda 	bl	800b388 <__sfputc_r>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d1f3      	bne.n	800b3c0 <__sfputs_r+0xa>
 800b3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3dc <_vfiprintf_r>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	b09d      	sub	sp, #116	; 0x74
 800b3e4:	4617      	mov	r7, r2
 800b3e6:	461d      	mov	r5, r3
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	b118      	cbz	r0, 800b3f4 <_vfiprintf_r+0x18>
 800b3ec:	6983      	ldr	r3, [r0, #24]
 800b3ee:	b90b      	cbnz	r3, 800b3f4 <_vfiprintf_r+0x18>
 800b3f0:	f7ff fbe2 	bl	800abb8 <__sinit>
 800b3f4:	4b7c      	ldr	r3, [pc, #496]	; (800b5e8 <_vfiprintf_r+0x20c>)
 800b3f6:	429c      	cmp	r4, r3
 800b3f8:	d158      	bne.n	800b4ac <_vfiprintf_r+0xd0>
 800b3fa:	6874      	ldr	r4, [r6, #4]
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	0718      	lsls	r0, r3, #28
 800b400:	d55e      	bpl.n	800b4c0 <_vfiprintf_r+0xe4>
 800b402:	6923      	ldr	r3, [r4, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d05b      	beq.n	800b4c0 <_vfiprintf_r+0xe4>
 800b408:	2300      	movs	r3, #0
 800b40a:	9309      	str	r3, [sp, #36]	; 0x24
 800b40c:	2320      	movs	r3, #32
 800b40e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b412:	2330      	movs	r3, #48	; 0x30
 800b414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b418:	9503      	str	r5, [sp, #12]
 800b41a:	f04f 0b01 	mov.w	fp, #1
 800b41e:	46b8      	mov	r8, r7
 800b420:	4645      	mov	r5, r8
 800b422:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b426:	b10b      	cbz	r3, 800b42c <_vfiprintf_r+0x50>
 800b428:	2b25      	cmp	r3, #37	; 0x25
 800b42a:	d154      	bne.n	800b4d6 <_vfiprintf_r+0xfa>
 800b42c:	ebb8 0a07 	subs.w	sl, r8, r7
 800b430:	d00b      	beq.n	800b44a <_vfiprintf_r+0x6e>
 800b432:	4653      	mov	r3, sl
 800b434:	463a      	mov	r2, r7
 800b436:	4621      	mov	r1, r4
 800b438:	4630      	mov	r0, r6
 800b43a:	f7ff ffbc 	bl	800b3b6 <__sfputs_r>
 800b43e:	3001      	adds	r0, #1
 800b440:	f000 80c2 	beq.w	800b5c8 <_vfiprintf_r+0x1ec>
 800b444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b446:	4453      	add	r3, sl
 800b448:	9309      	str	r3, [sp, #36]	; 0x24
 800b44a:	f898 3000 	ldrb.w	r3, [r8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f000 80ba 	beq.w	800b5c8 <_vfiprintf_r+0x1ec>
 800b454:	2300      	movs	r3, #0
 800b456:	f04f 32ff 	mov.w	r2, #4294967295
 800b45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	9307      	str	r3, [sp, #28]
 800b462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b466:	931a      	str	r3, [sp, #104]	; 0x68
 800b468:	46a8      	mov	r8, r5
 800b46a:	2205      	movs	r2, #5
 800b46c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b470:	485e      	ldr	r0, [pc, #376]	; (800b5ec <_vfiprintf_r+0x210>)
 800b472:	f7f4 fecd 	bl	8000210 <memchr>
 800b476:	9b04      	ldr	r3, [sp, #16]
 800b478:	bb78      	cbnz	r0, 800b4da <_vfiprintf_r+0xfe>
 800b47a:	06d9      	lsls	r1, r3, #27
 800b47c:	bf44      	itt	mi
 800b47e:	2220      	movmi	r2, #32
 800b480:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b484:	071a      	lsls	r2, r3, #28
 800b486:	bf44      	itt	mi
 800b488:	222b      	movmi	r2, #43	; 0x2b
 800b48a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b48e:	782a      	ldrb	r2, [r5, #0]
 800b490:	2a2a      	cmp	r2, #42	; 0x2a
 800b492:	d02a      	beq.n	800b4ea <_vfiprintf_r+0x10e>
 800b494:	9a07      	ldr	r2, [sp, #28]
 800b496:	46a8      	mov	r8, r5
 800b498:	2000      	movs	r0, #0
 800b49a:	250a      	movs	r5, #10
 800b49c:	4641      	mov	r1, r8
 800b49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4a2:	3b30      	subs	r3, #48	; 0x30
 800b4a4:	2b09      	cmp	r3, #9
 800b4a6:	d969      	bls.n	800b57c <_vfiprintf_r+0x1a0>
 800b4a8:	b360      	cbz	r0, 800b504 <_vfiprintf_r+0x128>
 800b4aa:	e024      	b.n	800b4f6 <_vfiprintf_r+0x11a>
 800b4ac:	4b50      	ldr	r3, [pc, #320]	; (800b5f0 <_vfiprintf_r+0x214>)
 800b4ae:	429c      	cmp	r4, r3
 800b4b0:	d101      	bne.n	800b4b6 <_vfiprintf_r+0xda>
 800b4b2:	68b4      	ldr	r4, [r6, #8]
 800b4b4:	e7a2      	b.n	800b3fc <_vfiprintf_r+0x20>
 800b4b6:	4b4f      	ldr	r3, [pc, #316]	; (800b5f4 <_vfiprintf_r+0x218>)
 800b4b8:	429c      	cmp	r4, r3
 800b4ba:	bf08      	it	eq
 800b4bc:	68f4      	ldreq	r4, [r6, #12]
 800b4be:	e79d      	b.n	800b3fc <_vfiprintf_r+0x20>
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f7fe fbd4 	bl	8009c70 <__swsetup_r>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d09d      	beq.n	800b408 <_vfiprintf_r+0x2c>
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d0:	b01d      	add	sp, #116	; 0x74
 800b4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d6:	46a8      	mov	r8, r5
 800b4d8:	e7a2      	b.n	800b420 <_vfiprintf_r+0x44>
 800b4da:	4a44      	ldr	r2, [pc, #272]	; (800b5ec <_vfiprintf_r+0x210>)
 800b4dc:	1a80      	subs	r0, r0, r2
 800b4de:	fa0b f000 	lsl.w	r0, fp, r0
 800b4e2:	4318      	orrs	r0, r3
 800b4e4:	9004      	str	r0, [sp, #16]
 800b4e6:	4645      	mov	r5, r8
 800b4e8:	e7be      	b.n	800b468 <_vfiprintf_r+0x8c>
 800b4ea:	9a03      	ldr	r2, [sp, #12]
 800b4ec:	1d11      	adds	r1, r2, #4
 800b4ee:	6812      	ldr	r2, [r2, #0]
 800b4f0:	9103      	str	r1, [sp, #12]
 800b4f2:	2a00      	cmp	r2, #0
 800b4f4:	db01      	blt.n	800b4fa <_vfiprintf_r+0x11e>
 800b4f6:	9207      	str	r2, [sp, #28]
 800b4f8:	e004      	b.n	800b504 <_vfiprintf_r+0x128>
 800b4fa:	4252      	negs	r2, r2
 800b4fc:	f043 0302 	orr.w	r3, r3, #2
 800b500:	9207      	str	r2, [sp, #28]
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	f898 3000 	ldrb.w	r3, [r8]
 800b508:	2b2e      	cmp	r3, #46	; 0x2e
 800b50a:	d10e      	bne.n	800b52a <_vfiprintf_r+0x14e>
 800b50c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b510:	2b2a      	cmp	r3, #42	; 0x2a
 800b512:	d138      	bne.n	800b586 <_vfiprintf_r+0x1aa>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	1d1a      	adds	r2, r3, #4
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	9203      	str	r2, [sp, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfb8      	it	lt
 800b520:	f04f 33ff 	movlt.w	r3, #4294967295
 800b524:	f108 0802 	add.w	r8, r8, #2
 800b528:	9305      	str	r3, [sp, #20]
 800b52a:	4d33      	ldr	r5, [pc, #204]	; (800b5f8 <_vfiprintf_r+0x21c>)
 800b52c:	f898 1000 	ldrb.w	r1, [r8]
 800b530:	2203      	movs	r2, #3
 800b532:	4628      	mov	r0, r5
 800b534:	f7f4 fe6c 	bl	8000210 <memchr>
 800b538:	b140      	cbz	r0, 800b54c <_vfiprintf_r+0x170>
 800b53a:	2340      	movs	r3, #64	; 0x40
 800b53c:	1b40      	subs	r0, r0, r5
 800b53e:	fa03 f000 	lsl.w	r0, r3, r0
 800b542:	9b04      	ldr	r3, [sp, #16]
 800b544:	4303      	orrs	r3, r0
 800b546:	f108 0801 	add.w	r8, r8, #1
 800b54a:	9304      	str	r3, [sp, #16]
 800b54c:	f898 1000 	ldrb.w	r1, [r8]
 800b550:	482a      	ldr	r0, [pc, #168]	; (800b5fc <_vfiprintf_r+0x220>)
 800b552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b556:	2206      	movs	r2, #6
 800b558:	f108 0701 	add.w	r7, r8, #1
 800b55c:	f7f4 fe58 	bl	8000210 <memchr>
 800b560:	2800      	cmp	r0, #0
 800b562:	d037      	beq.n	800b5d4 <_vfiprintf_r+0x1f8>
 800b564:	4b26      	ldr	r3, [pc, #152]	; (800b600 <_vfiprintf_r+0x224>)
 800b566:	bb1b      	cbnz	r3, 800b5b0 <_vfiprintf_r+0x1d4>
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	3307      	adds	r3, #7
 800b56c:	f023 0307 	bic.w	r3, r3, #7
 800b570:	3308      	adds	r3, #8
 800b572:	9303      	str	r3, [sp, #12]
 800b574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b576:	444b      	add	r3, r9
 800b578:	9309      	str	r3, [sp, #36]	; 0x24
 800b57a:	e750      	b.n	800b41e <_vfiprintf_r+0x42>
 800b57c:	fb05 3202 	mla	r2, r5, r2, r3
 800b580:	2001      	movs	r0, #1
 800b582:	4688      	mov	r8, r1
 800b584:	e78a      	b.n	800b49c <_vfiprintf_r+0xc0>
 800b586:	2300      	movs	r3, #0
 800b588:	f108 0801 	add.w	r8, r8, #1
 800b58c:	9305      	str	r3, [sp, #20]
 800b58e:	4619      	mov	r1, r3
 800b590:	250a      	movs	r5, #10
 800b592:	4640      	mov	r0, r8
 800b594:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b598:	3a30      	subs	r2, #48	; 0x30
 800b59a:	2a09      	cmp	r2, #9
 800b59c:	d903      	bls.n	800b5a6 <_vfiprintf_r+0x1ca>
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0c3      	beq.n	800b52a <_vfiprintf_r+0x14e>
 800b5a2:	9105      	str	r1, [sp, #20]
 800b5a4:	e7c1      	b.n	800b52a <_vfiprintf_r+0x14e>
 800b5a6:	fb05 2101 	mla	r1, r5, r1, r2
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	4680      	mov	r8, r0
 800b5ae:	e7f0      	b.n	800b592 <_vfiprintf_r+0x1b6>
 800b5b0:	ab03      	add	r3, sp, #12
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4b13      	ldr	r3, [pc, #76]	; (800b604 <_vfiprintf_r+0x228>)
 800b5b8:	a904      	add	r1, sp, #16
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7fd feb2 	bl	8009324 <_printf_float>
 800b5c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5c4:	4681      	mov	r9, r0
 800b5c6:	d1d5      	bne.n	800b574 <_vfiprintf_r+0x198>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	065b      	lsls	r3, r3, #25
 800b5cc:	f53f af7e 	bmi.w	800b4cc <_vfiprintf_r+0xf0>
 800b5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5d2:	e77d      	b.n	800b4d0 <_vfiprintf_r+0xf4>
 800b5d4:	ab03      	add	r3, sp, #12
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	4622      	mov	r2, r4
 800b5da:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <_vfiprintf_r+0x228>)
 800b5dc:	a904      	add	r1, sp, #16
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f7fe f956 	bl	8009890 <_printf_i>
 800b5e4:	e7ec      	b.n	800b5c0 <_vfiprintf_r+0x1e4>
 800b5e6:	bf00      	nop
 800b5e8:	08017940 	.word	0x08017940
 800b5ec:	08017a7c 	.word	0x08017a7c
 800b5f0:	08017960 	.word	0x08017960
 800b5f4:	08017920 	.word	0x08017920
 800b5f8:	08017a82 	.word	0x08017a82
 800b5fc:	08017a86 	.word	0x08017a86
 800b600:	08009325 	.word	0x08009325
 800b604:	0800b3b7 	.word	0x0800b3b7

0800b608 <__sread>:
 800b608:	b510      	push	{r4, lr}
 800b60a:	460c      	mov	r4, r1
 800b60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b610:	f000 f8a6 	bl	800b760 <_read_r>
 800b614:	2800      	cmp	r0, #0
 800b616:	bfab      	itete	ge
 800b618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b61a:	89a3      	ldrhlt	r3, [r4, #12]
 800b61c:	181b      	addge	r3, r3, r0
 800b61e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b622:	bfac      	ite	ge
 800b624:	6563      	strge	r3, [r4, #84]	; 0x54
 800b626:	81a3      	strhlt	r3, [r4, #12]
 800b628:	bd10      	pop	{r4, pc}

0800b62a <__swrite>:
 800b62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62e:	461f      	mov	r7, r3
 800b630:	898b      	ldrh	r3, [r1, #12]
 800b632:	05db      	lsls	r3, r3, #23
 800b634:	4605      	mov	r5, r0
 800b636:	460c      	mov	r4, r1
 800b638:	4616      	mov	r6, r2
 800b63a:	d505      	bpl.n	800b648 <__swrite+0x1e>
 800b63c:	2302      	movs	r3, #2
 800b63e:	2200      	movs	r2, #0
 800b640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b644:	f000 f868 	bl	800b718 <_lseek_r>
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b64e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b652:	81a3      	strh	r3, [r4, #12]
 800b654:	4632      	mov	r2, r6
 800b656:	463b      	mov	r3, r7
 800b658:	4628      	mov	r0, r5
 800b65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b65e:	f000 b817 	b.w	800b690 <_write_r>

0800b662 <__sseek>:
 800b662:	b510      	push	{r4, lr}
 800b664:	460c      	mov	r4, r1
 800b666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b66a:	f000 f855 	bl	800b718 <_lseek_r>
 800b66e:	1c43      	adds	r3, r0, #1
 800b670:	89a3      	ldrh	r3, [r4, #12]
 800b672:	bf15      	itete	ne
 800b674:	6560      	strne	r0, [r4, #84]	; 0x54
 800b676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b67a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b67e:	81a3      	strheq	r3, [r4, #12]
 800b680:	bf18      	it	ne
 800b682:	81a3      	strhne	r3, [r4, #12]
 800b684:	bd10      	pop	{r4, pc}

0800b686 <__sclose>:
 800b686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b68a:	f000 b813 	b.w	800b6b4 <_close_r>
	...

0800b690 <_write_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4c07      	ldr	r4, [pc, #28]	; (800b6b0 <_write_r+0x20>)
 800b694:	4605      	mov	r5, r0
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	2200      	movs	r2, #0
 800b69c:	6022      	str	r2, [r4, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7f6 fa5f 	bl	8001b62 <_write>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_write_r+0x1e>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_write_r+0x1e>
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	20001314 	.word	0x20001314

0800b6b4 <_close_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4c06      	ldr	r4, [pc, #24]	; (800b6d0 <_close_r+0x1c>)
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	4608      	mov	r0, r1
 800b6be:	6023      	str	r3, [r4, #0]
 800b6c0:	f7f6 fa6b 	bl	8001b9a <_close>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_close_r+0x1a>
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_close_r+0x1a>
 800b6cc:	602b      	str	r3, [r5, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	20001314 	.word	0x20001314

0800b6d4 <_fstat_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4c07      	ldr	r4, [pc, #28]	; (800b6f4 <_fstat_r+0x20>)
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4605      	mov	r5, r0
 800b6dc:	4608      	mov	r0, r1
 800b6de:	4611      	mov	r1, r2
 800b6e0:	6023      	str	r3, [r4, #0]
 800b6e2:	f7f6 fa66 	bl	8001bb2 <_fstat>
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	d102      	bne.n	800b6f0 <_fstat_r+0x1c>
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	b103      	cbz	r3, 800b6f0 <_fstat_r+0x1c>
 800b6ee:	602b      	str	r3, [r5, #0]
 800b6f0:	bd38      	pop	{r3, r4, r5, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20001314 	.word	0x20001314

0800b6f8 <_isatty_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	4c06      	ldr	r4, [pc, #24]	; (800b714 <_isatty_r+0x1c>)
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	4605      	mov	r5, r0
 800b700:	4608      	mov	r0, r1
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	f7f6 fa65 	bl	8001bd2 <_isatty>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	d102      	bne.n	800b712 <_isatty_r+0x1a>
 800b70c:	6823      	ldr	r3, [r4, #0]
 800b70e:	b103      	cbz	r3, 800b712 <_isatty_r+0x1a>
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	bd38      	pop	{r3, r4, r5, pc}
 800b714:	20001314 	.word	0x20001314

0800b718 <_lseek_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4c07      	ldr	r4, [pc, #28]	; (800b738 <_lseek_r+0x20>)
 800b71c:	4605      	mov	r5, r0
 800b71e:	4608      	mov	r0, r1
 800b720:	4611      	mov	r1, r2
 800b722:	2200      	movs	r2, #0
 800b724:	6022      	str	r2, [r4, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	f7f6 fa5e 	bl	8001be8 <_lseek>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d102      	bne.n	800b736 <_lseek_r+0x1e>
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	b103      	cbz	r3, 800b736 <_lseek_r+0x1e>
 800b734:	602b      	str	r3, [r5, #0]
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	20001314 	.word	0x20001314

0800b73c <__ascii_mbtowc>:
 800b73c:	b082      	sub	sp, #8
 800b73e:	b901      	cbnz	r1, 800b742 <__ascii_mbtowc+0x6>
 800b740:	a901      	add	r1, sp, #4
 800b742:	b142      	cbz	r2, 800b756 <__ascii_mbtowc+0x1a>
 800b744:	b14b      	cbz	r3, 800b75a <__ascii_mbtowc+0x1e>
 800b746:	7813      	ldrb	r3, [r2, #0]
 800b748:	600b      	str	r3, [r1, #0]
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	1c10      	adds	r0, r2, #0
 800b74e:	bf18      	it	ne
 800b750:	2001      	movne	r0, #1
 800b752:	b002      	add	sp, #8
 800b754:	4770      	bx	lr
 800b756:	4610      	mov	r0, r2
 800b758:	e7fb      	b.n	800b752 <__ascii_mbtowc+0x16>
 800b75a:	f06f 0001 	mvn.w	r0, #1
 800b75e:	e7f8      	b.n	800b752 <__ascii_mbtowc+0x16>

0800b760 <_read_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4c07      	ldr	r4, [pc, #28]	; (800b780 <_read_r+0x20>)
 800b764:	4605      	mov	r5, r0
 800b766:	4608      	mov	r0, r1
 800b768:	4611      	mov	r1, r2
 800b76a:	2200      	movs	r2, #0
 800b76c:	6022      	str	r2, [r4, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	f7f6 f9da 	bl	8001b28 <_read>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_read_r+0x1e>
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_read_r+0x1e>
 800b77c:	602b      	str	r3, [r5, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	20001314 	.word	0x20001314

0800b784 <__ascii_wctomb>:
 800b784:	b149      	cbz	r1, 800b79a <__ascii_wctomb+0x16>
 800b786:	2aff      	cmp	r2, #255	; 0xff
 800b788:	bf85      	ittet	hi
 800b78a:	238a      	movhi	r3, #138	; 0x8a
 800b78c:	6003      	strhi	r3, [r0, #0]
 800b78e:	700a      	strbls	r2, [r1, #0]
 800b790:	f04f 30ff 	movhi.w	r0, #4294967295
 800b794:	bf98      	it	ls
 800b796:	2001      	movls	r0, #1
 800b798:	4770      	bx	lr
 800b79a:	4608      	mov	r0, r1
 800b79c:	4770      	bx	lr
	...

0800b7a0 <expf>:
 800b7a0:	b530      	push	{r4, r5, lr}
 800b7a2:	ed2d 8b02 	vpush	{d8}
 800b7a6:	4d35      	ldr	r5, [pc, #212]	; (800b87c <expf+0xdc>)
 800b7a8:	b08b      	sub	sp, #44	; 0x2c
 800b7aa:	eeb0 8a40 	vmov.f32	s16, s0
 800b7ae:	f000 f871 	bl	800b894 <__ieee754_expf>
 800b7b2:	f995 3000 	ldrsb.w	r3, [r5]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	ee10 4a10 	vmov	r4, s0
 800b7bc:	d030      	beq.n	800b820 <expf+0x80>
 800b7be:	eeb0 0a48 	vmov.f32	s0, s16
 800b7c2:	f000 f93d 	bl	800ba40 <finitef>
 800b7c6:	b358      	cbz	r0, 800b820 <expf+0x80>
 800b7c8:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800b880 <expf+0xe0>
 800b7cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d4:	dd35      	ble.n	800b842 <expf+0xa2>
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	4b2a      	ldr	r3, [pc, #168]	; (800b884 <expf+0xe4>)
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	ee18 0a10 	vmov	r0, s16
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9308      	str	r3, [sp, #32]
 800b7e6:	f7f4 fec7 	bl	8000578 <__aeabi_f2d>
 800b7ea:	f995 3000 	ldrsb.w	r3, [r5]
 800b7ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7f6:	b9cb      	cbnz	r3, 800b82c <expf+0x8c>
 800b7f8:	4b23      	ldr	r3, [pc, #140]	; (800b888 <expf+0xe8>)
 800b7fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b7fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b802:	4668      	mov	r0, sp
 800b804:	f000 f91a 	bl	800ba3c <matherr>
 800b808:	b1b0      	cbz	r0, 800b838 <expf+0x98>
 800b80a:	9b08      	ldr	r3, [sp, #32]
 800b80c:	b11b      	cbz	r3, 800b816 <expf+0x76>
 800b80e:	f7fd fc07 	bl	8009020 <__errno>
 800b812:	9b08      	ldr	r3, [sp, #32]
 800b814:	6003      	str	r3, [r0, #0]
 800b816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b81a:	f7f5 f9dd 	bl	8000bd8 <__aeabi_d2f>
 800b81e:	4604      	mov	r4, r0
 800b820:	ee00 4a10 	vmov	s0, r4
 800b824:	b00b      	add	sp, #44	; 0x2c
 800b826:	ecbd 8b02 	vpop	{d8}
 800b82a:	bd30      	pop	{r4, r5, pc}
 800b82c:	4917      	ldr	r1, [pc, #92]	; (800b88c <expf+0xec>)
 800b82e:	2000      	movs	r0, #0
 800b830:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b834:	2b02      	cmp	r3, #2
 800b836:	d1e4      	bne.n	800b802 <expf+0x62>
 800b838:	f7fd fbf2 	bl	8009020 <__errno>
 800b83c:	2322      	movs	r3, #34	; 0x22
 800b83e:	6003      	str	r3, [r0, #0]
 800b840:	e7e3      	b.n	800b80a <expf+0x6a>
 800b842:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b890 <expf+0xf0>
 800b846:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84e:	d5e7      	bpl.n	800b820 <expf+0x80>
 800b850:	2304      	movs	r3, #4
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	4b0b      	ldr	r3, [pc, #44]	; (800b884 <expf+0xe4>)
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	ee18 0a10 	vmov	r0, s16
 800b85c:	2300      	movs	r3, #0
 800b85e:	9308      	str	r3, [sp, #32]
 800b860:	f7f4 fe8a 	bl	8000578 <__aeabi_f2d>
 800b864:	2300      	movs	r3, #0
 800b866:	2200      	movs	r2, #0
 800b868:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b86c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b874:	f995 3000 	ldrsb.w	r3, [r5]
 800b878:	e7dc      	b.n	800b834 <expf+0x94>
 800b87a:	bf00      	nop
 800b87c:	20000988 	.word	0x20000988
 800b880:	42b17180 	.word	0x42b17180
 800b884:	08017b98 	.word	0x08017b98
 800b888:	47efffff 	.word	0x47efffff
 800b88c:	7ff00000 	.word	0x7ff00000
 800b890:	c2cff1b5 	.word	0xc2cff1b5

0800b894 <__ieee754_expf>:
 800b894:	ee10 2a10 	vmov	r2, s0
 800b898:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b89c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b8a0:	d902      	bls.n	800b8a8 <__ieee754_expf+0x14>
 800b8a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b8a6:	4770      	bx	lr
 800b8a8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800b8ac:	d106      	bne.n	800b8bc <__ieee754_expf+0x28>
 800b8ae:	eddf 7a51 	vldr	s15, [pc, #324]	; 800b9f4 <__ieee754_expf+0x160>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	bf18      	it	ne
 800b8b6:	eeb0 0a67 	vmovne.f32	s0, s15
 800b8ba:	4770      	bx	lr
 800b8bc:	484e      	ldr	r0, [pc, #312]	; (800b9f8 <__ieee754_expf+0x164>)
 800b8be:	4282      	cmp	r2, r0
 800b8c0:	dd04      	ble.n	800b8cc <__ieee754_expf+0x38>
 800b8c2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800b9fc <__ieee754_expf+0x168>
 800b8c6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b8ca:	4770      	bx	lr
 800b8cc:	2a00      	cmp	r2, #0
 800b8ce:	da03      	bge.n	800b8d8 <__ieee754_expf+0x44>
 800b8d0:	4a4b      	ldr	r2, [pc, #300]	; (800ba00 <__ieee754_expf+0x16c>)
 800b8d2:	4291      	cmp	r1, r2
 800b8d4:	f200 808a 	bhi.w	800b9ec <__ieee754_expf+0x158>
 800b8d8:	4a4a      	ldr	r2, [pc, #296]	; (800ba04 <__ieee754_expf+0x170>)
 800b8da:	4291      	cmp	r1, r2
 800b8dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b8e0:	d954      	bls.n	800b98c <__ieee754_expf+0xf8>
 800b8e2:	4a49      	ldr	r2, [pc, #292]	; (800ba08 <__ieee754_expf+0x174>)
 800b8e4:	4291      	cmp	r1, r2
 800b8e6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b8ea:	d836      	bhi.n	800b95a <__ieee754_expf+0xc6>
 800b8ec:	4947      	ldr	r1, [pc, #284]	; (800ba0c <__ieee754_expf+0x178>)
 800b8ee:	4411      	add	r1, r2
 800b8f0:	ed91 7a00 	vldr	s14, [r1]
 800b8f4:	4946      	ldr	r1, [pc, #280]	; (800ba10 <__ieee754_expf+0x17c>)
 800b8f6:	440a      	add	r2, r1
 800b8f8:	edd2 7a00 	vldr	s15, [r2]
 800b8fc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b900:	f1c3 0201 	rsb	r2, r3, #1
 800b904:	1ad2      	subs	r2, r2, r3
 800b906:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b90a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800b90e:	eddf 5a41 	vldr	s11, [pc, #260]	; 800ba14 <__ieee754_expf+0x180>
 800b912:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800ba18 <__ieee754_expf+0x184>
 800b916:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800b91a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800ba1c <__ieee754_expf+0x188>
 800b91e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800b922:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800ba20 <__ieee754_expf+0x18c>
 800b926:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800b92a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ba24 <__ieee754_expf+0x190>
 800b92e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800b932:	eeb0 5a40 	vmov.f32	s10, s0
 800b936:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800b93a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b93e:	eef0 6a45 	vmov.f32	s13, s10
 800b942:	ee20 5a05 	vmul.f32	s10, s0, s10
 800b946:	bb92      	cbnz	r2, 800b9ae <__ieee754_expf+0x11a>
 800b948:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800b94c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b950:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b954:	ee36 0a40 	vsub.f32	s0, s12, s0
 800b958:	4770      	bx	lr
 800b95a:	4b33      	ldr	r3, [pc, #204]	; (800ba28 <__ieee754_expf+0x194>)
 800b95c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ba2c <__ieee754_expf+0x198>
 800b960:	4413      	add	r3, r2
 800b962:	edd3 7a00 	vldr	s15, [r3]
 800b966:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b96a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ba30 <__ieee754_expf+0x19c>
 800b96e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b972:	ee17 2a90 	vmov	r2, s15
 800b976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b97a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b97e:	eeb0 7a40 	vmov.f32	s14, s0
 800b982:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800ba34 <__ieee754_expf+0x1a0>
 800b986:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b98a:	e7bc      	b.n	800b906 <__ieee754_expf+0x72>
 800b98c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800b990:	d20b      	bcs.n	800b9aa <__ieee754_expf+0x116>
 800b992:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800b9fc <__ieee754_expf+0x168>
 800b996:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b99a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800b99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a2:	dd02      	ble.n	800b9aa <__ieee754_expf+0x116>
 800b9a4:	ee30 0a06 	vadd.f32	s0, s0, s12
 800b9a8:	4770      	bx	lr
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	e7ad      	b.n	800b90a <__ieee754_expf+0x76>
 800b9ae:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800b9b2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b9b6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800b9ba:	bfb8      	it	lt
 800b9bc:	3264      	addlt	r2, #100	; 0x64
 800b9be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b9c2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b9c6:	ee76 7a40 	vsub.f32	s15, s12, s0
 800b9ca:	ee17 3a90 	vmov	r3, s15
 800b9ce:	bfab      	itete	ge
 800b9d0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b9d4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b9d8:	ee00 3a10 	vmovge	s0, r3
 800b9dc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800ba38 <__ieee754_expf+0x1a4>
 800b9e0:	bfbc      	itt	lt
 800b9e2:	ee00 3a10 	vmovlt	s0, r3
 800b9e6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b9ea:	4770      	bx	lr
 800b9ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b9f4 <__ieee754_expf+0x160>
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	00000000 	.word	0x00000000
 800b9f8:	42b17217 	.word	0x42b17217
 800b9fc:	7149f2ca 	.word	0x7149f2ca
 800ba00:	42cff1b5 	.word	0x42cff1b5
 800ba04:	3eb17218 	.word	0x3eb17218
 800ba08:	3f851591 	.word	0x3f851591
 800ba0c:	08017ba8 	.word	0x08017ba8
 800ba10:	08017bb0 	.word	0x08017bb0
 800ba14:	3331bb4c 	.word	0x3331bb4c
 800ba18:	b5ddea0e 	.word	0xb5ddea0e
 800ba1c:	388ab355 	.word	0x388ab355
 800ba20:	bb360b61 	.word	0xbb360b61
 800ba24:	3e2aaaab 	.word	0x3e2aaaab
 800ba28:	08017ba0 	.word	0x08017ba0
 800ba2c:	3fb8aa3b 	.word	0x3fb8aa3b
 800ba30:	3f317180 	.word	0x3f317180
 800ba34:	3717f7d1 	.word	0x3717f7d1
 800ba38:	0d800000 	.word	0x0d800000

0800ba3c <matherr>:
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	4770      	bx	lr

0800ba40 <finitef>:
 800ba40:	ee10 3a10 	vmov	r3, s0
 800ba44:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800ba48:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ba4c:	bfac      	ite	ge
 800ba4e:	2000      	movge	r0, #0
 800ba50:	2001      	movlt	r0, #1
 800ba52:	4770      	bx	lr

0800ba54 <_init>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	bf00      	nop
 800ba58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5a:	bc08      	pop	{r3}
 800ba5c:	469e      	mov	lr, r3
 800ba5e:	4770      	bx	lr

0800ba60 <_fini>:
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	bf00      	nop
 800ba64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba66:	bc08      	pop	{r3}
 800ba68:	469e      	mov	lr, r3
 800ba6a:	4770      	bx	lr
